"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vertex_1 = __importDefault(require("./vertex"));
/**
 * @description Edge filter type that can be used to match edges based on a supplied filter.
 * @export
 * @class EdgeFilter
 */
class EdgeFilter {
    /**
     * @description Creates an instance of EdgeFilter.
     * @param {(string | types.EdgeSelector)} filter The filter definition to use.
     * @memberof EdgeFilter
     */
    constructor(filter) {
        this._filter = filter;
    }
    /**
     * @description Checks if the configured filter matches the specified edge.
     * @param {Edge} edge The edge to match.
     * @returns
     * @memberof EdgeFilter
     */
    match(edge) {
        if (!this._filter) {
            return true;
        }
        if (typeof this._filter === 'string') {
            return edge.label === this._filter;
        }
        return this._filter(edge);
    }
}
exports.EdgeFilter = EdgeFilter;
/**
 * @description Represents an edge in the graph with outgoing and incoming vertex references.
 * @export
 * @class Edge
 */
class Edge {
    /**
     * @description Creates an instance of Edge.
     * @param {IndexEdge} indexEdge The edge index this edge wraps.
     * @memberof Edge
     */
    constructor(indexEdge, index) {
        if (!indexEdge) {
            throw new ReferenceError(`Invalid graphEdge. graphEdge is ${indexEdge}`);
        }
        if (!index) {
            throw new ReferenceError(`Invalid `);
        }
        this._graphEdge = indexEdge;
        this._index = index;
    }
    /**
     * @description Gets the id of the edge.
     * @readonly
     * @returns {string}
     * @memberof Edge
     */
    get id() {
        return this._graphEdge.id;
    }
    /**
     * @description Gets the edge label.
     * @readonly
     * @type {string}
     * @memberof Edge
     */
    get label() {
        return this._graphEdge.label;
    }
    /**
     * @description Gets the reference to the outgoing vertex.
     * @readonly
     * @type {Vertex}
     * @memberof Edge
     */
    get fromVertex() {
        const node = this._index.getNode(this._graphEdge.fromNodeId);
        return new vertex_1.default(node, this._index);
    }
    /**
     * @description Gets the reference to the incoming vertex.
     * @readonly
     * @type {Vertex}
     * @memberof Edge
     */
    get toVertex() {
        const node = this._index.getNode(this._graphEdge.toNodeId);
        return new vertex_1.default(node, this._index);
    }
}
exports.Edge = Edge;
exports.default = Edge;
//# sourceMappingURL=edge.js.map