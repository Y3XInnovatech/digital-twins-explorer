export declare class IRI {
    private readonly _prefixes;
    addPrefix(prefix: string, iri: string): void;
    /**
     * @description Performs a compaction of an IRI by substituting a matching prefix. If the IRI is already compacted, the exact same string is returned.
     * @param {string} iri The IRI to compact.
     * @returns {string}
     * @memberof IRI
     */
    compact(iri: string): string;
    /**
     * @description Checks if two IRI's are equal.
     * @param {string} iriA The IRI to compare.
     * @param {string} iriB The IRI to compare.
     * @returns {boolean} True if both IRI's are equal, else false.
     * @memberof IRI
     */
    equal(iriA: string, iriB: string): boolean;
    /**
     * @description Performs an expansion of an IRI by fully expanding a prefix. If the IRI is already expanded, the exact same string is returned.
     * @param {string} iri The compact IRI to expand.
     * @returns {string}
     * @memberof IRI
     */
    expand(iri: string): string;
    /**w
     * @description Removes a prefix.
     * @param {string} prefix The prefix to remove.
     * @memberof IRI
     */
    removePrefix(prefix: string): void;
}
export default IRI;
