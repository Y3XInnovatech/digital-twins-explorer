"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class GraphError extends Error {
    constructor(message) {
        super(message);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
    }
}
var Errors;
(function (Errors) {
    /**
     * @description Error thrown when an input document cannot be parsed.
     * @export
     * @class DocumentParseError
     * @extends {GraphError}
     */
    class DocumentParseError extends GraphError {
        /**
         *Creates an instance of DocumentParseError.
         * @param {*} innerError The parse error.
         * @memberof DocumentParseError
         */
        constructor(innerError) {
            super(`Failed to parse input. Error: ${innerError}`);
            this.innerError = innerError;
            this.name = 'DocumentParseError';
        }
    }
    Errors.DocumentParseError = DocumentParseError;
    /**
     * @description Error thrown when a duplicate prefix is detected.
     * @export
     * @class DuplicatePrefixError
     * @extends {GraphError}
     */
    class DuplicatePrefixError extends GraphError {
        /**
         * Creates an instance of DuplicatePrefixError.
         * @param {string} prefix The duplicate prefix name.
         * @memberof DuplicatePrefixError
         */
        constructor(prefix) {
            super(`The prefix ${prefix} has already been defined.`);
            this.prefix = prefix;
        }
    }
    Errors.DuplicatePrefixError = DuplicatePrefixError;
    /**
     * @description Error thrown when multiple prefixes are detected for a URI
     * @export
     * @class DuplicatePrefixUriError
     * @extends {GraphError}
     */
    class DuplicatePrefixUriError extends GraphError {
        /**
         * Creates an instance of DuplicatePrefixUriError.
         * @param {string} prefix The prefix that has already been registered for the URI.
         * @param {string} uri The URI for which a prefix has already been registered.
         * @memberof DuplicatePrefixUriError
         */
        constructor(prefix, uri) {
            super(`A prefix for uri ${uri} has already been registered with prefix ${prefix}`);
            this.prefix = prefix;
            this.uri = uri;
        }
    }
    Errors.DuplicatePrefixUriError = DuplicatePrefixUriError;
    /**
     * @description Error thrown when an referenced context is not found.
     * @export
     * @class ContextNotFoundError
     * @extends {GraphError}
     */
    class ContextNotFoundError extends GraphError {
        /**
         *Creates an instance of ContextNotFoundError.
         * @param {string} uri The uri of the context that was not found.
         * @memberof ContextNotFoundError
         */
        constructor(uri) {
            super(`Referenced context ${uri} was not found and remote contexts are disabled. Did you forget to add a context?`);
            this.uri = uri;
            this.name = 'ContextNotFoundError';
        }
    }
    Errors.ContextNotFoundError = ContextNotFoundError;
    /**
     * @description Error thrown when a context was not found or specified for an operation context.
     * @export
     * @class ContextNotSpecifiedError
     * @extends {GraphError}
     */
    class ContextNotSpecifiedError extends GraphError {
        /**
         *Creates an instance of ContextNotSpecifiedError.
         * @param {string} operationContext The operation context the error occurred.
         * @memberof ContextNotSpecifiedError
         */
        constructor(operationContext) {
            super(`A context was not specified implicitly or explicitly for operation ${operationContext}`);
            this.operationContext = operationContext;
            this.name = 'ContextNotSpecifiedError';
        }
    }
    Errors.ContextNotSpecifiedError = ContextNotSpecifiedError;
    /**
     * @description Error thrown when a duplicate context was found.
     * @export
     * @class DuplicateContextError
     * @extends {GraphError}
     */
    class DuplicateContextError extends GraphError {
        /**
         *Creates an instance of DuplicateContextError.
         * @param {string} uri The uri of the duplicate context.
         * @memberof DuplicateContextError
         */
        constructor(uri) {
            super(`Another context with uri ${uri} already exists.`);
            this.uri = uri;
            this.name = 'DuplicateContextError';
        }
    }
    Errors.DuplicateContextError = DuplicateContextError;
    /**
     * @description Error thrown when a edge is cyclical.
     * @export
     * @class IndexEdgeCyclicalError
     * @extends {GraphError}
     */
    class IndexEdgeCyclicalError extends GraphError {
        /**
         *Creates an instance of IndexEdgeCyclicalError.
         * @param {string} label The label of the edge.
         * @param {string} nodeId The id of the node that is referred to as both the outgoing and incoming.
         * @memberof IndexEdgeCyclicalError
         */
        constructor(label, nodeId) {
            super(`Cyclical index edge ${label} with outgoing and incoming node ${nodeId}`);
            this.label = label;
            this.nodeId = nodeId;
            this.name = 'IndexEdgeCyclicalError';
        }
    }
    Errors.IndexEdgeCyclicalError = IndexEdgeCyclicalError;
    /**
     * @description Error thrown when a duplicate edge was found.
     * @export
     * @class IndexEdgeDuplicateError
     * @extends {GraphError}
     */
    class IndexEdgeDuplicateError extends GraphError {
        /**
         *Creates an instance of IndexEdgeDuplicateError.
         * @param {string} label The edge label.
         * @param {string} fromNodeId Id of the outgoing node.
         * @param {string} toNodeId Id of the incoming node.
         * @memberof IndexEdgeDuplicateError
         */
        constructor(label, fromNodeId, toNodeId) {
            super(`Duplicate edge ${label} from node ${fromNodeId} to node ${toNodeId}`);
            this.label = label;
            this.fromNodeId = fromNodeId;
            this.toNodeId = toNodeId;
            this.name = 'IndexEdgeDuplicateError';
        }
    }
    Errors.IndexEdgeDuplicateError = IndexEdgeDuplicateError;
    /**
     * @description Error thrown when a node referred to by an index edge doesn't exist.
     * @export
     * @class IndexEdgeNodeNotFoundError
     * @extends {GraphError}
     */
    class IndexEdgeNodeNotFoundError extends GraphError {
        /**
         *Creates an instance of IndexEdgeNodeNotFoundError.
         * @param {string} label The edge label.
         * @param {string} fromNodeId The id of the outgoing node.
         * @param {string} direction The edge direction.
         * @memberof IndexEdgeNodeNotFoundError
         */
        constructor(label, fromNodeId, direction) {
            super(`Expected ${direction} node with id ${fromNodeId} was not found for edge ${label}`);
            this.label = label;
            this.fromNodeId = fromNodeId;
            this.direction = direction;
            this.name = 'IndexEdgeNotFoundError';
        }
    }
    Errors.IndexEdgeNodeNotFoundError = IndexEdgeNodeNotFoundError;
    /**
     * @description Error thrown when a duplicate node in the index is found.
     * @export
     * @class IndexNodeDuplicateError
     * @extends {GraphError}
     */
    class IndexNodeDuplicateError extends GraphError {
        /**
         * Creates an instance of IndexNodeDuplicateError.
         * @param {string} nodeId The id of the duplicate node.
         * @memberof IndexNodeDuplicateError
         */
        constructor(nodeId) {
            super(`Duplicate index node ${nodeId}`);
            this.nodeId = nodeId;
            this.name = 'IndexNodeDuplicateError';
        }
    }
    Errors.IndexNodeDuplicateError = IndexNodeDuplicateError;
    /**
     * @description Error thrown when a index node is not found.
     * @export
     * @class IndexNodeNotFoundError
     * @extends {GraphError}
     */
    class IndexNodeNotFoundError extends GraphError {
        /**
         * Creates an instance of IndexNodeNotFoundError.
         * @param {string} nodeId Id of the node that was not found.
         * @memberof IndexNodeNotFoundError
         */
        constructor(nodeId) {
            super(`A node with the id ${nodeId} was not found`);
            this.nodeId = nodeId;
            this.name = 'IndexNodeNotFoundError';
        }
    }
    Errors.IndexNodeNotFoundError = IndexNodeNotFoundError;
    /**
     * @description Error thrown when an invalid IRI is found.
     * @export
     * @class InvalidIriError
     * @extends {GraphError}
     */
    class InvalidIriError extends GraphError {
        /**
         * Creates an instance of InvalidIriError.
         * @param {string} iri The invalid iri string.
         * @param {string} error Error details.
         * @memberof InvalidIriError
         */
        constructor(iri, error) {
            super(`Invalid iri ${iri}. Error: ${error}`);
            this.iri = iri;
        }
    }
    Errors.InvalidIriError = InvalidIriError;
    /**
     * @description Error thrown when an invalid prefix format is found.
     * @export
     * @class InvalidPrefixError
     * @extends {GraphError}
     */
    class InvalidPrefixError extends GraphError {
        /**
         * Creates an instance of InvalidPrefixError.
         * @param {string} prefix The invalid prefix string.
         * @param {string} error Error details.
         * @memberof InvalidPrefixError
         */
        constructor(prefix, error) {
            super(`Invalid prefix ${prefix}. Error: ${error}`);
            this.prefix = prefix;
        }
    }
    Errors.InvalidPrefixError = InvalidPrefixError;
})(Errors = exports.Errors || (exports.Errors = {}));
exports.default = Errors;
//# sourceMappingURL=errors.js.map