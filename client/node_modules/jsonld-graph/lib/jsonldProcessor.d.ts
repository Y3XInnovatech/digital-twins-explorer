import Iterable from 'jsiterable';
/**
 * @description JsonldProcessor options.
 * @export
 * @interface JsonldProcessorOptions
 */
export interface JsonldProcessorOptions {
    /**
     * @description True to allow remotely loading contexts, else false.
     * @type {boolean}
     * @default true
     * @memberof JsonldProcessorOptions
     */
    remoteContexts?: boolean;
}
export declare class JsonldProcessor {
    private readonly _options;
    private readonly _contexts;
    private readonly _contextLoader;
    /**
     * @description Gets all contexts registered with the processor.
     * @readonly
     * @type {Iterable<[string, any]>}
     * @memberof JsonldProcessor
     */
    get contexts(): Iterable<[string, any]>;
    /**
     *Creates an instance of JsonldProcessor.
     * @param {JsonldProcessorOptions} [options={}] JsonldProcessor options.
     * @memberof JsonldProcessor
     */
    constructor(options?: JsonldProcessorOptions);
    /**
     * @description Adds a context to the processor.
     * @param {string} uri The uri of the context.
     * @param {*} context The context object.
     * @memberof JsonldProcessor
     */
    addContext(uri: string, context: any): void;
    /**
     * @description Performs a JSON-LD compaction.
     * @param {*} document The document to compact. NOTE: The document should already be in expanded form.
     * @param {any|any[]} [contexts]
     * @returns {Promise<any>}
     * @memberof JsonldProcessor
     */
    compact(document: any, contexts?: any | any[]): Promise<any>;
    /**
     * @description Performs a JSON-LD expansion.
     * @param {*} document The document to expand.
     * @param {any|any[]} [contexts] Optional contexts to use for expansion.
     * @returns {Promise<any>}
     * @memberof JsonldProcessor
     */
    expand(document: any, contexts?: any | any[], base?: string): Promise<any>;
    /**
     * @description Performs a JSON=LD flatten operation.
     * @param {*} document The document to flatten.
     * @param {any|any[]} [contexts] Optional contexts to use for expansion before flattening.
     * @returns {Promise<any[]>}
     * @memberof JsonldProcessor
     */
    flatten(document: any, contexts?: any | any[], base?: string): Promise<any | any[]>;
    /**
     * @description Performs a JSON-LD framing operation.
     * @param {*} document The document to frame.
     * @param {*} frame The JSON-LD frame instruction.
     * @param {any|any[]} [contexts] Optional expansion contexts to use for framing.
     * @returns {Promise<any>}
     * @memberof JsonldProcessor
     */
    frame(document: any, frame: any, contexts?: any | any[], base?: string): Promise<any>;
    /**
     * @description Removes a context from the processor.
     * @param {string} uri The uri of the context to remove.
     * @memberof JsonldProcessor
     */
    removeContext(uri: string): void;
}
export default JsonldProcessor;
