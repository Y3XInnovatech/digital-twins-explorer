/// <reference types="node" />
import { EventEmitter } from 'events';
import Iterable from 'jsiterable';
import Edge from './edge';
import Vertex, { VertexSelector } from './vertex';
import StrictEventEmitter from './eventEmitter';
import JsonFormatOptions from './formatOptions';
interface GraphEvents {
    edgeAdded(edge: Edge): void;
    edgeRemoved(edge: Edge): void;
    vertexAdded(vertex: Vertex): void;
    vertexIdChanged(vertex: Vertex, previousId: string): void;
    vertexRemoved(vertex: Vertex): void;
}
declare const JsonldGraph_base: new () => StrictEventEmitter<EventEmitter, GraphEvents, GraphEvents>;
export declare class JsonldGraph extends JsonldGraph_base {
    private readonly _index;
    /**
     * Creates an instance of JsonLdGraph.
     * @memberof JsonLdGraph
     */
    constructor(contexts?: {
        uri: string;
        context: any;
    }[]);
    /**
     * @description Gets the contexts registered with the graph.
     * @readonly
     * @type {Iterable<[string, any]>}
     * @memberof JsonldGraph
     */
    get contexts(): Iterable<[string, any]>;
    /**
     * @description Gets the count of edges in the graph.
     * @readonly
     * @type {number}
     * @memberof JsonLdGraph
     */
    get edgeCount(): number;
    /**
     * @description Gets the count of vertices in the graph.
     * @readonly
     * @type {number}
     * @memberof JsonLdGraph
     */
    get vertexCount(): number;
    /**
     * @description Adds a context.
     * @param {string} uri The uri of the context to add.
     * @param {*} context The context object.
     * @memberof JsonLdGraph
     */
    addContext(uri: string, context: any): void;
    /**
     * @description Adds a prefix to the graph that allows accessing and creating edges & vertices using short ids containing the prefix.
     * @param {string} prefix The prefix to add.
     * @param {string} uri A valid URI that the prefix maps to.
     * @memberof JsonldGraph
     */
    addPrefix(prefix: string, uri: string): void;
    /**
     * @description Creates a new vertex.
     * @param {string} id Id of the vertex to create.
     * @returns {Vertex}
     * @memberof JsonLdGraph
     */
    createVertex(id: string): Vertex;
    /**
     * @description Gets edges in the graph.
     * @param {string} [label] Optional label to filter only edges with the specified label.
     * @returns {Iterable<Edge>}
     * @memberof JsonLdGraph
     */
    getEdges(label?: string): Iterable<Edge>;
    /**
     * @description Gets all vertices with the specified incoming edge.
     * @param {string} edgeLabel The label of the incoming edge.
     * @param {(string | VertexSelector)} [vertexSelector] Optional vertex selector that is used to filter only matching vertices.
     * @returns {Iterable<Vertex>}
     * @memberof JsonLdGraph
     */
    getIncoming(edgeLabel: string, vertexSelector?: string | VertexSelector): Iterable<Vertex>;
    /**
     * @description Gets all vertices with the specified outgoing edge.
     * @param {string} edgeLabel The label of the outgoing edge.
     * @param {(string | VertexSelector)} [vertexSelector] Optional vertex selector that is used to filter only matching vertices.
     * @returns {Iterable<Vertex}
     * @memberof JsonLdGraph
     */
    getOutgoing(edgeLabel: string, vertexSelector?: string | VertexSelector): Iterable<Vertex>;
    /**
     * @description Gets all vertices in the graph.
     * @param {VertexSelector} [vertexSelector] Optional vertex selector that is used to filter only matching vertices.
     * @returns {Iterable<Vertex>}
     * @memberof JsonLdGraph
     */
    getVertices(vertexSelector?: VertexSelector): Iterable<Vertex>;
    /**
     * @description Gets a specific vertex in the graph.
     * @param {string} id Id of the vertex to get.
     * @returns {Vertex}
     * @memberof JsonLdGraph
     */
    getVertex(id: string): Vertex;
    /**
     * @description Checks if a edge exists.
     * @param {string} label The label of the edge.
     * @param {string} fromVertexId The outgoing vertex id.
     * @param {string} toVertexId The incoming vertex id.
     * @returns {boolean}
     * @memberof JsonLdGraph
     */
    hasEdge(label: string, fromVertexId: string, toVertexId: string): boolean;
    /**
     * @description Checks if a vertex exists.
     * @param {string} id The id of the vertex to check.
     * @returns {boolean}
     * @memberof JsonLdGraph
     */
    hasVertex(id: string): boolean;
    /**
     * @description Loads one or more documents into the graph.
     * @param {(any | any[])} inputs Input documents to load into the graph.
     * @param {string|string[]|object|object[]} [contexts] Optional contexts to use for importing the documents.
     * @param {string} [base] Optional base IRI of the inputs.
     * @returns {Promise<Set<string>>} A set containing all vertices that were created / added as part of the load.
     * @memberof JsonLdGraph
     */
    load(inputs: any | any[], contexts?: string | string[] | object | object[], base?: string): Promise<Set<string>>;
    /**
     * @description Merges a set of JSON-LD documents into the graph.
     * @param {(any | any[])} inputs The inputs to merge.
     * @param {string[]} [contexts] The contexts to merge.
     * @param {string} [base] The base IRI of the document.
     * @returns {Promise<Set<string>>} A set containing all vertices that were created / added as part of the load.
     * @memberof JsonLdGraph
     */
    merge(inputs: any | any[], contexts?: string | string[] | object | object[], base?: string): Promise<Set<string>>;
    /**
     * @description Removes a context.
     * @param {string} uri The uri of the context to remove.
     * @returns {void}
     * @memberof JsonLdGraph
     */
    removeContext(uri: string): void;
    /**
     * @description Removes a prefix previously added to the graph.
     * @param {string} prefix The prefix to remove from the graph.
     * @returns {void}
     * @memberof JsonldGraph
     */
    removePrefix(prefix: string): void;
    /**
     * @description Removes a vertex from the graph.
     * @param {(string | Vertex)} vertex The vertex id or vertex instance to remove from the graph.
     * @memberof JsonLdGraph
     */
    removeVertex(vertex: string | Vertex): void;
    /**
     * @description Gets a JSON representation of the graph.
     * @param {string[]} contexts Contexts to use for compaction.
     * @param {*} [frame] Optional frame to use for formatting the JSON output.
     * @returns {Promise<any>}
     * @memberof JsonLdGraph
     */
    toJson(options?: JsonFormatOptions): Promise<any>;
}
export default JsonldGraph;
