import Iterable from 'jsiterable';
import GraphIndex, { IndexNode, AttributeValue } from './graphIndex';
import JsonFormatOptions from './formatOptions';
/**
 * @description Vertex selector function.
 * @export
 * @interface VertexSelector
 */
export interface VertexSelector {
    (vertex: Vertex): boolean;
}
/**
 * @description Vertex filter type that can be used to match vertices based on a supplied filter.
 * @export
 * @class VertexFilter
 */
export declare class VertexFilter {
    private readonly _selector;
    /**
     * @description Creates an instance of VertexFilter.
     * @param {(string | types.VertexSelector)} selector The filter definition to use.
     * @memberof VertexFilter
     */
    constructor(selector?: string | VertexSelector);
    /**
     * @description Checks if the filter matches the specified vertex.
     * @param {Vertex} vertex The vertex to check.
     * @returns {boolean} True if the vertex is a match, else false.
     * @memberof VertexFilter
     */
    match(vertex: Vertex): boolean;
}
/**
 * @description Represents a vertex in the graph.
 * @export
 * @class Vertex
 */
export declare class Vertex {
    private _node;
    private readonly _index;
    /**
     * @description Creates an instance of Vertex.
     * @param {GraphNode} node The graph node this vertex wraps.
     * @memberof Vertex
     */
    constructor(node: IndexNode, index: GraphIndex);
    /**
     * @description Gets the id of the vertex.
     * @type {string}
     * @memberof Vertex
     */
    get id(): string;
    /**
     * @description Sets the id of the vertex.
     * @memberof Vertex
     */
    set id(id: string);
    /**
     * @description Gets all attributes defined in the vertex.
     * @readonly
     * @type {Iterable<[string, any]>}
     * @memberof Vertex
     */
    get attributes(): Iterable<[string, AttributeValue[]]>;
    /**
     * @description Returns true if the vertex is a blank node, else false.
     * @readonly
     * @type {boolean}
     * @memberof Vertex
     */
    get isBlankNode(): boolean;
    /**
     * @description Gets all vertices that have a @type outgoing edge to this vertex.
     * @readonly
     * @type {Iterable<Vertex>}
     * @memberof Vertex
     */
    get instances(): Iterable<Vertex>;
    /**
     * @description Gets metadata stored for the vertex.
     * @readonly
     * @type {*}
     * @memberof Vertex
     */
    get metadata(): any;
    /**
     * @description Gets all vertices that this vertex is a @type of.
     * @readonly
     * @type {Iterable<Vertex>}
     * @memberof Vertex
     */
    get types(): Iterable<Vertex>;
    /**
     * @description Adds an attribute value.
     * @param {string} name The name of the attribute.
     * @param {*} value The value to add.
     * @param {string} language The language the add an attribute value.
     * @returns {this}
     * @memberof Vertex
     */
    addAttributeValue(name: string, value: any, language?: string): this;
    /**
     * @description Deletes a specific attribute of the vertex.
     * @param {string} name The attribute name to delete.
     * @param {string} [language] The optional language whose value should be deleted.
     * @returns {this}
     * @memberof Vertex
     */
    deleteAttribute(name: string, language?: string): this;
    /**
     * @description Gets the value of an attribute.
     * @template T
     * @param {string} name The attribute label to get.
     * @param {string} [language] Optional localized language of the value.
     * @returns {T}
     * @memberof Vertex
     */
    getAttributeValue<T = string>(name: string, language?: string): T;
    /**
     * @description Gets all values set for an attribute.
     * @template T
     * @param {string} name
     * @param {string} [language]
     * @returns {T[]}
     * @memberof Vertex
     */
    getAttributeValues<T = string>(name: string): AttributeValue<T>[];
    /**
     * @description Gets all incoming vertices to this vertex.
     * @param {string} [edgeLabel] Optional edge label used to filter matching vertices with incoming edges with the specified label.
     * @returns {Iterable<{ label: string, fromVertex: Vertex }>}
     * @memberof Vertex
     */
    getIncoming(edgeLabel?: string): Iterable<{
        label: string;
        fromVertex: Vertex;
    }>;
    /**
     * @description Gets all outgoing vertices from this vertex.
     * @param {string} [edgeLabel] Optional edge label used to filter matching vertices with outgoing edges with the specified label.
     * @returns {Iterable<{ label: string, toVertex: Vertex }>}
     * @memberof Vertex
     */
    getOutgoing(edgeLabel?: string): Iterable<{
        label: string;
        toVertex: Vertex;
    }>;
    /**
     * @description Checks if an attribute has been defined on the vertex.
     * @param {string} name The name of the attribute to check.
     * @returns {boolean} True if the attribute has been defined, else false.
     * @memberof Vertex
     */
    hasAttribute(name: string): boolean;
    /**
     * @description Checks if an attribute exists and if has the specified value.
     * @param {string} name The name of the attribute to check.
     * @param {*} value The value of the attribute to check.
     * @returns {boolean} True if the value exists, else false.
     * @memberof Vertex
     */
    hasAttributeValue(name: string, value: any, language?: string): boolean;
    /**
     * @description Checks if the vertex is of a specific @type.
     * @param {string} typeId The type id to check for.
     * @returns {boolean} True if the vertex has a @type outgoing edge to the specified type id, else false.
     * @memberof Vertex
     */
    isType(typeId: string): boolean;
    /**
     * @description Removes incoming edges.
     * @param {string} [edgeLabel] Optional edge label used to remove only matching edges.
     * @param {(string | VertexSelector)} [selector] Optional vertex selector used to remove only matching vertices.
     * @returns {this}
     * @memberof Vertex
     */
    removeIncoming(edgeLabel?: string, selector?: string | VertexSelector): this;
    /**
     * @description Removes outgoing edges.
     * @param {string} [edgeLabel] Optional edge label used to remove only matching edges.
     * @param {(string | VertexSelector)} [selector] Optional vertex selector used to remove only matching vertices.
     * @returns {this}
     * @memberof Vertex
     */
    removeOutgoing(edgeLabel?: string, selector?: string | VertexSelector): this;
    /**
     * @description Removes one or more @type edges.
     * @param {...string[]} typeIds One or more type ids to remove.
     * @returns {this}
     * @memberof Vertex
     */
    removeType(...typeIds: string[]): this;
    /**
     * @description Replaces an attribute value.
     * @param {string} name The attribute name whose value should be replaced.
     * @param {*} value The value to replace.
     * @returns {this}
     * @memberof Vertex
     */
    replaceAttributeValue(name: string, value: any, language?: string): this;
    /**
     * @description Removes an attribute value.
     * @param {string} name The attribute name whose value should be removed.
     * @param {*} value The value to remove.
     * @returns {this}
     * @memberof Vertex
     */
    removeAttributeValue(name: string, value: any): this;
    /**
     * @description Sets an incoming relationship to another vertex.
     * @param {string} label The label of the incoming edge relationship.
     * @param {string} fromVertexId Id of the vertex to set the incoming relationship from.
     * @param {boolean} [createIfNotExists=false] True to create the incoming vertex if it doesn't exist. If false and the vertex is not found, a VertexNotFoundError is thrown.
     * @returns {this}
     * @memberof Vertex
     */
    setIncoming(label: string, fromVertexId: string, createIfNotExists?: boolean): this;
    /**
     * @description Sets an outgoing relationship to another vertex.
     * @param {string} label The label of the outgoing edge relationship.
     * @param {string} toVertexId Id of the vertex to set the outgoing relationship to.
     * @param {boolean} [createIfNotExists=false] True to create the outgoing vertex if not found. If false and the vertex does not exist, a VertexNotFoundError is thrown.
     * @returns {this}
     * @memberof Vertex
     */
    setOutgoing(label: string, toVertexId: string, createIfNotExists?: boolean): this;
    /**
     * @description Sets the @type of the vertex to one more types.
     * @param {...string[]} typeIds One more or type ids to set the @type of the vertex.
     * @returns {this}
     * @memberof Vertex
     */
    setType(...typeIds: string[]): this;
    /**
     * @description Returns a JSON representation of the vertex.
     * @param {string[]} contexts Contexts to use for compaction.
     * @param {any} [frame] Optional framing instruction for JSON formatting.
     * @returns {Promise<any>}
     * @memberof Vertex
     */
    toJson(options?: JsonFormatOptions): Promise<any>;
}
export default Vertex;
