import GraphIndex, { IndexEdge } from './graphIndex';
import Vertex from './vertex';
/**
 * @description Edge selector function.
 * @export
 * @interface EdgeSelector
 */
export interface EdgeSelector {
    (edge: Edge): boolean;
}
/**
 * @description Edge filter type that can be used to match edges based on a supplied filter.
 * @export
 * @class EdgeFilter
 */
export declare class EdgeFilter {
    private readonly _filter;
    /**
     * @description Creates an instance of EdgeFilter.
     * @param {(string | types.EdgeSelector)} filter The filter definition to use.
     * @memberof EdgeFilter
     */
    constructor(filter?: string | EdgeSelector);
    /**
     * @description Checks if the configured filter matches the specified edge.
     * @param {Edge} edge The edge to match.
     * @returns
     * @memberof EdgeFilter
     */
    match(edge: Edge): boolean;
}
/**
 * @description Represents an edge in the graph with outgoing and incoming vertex references.
 * @export
 * @class Edge
 */
export declare class Edge {
    private readonly _graphEdge;
    private readonly _index;
    /**
     * @description Creates an instance of Edge.
     * @param {IndexEdge} indexEdge The edge index this edge wraps.
     * @memberof Edge
     */
    constructor(indexEdge: IndexEdge, index: GraphIndex);
    /**
     * @description Gets the id of the edge.
     * @readonly
     * @returns {string}
     * @memberof Edge
     */
    get id(): string;
    /**
     * @description Gets the edge label.
     * @readonly
     * @type {string}
     * @memberof Edge
     */
    get label(): string;
    /**
     * @description Gets the reference to the outgoing vertex.
     * @readonly
     * @type {Vertex}
     * @memberof Edge
     */
    get fromVertex(): Vertex;
    /**
     * @description Gets the reference to the incoming vertex.
     * @readonly
     * @type {Vertex}
     * @memberof Edge
     */
    get toVertex(): Vertex;
}
export default Edge;
