/// <reference types="node" />
import { EventEmitter } from 'events';
import Iterable from 'jsiterable';
import IRI from './iri';
import StrictEventEmitter from './eventEmitter';
import JsonFormatOptions from './formatOptions';
interface IndexEvents {
    /**
     * @description Event raised when an edge gets created.
     * @memberof IndexEvents
     */
    edgeCreated(edge: IndexEdge): void;
    /**
     * @description Event raised when an edge is deleted.
     * @memberof IndexEvents
     */
    edgeDeleted(edge: IndexEdge): void;
    /**
     * @description Event raised when node is created.
     * @memberof IndexEvents
     */
    nodeCreated(node: IndexNode): void;
    /** Event raised when the id of a node in the index changes.
     * @description
     * @memberof IndexEvents
     */
    nodeIdChanged(node: IndexNode, previousId: string): void;
    /**
     * @description Event raised when a node gets deleted.
     * @memberof IndexEvents
     */
    nodeDeleted(node: IndexNode): void;
}
/**
 * @description Attribute value type.
 * @export
 * @interface AttributeValue
 * @template T
 */
export interface AttributeValue<T = any> {
    /**
     * @description Optional language of string values.
     * @type {string}
     * @memberof AttributeValue
     */
    language?: string;
    /**
     * @description The attribute value.
     * @type {T}
     * @memberof AttributeValue
     */
    value: T;
}
/**
 * @description Node in an index.
 * @export
 * @class IndexNode
 */
export declare class IndexNode {
    private _nodeId;
    private _nodeIndex;
    private readonly _index;
    private readonly _attributes;
    /**
     * @description Metadata object for tracking.
     * @memberof IndexNode
     */
    readonly metadata: {};
    /**
     * @description Creates an instance of IndexNode.
     * @param {string} id The id of the node.
     * @param {GraphIndex} The index the node belongs to.
     * @param {GraphIndex} index The index containing this node.
     * @memberof IndexNode
     */
    constructor(id: string, index: GraphIndex);
    /**
     * @description Gets the id of the node.
     * @readonly
     * @memberof IndexNode
     */
    get id(): string;
    /**
     * @description Sets the id of the node.
     * @memberof IndexNode
     */
    set id(id: string);
    /**
     * @description Gets the @index attribute of this node.
     * @memberof IndexNode
     */
    get index(): string;
    /**
     * @description Sets the @index attribute of this node.
     * @memberof IndexNode
     */
    set index(value: string);
    /**
     * @description Gets all the attributes defined on the node.
     * @readonly
     * @type {Iterable<[string, any]>}
     * @memberof IndexNode
     */
    get attributes(): Iterable<[string, AttributeValue[]]>;
    /**
     * @description Adds an attribute value.
     * @param {string} name The name of the attribute.
     * @param {*} value The value to add
     * @returns {this}
     * @memberof IndexNode
     */
    addAttributeValue(name: string, value: any, language?: string): this;
    /**
     * @description Deletes a attribute and its value.
     * @param {string} name The name of the attribute to delete.
     * @param {string} [language] The optional language whose value should be deleted.
     * @returns {this}
     * @memberof IndexNode
     */
    deleteAttribute(name: string, language?: string): this;
    /**
     * @description Gets an attribute value.
     * @template T
     * @param {string} name The name of the attribute value to get.
     * @returns {T}
     * @memberof IndexNode
     */
    getAttributeValues<T = any>(name: string): AttributeValue<T>[];
    /**
     * @description Checks if an attribute has been defined on the node.
     * @param {string} name The name of the attribute to check.
     * @returns {boolean} True if the attribute has been defined, else false.
     * @memberof IndexNode
     */
    hasAttribute(name: string): boolean;
    /**
     * @description Checks if an attribute has been defined and has the specified value.
     * @param {string} name The name of the attribute to check.
     * @param {*} value The value of the attribute to check.
     * @param {string} [language] Optional language.
     * @returns {boolean} True if the attribute has been defined and has the specified value.
     * @memberof IndexNode
     */
    hasAttributeValue(name: string, value: any, language?: string): boolean;
    /**
     * @description Removes an attribute value.
     * @param {string} name The name of the attribute whose value should be removed.
     * @param {string} value The value to remove.
     * @param {string} [language] Optional language to remove the value from.
     * @returns {this}
     * @memberof IndexNode
     */
    removeAttributeValue(name: string, value: any): this;
    /**
     * @description Sets an attribute value, replacing any existing value.
     * @param {string} name The name of the attribute to set.
     * @param {*} value The value to set.
     * @param {string} [language] Optional language to set the value for.
     * @returns {this}
     * @memberof IndexNode
     */
    setAttributeValue(name: string, value: any, language?: string): this;
    /**
     * @description Returns a JSON representation of the node.
     * @param {JsonFormatOptions} [options={}] Formatting options for the node.
     * @returns {Promise<any>}
     * @memberof IndexNode
     */
    toJson(options?: JsonFormatOptions): Promise<any>;
    /**
     * @description Converts the vertex into a triple form.
     * @returns {*} JSON object containing the triple
     * @memberof IndexNode
     */
    toTriple(): any;
}
/**
 * @description Edge in an index.
 * @export
 * @class IndexEdge
 */
export declare class IndexEdge {
    private readonly _label;
    private readonly _fromNodeId;
    private readonly _toNodeId;
    private readonly _index;
    /**
     *Creates an instance of IndexEdge.
     * @param {string} label The edge label.
     * @param {string} fromNodeId The outgoing node id.
     * @param {string} toNodeId The incoming node id.
     * @param {GraphIndex} index The index containing this edge.
     * @memberof IndexEdge
     */
    constructor(label: string, fromNodeId: string, toNodeId: string, index: GraphIndex);
    /**
     * @description Gets the id of the index.
     * @readonly
     * @type {string}
     * @memberof IndexEdge
     */
    get id(): string;
    /**
     * @description Gets the label of the edge.
     * @readonly
     * @type {string}
     * @memberof IndexEdge
     */
    get label(): string;
    /**
     * @description Gets the outgoing node id of the edge.
     * @readonly
     * @type {string}
     * @memberof IndexEdge
     */
    get fromNodeId(): string;
    /**
     * @description Gets the incoming node id of the edge.
     * @readonly
     * @type {string}
     * @memberof IndexEdge
     */
    get toNodeId(): string;
    /**
     * @description Generates a deterministic id for an edge.
     * @static
     * @param {string} label The label of the edge.
     * @param {string} fromNodeId The outgoing node id of the edge.
     * @param {string} toNodeId The incoming node id of the edge.
     * @returns
     * @memberof IndexEdge
     */
    static toId(label: string, fromNodeId: string, toNodeId: string): string;
}
declare const GraphIndex_base: new () => StrictEventEmitter<EventEmitter, IndexEvents, IndexEvents>;
/**
 * @description Index store for graph nodes and edges.
 * @export
 * @class GraphIndex
 */
export declare class GraphIndex extends GraphIndex_base {
    readonly iri: IRI;
    private readonly _edges;
    private readonly _index;
    private readonly _nodes;
    private readonly _processor;
    private static IX_EDGES_KEY;
    private static IX_EDGE_INCOMING_KEY;
    private static IX_EDGE_OUTGOING_KEY;
    private static IX_NODE_INCOMING_ALL_KEY;
    private static IX_NODE_INCOMING_EDGES;
    private static IX_NODE_OUTGOING_ALL;
    private static IX_NODE_OUTGOING_EDGES;
    constructor();
    /**
     * @description Gets the contexts registered with the index.
     * @readonly
     * @type {Iterable<[string, any]>}
     * @memberof GraphIndex
     */
    get contexts(): Iterable<[string, any]>;
    /**
     * @description Gets the count of nodes in the index.
     * @readonly
     * @type {number}
     * @memberof GraphIndex
     */
    get nodeCount(): number;
    /**
     * @description Gets the count of edges in the index.
     * @readonly
     * @type {number}
     * @memberof GraphIndex
     */
    get edgeCount(): number;
    /**
     * @description Adds a context to the index.
     * @param {string} id The id of the context to add.
     * @param {value} context The context to add.
     * @memberof GraphIndex
     */
    addContext(id: string, context: any): void;
    /**
     * @description Adds a prefix for a canonical URI
     * @param {string} prefix The prefix to add.
     * @param {string} uri The uri the prefix maps to.
     * @memberof GraphIndex
     */
    addPrefix(prefix: string, uri: string): void;
    /**
     * @description Adds a new node to the index.
     * @param {IndexNode} node The node instance to add.
     * @memberof GraphIndex
     */
    addNode(node: IndexNode): void;
    /**
     * @description Creates a new edge in the index.
     * @param {string} label The label of the edge to create.
     * @param {string} fromNodeId The edge outgoing node id.
     * @param {string} toNodeId The edge incoming node id.
     * @memberof GraphIndex
     */
    createEdge(label: string, fromNodeId: string, toNodeId: string): IndexEdge;
    /**
     * @description Creates a new node in the index.
     * @param {string} id The id of the node to create.
     * @returns {IndexNode}
     * @memberof GraphIndex
     */
    createNode(id: string): IndexNode;
    /**
     * @description Gets an edge in the index.
     * @param {string} label The label of the edge ot get.
     * @param {string} fromNodeId The edge outgoing node id.
     * @param {string} toNodeId The edge incoming node id.
     * @returns {IndexEdge}
     * @memberof GraphIndex
     */
    getEdge(label: string, fromNodeId: string, toNodeId: string): IndexEdge;
    /**
     * @description Gets edges in the index.
     * @param {string} [label] Optional label filter used to only return edges with the matching label.
     * @returns {IterableIterator<IndexEdge>}
     * @memberof GraphIndex
     */
    getEdges(label?: string): IterableIterator<IndexEdge>;
    /**
     * @description Gets all nodes that have an incoming edge with the specified label.
     * @param {string} label The incoming edge label.
     * @returns {IterableIterator<IndexNode>}
     * @memberof GraphIndex
     */
    getEdgeIncoming(label: string): IterableIterator<IndexNode>;
    /**
     * @description Gets all nodes that haven an outgoing edge with the specified label.
     * @param {string} label The outgoing edge label.
     * @returns {IterableIterator<IndexNode>}
     * @memberof GraphIndex
     */
    getEdgeOutgoing(label: string): IterableIterator<IndexNode>;
    /**
     * @description Gets a specific node in the index.
     * @param {string} id The id of the node to get.
     * @returns {IndexNode}
     * @memberof GraphIndex
     */
    getNode(id: string): IndexNode;
    /**
     * @description Gets all nodes in the index.
     * @returns {IterableIterator<IndexNode>}
     * @memberof GraphIndex
     */
    getNodes(): IterableIterator<IndexNode>;
    /**
     * @description Gets a node's incoming edges, along with the incoming node.
     * @param {string} id The node whose incoming edges and nodes are to be retrieved.
     * @param {string} [label] Optional label to filter only those incoming edges that match the specified label.
     * @returns {IterableIterator<{ edge: IndexEdge, node: IndexNode }>}
     * @memberof GraphIndex
     */
    getNodeIncoming(id: string, label?: string): IterableIterator<{
        edge: IndexEdge;
        node: IndexNode;
    }>;
    /**
     * @description Gets a node's outgoing edges, along with the outgoing node.
     * @param {string} id The node whose outgoing edges and nodes are to be retrieved.
     * @param {string} [label] Optional label to filter only those outgoing edges that match the specified label.
     * @returns {IterableIterator<{ edge: IndexEdge, node: IndexNode }>}
     * @memberof GraphIndex
     */
    getNodeOutgoing(id: string, label?: string): IterableIterator<{
        edge: IndexEdge;
        node: IndexNode;
    }>;
    /**
     * @description Checks if a specific edge exists.
     * @param {string} label The label of the edge.
     * @param {string} fromNodeId The edge outgoing node id.
     * @param {string} toNodeId The edge incoming node id.
     * @returns {boolean} True if the edge exists, else false.
     * @memberof GraphIndex
     */
    hasEdge(label: string, fromNodeId: string, toNodeId: string): boolean;
    /**
     * @description Checks if a specific node exists.
     * @param {string} id The id of the node to check for.
     * @returns {boolean} True if the node exists, else false.
     * @memberof GraphIndex
     */
    hasNode(id: string): boolean;
    /**
     * @description Loads a set of input JSON-LD documents into the index.
     * @param {(any | any[])} inputs The inputs to load.
     * @param {string|string[]|object|object[]} [contexts] The contexts to load.
     * @param {string} [base] The base IRI of the context.
     * @returns {Promise<Set<string>>}
     * @memberof GraphIndex
     */
    load(inputs: any | any[], contexts?: string | string[] | object | object[], base?: string): Promise<Set<string>>;
    /**
     * @description Loads and merges a set of input JSON-LD documents into the index.
     * @param {(any | any[])} inputs The inputs to merge.
     * @param {string|string[]|object|object[]} [contexts] The contexts to merge.
     * @param {string} [base] The base IRI of inputs.
     * @returns {Promise<Set<string>>}
     * @memberof GraphIndex
     */
    merge(inputs: any | any[], contexts?: string | string[] | object | object[], base?: string): Promise<Set<string>>;
    /**
     * @description Removes a context.
     * @param {string} uri The uri of the context to remove.
     * @memberof GraphIndex
     */
    removeContext(uri: string): void;
    /**
     * @description Removes an edge from the index.
     * @param {(string | IndexEdge)} edge The id or edge instance to remove from the index.
     * @returns {void}
     * @memberof GraphIndex
     */
    removeEdge(edge: string | IndexEdge): void;
    /**
     * @description Removes a node from the index.
     * @param {(string | IndexNode)} node The id or node instance to remove from the index.
     * @returns {void}
     * @memberof GraphIndex
     */
    removeNode(node: string | IndexNode): void;
    /**
     * @description Removes a prefix from the index.
     * @param {string} prefix The prefix string to remove.
     * @memberof GraphIndex
     */
    removePrefix(prefix: string): void;
    /**
     * @description Gets a JSON representation of the index.
     * @param {frame} [any] Optional frame instruction.
     * @returns {Promise<any>}
     * @memberof GraphIndex
     */
    toJson(options?: JsonFormatOptions): Promise<any>;
    private _createEdgeIndexKeys;
    private _deleteEdgeIndex;
    private _expandIdReferences;
    private _indexEdge;
    private _loadTriples;
    private _loadPredicate;
}
export default GraphIndex;
