declare class GraphError extends Error {
    constructor(message: string);
}
export declare namespace Errors {
    /**
     * @description Error thrown when an input document cannot be parsed.
     * @export
     * @class DocumentParseError
     * @extends {GraphError}
     */
    class DocumentParseError extends GraphError {
        innerError: any;
        /**
         *Creates an instance of DocumentParseError.
         * @param {*} innerError The parse error.
         * @memberof DocumentParseError
         */
        constructor(innerError: any);
    }
    /**
     * @description Error thrown when a duplicate prefix is detected.
     * @export
     * @class DuplicatePrefixError
     * @extends {GraphError}
     */
    class DuplicatePrefixError extends GraphError {
        readonly prefix: string;
        /**
         * Creates an instance of DuplicatePrefixError.
         * @param {string} prefix The duplicate prefix name.
         * @memberof DuplicatePrefixError
         */
        constructor(prefix: string);
    }
    /**
     * @description Error thrown when multiple prefixes are detected for a URI
     * @export
     * @class DuplicatePrefixUriError
     * @extends {GraphError}
     */
    class DuplicatePrefixUriError extends GraphError {
        readonly prefix: string;
        readonly uri: string;
        /**
         * Creates an instance of DuplicatePrefixUriError.
         * @param {string} prefix The prefix that has already been registered for the URI.
         * @param {string} uri The URI for which a prefix has already been registered.
         * @memberof DuplicatePrefixUriError
         */
        constructor(prefix: string, uri: string);
    }
    /**
     * @description Error thrown when an referenced context is not found.
     * @export
     * @class ContextNotFoundError
     * @extends {GraphError}
     */
    class ContextNotFoundError extends GraphError {
        readonly uri: string;
        /**
         *Creates an instance of ContextNotFoundError.
         * @param {string} uri The uri of the context that was not found.
         * @memberof ContextNotFoundError
         */
        constructor(uri: string);
    }
    /**
     * @description Error thrown when a context was not found or specified for an operation context.
     * @export
     * @class ContextNotSpecifiedError
     * @extends {GraphError}
     */
    class ContextNotSpecifiedError extends GraphError {
        operationContext: string;
        /**
         *Creates an instance of ContextNotSpecifiedError.
         * @param {string} operationContext The operation context the error occurred.
         * @memberof ContextNotSpecifiedError
         */
        constructor(operationContext: string);
    }
    /**
     * @description Error thrown when a duplicate context was found.
     * @export
     * @class DuplicateContextError
     * @extends {GraphError}
     */
    class DuplicateContextError extends GraphError {
        readonly uri: string;
        /**
         *Creates an instance of DuplicateContextError.
         * @param {string} uri The uri of the duplicate context.
         * @memberof DuplicateContextError
         */
        constructor(uri: string);
    }
    /**
     * @description Error thrown when a edge is cyclical.
     * @export
     * @class IndexEdgeCyclicalError
     * @extends {GraphError}
     */
    class IndexEdgeCyclicalError extends GraphError {
        readonly label: string;
        readonly nodeId: string;
        /**
         *Creates an instance of IndexEdgeCyclicalError.
         * @param {string} label The label of the edge.
         * @param {string} nodeId The id of the node that is referred to as both the outgoing and incoming.
         * @memberof IndexEdgeCyclicalError
         */
        constructor(label: string, nodeId: string);
    }
    /**
     * @description Error thrown when a duplicate edge was found.
     * @export
     * @class IndexEdgeDuplicateError
     * @extends {GraphError}
     */
    class IndexEdgeDuplicateError extends GraphError {
        readonly label: string;
        readonly fromNodeId: string;
        readonly toNodeId: string;
        /**
         *Creates an instance of IndexEdgeDuplicateError.
         * @param {string} label The edge label.
         * @param {string} fromNodeId Id of the outgoing node.
         * @param {string} toNodeId Id of the incoming node.
         * @memberof IndexEdgeDuplicateError
         */
        constructor(label: string, fromNodeId: string, toNodeId: string);
    }
    /**
     * @description Error thrown when a node referred to by an index edge doesn't exist.
     * @export
     * @class IndexEdgeNodeNotFoundError
     * @extends {GraphError}
     */
    class IndexEdgeNodeNotFoundError extends GraphError {
        readonly label: string;
        readonly fromNodeId: string;
        readonly direction: string;
        /**
         *Creates an instance of IndexEdgeNodeNotFoundError.
         * @param {string} label The edge label.
         * @param {string} fromNodeId The id of the outgoing node.
         * @param {string} direction The edge direction.
         * @memberof IndexEdgeNodeNotFoundError
         */
        constructor(label: string, fromNodeId: string, direction: string);
    }
    /**
     * @description Error thrown when a duplicate node in the index is found.
     * @export
     * @class IndexNodeDuplicateError
     * @extends {GraphError}
     */
    class IndexNodeDuplicateError extends GraphError {
        readonly nodeId: string;
        /**
         * Creates an instance of IndexNodeDuplicateError.
         * @param {string} nodeId The id of the duplicate node.
         * @memberof IndexNodeDuplicateError
         */
        constructor(nodeId: string);
    }
    /**
     * @description Error thrown when a index node is not found.
     * @export
     * @class IndexNodeNotFoundError
     * @extends {GraphError}
     */
    class IndexNodeNotFoundError extends GraphError {
        readonly nodeId: string;
        /**
         * Creates an instance of IndexNodeNotFoundError.
         * @param {string} nodeId Id of the node that was not found.
         * @memberof IndexNodeNotFoundError
         */
        constructor(nodeId: string);
    }
    /**
     * @description Error thrown when an invalid IRI is found.
     * @export
     * @class InvalidIriError
     * @extends {GraphError}
     */
    class InvalidIriError extends GraphError {
        readonly iri: string;
        /**
         * Creates an instance of InvalidIriError.
         * @param {string} iri The invalid iri string.
         * @param {string} error Error details.
         * @memberof InvalidIriError
         */
        constructor(iri: string, error: string);
    }
    /**
     * @description Error thrown when an invalid prefix format is found.
     * @export
     * @class InvalidPrefixError
     * @extends {GraphError}
     */
    class InvalidPrefixError extends GraphError {
        readonly prefix: string;
        /**
         * Creates an instance of InvalidPrefixError.
         * @param {string} prefix The invalid prefix string.
         * @param {string} error Error details.
         * @memberof InvalidPrefixError
         */
        constructor(prefix: string, error: string);
    }
}
export default Errors;
