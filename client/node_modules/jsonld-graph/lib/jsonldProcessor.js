"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsiterable_1 = __importDefault(require("jsiterable"));
const jsonld = __importStar(require("jsonld"));
const constants_1 = require("./constants");
const errors_1 = __importDefault(require("./errors"));
// tslint:disable-next-line:no-typeof-undefined
const remoteLoader = typeof process !== undefined && process.versions && process.versions.node
    ? jsonld.documentLoaders.node()
    : jsonld.documentLoaders.xhr();
class JsonldProcessor {
    /**
     *Creates an instance of JsonldProcessor.
     * @param {JsonldProcessorOptions} [options={}] JsonldProcessor options.
     * @memberof JsonldProcessor
     */
    constructor(options = {}) {
        this._contexts = new Map();
        this._contextLoader = (url) => __awaiter(this, void 0, void 0, function* () {
            if (this._contexts.has(url)) {
                return Promise.resolve({
                    contextUrl: null,
                    documentUrl: url,
                    document: this._contexts.get(url)
                });
            }
            // Check for lower-case contexts
            if (this._contexts.has(url.toLowerCase())) {
                return Promise.resolve({
                    contextUrl: null,
                    documentUrl: url,
                    document: this._contexts.get(url.toLowerCase())
                });
            }
            if (this._options.remoteContexts) {
                return remoteLoader(url);
            }
            throw new errors_1.default.ContextNotFoundError(url);
        });
        this._options = options;
    }
    /**
     * @description Gets all contexts registered with the processor.
     * @readonly
     * @type {Iterable<[string, any]>}
     * @memberof JsonldProcessor
     */
    get contexts() {
        return new jsiterable_1.default(this._contexts);
    }
    /**
     * @description Adds a context to the processor.
     * @param {string} uri The uri of the context.
     * @param {*} context The context object.
     * @memberof JsonldProcessor
     */
    addContext(uri, context) {
        if (!uri) {
            throw new ReferenceError(`Invalid uri. uri is ${uri}`);
        }
        if (!context) {
            throw new ReferenceError(`Invalid context. context is ${context}`);
        }
        if (typeof context !== 'object') {
            throw new ReferenceError(`Invalid context. Expected context to be a JSON object, but got ${typeof context}`);
        }
        const normalizedUri = uri.toLowerCase();
        if (this._contexts.has(normalizedUri)) {
            throw new errors_1.default.DuplicateContextError(uri);
        }
        this._contexts.set(normalizedUri, context);
    }
    /**
     * @description Performs a JSON-LD compaction.
     * @param {*} document The document to compact. NOTE: The document should already be in expanded form.
     * @param {any|any[]} [contexts]
     * @returns {Promise<any>}
     * @memberof JsonldProcessor
     */
    compact(document, contexts = []) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!document) {
                throw new ReferenceError(`Invalid document. document is ${document}`);
            }
            if (!document[constants_1.JsonldKeywords.context] && contexts.length === 0) {
                throw new errors_1.default.ContextNotSpecifiedError('jsonld.compact');
            }
            const compactionContext = contexts && contexts.length > 0 ? contexts : document[constants_1.JsonldKeywords.context];
            return jsonld.compact(document, compactionContext, {
                compactToRelative: true,
                graph: false,
                documentLoader: this._contextLoader
            });
        });
    }
    /**
     * @description Performs a JSON-LD expansion.
     * @param {*} document The document to expand.
     * @param {any|any[]} [contexts] Optional contexts to use for expansion.
     * @returns {Promise<any>}
     * @memberof JsonldProcessor
     */
    expand(document, contexts = [], base) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!document) {
                throw new ReferenceError(`Invalid document. document is ${document}`);
            }
            if (!document[constants_1.JsonldKeywords.context] && contexts.length === 0) {
                throw new errors_1.default.ContextNotSpecifiedError('jsonld.expand');
            }
            return jsonld.expand(document, {
                base,
                expandContext: contexts,
                documentLoader: this._contextLoader
            });
        });
    }
    /**
     * @description Performs a JSON=LD flatten operation.
     * @param {*} document The document to flatten.
     * @param {any|any[]} [contexts] Optional contexts to use for expansion before flattening.
     * @returns {Promise<any[]>}
     * @memberof JsonldProcessor
     */
    flatten(document, contexts = [], base) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!document) {
                throw new ReferenceError(`Invalid document. document is ${document}`);
            }
            if (!document[constants_1.JsonldKeywords.context] && contexts.length === 0) {
                throw new errors_1.default.ContextNotSpecifiedError('jsonld.flatten');
            }
            return jsonld.flatten(document, null, {
                base,
                expandContext: contexts,
                documentLoader: this._contextLoader
            });
        });
    }
    /**
     * @description Performs a JSON-LD framing operation.
     * @param {*} document The document to frame.
     * @param {*} frame The JSON-LD frame instruction.
     * @param {any|any[]} [contexts] Optional expansion contexts to use for framing.
     * @returns {Promise<any>}
     * @memberof JsonldProcessor
     */
    frame(document, frame, contexts = [], base) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!document) {
                throw new ReferenceError(`Invalid document. document is ${document}`);
            }
            if (!frame) {
                throw new ReferenceError(`Invalid frame. frame is ${frame}`);
            }
            return jsonld.frame(document, frame, {
                base,
                expandContext: contexts,
                documentLoader: this._contextLoader
            });
        });
    }
    /**
     * @description Removes a context from the processor.
     * @param {string} uri The uri of the context to remove.
     * @memberof JsonldProcessor
     */
    removeContext(uri) {
        if (!uri) {
            throw new ReferenceError(`Invalid uri. uri is ${uri}`);
        }
        this._contexts.delete(uri.toLowerCase());
    }
}
exports.JsonldProcessor = JsonldProcessor;
exports.default = JsonldProcessor;
//# sourceMappingURL=jsonldProcessor.js.map