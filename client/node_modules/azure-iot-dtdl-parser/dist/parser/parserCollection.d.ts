import { Parser } from "./parser";
/**
 * A collection of all static ParserObjects.
 * The properties on this object are populated at runtime as the parsers are loaded.
 * We do this to avoid circular dependencies.
 **/
export declare class ParserCollection {
    static ArrayInfoParser: Parser;
    static BooleanInfoParser: Parser;
    static CommandInfoParser: Parser;
    static CommandPayloadInfoParser: Parser;
    static CommandTypeInfoParser: Parser;
    static ComplexSchemaInfoParser: Parser;
    static ComponentInfoParser: Parser;
    static ContentInfoParser: Parser;
    static DateInfoParser: Parser;
    static DateTimeInfoParser: Parser;
    static DoubleInfoParser: Parser;
    static DurationInfoParser: Parser;
    static EntityInfoParser: Parser;
    static EnumInfoParser: Parser;
    static EnumValueInfoParser: Parser;
    static FieldInfoParser: Parser;
    static FloatInfoParser: Parser;
    static IntegerInfoParser: Parser;
    static InterfaceInfoParser: Parser;
    static LongInfoParser: Parser;
    static MapInfoParser: Parser;
    static MapKeyInfoParser: Parser;
    static MapValueInfoParser: Parser;
    static NamedEntityInfoParser: Parser;
    static NumericSchemaInfoParser: Parser;
    static ObjectInfoParser: Parser;
    static PrimitiveSchemaInfoParser: Parser;
    static PropertyInfoParser: Parser;
    static RelationshipInfoParser: Parser;
    static SchemaInfoParser: Parser;
    static SchemaFieldInfoParser: Parser;
    static StringInfoParser: Parser;
    static TelemetryInfoParser: Parser;
    static TemporalSchemaInfoParser: Parser;
    static TimeInfoParser: Parser;
    static UnitInfoParser: Parser;
    static UnitAttributeInfoParser: Parser;
    static CommandRequestInfoParser: Parser;
    static CommandResponseInfoParser: Parser;
    static LatentTypeInfoParser: Parser;
    static NamedLatentTypeInfoParser: Parser;
    static ReferenceInfoParser: Parser;
}
//# sourceMappingURL=parserCollection.d.ts.map