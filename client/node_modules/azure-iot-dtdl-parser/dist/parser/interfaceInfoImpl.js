"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/* eslint-disable valid-jsdoc */
/* eslint-disable guard-for-in */
/* eslint-disable no-empty */
/* eslint-disable no-empty-function */
/* eslint-disable no-unused-vars */
/* eslint-disable sort-imports */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceInfoImpl = void 0;
const parserCollection_1 = require("./parserCollection");
const internalDtmi_1 = require("./internalDtmi");
const parsingErrorImpl_1 = require("./parsingErrorImpl");
const enum_1 = require("./enum");
class InterfaceInfoImpl {
    constructor(dtdlVersion, id, childOf, definedIn, entityKind) {
        this._contentsValueConstraints = [];
        this._contentsInstanceProperties = [];
        this._contentsAllowedVersionsV2 = new Set().add(2);
        this._contentsAllowedVersionsV3 = new Set().add(3).add(2);
        this._extendsValueConstraints = [];
        this._extendsInstanceProperties = [];
        this._extendsAllowedVersionsV2 = new Set().add(2);
        this._extendsAllowedVersionsV3 = new Set().add(3).add(2);
        this._schemasValueConstraints = [];
        this._schemasInstanceProperties = [];
        this._schemasAllowedVersionsV2 = new Set().add(2);
        this._schemasAllowedVersionsV3 = new Set().add(3);
        this.parserClass = parserCollection_1.ParserCollection.InterfaceInfoParser;
        this.dtdlVersion = dtdlVersion;
        this.id = id;
        this.childOf = childOf;
        this.definedIn = definedIn;
        this.entityKind = entityKind;
        this.contents = {};
        this.description = {};
        this.displayName = {};
        this.extends = [];
        this.schemas = [];
        this.supplementalTypeIds = [];
        this.supplementalProperties = {};
        this.supplementalTypes = [];
        this.isPartition = true;
        this.undefinedTypes = [];
        this.undefinedProperties = {};
        this._checkedForDescendantSchemaOrContentsComponentNarrow = false;
        this._idOfDescendantSchemaOrContentsComponentNarrow = undefined;
        this._checkedDescendantEnumValueDatatype = undefined;
        this._checkedForDescendantSchemaArray = false;
        this._idOfDescendantSchemaArray = undefined;
        this._countOfExtendsNarrowStatus = enum_1.TraversalStatus.NotStarted;
        this._countOfExtendsNarrowValue = 0;
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus =
            enum_1.TraversalStatus.NotStarted;
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue = 0;
    }
    static initialize() {
        this._versionlessTypes = new Set().add("dtmi:dtdl:class:Entity").add("dtmi:dtdl:class:Interface");
    }
    addType(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    dtmi, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    supplementalType) {
        this.supplementalTypeIds.push(dtmi);
        if (supplementalType !== undefined) {
            this.supplementalTypes.push(supplementalType);
        }
        supplementalType.attachConstraints(this);
        supplementalType.bindInstanceProperties(this);
    }
    doesHaveType(typeId) {
        return (InterfaceInfoImpl._versionlessTypes.has(new internalDtmi_1.InDTMI(typeId).versionless) ||
            this.supplementalTypes.some((st) => st.doesHaveType(typeId)));
    }
    addConstraint(propertyName, valueConstraint) {
        switch (propertyName) {
            case "contents":
                if (this._contentsValueConstraints === undefined) {
                    this._contentsValueConstraints = [];
                }
                this._contentsValueConstraints.push(valueConstraint);
                break;
            case "extends":
                if (this._extendsValueConstraints === undefined) {
                    this._extendsValueConstraints = [];
                }
                this._extendsValueConstraints.push(valueConstraint);
                break;
            case "schemas":
                if (this._schemasValueConstraints === undefined) {
                    this._schemasValueConstraints = [];
                }
                this._schemasValueConstraints.push(valueConstraint);
                break;
        }
    }
    addInstanceProperty(propertyName, instancePropertyName) {
        switch (propertyName) {
            case "contents":
                if (this._contentsInstanceProperties === undefined) {
                    this._contentsInstanceProperties = [];
                }
                this._contentsInstanceProperties.push(instancePropertyName);
                break;
            case "extends":
                if (this._extendsInstanceProperties === undefined) {
                    this._extendsInstanceProperties = [];
                }
                this._extendsInstanceProperties.push(instancePropertyName);
                break;
            case "schemas":
                if (this._schemasInstanceProperties === undefined) {
                    this._schemasInstanceProperties = [];
                }
                this._schemasInstanceProperties.push(instancePropertyName);
                break;
        }
    }
    doesPropertyDictContainKey(propertyName, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    key) {
        switch (propertyName) {
            case "contents":
                if (key !== undefined && Object.prototype.hasOwnProperty.call(this.contents, key)) {
                    return true;
                }
                else {
                    return false;
                }
            default:
                return false;
        }
    }
    validateInstance(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceText) {
        const instanceElt = JSON.parse(instanceText);
        return this.validateInstanceElement(instanceElt);
    }
    validateInstanceElement(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt) {
        return false;
    }
    validateInstanceInternal(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        return false;
    }
    validateInstanceV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        return false;
    }
    validateInstanceV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        return false;
    }
    /**
     * Set partition information.
     **/
    setPartitionInfo(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    partitionJsonText) {
        this.partitionJsonText = partitionJsonText;
    }
    /**
     * Gets a JSON string that holds the portion of the DTDL model that defines this InterfaceInfo.
     **/
    getJsonLdText() {
        return this.partitionJsonText || "";
    }
    /**
     * Gets a JsonElement that holds the portion of the DTDL model that defines this InterfaceInfo.
     **/
    getJsonLd() {
        return JSON.parse(this.partitionJsonText || "");
    }
    applyTransformations(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this.dtdlVersion === 2) {
            this.applyTransformationsV2(model, parsingErrors);
        }
        if (this.dtdlVersion === 3) {
            this.applyTransformationsV3(model, parsingErrors);
        }
    }
    applyTransformationsV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this._originalContents === undefined) {
            this._originalContents = Object.assign({}, this.contents);
        }
        const tooDeepElementId = { ref: undefined };
        const sources = this.getTransitiveExtendsNarrow(0, 10, tooDeepElementId, parsingErrors);
        if (sources !== undefined) {
            sources.forEach((dtmi) => {
                model.dict[dtmi].importContents(new internalDtmi_1.InDTMI(this.id), `'extends'`, this.contents || {}, parsingErrors);
            });
        }
        else if (tooDeepElementId.ref !== undefined) {
            parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:excessiveDepth", {
                cause: `{primaryId:n} is at the root of a chain of 'extends' properties that exceeds 10 levels -- {secondaryId:n} is at level 11.`,
                action: `Change the value of one or more 'extends' properties in the hierarchy to reduce the nesting depth.`,
                primaryId: this.id,
                secondaryId: tooDeepElementId.ref.value,
            }));
        }
    }
    applyTransformationsV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this._originalContents === undefined) {
            this._originalContents = Object.assign({}, this.contents);
        }
        const tooDeepElementId = { ref: undefined };
        const sources = this.getTransitiveExtendsNarrow(0, 10, tooDeepElementId, parsingErrors);
        if (sources !== undefined) {
            sources.forEach((dtmi) => {
                model.dict[dtmi].importContents(new internalDtmi_1.InDTMI(this.id), `'extends'`, this.contents || {}, parsingErrors);
            });
        }
        else if (tooDeepElementId.ref !== undefined) {
            parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:excessiveDepth", {
                cause: `{primaryId:n} is at the root of a chain of 'extends' properties that exceeds 10 levels -- {secondaryId:n} is at level 11.`,
                action: `Change the value of one or more 'extends' properties in the hierarchy to reduce the nesting depth.`,
                primaryId: this.id,
                secondaryId: tooDeepElementId.ref.value,
            }));
        }
    }
    checkRestrictions(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this.dtdlVersion === 2) {
            this.checkRestrictionsV2(parsingErrors);
        }
        if (this.dtdlVersion === 3) {
            this.checkRestrictionsV3(parsingErrors);
        }
    }
    checkRestrictionsV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) { }
    checkRestrictionsV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        const numExtendsNarrowValues = this.getCountOfExtendsNarrow(parsingErrors);
        if (numExtendsNarrowValues > 1024) {
            parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:excessiveCount", {
                cause: `{primaryId:n} is at the root of a hierarchy that contains ${numExtendsNarrowValues} 'extends' properties, but the allowed maximum count is 1024.`,
                action: `Remove one or more 'extends' property values to reduce the total count.`,
                primaryId: this.id,
            }));
        }
        const numContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValues = this.getCountOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrow(parsingErrors);
        if (numContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValues >
            100000) {
            parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:excessiveCount", {
                cause: `{primaryId:n} is at the root of a hierarchy that contains ${numContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValues} 'contents' or 'fields' or 'enumValues' or 'request' or 'response' or 'properties' or 'schema' or 'elementSchema' or 'mapValue' properties, but the allowed maximum count is 100000.`,
                action: `Remove one or more 'contents' or 'fields' or 'enumValues' or 'request' or 'response' or 'properties' or 'schema' or 'elementSchema' or 'mapValue' property values to reduce the total count.`,
                primaryId: this.id,
            }));
        }
    }
    trySetObjectProperty(propertyName, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/explicit-module-boundary-types
    value, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    key) {
        switch (propertyName) {
            case "contents":
            case "dtmi:dtdl:property:contents;2":
            case "dtmi:dtdl:property:contents;3":
                if (key !== undefined && this.contents !== undefined) {
                    this.contents[key] = value;
                    return true;
                }
                break;
            case "extends":
            case "dtmi:dtdl:property:extends;2":
            case "dtmi:dtdl:property:extends;3":
                if (this.extends !== undefined) {
                    this.extends.push(value);
                    return true;
                }
                break;
            case "schemas":
            case "dtmi:dtdl:property:schemas;2":
            case "dtmi:dtdl:property:schemas;3":
                if (this.schemas !== undefined) {
                    this.schemas.push(value);
                    return true;
                }
                break;
            default:
                break;
        }
        for (const supplementalType of this.supplementalTypes) {
            if (supplementalType.trySetObjectProperty(propertyName, value, key, this.supplementalProperties)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check the nesting depth of all descendant elementSchema or schema properties.
     **/
    checkDepthOfElementSchemaOrSchema(depth, depthLimit, tooDeepElementId, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        var _a, _b, _c;
        for (const item of Object.values(this.contents || {})) {
            if (!item.checkDepthOfElementSchemaOrSchema(depth, depthLimit, tooDeepElementId, parsingErrors)) {
                if (((_a = tooDeepElementId.ref) === null || _a === void 0 ? void 0 : _a.value) === this.id) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                        cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                        action: `Change the value of one or more 'elementSchema' or 'schema' properties in the hierarchy to remeve the recursion.`,
                        primaryId: this.id,
                    }));
                    tooDeepElementId.ref = undefined;
                }
                return false;
            }
        }
        for (const item of this.extends || []) {
            if (!item.checkDepthOfElementSchemaOrSchema(depth, depthLimit, tooDeepElementId, parsingErrors)) {
                if (((_b = tooDeepElementId.ref) === null || _b === void 0 ? void 0 : _b.value) === this.id) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                        cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                        action: `Change the value of one or more 'elementSchema' or 'schema' properties in the hierarchy to remeve the recursion.`,
                        primaryId: this.id,
                    }));
                    tooDeepElementId.ref = undefined;
                }
                return false;
            }
        }
        for (const item of this.schemas || []) {
            if (!item.checkDepthOfElementSchemaOrSchema(depth, depthLimit, tooDeepElementId, parsingErrors)) {
                if (((_c = tooDeepElementId.ref) === null || _c === void 0 ? void 0 : _c.value) === this.id) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                        cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                        action: `Change the value of one or more 'elementSchema' or 'schema' properties in the hierarchy to remeve the recursion.`,
                        primaryId: this.id,
                    }));
                    tooDeepElementId.ref = undefined;
                }
                return false;
            }
        }
        tooDeepElementId.ref = undefined;
        return true;
    }
    tryGetDescendantSchemaOrContentsComponentNarrow(elementId) {
        if (this._checkedForDescendantSchemaOrContentsComponentNarrow) {
            elementId.ref = this._idOfDescendantSchemaOrContentsComponentNarrow;
            return this._idOfDescendantSchemaOrContentsComponentNarrow !== undefined;
        }
        this._checkedForDescendantSchemaOrContentsComponentNarrow = true;
        for (const item of Object.values(this.contents || {})) {
            if (item.entityKind === "component") {
                elementId.ref = new internalDtmi_1.InDTMI(item.id);
                this._idOfDescendantSchemaOrContentsComponentNarrow = elementId.ref;
                return true;
            }
            if (item.tryGetDescendantSchemaOrContentsComponentNarrow(elementId)) {
                this._idOfDescendantSchemaOrContentsComponentNarrow = elementId.ref;
                return true;
            }
        }
        elementId.ref = undefined;
        return false;
    }
    checkDescendantEnumValueDataType(ancestorId, datatype, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this._checkedDescendantEnumValueDatatype !== datatype) {
            this._checkedDescendantEnumValueDatatype = datatype;
        }
        for (const item of Object.values(this.contents || {})) {
            item.checkDescendantEnumValueDataType(ancestorId, datatype, parsingErrors);
        }
        for (const item of this.extends || []) {
            item.checkDescendantEnumValueDataType(ancestorId, datatype, parsingErrors);
        }
        for (const item of this.schemas || []) {
            item.checkDescendantEnumValueDataType(ancestorId, datatype, parsingErrors);
        }
    }
    getTransitiveExtendsNarrow(depth, depthLimit, tooDeepElementId, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        var _a;
        if (this.extends !== undefined && this.extends.length !== 0) {
            if (depth === depthLimit) {
                tooDeepElementId.ref = new internalDtmi_1.InDTMI(this.id);
                return undefined;
            }
        }
        const closure = new Set();
        for (const item of this.extends || []) {
            const others = item.getTransitiveExtendsNarrow(depth + 1, depthLimit, tooDeepElementId, parsingErrors);
            if (others !== undefined) {
                closure.add(item.id);
                others.forEach((otherItem) => closure.add(otherItem));
            }
            else {
                if (((_a = tooDeepElementId.ref) === null || _a === void 0 ? void 0 : _a.value) === this.id) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                        cause: `{primaryId:n} is at the root of a chain of 'extends' properties that includes itself.`,
                        action: `Change the value of one or more 'extends' properties in the hierarchy to remeve the recursion.`,
                        primaryId: this.id,
                    }));
                    tooDeepElementId.ref = undefined;
                }
                return undefined;
            }
        }
        tooDeepElementId.ref = undefined;
        return closure;
    }
    /**
     * Copy the values of this object's Contents property into `contents`.
     **/
    importContents(ancestorId, importPropertyName, contents, parsingErrors) {
        const currentObject = this._originalContents || this.contents || {};
        for (const [key, value] of Object.entries(currentObject)) {
            if (Object.prototype.hasOwnProperty.call(contents, key)) {
                parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:nonUniqueImportedPropertyValue", {
                    cause: `{primaryId:n}, because it transitively ${importPropertyName} {secondaryId}, has property 'contents' that contains more than one element whose property 'name' has value '${key}'.`,
                    action: `Either change the value of property 'name' to a unique string value, or remove one or more ${importPropertyName} properties so that 'contents' will not be imported.`,
                    primaryId: ancestorId.value,
                    secondaryId: this.id,
                    property: `contents`,
                    value: `name`,
                }));
            }
            else {
                contents[key] = value;
            }
        }
    }
    tryGetDescendantSchemaArray(elementId) {
        if (this._checkedForDescendantSchemaArray) {
            elementId.ref = this._idOfDescendantSchemaArray;
            return this._idOfDescendantSchemaArray !== undefined;
        }
        this._checkedForDescendantSchemaArray = true;
        for (const item of Object.values(this.contents || {})) {
            if (item.tryGetDescendantSchemaArray(elementId)) {
                this._idOfDescendantSchemaArray = elementId.ref;
                return true;
            }
        }
        for (const item of this.extends || []) {
            if (item.tryGetDescendantSchemaArray(elementId)) {
                this._idOfDescendantSchemaArray = elementId.ref;
                return true;
            }
        }
        for (const item of this.schemas || []) {
            if (item.tryGetDescendantSchemaArray(elementId)) {
                this._idOfDescendantSchemaArray = elementId.ref;
                return true;
            }
        }
        elementId.ref = undefined;
        return false;
    }
    getCountOfExtendsNarrow(parsingErrors) {
        if (this._countOfExtendsNarrowStatus === enum_1.TraversalStatus.Complete) {
            return this._countOfExtendsNarrowValue;
        }
        if (this._countOfExtendsNarrowStatus === enum_1.TraversalStatus.InProgress) {
            parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                action: `Change the value of one or more 'extends' properties in the hierarchy to remeve the recursion.`,
                primaryId: this.id,
            }));
            return 0;
        }
        this._countOfExtendsNarrowStatus = enum_1.TraversalStatus.InProgress;
        for (const item of this.extends || []) {
            this._countOfExtendsNarrowValue +=
                item.getCountOfExtendsNarrow(parsingErrors) + 1;
        }
        this._countOfExtendsNarrowStatus = enum_1.TraversalStatus.Complete;
        return this._countOfExtendsNarrowValue;
    }
    getCountOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrow(parsingErrors) {
        if (this
            ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus ===
            enum_1.TraversalStatus.Complete) {
            return this
                ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue;
        }
        if (this
            ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus ===
            enum_1.TraversalStatus.InProgress) {
            parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                action: `Change the value of one or more 'contents' or 'fields' or 'enumValues' or 'request' or 'response' or 'properties' or 'schema' or 'elementSchema' or 'mapValue' properties in the hierarchy to remeve the recursion.`,
                primaryId: this.id,
            }));
            return 0;
        }
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus =
            enum_1.TraversalStatus.InProgress;
        for (const item of Object.values(this.contents || {})) {
            this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue +=
                item.getCountOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrow(parsingErrors) + 1;
        }
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus =
            enum_1.TraversalStatus.Complete;
        return this
            ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue;
    }
}
exports.InterfaceInfoImpl = InterfaceInfoImpl;
//# sourceMappingURL=interfaceInfoImpl.js.map