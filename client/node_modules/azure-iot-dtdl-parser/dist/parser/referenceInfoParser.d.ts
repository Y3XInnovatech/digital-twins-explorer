import { ReferenceInfoImpl } from "./referenceInfoImpl";
import { ReferenceKinds } from "./referenceKinds";
import { ParsingError } from "./parsingError";
import { AggregateContext } from "./aggregateContext";
import { Model } from "./model";
import { ParsedObjectPropertyInfo } from "./parsedObjectPropertyInfo";
import { ElementPropertyConstraint } from "./type";
import { ValueConstraint } from "./type/valueConstraint";
export declare class ReferenceInfoParser {
    protected static _concreteKinds: {
        [x: number]: ReferenceKinds[];
    };
    protected static _badTypeActionFormat: {
        [x: number]: string;
    };
    protected static _badTypeCauseFormat: {
        [x: number]: string;
    };
    static initialize(): void;
    static tryParseSupplementalProperty(model: Model, elementInfo: ReferenceInfoImpl, objectPropertyInfoList: ParsedObjectPropertyInfo[], elementPropertyConstraints: ElementPropertyConstraint[], aggregateContext: AggregateContext, parsingErrors: ParsingError[], propName: string, propToken: any): boolean;
    static parseObject(model: Model, objectPropertyInfoList: ParsedObjectPropertyInfo[], elementPropertyConstraints: ElementPropertyConstraint[], valueConstraints: ValueConstraint[], aggregateContext: AggregateContext, parsingErrors: ParsingError[], object: {
        [index: string]: any;
    }, parentId: string | undefined, definedIn: string | undefined, propName: string | undefined, dtmiSeg: string | undefined, keyProp: string | undefined, idRequired: boolean, typeRequired: boolean, allowIdReferenceSyntax: boolean, allowedVersions: Set<number>): any;
    private static parseTypeArray;
    static parseToken(model: Model, objectPropertyInfoList: ParsedObjectPropertyInfo[], elementPropertyConstraints: ElementPropertyConstraint[], valueConstraints: ValueConstraint[], aggregateContext: AggregateContext, parsingErrors: ParsingError[], token: any, parentId: string | undefined, definedIn: string | undefined, propName: string | undefined, dtmiSeg: string | undefined, keyProp: string | undefined, idRequired: boolean, typeRequired: boolean, allowIdReferenceSyntax: boolean, allowedVersions: Set<number>): number;
    private static parseIdString;
}
//# sourceMappingURL=referenceInfoParser.d.ts.map