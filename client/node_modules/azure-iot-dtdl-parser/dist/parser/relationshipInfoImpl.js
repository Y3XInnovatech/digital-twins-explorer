"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/* eslint-disable valid-jsdoc */
/* eslint-disable guard-for-in */
/* eslint-disable no-empty */
/* eslint-disable no-empty-function */
/* eslint-disable no-unused-vars */
/* eslint-disable sort-imports */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationshipInfoImpl = void 0;
const parserCollection_1 = require("./parserCollection");
const internalDtmi_1 = require("./internalDtmi");
const parsingErrorImpl_1 = require("./parsingErrorImpl");
const enum_1 = require("./enum");
class RelationshipInfoImpl {
    constructor(dtdlVersion, id, childOf, definedIn, entityKind) {
        this.namePropertyRegexPatternV2 = /^[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?$/;
        this.namePropertyRegexPatternV3 = /^[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?$/;
        this._propertiesValueConstraints = [];
        this._propertiesInstanceProperties = [];
        this._propertiesAllowedVersionsV2 = new Set().add(2);
        this._propertiesAllowedVersionsV3 = new Set().add(3).add(2);
        this.targetPropertyRegexPatternV2 = /^dtmi:[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?(?::[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?)*;[1-9][0-9]{0,8}$/;
        this.targetPropertyRegexPatternV3 = /^dtmi:[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?(?::[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?)*(?:;[1-9][0-9]{0,8}(?:\.[1-9][0-9]{0,5})?)?$/;
        this.parserClass = parserCollection_1.ParserCollection.RelationshipInfoParser;
        this.dtdlVersion = dtdlVersion;
        this.id = id;
        this.childOf = childOf;
        this.definedIn = definedIn;
        this.entityKind = entityKind;
        this.description = {};
        this.displayName = {};
        this.properties = [];
        this.writable = false;
        this.supplementalTypeIds = [];
        this.supplementalProperties = {};
        this.supplementalTypes = [];
        this.isPartition = false;
        this.undefinedTypes = [];
        this.undefinedProperties = {};
        this._checkedForDescendantSchemaOrContentsComponentNarrow = false;
        this._idOfDescendantSchemaOrContentsComponentNarrow = undefined;
        this._checkedDescendantEnumValueDatatype = undefined;
        this._checkedForDescendantSchemaArray = false;
        this._idOfDescendantSchemaArray = undefined;
        this._countOfExtendsNarrowStatus = enum_1.TraversalStatus.NotStarted;
        this._countOfExtendsNarrowValue = 0;
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus =
            enum_1.TraversalStatus.NotStarted;
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue = 0;
    }
    static initialize() {
        this._versionlessTypes = new Set()
            .add("dtmi:dtdl:class:Content")
            .add("dtmi:dtdl:class:Entity")
            .add("dtmi:dtdl:class:NamedEntity")
            .add("dtmi:dtdl:class:Relationship");
    }
    addType(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    dtmi, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    supplementalType) {
        this.supplementalTypeIds.push(dtmi);
        if (supplementalType !== undefined) {
            this.supplementalTypes.push(supplementalType);
        }
        supplementalType.attachConstraints(this);
        supplementalType.bindInstanceProperties(this);
    }
    doesHaveType(typeId) {
        return (RelationshipInfoImpl._versionlessTypes.has(new internalDtmi_1.InDTMI(typeId).versionless) ||
            this.supplementalTypes.some((st) => st.doesHaveType(typeId)));
    }
    addConstraint(propertyName, valueConstraint) {
        switch (propertyName) {
            case "properties":
                if (this._propertiesValueConstraints === undefined) {
                    this._propertiesValueConstraints = [];
                }
                this._propertiesValueConstraints.push(valueConstraint);
                break;
        }
    }
    addInstanceProperty(propertyName, instancePropertyName) {
        switch (propertyName) {
            case "properties":
                if (this._propertiesInstanceProperties === undefined) {
                    this._propertiesInstanceProperties = [];
                }
                this._propertiesInstanceProperties.push(instancePropertyName);
                break;
        }
    }
    doesPropertyDictContainKey(propertyName, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    key) {
        switch (propertyName) {
            default:
                return false;
        }
    }
    validateInstance(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceText) {
        const instanceElt = JSON.parse(instanceText);
        return this.validateInstanceElement(instanceElt);
    }
    validateInstanceElement(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt) {
        return false;
    }
    validateInstanceInternal(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        return false;
    }
    validateInstanceV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        return false;
    }
    validateInstanceV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        return false;
    }
    /**
     * Set partition information.
     **/
    setPartitionInfo(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    partitionJsonText) {
        throw new Error(`attempt to set partition info on non-partition type RelationshipInfoInfo`);
    }
    applyTransformations(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this.dtdlVersion === 2) {
            this.applyTransformationsV2(model, parsingErrors);
        }
        if (this.dtdlVersion === 3) {
            this.applyTransformationsV3(model, parsingErrors);
        }
    }
    applyTransformationsV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) { }
    applyTransformationsV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) { }
    checkRestrictions(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this.dtdlVersion === 2) {
            this.checkRestrictionsV2(parsingErrors);
        }
        if (this.dtdlVersion === 3) {
            this.checkRestrictionsV3(parsingErrors);
        }
    }
    checkRestrictionsV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        const propertiesNameSet = new Set();
        if (this.properties !== undefined) {
            for (const item of this.properties || []) {
                if (propertiesNameSet.has(item.name)) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:nonUniquePropertyValue", {
                        cause: "{{primaryId:n}} property 'properties' contains more than one element whose property 'name' has value '{item.name}'.",
                        action: "Change the value of property  'name' to a string value that is unique across all values of 'properties'.",
                        primaryId: this.id,
                        property: "properties",
                        value: "name",
                    }));
                }
                propertiesNameSet.add(item.name);
            }
        }
    }
    checkRestrictionsV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        const propertiesNameSet = new Set();
        if (this.properties !== undefined) {
            for (const item of this.properties || []) {
                if (propertiesNameSet.has(item.name)) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:nonUniquePropertyValue", {
                        cause: "{{primaryId:n}} property 'properties' contains more than one element whose property 'name' has value '{item.name}'.",
                        action: "Change the value of property  'name' to a string value that is unique across all values of 'properties'.",
                        primaryId: this.id,
                        property: "properties",
                        value: "name",
                    }));
                }
                propertiesNameSet.add(item.name);
            }
        }
    }
    trySetObjectProperty(propertyName, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/explicit-module-boundary-types
    value, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    key) {
        switch (propertyName) {
            case "properties":
            case "dtmi:dtdl:property:properties;2":
            case "dtmi:dtdl:property:properties;3":
                if (this.properties !== undefined) {
                    this.properties.push(value);
                    return true;
                }
                break;
            case "target":
            case "dtmi:dtdl:property:target;2":
            case "dtmi:dtdl:property:target;3":
                this.target = value.dtmi;
                return true;
            default:
                break;
        }
        for (const supplementalType of this.supplementalTypes) {
            if (supplementalType.trySetObjectProperty(propertyName, value, key, this.supplementalProperties)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check the nesting depth of all descendant elementSchema or schema properties.
     **/
    checkDepthOfElementSchemaOrSchema(depth, depthLimit, tooDeepElementId, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        var _a;
        for (const item of this.properties || []) {
            if (!item.checkDepthOfElementSchemaOrSchema(depth, depthLimit, tooDeepElementId, parsingErrors)) {
                if (((_a = tooDeepElementId.ref) === null || _a === void 0 ? void 0 : _a.value) === this.id) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                        cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                        action: `Change the value of one or more 'elementSchema' or 'schema' properties in the hierarchy to remeve the recursion.`,
                        primaryId: this.id,
                    }));
                    tooDeepElementId.ref = undefined;
                }
                return false;
            }
        }
        tooDeepElementId.ref = undefined;
        return true;
    }
    tryGetDescendantSchemaOrContentsComponentNarrow(elementId) {
        if (this._checkedForDescendantSchemaOrContentsComponentNarrow) {
            elementId.ref = this._idOfDescendantSchemaOrContentsComponentNarrow;
            return this._idOfDescendantSchemaOrContentsComponentNarrow !== undefined;
        }
        this._checkedForDescendantSchemaOrContentsComponentNarrow = true;
        elementId.ref = undefined;
        return false;
    }
    checkDescendantEnumValueDataType(ancestorId, datatype, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this._checkedDescendantEnumValueDatatype !== datatype) {
            this._checkedDescendantEnumValueDatatype = datatype;
        }
        for (const item of this.properties || []) {
            item.checkDescendantEnumValueDataType(ancestorId, datatype, parsingErrors);
        }
    }
    getTransitiveExtendsNarrow(depth, depthLimit, tooDeepElementId, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        const closure = new Set();
        tooDeepElementId.ref = undefined;
        return closure;
    }
    tryGetDescendantSchemaArray(elementId) {
        if (this._checkedForDescendantSchemaArray) {
            elementId.ref = this._idOfDescendantSchemaArray;
            return this._idOfDescendantSchemaArray !== undefined;
        }
        this._checkedForDescendantSchemaArray = true;
        for (const item of this.properties || []) {
            if (item.tryGetDescendantSchemaArray(elementId)) {
                this._idOfDescendantSchemaArray = elementId.ref;
                return true;
            }
        }
        elementId.ref = undefined;
        return false;
    }
    getCountOfExtendsNarrow(parsingErrors) {
        if (this._countOfExtendsNarrowStatus === enum_1.TraversalStatus.Complete) {
            return this._countOfExtendsNarrowValue;
        }
        if (this._countOfExtendsNarrowStatus === enum_1.TraversalStatus.InProgress) {
            parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                action: `Change the value of one or more 'extends' properties in the hierarchy to remeve the recursion.`,
                primaryId: this.id,
            }));
            return 0;
        }
        this._countOfExtendsNarrowStatus = enum_1.TraversalStatus.InProgress;
        this._countOfExtendsNarrowStatus = enum_1.TraversalStatus.Complete;
        return this._countOfExtendsNarrowValue;
    }
    getCountOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrow(parsingErrors) {
        if (this
            ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus ===
            enum_1.TraversalStatus.Complete) {
            return this
                ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue;
        }
        if (this
            ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus ===
            enum_1.TraversalStatus.InProgress) {
            parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                action: `Change the value of one or more 'contents' or 'fields' or 'enumValues' or 'request' or 'response' or 'properties' or 'schema' or 'elementSchema' or 'mapValue' properties in the hierarchy to remeve the recursion.`,
                primaryId: this.id,
            }));
            return 0;
        }
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus =
            enum_1.TraversalStatus.InProgress;
        for (const item of this.properties || []) {
            this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue +=
                item.getCountOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrow(parsingErrors) + 1;
        }
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus =
            enum_1.TraversalStatus.Complete;
        return this
            ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue;
    }
}
exports.RelationshipInfoImpl = RelationshipInfoImpl;
//# sourceMappingURL=relationshipInfoImpl.js.map