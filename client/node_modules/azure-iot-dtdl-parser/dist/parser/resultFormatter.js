"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultFormatter = void 0;
const internalDtmi_1 = require("./internalDtmi");
/* eslint-disable no-unused-vars */
var Expansion;
(function (Expansion) {
    Expansion["Nominative"] = ":n";
    Expansion["Possessive"] = ":p";
    Expansion["Relative"] = ":r";
    Expansion["Elective"] = ":e";
})(Expansion || (Expansion = {}));
class ResultFormatter {
    constructor(formatString) {
        this._formatString = formatString;
        this._formattedResult = formatString;
    }
    install(key, value) {
        const undecoratedKey = "{" + key + "}";
        if (this._formatString.includes(undecoratedKey)) {
            this._formattedResult = this._formattedResult.replace(undecoratedKey, value);
            return;
        }
        // eslint-disable-next-line guard-for-in
        for (const expansionTypeKey in Expansion) {
            const expansionType = expansionTypeKey;
            const decoratedKey = "{" + key + Expansion[expansionType] + "}";
            if (this._formatString.includes(decoratedKey)) {
                this._formattedResult = this._formattedResult.replace(decoratedKey, this._expandValue(value, expansionType));
                return;
            }
        }
    }
    toString() {
        return this._formattedResult;
    }
    _expandValue(value, expansionType) {
        if (typeof value !== "string") {
            console.log("VALUE NOT STRING");
        }
        if (value.startsWith("_:")) {
            return this._getBasicExpansion(value, expansionType, "");
        }
        if (!value.startsWith("dtmi:")) {
            return this._getBasicExpansion(value, expansionType, ` '${value}'`);
        }
        const dtmi = internalDtmi_1.InDTMI.createDtmi(value);
        if (dtmi === undefined) {
            return this._getBasicExpansion(value, expansionType, ` '${value}'`);
        }
        if (!dtmi.labels[dtmi.labels.length - 1].startsWith("_")) {
            return this._getBasicExpansion(value, expansionType, " " + value);
        }
        switch (expansionType) {
            case "Nominative":
                return this._buildNominativePhrase(dtmi, dtmi.labels.length);
            case "Possessive":
                if (dtmi.labels[dtmi.labels.length - 1].startsWith("__")) {
                    return (this._buildNominativePhrase(dtmi, dtmi.labels.length - 2) +
                        ` has '${dtmi.labels[dtmi.labels.length - 2].substr(1)}' value with name '${dtmi.labels[dtmi.labels.length - 1].substr(2)}' whose`);
                }
                else {
                    return (this._buildNominativePhrase(dtmi, dtmi.labels.length - 1) +
                        ` has '${dtmi.labels[dtmi.labels.length - 1].substr(1)}' value whose`);
                }
            case "Relative":
                if (dtmi.labels[dtmi.labels.length - 1].startsWith("__")) {
                    return ` with name '${dtmi.labels[dtmi.labels.length - 1].substr(2)}'`;
                }
                else {
                    return "";
                }
            case "Elective":
                return "";
        }
    }
    _getBasicExpansion(value, expansionType, defaultValue) {
        switch (expansionType) {
            case "Nominative":
                return value;
            case "Possessive":
                return value + `'s`;
            default:
                return defaultValue;
        }
    }
    _buildNominativePhrase(dtmi, labelCount) {
        if (dtmi.labels[labelCount - 1].startsWith("__")) {
            return (this._buildNominativePhrase(dtmi, labelCount - 2) +
                ` has '${dtmi.labels[labelCount - 2].substr(1)}' value with name '${dtmi.labels[labelCount - 1].substr(2)}' which`);
        }
        else if (dtmi.labels[labelCount - 1].startsWith("_")) {
            return (this._buildNominativePhrase(dtmi, labelCount - 1) +
                ` has '${dtmi.labels[labelCount - 1].substr(1)}' value which`);
        }
        else {
            let ancestorId = "dtmi";
            for (let i = 0; i < labelCount; ++i) {
                ancestorId += ":" + dtmi.labels[i];
            }
            if (dtmi.majorVersion > 0) {
                ancestorId += ";" + dtmi.majorVersion;
                if (dtmi.minorVersion > 0) {
                    ancestorId += ";" + dtmi.minorVersion;
                }
            }
            return ancestorId;
        }
    }
}
exports.ResultFormatter = ResultFormatter;
//# sourceMappingURL=resultFormatter.js.map