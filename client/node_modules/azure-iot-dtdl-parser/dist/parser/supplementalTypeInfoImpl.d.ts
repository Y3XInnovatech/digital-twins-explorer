import { SupplementalPropertyInfoImpl } from "./supplementalPropertyInfoImpl";
import { SupplementalTypeInfo } from "./supplementalTypeInfo";
import { ElementPropertyConstraint } from "./type";
import { ParsingError } from "./parsingError";
import { PropertyInstanceBinder } from "./type";
import { PropertyValueConstrainer } from "./type";
import { ValueConstraint } from "./type";
import { AggregateContext } from "./aggregateContext";
import { ParsedObjectPropertyInfo } from "./parsedObjectPropertyInfo";
import { EntityKinds } from "./entityKinds";
import { Model } from "./model";
import { ExtensionKind } from "./extensionKind";
/**
 * Class that provides information about a type is not materialized as a TS class.
 **/
export declare class SupplementalTypeInfoImpl implements SupplementalTypeInfo {
    readonly allowedCotypeKinds: EntityKinds[];
    readonly extensionKind: ExtensionKind;
    constructor(extensionKind: ExtensionKind, contextId: string, type: string, isAbstract: boolean, parentType?: string);
    addCotype(cotypeKind: EntityKinds): void;
    readonly contextId: string;
    readonly type: string;
    readonly isAbstract: boolean;
    readonly parentType?: string;
    properties: {
        [x: string]: SupplementalPropertyInfoImpl;
    };
    private _propertyConstraints;
    parentSupplementalType?: SupplementalTypeInfo;
    private _allowedCotypeVersions;
    doesHaveType(typeId: string): boolean;
    addCotypeVersion(version: number): void;
    /**
     * Attach any constraints to properties that are not properties of this supplemental type.
     * @param propertyValueConstrainer - A PropertyValueConstrainer to call back to add each constraint.
     */
    attachConstraints(propertyValueConstrainer: PropertyValueConstrainer): void;
    /**
     * Bind properties that are instance of another property.
     * @param propertyInstanceBinder - A PropertyInstanceBinder to call back to add each instance binding.
     */
    bindInstanceProperties(propertyInstanceBinder: PropertyInstanceBinder): void;
    /**
     * Parse a property in a JSON token
     * @param model - Model to which to add object properties.
     * @param objectPropertyInfoList - List of object info structs for deferred assignments.
     * @param elementPropertyConstraints - List of <c>ElementPropertyConstraint</c> to be checked after object property assignment.
     * @param aggregateContext - An <c>AggregateContext</c> object representing information retrieved from JSON-LD context blocks.
     * @param parsingErrors - A <c>ParsingErrorCollection</c> to which any parsing errors are added.
     * @param parentId - The identifier of the parent of the element.
     * @param propName - The name of the property by which the parent refers to this element, used for auto ID generation.
     * @param propToken - The property token to parse.
     * @param properties - A collection of properties to update with the property information.
     */
    tryParseProperty(model: Model, objectPropertyInfoList: ParsedObjectPropertyInfo[], elementPropertyConstraints: ElementPropertyConstraint[], aggregateContext: AggregateContext, parsingErrors: ParsingError[], parentId: string, propName: string, propToken: unknown, // originally jtoken
    properties: {
        [x: string]: unknown;
    }): boolean;
    /**
     * Check that all non-optional properties have been set.
     * @param parsingErrors - A list of ParsingErrors to which missing-required-property parsing errors are added as appropriate.
     * @param parentId - The identifier of the parent of the element.
     * @param properties - A collection of properties to update with the property information.
     */
    checkForRequiredProperties(parsingErrors: ParsingError[], parentId: string, properties: {
        [x: string]: unknown;
    }): void;
    /**
     * Try to set an object property with a given propertyName
     * @param propertyName - The name of the property whose value to set if the property is recognized.
     * @param value - The value to set.
     * @param key - The key for dictionary properties.
     * @param properties - A collection of properties to update with the property information.
     * @returns True if the property name is recognized.
     */
    trySetObjectProperty(propertyName: string, value: unknown, key: string | undefined, properties: {
        [x: string]: unknown;
    }): boolean;
    /**
     * Adds a property to this supplemental type
     * @param propertyName - Name of the property.
     * @param propertyTypeUri - URI that defines the type of the property.
     * @param maxCount - The maximum count of permitted values of the property.
     * @param minCount - The minimum count of permitted values of the property.
     * @param isPlural - True if the property is plural.
     * @param isOptional - True if the property is optional.
     * @param dictionaryKey - The name of the child property that acts as a dictionary key, or undefined if this property is not expressed as a dictionary.
     * @param instanceProperty - The name of a property of which this property's value must be an instance.
     */
    addProperty(propertyName: string, propertyTypeUri: string, isPlural: boolean, isOptional: boolean, maxCount?: number, minCount?: number, dictionaryKey?: string, instanceProperty?: string): void;
    /**
     * Adds a type constraint to this supplemental type.
     * @param propertyName - Name of the property whose type to constrain.
     * @param valueConstraint - A ValueConstraint for values of this property.
     */
    addConstraint(propertyName: string, valueConstraint: ValueConstraint): void;
    private static _parseToken;
    get allowedCotypeVersions(): number[];
}
//# sourceMappingURL=supplementalTypeInfoImpl.d.ts.map