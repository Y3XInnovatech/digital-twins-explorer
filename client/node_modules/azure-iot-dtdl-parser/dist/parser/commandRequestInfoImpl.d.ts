import { TypeChecker } from "./type";
import { CommandRequestInfo } from "./commandRequestInfo";
import { CommandRequestKinds } from "./commandRequestKinds";
import { LanguageStringType } from "./type";
import { SchemaInfo } from "./schemaInfo";
import { Parser } from "./parser";
import { SupplementalTypeInfo } from "./supplementalTypeInfo";
import { InDTMI } from "./internalDtmi";
import { ValueConstraint } from "./type";
import { Model } from "./model";
import { ParsingError } from "./parsingError";
import { Reference } from "../common/reference";
import { TraversalStatus } from "./enum";
export declare class CommandRequestInfoImpl implements CommandRequestInfo, TypeChecker {
    dtdlVersion: number;
    id: string;
    childOf: string | undefined;
    definedIn: string | undefined;
    entityKind: CommandRequestKinds;
    comment?: string;
    description?: LanguageStringType;
    displayName?: LanguageStringType;
    languageVersion?: number;
    name?: string;
    namePropertyRegexPatternV3: RegExp;
    schema?: SchemaInfo;
    _schemaValueConstraints: ValueConstraint[];
    private _schemaInstanceProperties;
    _schemaAllowedVersionsV3: Set<number>;
    parserClass: Parser;
    supplementalTypeIds: string[];
    supplementalProperties: {
        [x: string]: any;
    };
    supplementalTypes: SupplementalTypeInfo[];
    undefinedTypes: string[];
    undefinedProperties: {
        [name: string]: any;
    };
    sourceObject: any;
    isPartition: boolean;
    protected static _versionlessTypes: Set<string>;
    protected _checkedForDescendantSchemaOrContentsComponentNarrow: boolean;
    protected _idOfDescendantSchemaOrContentsComponentNarrow: InDTMI | undefined;
    protected _checkedDescendantEnumValueDatatype: string | undefined;
    protected _checkedForDescendantSchemaArray: boolean;
    protected _idOfDescendantSchemaArray: InDTMI | undefined;
    protected _countOfExtendsNarrowStatus: TraversalStatus;
    protected _countOfExtendsNarrowValue: number;
    protected _countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus: TraversalStatus;
    protected _countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue: number;
    constructor(dtdlVersion: number, id: string, childOf: string | undefined, definedIn: string | undefined, entityKind: CommandRequestKinds);
    static initialize(): void;
    addType(dtmi: string, supplementalType: SupplementalTypeInfo | undefined): void;
    doesHaveType(typeId: string): boolean;
    addConstraint(propertyName: string, valueConstraint: ValueConstraint): void;
    addInstanceProperty(propertyName: string, instancePropertyName: string): void;
    doesPropertyDictContainKey(propertyName: string, key: string | undefined): boolean;
    validateInstance(instanceText: string): boolean;
    validateInstanceElement(instanceElt: unknown): boolean;
    validateInstanceInternal(instanceElt: unknown, instanceName: string | undefined): boolean;
    validateInstanceV3(instanceElt: unknown, instanceName: string | undefined): boolean;
    /**
     * Set partition information.
     **/
    setPartitionInfo(partitionJsonText: string): void;
    applyTransformations(model: Model, parsingErrors: ParsingError[]): void;
    applyTransformationsV3(model: Model, parsingErrors: ParsingError[]): void;
    checkRestrictions(parsingErrors: ParsingError[]): void;
    checkRestrictionsV3(parsingErrors: ParsingError[]): void;
    trySetObjectProperty(propertyName: string, value: any, key: string | undefined): boolean;
    /**
     * Check the nesting depth of all descendant elementSchema or schema properties.
     **/
    checkDepthOfElementSchemaOrSchema(depth: number, depthLimit: number, tooDeepElementId: Reference<InDTMI>, parsingErrors: ParsingError[]): boolean;
    tryGetDescendantSchemaOrContentsComponentNarrow(elementId: Reference<InDTMI>): boolean;
    checkDescendantEnumValueDataType(ancestorId: InDTMI, datatype: string, parsingErrors: ParsingError[]): void;
    getTransitiveExtendsNarrow(depth: number, depthLimit: number, tooDeepElementId: Reference<InDTMI>, parsingErrors: ParsingError[]): Set<string> | undefined;
    tryGetDescendantSchemaArray(elementId: Reference<InDTMI>): boolean;
    getCountOfExtendsNarrow(parsingErrors: ParsingError[]): number;
    getCountOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrow(parsingErrors: ParsingError[]): number;
}
//# sourceMappingURL=commandRequestInfoImpl.d.ts.map