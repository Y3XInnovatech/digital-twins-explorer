"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/* eslint-disable valid-jsdoc */
/* eslint-disable guard-for-in */
/* eslint-disable no-empty */
/* eslint-disable no-empty-function */
/* eslint-disable no-unused-vars */
/* eslint-disable sort-imports */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaFieldInfoImpl = void 0;
const parserCollection_1 = require("./parserCollection");
const internalDtmi_1 = require("./internalDtmi");
const parsingErrorImpl_1 = require("./parsingErrorImpl");
class SchemaFieldInfoImpl {
    constructor(dtdlVersion, id, childOf, definedIn, entityKind) {
        this.namePropertyRegexPatternV2 = /^[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?$/;
        this.namePropertyRegexPatternV3 = /^[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?$/;
        this._schemaAllowedVersionsV2 = new Set().add(2);
        this._schemaAllowedVersionsV3 = new Set().add(3).add(2);
        this.parserClass = parserCollection_1.ParserCollection.SchemaFieldInfoParser;
        this.dtdlVersion = dtdlVersion;
        this.id = id;
        this.childOf = childOf;
        this.definedIn = definedIn;
        this.entityKind = entityKind;
        this.description = {};
        this.displayName = {};
        this.supplementalTypeIds = [];
        this.supplementalProperties = {};
        this.supplementalTypes = [];
        this.isPartition = false;
        this.undefinedTypes = [];
        this.undefinedProperties = {};
        this._checkedForDescendantSchemaOrContentsComponentNarrow = false;
        this._idOfDescendantSchemaOrContentsComponentNarrow = undefined;
        this._checkedDescendantEnumValueDatatype = undefined;
        this._checkedForDescendantSchemaArray = false;
        this._idOfDescendantSchemaArray = undefined;
    }
    static initialize() {
        this._versionlessTypes = new Set()
            .add("dtmi:dtdl:class:Entity")
            .add("dtmi:dtdl:class:NamedEntity")
            .add("dtmi:dtdl:class:SchemaField");
    }
    addType(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    dtmi, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    supplementalType) {
        throw new Error("Attempt to add type to non augmentable type SchemaFieldInfo");
    }
    doesHaveType(typeId) {
        return SchemaFieldInfoImpl._versionlessTypes.has(new internalDtmi_1.InDTMI(typeId).versionless);
    }
    doesPropertyDictContainKey(propertyName, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    key) {
        switch (propertyName) {
            default:
                return false;
        }
    }
    validateInstance(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceText) {
        throw new Error("cannot validate anything in an abstract class");
    }
    validateInstanceElement(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt) {
        throw new Error("cannot validate anything in an abstract class");
    }
    validateInstanceInternal(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        throw new Error("cannot validate anything in an abstract class");
    }
    validateInstanceV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        throw new Error("cannot validate anything in an abstract class");
    }
    validateInstanceV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        throw new Error("cannot validate anything in an abstract class");
    }
    /**
     * Set partition information.
     **/
    setPartitionInfo(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    partitionJsonText) {
        throw new Error(`attempt to set partition info on non-partition type SchemaFieldInfoInfo`);
    }
    applyTransformationsV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) { }
    applyTransformationsV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) { }
    checkRestrictionsV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) { }
    checkRestrictionsV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) { }
    trySetObjectProperty(propertyName, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/explicit-module-boundary-types
    value, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    key) {
        switch (propertyName) {
            case "schema":
            case "dtmi:dtdl:property:schema;2":
            case "dtmi:dtdl:property:schema;3":
                this.schema = value;
                return true;
            default:
                break;
        }
        return false;
    }
    /**
     * Check the nesting depth of all descendant elementSchema or schema properties.
     **/
    checkDepthOfElementSchemaOrSchema(depth, depthLimit, tooDeepElementId, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        var _a;
        if (this.schema !== undefined) {
            if (depth === depthLimit) {
                tooDeepElementId.ref = internalDtmi_1.InDTMI.createDtmi(this.id);
                return false;
            }
        }
        if (this.schema !== undefined) {
            if (!this.schema.checkDepthOfElementSchemaOrSchema(depth + 1, depthLimit, tooDeepElementId, parsingErrors)) {
                if (((_a = tooDeepElementId.ref) === null || _a === void 0 ? void 0 : _a.value) === this.id) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                        cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                        action: `Change the value of one or more 'elementSchema' or 'schema' properties in the hierarchy to remeve the recursion.`,
                        primaryId: this.id,
                    }));
                    tooDeepElementId.ref = undefined;
                }
                return false;
            }
        }
        tooDeepElementId.ref = undefined;
        return true;
    }
    tryGetDescendantSchemaOrContentsComponentNarrow(elementId) {
        if (this._checkedForDescendantSchemaOrContentsComponentNarrow) {
            elementId.ref = this._idOfDescendantSchemaOrContentsComponentNarrow;
            return this._idOfDescendantSchemaOrContentsComponentNarrow !== undefined;
        }
        this._checkedForDescendantSchemaOrContentsComponentNarrow = true;
        if (this.schema !== undefined) {
            if (this.schema.entityKind === "component") {
                elementId.ref = new internalDtmi_1.InDTMI(this.schema.id);
                this._idOfDescendantSchemaOrContentsComponentNarrow = elementId.ref;
                return true;
            }
            if (this.schema.tryGetDescendantSchemaOrContentsComponentNarrow(elementId)) {
                this._idOfDescendantSchemaOrContentsComponentNarrow = elementId.ref;
                return true;
            }
        }
        elementId.ref = undefined;
        return false;
    }
    checkDescendantEnumValueDataType(ancestorId, datatype, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this._checkedDescendantEnumValueDatatype !== datatype) {
            this._checkedDescendantEnumValueDatatype = datatype;
        }
        if (this.schema !== undefined) {
            this.schema.checkDescendantEnumValueDataType(ancestorId, datatype, parsingErrors);
        }
    }
    tryGetDescendantSchemaArray(elementId) {
        if (this._checkedForDescendantSchemaArray) {
            elementId.ref = this._idOfDescendantSchemaArray;
            return this._idOfDescendantSchemaArray !== undefined;
        }
        this._checkedForDescendantSchemaArray = true;
        if (this.schema !== undefined) {
            if (this.schema.entityKind === "array") {
                elementId.ref = new internalDtmi_1.InDTMI(this.schema.id);
                this._idOfDescendantSchemaArray = elementId.ref;
                return true;
            }
            if (this.schema.tryGetDescendantSchemaArray(elementId)) {
                this._idOfDescendantSchemaArray = elementId.ref;
                return true;
            }
        }
        elementId.ref = undefined;
        return false;
    }
    getCountOfExtendsNarrow(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        throw new Error("Can not execute on an abstract class");
    }
    getCountOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrow(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        throw new Error("Can not execute on an abstract class");
    }
}
exports.SchemaFieldInfoImpl = SchemaFieldInfoImpl;
//# sourceMappingURL=schemaFieldInfoImpl.js.map