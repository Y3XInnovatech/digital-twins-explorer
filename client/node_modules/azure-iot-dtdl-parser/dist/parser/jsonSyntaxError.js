"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonSyntaxError = void 0;
// To be thowable this needs to extend error
class JsonSyntaxError extends Error {
    constructor(error, enumerationIndex, resolvingIdentifiers) {
        super("syntax or grammar error at enumeration index " +
            enumerationIndex +
            " while processing JSON text " +
            (resolvingIdentifiers === undefined ? "passed to parseAsync()" : "returned by DtmiResolver") +
            ": " +
            error.message);
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, JsonSyntaxError.prototype);
        this.name = "JsonSyntaxError";
        this._innerError = error;
        this._enumerationIndex = enumerationIndex;
        this._resolvingIdentifiers = resolvingIdentifiers;
    }
    get innerError() {
        return this._innerError;
    }
    get enumerationIndex() {
        return this._enumerationIndex;
    }
    get resolvingIdentifiers() {
        return this._resolvingIdentifiers;
    }
}
exports.JsonSyntaxError = JsonSyntaxError;
//# sourceMappingURL=jsonSyntaxError.js.map