"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/* eslint-disable valid-jsdoc */
/* eslint-disable guard-for-in */
/* eslint-disable no-empty */
/* eslint-disable no-empty-function */
/* eslint-disable no-unused-vars */
/* eslint-disable sort-imports */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParserInitializer = void 0;
const parserCollection_1 = require("./parserCollection");
const arrayInfoParser_1 = require("./arrayInfoParser");
const booleanInfoParser_1 = require("./booleanInfoParser");
const commandInfoParser_1 = require("./commandInfoParser");
const commandPayloadInfoParser_1 = require("./commandPayloadInfoParser");
const commandTypeInfoParser_1 = require("./commandTypeInfoParser");
const complexSchemaInfoParser_1 = require("./complexSchemaInfoParser");
const componentInfoParser_1 = require("./componentInfoParser");
const contentInfoParser_1 = require("./contentInfoParser");
const dateInfoParser_1 = require("./dateInfoParser");
const dateTimeInfoParser_1 = require("./dateTimeInfoParser");
const doubleInfoParser_1 = require("./doubleInfoParser");
const durationInfoParser_1 = require("./durationInfoParser");
const entityInfoParser_1 = require("./entityInfoParser");
const enumInfoParser_1 = require("./enumInfoParser");
const enumValueInfoParser_1 = require("./enumValueInfoParser");
const fieldInfoParser_1 = require("./fieldInfoParser");
const floatInfoParser_1 = require("./floatInfoParser");
const integerInfoParser_1 = require("./integerInfoParser");
const interfaceInfoParser_1 = require("./interfaceInfoParser");
const longInfoParser_1 = require("./longInfoParser");
const mapInfoParser_1 = require("./mapInfoParser");
const mapKeyInfoParser_1 = require("./mapKeyInfoParser");
const mapValueInfoParser_1 = require("./mapValueInfoParser");
const namedEntityInfoParser_1 = require("./namedEntityInfoParser");
const numericSchemaInfoParser_1 = require("./numericSchemaInfoParser");
const objectInfoParser_1 = require("./objectInfoParser");
const primitiveSchemaInfoParser_1 = require("./primitiveSchemaInfoParser");
const propertyInfoParser_1 = require("./propertyInfoParser");
const relationshipInfoParser_1 = require("./relationshipInfoParser");
const schemaInfoParser_1 = require("./schemaInfoParser");
const schemaFieldInfoParser_1 = require("./schemaFieldInfoParser");
const stringInfoParser_1 = require("./stringInfoParser");
const telemetryInfoParser_1 = require("./telemetryInfoParser");
const temporalSchemaInfoParser_1 = require("./temporalSchemaInfoParser");
const timeInfoParser_1 = require("./timeInfoParser");
const unitInfoParser_1 = require("./unitInfoParser");
const unitAttributeInfoParser_1 = require("./unitAttributeInfoParser");
const commandRequestInfoParser_1 = require("./commandRequestInfoParser");
const commandResponseInfoParser_1 = require("./commandResponseInfoParser");
const latentTypeInfoParser_1 = require("./latentTypeInfoParser");
const namedLatentTypeInfoParser_1 = require("./namedLatentTypeInfoParser");
const referenceInfoParser_1 = require("./referenceInfoParser");
const arrayInfoImpl_1 = require("./arrayInfoImpl");
const booleanInfoImpl_1 = require("./booleanInfoImpl");
const commandInfoImpl_1 = require("./commandInfoImpl");
const commandPayloadInfoImpl_1 = require("./commandPayloadInfoImpl");
const commandTypeInfoImpl_1 = require("./commandTypeInfoImpl");
const complexSchemaInfoImpl_1 = require("./complexSchemaInfoImpl");
const componentInfoImpl_1 = require("./componentInfoImpl");
const contentInfoImpl_1 = require("./contentInfoImpl");
const dateInfoImpl_1 = require("./dateInfoImpl");
const dateTimeInfoImpl_1 = require("./dateTimeInfoImpl");
const doubleInfoImpl_1 = require("./doubleInfoImpl");
const durationInfoImpl_1 = require("./durationInfoImpl");
const entityInfoImpl_1 = require("./entityInfoImpl");
const enumInfoImpl_1 = require("./enumInfoImpl");
const enumValueInfoImpl_1 = require("./enumValueInfoImpl");
const fieldInfoImpl_1 = require("./fieldInfoImpl");
const floatInfoImpl_1 = require("./floatInfoImpl");
const integerInfoImpl_1 = require("./integerInfoImpl");
const interfaceInfoImpl_1 = require("./interfaceInfoImpl");
const longInfoImpl_1 = require("./longInfoImpl");
const mapInfoImpl_1 = require("./mapInfoImpl");
const mapKeyInfoImpl_1 = require("./mapKeyInfoImpl");
const mapValueInfoImpl_1 = require("./mapValueInfoImpl");
const namedEntityInfoImpl_1 = require("./namedEntityInfoImpl");
const numericSchemaInfoImpl_1 = require("./numericSchemaInfoImpl");
const objectInfoImpl_1 = require("./objectInfoImpl");
const primitiveSchemaInfoImpl_1 = require("./primitiveSchemaInfoImpl");
const propertyInfoImpl_1 = require("./propertyInfoImpl");
const relationshipInfoImpl_1 = require("./relationshipInfoImpl");
const schemaInfoImpl_1 = require("./schemaInfoImpl");
const schemaFieldInfoImpl_1 = require("./schemaFieldInfoImpl");
const stringInfoImpl_1 = require("./stringInfoImpl");
const telemetryInfoImpl_1 = require("./telemetryInfoImpl");
const temporalSchemaInfoImpl_1 = require("./temporalSchemaInfoImpl");
const timeInfoImpl_1 = require("./timeInfoImpl");
const unitInfoImpl_1 = require("./unitInfoImpl");
const unitAttributeInfoImpl_1 = require("./unitAttributeInfoImpl");
const commandRequestInfoImpl_1 = require("./commandRequestInfoImpl");
const commandResponseInfoImpl_1 = require("./commandResponseInfoImpl");
const latentTypeInfoImpl_1 = require("./latentTypeInfoImpl");
const namedLatentTypeInfoImpl_1 = require("./namedLatentTypeInfoImpl");
const referenceInfoImpl_1 = require("./referenceInfoImpl");
const standardElements_1 = require("./standardElements");
/**
 * A class to initialize the parser objects at runtime
 **/
class ParserInitializer {
    static initialize() {
        if (!this.initialized) {
            // Populate ParserCollection object
            parserCollection_1.ParserCollection.ArrayInfoParser = arrayInfoParser_1.ArrayInfoParser;
            parserCollection_1.ParserCollection.BooleanInfoParser = booleanInfoParser_1.BooleanInfoParser;
            parserCollection_1.ParserCollection.CommandInfoParser = commandInfoParser_1.CommandInfoParser;
            parserCollection_1.ParserCollection.CommandPayloadInfoParser = commandPayloadInfoParser_1.CommandPayloadInfoParser;
            parserCollection_1.ParserCollection.CommandTypeInfoParser = commandTypeInfoParser_1.CommandTypeInfoParser;
            parserCollection_1.ParserCollection.ComplexSchemaInfoParser = complexSchemaInfoParser_1.ComplexSchemaInfoParser;
            parserCollection_1.ParserCollection.ComponentInfoParser = componentInfoParser_1.ComponentInfoParser;
            parserCollection_1.ParserCollection.ContentInfoParser = contentInfoParser_1.ContentInfoParser;
            parserCollection_1.ParserCollection.DateInfoParser = dateInfoParser_1.DateInfoParser;
            parserCollection_1.ParserCollection.DateTimeInfoParser = dateTimeInfoParser_1.DateTimeInfoParser;
            parserCollection_1.ParserCollection.DoubleInfoParser = doubleInfoParser_1.DoubleInfoParser;
            parserCollection_1.ParserCollection.DurationInfoParser = durationInfoParser_1.DurationInfoParser;
            parserCollection_1.ParserCollection.EntityInfoParser = entityInfoParser_1.EntityInfoParser;
            parserCollection_1.ParserCollection.EnumInfoParser = enumInfoParser_1.EnumInfoParser;
            parserCollection_1.ParserCollection.EnumValueInfoParser = enumValueInfoParser_1.EnumValueInfoParser;
            parserCollection_1.ParserCollection.FieldInfoParser = fieldInfoParser_1.FieldInfoParser;
            parserCollection_1.ParserCollection.FloatInfoParser = floatInfoParser_1.FloatInfoParser;
            parserCollection_1.ParserCollection.IntegerInfoParser = integerInfoParser_1.IntegerInfoParser;
            parserCollection_1.ParserCollection.InterfaceInfoParser = interfaceInfoParser_1.InterfaceInfoParser;
            parserCollection_1.ParserCollection.LongInfoParser = longInfoParser_1.LongInfoParser;
            parserCollection_1.ParserCollection.MapInfoParser = mapInfoParser_1.MapInfoParser;
            parserCollection_1.ParserCollection.MapKeyInfoParser = mapKeyInfoParser_1.MapKeyInfoParser;
            parserCollection_1.ParserCollection.MapValueInfoParser = mapValueInfoParser_1.MapValueInfoParser;
            parserCollection_1.ParserCollection.NamedEntityInfoParser = namedEntityInfoParser_1.NamedEntityInfoParser;
            parserCollection_1.ParserCollection.NumericSchemaInfoParser = numericSchemaInfoParser_1.NumericSchemaInfoParser;
            parserCollection_1.ParserCollection.ObjectInfoParser = objectInfoParser_1.ObjectInfoParser;
            parserCollection_1.ParserCollection.PrimitiveSchemaInfoParser = primitiveSchemaInfoParser_1.PrimitiveSchemaInfoParser;
            parserCollection_1.ParserCollection.PropertyInfoParser = propertyInfoParser_1.PropertyInfoParser;
            parserCollection_1.ParserCollection.RelationshipInfoParser = relationshipInfoParser_1.RelationshipInfoParser;
            parserCollection_1.ParserCollection.SchemaInfoParser = schemaInfoParser_1.SchemaInfoParser;
            parserCollection_1.ParserCollection.SchemaFieldInfoParser = schemaFieldInfoParser_1.SchemaFieldInfoParser;
            parserCollection_1.ParserCollection.StringInfoParser = stringInfoParser_1.StringInfoParser;
            parserCollection_1.ParserCollection.TelemetryInfoParser = telemetryInfoParser_1.TelemetryInfoParser;
            parserCollection_1.ParserCollection.TemporalSchemaInfoParser = temporalSchemaInfoParser_1.TemporalSchemaInfoParser;
            parserCollection_1.ParserCollection.TimeInfoParser = timeInfoParser_1.TimeInfoParser;
            parserCollection_1.ParserCollection.UnitInfoParser = unitInfoParser_1.UnitInfoParser;
            parserCollection_1.ParserCollection.UnitAttributeInfoParser = unitAttributeInfoParser_1.UnitAttributeInfoParser;
            parserCollection_1.ParserCollection.CommandRequestInfoParser = commandRequestInfoParser_1.CommandRequestInfoParser;
            parserCollection_1.ParserCollection.CommandResponseInfoParser = commandResponseInfoParser_1.CommandResponseInfoParser;
            parserCollection_1.ParserCollection.LatentTypeInfoParser = latentTypeInfoParser_1.LatentTypeInfoParser;
            parserCollection_1.ParserCollection.NamedLatentTypeInfoParser = namedLatentTypeInfoParser_1.NamedLatentTypeInfoParser;
            parserCollection_1.ParserCollection.ReferenceInfoParser = referenceInfoParser_1.ReferenceInfoParser;
            // Initialize parsers
            arrayInfoParser_1.ArrayInfoParser.initialize();
            booleanInfoParser_1.BooleanInfoParser.initialize();
            commandInfoParser_1.CommandInfoParser.initialize();
            commandPayloadInfoParser_1.CommandPayloadInfoParser.initialize();
            commandTypeInfoParser_1.CommandTypeInfoParser.initialize();
            complexSchemaInfoParser_1.ComplexSchemaInfoParser.initialize();
            componentInfoParser_1.ComponentInfoParser.initialize();
            contentInfoParser_1.ContentInfoParser.initialize();
            dateInfoParser_1.DateInfoParser.initialize();
            dateTimeInfoParser_1.DateTimeInfoParser.initialize();
            doubleInfoParser_1.DoubleInfoParser.initialize();
            durationInfoParser_1.DurationInfoParser.initialize();
            entityInfoParser_1.EntityInfoParser.initialize();
            enumInfoParser_1.EnumInfoParser.initialize();
            enumValueInfoParser_1.EnumValueInfoParser.initialize();
            fieldInfoParser_1.FieldInfoParser.initialize();
            floatInfoParser_1.FloatInfoParser.initialize();
            integerInfoParser_1.IntegerInfoParser.initialize();
            interfaceInfoParser_1.InterfaceInfoParser.initialize();
            longInfoParser_1.LongInfoParser.initialize();
            mapInfoParser_1.MapInfoParser.initialize();
            mapKeyInfoParser_1.MapKeyInfoParser.initialize();
            mapValueInfoParser_1.MapValueInfoParser.initialize();
            namedEntityInfoParser_1.NamedEntityInfoParser.initialize();
            numericSchemaInfoParser_1.NumericSchemaInfoParser.initialize();
            objectInfoParser_1.ObjectInfoParser.initialize();
            primitiveSchemaInfoParser_1.PrimitiveSchemaInfoParser.initialize();
            propertyInfoParser_1.PropertyInfoParser.initialize();
            relationshipInfoParser_1.RelationshipInfoParser.initialize();
            schemaInfoParser_1.SchemaInfoParser.initialize();
            schemaFieldInfoParser_1.SchemaFieldInfoParser.initialize();
            stringInfoParser_1.StringInfoParser.initialize();
            telemetryInfoParser_1.TelemetryInfoParser.initialize();
            temporalSchemaInfoParser_1.TemporalSchemaInfoParser.initialize();
            timeInfoParser_1.TimeInfoParser.initialize();
            unitInfoParser_1.UnitInfoParser.initialize();
            unitAttributeInfoParser_1.UnitAttributeInfoParser.initialize();
            commandRequestInfoParser_1.CommandRequestInfoParser.initialize();
            commandResponseInfoParser_1.CommandResponseInfoParser.initialize();
            latentTypeInfoParser_1.LatentTypeInfoParser.initialize();
            namedLatentTypeInfoParser_1.NamedLatentTypeInfoParser.initialize();
            referenceInfoParser_1.ReferenceInfoParser.initialize();
            // Initialize validator classes
            arrayInfoImpl_1.ArrayInfoImpl.initialize();
            booleanInfoImpl_1.BooleanInfoImpl.initialize();
            commandInfoImpl_1.CommandInfoImpl.initialize();
            commandPayloadInfoImpl_1.CommandPayloadInfoImpl.initialize();
            commandTypeInfoImpl_1.CommandTypeInfoImpl.initialize();
            complexSchemaInfoImpl_1.ComplexSchemaInfoImpl.initialize();
            componentInfoImpl_1.ComponentInfoImpl.initialize();
            contentInfoImpl_1.ContentInfoImpl.initialize();
            dateInfoImpl_1.DateInfoImpl.initialize();
            dateTimeInfoImpl_1.DateTimeInfoImpl.initialize();
            doubleInfoImpl_1.DoubleInfoImpl.initialize();
            durationInfoImpl_1.DurationInfoImpl.initialize();
            entityInfoImpl_1.EntityInfoImpl.initialize();
            enumInfoImpl_1.EnumInfoImpl.initialize();
            enumValueInfoImpl_1.EnumValueInfoImpl.initialize();
            fieldInfoImpl_1.FieldInfoImpl.initialize();
            floatInfoImpl_1.FloatInfoImpl.initialize();
            integerInfoImpl_1.IntegerInfoImpl.initialize();
            interfaceInfoImpl_1.InterfaceInfoImpl.initialize();
            longInfoImpl_1.LongInfoImpl.initialize();
            mapInfoImpl_1.MapInfoImpl.initialize();
            mapKeyInfoImpl_1.MapKeyInfoImpl.initialize();
            mapValueInfoImpl_1.MapValueInfoImpl.initialize();
            namedEntityInfoImpl_1.NamedEntityInfoImpl.initialize();
            numericSchemaInfoImpl_1.NumericSchemaInfoImpl.initialize();
            objectInfoImpl_1.ObjectInfoImpl.initialize();
            primitiveSchemaInfoImpl_1.PrimitiveSchemaInfoImpl.initialize();
            propertyInfoImpl_1.PropertyInfoImpl.initialize();
            relationshipInfoImpl_1.RelationshipInfoImpl.initialize();
            schemaInfoImpl_1.SchemaInfoImpl.initialize();
            schemaFieldInfoImpl_1.SchemaFieldInfoImpl.initialize();
            stringInfoImpl_1.StringInfoImpl.initialize();
            telemetryInfoImpl_1.TelemetryInfoImpl.initialize();
            temporalSchemaInfoImpl_1.TemporalSchemaInfoImpl.initialize();
            timeInfoImpl_1.TimeInfoImpl.initialize();
            unitInfoImpl_1.UnitInfoImpl.initialize();
            unitAttributeInfoImpl_1.UnitAttributeInfoImpl.initialize();
            commandRequestInfoImpl_1.CommandRequestInfoImpl.initialize();
            commandResponseInfoImpl_1.CommandResponseInfoImpl.initialize();
            latentTypeInfoImpl_1.LatentTypeInfoImpl.initialize();
            namedLatentTypeInfoImpl_1.NamedLatentTypeInfoImpl.initialize();
            referenceInfoImpl_1.ReferenceInfoImpl.initialize();
            standardElements_1.StandardElements.initialize();
        }
    }
}
exports.ParserInitializer = ParserInitializer;
ParserInitializer.initialized = false;
//# sourceMappingURL=parserInitializer.js.map