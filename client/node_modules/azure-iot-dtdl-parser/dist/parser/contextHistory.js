"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextHistory = void 0;
class ContextHistory {
    constructor(versionedContexts) {
        this._versionedContexts = versionedContexts;
        this._availableVersions = versionedContexts
            .map((vc) => vc.majorVersion)
            .filter((v, i, a) => a.indexOf(v) === i)
            .sort()
            .join(", ");
    }
    get availableVersions() {
        return this._availableVersions;
    }
    getTerm(uriString) {
        for (const versionedContext of this._versionedContexts) {
            const term = versionedContext.getTerm(uriString);
            if (term !== undefined) {
                return term;
            }
        }
        return undefined;
    }
    isTermInContext(term) {
        return this._versionedContexts.some((vc) => vc.isTermInContext(term));
    }
    isIdentifierInContext(uriString) {
        return this._versionedContexts.some((vc) => vc.isIdentifierInContext(uriString));
    }
    getMatchingContext(majorVersion, minorVersion) {
        let bestMatchContext;
        for (const versionedContext of this._versionedContexts) {
            if (versionedContext.majorVersion === majorVersion &&
                versionedContext.minorVersion <= minorVersion &&
                (bestMatchContext === undefined || versionedContext.minorVersion > bestMatchContext.minorVersion)) {
                bestMatchContext = versionedContext;
            }
        }
        if (bestMatchContext === undefined) {
            return undefined;
        }
        else {
            return bestMatchContext;
        }
    }
}
exports.ContextHistory = ContextHistory;
//# sourceMappingURL=contextHistory.js.map