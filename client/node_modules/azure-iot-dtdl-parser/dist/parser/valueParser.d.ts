import { ParsingError } from "./parsingError";
export declare class ValueParser {
    static parseSingularStringToken(elementId: string, propertyName: string, token: unknown, maxLength: number | undefined, pattern: RegExp | undefined, parsingErrors: ParsingError[]): string | undefined;
    static parseSingularIntegerToken(elementId: string, propertyName: string, token: unknown, minInclusive: number | undefined, maxInclusive: number | undefined, parsingErrors: ParsingError[]): number;
    static parseSingularBooleanToken(elementId: string, propertyName: string, token: unknown, parsingErrors: ParsingError[]): boolean;
    static parseLangStringToken(elementId: string, propertyName: string, token: unknown, defaultLang: string, maxLength: number | undefined, pattern: RegExp | undefined, parsingErrors: ParsingError[]): {
        [index: string]: string;
    };
    static parseSingularLiteralToken(elementId: string, propertyName: string, token: unknown, parsingErrors: ParsingError[]): {
        value: unknown;
        typeFragment: string;
    };
    static parseSingularIdentifierToken(elementId: string, propertyName: string, token: unknown, maxLength: number | undefined, pattern: RegExp | undefined, parsingErrors: ParsingError[]): string | undefined;
    private static _getStringFromToken;
    private static _getIntegerFromToken;
    private static _getBooleanFromToken;
    private static _getDictionaryFromLanguageTaggedStringArray;
    private static _getDictionaryFromLanguageMap;
    private static _isValidLanguageCode;
}
//# sourceMappingURL=valueParser.d.ts.map