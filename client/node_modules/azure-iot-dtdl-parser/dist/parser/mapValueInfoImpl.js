"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/* eslint-disable valid-jsdoc */
/* eslint-disable guard-for-in */
/* eslint-disable no-empty */
/* eslint-disable no-empty-function */
/* eslint-disable no-unused-vars */
/* eslint-disable sort-imports */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapValueInfoImpl = void 0;
const parserCollection_1 = require("./parserCollection");
const internalDtmi_1 = require("./internalDtmi");
const parsingErrorImpl_1 = require("./parsingErrorImpl");
const enum_1 = require("./enum");
class MapValueInfoImpl {
    constructor(dtdlVersion, id, childOf, definedIn, entityKind) {
        this.namePropertyRegexPatternV2 = /^[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?$/;
        this.namePropertyRegexPatternV3 = /^[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?$/;
        this._schemaValueConstraints = [];
        this._schemaInstanceProperties = [];
        this._schemaAllowedVersionsV2 = new Set().add(2);
        this._schemaAllowedVersionsV3 = new Set().add(3).add(2);
        this.parserClass = parserCollection_1.ParserCollection.MapValueInfoParser;
        this.dtdlVersion = dtdlVersion;
        this.id = id;
        this.childOf = childOf;
        this.definedIn = definedIn;
        this.entityKind = entityKind;
        this.description = {};
        this.displayName = {};
        this.supplementalTypeIds = [];
        this.supplementalProperties = {};
        this.supplementalTypes = [];
        this.isPartition = false;
        this.undefinedTypes = [];
        this.undefinedProperties = {};
        this._checkedForDescendantSchemaOrContentsComponentNarrow = false;
        this._idOfDescendantSchemaOrContentsComponentNarrow = undefined;
        this._checkedDescendantEnumValueDatatype = undefined;
        this._checkedForDescendantSchemaArray = false;
        this._idOfDescendantSchemaArray = undefined;
        this._countOfExtendsNarrowStatus = enum_1.TraversalStatus.NotStarted;
        this._countOfExtendsNarrowValue = 0;
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus =
            enum_1.TraversalStatus.NotStarted;
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue = 0;
    }
    static initialize() {
        this._versionlessTypes = new Set()
            .add("dtmi:dtdl:class:Entity")
            .add("dtmi:dtdl:class:MapValue")
            .add("dtmi:dtdl:class:NamedEntity")
            .add("dtmi:dtdl:class:SchemaField");
    }
    addType(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    dtmi, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    supplementalType) {
        this.supplementalTypeIds.push(dtmi);
        if (supplementalType !== undefined) {
            this.supplementalTypes.push(supplementalType);
        }
        supplementalType.attachConstraints(this);
        supplementalType.bindInstanceProperties(this);
    }
    doesHaveType(typeId) {
        return (MapValueInfoImpl._versionlessTypes.has(new internalDtmi_1.InDTMI(typeId).versionless) ||
            this.supplementalTypes.some((st) => st.doesHaveType(typeId)));
    }
    addConstraint(propertyName, valueConstraint) {
        switch (propertyName) {
            case "schema":
                if (this._schemaValueConstraints === undefined) {
                    this._schemaValueConstraints = [];
                }
                this._schemaValueConstraints.push(valueConstraint);
                break;
        }
    }
    addInstanceProperty(propertyName, instancePropertyName) {
        switch (propertyName) {
            case "schema":
                if (this._schemaInstanceProperties === undefined) {
                    this._schemaInstanceProperties = [];
                }
                this._schemaInstanceProperties.push(instancePropertyName);
                break;
        }
    }
    doesPropertyDictContainKey(propertyName, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    key) {
        switch (propertyName) {
            default:
                return false;
        }
    }
    validateInstance(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceText) {
        const instanceElt = JSON.parse(instanceText);
        return this.validateInstanceElement(instanceElt);
    }
    validateInstanceElement(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt) {
        return this.validateInstanceInternal(instanceElt, undefined);
    }
    validateInstanceInternal(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        switch (this.dtdlVersion) {
            case 2: {
                return this.validateInstanceV2(instanceElt, instanceName);
            }
            case 3: {
                return this.validateInstanceV3(instanceElt, instanceName);
            }
        }
        return false;
    }
    validateInstanceV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        var _a;
        if (!((_a = this.schema) === null || _a === void 0 ? void 0 : _a.validateInstanceInternal(instanceElt, instanceName))) {
            return false;
        }
        return true;
    }
    validateInstanceV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceElt, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    instanceName) {
        var _a;
        if (!((_a = this.schema) === null || _a === void 0 ? void 0 : _a.validateInstanceInternal(instanceElt, instanceName))) {
            return false;
        }
        return true;
    }
    /**
     * Set partition information.
     **/
    setPartitionInfo(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    partitionJsonText) {
        throw new Error(`attempt to set partition info on non-partition type MapValueInfoInfo`);
    }
    applyTransformations(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this.dtdlVersion === 2) {
            this.applyTransformationsV2(model, parsingErrors);
        }
        if (this.dtdlVersion === 3) {
            this.applyTransformationsV3(model, parsingErrors);
        }
    }
    applyTransformationsV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) { }
    applyTransformationsV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    model, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) { }
    checkRestrictions(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this.dtdlVersion === 2) {
            this.checkRestrictionsV2(parsingErrors);
        }
        if (this.dtdlVersion === 3) {
            this.checkRestrictionsV3(parsingErrors);
        }
    }
    checkRestrictionsV2(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        var _a;
        if (this._schemaInstanceProperties !== undefined) {
            for (const instanceProp of this._schemaInstanceProperties) {
                if (!((_a = this.schema) === null || _a === void 0 ? void 0 : _a.validateInstanceElement(this.supplementalProperties[instanceProp]))) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:nonConformantPropertyValue", {
                        cause: "{{primaryId:n}} property '{{property}}' does not conform to the type specified by property 'schema' ",
                        action: "Change the value of property '{{property}}' so that it conforms to property  'schema'",
                        primaryId: this.id,
                        property: instanceProp,
                    }));
                }
            }
        }
    }
    checkRestrictionsV3(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        var _a;
        if (this._schemaInstanceProperties !== undefined) {
            for (const instanceProp of this._schemaInstanceProperties) {
                if (!((_a = this.schema) === null || _a === void 0 ? void 0 : _a.validateInstanceElement(this.supplementalProperties[instanceProp]))) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:nonConformantPropertyValue", {
                        cause: "{{primaryId:n}} property '{{property}}' does not conform to the type specified by property 'schema' ",
                        action: "Change the value of property '{{property}}' so that it conforms to property  'schema'",
                        primaryId: this.id,
                        property: instanceProp,
                    }));
                }
            }
        }
    }
    trySetObjectProperty(propertyName, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/explicit-module-boundary-types
    value, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    key) {
        switch (propertyName) {
            case "schema":
            case "dtmi:dtdl:property:schema;2":
            case "dtmi:dtdl:property:schema;3":
                this.schema = value;
                return true;
            default:
                break;
        }
        for (const supplementalType of this.supplementalTypes) {
            if (supplementalType.trySetObjectProperty(propertyName, value, key, this.supplementalProperties)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check the nesting depth of all descendant elementSchema or schema properties.
     **/
    checkDepthOfElementSchemaOrSchema(depth, depthLimit, tooDeepElementId, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        var _a;
        if (this.schema !== undefined) {
            if (depth === depthLimit) {
                tooDeepElementId.ref = internalDtmi_1.InDTMI.createDtmi(this.id);
                return false;
            }
        }
        if (this.schema !== undefined) {
            if (!this.schema.checkDepthOfElementSchemaOrSchema(depth + 1, depthLimit, tooDeepElementId, parsingErrors)) {
                if (((_a = tooDeepElementId.ref) === null || _a === void 0 ? void 0 : _a.value) === this.id) {
                    parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                        cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                        action: `Change the value of one or more 'elementSchema' or 'schema' properties in the hierarchy to remeve the recursion.`,
                        primaryId: this.id,
                    }));
                    tooDeepElementId.ref = undefined;
                }
                return false;
            }
        }
        tooDeepElementId.ref = undefined;
        return true;
    }
    tryGetDescendantSchemaOrContentsComponentNarrow(elementId) {
        if (this._checkedForDescendantSchemaOrContentsComponentNarrow) {
            elementId.ref = this._idOfDescendantSchemaOrContentsComponentNarrow;
            return this._idOfDescendantSchemaOrContentsComponentNarrow !== undefined;
        }
        this._checkedForDescendantSchemaOrContentsComponentNarrow = true;
        if (this.schema !== undefined) {
            if (this.schema.entityKind === "component") {
                elementId.ref = new internalDtmi_1.InDTMI(this.schema.id);
                this._idOfDescendantSchemaOrContentsComponentNarrow = elementId.ref;
                return true;
            }
            if (this.schema.tryGetDescendantSchemaOrContentsComponentNarrow(elementId)) {
                this._idOfDescendantSchemaOrContentsComponentNarrow = elementId.ref;
                return true;
            }
        }
        elementId.ref = undefined;
        return false;
    }
    checkDescendantEnumValueDataType(ancestorId, datatype, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        if (this._checkedDescendantEnumValueDatatype !== datatype) {
            this._checkedDescendantEnumValueDatatype = datatype;
        }
        if (this.schema !== undefined) {
            this.schema.checkDescendantEnumValueDataType(ancestorId, datatype, parsingErrors);
        }
    }
    getTransitiveExtendsNarrow(depth, depthLimit, tooDeepElementId, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    parsingErrors) {
        const closure = new Set();
        tooDeepElementId.ref = undefined;
        return closure;
    }
    tryGetDescendantSchemaArray(elementId) {
        if (this._checkedForDescendantSchemaArray) {
            elementId.ref = this._idOfDescendantSchemaArray;
            return this._idOfDescendantSchemaArray !== undefined;
        }
        this._checkedForDescendantSchemaArray = true;
        if (this.schema !== undefined) {
            if (this.schema.entityKind === "array") {
                elementId.ref = new internalDtmi_1.InDTMI(this.schema.id);
                this._idOfDescendantSchemaArray = elementId.ref;
                return true;
            }
            if (this.schema.tryGetDescendantSchemaArray(elementId)) {
                this._idOfDescendantSchemaArray = elementId.ref;
                return true;
            }
        }
        elementId.ref = undefined;
        return false;
    }
    getCountOfExtendsNarrow(parsingErrors) {
        if (this._countOfExtendsNarrowStatus === enum_1.TraversalStatus.Complete) {
            return this._countOfExtendsNarrowValue;
        }
        if (this._countOfExtendsNarrowStatus === enum_1.TraversalStatus.InProgress) {
            parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                action: `Change the value of one or more 'extends' properties in the hierarchy to remeve the recursion.`,
                primaryId: this.id,
            }));
            return 0;
        }
        this._countOfExtendsNarrowStatus = enum_1.TraversalStatus.InProgress;
        this._countOfExtendsNarrowStatus = enum_1.TraversalStatus.Complete;
        return this._countOfExtendsNarrowValue;
    }
    getCountOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrow(parsingErrors) {
        if (this
            ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus ===
            enum_1.TraversalStatus.Complete) {
            return this
                ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue;
        }
        if (this
            ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus ===
            enum_1.TraversalStatus.InProgress) {
            parsingErrors.push((0, parsingErrorImpl_1.createParsingError)("dtmi:dtdl:parsingError:recursiveStructure", {
                cause: `{primaryId:n} is at the root of a hierarchy that includes itself.`,
                action: `Change the value of one or more 'contents' or 'fields' or 'enumValues' or 'request' or 'response' or 'properties' or 'schema' or 'elementSchema' or 'mapValue' properties in the hierarchy to remeve the recursion.`,
                primaryId: this.id,
            }));
            return 0;
        }
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus =
            enum_1.TraversalStatus.InProgress;
        if (this.schema !== undefined) {
            this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue +=
                this.schema.getCountOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrow(parsingErrors) + 1;
        }
        this._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowStatus =
            enum_1.TraversalStatus.Complete;
        return this
            ._countOfContentsOrFieldsOrEnumValuesOrRequestOrResponseOrPropertiesOrSchemaOrElementSchemaOrMapValueNarrowValue;
    }
}
exports.MapValueInfoImpl = MapValueInfoImpl;
//# sourceMappingURL=mapValueInfoImpl.js.map