import { InDTMI } from "./internalDtmi";
import { ParsingError } from "./parsingError";
/**
 * Class for parsing and storing information from JSON-LD context blocks.
 **/
export declare class AggregateContext {
    private static _dtdlVersionsAllowingLocalTerms;
    private static _affiliateContextsImplicitDtdlVersions;
    static initialize(): void;
    private static _getDtdlContextHistory;
    private static _getAffiliate0ContextHistory;
    private static _getAffiliate1ContextHistory;
    private static _getAffiliate2ContextHistory;
    private static _getAffiliate3ContextHistory;
    private static readonly _contextKeyword;
    private static readonly _dtdlContextPrefix;
    private static _termRegex;
    private static _dtdlContextHistory;
    private static _affiliateContextHistories;
    private readonly _rejectUndefinedExtensions;
    private readonly _rejectNonDtmiContexts;
    private readonly _maxDtdlVersion?;
    private _activeDtdlContext?;
    private _activeAffiliateContexts;
    private _localTermDefinitions;
    private _localPrefixDefinitions;
    constructor(rejectUndefinedExtensions: boolean, rejectNonDtmiContexts: boolean, maxDtdlVersion?: number);
    get dtdlVersion(): number;
    static getTermOrUri(uriString: string): string;
    static isIdentifierInContext(uriString: string): boolean;
    getChildContext(obj: {
        [index: string]: any;
    }, parsingErrors: ParsingError[]): AggregateContext;
    createDtmi(uriOrTerm: string): InDTMI | undefined;
    private _getChildContextFromContextArray;
    private _getDtdlContextFromContextString;
    private _getAffiliateContextFromContextToken;
    private _getChildDefinitionsfromContextObject;
}
//# sourceMappingURL=aggregateContext.d.ts.map