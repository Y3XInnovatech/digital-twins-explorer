{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, css, getId, EventGroup } from '../../Utilities';\nimport { SELECTION_CHANGE } from '../../utilities/selection/index';\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\nimport { List } from '../../List';\nvar DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\nvar GroupedListSection = /** @class */function (_super) {\n  __extends(GroupedListSection, _super);\n  function GroupedListSection(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._list = React.createRef();\n    _this._subGroupRefs = {};\n    _this._droppingClassName = '';\n    _this._onRenderGroupHeader = function (props) {\n      return React.createElement(GroupHeader, __assign({}, props));\n    };\n    _this._onRenderGroupShowAll = function (props) {\n      return React.createElement(GroupShowAll, __assign({}, props));\n    };\n    _this._onRenderGroupFooter = function (props) {\n      return React.createElement(GroupFooter, __assign({}, props));\n    };\n    _this._renderSubGroup = function (subGroup, subGroupIndex) {\n      var _a = _this.props,\n        dragDropEvents = _a.dragDropEvents,\n        dragDropHelper = _a.dragDropHelper,\n        eventsToRegister = _a.eventsToRegister,\n        getGroupItemLimit = _a.getGroupItemLimit,\n        groupNestingDepth = _a.groupNestingDepth,\n        groupProps = _a.groupProps,\n        items = _a.items,\n        headerProps = _a.headerProps,\n        showAllProps = _a.showAllProps,\n        footerProps = _a.footerProps,\n        listProps = _a.listProps,\n        onRenderCell = _a.onRenderCell,\n        selection = _a.selection,\n        selectionMode = _a.selectionMode,\n        viewport = _a.viewport,\n        onRenderGroupHeader = _a.onRenderGroupHeader,\n        onRenderGroupShowAll = _a.onRenderGroupShowAll,\n        onRenderGroupFooter = _a.onRenderGroupFooter,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        group = _a.group,\n        compact = _a.compact;\n      var nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n      return !subGroup || subGroup.count > 0 || groupProps && groupProps.showEmptyGroups ? React.createElement(GroupedListSection, {\n        ref: function (ref) {\n          return _this._subGroupRefs['subGroup_' + subGroupIndex] = ref;\n        },\n        key: _this._getGroupKey(subGroup, subGroupIndex),\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        eventsToRegister: eventsToRegister,\n        footerProps: footerProps,\n        getGroupItemLimit: getGroupItemLimit,\n        group: subGroup,\n        groupIndex: subGroupIndex,\n        groupNestingDepth: nestingDepth,\n        groupProps: groupProps,\n        headerProps: headerProps,\n        items: items,\n        listProps: listProps,\n        onRenderCell: onRenderCell,\n        selection: selection,\n        selectionMode: selectionMode,\n        showAllProps: showAllProps,\n        viewport: viewport,\n        onRenderGroupHeader: onRenderGroupHeader,\n        onRenderGroupShowAll: onRenderGroupShowAll,\n        onRenderGroupFooter: onRenderGroupFooter,\n        onShouldVirtualize: onShouldVirtualize,\n        groups: group ? group.children : [],\n        compact: compact\n      }) : null;\n    };\n    /**\n     * collect all the data we need to enable drag/drop for a group\n     */\n    _this._getGroupDragDropOptions = function () {\n      var _a = _this.props,\n        group = _a.group,\n        groupIndex = _a.groupIndex,\n        dragDropEvents = _a.dragDropEvents,\n        eventsToRegister = _a.eventsToRegister;\n      var options = {\n        eventMap: eventsToRegister,\n        selectionIndex: -1,\n        context: {\n          data: group,\n          index: groupIndex,\n          isGroup: true\n        },\n        updateDropState: _this._updateDroppingState,\n        canDrag: dragDropEvents.canDrag,\n        canDrop: dragDropEvents.canDrop,\n        onDrop: dragDropEvents.onDrop,\n        onDragStart: dragDropEvents.onDragStart,\n        onDragEnter: dragDropEvents.onDragEnter,\n        onDragLeave: dragDropEvents.onDragLeave,\n        onDragEnd: dragDropEvents.onDragEnd,\n        onDragOver: dragDropEvents.onDragOver\n      };\n      return options;\n    };\n    /**\n     * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n     *\n     * @param newValue - new isDropping state value\n     * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n     */\n    _this._updateDroppingState = function (newIsDropping, event) {\n      var isDropping = _this.state.isDropping;\n      var _a = _this.props,\n        dragDropEvents = _a.dragDropEvents,\n        group = _a.group;\n      if (isDropping !== newIsDropping) {\n        if (isDropping) {\n          if (dragDropEvents && dragDropEvents.onDragLeave) {\n            dragDropEvents.onDragLeave(group, event);\n          }\n        } else {\n          if (dragDropEvents && dragDropEvents.onDragEnter) {\n            _this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n          }\n        }\n        _this.setState({\n          isDropping: newIsDropping\n        });\n      }\n    };\n    var selection = props.selection,\n      group = props.group;\n    initializeComponentRef(_this);\n    _this._id = getId('GroupedListSection');\n    _this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false\n    };\n    _this._events = new EventGroup(_this);\n    return _this;\n  }\n  GroupedListSection.prototype.componentDidMount = function () {\n    var _a = this.props,\n      dragDropHelper = _a.dragDropHelper,\n      selection = _a.selection;\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n    }\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  };\n  GroupedListSection.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  };\n  GroupedListSection.prototype.componentDidUpdate = function (previousProps) {\n    if (this.props.group !== previousProps.group || this.props.groupIndex !== previousProps.groupIndex || this.props.dragDropHelper !== previousProps.dragDropHelper) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n      }\n    }\n  };\n  GroupedListSection.prototype.render = function () {\n    var _a = this.props,\n      getGroupItemLimit = _a.getGroupItemLimit,\n      group = _a.group,\n      groupIndex = _a.groupIndex,\n      headerProps = _a.headerProps,\n      showAllProps = _a.showAllProps,\n      footerProps = _a.footerProps,\n      viewport = _a.viewport,\n      selectionMode = _a.selectionMode,\n      _b = _a.onRenderGroupHeader,\n      onRenderGroupHeader = _b === void 0 ? this._onRenderGroupHeader : _b,\n      _c = _a.onRenderGroupShowAll,\n      onRenderGroupShowAll = _c === void 0 ? this._onRenderGroupShowAll : _c,\n      _d = _a.onRenderGroupFooter,\n      onRenderGroupFooter = _d === void 0 ? this._onRenderGroupFooter : _d,\n      onShouldVirtualize = _a.onShouldVirtualize,\n      groupedListClassNames = _a.groupedListClassNames,\n      groups = _a.groups,\n      compact = _a.compact,\n      _e = _a.listProps,\n      listProps = _e === void 0 ? {} : _e;\n    var isSelected = this.state.isSelected;\n    var renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    var isShowAllVisible = group && !group.children && !group.isCollapsed && !group.isShowingAll && (group.count > renderCount || group.hasMoreData);\n    var hasNestedGroups = group && group.children && group.children.length > 0;\n    var version = listProps.version;\n    var dividerProps = {\n      group: group,\n      groupIndex: groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected: isSelected,\n      selected: isSelected,\n      viewport: viewport,\n      selectionMode: selectionMode,\n      groups: groups,\n      compact: compact\n    };\n    var ariaControlsProps = {\n      groupedListId: this._id,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined\n    };\n    var groupHeaderProps = __assign(__assign(__assign({}, headerProps), dividerProps), ariaControlsProps);\n    var groupShowAllProps = __assign(__assign({}, showAllProps), dividerProps);\n    var groupFooterProps = __assign(__assign({}, footerProps), dividerProps);\n    var isDraggable = !!this.props.dragDropHelper && this._getGroupDragDropOptions().canDrag(group) && !!this.props.dragDropEvents.canDragGroups;\n    return React.createElement(\"div\", __assign({\n      ref: this._root\n    }, isDraggable && {\n      draggable: true\n    }, {\n      className: css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName()),\n      role: \"presentation\"\n    }), onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader), group && group.isCollapsed ? null : hasNestedGroups ? React.createElement(List, {\n      role: \"presentation\",\n      ref: this._list,\n      items: group ? group.children : [],\n      onRenderCell: this._renderSubGroup,\n      getItemCountForPage: this._returnOne,\n      onShouldVirtualize: onShouldVirtualize,\n      version: version,\n      id: this._id\n    }) : this._onRenderGroup(renderCount), group && group.isCollapsed ? null : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll), onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter));\n  };\n  GroupedListSection.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n    this.forceListUpdate();\n  };\n  GroupedListSection.prototype.forceListUpdate = function () {\n    var group = this.props.group;\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n      if (group && group.children && group.children.length > 0) {\n        var subGroupCount = group.children.length;\n        for (var i = 0; i < subGroupCount; i++) {\n          var subGroup = this._list.current.pageRefs['subGroup_' + String(i)];\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      var subGroup = this._subGroupRefs['subGroup_' + String(0)];\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  };\n  GroupedListSection.prototype._onSelectionChange = function () {\n    var _a = this.props,\n      group = _a.group,\n      selection = _a.selection;\n    if (selection && group) {\n      var isSelected = selection.isRangeSelected(group.startIndex, group.count);\n      if (isSelected !== this.state.isSelected) {\n        this.setState({\n          isSelected: isSelected\n        });\n      }\n    }\n  };\n  GroupedListSection.prototype._onRenderGroupCell = function (onRenderCell, groupNestingDepth) {\n    return function (item, itemIndex) {\n      return onRenderCell(groupNestingDepth, item, itemIndex);\n    };\n  };\n  GroupedListSection.prototype._onRenderGroup = function (renderCount) {\n    var _a;\n    var _b = this.props,\n      group = _b.group,\n      items = _b.items,\n      onRenderCell = _b.onRenderCell,\n      listProps = _b.listProps,\n      groupNestingDepth = _b.groupNestingDepth,\n      onShouldVirtualize = _b.onShouldVirtualize,\n      groupProps = _b.groupProps;\n    var count = group && !group.isShowingAll ? group.count : items.length;\n    var startIndex = group ? group.startIndex : 0;\n    return React.createElement(List, __assign({\n      role: groupProps && groupProps.role ? groupProps.role : 'rowgroup',\n      \"aria-label\": (_a = group) === null || _a === void 0 ? void 0 : _a.name,\n      items: items,\n      onRenderCell: this._onRenderGroupCell(onRenderCell, groupNestingDepth),\n      ref: this._list,\n      renderCount: Math.min(count, renderCount),\n      startIndex: startIndex,\n      onShouldVirtualize: onShouldVirtualize,\n      id: this._id\n    }, listProps));\n  };\n  GroupedListSection.prototype._returnOne = function () {\n    return 1;\n  };\n  GroupedListSection.prototype._getGroupKey = function (group, index) {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  };\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  GroupedListSection.prototype._getDroppingClassName = function () {\n    var isDropping = this.state.isDropping;\n    var _a = this.props,\n      group = _a.group,\n      groupedListClassNames = _a.groupedListClassNames;\n    isDropping = !!(group && isDropping);\n    return css(isDropping && this._droppingClassName, isDropping && DEFAULT_DROPPING_CSS_CLASS, isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping);\n  };\n  return GroupedListSection;\n}(React.Component);\nexport { GroupedListSection };","map":{"version":3,"sources":["components/GroupedList/GroupedListSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\n\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../utilities/dragdrop/index';\n\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef, IRenderFunction, IDisposable, css, getId, EventGroup } from '../../Utilities';\n\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/index';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport { IListProps } from '../List/index';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'rowgroup'}\n        aria-label={group?.name}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}