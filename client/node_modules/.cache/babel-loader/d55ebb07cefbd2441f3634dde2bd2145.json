{"ast":null,"code":"/*\n * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015Sync = require('./URDNA2015Sync');\nconst util = require('./util');\nmodule.exports = class URDNA2012Sync extends URDNA2015Sync {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if (component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    if (key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = component.value === id ? '_:a' : '_:z';\n    }\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    for (let i = 0; i < quads.length; ++i) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      const quad = quads[i];\n      let position;\n      let related;\n      if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = self.hashRelatedBlankNode(related, quad, issuer, position);\n      if (hash in hashToRelated) {\n        hashToRelated[hash].push(related);\n      } else {\n        hashToRelated[hash] = [related];\n      }\n    }\n    return hashToRelated;\n  }\n};","map":{"version":3,"names":["URDNA2015Sync","require","util","module","exports","URDNA2012Sync","constructor","name","hashAlgorithm","modifyFirstDegreeComponent","id","component","key","termType","clone","value","getRelatedPredicate","quad","predicate","createHashToRelated","issuer","self","hashToRelated","quads","blankNodeInfo","i","length","position","related","subject","object","hash","hashRelatedBlankNode","push"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/rdf-canonize/lib/URGNA2012Sync.js"],"sourcesContent":["/*\n * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015Sync = require('./URDNA2015Sync');\nconst util = require('./util');\n\nmodule.exports = class URDNA2012Sync extends URDNA2015Sync {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    if(key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = (component.value === id ? '_:a' : '_:z');\n    }\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    for(let i = 0; i < quads.length; ++i) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      const quad = quads[i];\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = self.hashRelatedBlankNode(related, quad, issuer, position);\n      if(hash in hashToRelated) {\n        hashToRelated[hash].push(related);\n      } else {\n        hashToRelated[hash] = [related];\n      }\n    }\n\n    return hashToRelated;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAE9BE,MAAM,CAACC,OAAO,GAAG,MAAMC,aAAa,SAASL,aAAa,CAAC;EACzDM,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,IAAI,GAAG,WAAW;IACvB,IAAI,CAACC,aAAa,GAAG,MAAM;EAC7B;;EAEA;EACAC,0BAA0BA,CAACC,EAAE,EAAEC,SAAS,EAAEC,GAAG,EAAE;IAC7C,IAAGD,SAAS,CAACE,QAAQ,KAAK,WAAW,EAAE;MACrC,OAAOF,SAAS;IAClB;IACAA,SAAS,GAAGT,IAAI,CAACY,KAAK,CAACH,SAAS,CAAC;IACjC,IAAGC,GAAG,KAAK,MAAM,EAAE;MACjBD,SAAS,CAACI,KAAK,GAAG,KAAK;IACzB,CAAC,MAAM;MACLJ,SAAS,CAACI,KAAK,GAAIJ,SAAS,CAACI,KAAK,KAAKL,EAAE,GAAG,KAAK,GAAG,KAAM;IAC5D;IACA,OAAOC,SAAS;EAClB;;EAEA;EACAK,mBAAmBA,CAACC,IAAI,EAAE;IACxB,OAAOA,IAAI,CAACC,SAAS,CAACH,KAAK;EAC7B;;EAEA;EACAI,mBAAmBA,CAACT,EAAE,EAAEU,MAAM,EAAE;IAC9B,MAAMC,IAAI,GAAG,IAAI;;IAEjB;IACA;IACA,MAAMC,aAAa,GAAG,CAAC,CAAC;;IAExB;IACA;IACA,MAAMC,KAAK,GAAGF,IAAI,CAACG,aAAa,CAACd,EAAE,CAAC,CAACa,KAAK;;IAE1C;IACA,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;MACpC;MACA;MACA;MACA;MACA,MAAMR,IAAI,GAAGM,KAAK,CAACE,CAAC,CAAC;MACrB,IAAIE,QAAQ;MACZ,IAAIC,OAAO;MACX,IAAGX,IAAI,CAACY,OAAO,CAAChB,QAAQ,KAAK,WAAW,IAAII,IAAI,CAACY,OAAO,CAACd,KAAK,KAAKL,EAAE,EAAE;QACrEkB,OAAO,GAAGX,IAAI,CAACY,OAAO,CAACd,KAAK;QAC5BY,QAAQ,GAAG,GAAG;MAChB,CAAC,MAAM,IACLV,IAAI,CAACa,MAAM,CAACjB,QAAQ,KAAK,WAAW,IAAII,IAAI,CAACa,MAAM,CAACf,KAAK,KAAKL,EAAE,EAAE;QAClE;QACA;QACA;QACA;QACAkB,OAAO,GAAGX,IAAI,CAACa,MAAM,CAACf,KAAK;QAC3BY,QAAQ,GAAG,GAAG;MAChB,CAAC,MAAM;QACL;QACA;MACF;MACA;MACA;MACA;MACA,MAAMI,IAAI,GAAGV,IAAI,CAACW,oBAAoB,CAACJ,OAAO,EAAEX,IAAI,EAAEG,MAAM,EAAEO,QAAQ,CAAC;MACvE,IAAGI,IAAI,IAAIT,aAAa,EAAE;QACxBA,aAAa,CAACS,IAAI,CAAC,CAACE,IAAI,CAACL,OAAO,CAAC;MACnC,CAAC,MAAM;QACLN,aAAa,CAACS,IAAI,CAAC,GAAG,CAACH,OAAO,CAAC;MACjC;IACF;IAEA,OAAON,aAAa;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}