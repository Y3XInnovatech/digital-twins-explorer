{"ast":null,"code":"import { concatStyleSets } from './concatStyleSets';\nimport { extractStyleParts } from './extractStyleParts';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { applyRegistration, styleToRegistration } from './styleToClassName';\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n */\nexport function mergeStyleSets() {\n  var styleSets = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    styleSets[_i] = arguments[_i];\n  }\n  return mergeCssSets(styleSets, getStyleOptions());\n}\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets(styleSets, options) {\n  var _a, _b;\n  var classNameSet = {\n    subComponentStyles: {}\n  };\n  var styleSet = styleSets[0];\n  if (!styleSet && styleSets.length <= 1) {\n    return {\n      subComponentStyles: {}\n    };\n  }\n  var concatenatedStyleSet = concatStyleSets.apply(void 0, styleSets);\n  var registrations = [];\n  for (var styleSetArea in concatenatedStyleSet) {\n    if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {\n      if (styleSetArea === 'subComponentStyles') {\n        classNameSet.subComponentStyles = concatenatedStyleSet.subComponentStyles || {};\n        continue;\n      }\n      var styles = concatenatedStyleSet[styleSetArea];\n      var _c = extractStyleParts(styles),\n        classes = _c.classes,\n        objects = _c.objects;\n      if ((_a = objects) === null || _a === void 0 ? void 0 : _a.length) {\n        var registration = styleToRegistration(options || {}, {\n          displayName: styleSetArea\n        }, objects);\n        if (registration) {\n          registrations.push(registration);\n          classNameSet[styleSetArea] = classes.concat([registration.className]).join(' ');\n        }\n      } else {\n        classNameSet[styleSetArea] = classes.join(' ');\n      }\n    }\n  }\n  for (var _i = 0, registrations_1 = registrations; _i < registrations_1.length; _i++) {\n    var registration = registrations_1[_i];\n    if (registration) {\n      applyRegistration(registration, (_b = options) === null || _b === void 0 ? void 0 : _b.specificityMultiplier);\n    }\n  }\n  return classNameSet;\n}","map":{"version":3,"sources":["mergeStyleSets.ts"],"names":[],"mappings":"AAAA,SAAS,eAAe,QAAQ,mBAAmB;AACnD,SAAS,iBAAiB,QAAQ,qBAAqB;AAIvD,SAAS,eAAe,QAAQ,qBAAqB;AACrD,SAAS,iBAAiB,EAAE,mBAAmB,QAAQ,oBAAoB;AA2E3E;;;;;;;AAOG;AACH,OAAM,SAAU,cAAc,CAAA,EAAA;EAAC,IAAA,SAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAyD,EAAzD,EAAA,GAAA,SAAA,CAAA,MAAyD,EAAzD,EAAA,EAAyD,EAAA;IAAzD,SAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAC7B,OAAO,YAAY,CAAC,SAAgB,EAAE,eAAe,CAAA,CAAE,CAAC;AAC1D;AAmFA;;;;;;;;AAQG;AACH,OAAM,SAAU,YAAY,CAC1B,SAAsD,EACtD,OAAuB,EAAA;;EAEvB,IAAM,YAAY,GAA4B;IAAE,kBAAkB,EAAE,CAAA;EAAE,CAAE;EAExE,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC;EAE7B,IAAI,CAAC,QAAQ,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE;IACtC,OAAO;MAAE,kBAAkB,EAAE,CAAA;IAAE,CAAS;EACzC;EAED,IAAM,oBAAoB,GAAG,eAAe,CAAA,KAAA,CAAA,KAAA,CAAA,EAAI,SAAS,CAAC;EAE1D,IAAM,aAAa,GAAG,EAAE;EAExB,KAAK,IAAM,YAAY,IAAI,oBAAoB,EAAE;IAC/C,IAAI,oBAAoB,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;MACrD,IAAI,YAAY,KAAK,oBAAoB,EAAE;QACzC,YAAY,CAAC,kBAAkB,GAAI,oBAAmD,CAAC,kBAAkB,IAAI,CAAA,CAAE;QAC/G;MACD;MAED,IAAM,MAAM,GAAY,oBAA4B,CAAC,YAAY,CAAC;MAE5D,IAAA,EAAA,GAAA,iBAAA,CAAA,MAAA,CAAgD;QAA9C,OAAA,GAAA,EAAA,CAAA,OAAO;QAAE,OAAA,GAAA,EAAA,CAAA,OAAqC;MAEtD,IAAA,CAAA,EAAA,GAAI,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,EAAE;QACnB,IAAM,YAAY,GAAG,mBAAmB,CAAC,OAAO,IAAI,CAAA,CAAE,EAAE;UAAE,WAAW,EAAE;QAAY,CAAE,EAAE,OAAO,CAAC;QAE/F,IAAI,YAAY,EAAE;UAChB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC;UAChC,YAAY,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;QAChF;OACF,MAAM;QACL,YAAY,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;MAC/C;IACF;EACF;EAED,KAA2B,IAAA,EAAA,GAAA,CAAa,EAAb,eAAA,GAAA,aAAa,EAAb,EAAA,GAAA,eAAA,CAAA,MAAa,EAAb,EAAA,EAAa,EAAE;IAArC,IAAM,YAAY,GAAA,eAAA,CAAA,EAAA,CAAA;IACrB,IAAI,YAAY,EAAE;MAChB,iBAAiB,CAAC,YAAY,EAAA,CAAA,EAAA,GAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,qBAAqB,CAAC;IAChE;EACF;EAED,OAAO,YAAmB;AAC5B","sourcesContent":["import { concatStyleSets } from './concatStyleSets';\nimport { extractStyleParts } from './extractStyleParts';\nimport { IStyle } from './IStyle';\nimport { IStyleOptions } from './IStyleOptions';\nimport { IConcatenatedStyleSet, IProcessedStyleSet, IStyleSet } from './IStyleSet';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { applyRegistration, styleToRegistration } from './styleToClassName';\nimport { ObjectOnly } from './ObjectOnly';\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSet - The first style set to be merged and reigstered.\n */\nexport function mergeStyleSets<TStyleSet>(\n  styleSet: TStyleSet | false | null | undefined,\n): IProcessedStyleSet<ObjectOnly<TStyleSet>>;\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSet1 - The first style set to be merged.\n * @param styleSet2 - The second style set to be merged.\n */\nexport function mergeStyleSets<TStyleSet1, TStyleSet2>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n): IProcessedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2>>;\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSet1 - The first style set to be merged.\n * @param styleSet2 - The second style set to be merged.\n * @param styleSet3 - The third style set to be merged.\n */\nexport function mergeStyleSets<TStyleSet1, TStyleSet2, TStyleSet3>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n): IProcessedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3>>;\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSet1 - The first style set to be merged.\n * @param styleSet2 - The second style set to be merged.\n * @param styleSet3 - The third style set to be merged.\n * @param styleSet4 - The fourth style set to be merged.\n */\nexport function mergeStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n  styleSet4: TStyleSet4 | false | null | undefined,\n): IProcessedStyleSet<\n  ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4>\n>;\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n */\nexport function mergeStyleSets(...styleSets: Array<IStyleSet | undefined | false | null>): IProcessedStyleSet<any>;\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n */\nexport function mergeStyleSets(...styleSets: Array<IStyleSet | undefined | false | null>): IProcessedStyleSet<any> {\n  return mergeCssSets(styleSets as any, getStyleOptions());\n}\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets<TStyleSet>(\n  styleSets: [TStyleSet | false | null | undefined],\n  options?: IStyleOptions,\n): IProcessedStyleSet<TStyleSet>;\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets<TStyleSet1, TStyleSet2>(\n  styleSets: [TStyleSet1 | false | null | undefined, TStyleSet2 | false | null | undefined],\n  options?: IStyleOptions,\n): IProcessedStyleSet<TStyleSet1 & TStyleSet2>;\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets<TStyleSet1, TStyleSet2, TStyleSet3>(\n  styleSets: [\n    TStyleSet1 | false | null | undefined,\n    TStyleSet2 | false | null | undefined,\n    TStyleSet3 | false | null | undefined,\n  ],\n  options?: IStyleOptions,\n): IProcessedStyleSet<TStyleSet1 & TStyleSet2 & TStyleSet3>;\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4>(\n  styleSets: [\n    TStyleSet1 | false | null | undefined,\n    TStyleSet2 | false | null | undefined,\n    TStyleSet3 | false | null | undefined,\n    TStyleSet4 | false | null | undefined,\n  ],\n  options?: IStyleOptions,\n): IProcessedStyleSet<\n  ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4>\n>;\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets<TStyleSet>(\n  styleSet: [TStyleSet | false | null | undefined],\n  options?: IStyleOptions,\n): IProcessedStyleSet<TStyleSet>;\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets(\n  styleSets: Array<IStyleSet | undefined | false | null>,\n  options?: IStyleOptions,\n): IProcessedStyleSet<any> {\n  const classNameSet: IProcessedStyleSet<any> = { subComponentStyles: {} };\n\n  const styleSet = styleSets[0];\n\n  if (!styleSet && styleSets.length <= 1) {\n    return { subComponentStyles: {} } as any;\n  }\n\n  const concatenatedStyleSet = concatStyleSets(...styleSets);\n\n  const registrations = [];\n\n  for (const styleSetArea in concatenatedStyleSet) {\n    if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {\n      if (styleSetArea === 'subComponentStyles') {\n        classNameSet.subComponentStyles = (concatenatedStyleSet as IConcatenatedStyleSet<any>).subComponentStyles || {};\n        continue;\n      }\n\n      const styles: IStyle = (concatenatedStyleSet as any)[styleSetArea];\n\n      const { classes, objects } = extractStyleParts(styles);\n\n      if (objects?.length) {\n        const registration = styleToRegistration(options || {}, { displayName: styleSetArea }, objects);\n\n        if (registration) {\n          registrations.push(registration);\n          classNameSet[styleSetArea] = classes.concat([registration.className]).join(' ');\n        }\n      } else {\n        classNameSet[styleSetArea] = classes.join(' ');\n      }\n    }\n  }\n\n  for (const registration of registrations) {\n    if (registration) {\n      applyRegistration(registration, options?.specificityMultiplier);\n    }\n  }\n\n  return classNameSet as any;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}