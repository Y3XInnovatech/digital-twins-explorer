{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { warnDeprecations, KeyCodes, getId, getNativeProps, divProperties, classNamesFunction, warn, initializeComponentRef } from '../../Utilities';\nimport { CommandButton } from '../../Button';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { PivotItem } from './PivotItem';\nimport { PivotLinkFormat } from './Pivot.types';\nimport { PivotLinkSize } from './Pivot.types';\nimport { Icon } from '../../Icon';\nvar getClassNames = classNamesFunction();\nvar PivotName = 'Pivot';\n/**\n *  Usage:\n *\n *     <Pivot>\n *       <PivotItem headerText=\"Foo\">\n *         <Label>Pivot #1</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bar\">\n *         <Label>Pivot #2</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bas\">\n *         <Label>Pivot #3</Label>\n *       </PivotItem>\n *     </Pivot>\n */\nvar PivotBase = /** @class */function (_super) {\n  __extends(PivotBase, _super);\n  function PivotBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._focusZone = React.createRef();\n    _this._renderPivotLink = function (linkCollection, link, selectedKey) {\n      var itemKey = link.itemKey,\n        headerButtonProps = link.headerButtonProps;\n      var tabId = linkCollection.keyToTabIdMapping[itemKey];\n      var onRenderItemLink = link.onRenderItemLink;\n      var linkContent;\n      var isSelected = selectedKey === itemKey;\n      if (onRenderItemLink) {\n        linkContent = onRenderItemLink(link, _this._renderLinkContent);\n      } else {\n        linkContent = _this._renderLinkContent(link);\n      }\n      var contentString = link.headerText || '';\n      contentString += link.itemCount ? ' (' + link.itemCount + ')' : '';\n      // Adding space supplementary for icon\n      contentString += link.itemIcon ? ' xx' : '';\n      return React.createElement(CommandButton, __assign({}, headerButtonProps, {\n        id: tabId,\n        key: itemKey,\n        className: isSelected ? _this._classNames.linkIsSelected : _this._classNames.link,\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick: _this._onLinkClick.bind(_this, itemKey),\n        // eslint-disable-next-line react/jsx-no-bind\n        onKeyDown: _this._onKeyDown.bind(_this, itemKey),\n        \"aria-label\": link.ariaLabel,\n        role: \"tab\",\n        \"aria-selected\": isSelected,\n        name: link.headerText,\n        keytipProps: link.keytipProps,\n        \"data-content\": contentString\n      }), linkContent);\n    };\n    _this._renderLinkContent = function (link) {\n      var itemCount = link.itemCount,\n        itemIcon = link.itemIcon,\n        headerText = link.headerText;\n      var classNames = _this._classNames;\n      return React.createElement(\"span\", {\n        className: classNames.linkContent\n      }, itemIcon !== undefined && React.createElement(\"span\", {\n        className: classNames.icon\n      }, React.createElement(Icon, {\n        iconName: itemIcon\n      })), headerText !== undefined && React.createElement(\"span\", {\n        className: classNames.text\n      }, \" \", link.headerText), itemCount !== undefined && React.createElement(\"span\", {\n        className: classNames.count\n      }, \" (\", itemCount, \")\"));\n    };\n    initializeComponentRef(_this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations(PivotName, props, {\n        initialSelectedKey: 'defaultSelectedKey',\n        initialSelectedIndex: 'defaultSelectedIndex'\n      });\n    }\n    _this._pivotId = getId(PivotName);\n    var links = _this._getPivotLinks(props).links;\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = props.defaultSelectedKey,\n      defaultSelectedKey = _a === void 0 ? props.initialSelectedKey : _a,\n      _b = props.defaultSelectedIndex,\n      defaultSelectedIndex = _b === void 0 ? props.initialSelectedIndex : _b;\n    var selectedKey;\n    if (defaultSelectedKey) {\n      selectedKey = defaultSelectedKey;\n    } else if (typeof defaultSelectedIndex === 'number') {\n      selectedKey = links[defaultSelectedIndex].itemKey;\n    } else if (links.length) {\n      selectedKey = links[0].itemKey;\n    }\n    _this.state = {\n      selectedKey: selectedKey\n    };\n    return _this;\n  }\n  /**\n   * Sets focus to the first pivot tab.\n   */\n  PivotBase.prototype.focus = function () {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  };\n  PivotBase.prototype.render = function () {\n    var _this = this;\n    var linkCollection = this._getPivotLinks(this.props);\n    var selectedKey = this._getSelectedKey(linkCollection);\n    var divProps = getNativeProps(this.props, divProperties);\n    this._classNames = this._getClassNames(this.props);\n    return React.createElement(\"div\", __assign({\n      role: \"toolbar\"\n    }, divProps), this._renderPivotLinks(linkCollection, selectedKey), selectedKey && linkCollection.links.map(function (link) {\n      return (link.alwaysRender === true || selectedKey === link.itemKey) && _this._renderPivotItem(linkCollection, link.itemKey, selectedKey === link.itemKey);\n    }));\n  };\n  PivotBase.prototype._getSelectedKey = function (linkCollection) {\n    var propsSelectedKey = this.props.selectedKey;\n    if (this._isKeyValid(linkCollection, propsSelectedKey) || propsSelectedKey === null) {\n      return propsSelectedKey;\n    }\n    var stateSelectedKey = this.state.selectedKey;\n    if (this._isKeyValid(linkCollection, stateSelectedKey)) {\n      return stateSelectedKey;\n    }\n    if (linkCollection.links.length) {\n      return linkCollection.links[0].itemKey;\n    }\n    return undefined;\n  };\n  /**\n   * Renders the set of links to route between pivots\n   */\n  PivotBase.prototype._renderPivotLinks = function (linkCollection, selectedKey) {\n    var _this = this;\n    var items = linkCollection.links.map(function (l) {\n      return _this._renderPivotLink(linkCollection, l, selectedKey);\n    });\n    return React.createElement(FocusZone, {\n      className: this._classNames.root,\n      role: \"tablist\",\n      componentRef: this._focusZone,\n      direction: FocusZoneDirection.horizontal\n    }, items);\n  };\n  /**\n   * Renders a Pivot Item\n   */\n  PivotBase.prototype._renderPivotItem = function (linkCollection, itemKey, isActive) {\n    if (this.props.headersOnly || !itemKey) {\n      return null;\n    }\n    var index = linkCollection.keyToIndexMapping[itemKey];\n    var selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n    return React.createElement(\"div\", {\n      role: \"tabpanel\",\n      hidden: !isActive,\n      key: itemKey,\n      \"aria-hidden\": !isActive,\n      \"aria-labelledby\": selectedTabId,\n      className: this._classNames.itemContainer\n    }, React.Children.toArray(this.props.children)[index]);\n  };\n  /**\n   * Gets the set of PivotLinks as array of IPivotItemProps\n   * The set of Links is determined by child components of type PivotItem\n   */\n  PivotBase.prototype._getPivotLinks = function (props) {\n    var _this = this;\n    var result = {\n      links: [],\n      keyToIndexMapping: {},\n      keyToTabIdMapping: {}\n    };\n    React.Children.map(React.Children.toArray(props.children), function (child, index) {\n      if (_isPivotItem(child)) {\n        var pivotItem = child;\n        var _a = pivotItem.props,\n          linkText = _a.linkText,\n          pivotItemProps = __rest(_a, [\"linkText\"]);\n        var itemKey = pivotItem.props.itemKey || index.toString();\n        result.links.push(__assign(__assign({\n          // Use linkText (deprecated) if headerText is not provided\n          headerText: linkText\n        }, pivotItemProps), {\n          itemKey: itemKey\n        }));\n        result.keyToIndexMapping[itemKey] = index;\n        result.keyToTabIdMapping[itemKey] = _this._getTabId(itemKey, index);\n      } else {\n        warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n      }\n    });\n    return result;\n  };\n  /**\n   * Generates the Id for the tab button.\n   */\n  PivotBase.prototype._getTabId = function (itemKey, index) {\n    if (this.props.getTabId) {\n      return this.props.getTabId(itemKey, index);\n    }\n    return this._pivotId + (\"-Tab\" + index);\n  };\n  /**\n   * whether the key exists in the pivot items.\n   */\n  PivotBase.prototype._isKeyValid = function (linkCollection, itemKey) {\n    return itemKey !== undefined && itemKey !== null && linkCollection.keyToIndexMapping[itemKey] !== undefined;\n  };\n  /**\n   * Handles the onClick event on PivotLinks\n   */\n  PivotBase.prototype._onLinkClick = function (itemKey, ev) {\n    ev.preventDefault();\n    this._updateSelectedItem(itemKey, ev);\n  };\n  /**\n   * Handle the onKeyDown event on the PivotLinks\n   */\n  PivotBase.prototype._onKeyDown = function (itemKey, ev) {\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      this._updateSelectedItem(itemKey);\n    }\n  };\n  /**\n   * Updates the state with the new selected index\n   */\n  PivotBase.prototype._updateSelectedItem = function (itemKey, ev) {\n    this.setState({\n      selectedKey: itemKey\n    });\n    var linkCollection = this._getPivotLinks(this.props);\n    if (this.props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n      var index = linkCollection.keyToIndexMapping[itemKey];\n      // React.Element<any> cannot directly convert to PivotItem.\n      var item = React.Children.toArray(this.props.children)[index];\n      if (_isPivotItem(item)) {\n        this.props.onLinkClick(item, ev);\n      }\n    }\n  };\n  PivotBase.prototype._getClassNames = function (props) {\n    var theme = props.theme;\n    var rootIsLarge = props.linkSize === PivotLinkSize.large;\n    var rootIsTabs = props.linkFormat === PivotLinkFormat.tabs;\n    return getClassNames(props.styles, {\n      theme: theme,\n      rootIsLarge: rootIsLarge,\n      rootIsTabs: rootIsTabs\n    });\n  };\n  return PivotBase;\n}(React.Component);\nexport { PivotBase };\nfunction _isPivotItem(item) {\n  // In theory, we should be able to just check item.type === PivotItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return !!item && typeof item === 'object' && !!item.type &&\n  // Casting as an any to avoid [ object Object ] errors.\n  item.type.name === PivotItem.name;\n}","map":{"version":3,"sources":["components/Pivot/Pivot.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  warnDeprecations,\n  KeyCodes,\n  getId,\n  getNativeProps,\n  divProperties,\n  classNamesFunction,\n  warn,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { CommandButton } from '../../Button';\nimport { IPivotProps, IPivotStyleProps, IPivotStyles } from './Pivot.types';\nimport { IPivotItemProps } from './PivotItem.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { PivotItem } from './PivotItem';\nimport { PivotLinkFormat } from './Pivot.types';\nimport { PivotLinkSize } from './Pivot.types';\nimport { Icon } from '../../Icon';\n\nconst getClassNames = classNamesFunction<IPivotStyleProps, IPivotStyles>();\nconst PivotName = 'Pivot';\n\nexport interface IPivotState {\n  selectedKey: string | undefined;\n}\n\ntype PivotLinkCollection = {\n  links: IPivotItemProps[];\n  keyToIndexMapping: { [key: string]: number };\n  keyToTabIdMapping: { [key: string]: string };\n};\n\n/**\n *  Usage:\n *\n *     <Pivot>\n *       <PivotItem headerText=\"Foo\">\n *         <Label>Pivot #1</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bar\">\n *         <Label>Pivot #2</Label>\n *       </PivotItem>\n *       <PivotItem headerText=\"Bas\">\n *         <Label>Pivot #3</Label>\n *       </PivotItem>\n *     </Pivot>\n */\nexport class PivotBase extends React.Component<IPivotProps, IPivotState> {\n  private _pivotId: string;\n  private _focusZone = React.createRef<FocusZone>();\n  private _classNames: { [key in keyof IPivotStyles]: string };\n\n  constructor(props: IPivotProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations(PivotName, props, {\n        initialSelectedKey: 'defaultSelectedKey',\n        initialSelectedIndex: 'defaultSelectedIndex',\n      });\n    }\n\n    this._pivotId = getId(PivotName);\n    const links: IPivotItemProps[] = this._getPivotLinks(props).links;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const { defaultSelectedKey = props.initialSelectedKey, defaultSelectedIndex = props.initialSelectedIndex } = props;\n\n    let selectedKey: string | undefined;\n\n    if (defaultSelectedKey) {\n      selectedKey = defaultSelectedKey;\n    } else if (typeof defaultSelectedIndex === 'number') {\n      selectedKey = links[defaultSelectedIndex].itemKey!;\n    } else if (links.length) {\n      selectedKey = links[0].itemKey!;\n    }\n\n    this.state = {\n      selectedKey,\n    };\n  }\n\n  /**\n   * Sets focus to the first pivot tab.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    const linkCollection = this._getPivotLinks(this.props);\n    const selectedKey = this._getSelectedKey(linkCollection);\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    this._classNames = this._getClassNames(this.props);\n\n    return (\n      <div role=\"toolbar\" {...divProps}>\n        {this._renderPivotLinks(linkCollection, selectedKey)}\n        {selectedKey &&\n          linkCollection.links.map(\n            link =>\n              (link.alwaysRender === true || selectedKey === link.itemKey) &&\n              this._renderPivotItem(linkCollection, link.itemKey, selectedKey === link.itemKey),\n          )}\n      </div>\n    );\n  }\n\n  private _getSelectedKey(linkCollection: PivotLinkCollection) {\n    const { selectedKey: propsSelectedKey } = this.props;\n\n    if (this._isKeyValid(linkCollection, propsSelectedKey) || propsSelectedKey === null) {\n      return propsSelectedKey;\n    }\n\n    const { selectedKey: stateSelectedKey } = this.state;\n    if (this._isKeyValid(linkCollection, stateSelectedKey)) {\n      return stateSelectedKey;\n    }\n\n    if (linkCollection.links.length) {\n      return linkCollection.links[0].itemKey;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Renders the set of links to route between pivots\n   */\n  private _renderPivotLinks(linkCollection: PivotLinkCollection, selectedKey: string | null | undefined): JSX.Element {\n    const items = linkCollection.links.map(l => this._renderPivotLink(linkCollection, l, selectedKey));\n\n    return (\n      <FocusZone\n        className={this._classNames.root}\n        role=\"tablist\"\n        componentRef={this._focusZone}\n        direction={FocusZoneDirection.horizontal}\n      >\n        {items}\n      </FocusZone>\n    );\n  }\n\n  private _renderPivotLink = (\n    linkCollection: PivotLinkCollection,\n    link: IPivotItemProps,\n    selectedKey: string | null | undefined,\n  ): JSX.Element => {\n    const { itemKey, headerButtonProps } = link;\n    const tabId = linkCollection.keyToTabIdMapping[itemKey!];\n    const { onRenderItemLink } = link;\n    let linkContent: JSX.Element | null;\n    const isSelected: boolean = selectedKey === itemKey;\n\n    if (onRenderItemLink) {\n      linkContent = onRenderItemLink(link, this._renderLinkContent);\n    } else {\n      linkContent = this._renderLinkContent(link);\n    }\n\n    let contentString = link.headerText || '';\n    contentString += link.itemCount ? ' (' + link.itemCount + ')' : '';\n    // Adding space supplementary for icon\n    contentString += link.itemIcon ? ' xx' : '';\n\n    return (\n      <CommandButton\n        {...headerButtonProps}\n        id={tabId}\n        key={itemKey}\n        className={isSelected ? this._classNames.linkIsSelected : this._classNames.link}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={this._onLinkClick.bind(this, itemKey)}\n        // eslint-disable-next-line react/jsx-no-bind\n        onKeyDown={this._onKeyDown.bind(this, itemKey)}\n        aria-label={link.ariaLabel}\n        role=\"tab\"\n        aria-selected={isSelected}\n        name={link.headerText}\n        keytipProps={link.keytipProps}\n        data-content={contentString}\n      >\n        {linkContent}\n      </CommandButton>\n    );\n  };\n\n  private _renderLinkContent = (link: IPivotItemProps): JSX.Element => {\n    const { itemCount, itemIcon, headerText } = link;\n    const classNames = this._classNames;\n\n    return (\n      <span className={classNames.linkContent}>\n        {itemIcon !== undefined && (\n          <span className={classNames.icon}>\n            <Icon iconName={itemIcon} />\n          </span>\n        )}\n        {headerText !== undefined && <span className={classNames.text}> {link.headerText}</span>}\n        {itemCount !== undefined && <span className={classNames.count}> ({itemCount})</span>}\n      </span>\n    );\n  };\n\n  /**\n   * Renders a Pivot Item\n   */\n  private _renderPivotItem(\n    linkCollection: PivotLinkCollection,\n    itemKey: string | undefined,\n    isActive: boolean,\n  ): JSX.Element | null {\n    if (this.props.headersOnly || !itemKey) {\n      return null;\n    }\n\n    const index = linkCollection.keyToIndexMapping[itemKey];\n    const selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={!isActive}\n        key={itemKey}\n        aria-hidden={!isActive}\n        aria-labelledby={selectedTabId}\n        className={this._classNames.itemContainer}\n      >\n        {React.Children.toArray(this.props.children)[index]}\n      </div>\n    );\n  }\n\n  /**\n   * Gets the set of PivotLinks as array of IPivotItemProps\n   * The set of Links is determined by child components of type PivotItem\n   */\n  private _getPivotLinks(props: IPivotProps): PivotLinkCollection {\n    const result: PivotLinkCollection = {\n      links: [],\n      keyToIndexMapping: {},\n      keyToTabIdMapping: {},\n    };\n\n    React.Children.map(React.Children.toArray(props.children), (child: React.ReactChild, index: number) => {\n      if (_isPivotItem(child)) {\n        const pivotItem = child;\n        const { linkText, ...pivotItemProps } = pivotItem.props;\n        const itemKey = pivotItem.props.itemKey || index.toString();\n\n        result.links.push({\n          // Use linkText (deprecated) if headerText is not provided\n          headerText: linkText,\n          ...pivotItemProps,\n          itemKey: itemKey,\n        });\n        result.keyToIndexMapping[itemKey] = index;\n        result.keyToTabIdMapping[itemKey] = this._getTabId(itemKey, index);\n      } else {\n        warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Generates the Id for the tab button.\n   */\n  private _getTabId(itemKey: string, index: number): string {\n    if (this.props.getTabId) {\n      return this.props.getTabId(itemKey, index);\n    }\n\n    return this._pivotId + `-Tab${index}`;\n  }\n\n  /**\n   * whether the key exists in the pivot items.\n   */\n  private _isKeyValid(linkCollection: PivotLinkCollection, itemKey: string | null | undefined): boolean {\n    return itemKey !== undefined && itemKey !== null && linkCollection.keyToIndexMapping[itemKey] !== undefined;\n  }\n\n  /**\n   * Handles the onClick event on PivotLinks\n   */\n  private _onLinkClick(itemKey: string, ev: React.MouseEvent<HTMLElement>): void {\n    ev.preventDefault();\n    this._updateSelectedItem(itemKey, ev);\n  }\n\n  /**\n   * Handle the onKeyDown event on the PivotLinks\n   */\n  private _onKeyDown(itemKey: string, ev: React.KeyboardEvent<HTMLElement>): void {\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      this._updateSelectedItem(itemKey);\n    }\n  }\n\n  /**\n   * Updates the state with the new selected index\n   */\n  private _updateSelectedItem(itemKey: string, ev?: React.MouseEvent<HTMLElement>): void {\n    this.setState({\n      selectedKey: itemKey,\n    });\n\n    const linkCollection = this._getPivotLinks(this.props);\n\n    if (this.props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n      const index = linkCollection.keyToIndexMapping[itemKey];\n\n      // React.Element<any> cannot directly convert to PivotItem.\n      const item = React.Children.toArray(this.props.children)[index];\n\n      if (_isPivotItem(item)) {\n        this.props.onLinkClick(item, ev);\n      }\n    }\n  }\n\n  private _getClassNames(props: IPivotProps): { [key in keyof IPivotStyles]: string } {\n    const { theme } = props;\n    const rootIsLarge: boolean = props.linkSize === PivotLinkSize.large;\n    const rootIsTabs: boolean = props.linkFormat === PivotLinkFormat.tabs;\n\n    return getClassNames(props.styles!, {\n      theme: theme!,\n      rootIsLarge,\n      rootIsTabs,\n    });\n  }\n}\n\nfunction _isPivotItem(item: React.ReactNode): item is PivotItem {\n  // In theory, we should be able to just check item.type === PivotItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // Casting as an any to avoid [ object Object ] errors.\n    ((item as React.ReactElement).type as any).name === (PivotItem as any).name\n  );\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}