{"ast":null,"code":"var _jsxFileName = \"/home/saharsh/digital-twins-explorer/client/src/components/ModelGraphViewerComponent/ModelGraphViewerComponent.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React from \"react\";\nimport { ModelGraphViewerCytoscapeComponent } from \"./ModelGraphViewerCytoscapeComponent/ModelGraphViewerCytoscapeComponent\";\nimport LoaderComponent from \"../LoaderComponent/LoaderComponent\";\nimport { eventService } from \"../../services/EventService\";\nimport \"./ModelGraphViewerComponent.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ModelGraphViewerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      // eslint-disable-next-line react/no-unused-state\n      layout: \"d3Force\"\n    };\n    this.cyRef = /*#__PURE__*/React.createRef();\n  }\n  async componentDidMount() {\n    // Ensure the component is fully initialized before retrieving models\n    setTimeout(async () => {\n      await this.retrieveModels();\n    }, 100);\n\n    // Subscribe to model updates\n    eventService.subscribeModelsUpdate(() => {\n      this.retrieveModels();\n    });\n  }\n  async retrieveModels() {\n    this.setState({\n      isLoading: true\n    });\n    try {\n      console.log(\"Starting retrieveModels...\");\n\n      // Fetch models from the API\n      const response = await fetch(\"/models\");\n      console.log(\"Fetch response:\", response);\n      if (!response.ok) {\n        throw new Error(`Error fetching models: ${response.statusText}`);\n      }\n      const models = await response.json();\n      console.log(\"Fetched models:\", models);\n\n      // Validate and transform models into nodes and relationships\n      if (!Array.isArray(models)) {\n        throw new Error(\"Invalid models data: Expected an array.\");\n      }\n      const nodes = models.map(model => ({\n        id: model.id,\n        label: model.name || model.id\n      }));\n      const relationships = models.flatMap(model => {\n        var _model$relationships;\n        return ((_model$relationships = model.relationships) === null || _model$relationships === void 0 ? void 0 : _model$relationships.map(rel => ({\n          sourceId: model.id,\n          targetId: rel.target,\n          relationshipName: rel.name\n        }))) || [];\n      });\n      console.log(\"Nodes:\", nodes);\n      console.log(\"Relationships:\", relationships);\n\n      // Ensure cyRef.current is initialized before using it\n      if (this.cyRef.current) {\n        console.log(\"cyRef.current is initialized:\", this.cyRef.current);\n\n        // Add nodes and relationships to the graph\n        this.cyRef.current.addNodes(nodes);\n        this.cyRef.current.addRelationships(relationships, \"related\");\n\n        // Perform layout\n        await this.cyRef.current.doLayout();\n      } else {\n        console.warn(\"cyRef.current is not initialized.\");\n      }\n    } catch (err) {\n      // Log and publish errors\n      console.error(\"Error in retrieveModels:\", err);\n      eventService.publishError(err);\n    } finally {\n      this.setState({\n        isLoading: false\n      });\n      console.log(\"Finished retrieveModels.\");\n    }\n  }\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mgv-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"model-graph\",\n        children: /*#__PURE__*/_jsxDEV(ModelGraphViewerCytoscapeComponent, {\n          ref: this.cyRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(LoaderComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default ModelGraphViewerComponent;","map":{"version":3,"names":["React","ModelGraphViewerCytoscapeComponent","LoaderComponent","eventService","jsxDEV","_jsxDEV","ModelGraphViewerComponent","Component","constructor","props","state","isLoading","layout","cyRef","createRef","componentDidMount","setTimeout","retrieveModels","subscribeModelsUpdate","setState","console","log","response","fetch","ok","Error","statusText","models","json","Array","isArray","nodes","map","model","id","label","name","relationships","flatMap","_model$relationships","rel","sourceId","targetId","target","relationshipName","current","addNodes","addRelationships","doLayout","warn","err","error","publishError","render","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/saharsh/digital-twins-explorer/client/src/components/ModelGraphViewerComponent/ModelGraphViewerComponent.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React from \"react\";\n\nimport { ModelGraphViewerCytoscapeComponent } from \"./ModelGraphViewerCytoscapeComponent/ModelGraphViewerCytoscapeComponent\";\nimport LoaderComponent from \"../LoaderComponent/LoaderComponent\";\nimport { eventService } from \"../../services/EventService\";\n\nimport \"./ModelGraphViewerComponent.scss\";\n\nclass ModelGraphViewerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      // eslint-disable-next-line react/no-unused-state\n      layout: \"d3Force\",\n    };\n    this.cyRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    // Ensure the component is fully initialized before retrieving models\n    setTimeout(async () => {\n      await this.retrieveModels();\n    }, 100);\n\n    // Subscribe to model updates\n    eventService.subscribeModelsUpdate(() => {\n      this.retrieveModels();\n    });\n  }\n\n  async retrieveModels() {\n    this.setState({ isLoading: true });\n\n    try {\n      console.log(\"Starting retrieveModels...\");\n\n      // Fetch models from the API\n      const response = await fetch(\"/models\");\n      console.log(\"Fetch response:\", response);\n\n      if (!response.ok) {\n        throw new Error(`Error fetching models: ${response.statusText}`);\n      }\n\n      const models = await response.json();\n      console.log(\"Fetched models:\", models);\n\n      // Validate and transform models into nodes and relationships\n      if (!Array.isArray(models)) {\n        throw new Error(\"Invalid models data: Expected an array.\");\n      }\n\n      const nodes = models.map((model) => ({\n        id: model.id,\n        label: model.name || model.id,\n      }));\n\n      const relationships = models.flatMap(\n        (model) =>\n          model.relationships?.map((rel) => ({\n            sourceId: model.id,\n            targetId: rel.target,\n            relationshipName: rel.name,\n          })) || []\n      );\n\n      console.log(\"Nodes:\", nodes);\n      console.log(\"Relationships:\", relationships);\n\n      // Ensure cyRef.current is initialized before using it\n      if (this.cyRef.current) {\n        console.log(\"cyRef.current is initialized:\", this.cyRef.current);\n\n        // Add nodes and relationships to the graph\n        this.cyRef.current.addNodes(nodes);\n        this.cyRef.current.addRelationships(relationships, \"related\");\n\n        // Perform layout\n        await this.cyRef.current.doLayout();\n      } else {\n        console.warn(\"cyRef.current is not initialized.\");\n      }\n    } catch (err) {\n      // Log and publish errors\n      console.error(\"Error in retrieveModels:\", err);\n      eventService.publishError(err);\n    } finally {\n      this.setState({ isLoading: false });\n      console.log(\"Finished retrieveModels.\");\n    }\n  }\n\n  render() {\n    const { isLoading } = this.state;\n\n    return (\n      <div className=\"mgv-wrap\">\n        <div className=\"model-graph\">\n          {/* Ensure the ref is passed correctly */}\n          <ModelGraphViewerCytoscapeComponent ref={this.cyRef} />\n        </div>\n        {isLoading && <LoaderComponent />}\n      </div>\n    );\n  }\n}\n\nexport default ModelGraphViewerComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}