{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { TraceFlags } from \"@opentelemetry/api\";\n/**\n * A no-op implementation of Span that can safely be used without side-effects.\n */\nvar NoOpSpan = /** @class */function () {\n  function NoOpSpan() {}\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  NoOpSpan.prototype.context = function () {\n    return {\n      spanId: \"\",\n      traceId: \"\",\n      traceFlags: TraceFlags.NONE\n    };\n  };\n  /**\n   * Marks the end of Span execution.\n   * @param _endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  NoOpSpan.prototype.end = function (_endTime) {\n    /* Noop */\n  };\n  /**\n   * Sets an attribute on the Span\n   * @param _key the attribute key\n   * @param _value the attribute value\n   */\n  NoOpSpan.prototype.setAttribute = function (_key, _value) {\n    return this;\n  };\n  /**\n   * Sets attributes on the Span\n   * @param _attributes the attributes to add\n   */\n  NoOpSpan.prototype.setAttributes = function (_attributes) {\n    return this;\n  };\n  /**\n   * Adds an event to the Span\n   * @param _name The name of the event\n   * @param _attributes The associated attributes to add for this event\n   */\n  NoOpSpan.prototype.addEvent = function (_name, _attributes) {\n    return this;\n  };\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param _status The status to set.\n   */\n  NoOpSpan.prototype.setStatus = function (_status) {\n    return this;\n  };\n  /**\n   * Updates the name of the Span\n   * @param _name the new Span name\n   */\n  NoOpSpan.prototype.updateName = function (_name) {\n    return this;\n  };\n  /**\n   * Returns whether this span will be recorded\n   */\n  NoOpSpan.prototype.isRecording = function () {\n    return false;\n  };\n  return NoOpSpan;\n}();\nexport { NoOpSpan };","map":{"version":3,"sources":["../../../../src/tracers/noop/noOpSpan.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAgD,UAAU,QAAQ,oBAAoB;AAEtF;;AAEG;AACH,IAAA,QAAA,GAAA,aAAA,YAAA;EAAA,SAAA,QAAA,CAAA,EAAA,CAqEA;EApEE;;AAEG;EACH,QAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,OAAO;MACL,MAAM,EAAE,EAAE;MACV,OAAO,EAAE,EAAE;MACX,UAAU,EAAE,UAAU,CAAC;KACxB;EACH,CAAC;EAED;;;;AAIG;EACH,QAAA,CAAA,SAAA,CAAA,GAAG,GAAH,UAAI,QAAiB,EAAA;IACnB;EAAA,CACD;EAED;;;;AAIG;EACH,QAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,IAAY,EAAE,MAAe,EAAA;IACxC,OAAO,IAAI;EACb,CAAC;EAED;;;AAGG;EACH,QAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,WAAuB,EAAA;IACnC,OAAO,IAAI;EACb,CAAC;EAED;;;;AAIG;EACH,QAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,KAAa,EAAE,WAAwB,EAAA;IAC9C,OAAO,IAAI;EACb,CAAC;EAED;;;AAGG;EACH,QAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,OAAe,EAAA;IACvB,OAAO,IAAI;EACb,CAAC;EAED;;;AAGG;EACH,QAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,KAAa,EAAA;IACtB,OAAO,IAAI;EACb,CAAC;EAED;;AAEG;EACH,QAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,OAAO,KAAK;EACd,CAAC;EACH,OAAA,QAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Span, SpanContext, Attributes, Status, TraceFlags } from \"@opentelemetry/api\";\n\n/**\n * A no-op implementation of Span that can safely be used without side-effects.\n */\nexport class NoOpSpan implements Span {\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  context(): SpanContext {\n    return {\n      spanId: \"\",\n      traceId: \"\",\n      traceFlags: TraceFlags.NONE\n    };\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param _endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    /* Noop */\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param _key the attribute key\n   * @param _value the attribute value\n   */\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param _attributes the attributes to add\n   */\n  setAttributes(_attributes: Attributes): this {\n    return this;\n  }\n\n  /**\n   * Adds an event to the Span\n   * @param _name The name of the event\n   * @param _attributes The associated attributes to add for this event\n   */\n  addEvent(_name: string, _attributes?: Attributes): this {\n    return this;\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param _status The status to set.\n   */\n  setStatus(_status: Status): this {\n    return this;\n  }\n\n  /**\n   * Updates the name of the Span\n   * @param _name the new Span name\n   */\n  updateName(_name: string): this {\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecording(): boolean {\n    return false;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}