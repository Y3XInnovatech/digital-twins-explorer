{"ast":null,"code":"import * as React from 'react';\n/**\n * Context for providing the window.\n */\nexport var WindowContext = React.createContext({\n  window: typeof window === 'object' ? window : undefined\n});\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\nexport var useWindow = function () {\n  return React.useContext(WindowContext).window;\n};\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\nexport var useDocument = function () {\n  var _a;\n  return (_a = React.useContext(WindowContext).window) === null || _a === void 0 ? void 0 : _a.document;\n};\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\nexport var WindowProvider = function (props) {\n  return React.createElement(WindowContext.Provider, {\n    value: props\n  }, props.children);\n};","map":{"version":3,"sources":["WindowProvider.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAY9B;;AAEG;AACH,OAAO,IAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAsB;EACpE,MAAM,EAAE,OAAO,MAAM,KAAK,QAAQ,GAAG,MAAM,GAAG;CAC/C,CAAC;AAEF;;AAEG;AACH,OAAO,IAAM,SAAS,GAAG,SAAA,CAAA,EAAA;EAA0B,OAAA,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,MAAM;AAAtC,CAAsC;AAEzF;;AAEG;AACH,OAAO,IAAM,WAAW,GAAG,SAAA,CAAA,EAAA;EAAA,IAAA,EAAA;EAAA,OAAA,CAAA,EAAA,GAA4B,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ;AAAA,CAAA;AAEvG;;;;AAIG;AACH,OAAO,IAAM,cAAc,GAAiD,SAAA,CAAA,KAAK,EAAA;EAC/E,OAAO,KAAA,CAAA,aAAA,CAAC,aAAa,CAAC,QAAQ,EAAA;IAAC,KAAK,EAAE;EAAK,CAAA,EAAG,KAAK,CAAC,QAAQ,CAA0B;AACxF,CAAC","sourcesContent":["import * as React from 'react';\n\n/**\n * Props for the WindowProvider component.\n */\nexport type WindowProviderProps = {\n  /**\n   * Provide the active window.\n   */\n  window: Window | undefined;\n};\n\n/**\n * Context for providing the window.\n */\nexport const WindowContext = React.createContext<WindowProviderProps>({\n  window: typeof window === 'object' ? window : undefined,\n});\n\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useWindow = (): Window | undefined => React.useContext(WindowContext).window;\n\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useDocument = (): Document | undefined => React.useContext(WindowContext).window?.document;\n\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\nexport const WindowProvider: React.FunctionComponent<WindowProviderProps> = props => {\n  return <WindowContext.Provider value={props}>{props.children}</WindowContext.Provider>;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}