{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Layer } from '../../Layer';\nimport { Overlay } from '../../Overlay';\nimport { Popup } from '../../Popup';\nimport { allowScrollOnElement, allowOverscrollOnElement, classNamesFunction, divProperties, elementContains, getId, getNativeProps, getRTL, css, warnDeprecations, Async, EventGroup, initializeComponentRef } from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { PanelType } from './Panel.types';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Panel';\nvar PanelVisibilityState;\n(function (PanelVisibilityState) {\n  PanelVisibilityState[PanelVisibilityState[\"closed\"] = 0] = \"closed\";\n  PanelVisibilityState[PanelVisibilityState[\"animatingOpen\"] = 1] = \"animatingOpen\";\n  PanelVisibilityState[PanelVisibilityState[\"open\"] = 2] = \"open\";\n  PanelVisibilityState[PanelVisibilityState[\"animatingClosed\"] = 3] = \"animatingClosed\";\n})(PanelVisibilityState || (PanelVisibilityState = {}));\nvar PanelBase = /** @class */function (_super) {\n  __extends(PanelBase, _super);\n  function PanelBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._panel = React.createRef();\n    _this._animationCallback = null;\n    _this._hasCustomNavigation = !!(_this.props.onRenderNavigation || _this.props.onRenderNavigationContent);\n    _this.dismiss = function (ev) {\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss(ev);\n      }\n      if (!ev || ev && !ev.defaultPrevented) {\n        _this.close();\n      }\n    };\n    // Allow the user to scroll within the panel but not on the body\n    _this._allowScrollOnPanel = function (elt) {\n      if (elt) {\n        if (_this._allowTouchBodyScroll) {\n          allowOverscrollOnElement(elt, _this._events);\n        } else {\n          allowScrollOnElement(elt, _this._events);\n        }\n      } else {\n        _this._events.off(_this._scrollableContent);\n      }\n      _this._scrollableContent = elt;\n    };\n    _this._onRenderNavigation = function (props) {\n      if (!_this.props.onRenderNavigationContent && !_this.props.onRenderNavigation && !_this.props.hasCloseButton) {\n        return null;\n      }\n      var _a = _this.props.onRenderNavigationContent,\n        onRenderNavigationContent = _a === void 0 ? _this._onRenderNavigationContent : _a;\n      return React.createElement(\"div\", {\n        className: _this._classNames.navigation\n      }, onRenderNavigationContent(props, _this._onRenderNavigationContent));\n    };\n    _this._onRenderNavigationContent = function (props) {\n      var _a;\n      var closeButtonAriaLabel = props.closeButtonAriaLabel,\n        hasCloseButton = props.hasCloseButton,\n        _b = props.onRenderHeader,\n        onRenderHeader = _b === void 0 ? _this._onRenderHeader : _b;\n      if (hasCloseButton) {\n        var iconButtonStyles = (_a = _this._classNames.subComponentStyles) === null || _a === void 0 ? void 0 : _a.closeButton();\n        return React.createElement(React.Fragment, null, !_this._hasCustomNavigation && onRenderHeader(_this.props, _this._onRenderHeader, _this._headerTextId), React.createElement(IconButton, {\n          styles: iconButtonStyles,\n          // eslint-disable-next-line deprecation/deprecation\n          className: _this._classNames.closeButton,\n          onClick: _this._onPanelClick,\n          ariaLabel: closeButtonAriaLabel,\n          title: closeButtonAriaLabel,\n          \"data-is-visible\": true,\n          iconProps: {\n            iconName: 'Cancel'\n          }\n        }));\n      }\n      return null;\n    };\n    _this._onRenderHeader = function (props, defaultRender, headerTextId) {\n      var headerText = props.headerText,\n        _a = props.headerTextProps,\n        headerTextProps = _a === void 0 ? {} : _a;\n      if (headerText) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.header\n        }, React.createElement(\"div\", __assign({\n          id: headerTextId,\n          role: \"heading\",\n          \"aria-level\": 1\n        }, headerTextProps, {\n          className: css(_this._classNames.headerText, headerTextProps.className)\n        }), headerText));\n      }\n      return null;\n    };\n    _this._onRenderBody = function (props) {\n      return React.createElement(\"div\", {\n        className: _this._classNames.content\n      }, props.children);\n    };\n    _this._onRenderFooter = function (props) {\n      var _a = _this.props.onRenderFooterContent,\n        onRenderFooterContent = _a === void 0 ? null : _a;\n      if (onRenderFooterContent) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.footer\n        }, React.createElement(\"div\", {\n          className: _this._classNames.footerInner\n        }, onRenderFooterContent()));\n      }\n      return null;\n    };\n    _this._animateTo = function (newVisibilityState) {\n      if (newVisibilityState === PanelVisibilityState.open && _this.props.onOpen) {\n        _this.props.onOpen();\n      }\n      _this._animationCallback = _this._async.setTimeout(function () {\n        _this.setState({\n          visibility: newVisibilityState\n        });\n        _this._onTransitionComplete();\n      }, 200);\n    };\n    _this._clearExistingAnimationTimer = function () {\n      if (_this._animationCallback !== null) {\n        _this._async.clearTimeout(_this._animationCallback);\n      }\n    };\n    _this._onPanelClick = function (ev) {\n      _this.dismiss(ev);\n    };\n    _this._onTransitionComplete = function () {\n      _this._updateFooterPosition();\n      if (_this.state.visibility === PanelVisibilityState.open && _this.props.onOpened) {\n        _this.props.onOpened();\n      }\n      if (_this.state.visibility === PanelVisibilityState.closed && _this.props.onDismissed) {\n        _this.props.onDismissed();\n      }\n    };\n    var _a = _this.props.allowTouchBodyScroll,\n      allowTouchBodyScroll = _a === void 0 ? false : _a;\n    _this._allowTouchBodyScroll = allowTouchBodyScroll;\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      ignoreExternalFocusing: 'focusTrapZoneProps',\n      forceFocusInsideTrap: 'focusTrapZoneProps',\n      firstFocusableSelector: 'focusTrapZoneProps'\n    });\n    _this.state = {\n      isFooterSticky: false,\n      // intentionally ignore props so animation takes place during componentDidMount\n      visibility: PanelVisibilityState.closed,\n      id: getId('Panel')\n    };\n    return _this;\n  }\n  PanelBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    if (nextProps.isOpen === undefined) {\n      return null; // no state update\n    }\n    if (nextProps.isOpen && (prevState.visibility === PanelVisibilityState.closed || prevState.visibility === PanelVisibilityState.animatingClosed)) {\n      return {\n        visibility: PanelVisibilityState.animatingOpen\n      };\n    }\n    if (!nextProps.isOpen && (prevState.visibility === PanelVisibilityState.open || prevState.visibility === PanelVisibilityState.animatingOpen)) {\n      return {\n        visibility: PanelVisibilityState.animatingClosed\n      };\n    }\n    return null;\n  };\n  PanelBase.prototype.componentDidMount = function () {\n    this._events.on(window, 'resize', this._updateFooterPosition);\n    if (this._shouldListenForOuterClick(this.props)) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n    if (this.props.isOpen) {\n      this.setState({\n        visibility: PanelVisibilityState.animatingOpen\n      });\n    }\n  };\n  PanelBase.prototype.componentDidUpdate = function (previousProps, previousState) {\n    var shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);\n    var previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);\n    if (this.state.visibility !== previousState.visibility) {\n      this._clearExistingAnimationTimer();\n      if (this.state.visibility === PanelVisibilityState.animatingOpen) {\n        this._animateTo(PanelVisibilityState.open);\n      } else if (this.state.visibility === PanelVisibilityState.animatingClosed) {\n        this._animateTo(PanelVisibilityState.closed);\n      }\n    }\n    if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    } else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {\n      this._events.off(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n  };\n  PanelBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  PanelBase.prototype.render = function () {\n    var _a = this.props,\n      _b = _a.className,\n      className = _b === void 0 ? '' : _b,\n      elementToFocusOnDismiss = _a.elementToFocusOnDismiss,\n      /* eslint-disable deprecation/deprecation */\n      firstFocusableSelector = _a.firstFocusableSelector,\n      focusTrapZoneProps = _a.focusTrapZoneProps,\n      forceFocusInsideTrap = _a.forceFocusInsideTrap,\n      hasCloseButton = _a.hasCloseButton,\n      headerText = _a.headerText,\n      _c = _a.headerClassName,\n      headerClassName = _c === void 0 ? '' : _c,\n      ignoreExternalFocusing = _a.ignoreExternalFocusing,\n      /* eslint-enable deprecation/deprecation */\n      isBlocking = _a.isBlocking,\n      isFooterAtBottom = _a.isFooterAtBottom,\n      isLightDismiss = _a.isLightDismiss,\n      isHiddenOnDismiss = _a.isHiddenOnDismiss,\n      layerProps = _a.layerProps,\n      overlayProps = _a.overlayProps,\n      popupProps = _a.popupProps,\n      type = _a.type,\n      styles = _a.styles,\n      theme = _a.theme,\n      customWidth = _a.customWidth,\n      _d = _a.onLightDismissClick,\n      onLightDismissClick = _d === void 0 ? this._onPanelClick : _d,\n      _e = _a.onRenderNavigation,\n      onRenderNavigation = _e === void 0 ? this._onRenderNavigation : _e,\n      _f = _a.onRenderHeader,\n      onRenderHeader = _f === void 0 ? this._onRenderHeader : _f,\n      _g = _a.onRenderBody,\n      onRenderBody = _g === void 0 ? this._onRenderBody : _g,\n      _h = _a.onRenderFooter,\n      onRenderFooter = _h === void 0 ? this._onRenderFooter : _h;\n    var _j = this.state,\n      isFooterSticky = _j.isFooterSticky,\n      visibility = _j.visibility,\n      id = _j.id;\n    var isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;\n    var isRTL = getRTL(theme);\n    var isOnRightSide = isRTL ? isLeft : !isLeft;\n    var customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? {\n      width: customWidth\n    } : {};\n    var nativeProps = getNativeProps(this.props, divProperties);\n    var isOpen = this.isActive;\n    var isAnimating = visibility === PanelVisibilityState.animatingClosed || visibility === PanelVisibilityState.animatingOpen;\n    this._headerTextId = headerText && id + '-headerText';\n    if (!isOpen && !isAnimating && !isHiddenOnDismiss) {\n      return null;\n    }\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : undefined,\n      hasCloseButton: hasCloseButton,\n      headerClassName: headerClassName,\n      isAnimating: isAnimating,\n      isFooterSticky: isFooterSticky,\n      isFooterAtBottom: isFooterAtBottom,\n      isOnRightSide: isOnRightSide,\n      isOpen: isOpen,\n      isHiddenOnDismiss: isHiddenOnDismiss,\n      type: type,\n      hasCustomNavigation: this._hasCustomNavigation\n    });\n    var _k = this,\n      _classNames = _k._classNames,\n      _allowTouchBodyScroll = _k._allowTouchBodyScroll;\n    var overlay;\n    if (isBlocking && isOpen) {\n      overlay = React.createElement(Overlay, __assign({\n        className: _classNames.overlay,\n        isDarkThemed: false,\n        onClick: isLightDismiss ? onLightDismissClick : undefined,\n        allowTouchBodyScroll: _allowTouchBodyScroll\n      }, overlayProps));\n    }\n    return React.createElement(Layer, __assign({}, layerProps), React.createElement(Popup, __assign({\n      role: \"dialog\",\n      \"aria-modal\": \"true\",\n      ariaLabelledBy: this._headerTextId ? this._headerTextId : undefined,\n      onDismiss: this.dismiss,\n      className: _classNames.hiddenPanel\n    }, popupProps), React.createElement(\"div\", __assign({\n      \"aria-hidden\": !isOpen && isAnimating\n    }, nativeProps, {\n      ref: this._panel,\n      className: _classNames.root\n    }), overlay, React.createElement(FocusTrapZone, __assign({\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      forceFocusInsideTrap: !isBlocking || isHiddenOnDismiss && !isOpen ? false : forceFocusInsideTrap,\n      firstFocusableSelector: firstFocusableSelector,\n      isClickableOutsideFocusTrap: true\n    }, focusTrapZoneProps, {\n      className: _classNames.main,\n      style: customWidthStyles,\n      elementToFocusOnDismiss: elementToFocusOnDismiss\n    }), React.createElement(\"div\", {\n      className: _classNames.commands,\n      \"data-is-visible\": true\n    }, onRenderNavigation(this.props, this._onRenderNavigation)), React.createElement(\"div\", {\n      className: _classNames.contentInner\n    }, (this._hasCustomNavigation || !hasCloseButton) && onRenderHeader(this.props, this._onRenderHeader, this._headerTextId), React.createElement(\"div\", {\n      ref: this._allowScrollOnPanel,\n      className: _classNames.scrollableContent,\n      \"data-is-scrollable\": true\n    }, onRenderBody(this.props, this._onRenderBody)), onRenderFooter(this.props, this._onRenderFooter))))));\n  };\n  PanelBase.prototype.open = function () {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n    if (this.isActive) {\n      return;\n    }\n    this.setState({\n      visibility: PanelVisibilityState.animatingOpen\n    });\n  };\n  PanelBase.prototype.close = function () {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n    if (!this.isActive) {\n      return;\n    }\n    this.setState({\n      visibility: PanelVisibilityState.animatingClosed\n    });\n  };\n  Object.defineProperty(PanelBase.prototype, \"isActive\", {\n    /** isActive is true when panel is open or opening. */\n    get: function () {\n      return this.state.visibility === PanelVisibilityState.open || this.state.visibility === PanelVisibilityState.animatingOpen;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  PanelBase.prototype._shouldListenForOuterClick = function (props) {\n    return !!props.isBlocking && !!props.isOpen;\n  };\n  PanelBase.prototype._updateFooterPosition = function () {\n    var scrollableContent = this._scrollableContent;\n    if (scrollableContent) {\n      var height = scrollableContent.clientHeight;\n      var innerHeight_1 = scrollableContent.scrollHeight;\n      this.setState({\n        isFooterSticky: height < innerHeight_1 ? true : false\n      });\n    }\n  };\n  PanelBase.prototype._dismissOnOuterClick = function (ev) {\n    var panel = this._panel.current;\n    if (this.isActive && panel && !ev.defaultPrevented) {\n      if (!elementContains(panel, ev.target)) {\n        if (this.props.onOuterClick) {\n          this.props.onOuterClick(ev);\n        } else {\n          this.dismiss(ev);\n        }\n      }\n    }\n  };\n  PanelBase.defaultProps = {\n    isHiddenOnDismiss: false,\n    isOpen: undefined,\n    isBlocking: true,\n    hasCloseButton: true,\n    type: PanelType.smallFixedFar\n  };\n  return PanelBase;\n}(React.Component);\nexport { PanelBase };","map":{"version":3,"sources":["components/Panel/Panel.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Layer } from '../../Layer';\nimport { Overlay } from '../../Overlay';\nimport { Popup } from '../../Popup';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  allowScrollOnElement,\n  allowOverscrollOnElement,\n  classNamesFunction,\n  divProperties,\n  elementContains,\n  getId,\n  getNativeProps,\n  getRTL,\n  css,\n  warnDeprecations,\n  Async,\n  EventGroup,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { IPanel, IPanelProps, IPanelStyleProps, IPanelStyles, PanelType } from './Panel.types';\n\nconst getClassNames = classNamesFunction<IPanelStyleProps, IPanelStyles>();\nconst COMPONENT_NAME = 'Panel';\n\nenum PanelVisibilityState {\n  closed,\n  animatingOpen,\n  open,\n  animatingClosed,\n}\n\ninterface IPanelState {\n  isFooterSticky?: boolean;\n  id?: string;\n  visibility: PanelVisibilityState;\n}\n\nexport class PanelBase extends React.Component<IPanelProps, IPanelState> implements IPanel {\n  public static defaultProps: IPanelProps = {\n    isHiddenOnDismiss: false,\n    isOpen: undefined,\n    isBlocking: true,\n    hasCloseButton: true,\n    type: PanelType.smallFixedFar,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _panel = React.createRef<HTMLDivElement>();\n  private _classNames: IProcessedStyleSet<IPanelStyles>;\n  private _scrollableContent: HTMLDivElement | null;\n  private _animationCallback: number | null = null;\n  private _hasCustomNavigation: boolean = !!(this.props.onRenderNavigation || this.props.onRenderNavigationContent);\n  private _headerTextId: string | undefined;\n  private _allowTouchBodyScroll: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IPanelProps>,\n    prevState: Readonly<IPanelState>,\n  ): Partial<IPanelState> | null {\n    if (nextProps.isOpen === undefined) {\n      return null; // no state update\n    }\n    if (\n      nextProps.isOpen &&\n      (prevState.visibility === PanelVisibilityState.closed ||\n        prevState.visibility === PanelVisibilityState.animatingClosed)\n    ) {\n      return { visibility: PanelVisibilityState.animatingOpen };\n    }\n    if (\n      !nextProps.isOpen &&\n      (prevState.visibility === PanelVisibilityState.open ||\n        prevState.visibility === PanelVisibilityState.animatingOpen)\n    ) {\n      return { visibility: PanelVisibilityState.animatingClosed };\n    }\n    return null;\n  }\n\n  constructor(props: IPanelProps) {\n    super(props);\n\n    const { allowTouchBodyScroll = false } = this.props;\n    this._allowTouchBodyScroll = allowTouchBodyScroll;\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    initializeComponentRef(this);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      ignoreExternalFocusing: 'focusTrapZoneProps',\n      forceFocusInsideTrap: 'focusTrapZoneProps',\n      firstFocusableSelector: 'focusTrapZoneProps',\n    });\n\n    this.state = {\n      isFooterSticky: false,\n      // intentionally ignore props so animation takes place during componentDidMount\n      visibility: PanelVisibilityState.closed,\n      id: getId('Panel'),\n    };\n  }\n\n  public componentDidMount(): void {\n    this._events.on(window, 'resize', this._updateFooterPosition);\n\n    if (this._shouldListenForOuterClick(this.props)) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n\n    if (this.props.isOpen) {\n      this.setState({ visibility: PanelVisibilityState.animatingOpen });\n    }\n  }\n\n  public componentDidUpdate(previousProps: IPanelProps, previousState: IPanelState): void {\n    const shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);\n    const previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);\n\n    if (this.state.visibility !== previousState.visibility) {\n      this._clearExistingAnimationTimer();\n      if (this.state.visibility === PanelVisibilityState.animatingOpen) {\n        this._animateTo(PanelVisibilityState.open);\n      } else if (this.state.visibility === PanelVisibilityState.animatingClosed) {\n        this._animateTo(PanelVisibilityState.closed);\n      }\n    }\n\n    if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    } else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {\n      this._events.off(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      className = '',\n      elementToFocusOnDismiss,\n      /* eslint-disable deprecation/deprecation */\n      firstFocusableSelector,\n      focusTrapZoneProps,\n      forceFocusInsideTrap,\n      hasCloseButton,\n      headerText,\n      headerClassName = '',\n      ignoreExternalFocusing,\n      /* eslint-enable deprecation/deprecation */\n      isBlocking,\n      isFooterAtBottom,\n      isLightDismiss,\n      isHiddenOnDismiss,\n      layerProps,\n      overlayProps,\n      popupProps,\n      type,\n      styles,\n      theme,\n      customWidth,\n      onLightDismissClick = this._onPanelClick,\n      onRenderNavigation = this._onRenderNavigation,\n      onRenderHeader = this._onRenderHeader,\n      onRenderBody = this._onRenderBody,\n      onRenderFooter = this._onRenderFooter,\n    } = this.props;\n    const { isFooterSticky, visibility, id } = this.state;\n    const isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;\n    const isRTL = getRTL(theme);\n    const isOnRightSide = isRTL ? isLeft : !isLeft;\n    const customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? { width: customWidth } : {};\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n    const isOpen = this.isActive;\n    const isAnimating =\n      visibility === PanelVisibilityState.animatingClosed || visibility === PanelVisibilityState.animatingOpen;\n\n    this._headerTextId = headerText && id + '-headerText';\n\n    if (!isOpen && !isAnimating && !isHiddenOnDismiss) {\n      return null;\n    }\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : undefined,\n      hasCloseButton,\n      headerClassName,\n      isAnimating,\n      isFooterSticky,\n      isFooterAtBottom,\n      isOnRightSide,\n      isOpen,\n      isHiddenOnDismiss,\n      type,\n      hasCustomNavigation: this._hasCustomNavigation,\n    });\n\n    const { _classNames, _allowTouchBodyScroll } = this;\n\n    let overlay;\n    if (isBlocking && isOpen) {\n      overlay = (\n        <Overlay\n          className={_classNames.overlay}\n          isDarkThemed={false}\n          onClick={isLightDismiss ? onLightDismissClick : undefined}\n          allowTouchBodyScroll={_allowTouchBodyScroll}\n          {...overlayProps}\n        />\n      );\n    }\n\n    return (\n      <Layer {...layerProps}>\n        <Popup\n          role=\"dialog\"\n          aria-modal=\"true\"\n          ariaLabelledBy={this._headerTextId ? this._headerTextId : undefined}\n          onDismiss={this.dismiss}\n          className={_classNames.hiddenPanel}\n          {...popupProps}\n        >\n          <div aria-hidden={!isOpen && isAnimating} {...nativeProps} ref={this._panel} className={_classNames.root}>\n            {overlay}\n            <FocusTrapZone\n              ignoreExternalFocusing={ignoreExternalFocusing}\n              forceFocusInsideTrap={!isBlocking || (isHiddenOnDismiss && !isOpen) ? false : forceFocusInsideTrap}\n              firstFocusableSelector={firstFocusableSelector}\n              isClickableOutsideFocusTrap={true}\n              {...focusTrapZoneProps}\n              className={_classNames.main}\n              style={customWidthStyles}\n              elementToFocusOnDismiss={elementToFocusOnDismiss}\n            >\n              <div className={_classNames.commands} data-is-visible={true}>\n                {onRenderNavigation(this.props, this._onRenderNavigation)}\n              </div>\n              <div className={_classNames.contentInner}>\n                {(this._hasCustomNavigation || !hasCloseButton) &&\n                  onRenderHeader(this.props, this._onRenderHeader, this._headerTextId)}\n                <div ref={this._allowScrollOnPanel} className={_classNames.scrollableContent} data-is-scrollable={true}>\n                  {onRenderBody(this.props, this._onRenderBody)}\n                </div>\n                {onRenderFooter(this.props, this._onRenderFooter)}\n              </div>\n            </FocusTrapZone>\n          </div>\n        </Popup>\n      </Layer>\n    );\n  }\n\n  public open() {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (this.isActive) {\n      return;\n    }\n\n    this.setState({ visibility: PanelVisibilityState.animatingOpen });\n  }\n\n  public close() {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (!this.isActive) {\n      return;\n    }\n\n    this.setState({ visibility: PanelVisibilityState.animatingClosed });\n  }\n\n  public dismiss = (ev?: React.SyntheticEvent<HTMLElement>): void => {\n    if (this.props.onDismiss) {\n      this.props.onDismiss(ev);\n    }\n\n    if (!ev || (ev && !ev.defaultPrevented)) {\n      this.close();\n    }\n  };\n\n  /** isActive is true when panel is open or opening. */\n  public get isActive(): boolean {\n    return (\n      this.state.visibility === PanelVisibilityState.open ||\n      this.state.visibility === PanelVisibilityState.animatingOpen\n    );\n  }\n\n  // Allow the user to scroll within the panel but not on the body\n  private _allowScrollOnPanel = (elt: HTMLDivElement | null): void => {\n    if (elt) {\n      if (this._allowTouchBodyScroll) {\n        allowOverscrollOnElement(elt, this._events);\n      } else {\n        allowScrollOnElement(elt, this._events);\n      }\n    } else {\n      this._events.off(this._scrollableContent);\n    }\n    this._scrollableContent = elt;\n  };\n\n  private _shouldListenForOuterClick(props: IPanelProps): boolean {\n    return !!props.isBlocking && !!props.isOpen;\n  }\n\n  private _onRenderNavigation = (props: IPanelProps): JSX.Element | null => {\n    if (!this.props.onRenderNavigationContent && !this.props.onRenderNavigation && !this.props.hasCloseButton) {\n      return null;\n    }\n    const { onRenderNavigationContent = this._onRenderNavigationContent } = this.props;\n    return (\n      <div className={this._classNames.navigation}>\n        {onRenderNavigationContent(props, this._onRenderNavigationContent)}\n      </div>\n    );\n  };\n\n  private _onRenderNavigationContent = (props: IPanelProps): JSX.Element | null => {\n    const { closeButtonAriaLabel, hasCloseButton, onRenderHeader = this._onRenderHeader } = props;\n    if (hasCloseButton) {\n      const iconButtonStyles = this._classNames.subComponentStyles?.closeButton();\n\n      return (\n        <>\n          {!this._hasCustomNavigation && onRenderHeader(this.props, this._onRenderHeader, this._headerTextId)}\n          <IconButton\n            styles={iconButtonStyles}\n            // eslint-disable-next-line deprecation/deprecation\n            className={this._classNames.closeButton}\n            onClick={this._onPanelClick}\n            ariaLabel={closeButtonAriaLabel}\n            title={closeButtonAriaLabel}\n            data-is-visible={true}\n            iconProps={{ iconName: 'Cancel' }}\n          />\n        </>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderHeader = (\n    props: IPanelProps,\n    defaultRender?: (props?: IPanelProps) => JSX.Element | null,\n    headerTextId?: string | undefined,\n  ): JSX.Element | null => {\n    const { headerText, headerTextProps = {} } = props;\n\n    if (headerText) {\n      return (\n        <div className={this._classNames.header}>\n          <div\n            id={headerTextId}\n            role=\"heading\"\n            aria-level={1}\n            {...headerTextProps}\n            className={css(this._classNames.headerText, headerTextProps.className)}\n          >\n            {headerText}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderBody = (props: IPanelProps): JSX.Element => {\n    return <div className={this._classNames.content}>{props.children}</div>;\n  };\n\n  private _onRenderFooter = (props: IPanelProps): JSX.Element | null => {\n    const { onRenderFooterContent = null } = this.props;\n    if (onRenderFooterContent) {\n      return (\n        <div className={this._classNames.footer}>\n          <div className={this._classNames.footerInner}>{onRenderFooterContent()}</div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private _updateFooterPosition(): void {\n    const scrollableContent = this._scrollableContent;\n    if (scrollableContent) {\n      const height = scrollableContent.clientHeight;\n      const innerHeight = scrollableContent.scrollHeight;\n\n      this.setState({\n        isFooterSticky: height < innerHeight ? true : false,\n      });\n    }\n  }\n\n  private _dismissOnOuterClick(ev: React.MouseEvent<HTMLDivElement>): void {\n    const panel = this._panel.current;\n    if (this.isActive && panel && !ev.defaultPrevented) {\n      if (!elementContains(panel, ev.target as HTMLElement)) {\n        if (this.props.onOuterClick) {\n          this.props.onOuterClick(ev);\n        } else {\n          this.dismiss(ev);\n        }\n      }\n    }\n  }\n\n  private _animateTo = (newVisibilityState: PanelVisibilityState): void => {\n    if (newVisibilityState === PanelVisibilityState.open && this.props.onOpen) {\n      this.props.onOpen();\n    }\n\n    this._animationCallback = this._async.setTimeout(() => {\n      this.setState({ visibility: newVisibilityState });\n      this._onTransitionComplete();\n    }, 200);\n  };\n\n  private _clearExistingAnimationTimer = (): void => {\n    if (this._animationCallback !== null) {\n      this._async.clearTimeout(this._animationCallback);\n    }\n  };\n\n  private _onPanelClick = (ev?: any): void => {\n    this.dismiss(ev);\n  };\n\n  private _onTransitionComplete = (): void => {\n    this._updateFooterPosition();\n\n    if (this.state.visibility === PanelVisibilityState.open && this.props.onOpened) {\n      this.props.onOpened();\n    }\n\n    if (this.state.visibility === PanelVisibilityState.closed && this.props.onDismissed) {\n      this.props.onDismissed();\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}