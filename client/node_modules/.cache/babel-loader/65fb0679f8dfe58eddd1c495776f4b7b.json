{"ast":null,"code":"var SuggestionsStore = /** @class */function () {\n  function SuggestionsStore(options) {\n    var _this = this;\n    this._isSuggestionModel = function (value) {\n      return value.item !== undefined;\n    };\n    this._ensureSuggestionModel = function (suggestion) {\n      if (_this._isSuggestionModel(suggestion)) {\n        return suggestion;\n      } else {\n        return {\n          item: suggestion,\n          selected: false,\n          ariaLabel: _this.getAriaLabel !== undefined ? _this.getAriaLabel(suggestion) : suggestion.name || suggestion.text || suggestion.primaryText\n        };\n      }\n    };\n    this.suggestions = [];\n    this.getAriaLabel = options && options.getAriaLabel;\n  }\n  SuggestionsStore.prototype.updateSuggestions = function (newSuggestions) {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n    } else {\n      this.suggestions = [];\n    }\n  };\n  SuggestionsStore.prototype.getSuggestions = function () {\n    return this.suggestions;\n  };\n  SuggestionsStore.prototype.getSuggestionAtIndex = function (index) {\n    return this.suggestions[index];\n  };\n  SuggestionsStore.prototype.removeSuggestion = function (index) {\n    this.suggestions.splice(index, 1);\n  };\n  SuggestionsStore.prototype.convertSuggestionsToSuggestionItems = function (suggestions) {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  };\n  return SuggestionsStore;\n}();\nexport { SuggestionsStore };","map":{"version":3,"sources":["components/FloatingPicker/Suggestions/SuggestionsStore.ts"],"names":[],"mappings":"AAOA,IAAA,gBAAA,GAAA,aAAA,YAAA;EAIE,SAAA,gBAAA,CAAY,OAAoC,EAAA;IAAhD,IAAA,KAAA,GAAA,IAAA;IA6BQ,IAAA,CAAA,kBAAkB,GAAG,UAAC,KAA8B,EAAA;MAC1D,OAA6B,KAAM,CAAC,IAAI,KAAK,SAAS;IACxD,CAAC;IAEO,IAAA,CAAA,sBAAsB,GAAG,UAAC,UAAmC,EAAA;MACnE,IAAI,KAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;QACvC,OAAO,UAAU;OAClB,MAAM;QACL,OAAO;UACL,IAAI,EAAE,UAAU;UAChB,QAAQ,EAAE,KAAK;UACf,SAAS,EACP,KAAI,CAAC,YAAY,KAAK,SAAS,GAC3B,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAC3B,UAA2B,CAAC,IAAI,IAClB,UAAW,CAAC,IAAI,IAChB,UAAW,CAAC;SACnC;MACF;IACH,CAAC;IA/CC,IAAI,CAAC,WAAW,GAAG,EAAE;IACrB,IAAI,CAAC,YAAY,GAAG,OAAO,IAAI,OAAO,CAAC,YAAY;EACrD;EAEO,gBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,UAAyB,cAAmB,EAAA;IAC1C,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;MAC/C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mCAAmC,CAAC,cAAc,CAAC;KAC5E,MAAM;MACL,IAAI,CAAC,WAAW,GAAG,EAAE;IACtB;EACH,CAAC;EAEM,gBAAA,CAAA,SAAA,CAAA,cAAc,GAArB,YAAA;IACE,OAAO,IAAI,CAAC,WAAW;EACzB,CAAC;EAEM,gBAAA,CAAA,SAAA,CAAA,oBAAoB,GAA3B,UAA4B,KAAa,EAAA;IACvC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;EAChC,CAAC;EAEM,gBAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UAAwB,KAAa,EAAA;IACnC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;EACnC,CAAC;EAEM,gBAAA,CAAA,SAAA,CAAA,mCAAmC,GAA1C,UAA2C,WAA2C,EAAA;IACpF,OAAO,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE;EACvF,CAAC;EAsBH,OAAA,gBAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["import { ISuggestionModel, ITag } from '../../../Pickers';\nimport { IPersonaProps } from '../../../Persona';\n\nexport type SuggestionsStoreOptions<T> = {\n  getAriaLabel?: (item: T) => string;\n};\n\nexport class SuggestionsStore<T> {\n  public suggestions: ISuggestionModel<T>[];\n  private getAriaLabel?: (item: T) => string;\n\n  constructor(options?: SuggestionsStoreOptions<T>) {\n    this.suggestions = [];\n    this.getAriaLabel = options && options.getAriaLabel;\n  }\n\n  public updateSuggestions(newSuggestions: T[]): void {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n    } else {\n      this.suggestions = [];\n    }\n  }\n\n  public getSuggestions(): ISuggestionModel<T>[] {\n    return this.suggestions;\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.suggestions[index];\n  }\n\n  public removeSuggestion(index: number): void {\n    this.suggestions.splice(index, 1);\n  }\n\n  public convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[] {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  }\n\n  private _isSuggestionModel = (value: ISuggestionModel<T> | T): value is ISuggestionModel<T> => {\n    return (<ISuggestionModel<T>>value).item !== undefined;\n  };\n\n  private _ensureSuggestionModel = (suggestion: ISuggestionModel<T> | T): ISuggestionModel<T> => {\n    if (this._isSuggestionModel(suggestion)) {\n      return suggestion;\n    } else {\n      return {\n        item: suggestion,\n        selected: false,\n        ariaLabel:\n          this.getAriaLabel !== undefined\n            ? this.getAriaLabel(suggestion)\n            : ((suggestion as any) as ITag).name ||\n              (<IPersonaProps>suggestion).text ||\n              (<IPersonaProps>suggestion).primaryText, // eslint-disable-line deprecation/deprecation\n      };\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}