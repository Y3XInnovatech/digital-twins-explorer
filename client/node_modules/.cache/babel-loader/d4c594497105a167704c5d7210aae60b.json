{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst MAX_CONCURRENT_QUERIES = 6;\nexport class BatchService {\n  constructor(config) {\n    this.maxConcurrentQueries = config.maxConcurrentQueries || MAX_CONCURRENT_QUERIES;\n    this.refreshSize = config.refreshSize || Math.round(config.items.length / 3);\n    this._refresh = config.refresh;\n    this._update = config.update;\n    this._action = config.action;\n    this._items = config.items;\n  }\n  async run() {\n    const check = results => {\n      const match = results.find(x => typeof x === Error);\n      if (match) {\n        throw match;\n      }\n    };\n    const promises = [];\n    this._count = 0;\n    let completed = 0;\n    this.update(0);\n    for (let i = 0; i < this._items.length; i++) {\n      const item = this._items[i];\n      if (promises.length === this.maxConcurrentQueries) {\n        check([await Promise.race(promises.map(p => p.promise))]);\n        if (++completed % this.refreshSize === 0) {\n          await this.refresh();\n        }\n      }\n      const p = {};\n      p.promise = new Promise((resolve, reject) => {\n        const res = () => {\n          promises.splice(promises.indexOf(p), 1);\n          try {\n            this.update(this._count++ / this._items.length * 100);\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        };\n        try {\n          this._action(item, res, reject);\n        } catch (e) {\n          reject(e);\n        }\n      }).catch(err => err);\n      promises.push(p);\n    }\n    check(await Promise.all(promises.map(p => p.promise)));\n    await this.refresh();\n    this.update(100);\n  }\n  update(p) {\n    if (this._update) {\n      this._update(p);\n    }\n  }\n  async refresh() {\n    if (this._refresh) {\n      await this._refresh();\n    }\n  }\n}","map":{"version":3,"names":["MAX_CONCURRENT_QUERIES","BatchService","constructor","config","maxConcurrentQueries","refreshSize","Math","round","items","length","_refresh","refresh","_update","update","_action","action","_items","run","check","results","match","find","x","Error","promises","_count","completed","i","item","Promise","race","map","p","promise","resolve","reject","res","splice","indexOf","e","catch","err","push","all"],"sources":["/home/saharsh/Music/digital-twins-explorer/client/src/services/BatchService.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst MAX_CONCURRENT_QUERIES = 6;\n\nexport class BatchService {\n\n  constructor(config) {\n    this.maxConcurrentQueries = config.maxConcurrentQueries || MAX_CONCURRENT_QUERIES;\n    this.refreshSize = config.refreshSize || Math.round(config.items.length / 3);\n    this._refresh = config.refresh;\n    this._update = config.update;\n    this._action = config.action;\n    this._items = config.items;\n  }\n\n  async run() {\n    const check = results => {\n      const match = results.find(x => typeof x === Error);\n      if (match) {\n        throw match;\n      }\n    };\n\n    const promises = [];\n    this._count = 0;\n    let completed = 0;\n    this.update(0);\n\n    for (let i = 0; i < this._items.length; i++) {\n      const item = this._items[i];\n\n      if (promises.length === this.maxConcurrentQueries) {\n        check([ await Promise.race(promises.map(p => p.promise)) ]);\n        if (++completed % this.refreshSize === 0) {\n          await this.refresh();\n        }\n      }\n\n      const p = {};\n      p.promise = new Promise((resolve, reject) => {\n        const res = () => {\n          promises.splice(promises.indexOf(p), 1);\n\n          try {\n            this.update((this._count++ / this._items.length) * 100);\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        };\n\n        try {\n          this._action(item, res, reject);\n        } catch (e) {\n          reject(e);\n        }\n      }).catch(err => err);\n\n      promises.push(p);\n    }\n\n    check(await Promise.all(promises.map(p => p.promise)));\n    await this.refresh();\n    this.update(100);\n  }\n\n  update(p) {\n    if (this._update) {\n      this._update(p);\n    }\n  }\n\n  async refresh() {\n    if (this._refresh) {\n      await this._refresh();\n    }\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}