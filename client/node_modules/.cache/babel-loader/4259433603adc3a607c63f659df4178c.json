{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\nexport function sequencesToID(keySequences) {\n  return keySequences.reduce(function (prevValue, keySequence) {\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n  }, KTP_PREFIX);\n}\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\nexport function mergeOverflows(keySequences, overflowKeySequences) {\n  var overflowSequenceLen = overflowKeySequences.length;\n  var overflowSequence = __spreadArrays(overflowKeySequences).pop();\n  var newKeySequences = __spreadArrays(keySequences);\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);\n}\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\nexport function ktpTargetFromSequences(keySequences) {\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\nexport function ktpTargetFromId(keytipId) {\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\nexport function getAriaDescribedBy(keySequences) {\n  var describedby = ' ' + KTP_LAYER_ID;\n  if (!keySequences.length) {\n    // Return just the layer ID\n    return describedby;\n  }\n  return describedby + ' ' + sequencesToID(keySequences);\n}","map":{"version":3,"sources":["utilities/keytips/KeytipUtils.ts"],"names":[],"mappings":";AAAA,SAAS,aAAa,EAAE,UAAU,EAAE,cAAc,EAAE,sBAAsB,EAAE,YAAY,QAAQ,mBAAmB;AACnH,SAAS,iBAAiB,QAAQ,iBAAiB;AAEnD;;;;;;AAMG;AACH,OAAM,SAAU,aAAa,CAAC,YAAsB,EAAA;EAClD,OAAO,YAAY,CAAC,MAAM,CAAC,UAAC,SAAiB,EAAE,WAAmB,EAAA;IAChE,OAAO,SAAS,GAAG,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;EAC9E,CAAC,EAAE,UAAU,CAAC;AAChB;AAEA;;;;;;AAMG;AACH,OAAM,SAAU,cAAc,CAAC,YAAsB,EAAE,oBAA8B,EAAA;EACnF,IAAM,mBAAmB,GAAG,oBAAoB,CAAC,MAAM;EACvD,IAAM,gBAAgB,GAAG,cAAA,CAAI,oBAAoB,CAAA,CAAE,GAAG,CAAA,CAAE;EACxD,IAAM,eAAe,GAAA,cAAA,CAAO,YAAY,CAAC;EACzC,OAAO,iBAAiB,CAAC,eAAe,EAAE,mBAAmB,GAAG,CAAC,EAAE,gBAAiB,CAAC;AACvF;AAEA;;;;;AAKG;AACH,OAAM,SAAU,sBAAsB,CAAC,YAAsB,EAAA;EAC3D,OAAO,GAAG,GAAG,cAAc,GAAG,IAAI,GAAG,aAAa,CAAC,YAAY,CAAC,GAAG,IAAI;AACzE;AAEA;;;;;AAKG;AACH,OAAM,SAAU,eAAe,CAAC,QAAgB,EAAA;EAC9C,OAAO,GAAG,GAAG,sBAAsB,GAAG,IAAI,GAAG,QAAQ,GAAG,IAAI;AAC9D;AAEA;;;;;AAKG;AACH,OAAM,SAAU,kBAAkB,CAAC,YAAsB,EAAA;EACvD,IAAM,WAAW,GAAG,GAAG,GAAG,YAAY;EACtC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;IACxB;IACA,OAAO,WAAW;EACnB;EAED,OAAO,WAAW,GAAG,GAAG,GAAG,aAAa,CAAC,YAAY,CAAC;AACxD","sourcesContent":["import { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\nexport function sequencesToID(keySequences: string[]): string {\n  return keySequences.reduce((prevValue: string, keySequence: string): string => {\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n  }, KTP_PREFIX);\n}\n\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\nexport function mergeOverflows(keySequences: string[], overflowKeySequences: string[]): string[] {\n  const overflowSequenceLen = overflowKeySequences.length;\n  const overflowSequence = [...overflowKeySequences].pop();\n  const newKeySequences = [...keySequences];\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence!);\n}\n\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\nexport function ktpTargetFromSequences(keySequences: string[]): string {\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\nexport function ktpTargetFromId(keytipId: string): string {\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\nexport function getAriaDescribedBy(keySequences: string[]): string {\n  const describedby = ' ' + KTP_LAYER_ID;\n  if (!keySequences.length) {\n    // Return just the layer ID\n    return describedby;\n  }\n\n  return describedby + ' ' + sequencesToID(keySequences);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}