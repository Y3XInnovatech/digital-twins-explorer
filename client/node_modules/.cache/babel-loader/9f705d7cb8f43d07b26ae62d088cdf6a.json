{"ast":null,"code":"var _a;\nimport { __assign } from \"tslib\";\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { getScrollbarWidth, getRTL } from '../../Utilities';\nimport { RectangleEdge } from './positioning.types';\nimport { Rectangle } from '../../Utilities';\nfunction _createPositionData(targetEdge, alignmentEdge, isAuto) {\n  return {\n    targetEdge: targetEdge,\n    alignmentEdge: alignmentEdge,\n    isAuto: isAuto\n  };\n}\n// Currently the beakPercent is set to 50 for all positions meaning that it should tend to the center of the target\nvar DirectionalDictionary = (_a = {}, _a[DirectionalHint.topLeftEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.left), _a[DirectionalHint.topCenter] = _createPositionData(RectangleEdge.top), _a[DirectionalHint.topRightEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.right), _a[DirectionalHint.topAutoEdge] = _createPositionData(RectangleEdge.top, undefined, true), _a[DirectionalHint.bottomLeftEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.left), _a[DirectionalHint.bottomCenter] = _createPositionData(RectangleEdge.bottom), _a[DirectionalHint.bottomRightEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.right), _a[DirectionalHint.bottomAutoEdge] = _createPositionData(RectangleEdge.bottom, undefined, true), _a[DirectionalHint.leftTopEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.top), _a[DirectionalHint.leftCenter] = _createPositionData(RectangleEdge.left), _a[DirectionalHint.leftBottomEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.bottom), _a[DirectionalHint.rightTopEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.top), _a[DirectionalHint.rightCenter] = _createPositionData(RectangleEdge.right), _a[DirectionalHint.rightBottomEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.bottom), _a);\nfunction _isRectangleWithinBounds(rect, boundingRect) {\n  if (rect.top < boundingRect.top) {\n    return false;\n  }\n  if (rect.bottom > boundingRect.bottom) {\n    return false;\n  }\n  if (rect.left < boundingRect.left) {\n    return false;\n  }\n  if (rect.right > boundingRect.right) {\n    return false;\n  }\n  return true;\n}\n/**\n * Gets all of the edges of a rectangle that are outside of the given bounds.\n * If there are no out of bounds edges it returns an empty array.\n */\nfunction _getOutOfBoundsEdges(rect, boundingRect) {\n  var outOfBounds = [];\n  if (rect.top < boundingRect.top) {\n    outOfBounds.push(RectangleEdge.top);\n  }\n  if (rect.bottom > boundingRect.bottom) {\n    outOfBounds.push(RectangleEdge.bottom);\n  }\n  if (rect.left < boundingRect.left) {\n    outOfBounds.push(RectangleEdge.left);\n  }\n  if (rect.right > boundingRect.right) {\n    outOfBounds.push(RectangleEdge.right);\n  }\n  return outOfBounds;\n}\nfunction _getEdgeValue(rect, edge) {\n  return rect[RectangleEdge[edge]];\n}\nfunction _setEdgeValue(rect, edge, value) {\n  rect[RectangleEdge[edge]] = value;\n  return rect;\n}\n/**\n * Returns the middle value of an edge. Only returns 1 value rather than xy coordinates as\n * the itself already contains the other coordinate.\n * For instance, a bottom edge's current value is it's y coordinate, so the number returned is the x.\n */\nfunction _getCenterValue(rect, edge) {\n  var edges = _getFlankingEdges(edge);\n  return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;\n}\n/**\n * Flips the value depending on the edge.\n * If the edge is a \"positive\" edge, Top or Left, then the value should stay as it is.\n * If the edge is a \"negative\" edge, Bottom or Right, then the value should be flipped.\n * This is to account for the fact that the coordinates are effectively reveserved in certain cases for the\n * \"negative\" edges.\n *\n * For example, when testing to see if a bottom edge 1 is within the bounds of another bottom edge 2:\n * If edge 1 is greater than edge 2 then it is out of bounds. This is reversed for top edge 1 and top edge 2.\n * If top edge 1 is less than edge 2 then it is out of bounds.\n */\nfunction _getRelativeEdgeValue(edge, value) {\n  if (edge > 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n}\nfunction _getRelativeRectEdgeValue(edge, rect) {\n  return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));\n}\nfunction _getRelativeEdgeDifference(rect, hostRect, edge) {\n  var edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);\n  return _getRelativeEdgeValue(edge, edgeDifference);\n}\n/**\n * Moves the edge of a rectangle to the value given. It only moves the edge in a linear direction based on that edge.\n * For example, if it's a bottom edge it will only change y coordinates.\n */\nfunction _moveEdge(rect, edge, newValue) {\n  var difference = _getEdgeValue(rect, edge) - newValue;\n  rect = _setEdgeValue(rect, edge, newValue);\n  rect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);\n  return rect;\n}\n/**\n * Aligns the edge on the passed in rect to the target. If there is a gap then it will have that space between the two.\n */\nfunction _alignEdges(rect, target, edge, gap) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n  return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));\n}\n/**\n * Aligns the targetEdge on the passed in target to the rects corresponding opposite edge.\n * For instance if targetEdge is bottom, then the rects top will be moved to match it.\n */\nfunction _alignOppositeEdges(rect, target, targetEdge, gap) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n  var oppositeEdge = targetEdge * -1;\n  var adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);\n  return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);\n}\n/**\n * Tests to see if the given edge is within the bounds of the given rectangle.\n */\nfunction _isEdgeInBounds(rect, bounds, edge) {\n  var adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);\n  return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);\n}\n/**\n * Attempts to move the rectangle through various sides of the target to find a place to fit.\n * If no fit is found, the original position should be returned.\n */\nfunction _flipToFit(rect, target, bounding, positionData, gap) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n  var directions = [RectangleEdge.left, RectangleEdge.right, RectangleEdge.bottom, RectangleEdge.top];\n  // In RTL page, RectangleEdge.right has a higher priority than RectangleEdge.left, so the order should be updated.\n  if (getRTL()) {\n    directions[0] *= -1;\n    directions[1] *= -1;\n  }\n  var currentEstimate = rect;\n  var currentEdge = positionData.targetEdge;\n  var currentAlignment = positionData.alignmentEdge;\n  // Keep switching sides until one is found with enough space.\n  // If all sides don't fit then return the unmodified element.\n  for (var i = 0; i < 4; i++) {\n    if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {\n      directions.splice(directions.indexOf(currentEdge), 1);\n      if (directions.length > 0) {\n        if (directions.indexOf(currentEdge * -1) > -1) {\n          currentEdge = currentEdge * -1;\n        } else {\n          currentAlignment = currentEdge;\n          currentEdge = directions.slice(-1)[0];\n        }\n        currentEstimate = _estimatePosition(rect, target, {\n          targetEdge: currentEdge,\n          alignmentEdge: currentAlignment\n        }, gap);\n      }\n    } else {\n      return {\n        elementRectangle: currentEstimate,\n        targetEdge: currentEdge,\n        alignmentEdge: currentAlignment\n      };\n    }\n  }\n  return {\n    elementRectangle: rect,\n    targetEdge: positionData.targetEdge,\n    alignmentEdge: positionData.alignmentEdge\n  };\n}\n/**\n * Flips only the alignment edge of an element rectangle. This is used instead of nudging the alignment edges\n * into position, when alignTargetEdge is specified.\n */\nfunction _flipAlignmentEdge(elementEstimate, target, gap, coverTarget) {\n  var alignmentEdge = elementEstimate.alignmentEdge,\n    targetEdge = elementEstimate.targetEdge,\n    elementRectangle = elementEstimate.elementRectangle;\n  var oppositeEdge = alignmentEdge * -1;\n  var newEstimate = _estimatePosition(elementRectangle, target, {\n    targetEdge: targetEdge,\n    alignmentEdge: oppositeEdge\n  }, gap, coverTarget);\n  return {\n    elementRectangle: newEstimate,\n    targetEdge: targetEdge,\n    alignmentEdge: oppositeEdge\n  };\n}\n/**\n * Adjusts a element rectangle to fit within the bounds given. If directionalHintFixed or covertarget is passed in\n * then the element will not flip sides on the target. They will, however, be nudged to fit within the bounds given.\n */\nfunction _adjustFitWithinBounds(element, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n  var alignmentEdge = positionData.alignmentEdge,\n    alignTargetEdge = positionData.alignTargetEdge;\n  var elementEstimate = {\n    elementRectangle: element,\n    targetEdge: positionData.targetEdge,\n    alignmentEdge: alignmentEdge\n  };\n  if (!directionalHintFixed && !coverTarget) {\n    elementEstimate = _flipToFit(element, target, bounding, positionData, gap);\n  }\n  var outOfBounds = _getOutOfBoundsEdges(element, bounding);\n  if (alignTargetEdge) {\n    // The edge opposite to the alignment edge might be out of bounds.\n    // Flip alignment to see if we can get it within bounds.\n    if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {\n      var flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);\n      if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {\n        return flippedElementEstimate;\n      } else {\n        // If the flipped elements edges are still out of bounds, try nudging it.\n        elementEstimate = _alignOutOfBoundsEdges(_getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding), elementEstimate, bounding);\n      }\n    }\n  } else {\n    elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding);\n  }\n  return elementEstimate;\n}\n/**\n * Iterates through a list of out of bounds edges and tries to nudge and align them.\n * @param outOfBoundsEdges - Array of edges that are out of bounds\n * @param elementEstimate - The current element positioning estimate\n * @param bounding - The current bounds\n */\nfunction _alignOutOfBoundsEdges(outOfBoundsEdges, elementEstimate, bounding) {\n  for (var _i = 0, outOfBoundsEdges_1 = outOfBoundsEdges; _i < outOfBoundsEdges_1.length; _i++) {\n    var direction = outOfBoundsEdges_1[_i];\n    elementEstimate.elementRectangle = _alignEdges(elementEstimate.elementRectangle, bounding, direction);\n  }\n  return elementEstimate;\n}\n/**\n * Moves the middle point on an edge to the point given.\n * Only moves in one direction. For instance if a bottom edge is passed in, then\n * the bottom edge will be moved in the x axis to match the point.\n */\nfunction _centerEdgeToPoint(rect, edge, point) {\n  var positiveEdge = _getFlankingEdges(edge).positiveEdge;\n  var elementMiddle = _getCenterValue(rect, edge);\n  var distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);\n  return _moveEdge(rect, positiveEdge, point - distanceToMiddle);\n}\n/**\n * Moves the element rectangle to be appropriately positioned relative to a given target.\n * Does not flip or adjust the element.\n */\nfunction _estimatePosition(elementToPosition, target, positionData, gap, coverTarget) {\n  if (gap === void 0) {\n    gap = 0;\n  }\n  var estimatedElementPosition;\n  var alignmentEdge = positionData.alignmentEdge,\n    targetEdge = positionData.targetEdge;\n  var elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  estimatedElementPosition = coverTarget ? _alignEdges(elementToPosition, target, targetEdge, gap) : _alignOppositeEdges(elementToPosition, target, targetEdge, gap);\n  // if no alignment edge is provided it's supposed to be centered.\n  if (!alignmentEdge) {\n    var targetMiddlePoint = _getCenterValue(target, targetEdge);\n    estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);\n  } else {\n    estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);\n  }\n  return estimatedElementPosition;\n}\n/**\n * Returns the non-opposite edges of the target edge.\n * For instance if bottom is passed in then left and right will be returned.\n */\nfunction _getFlankingEdges(edge) {\n  if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {\n    return {\n      positiveEdge: RectangleEdge.left,\n      negativeEdge: RectangleEdge.right\n    };\n  } else {\n    return {\n      positiveEdge: RectangleEdge.top,\n      negativeEdge: RectangleEdge.bottom\n    };\n  }\n}\n/**\n * Retrieve the final value for the return edge of elementRectangle. If the elementRectangle is closer to one side\n * of the bounds versus the other, the return edge is flipped to grow inward.\n */\nfunction _finalizeReturnEdge(elementRectangle, returnEdge, bounds) {\n  if (bounds && Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) > Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))) {\n    return returnEdge * -1;\n  }\n  return returnEdge;\n}\n/**\n * Finalizes the element positon based on the hostElement. Only returns the\n * rectangle values to position such that they are anchored to the target.\n * This helps prevent resizing from looking very strange.\n * For instance, if the target edge is top and aligned with the left side then\n * the bottom and left values are returned so as the callou shrinks it shrinks towards that corner.\n */\nfunction _finalizeElementPosition(elementRectangle, hostElement, targetEdge, bounds, alignmentEdge, coverTarget, doNotFinalizeReturnEdge) {\n  var returnValue = {};\n  var hostRect = _getRectangleFromElement(hostElement);\n  var elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  var elementEdgeString = RectangleEdge[elementEdge];\n  var returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge;\n  if (!doNotFinalizeReturnEdge) {\n    returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);\n  }\n  returnValue[elementEdgeString] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);\n  return returnValue;\n}\n// Since the beak is rotated 45 degrees the actual height/width is the length of the diagonal.\n// We still want to position the beak based on it's midpoint which does not change. It will\n// be at (beakwidth / 2, beakwidth / 2)\nfunction _calculateActualBeakWidthInPixels(beakWidth) {\n  return Math.sqrt(beakWidth * beakWidth * 2);\n}\n/**\n * Returns the appropriate IPositionData based on the props altered for RTL.\n * If directionalHintForRTL is passed in that is used if the page is RTL.\n * If directionalHint is specified, no directionalHintForRTL is available, and the page is RTL, the hint will be\n * flipped (e.g. bottomLeftEdge would become bottomRightEdge).\n *\n * If there is no directionalHint passed in, bottomAutoEdge is chosen automatically.\n */\nfunction _getPositionData(directionalHint, directionalHintForRTL, previousPositions) {\n  if (directionalHint === void 0) {\n    directionalHint = DirectionalHint.bottomAutoEdge;\n  }\n  if (previousPositions) {\n    return {\n      alignmentEdge: previousPositions.alignmentEdge,\n      isAuto: previousPositions.isAuto,\n      targetEdge: previousPositions.targetEdge\n    };\n  }\n  var positionInformation = __assign({}, DirectionalDictionary[directionalHint]);\n  if (getRTL()) {\n    // If alignment edge exists and that alignment edge is -2 or 2, right or left, then flip it.\n    if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {\n      positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;\n    }\n    return directionalHintForRTL !== undefined ? DirectionalDictionary[directionalHintForRTL] : positionInformation;\n  }\n  return positionInformation;\n}\n/**\n * Get's the alignment data for the given information. This only really matters if the positioning is Auto.\n * If it is auto then the alignmentEdge should be chosen based on the target edge's position relative to\n * the center of the page.\n */\nfunction _getAlignmentData(positionData, target, boundingRect, coverTarget, alignTargetEdge) {\n  if (positionData.isAuto) {\n    positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);\n  }\n  positionData.alignTargetEdge = alignTargetEdge;\n  return positionData;\n}\nfunction getClosestEdge(targetEdge, target, boundingRect) {\n  var targetCenter = _getCenterValue(target, targetEdge);\n  var boundingCenter = _getCenterValue(boundingRect, targetEdge);\n  var _a = _getFlankingEdges(targetEdge),\n    positiveEdge = _a.positiveEdge,\n    negativeEdge = _a.negativeEdge;\n  if (targetCenter <= boundingCenter) {\n    return positiveEdge;\n  } else {\n    return negativeEdge;\n  }\n}\nfunction _positionElementWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget) {\n  var estimatedElementPosition = _estimatePosition(elementToPosition, target, positionData, gap, coverTarget);\n  if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {\n    return {\n      elementRectangle: estimatedElementPosition,\n      targetEdge: positionData.targetEdge,\n      alignmentEdge: positionData.alignmentEdge\n    };\n  } else {\n    return _adjustFitWithinBounds(elementToPosition, target, bounding, positionData, gap, directionalHintFixed, coverTarget);\n  }\n}\nfunction _finalizeBeakPosition(elementPosition, positionedBeak, bounds) {\n  var targetEdge = elementPosition.targetEdge * -1;\n  // The \"host\" element that we will use to help position the beak.\n  var actualElement = new Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);\n  var returnValue = {};\n  var returnEdge = _finalizeReturnEdge(elementPosition.elementRectangle, elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds);\n  returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);\n  return {\n    elementPosition: __assign({}, returnValue),\n    closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),\n    targetEdge: targetEdge\n  };\n}\nfunction _positionBeak(beakWidth, elementPosition) {\n  var target = elementPosition.targetRectangle;\n  /**\n   * Note about beak positioning: The actual beak width only matters for getting the gap between the callout and\n   * target, it does not impact the beak placement within the callout. For example example, if the beakWidth is 8,\n   * then the actual beakWidth is sqrroot(8^2 + 8^2) = 11.31x11.31. So the callout will need to be an extra 3 pixels\n   * away from its target. While the beak is being positioned in the callout it still acts as though it were 8x8.\n   */\n  var _a = _getFlankingEdges(elementPosition.targetEdge),\n    positiveEdge = _a.positiveEdge,\n    negativeEdge = _a.negativeEdge;\n  var beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);\n  var elementBounds = new Rectangle(beakWidth / 2, elementPosition.elementRectangle.width - beakWidth / 2, beakWidth / 2, elementPosition.elementRectangle.height - beakWidth / 2);\n  var beakPosition = new Rectangle(0, beakWidth, 0, beakWidth);\n  beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);\n  beakPosition = _centerEdgeToPoint(beakPosition, elementPosition.targetEdge * -1, beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle));\n  if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);\n  } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);\n  }\n  return beakPosition;\n}\nfunction _getRectangleFromElement(element) {\n  var clientRect = element.getBoundingClientRect();\n  return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);\n}\nfunction _getRectangleFromIRect(rect) {\n  return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);\n}\nfunction _getTargetRect(bounds, target) {\n  var targetRectangle;\n  if (target) {\n    // eslint-disable-next-line no-extra-boolean-cast\n    if (!!target.preventDefault) {\n      var ev = target;\n      targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);\n      // eslint-disable-next-line no-extra-boolean-cast\n    } else if (!!target.getBoundingClientRect) {\n      targetRectangle = _getRectangleFromElement(target);\n      // HTMLImgElements can have x and y values. The check for it being a point must go last.\n    } else {\n      var rectOrPoint = target;\n      // eslint-disable-next-line deprecation/deprecation\n      var left = rectOrPoint.left || rectOrPoint.x;\n      // eslint-disable-next-line deprecation/deprecation\n      var top_1 = rectOrPoint.top || rectOrPoint.y;\n      var right = rectOrPoint.right || left;\n      var bottom = rectOrPoint.bottom || top_1;\n      targetRectangle = new Rectangle(left, right, top_1, bottom);\n    }\n    if (!_isRectangleWithinBounds(targetRectangle, bounds)) {\n      var outOfBounds = _getOutOfBoundsEdges(targetRectangle, bounds);\n      for (var _i = 0, outOfBounds_1 = outOfBounds; _i < outOfBounds_1.length; _i++) {\n        var direction = outOfBounds_1[_i];\n        targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];\n      }\n    }\n  } else {\n    targetRectangle = new Rectangle(0, 0, 0, 0);\n  }\n  return targetRectangle;\n}\n/**\n * If max height is less than zero it returns the bounds height instead.\n */\nfunction _getMaxHeightFromTargetRectangle(targetRectangle, targetEdge, gapSpace, bounds, coverTarget) {\n  var maxHeight = 0;\n  var directionalHint = DirectionalDictionary[targetEdge];\n  // If cover target is set, then the max height should be calculated using the opposite of the target edge since\n  // that's the direction that the callout will expand in.\n  // For instance, if the directionalhint is bottomLeftEdge then the callout will position so it's bottom edge\n  // is aligned with the bottom of the target and expand up towards the top of the screen and the calculated max height\n  // is (bottom of target) - (top of screen) - gapSpace.\n  var target = coverTarget ? directionalHint.targetEdge * -1 : directionalHint.targetEdge;\n  if (target === RectangleEdge.top) {\n    maxHeight = _getEdgeValue(targetRectangle, directionalHint.targetEdge) - bounds.top - gapSpace;\n  } else if (target === RectangleEdge.bottom) {\n    maxHeight = bounds.bottom - _getEdgeValue(targetRectangle, directionalHint.targetEdge) - gapSpace;\n  } else {\n    maxHeight = bounds.bottom - targetRectangle.top - gapSpace;\n  }\n  return maxHeight > 0 ? maxHeight : bounds.height;\n}\nfunction _positionElementRelative(props, elementToPosition, boundingRect, previousPositions) {\n  var gap = props.gapSpace ? props.gapSpace : 0;\n  var targetRect = _getTargetRect(boundingRect, props.target);\n  var positionData = _getAlignmentData(_getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions), targetRect, boundingRect, props.coverTarget, props.alignTargetEdge);\n  var positionedElement = _positionElementWithinBounds(_getRectangleFromElement(elementToPosition), targetRect, boundingRect, positionData, gap, props.directionalHintFixed, props.coverTarget);\n  return __assign(__assign({}, positionedElement), {\n    targetRectangle: targetRect\n  });\n}\nfunction _finalizePositionData(positionedElement, hostElement, bounds, coverTarget, doNotFinalizeReturnEdge) {\n  var finalizedElement = _finalizeElementPosition(positionedElement.elementRectangle, hostElement, positionedElement.targetEdge, bounds, positionedElement.alignmentEdge, coverTarget, doNotFinalizeReturnEdge);\n  return {\n    elementPosition: finalizedElement,\n    targetEdge: positionedElement.targetEdge,\n    alignmentEdge: positionedElement.alignmentEdge\n  };\n}\nfunction _positionElement(props, hostElement, elementToPosition, previousPositions) {\n  var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n  var positionedElement = _positionElementRelative(props, elementToPosition, boundingRect, previousPositions);\n  return _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget);\n}\nfunction _positionCallout(props, hostElement, callout, previousPositions, doNotFinalizeReturnEdge) {\n  var beakWidth = props.isBeakVisible ? props.beakWidth || 0 : 0;\n  var gap = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);\n  var positionProps = props;\n  positionProps.gapSpace = gap;\n  var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n  var positionedElement = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);\n  var beakPositioned = _positionBeak(beakWidth, positionedElement);\n  var finalizedBeakPosition = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);\n  return __assign(__assign({}, _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge)), {\n    beakPosition: finalizedBeakPosition\n  });\n}\nfunction _positionCard(props, hostElement, callout, previousPositions) {\n  return _positionCallout(props, hostElement, callout, previousPositions, true);\n}\n// END PRIVATE FUNCTIONS\nexport var __positioningTestPackage = {\n  _finalizePositionData: _finalizePositionData,\n  _finalizeBeakPosition: _finalizeBeakPosition,\n  _calculateActualBeakWidthInPixels: _calculateActualBeakWidthInPixels,\n  _positionElementWithinBounds: _positionElementWithinBounds,\n  _positionBeak: _positionBeak,\n  _getPositionData: _getPositionData,\n  _getMaxHeightFromTargetRectangle: _getMaxHeightFromTargetRectangle\n};\n/**\n * Used to position an element relative to the given positioning props.\n * If positioning has been completed before, previousPositions can be passed to ensure that the positioning element\n * repositions based on its previous targets rather than starting with directionalhint.\n */\nexport function positionElement(props, hostElement, elementToPosition, previousPositions) {\n  return _positionElement(props, hostElement, elementToPosition, previousPositions);\n}\nexport function positionCallout(props, hostElement, elementToPosition, previousPositions) {\n  return _positionCallout(props, hostElement, elementToPosition, previousPositions);\n}\nexport function positionCard(props, hostElement, elementToPosition, previousPositions) {\n  return _positionCard(props, hostElement, elementToPosition, previousPositions);\n}\n/**\n * Gets the maximum height that a rectangle can have in order to fit below or above a target.\n * If the directional hint specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder\n * of the target given.\n * If no bounds are provided then the window is treated as the bounds.\n */\nexport function getMaxHeight(target, targetEdge, gapSpace, bounds, coverTarget) {\n  if (gapSpace === void 0) {\n    gapSpace = 0;\n  }\n  var mouseTarget = target;\n  var elementTarget = target;\n  var rectOrPointTarget = target;\n  var targetRect;\n  var boundingRectangle = bounds ? _getRectangleFromIRect(bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n  // eslint-disable-next-line deprecation/deprecation\n  var left = rectOrPointTarget.left || rectOrPointTarget.x;\n  // eslint-disable-next-line deprecation/deprecation\n  var top = rectOrPointTarget.top || rectOrPointTarget.y;\n  var right = rectOrPointTarget.right || left;\n  var bottom = rectOrPointTarget.bottom || top;\n  // eslint-disable-next-line no-extra-boolean-cast -- may not actually be a MouseEvent\n  if (!!mouseTarget.stopPropagation) {\n    targetRect = new Rectangle(mouseTarget.clientX, mouseTarget.clientX, mouseTarget.clientY, mouseTarget.clientY);\n  } else if (left !== undefined && top !== undefined) {\n    targetRect = new Rectangle(left, right, top, bottom);\n  } else {\n    targetRect = _getRectangleFromElement(elementTarget);\n  }\n  return _getMaxHeightFromTargetRectangle(targetRect, targetEdge, gapSpace, boundingRectangle, coverTarget);\n}\n/**\n * Returns the opposite edge of the given RectangleEdge.\n */\nexport function getOppositeEdge(edge) {\n  return edge * -1;\n}\nfunction _getBoundsFromTargetWindow(target, targetWindow) {\n  var segments = undefined;\n  if (targetWindow.getWindowSegments) {\n    segments = targetWindow.getWindowSegments();\n  }\n  // Identify if we're dealing with single screen scenarios.\n  if (segments === undefined || segments.length <= 1) {\n    return {\n      top: 0,\n      left: 0,\n      right: targetWindow.innerWidth,\n      bottom: targetWindow.innerHeight,\n      width: targetWindow.innerWidth,\n      height: targetWindow.innerHeight\n    };\n  }\n  // Logic for determining dual screen scenarios.\n  var x = 0;\n  var y = 0;\n  // If the target is an Element get coordinates for its center.\n  if (target !== null && !!target.getBoundingClientRect) {\n    var clientRect = target.getBoundingClientRect();\n    x = (clientRect.left + clientRect.right) / 2;\n    y = (clientRect.top + clientRect.bottom) / 2;\n  }\n  // If the target is not null get x-axis and y-axis coordinates directly.\n  else if (target !== null) {\n    // eslint-disable-next-line deprecation/deprecation\n    x = target.left || target.x;\n    // eslint-disable-next-line deprecation/deprecation\n    y = target.top || target.y;\n  }\n  var bounds = {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    width: 0,\n    height: 0\n  };\n  // Define which window segment are the coordinates in and calculate bounds based on that.\n  for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {\n    var segment = segments_1[_i];\n    if (x && segment.left <= x && segment.right >= x && y && segment.top <= y && segment.bottom >= y) {\n      bounds = {\n        top: segment.top,\n        left: segment.left,\n        right: segment.right,\n        bottom: segment.bottom,\n        width: segment.width,\n        height: segment.height\n      };\n    }\n  }\n  return bounds;\n}\nexport function getBoundsFromTargetWindow(target, targetWindow) {\n  return _getBoundsFromTargetWindow(target, targetWindow);\n}","map":{"version":3,"sources":["utilities/positioning/positioning.ts"],"names":[],"mappings":"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","sourcesContent":["import { DirectionalHint } from '../../common/DirectionalHint';\nimport { getScrollbarWidth, getRTL, IRectangle } from '../../Utilities';\nimport {\n  IPositionDirectionalHintData,\n  IPositionedData,\n  ICalloutPositionedInfo,\n  ICalloutBeakPositionedInfo,\n  IPositionProps,\n  ICalloutPositionProps,\n  RectangleEdge,\n  IWindowWithSegments,\n} from './positioning.types';\nimport { Point, Rectangle } from '../../Utilities';\n\nfunction _createPositionData(\n  targetEdge: RectangleEdge,\n  alignmentEdge?: RectangleEdge,\n  isAuto?: boolean,\n): IPositionDirectionalHintData {\n  return {\n    targetEdge: targetEdge,\n    alignmentEdge: alignmentEdge,\n    isAuto: isAuto,\n  };\n}\n\n// Currently the beakPercent is set to 50 for all positions meaning that it should tend to the center of the target\nconst DirectionalDictionary: { [key: number]: IPositionDirectionalHintData } = {\n  [DirectionalHint.topLeftEdge]: _createPositionData(RectangleEdge.top, RectangleEdge.left),\n  [DirectionalHint.topCenter]: _createPositionData(RectangleEdge.top),\n  [DirectionalHint.topRightEdge]: _createPositionData(RectangleEdge.top, RectangleEdge.right),\n  [DirectionalHint.topAutoEdge]: _createPositionData(RectangleEdge.top, undefined, true),\n  [DirectionalHint.bottomLeftEdge]: _createPositionData(RectangleEdge.bottom, RectangleEdge.left),\n  [DirectionalHint.bottomCenter]: _createPositionData(RectangleEdge.bottom),\n  [DirectionalHint.bottomRightEdge]: _createPositionData(RectangleEdge.bottom, RectangleEdge.right),\n  [DirectionalHint.bottomAutoEdge]: _createPositionData(RectangleEdge.bottom, undefined, true),\n  [DirectionalHint.leftTopEdge]: _createPositionData(RectangleEdge.left, RectangleEdge.top),\n  [DirectionalHint.leftCenter]: _createPositionData(RectangleEdge.left),\n  [DirectionalHint.leftBottomEdge]: _createPositionData(RectangleEdge.left, RectangleEdge.bottom),\n  [DirectionalHint.rightTopEdge]: _createPositionData(RectangleEdge.right, RectangleEdge.top),\n  [DirectionalHint.rightCenter]: _createPositionData(RectangleEdge.right),\n  [DirectionalHint.rightBottomEdge]: _createPositionData(RectangleEdge.right, RectangleEdge.bottom),\n};\n\n/**\n * Do not call methods from this directly, use either positionCallout or positionElement or make another function that\n * utilizes them.\n * START Private functions and interfaces\n */\n\nexport interface IElementPosition {\n  elementRectangle: Rectangle;\n  targetEdge: RectangleEdge;\n  alignmentEdge: RectangleEdge | undefined;\n}\n\nexport interface IElementPositionInfo extends IElementPosition {\n  targetRectangle: Rectangle;\n}\n\ntype PartialIRectangle = Partial<IRectangle>;\n\ninterface IPartialIRectangle extends PartialIRectangle {\n  [key: string]: number | undefined;\n}\n\nfunction _isRectangleWithinBounds(rect: Rectangle, boundingRect: Rectangle): boolean {\n  if (rect.top < boundingRect.top) {\n    return false;\n  }\n  if (rect.bottom > boundingRect.bottom) {\n    return false;\n  }\n  if (rect.left < boundingRect.left) {\n    return false;\n  }\n  if (rect.right > boundingRect.right) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Gets all of the edges of a rectangle that are outside of the given bounds.\n * If there are no out of bounds edges it returns an empty array.\n */\nfunction _getOutOfBoundsEdges(rect: Rectangle, boundingRect: Rectangle): RectangleEdge[] {\n  const outOfBounds: RectangleEdge[] = [];\n\n  if (rect.top < boundingRect.top) {\n    outOfBounds.push(RectangleEdge.top);\n  }\n  if (rect.bottom > boundingRect.bottom) {\n    outOfBounds.push(RectangleEdge.bottom);\n  }\n  if (rect.left < boundingRect.left) {\n    outOfBounds.push(RectangleEdge.left);\n  }\n  if (rect.right > boundingRect.right) {\n    outOfBounds.push(RectangleEdge.right);\n  }\n\n  return outOfBounds;\n}\n\nfunction _getEdgeValue(rect: Rectangle, edge: RectangleEdge): number {\n  return (rect as any)[RectangleEdge[edge]] as number;\n}\n\nfunction _setEdgeValue(rect: Rectangle, edge: RectangleEdge, value: number) {\n  (rect as any)[RectangleEdge[edge]] = value;\n  return rect;\n}\n\n/**\n * Returns the middle value of an edge. Only returns 1 value rather than xy coordinates as\n * the itself already contains the other coordinate.\n * For instance, a bottom edge's current value is it's y coordinate, so the number returned is the x.\n */\nfunction _getCenterValue(rect: Rectangle, edge: RectangleEdge): number {\n  const edges = _getFlankingEdges(edge);\n  return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;\n}\n\n/**\n * Flips the value depending on the edge.\n * If the edge is a \"positive\" edge, Top or Left, then the value should stay as it is.\n * If the edge is a \"negative\" edge, Bottom or Right, then the value should be flipped.\n * This is to account for the fact that the coordinates are effectively reveserved in certain cases for the\n * \"negative\" edges.\n *\n * For example, when testing to see if a bottom edge 1 is within the bounds of another bottom edge 2:\n * If edge 1 is greater than edge 2 then it is out of bounds. This is reversed for top edge 1 and top edge 2.\n * If top edge 1 is less than edge 2 then it is out of bounds.\n */\nfunction _getRelativeEdgeValue(edge: RectangleEdge, value: number): number {\n  if (edge > 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n}\n\nfunction _getRelativeRectEdgeValue(edge: RectangleEdge, rect: Rectangle): number {\n  return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));\n}\n\nfunction _getRelativeEdgeDifference(rect: Rectangle, hostRect: Rectangle, edge: RectangleEdge): number {\n  const edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);\n  return _getRelativeEdgeValue(edge, edgeDifference);\n}\n\n/**\n * Moves the edge of a rectangle to the value given. It only moves the edge in a linear direction based on that edge.\n * For example, if it's a bottom edge it will only change y coordinates.\n */\nfunction _moveEdge(rect: Rectangle, edge: RectangleEdge, newValue: number): Rectangle {\n  const difference = _getEdgeValue(rect, edge) - newValue;\n  rect = _setEdgeValue(rect, edge, newValue);\n  rect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);\n  return rect;\n}\n\n/**\n * Aligns the edge on the passed in rect to the target. If there is a gap then it will have that space between the two.\n */\nfunction _alignEdges(rect: Rectangle, target: Rectangle, edge: RectangleEdge, gap: number = 0): Rectangle {\n  return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap));\n}\n\n/**\n * Aligns the targetEdge on the passed in target to the rects corresponding opposite edge.\n * For instance if targetEdge is bottom, then the rects top will be moved to match it.\n */\nfunction _alignOppositeEdges(\n  rect: Rectangle,\n  target: Rectangle,\n  targetEdge: RectangleEdge,\n  gap: number = 0,\n): Rectangle {\n  const oppositeEdge = targetEdge * -1;\n  const adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap);\n  return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);\n}\n\n/**\n * Tests to see if the given edge is within the bounds of the given rectangle.\n */\nfunction _isEdgeInBounds(rect: Rectangle, bounds: Rectangle, edge: RectangleEdge): boolean {\n  const adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);\n  return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);\n}\n\n/**\n * Attempts to move the rectangle through various sides of the target to find a place to fit.\n * If no fit is found, the original position should be returned.\n */\nfunction _flipToFit(\n  rect: Rectangle,\n  target: Rectangle,\n  bounding: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number = 0,\n): IElementPosition {\n  const directions: RectangleEdge[] = [\n    RectangleEdge.left,\n    RectangleEdge.right,\n    RectangleEdge.bottom,\n    RectangleEdge.top,\n  ];\n  // In RTL page, RectangleEdge.right has a higher priority than RectangleEdge.left, so the order should be updated.\n  if (getRTL()) {\n    directions[0] *= -1;\n    directions[1] *= -1;\n  }\n  let currentEstimate = rect;\n  let currentEdge = positionData.targetEdge;\n  let currentAlignment = positionData.alignmentEdge;\n  // Keep switching sides until one is found with enough space.\n  // If all sides don't fit then return the unmodified element.\n  for (let i = 0; i < 4; i++) {\n    if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {\n      directions.splice(directions.indexOf(currentEdge), 1);\n      if (directions.length > 0) {\n        if (directions.indexOf(currentEdge * -1) > -1) {\n          currentEdge = currentEdge * -1;\n        } else {\n          currentAlignment = currentEdge;\n          currentEdge = directions.slice(-1)[0];\n        }\n        currentEstimate = _estimatePosition(\n          rect,\n          target,\n          { targetEdge: currentEdge, alignmentEdge: currentAlignment },\n          gap,\n        );\n      }\n    } else {\n      return {\n        elementRectangle: currentEstimate,\n        targetEdge: currentEdge,\n        alignmentEdge: currentAlignment,\n      };\n    }\n  }\n  return {\n    elementRectangle: rect,\n    targetEdge: positionData.targetEdge,\n    alignmentEdge: positionData.alignmentEdge,\n  };\n}\n\n/**\n * Flips only the alignment edge of an element rectangle. This is used instead of nudging the alignment edges\n * into position, when alignTargetEdge is specified.\n */\nfunction _flipAlignmentEdge(\n  elementEstimate: IElementPosition,\n  target: Rectangle,\n  gap: number,\n  coverTarget?: boolean,\n): IElementPosition {\n  const { alignmentEdge, targetEdge, elementRectangle } = elementEstimate;\n  const oppositeEdge = alignmentEdge! * -1;\n  const newEstimate = _estimatePosition(\n    elementRectangle,\n    target,\n    { targetEdge: targetEdge, alignmentEdge: oppositeEdge },\n    gap,\n    coverTarget,\n  );\n\n  return {\n    elementRectangle: newEstimate,\n    targetEdge: targetEdge,\n    alignmentEdge: oppositeEdge,\n  };\n}\n\n/**\n * Adjusts a element rectangle to fit within the bounds given. If directionalHintFixed or covertarget is passed in\n * then the element will not flip sides on the target. They will, however, be nudged to fit within the bounds given.\n */\nfunction _adjustFitWithinBounds(\n  element: Rectangle,\n  target: Rectangle,\n  bounding: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number = 0,\n  directionalHintFixed?: boolean,\n  coverTarget?: boolean,\n): IElementPosition {\n  const { alignmentEdge, alignTargetEdge } = positionData;\n  let elementEstimate: IElementPosition = {\n    elementRectangle: element,\n    targetEdge: positionData.targetEdge,\n    alignmentEdge: alignmentEdge,\n  };\n\n  if (!directionalHintFixed && !coverTarget) {\n    elementEstimate = _flipToFit(element, target, bounding, positionData, gap);\n  }\n  const outOfBounds = _getOutOfBoundsEdges(element, bounding);\n\n  if (alignTargetEdge) {\n    // The edge opposite to the alignment edge might be out of bounds.\n    // Flip alignment to see if we can get it within bounds.\n    if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {\n      const flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap, coverTarget);\n      if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {\n        return flippedElementEstimate;\n      } else {\n        // If the flipped elements edges are still out of bounds, try nudging it.\n        elementEstimate = _alignOutOfBoundsEdges(\n          _getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding),\n          elementEstimate,\n          bounding,\n        );\n      }\n    }\n  } else {\n    elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding);\n  }\n\n  return elementEstimate;\n}\n\n/**\n * Iterates through a list of out of bounds edges and tries to nudge and align them.\n * @param outOfBoundsEdges - Array of edges that are out of bounds\n * @param elementEstimate - The current element positioning estimate\n * @param bounding - The current bounds\n */\nfunction _alignOutOfBoundsEdges(\n  outOfBoundsEdges: RectangleEdge[],\n  elementEstimate: IElementPosition,\n  bounding: Rectangle,\n) {\n  for (const direction of outOfBoundsEdges) {\n    elementEstimate.elementRectangle = _alignEdges(elementEstimate.elementRectangle, bounding, direction);\n  }\n\n  return elementEstimate;\n}\n\n/**\n * Moves the middle point on an edge to the point given.\n * Only moves in one direction. For instance if a bottom edge is passed in, then\n * the bottom edge will be moved in the x axis to match the point.\n */\nfunction _centerEdgeToPoint(rect: Rectangle, edge: RectangleEdge, point: number): Rectangle {\n  const { positiveEdge } = _getFlankingEdges(edge);\n  const elementMiddle = _getCenterValue(rect, edge);\n  const distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);\n  return _moveEdge(rect, positiveEdge, point - distanceToMiddle);\n}\n\n/**\n * Moves the element rectangle to be appropriately positioned relative to a given target.\n * Does not flip or adjust the element.\n */\nfunction _estimatePosition(\n  elementToPosition: Rectangle,\n  target: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number = 0,\n  coverTarget?: boolean,\n): Rectangle {\n  let estimatedElementPosition: Rectangle;\n  const { alignmentEdge, targetEdge } = positionData;\n  const elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  estimatedElementPosition = coverTarget\n    ? _alignEdges(elementToPosition, target, targetEdge, gap)\n    : _alignOppositeEdges(elementToPosition, target, targetEdge, gap);\n  // if no alignment edge is provided it's supposed to be centered.\n  if (!alignmentEdge) {\n    const targetMiddlePoint = _getCenterValue(target, targetEdge);\n    estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);\n  } else {\n    estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);\n  }\n\n  return estimatedElementPosition;\n}\n\n/**\n * Returns the non-opposite edges of the target edge.\n * For instance if bottom is passed in then left and right will be returned.\n */\nfunction _getFlankingEdges(edge: RectangleEdge): { positiveEdge: RectangleEdge; negativeEdge: RectangleEdge } {\n  if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {\n    return {\n      positiveEdge: RectangleEdge.left,\n      negativeEdge: RectangleEdge.right,\n    };\n  } else {\n    return {\n      positiveEdge: RectangleEdge.top,\n      negativeEdge: RectangleEdge.bottom,\n    };\n  }\n}\n\n/**\n * Retrieve the final value for the return edge of elementRectangle. If the elementRectangle is closer to one side\n * of the bounds versus the other, the return edge is flipped to grow inward.\n */\nfunction _finalizeReturnEdge(\n  elementRectangle: Rectangle,\n  returnEdge: RectangleEdge,\n  bounds?: Rectangle,\n): RectangleEdge {\n  if (\n    bounds &&\n    Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) >\n      Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))\n  ) {\n    return returnEdge * -1;\n  }\n\n  return returnEdge;\n}\n\n/**\n * Finalizes the element positon based on the hostElement. Only returns the\n * rectangle values to position such that they are anchored to the target.\n * This helps prevent resizing from looking very strange.\n * For instance, if the target edge is top and aligned with the left side then\n * the bottom and left values are returned so as the callou shrinks it shrinks towards that corner.\n */\nfunction _finalizeElementPosition(\n  elementRectangle: Rectangle,\n  hostElement: HTMLElement,\n  targetEdge: RectangleEdge,\n  bounds?: Rectangle,\n  alignmentEdge?: RectangleEdge,\n  coverTarget?: boolean,\n  doNotFinalizeReturnEdge?: boolean,\n): IPartialIRectangle {\n  const returnValue: IPartialIRectangle = {};\n\n  const hostRect: Rectangle = _getRectangleFromElement(hostElement);\n  const elementEdge = coverTarget ? targetEdge : targetEdge * -1;\n  const elementEdgeString = RectangleEdge[elementEdge];\n  let returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge;\n  if (!doNotFinalizeReturnEdge) {\n    returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);\n  }\n\n  returnValue[elementEdgeString] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);\n\n  return returnValue;\n}\n\n// Since the beak is rotated 45 degrees the actual height/width is the length of the diagonal.\n// We still want to position the beak based on it's midpoint which does not change. It will\n// be at (beakwidth / 2, beakwidth / 2)\nfunction _calculateActualBeakWidthInPixels(beakWidth: number): number {\n  return Math.sqrt(beakWidth * beakWidth * 2);\n}\n\n/**\n * Returns the appropriate IPositionData based on the props altered for RTL.\n * If directionalHintForRTL is passed in that is used if the page is RTL.\n * If directionalHint is specified, no directionalHintForRTL is available, and the page is RTL, the hint will be\n * flipped (e.g. bottomLeftEdge would become bottomRightEdge).\n *\n * If there is no directionalHint passed in, bottomAutoEdge is chosen automatically.\n */\nfunction _getPositionData(\n  directionalHint: DirectionalHint = DirectionalHint.bottomAutoEdge,\n  directionalHintForRTL?: DirectionalHint,\n  previousPositions?: IPositionDirectionalHintData,\n): IPositionDirectionalHintData {\n  if (previousPositions) {\n    return {\n      alignmentEdge: previousPositions.alignmentEdge,\n      isAuto: previousPositions.isAuto,\n      targetEdge: previousPositions.targetEdge,\n    };\n  }\n  const positionInformation: IPositionDirectionalHintData = { ...DirectionalDictionary[directionalHint] };\n  if (getRTL()) {\n    // If alignment edge exists and that alignment edge is -2 or 2, right or left, then flip it.\n    if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {\n      positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;\n    }\n\n    return directionalHintForRTL !== undefined ? DirectionalDictionary[directionalHintForRTL] : positionInformation;\n  }\n  return positionInformation;\n}\n\n/**\n * Get's the alignment data for the given information. This only really matters if the positioning is Auto.\n * If it is auto then the alignmentEdge should be chosen based on the target edge's position relative to\n * the center of the page.\n */\nfunction _getAlignmentData(\n  positionData: IPositionDirectionalHintData,\n  target: Rectangle,\n  boundingRect: Rectangle,\n  coverTarget?: boolean,\n  alignTargetEdge?: boolean,\n): IPositionDirectionalHintData {\n  if (positionData.isAuto) {\n    positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);\n  }\n\n  positionData.alignTargetEdge = alignTargetEdge;\n  return positionData;\n}\n\nfunction getClosestEdge(targetEdge: RectangleEdge, target: Rectangle, boundingRect: Rectangle): RectangleEdge {\n  const targetCenter: number = _getCenterValue(target, targetEdge);\n  const boundingCenter: number = _getCenterValue(boundingRect, targetEdge);\n  const { positiveEdge, negativeEdge } = _getFlankingEdges(targetEdge);\n  if (targetCenter <= boundingCenter) {\n    return positiveEdge;\n  } else {\n    return negativeEdge;\n  }\n}\n\nfunction _positionElementWithinBounds(\n  elementToPosition: Rectangle,\n  target: Rectangle,\n  bounding: Rectangle,\n  positionData: IPositionDirectionalHintData,\n  gap: number,\n  directionalHintFixed?: boolean,\n  coverTarget?: boolean,\n): IElementPosition {\n  const estimatedElementPosition: Rectangle = _estimatePosition(\n    elementToPosition,\n    target,\n    positionData,\n    gap,\n    coverTarget,\n  );\n  if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {\n    return {\n      elementRectangle: estimatedElementPosition,\n      targetEdge: positionData.targetEdge,\n      alignmentEdge: positionData.alignmentEdge,\n    };\n  } else {\n    return _adjustFitWithinBounds(\n      elementToPosition,\n      target,\n      bounding,\n      positionData,\n      gap,\n      directionalHintFixed,\n      coverTarget,\n    );\n  }\n}\n\nfunction _finalizeBeakPosition(\n  elementPosition: IElementPosition,\n  positionedBeak: Rectangle,\n  bounds?: Rectangle,\n): ICalloutBeakPositionedInfo {\n  const targetEdge = elementPosition.targetEdge * -1;\n  // The \"host\" element that we will use to help position the beak.\n  const actualElement = new Rectangle(\n    0,\n    elementPosition.elementRectangle.width,\n    0,\n    elementPosition.elementRectangle.height,\n  );\n  const returnValue: IPartialIRectangle = {};\n  const returnEdge = _finalizeReturnEdge(\n    elementPosition.elementRectangle,\n    elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge,\n    bounds,\n  );\n\n  returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);\n  returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);\n\n  return {\n    elementPosition: { ...returnValue },\n    closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),\n    targetEdge: targetEdge,\n  };\n}\n\nfunction _positionBeak(beakWidth: number, elementPosition: IElementPositionInfo): Rectangle {\n  const target = elementPosition.targetRectangle;\n  /**\n   * Note about beak positioning: The actual beak width only matters for getting the gap between the callout and\n   * target, it does not impact the beak placement within the callout. For example example, if the beakWidth is 8,\n   * then the actual beakWidth is sqrroot(8^2 + 8^2) = 11.31x11.31. So the callout will need to be an extra 3 pixels\n   * away from its target. While the beak is being positioned in the callout it still acts as though it were 8x8.\n   */\n  const { positiveEdge, negativeEdge } = _getFlankingEdges(elementPosition.targetEdge);\n  const beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);\n  const elementBounds = new Rectangle(\n    beakWidth / 2,\n    elementPosition.elementRectangle.width - beakWidth / 2,\n    beakWidth / 2,\n    elementPosition.elementRectangle.height - beakWidth / 2,\n  );\n\n  let beakPosition: Rectangle = new Rectangle(0, beakWidth, 0, beakWidth);\n\n  beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);\n\n  beakPosition = _centerEdgeToPoint(\n    beakPosition,\n    elementPosition.targetEdge * -1,\n    beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle),\n  );\n\n  if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);\n  } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {\n    beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);\n  }\n\n  return beakPosition;\n}\n\nfunction _getRectangleFromElement(element: Element): Rectangle {\n  const clientRect: ClientRect = element.getBoundingClientRect();\n\n  return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);\n}\n\nfunction _getRectangleFromIRect(rect: IRectangle): Rectangle {\n  return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);\n}\n\nfunction _getTargetRect(bounds: Rectangle, target: Element | MouseEvent | Point | Rectangle | undefined): Rectangle {\n  let targetRectangle: Rectangle;\n  if (target) {\n    // eslint-disable-next-line no-extra-boolean-cast\n    if (!!(target as MouseEvent).preventDefault) {\n      const ev = target as MouseEvent;\n      targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);\n      // eslint-disable-next-line no-extra-boolean-cast\n    } else if (!!(target as Element).getBoundingClientRect) {\n      targetRectangle = _getRectangleFromElement(target as Element);\n      // HTMLImgElements can have x and y values. The check for it being a point must go last.\n    } else {\n      const rectOrPoint: Point & Rectangle = target as Point & Rectangle;\n      // eslint-disable-next-line deprecation/deprecation\n      const left = rectOrPoint.left || rectOrPoint.x;\n      // eslint-disable-next-line deprecation/deprecation\n      const top = rectOrPoint.top || rectOrPoint.y;\n      const right = rectOrPoint.right || left;\n      const bottom = rectOrPoint.bottom || top;\n      targetRectangle = new Rectangle(left, right, top, bottom);\n    }\n\n    if (!_isRectangleWithinBounds(targetRectangle, bounds)) {\n      const outOfBounds: RectangleEdge[] = _getOutOfBoundsEdges(targetRectangle, bounds);\n\n      for (const direction of outOfBounds) {\n        (targetRectangle as any)[RectangleEdge[direction]] = (bounds as any)[RectangleEdge[direction]];\n      }\n    }\n  } else {\n    targetRectangle = new Rectangle(0, 0, 0, 0);\n  }\n\n  return targetRectangle;\n}\n\n/**\n * If max height is less than zero it returns the bounds height instead.\n */\nfunction _getMaxHeightFromTargetRectangle(\n  targetRectangle: Rectangle,\n  targetEdge: DirectionalHint,\n  gapSpace: number,\n  bounds: Rectangle,\n  coverTarget?: boolean,\n) {\n  let maxHeight = 0;\n  const directionalHint = DirectionalDictionary[targetEdge];\n\n  // If cover target is set, then the max height should be calculated using the opposite of the target edge since\n  // that's the direction that the callout will expand in.\n  // For instance, if the directionalhint is bottomLeftEdge then the callout will position so it's bottom edge\n  // is aligned with the bottom of the target and expand up towards the top of the screen and the calculated max height\n  // is (bottom of target) - (top of screen) - gapSpace.\n  const target = coverTarget ? directionalHint.targetEdge * -1 : directionalHint.targetEdge;\n\n  if (target === RectangleEdge.top) {\n    maxHeight = _getEdgeValue(targetRectangle, directionalHint.targetEdge) - bounds.top - gapSpace;\n  } else if (target === RectangleEdge.bottom) {\n    maxHeight = bounds.bottom - _getEdgeValue(targetRectangle, directionalHint.targetEdge) - gapSpace;\n  } else {\n    maxHeight = bounds.bottom - targetRectangle.top - gapSpace;\n  }\n\n  return maxHeight > 0 ? maxHeight : bounds.height;\n}\n\nfunction _positionElementRelative(\n  props: IPositionProps,\n  elementToPosition: HTMLElement,\n  boundingRect: Rectangle,\n  previousPositions?: IPositionedData,\n): IElementPositionInfo {\n  const gap: number = props.gapSpace ? props.gapSpace : 0;\n  const targetRect: Rectangle = _getTargetRect(boundingRect, props.target);\n  const positionData: IPositionDirectionalHintData = _getAlignmentData(\n    _getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions)!,\n    targetRect,\n    boundingRect,\n    props.coverTarget,\n    props.alignTargetEdge,\n  );\n  const positionedElement: IElementPosition = _positionElementWithinBounds(\n    _getRectangleFromElement(elementToPosition),\n    targetRect,\n    boundingRect,\n    positionData,\n    gap,\n    props.directionalHintFixed,\n    props.coverTarget,\n  );\n  return { ...positionedElement, targetRectangle: targetRect };\n}\n\nfunction _finalizePositionData(\n  positionedElement: IElementPosition,\n  hostElement: HTMLElement,\n  bounds?: Rectangle,\n  coverTarget?: boolean,\n  doNotFinalizeReturnEdge?: boolean,\n): IPositionedData {\n  const finalizedElement: IPartialIRectangle = _finalizeElementPosition(\n    positionedElement.elementRectangle,\n    hostElement,\n    positionedElement.targetEdge,\n    bounds,\n    positionedElement.alignmentEdge,\n    coverTarget,\n    doNotFinalizeReturnEdge,\n  );\n  return {\n    elementPosition: finalizedElement,\n    targetEdge: positionedElement.targetEdge,\n    alignmentEdge: positionedElement.alignmentEdge,\n  };\n}\n\nfunction _positionElement(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: IPositionedData,\n): IPositionedData {\n  const boundingRect: Rectangle = props.bounds\n    ? _getRectangleFromIRect(props.bounds)\n    : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n  const positionedElement: IElementPosition = _positionElementRelative(\n    props,\n    elementToPosition,\n    boundingRect,\n    previousPositions,\n  );\n  return _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget);\n}\n\nfunction _positionCallout(\n  props: ICalloutPositionProps,\n  hostElement: HTMLElement,\n  callout: HTMLElement,\n  previousPositions?: ICalloutPositionedInfo,\n  doNotFinalizeReturnEdge?: boolean,\n): ICalloutPositionedInfo {\n  const beakWidth: number = props.isBeakVisible ? props.beakWidth || 0 : 0;\n  const gap: number = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);\n  const positionProps: IPositionProps = props;\n  positionProps.gapSpace = gap;\n  const boundingRect: Rectangle = props.bounds\n    ? _getRectangleFromIRect(props.bounds)\n    : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n  const positionedElement: IElementPositionInfo = _positionElementRelative(\n    positionProps,\n    callout,\n    boundingRect,\n    previousPositions,\n  );\n  const beakPositioned: Rectangle = _positionBeak(beakWidth, positionedElement);\n  const finalizedBeakPosition: ICalloutBeakPositionedInfo = _finalizeBeakPosition(\n    positionedElement,\n    beakPositioned,\n    boundingRect,\n  );\n  return {\n    ..._finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge),\n    beakPosition: finalizedBeakPosition,\n  };\n}\n\nfunction _positionCard(\n  props: ICalloutPositionProps,\n  hostElement: HTMLElement,\n  callout: HTMLElement,\n  previousPositions?: ICalloutPositionedInfo,\n): ICalloutPositionedInfo {\n  return _positionCallout(props, hostElement, callout, previousPositions, true);\n}\n// END PRIVATE FUNCTIONS\n\nexport const __positioningTestPackage = {\n  _finalizePositionData,\n  _finalizeBeakPosition,\n  _calculateActualBeakWidthInPixels,\n  _positionElementWithinBounds,\n  _positionBeak,\n  _getPositionData,\n  _getMaxHeightFromTargetRectangle,\n};\n\n/**\n * Used to position an element relative to the given positioning props.\n * If positioning has been completed before, previousPositions can be passed to ensure that the positioning element\n * repositions based on its previous targets rather than starting with directionalhint.\n */\nexport function positionElement(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: IPositionedData,\n): IPositionedData {\n  return _positionElement(props, hostElement, elementToPosition, previousPositions);\n}\n\nexport function positionCallout(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: ICalloutPositionedInfo,\n): ICalloutPositionedInfo {\n  return _positionCallout(props, hostElement, elementToPosition, previousPositions);\n}\n\nexport function positionCard(\n  props: IPositionProps,\n  hostElement: HTMLElement,\n  elementToPosition: HTMLElement,\n  previousPositions?: ICalloutPositionedInfo,\n): ICalloutPositionedInfo {\n  return _positionCard(props, hostElement, elementToPosition, previousPositions);\n}\n\n/**\n * Gets the maximum height that a rectangle can have in order to fit below or above a target.\n * If the directional hint specifies a left or right edge (i.e. leftCenter) it will limit the height to the topBorder\n * of the target given.\n * If no bounds are provided then the window is treated as the bounds.\n */\nexport function getMaxHeight(\n  target: Element | MouseEvent | Point | Rectangle,\n  targetEdge: DirectionalHint,\n  gapSpace: number = 0,\n  bounds?: IRectangle,\n  coverTarget?: boolean,\n): number {\n  const mouseTarget: MouseEvent = target as MouseEvent;\n  const elementTarget: Element = target as Element;\n  const rectOrPointTarget: Point & Rectangle = target as Point & Rectangle;\n  let targetRect: Rectangle;\n  const boundingRectangle = bounds\n    ? _getRectangleFromIRect(bounds)\n    : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);\n\n  // eslint-disable-next-line deprecation/deprecation\n  const left = rectOrPointTarget.left || rectOrPointTarget.x;\n  // eslint-disable-next-line deprecation/deprecation\n  const top = rectOrPointTarget.top || rectOrPointTarget.y;\n  const right = rectOrPointTarget.right || left;\n  const bottom = rectOrPointTarget.bottom || top;\n\n  // eslint-disable-next-line no-extra-boolean-cast -- may not actually be a MouseEvent\n  if (!!mouseTarget.stopPropagation) {\n    targetRect = new Rectangle(mouseTarget.clientX, mouseTarget.clientX, mouseTarget.clientY, mouseTarget.clientY);\n  } else if (left !== undefined && top !== undefined) {\n    targetRect = new Rectangle(left, right, top, bottom);\n  } else {\n    targetRect = _getRectangleFromElement(elementTarget);\n  }\n\n  return _getMaxHeightFromTargetRectangle(targetRect, targetEdge, gapSpace, boundingRectangle, coverTarget);\n}\n\n/**\n * Returns the opposite edge of the given RectangleEdge.\n */\nexport function getOppositeEdge(edge: RectangleEdge): RectangleEdge {\n  return edge * -1;\n}\n\nfunction _getBoundsFromTargetWindow(\n  target: Element | MouseEvent | Point | Rectangle | null,\n  targetWindow: IWindowWithSegments,\n): IRectangle {\n  let segments = undefined;\n  if (targetWindow.getWindowSegments) {\n    segments = targetWindow.getWindowSegments();\n  }\n\n  // Identify if we're dealing with single screen scenarios.\n  if (segments === undefined || segments.length <= 1) {\n    return {\n      top: 0,\n      left: 0,\n      right: targetWindow.innerWidth,\n      bottom: targetWindow.innerHeight,\n      width: targetWindow.innerWidth,\n      height: targetWindow.innerHeight,\n    };\n  }\n\n  // Logic for determining dual screen scenarios.\n  let x: number | undefined = 0;\n  let y: number | undefined = 0;\n\n  // If the target is an Element get coordinates for its center.\n  if (target !== null && !!(target as Element).getBoundingClientRect) {\n    const clientRect = (target as Element).getBoundingClientRect();\n    x = (clientRect.left + clientRect.right) / 2;\n    y = (clientRect.top + clientRect.bottom) / 2;\n  }\n  // If the target is not null get x-axis and y-axis coordinates directly.\n  else if (target !== null) {\n    // eslint-disable-next-line deprecation/deprecation\n    x = (target as Point).left || (target as MouseEvent | Point).x;\n    // eslint-disable-next-line deprecation/deprecation\n    y = (target as Point).top || (target as MouseEvent | Point).y;\n  }\n\n  let bounds = { top: 0, left: 0, right: 0, bottom: 0, width: 0, height: 0 };\n\n  // Define which window segment are the coordinates in and calculate bounds based on that.\n  for (const segment of segments) {\n    if (x && segment.left <= x && segment.right >= x && y && segment.top <= y && segment.bottom >= y) {\n      bounds = {\n        top: segment.top,\n        left: segment.left,\n        right: segment.right,\n        bottom: segment.bottom,\n        width: segment.width,\n        height: segment.height,\n      };\n    }\n  }\n\n  return bounds;\n}\n\nexport function getBoundsFromTargetWindow(\n  target: Element | MouseEvent | Point | Rectangle | null,\n  targetWindow: IWindowWithSegments,\n): IRectangle {\n  return _getBoundsFromTargetWindow(target, targetWindow);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}