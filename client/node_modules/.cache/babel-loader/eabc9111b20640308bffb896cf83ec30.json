{"ast":null,"code":"import { extendComponent } from './extendComponent';\n/**\n * Generates a function to be attached to a React component, which can be called\n * as a replacement to setTimeout. In-flight async calls will be auto canceled if the component\n * is unmounting before the async code is executed, preventing bugs where code\n * accesses things within the component after being unmounted.\n */\nexport var safeSetTimeout = function (component) {\n  var activeTimeouts;\n  return function (cb, duration) {\n    if (!activeTimeouts) {\n      activeTimeouts = new Set();\n      extendComponent(component, {\n        componentWillUnmount: function () {\n          activeTimeouts.forEach(function (id) {\n            return clearTimeout(id);\n          });\n        }\n      });\n    }\n    var timeoutId = setTimeout(function () {\n      activeTimeouts.delete(timeoutId);\n      cb();\n    }, duration);\n    activeTimeouts.add(timeoutId);\n  };\n};","map":{"version":3,"sources":["safeSetTimeout.ts"],"names":[],"mappings":"AACA,SAAS,eAAe,QAAQ,mBAAmB;AAEnD;;;;;AAKG;AACH,OAAO,IAAM,cAAc,GAAG,SAAA,CAAC,SAA0B,EAAA;EACvD,IAAI,cAAiC;EAErC,OAAO,UAAC,EAAY,EAAE,QAAgB,EAAA;IACpC,IAAI,CAAC,cAAc,EAAE;MACnB,cAAc,GAAG,IAAI,GAAG,CAAA,CAAgB;MAExC,eAAe,CAAC,SAAS,EAAE;QACzB,oBAAoB,EAAE,SAAA,CAAA,EAAA;UACpB,cAAc,CAAC,OAAO,CAAC,UAAC,EAAgB,EAAA;YAAK,OAAA,YAAY,CAAC,EAAE,CAAC;UAAhB,CAAgB,CAAC;QAChE;OACD,CAAC;IACH;IAED,IAAM,SAAS,GAAG,UAAU,CAAC,YAAA;MAC3B,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC;MAChC,EAAE,CAAA,CAAE;IACN,CAAC,EAAE,QAAQ,CAAC;IACZ,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC;EAC/B,CAAC;AACH,CAAC","sourcesContent":["import * as React from 'react';\r\nimport { extendComponent } from './extendComponent';\r\n\r\n/**\r\n * Generates a function to be attached to a React component, which can be called\r\n * as a replacement to setTimeout. In-flight async calls will be auto canceled if the component\r\n * is unmounting before the async code is executed, preventing bugs where code\r\n * accesses things within the component after being unmounted.\r\n */\r\nexport const safeSetTimeout = (component: React.Component) => {\r\n  let activeTimeouts: Set<NodeJS.Timer>;\r\n\r\n  return (cb: Function, duration: number) => {\r\n    if (!activeTimeouts) {\r\n      activeTimeouts = new Set<NodeJS.Timer>();\r\n\r\n      extendComponent(component, {\r\n        componentWillUnmount: () => {\r\n          activeTimeouts.forEach((id: NodeJS.Timer) => clearTimeout(id));\r\n        },\r\n      });\r\n    }\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      activeTimeouts.delete(timeoutId);\r\n      cb();\r\n    }, duration);\r\n    activeTimeouts.add(timeoutId);\r\n  };\r\n};\r\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}