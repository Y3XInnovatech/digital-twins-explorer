{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Defines the default token refresh buffer duration.\n */\nexport var TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n/**\n * Provides an {@link AccessTokenCache} implementation which clears\n * the cached {@link AccessToken}'s after the expiresOnTimestamp has\n * passed.\n */\nvar ExpiringAccessTokenCache = /** @class */function () {\n  /**\n   * Constructs an instance of {@link ExpiringAccessTokenCache} with\n   * an optional expiration buffer time.\n   */\n  function ExpiringAccessTokenCache(tokenRefreshBufferMs) {\n    if (tokenRefreshBufferMs === void 0) {\n      tokenRefreshBufferMs = TokenRefreshBufferMs;\n    }\n    this.cachedToken = undefined;\n    this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n  }\n  ExpiringAccessTokenCache.prototype.setCachedToken = function (accessToken) {\n    this.cachedToken = accessToken;\n  };\n  ExpiringAccessTokenCache.prototype.getCachedToken = function () {\n    if (this.cachedToken && Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) {\n      this.cachedToken = undefined;\n    }\n    return this.cachedToken;\n  };\n  return ExpiringAccessTokenCache;\n}();\nexport { ExpiringAccessTokenCache };","map":{"version":3,"sources":["../../../src/credentials/accessTokenCache.ts"],"names":[],"mappings":"AAAA;AACA;AAIA;;AAEG;AACH,OAAO,IAAM,oBAAoB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;AAqBnD;;;;AAIG;AACH,IAAA,wBAAA,GAAA,aAAA,YAAA;EAIE;;;AAGG;EACH,SAAA,wBAAA,CAAY,oBAAmD,EAAA;IAAnD,IAAA,oBAAA,KAAA,KAAA,CAAA,EAAA;MAAA,oBAAA,GAAA,oBAAmD;IAAA;IANvD,IAAA,CAAA,WAAW,GAAiB,SAAS;IAO3C,IAAI,CAAC,oBAAoB,GAAG,oBAAoB;EAClD;EAEA,wBAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,WAAoC,EAAA;IACjD,IAAI,CAAC,WAAW,GAAG,WAAW;EAChC,CAAC;EAED,wBAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACE,IACE,IAAI,CAAC,WAAW,IAChB,IAAI,CAAC,GAAG,CAAA,CAAE,GAAG,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAC7E;MACA,IAAI,CAAC,WAAW,GAAG,SAAS;IAC7B;IAED,OAAO,IAAI,CAAC,WAAW;EACzB,CAAC;EACH,OAAA,wBAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken } from \"@azure/core-auth\";\n\n/**\n * Defines the default token refresh buffer duration.\n */\nexport const TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n\n/**\n * Provides a cache for an AccessToken that was that\n * was returned from a TokenCredential.\n */\nexport interface AccessTokenCache {\n  /**\n   * Sets the cached token.\n   *\n   * @param accessToken - The {@link AccessToken} to be cached or null to\n   *        clear the cached token.\n   */\n  setCachedToken(accessToken: AccessToken | undefined): void;\n\n  /**\n   * Returns the cached {@link AccessToken} or undefined if nothing is cached.\n   */\n  getCachedToken(): AccessToken | undefined;\n}\n\n/**\n * Provides an {@link AccessTokenCache} implementation which clears\n * the cached {@link AccessToken}'s after the expiresOnTimestamp has\n * passed.\n */\nexport class ExpiringAccessTokenCache implements AccessTokenCache {\n  private tokenRefreshBufferMs: number;\n  private cachedToken?: AccessToken = undefined;\n\n  /**\n   * Constructs an instance of {@link ExpiringAccessTokenCache} with\n   * an optional expiration buffer time.\n   */\n  constructor(tokenRefreshBufferMs: number = TokenRefreshBufferMs) {\n    this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n  }\n\n  setCachedToken(accessToken: AccessToken | undefined): void {\n    this.cachedToken = accessToken;\n  }\n\n  getCachedToken(): AccessToken | undefined {\n    if (\n      this.cachedToken &&\n      Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp\n    ) {\n      this.cachedToken = undefined;\n    }\n\n    return this.cachedToken;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}