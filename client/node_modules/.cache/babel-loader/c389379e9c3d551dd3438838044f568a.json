{"ast":null,"code":"/*\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString\n} = require('./types');\nconst {\n  prependBase\n} = require('./url');\nconst JsonLdError = require('./JsonLdError');\nconst ResolvedContext = require('./ResolvedContext');\nconst MAX_CONTEXT_URLS = 10;\nmodule.exports = class ContextResolver {\n  /**\n   * Creates a ContextResolver.\n   *\n   * @param sharedCache a shared LRU cache with `get` and `set` APIs.\n   */\n  constructor({\n    sharedCache\n  }) {\n    this.perOpCache = new Map();\n    this.sharedCache = sharedCache;\n  }\n  async resolve({\n    context,\n    documentLoader,\n    base,\n    cycles = new Set()\n  }) {\n    // process `@context`\n    if (context && _isObject(context) && context['@context']) {\n      context = context['@context'];\n    }\n\n    // context is one or more contexts\n    if (!_isArray(context)) {\n      context = [context];\n    }\n\n    // resolve each context in the array\n    const allResolved = [];\n    for (const ctx of context) {\n      if (_isString(ctx)) {\n        // see if `ctx` has been resolved before...\n        let resolved = this._get(ctx);\n        if (!resolved) {\n          // not resolved yet, resolve\n          resolved = await this._resolveRemoteContext({\n            url: ctx,\n            documentLoader,\n            base,\n            cycles\n          });\n        }\n\n        // add to output and continue\n        if (_isArray(resolved)) {\n          allResolved.push(...resolved);\n        } else {\n          allResolved.push(resolved);\n        }\n        continue;\n      }\n      if (ctx === null) {\n        // handle `null` context, nothing to cache\n        allResolved.push(new ResolvedContext({\n          document: null\n        }));\n        continue;\n      }\n      if (!_isObject(ctx)) {\n        _throwInvalidLocalContext(context);\n      }\n      // context is an object, get/create `ResolvedContext` for it\n      const key = JSON.stringify(ctx);\n      let resolved = this._get(key);\n      if (!resolved) {\n        // create a new static `ResolvedContext` and cache it\n        resolved = new ResolvedContext({\n          document: ctx\n        });\n        this._cacheResolvedContext({\n          key,\n          resolved,\n          tag: 'static'\n        });\n      }\n      allResolved.push(resolved);\n    }\n    return allResolved;\n  }\n  _get(key) {\n    // get key from per operation cache; no `tag` is used with this cache so\n    // any retrieved context will always be the same during a single operation\n    let resolved = this.perOpCache.get(key);\n    if (!resolved) {\n      // see if the shared cache has a `static` entry for this URL\n      const tagMap = this.sharedCache.get(key);\n      if (tagMap) {\n        resolved = tagMap.get('static');\n        if (resolved) {\n          this.perOpCache.set(key, resolved);\n        }\n      }\n    }\n    return resolved;\n  }\n  _cacheResolvedContext({\n    key,\n    resolved,\n    tag\n  }) {\n    this.perOpCache.set(key, resolved);\n    if (tag !== undefined) {\n      let tagMap = this.sharedCache.get(key);\n      if (!tagMap) {\n        tagMap = new Map();\n        this.sharedCache.set(key, tagMap);\n      }\n      tagMap.set(tag, resolved);\n    }\n    return resolved;\n  }\n  async _resolveRemoteContext({\n    url,\n    documentLoader,\n    base,\n    cycles\n  }) {\n    // resolve relative URL and fetch context\n    url = prependBase(base, url);\n    const {\n      context,\n      remoteDoc\n    } = await this._fetchContext({\n      url,\n      documentLoader,\n      cycles\n    });\n\n    // update base according to remote document and resolve any relative URLs\n    base = remoteDoc.documentUrl || url;\n    _resolveContextUrls({\n      context,\n      base\n    });\n\n    // resolve, cache, and return context\n    const resolved = await this.resolve({\n      context,\n      documentLoader,\n      base,\n      cycles\n    });\n    this._cacheResolvedContext({\n      key: url,\n      resolved,\n      tag: remoteDoc.tag\n    });\n    return resolved;\n  }\n  async _fetchContext({\n    url,\n    documentLoader,\n    cycles\n  }) {\n    // check for max context URLs fetched during a resolve operation\n    if (cycles.size > MAX_CONTEXT_URLS) {\n      throw new JsonLdError('Maximum number of @context URLs exceeded.', 'jsonld.ContextUrlError', {\n        code: 'loading remote context failed',\n        max: MAX_CONTEXT_URLS\n      });\n    }\n\n    // check for context URL cycle\n    if (cycles.has(url)) {\n      throw new JsonLdError('Cyclical @context URLs detected.', 'jsonld.ContextUrlError', {\n        code: 'recursive context inclusion',\n        url\n      });\n    }\n\n    // track cycles\n    cycles.add(url);\n    let context;\n    let remoteDoc;\n    try {\n      remoteDoc = await documentLoader(url);\n      context = remoteDoc.document || null;\n      // parse string context as JSON\n      if (_isString(context)) {\n        context = JSON.parse(context);\n      }\n    } catch (e) {\n      throw new JsonLdError('Dereferencing a URL did not result in a valid JSON-LD object. ' + 'Possible causes are an inaccessible URL perhaps due to ' + 'a same-origin policy (ensure the server uses CORS if you are ' + 'using client-side JavaScript), too many redirects, a ' + 'non-JSON response, or more than one HTTP Link Header was ' + 'provided for a remote context.', 'jsonld.InvalidUrl', {\n        code: 'loading remote context failed',\n        url,\n        cause: e\n      });\n    }\n\n    // ensure ctx is an object\n    if (!_isObject(context)) {\n      throw new JsonLdError('Dereferencing a URL did not result in a JSON object. The ' + 'response was valid JSON, but it was not a JSON object.', 'jsonld.InvalidUrl', {\n        code: 'invalid remote context',\n        url\n      });\n    }\n\n    // use empty context if no @context key is present\n    if (!('@context' in context)) {\n      context = {\n        '@context': {}\n      };\n    } else {\n      context = {\n        '@context': context['@context']\n      };\n    }\n\n    // append @context URL to context if given\n    if (remoteDoc.contextUrl) {\n      if (!_isArray(context['@context'])) {\n        context['@context'] = [context['@context']];\n      }\n      context['@context'].push(remoteDoc.contextUrl);\n    }\n    return {\n      context,\n      remoteDoc\n    };\n  }\n};\nfunction _throwInvalidLocalContext(ctx) {\n  throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {\n    code: 'invalid local context',\n    context: ctx\n  });\n}\n\n/**\n * Resolve all relative `@context` URLs in the given context by inline\n * replacing them with absolute URLs.\n *\n * @param context the context.\n * @param base the base IRI to use to resolve relative IRIs.\n */\nfunction _resolveContextUrls({\n  context,\n  base\n}) {\n  if (!context) {\n    return;\n  }\n  const ctx = context['@context'];\n  if (_isString(ctx)) {\n    context['@context'] = prependBase(base, ctx);\n    return;\n  }\n  if (_isArray(ctx)) {\n    for (let i = 0; i < ctx.length; ++i) {\n      const element = ctx[i];\n      if (_isString(element)) {\n        ctx[i] = prependBase(base, element);\n        continue;\n      }\n      if (_isObject(element)) {\n        _resolveContextUrls({\n          context: {\n            '@context': element\n          },\n          base\n        });\n      }\n    }\n    return;\n  }\n  if (!_isObject(ctx)) {\n    // no @context URLs can be found in non-object\n    return;\n  }\n\n  // ctx is an object, resolve any context URLs in terms\n  for (const term in ctx) {\n    _resolveContextUrls({\n      context: ctx[term],\n      base\n    });\n  }\n}","map":{"version":3,"names":["isArray","_isArray","isObject","_isObject","isString","_isString","require","prependBase","JsonLdError","ResolvedContext","MAX_CONTEXT_URLS","module","exports","ContextResolver","constructor","sharedCache","perOpCache","Map","resolve","context","documentLoader","base","cycles","Set","allResolved","ctx","resolved","_get","_resolveRemoteContext","url","push","document","_throwInvalidLocalContext","key","JSON","stringify","_cacheResolvedContext","tag","get","tagMap","set","undefined","remoteDoc","_fetchContext","documentUrl","_resolveContextUrls","size","code","max","has","add","parse","e","cause","contextUrl","i","length","element","term"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/jsonld/lib/ContextResolver.js"],"sourcesContent":["/*\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n} = require('./types');\nconst {prependBase} = require('./url');\nconst JsonLdError = require('./JsonLdError');\nconst ResolvedContext = require('./ResolvedContext');\n\nconst MAX_CONTEXT_URLS = 10;\n\nmodule.exports = class ContextResolver {\n  /**\n   * Creates a ContextResolver.\n   *\n   * @param sharedCache a shared LRU cache with `get` and `set` APIs.\n   */\n  constructor({sharedCache}) {\n    this.perOpCache = new Map();\n    this.sharedCache = sharedCache;\n  }\n\n  async resolve({context, documentLoader, base, cycles = new Set()}) {\n    // process `@context`\n    if(context && _isObject(context) && context['@context']) {\n      context = context['@context'];\n    }\n\n    // context is one or more contexts\n    if(!_isArray(context)) {\n      context = [context];\n    }\n\n    // resolve each context in the array\n    const allResolved = [];\n    for(const ctx of context) {\n      if(_isString(ctx)) {\n        // see if `ctx` has been resolved before...\n        let resolved = this._get(ctx);\n        if(!resolved) {\n          // not resolved yet, resolve\n          resolved = await this._resolveRemoteContext(\n            {url: ctx, documentLoader, base, cycles});\n        }\n\n        // add to output and continue\n        if(_isArray(resolved)) {\n          allResolved.push(...resolved);\n        } else {\n          allResolved.push(resolved);\n        }\n        continue;\n      }\n      if(ctx === null) {\n        // handle `null` context, nothing to cache\n        allResolved.push(new ResolvedContext({document: null}));\n        continue;\n      }\n      if(!_isObject(ctx)) {\n        _throwInvalidLocalContext(context);\n      }\n      // context is an object, get/create `ResolvedContext` for it\n      const key = JSON.stringify(ctx);\n      let resolved = this._get(key);\n      if(!resolved) {\n        // create a new static `ResolvedContext` and cache it\n        resolved = new ResolvedContext({document: ctx});\n        this._cacheResolvedContext({key, resolved, tag: 'static'});\n      }\n      allResolved.push(resolved);\n    }\n\n    return allResolved;\n  }\n\n  _get(key) {\n    // get key from per operation cache; no `tag` is used with this cache so\n    // any retrieved context will always be the same during a single operation\n    let resolved = this.perOpCache.get(key);\n    if(!resolved) {\n      // see if the shared cache has a `static` entry for this URL\n      const tagMap = this.sharedCache.get(key);\n      if(tagMap) {\n        resolved = tagMap.get('static');\n        if(resolved) {\n          this.perOpCache.set(key, resolved);\n        }\n      }\n    }\n    return resolved;\n  }\n\n  _cacheResolvedContext({key, resolved, tag}) {\n    this.perOpCache.set(key, resolved);\n    if(tag !== undefined) {\n      let tagMap = this.sharedCache.get(key);\n      if(!tagMap) {\n        tagMap = new Map();\n        this.sharedCache.set(key, tagMap);\n      }\n      tagMap.set(tag, resolved);\n    }\n    return resolved;\n  }\n\n  async _resolveRemoteContext({url, documentLoader, base, cycles}) {\n    // resolve relative URL and fetch context\n    url = prependBase(base, url);\n    const {context, remoteDoc} = await this._fetchContext(\n      {url, documentLoader, cycles});\n\n    // update base according to remote document and resolve any relative URLs\n    base = remoteDoc.documentUrl || url;\n    _resolveContextUrls({context, base});\n\n    // resolve, cache, and return context\n    const resolved = await this.resolve(\n      {context, documentLoader, base, cycles});\n    this._cacheResolvedContext({key: url, resolved, tag: remoteDoc.tag});\n    return resolved;\n  }\n\n  async _fetchContext({url, documentLoader, cycles}) {\n    // check for max context URLs fetched during a resolve operation\n    if(cycles.size > MAX_CONTEXT_URLS) {\n      throw new JsonLdError(\n        'Maximum number of @context URLs exceeded.',\n        'jsonld.ContextUrlError',\n        {code: 'loading remote context failed', max: MAX_CONTEXT_URLS});\n    }\n\n    // check for context URL cycle\n    if(cycles.has(url)) {\n      throw new JsonLdError(\n        'Cyclical @context URLs detected.',\n        'jsonld.ContextUrlError',\n        {code: 'recursive context inclusion', url});\n    }\n\n    // track cycles\n    cycles.add(url);\n\n    let context;\n    let remoteDoc;\n\n    try {\n      remoteDoc = await documentLoader(url);\n      context = remoteDoc.document || null;\n      // parse string context as JSON\n      if(_isString(context)) {\n        context = JSON.parse(context);\n      }\n    } catch(e) {\n      throw new JsonLdError(\n        'Dereferencing a URL did not result in a valid JSON-LD object. ' +\n        'Possible causes are an inaccessible URL perhaps due to ' +\n        'a same-origin policy (ensure the server uses CORS if you are ' +\n        'using client-side JavaScript), too many redirects, a ' +\n        'non-JSON response, or more than one HTTP Link Header was ' +\n        'provided for a remote context.',\n        'jsonld.InvalidUrl',\n        {code: 'loading remote context failed', url, cause: e});\n    }\n\n    // ensure ctx is an object\n    if(!_isObject(context)) {\n      throw new JsonLdError(\n        'Dereferencing a URL did not result in a JSON object. The ' +\n        'response was valid JSON, but it was not a JSON object.',\n        'jsonld.InvalidUrl', {code: 'invalid remote context', url});\n    }\n\n    // use empty context if no @context key is present\n    if(!('@context' in context)) {\n      context = {'@context': {}};\n    } else {\n      context = {'@context': context['@context']};\n    }\n\n    // append @context URL to context if given\n    if(remoteDoc.contextUrl) {\n      if(!_isArray(context['@context'])) {\n        context['@context'] = [context['@context']];\n      }\n      context['@context'].push(remoteDoc.contextUrl);\n    }\n\n    return {context, remoteDoc};\n  }\n};\n\nfunction _throwInvalidLocalContext(ctx) {\n  throw new JsonLdError(\n    'Invalid JSON-LD syntax; @context must be an object.',\n    'jsonld.SyntaxError', {\n      code: 'invalid local context', context: ctx\n    });\n}\n\n/**\n * Resolve all relative `@context` URLs in the given context by inline\n * replacing them with absolute URLs.\n *\n * @param context the context.\n * @param base the base IRI to use to resolve relative IRIs.\n */\nfunction _resolveContextUrls({context, base}) {\n  if(!context) {\n    return;\n  }\n\n  const ctx = context['@context'];\n\n  if(_isString(ctx)) {\n    context['@context'] = prependBase(base, ctx);\n    return;\n  }\n\n  if(_isArray(ctx)) {\n    for(let i = 0; i < ctx.length; ++i) {\n      const element = ctx[i];\n      if(_isString(element)) {\n        ctx[i] = prependBase(base, element);\n        continue;\n      }\n      if(_isObject(element)) {\n        _resolveContextUrls({context: {'@context': element}, base});\n      }\n    }\n    return;\n  }\n\n  if(!_isObject(ctx)) {\n    // no @context URLs can be found in non-object\n    return;\n  }\n\n  // ctx is an object, resolve any context URLs in terms\n  for(const term in ctx) {\n    _resolveContextUrls({context: ctx[term], base});\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}