{"ast":null,"code":"import * as React from 'react';\nimport { css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nvar getCellText = function (item, column) {\n  var value = item && column && column.fieldName ? item[column.fieldName] : '';\n  if (value === null || value === undefined) {\n    value = '';\n  }\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n  return value;\n};\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport var DetailsRowFields = function (props) {\n  var columns = props.columns,\n    columnStartIndex = props.columnStartIndex,\n    rowClassNames = props.rowClassNames,\n    _a = props.cellStyleProps,\n    cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a,\n    item = props.item,\n    itemIndex = props.itemIndex,\n    onRenderItemColumn = props.onRenderItemColumn,\n    getCellValueKey = props.getCellValueKey,\n    cellsByColumn = props.cellsByColumn,\n    enableUpdateAnimations = props.enableUpdateAnimations,\n    rowHeaderId = props.rowHeaderId;\n  var cellValueKeysRef = React.useRef();\n  var cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n  return React.createElement(\"div\", {\n    className: rowClassNames.fields,\n    \"data-automationid\": \"DetailsRowFields\",\n    role: \"presentation\"\n  }, columns.map(function (column, columnIndex) {\n    var width = typeof column.calculatedWidth === 'undefined' ? 'auto' : column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n    var _a = column.onRender,\n      onRender = _a === void 0 ? onRenderItemColumn : _a,\n      _b = column.getValueKey,\n      getValueKey = _b === void 0 ? getCellValueKey : _b;\n    var cellContentsRender = cellsByColumn && column.key in cellsByColumn ? cellsByColumn[column.key] : onRender ? onRender(item, itemIndex, column) : getCellText(item, column);\n    var previousValueKey = cellValueKeys[column.key];\n    var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n    var showAnimation = false;\n    if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n      showAnimation = true;\n    }\n    cellValueKeys[column.key] = cellValueKey;\n    // generate a key that auto-dirties when content changes, to force the container to re-render,\n    // to trigger animation\n    var key = \"\" + column.key + (cellValueKey !== undefined ? \"-\" + cellValueKey : '');\n    return React.createElement(\"div\", {\n      key: key,\n      id: column.isRowHeader ? rowHeaderId : undefined,\n      role: column.isRowHeader ? 'rowheader' : 'gridcell',\n      \"aria-readonly\": true,\n      \"aria-colindex\": columnIndex + columnStartIndex + 1,\n      className: css(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, showAnimation && rowClassNames.cellAnimation),\n      style: {\n        width: width\n      },\n      \"data-automationid\": \"DetailsRowCell\",\n      \"data-automation-key\": column.key\n    }, cellContentsRender);\n  }));\n};","map":{"version":3,"sources":["components/DetailsList/DetailsRowFields.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IColumn } from './DetailsList.types';\nimport { css } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    columnStartIndex,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    onRenderItemColumn,\n    getCellValueKey,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map((column, columnIndex) => {\n        const width: string | number =\n          typeof column.calculatedWidth === 'undefined'\n            ? 'auto'\n            : column.calculatedWidth +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n        const { onRender = onRenderItemColumn, getValueKey = getCellValueKey } = column;\n        const cellContentsRender =\n          cellsByColumn && column.key in cellsByColumn\n            ? cellsByColumn[column.key]\n            : onRender\n            ? onRender(item, itemIndex, column)\n            : getCellText(item, column);\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        // generate a key that auto-dirties when content changes, to force the container to re-render,\n        // to trigger animation\n        const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n        return (\n          <div\n            key={key}\n            id={column.isRowHeader ? rowHeaderId : undefined}\n            role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n            aria-readonly\n            aria-colindex={columnIndex + columnStartIndex + 1}\n            className={css(\n              column.className,\n              column.isMultiline && rowClassNames.isMultiline,\n              column.isRowHeader && rowClassNames.isRowHeader,\n              rowClassNames.cell,\n              column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n              showAnimation && rowClassNames.cellAnimation,\n            )}\n            style={{ width }}\n            data-automationid=\"DetailsRowCell\"\n            data-automation-key={column.key}\n          >\n            {cellContentsRender}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}