{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties, Async, initializeComponentRef } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nvar TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\nvar ShimmerBase = /** @class */function (_super) {\n  __extends(ShimmerBase, _super);\n  function ShimmerBase(props) {\n    var _this = _super.call(this, props) || this;\n    initializeComponentRef(_this);\n    _this.state = {\n      contentLoaded: props.isDataLoaded\n    };\n    _this._async = new Async(_this);\n    return _this;\n  }\n  ShimmerBase.prototype.componentDidUpdate = function (prevProps) {\n    var _this = this;\n    var isDataLoaded = this.props.isDataLoaded;\n    if (isDataLoaded !== prevProps.isDataLoaded) {\n      this._async.clearTimeout(this._lastTimeoutId);\n      // Removing the shimmerWrapper div from the DOM only after the fade out animation completed.\n      if (isDataLoaded) {\n        this._lastTimeoutId = this._async.setTimeout(function () {\n          _this.setState({\n            contentLoaded: isDataLoaded\n          });\n        }, TRANSITION_ANIMATION_INTERVAL);\n      } else {\n        this.setState({\n          contentLoaded: isDataLoaded\n        });\n      }\n    }\n  };\n  ShimmerBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n  ShimmerBase.prototype.render = function () {\n    var _a = this.props,\n      styles = _a.styles,\n      shimmerElements = _a.shimmerElements,\n      children = _a.children,\n      isDataLoaded = _a.isDataLoaded,\n      width = _a.width,\n      className = _a.className,\n      customElementsGroup = _a.customElementsGroup,\n      theme = _a.theme,\n      ariaLabel = _a.ariaLabel,\n      shimmerColors = _a.shimmerColors;\n    var contentLoaded = this.state.contentLoaded;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isDataLoaded: isDataLoaded,\n      className: className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave\n    });\n    var divProps = getNativeProps(this.props, divProperties);\n    return React.createElement(\"div\", __assign({}, divProps, {\n      className: this._classNames.root\n    }), !contentLoaded && React.createElement(\"div\", {\n      style: {\n        width: width ? width : '100%'\n      },\n      className: this._classNames.shimmerWrapper\n    }, React.createElement(\"div\", {\n      className: this._classNames.shimmerGradient\n    }), customElementsGroup ? customElementsGroup : React.createElement(ShimmerElementsGroup, {\n      shimmerElements: shimmerElements,\n      backgroundColor: shimmerColors && shimmerColors.background\n    })), children && React.createElement(\"div\", {\n      className: this._classNames.dataWrapper\n    }, children), ariaLabel && !isDataLoaded && React.createElement(\"div\", {\n      role: \"status\",\n      \"aria-live\": \"polite\"\n    }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n      className: this._classNames.screenReaderText\n    }, ariaLabel))));\n  };\n  ShimmerBase.defaultProps = {\n    isDataLoaded: false\n  };\n  return ShimmerBase;\n}(React.Component);\nexport { ShimmerBase };","map":{"version":3,"sources":["components/Shimmer/Shimmer.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  DelayedRender,\n  getNativeProps,\n  divProperties,\n  Async,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\n\nexport interface IShimmerState {\n  /**\n   * Flag for knowing when to remove the shimmerWrapper from the DOM.\n   */\n  contentLoaded?: boolean;\n}\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport class ShimmerBase extends React.Component<IShimmerProps, IShimmerState> {\n  public static defaultProps: IShimmerProps = {\n    isDataLoaded: false,\n  };\n\n  private _classNames: { [key in keyof IShimmerStyles]: string };\n  private _lastTimeoutId: number;\n  private _async: Async;\n\n  constructor(props: IShimmerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      contentLoaded: props.isDataLoaded,\n    };\n\n    this._async = new Async(this);\n  }\n\n  public componentDidUpdate(prevProps: IShimmerProps): void {\n    const { isDataLoaded } = this.props;\n\n    if (isDataLoaded !== prevProps.isDataLoaded) {\n      this._async.clearTimeout(this._lastTimeoutId);\n\n      // Removing the shimmerWrapper div from the DOM only after the fade out animation completed.\n      if (isDataLoaded) {\n        this._lastTimeoutId = this._async.setTimeout(() => {\n          this.setState({\n            contentLoaded: isDataLoaded,\n          });\n        }, TRANSITION_ANIMATION_INTERVAL);\n      } else {\n        this.setState({\n          contentLoaded: isDataLoaded,\n        });\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      styles,\n      shimmerElements,\n      children,\n      isDataLoaded,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel,\n      shimmerColors,\n    } = this.props;\n\n    const { contentLoaded } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n    });\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    return (\n      <div {...divProps} className={this._classNames.root}>\n        {!contentLoaded && (\n          <div style={{ width: width ? width : '100%' }} className={this._classNames.shimmerWrapper}>\n            <div className={this._classNames.shimmerGradient} />\n            {customElementsGroup ? (\n              customElementsGroup\n            ) : (\n              <ShimmerElementsGroup\n                shimmerElements={shimmerElements}\n                backgroundColor={shimmerColors && shimmerColors.background}\n              />\n            )}\n          </div>\n        )}\n        {children && <div className={this._classNames.dataWrapper}>{children}</div>}\n        {ariaLabel && !isDataLoaded && (\n          <div role=\"status\" aria-live=\"polite\">\n            <DelayedRender>\n              <div className={this._classNames.screenReaderText}>{ariaLabel}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}