{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { __read, __spread, __values } from \"tslib\";\nimport { log } from \"./log\";\nvar debugEnvVariable = typeof process !== \"undefined\" && process.env && process.env.DEBUG || undefined;\nvar enabledString;\nvar enabledNamespaces = [];\nvar skippedNamespaces = [];\nvar debuggers = [];\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\nfunction enable(namespaces) {\n  var e_1, _a, e_2, _b;\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  var wildcard = /\\*/g;\n  var namespaceList = namespaces.split(\",\").map(function (ns) {\n    return ns.trim().replace(wildcard, \".*?\");\n  });\n  try {\n    for (var namespaceList_1 = __values(namespaceList), namespaceList_1_1 = namespaceList_1.next(); !namespaceList_1_1.done; namespaceList_1_1 = namespaceList_1.next()) {\n      var ns = namespaceList_1_1.value;\n      if (ns.startsWith(\"-\")) {\n        skippedNamespaces.push(new RegExp(\"^\" + ns.substr(1) + \"$\"));\n      } else {\n        enabledNamespaces.push(new RegExp(\"^\" + ns + \"$\"));\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (namespaceList_1_1 && !namespaceList_1_1.done && (_a = namespaceList_1.return)) _a.call(namespaceList_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  try {\n    for (var debuggers_1 = __values(debuggers), debuggers_1_1 = debuggers_1.next(); !debuggers_1_1.done; debuggers_1_1 = debuggers_1.next()) {\n      var instance = debuggers_1_1.value;\n      instance.enabled = enabled(instance.namespace);\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (debuggers_1_1 && !debuggers_1_1.done && (_b = debuggers_1.return)) _b.call(debuggers_1);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\nfunction enabled(namespace) {\n  var e_3, _a, e_4, _b;\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n  try {\n    for (var skippedNamespaces_1 = __values(skippedNamespaces), skippedNamespaces_1_1 = skippedNamespaces_1.next(); !skippedNamespaces_1_1.done; skippedNamespaces_1_1 = skippedNamespaces_1.next()) {\n      var skipped = skippedNamespaces_1_1.value;\n      if (skipped.test(namespace)) {\n        return false;\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (skippedNamespaces_1_1 && !skippedNamespaces_1_1.done && (_a = skippedNamespaces_1.return)) _a.call(skippedNamespaces_1);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n  try {\n    for (var enabledNamespaces_1 = __values(enabledNamespaces), enabledNamespaces_1_1 = enabledNamespaces_1.next(); !enabledNamespaces_1_1.done; enabledNamespaces_1_1 = enabledNamespaces_1.next()) {\n      var enabled_1 = enabledNamespaces_1_1.value;\n      if (enabled_1.test(namespace)) {\n        return true;\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (enabledNamespaces_1_1 && !enabledNamespaces_1_1.done && (_b = enabledNamespaces_1.return)) _b.call(enabledNamespaces_1);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n  return false;\n}\nfunction disable() {\n  var result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\nfunction createDebugger(namespace) {\n  function debug() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = namespace + \" \" + args[0];\n    }\n    newDebugger.log.apply(newDebugger, __spread(args));\n  }\n  var newDebugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy: destroy,\n    log: debugObj.log,\n    namespace: namespace,\n    extend: extend\n  });\n  debuggers.push(newDebugger);\n  return newDebugger;\n}\nfunction destroy() {\n  var index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\nfunction extend(namespace) {\n  var newDebugger = createDebugger(this.namespace + \":\" + namespace);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\nvar debugObj = Object.assign(function (namespace) {\n  return createDebugger(namespace);\n}, {\n  enable: enable,\n  enabled: enabled,\n  disable: disable,\n  log: log\n});\nexport default debugObj;","map":{"version":3,"sources":["../../src/debug.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { __read, __spread, __values } from \"tslib\";\nimport { log } from \"./log\";\nvar debugEnvVariable = (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\nvar enabledString;\nvar enabledNamespaces = [];\nvar skippedNamespaces = [];\nvar debuggers = [];\nif (debugEnvVariable) {\n    enable(debugEnvVariable);\n}\nfunction enable(namespaces) {\n    var e_1, _a, e_2, _b;\n    enabledString = namespaces;\n    enabledNamespaces = [];\n    skippedNamespaces = [];\n    var wildcard = /\\*/g;\n    var namespaceList = namespaces.split(\",\").map(function (ns) { return ns.trim().replace(wildcard, \".*?\"); });\n    try {\n        for (var namespaceList_1 = __values(namespaceList), namespaceList_1_1 = namespaceList_1.next(); !namespaceList_1_1.done; namespaceList_1_1 = namespaceList_1.next()) {\n            var ns = namespaceList_1_1.value;\n            if (ns.startsWith(\"-\")) {\n                skippedNamespaces.push(new RegExp(\"^\" + ns.substr(1) + \"$\"));\n            }\n            else {\n                enabledNamespaces.push(new RegExp(\"^\" + ns + \"$\"));\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (namespaceList_1_1 && !namespaceList_1_1.done && (_a = namespaceList_1.return)) _a.call(namespaceList_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    try {\n        for (var debuggers_1 = __values(debuggers), debuggers_1_1 = debuggers_1.next(); !debuggers_1_1.done; debuggers_1_1 = debuggers_1.next()) {\n            var instance = debuggers_1_1.value;\n            instance.enabled = enabled(instance.namespace);\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (debuggers_1_1 && !debuggers_1_1.done && (_b = debuggers_1.return)) _b.call(debuggers_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n}\nfunction enabled(namespace) {\n    var e_3, _a, e_4, _b;\n    if (namespace.endsWith(\"*\")) {\n        return true;\n    }\n    try {\n        for (var skippedNamespaces_1 = __values(skippedNamespaces), skippedNamespaces_1_1 = skippedNamespaces_1.next(); !skippedNamespaces_1_1.done; skippedNamespaces_1_1 = skippedNamespaces_1.next()) {\n            var skipped = skippedNamespaces_1_1.value;\n            if (skipped.test(namespace)) {\n                return false;\n            }\n        }\n    }\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\n    finally {\n        try {\n            if (skippedNamespaces_1_1 && !skippedNamespaces_1_1.done && (_a = skippedNamespaces_1.return)) _a.call(skippedNamespaces_1);\n        }\n        finally { if (e_3) throw e_3.error; }\n    }\n    try {\n        for (var enabledNamespaces_1 = __values(enabledNamespaces), enabledNamespaces_1_1 = enabledNamespaces_1.next(); !enabledNamespaces_1_1.done; enabledNamespaces_1_1 = enabledNamespaces_1.next()) {\n            var enabled_1 = enabledNamespaces_1_1.value;\n            if (enabled_1.test(namespace)) {\n                return true;\n            }\n        }\n    }\n    catch (e_4_1) { e_4 = { error: e_4_1 }; }\n    finally {\n        try {\n            if (enabledNamespaces_1_1 && !enabledNamespaces_1_1.done && (_b = enabledNamespaces_1.return)) _b.call(enabledNamespaces_1);\n        }\n        finally { if (e_4) throw e_4.error; }\n    }\n    return false;\n}\nfunction disable() {\n    var result = enabledString || \"\";\n    enable(\"\");\n    return result;\n}\nfunction createDebugger(namespace) {\n    function debug() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!newDebugger.enabled) {\n            return;\n        }\n        if (args.length > 0) {\n            args[0] = namespace + \" \" + args[0];\n        }\n        newDebugger.log.apply(newDebugger, __spread(args));\n    }\n    var newDebugger = Object.assign(debug, {\n        enabled: enabled(namespace),\n        destroy: destroy,\n        log: debugObj.log,\n        namespace: namespace,\n        extend: extend\n    });\n    debuggers.push(newDebugger);\n    return newDebugger;\n}\nfunction destroy() {\n    var index = debuggers.indexOf(this);\n    if (index >= 0) {\n        debuggers.splice(index, 1);\n        return true;\n    }\n    return false;\n}\nfunction extend(namespace) {\n    var newDebugger = createDebugger(this.namespace + \":\" + namespace);\n    newDebugger.log = this.log;\n    return newDebugger;\n}\nvar debugObj = Object.assign(function (namespace) {\n    return createDebugger(namespace);\n}, {\n    enable: enable,\n    enabled: enabled,\n    disable: disable,\n    log: log\n});\nexport default debugObj;\n//# sourceMappingURL=debug.js.map"]},"metadata":{},"sourceType":"module"}