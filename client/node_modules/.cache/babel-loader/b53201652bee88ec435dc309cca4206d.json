{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { _rgbaOrHexString } from './_rgbaOrHexString';\nimport { MAX_COLOR_ALPHA } from './consts';\n/**\n * Gets a color with the given transparency value and the same other components as `color`.\n * Does not modify the original color.\n */\nexport function updateT(color, t) {\n  var a = MAX_COLOR_ALPHA - t;\n  return __assign(__assign({}, color), {\n    t: t,\n    a: a,\n    str: _rgbaOrHexString(color.r, color.g, color.b, a, color.hex)\n  });\n}","map":{"version":3,"sources":["utilities/color/updateT.ts"],"names":[],"mappings":";AACA,SAAS,gBAAgB,QAAQ,oBAAoB;AACrD,SAAS,eAAe,QAAQ,UAAU;AAE1C;;;AAGG;AACH,OAAM,SAAU,OAAO,CAAC,KAAa,EAAE,CAAS,EAAA;EAC9C,IAAM,CAAC,GAAG,eAAe,GAAG,CAAC;EAC7B,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,EAAA;IACR,CAAC,EAAA,CAAA;IACD,CAAC,EAAA,CAAA;IACD,GAAG,EAAE,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,GAAG;EAAC,CAAA,CAAA;AAElE","sourcesContent":["import { IColor } from './interfaces';\nimport { _rgbaOrHexString } from './_rgbaOrHexString';\nimport { MAX_COLOR_ALPHA } from './consts';\n\n/**\n * Gets a color with the given transparency value and the same other components as `color`.\n * Does not modify the original color.\n */\nexport function updateT(color: IColor, t: number): IColor {\n  const a = MAX_COLOR_ALPHA - t;\n  return {\n    ...color,\n    t,\n    a,\n    str: _rgbaOrHexString(color.r, color.g, color.b, a, color.hex),\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}