{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { EventGroup, getId } from '../../Utilities';\nimport { KeytipEvents } from '../../utilities/keytips/KeytipConstants';\n/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\nvar KeytipManager = /** @class */function () {\n  function KeytipManager() {\n    this.keytips = {};\n    this.persistedKeytips = {};\n    this.sequenceMapping = {};\n    // This is (and should be) updated and kept in sync\n    // with the inKeytipMode in KeytipLayer.\n    this.inKeytipMode = false;\n    // Boolean that gets checked before entering keytip mode by the KeytipLayer\n    // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\n    this.shouldEnterKeytipMode = true;\n    // Boolean to indicate whether to delay firing an event to update subscribers of\n    // keytip data changed.\n    this.delayUpdatingKeytipChange = false;\n  }\n  /**\n   * Static function to get singleton KeytipManager instance\n   *\n   * @returns Singleton KeytipManager instance\n   */\n  KeytipManager.getInstance = function () {\n    return this._instance;\n  };\n  /**\n   * Initialization code to set set parameters to define\n   * how the KeytipManager handles keytip data.\n   *\n   * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers\n   * of keytip changes\n   */\n  KeytipManager.prototype.init = function (delayUpdatingKeytipChange) {\n    this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;\n  };\n  /**\n   * Registers a keytip\n   *\n   * @param keytipProps - Keytip to register\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   * @returns Unique ID for this keytip\n   */\n  KeytipManager.prototype.register = function (keytipProps, persisted) {\n    if (persisted === void 0) {\n      persisted = false;\n    }\n    var props = keytipProps;\n    if (!persisted) {\n      // Add the overflowSetSequence if necessary\n      props = this.addParentOverflow(keytipProps);\n      this.sequenceMapping[props.keySequences.toString()] = props;\n    }\n    // Create a unique keytip\n    var uniqueKeytip = this._getUniqueKtp(props);\n    // Add to dictionary\n    persisted ? this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip : this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip;\n    // We only want to add something new if we are currently showing keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      var event_1 = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\n      EventGroup.raise(this, event_1, {\n        keytip: props,\n        uniqueID: uniqueKeytip.uniqueID\n      });\n    }\n    return uniqueKeytip.uniqueID;\n  };\n  /**\n   * Update a keytip\n   *\n   * @param keytipProps - Keytip to update\n   * @param uniqueID - Unique ID of this keytip\n   */\n  KeytipManager.prototype.update = function (keytipProps, uniqueID) {\n    var newKeytipProps = this.addParentOverflow(keytipProps);\n    var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\n    var oldKeyTip = this.keytips[uniqueID];\n    if (oldKeyTip) {\n      // Update everything except 'visible'\n      uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;\n      // Update keytip in this.keytips\n      this.keytips[uniqueID] = uniqueKeytip;\n      // Update the sequence to be up to date\n      delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];\n      this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;\n      // Raise event only if we are currently in keytip mode\n      if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n        EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\n          keytip: uniqueKeytip.keytip,\n          uniqueID: uniqueKeytip.uniqueID\n        });\n      }\n    }\n  };\n  /**\n   * Unregisters a keytip\n   *\n   * @param keytipToRemove - IKeytipProps of the keytip to remove\n   * @param uniqueID - Unique ID of this keytip\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   */\n  KeytipManager.prototype.unregister = function (keytipToRemove, uniqueID, persisted) {\n    if (persisted === void 0) {\n      persisted = false;\n    }\n    persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];\n    !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];\n    var event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;\n    // Update keytips only if we're in keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      EventGroup.raise(this, event, {\n        keytip: keytipToRemove,\n        uniqueID: uniqueID\n      });\n    }\n  };\n  /**\n   * Manual call to enter keytip mode\n   */\n  KeytipManager.prototype.enterKeytipMode = function () {\n    EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\n  };\n  /**\n   * Manual call to exit keytip mode\n   */\n  KeytipManager.prototype.exitKeytipMode = function () {\n    EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\n  };\n  /**\n   * Gets all IKeytipProps from this.keytips\n   *\n   * @returns All keytips stored in the manager\n   */\n  KeytipManager.prototype.getKeytips = function () {\n    var _this = this;\n    return Object.keys(this.keytips).map(function (key) {\n      return _this.keytips[key].keytip;\n    });\n  };\n  /**\n   * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n   *\n   * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n   * @returns - Modified keytip props, if needed to be modified\n   */\n  KeytipManager.prototype.addParentOverflow = function (keytipProps) {\n    var fullSequence = __spreadArrays(keytipProps.keySequences);\n    fullSequence.pop();\n    if (fullSequence.length !== 0) {\n      var parentKeytip = this.sequenceMapping[fullSequence.toString()];\n      if (parentKeytip && parentKeytip.overflowSetSequence) {\n        return __assign(__assign({}, keytipProps), {\n          overflowSetSequence: parentKeytip.overflowSetSequence\n        });\n      }\n    }\n    return keytipProps;\n  };\n  /**\n   * Public function to bind for overflow items that have a submenu\n   */\n  KeytipManager.prototype.menuExecute = function (overflowButtonSequences, keytipSequences) {\n    EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\n      overflowButtonSequences: overflowButtonSequences,\n      keytipSequences: keytipSequences\n    });\n  };\n  /**\n   * Creates an IUniqueKeytip object\n   *\n   * @param keytipProps - IKeytipProps\n   * @param uniqueID - Unique ID, will default to the next unique ID if not passed\n   * @returns IUniqueKeytip object\n   */\n  KeytipManager.prototype._getUniqueKtp = function (keytipProps, uniqueID) {\n    if (uniqueID === void 0) {\n      uniqueID = getId();\n    }\n    return {\n      keytip: __assign({}, keytipProps),\n      uniqueID: uniqueID\n    };\n  };\n  KeytipManager._instance = new KeytipManager();\n  return KeytipManager;\n}();\nexport { KeytipManager };","map":{"version":3,"sources":["utilities/keytips/KeytipManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { IKeytipProps } from '../../Keytip';\nimport { EventGroup, getId } from '../../Utilities';\nimport { KeytipEvents } from '../../utilities/keytips/KeytipConstants';\n\nexport interface IUniqueKeytip {\n  uniqueID: string;\n  keytip: IKeytipProps;\n}\n\n/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\nexport class KeytipManager {\n  private static _instance: KeytipManager = new KeytipManager();\n\n  public keytips: { [key: string]: IUniqueKeytip } = {};\n  public persistedKeytips: { [key: string]: IUniqueKeytip } = {};\n  public sequenceMapping: { [key: string]: IKeytipProps } = {};\n\n  // This is (and should be) updated and kept in sync\n  // with the inKeytipMode in KeytipLayer.\n  public inKeytipMode = false;\n\n  // Boolean that gets checked before entering keytip mode by the KeytipLayer\n  // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\n  public shouldEnterKeytipMode = true;\n\n  // Boolean to indicate whether to delay firing an event to update subscribers of\n  // keytip data changed.\n  public delayUpdatingKeytipChange = false;\n\n  /**\n   * Static function to get singleton KeytipManager instance\n   *\n   * @returns Singleton KeytipManager instance\n   */\n  public static getInstance(): KeytipManager {\n    return this._instance;\n  }\n\n  /**\n   * Initialization code to set set parameters to define\n   * how the KeytipManager handles keytip data.\n   *\n   * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers\n   * of keytip changes\n   */\n  public init(delayUpdatingKeytipChange: boolean) {\n    this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;\n  }\n\n  /**\n   * Registers a keytip\n   *\n   * @param keytipProps - Keytip to register\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   * @returns Unique ID for this keytip\n   */\n  public register(keytipProps: IKeytipProps, persisted: boolean = false): string {\n    let props: IKeytipProps = keytipProps;\n    if (!persisted) {\n      // Add the overflowSetSequence if necessary\n      props = this.addParentOverflow(keytipProps);\n      this.sequenceMapping[props.keySequences.toString()] = props;\n    }\n    // Create a unique keytip\n    const uniqueKeytip: IUniqueKeytip = this._getUniqueKtp(props);\n    // Add to dictionary\n    persisted\n      ? (this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip)\n      : (this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip);\n\n    // We only want to add something new if we are currently showing keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\n      EventGroup.raise(this, event, {\n        keytip: props,\n        uniqueID: uniqueKeytip.uniqueID,\n      });\n    }\n\n    return uniqueKeytip.uniqueID;\n  }\n\n  /**\n   * Update a keytip\n   *\n   * @param keytipProps - Keytip to update\n   * @param uniqueID - Unique ID of this keytip\n   */\n  public update(keytipProps: IKeytipProps, uniqueID: string): void {\n    const newKeytipProps = this.addParentOverflow(keytipProps);\n    const uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\n    const oldKeyTip = this.keytips[uniqueID];\n    if (oldKeyTip) {\n      // Update everything except 'visible'\n      uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;\n      // Update keytip in this.keytips\n      this.keytips[uniqueID] = uniqueKeytip;\n\n      // Update the sequence to be up to date\n      delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];\n      this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;\n\n      // Raise event only if we are currently in keytip mode\n      if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n        EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\n          keytip: uniqueKeytip.keytip,\n          uniqueID: uniqueKeytip.uniqueID,\n        });\n      }\n    }\n  }\n\n  /**\n   * Unregisters a keytip\n   *\n   * @param keytipToRemove - IKeytipProps of the keytip to remove\n   * @param uniqueID - Unique ID of this keytip\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   */\n  public unregister(keytipToRemove: IKeytipProps, uniqueID: string, persisted: boolean = false): void {\n    persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];\n    !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];\n\n    const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;\n    // Update keytips only if we're in keytip mode\n    if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n      EventGroup.raise(this, event, {\n        keytip: keytipToRemove,\n        uniqueID: uniqueID,\n      });\n    }\n  }\n\n  /**\n   * Manual call to enter keytip mode\n   */\n  public enterKeytipMode(): void {\n    EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\n  }\n\n  /**\n   * Manual call to exit keytip mode\n   */\n  public exitKeytipMode(): void {\n    EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\n  }\n\n  /**\n   * Gets all IKeytipProps from this.keytips\n   *\n   * @returns All keytips stored in the manager\n   */\n  public getKeytips(): IKeytipProps[] {\n    return Object.keys(this.keytips).map(key => this.keytips[key].keytip);\n  }\n\n  /**\n   * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n   *\n   * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n   * @returns - Modified keytip props, if needed to be modified\n   */\n  public addParentOverflow(keytipProps: IKeytipProps): IKeytipProps {\n    const fullSequence = [...keytipProps.keySequences];\n    fullSequence.pop();\n    if (fullSequence.length !== 0) {\n      const parentKeytip = this.sequenceMapping[fullSequence.toString()];\n      if (parentKeytip && parentKeytip.overflowSetSequence) {\n        return {\n          ...keytipProps,\n          overflowSetSequence: parentKeytip.overflowSetSequence,\n        };\n      }\n    }\n    return keytipProps;\n  }\n\n  /**\n   * Public function to bind for overflow items that have a submenu\n   */\n  public menuExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\n    EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\n      overflowButtonSequences,\n      keytipSequences,\n    });\n  }\n\n  /**\n   * Creates an IUniqueKeytip object\n   *\n   * @param keytipProps - IKeytipProps\n   * @param uniqueID - Unique ID, will default to the next unique ID if not passed\n   * @returns IUniqueKeytip object\n   */\n  private _getUniqueKtp(keytipProps: IKeytipProps, uniqueID: string = getId()): IUniqueKeytip {\n    return { keytip: { ...keytipProps }, uniqueID };\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}