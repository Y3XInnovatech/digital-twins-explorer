{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, nullRender, getNativeProps, divProperties, composeComponentAs, initializeComponentRef } from '../../Utilities';\nimport { OverflowSet } from '../../OverflowSet';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { CommandBarButton } from '../../Button';\nimport { TooltipHost } from '../../Tooltip';\nimport { getCommandButtonStyles } from './CommandBar.styles';\nvar getClassNames = classNamesFunction();\nvar CommandBarBase = /** @class */function (_super) {\n  __extends(CommandBarBase, _super);\n  function CommandBarBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._overflowSet = React.createRef();\n    _this._resizeGroup = React.createRef();\n    _this._onRenderData = function (data) {\n      return React.createElement(FocusZone, {\n        className: css(_this._classNames.root),\n        direction: FocusZoneDirection.horizontal,\n        role: 'menubar',\n        \"aria-label\": _this.props.ariaLabel\n      }, React.createElement(OverflowSet, {\n        role: \"none\",\n        componentRef: _this._overflowSet,\n        className: css(_this._classNames.primarySet),\n        doNotContainWithinFocusZone: true,\n        items: data.primaryItems,\n        overflowItems: data.overflowItems.length ? data.overflowItems : undefined,\n        onRenderItem: _this._onRenderItem,\n        onRenderOverflowButton: _this._onRenderOverflowButton\n      }), data.farItems && data.farItems.length > 0 && React.createElement(OverflowSet, {\n        role: \"none\",\n        className: css(_this._classNames.secondarySet),\n        doNotContainWithinFocusZone: true,\n        items: data.farItems,\n        onRenderItem: _this._onRenderItem,\n        onRenderOverflowButton: nullRender\n      }));\n    };\n    _this._onRenderItem = function (item) {\n      if (item.onRender) {\n        // These are the top level items, there is no relevant menu dismissing function to\n        // provide for the IContextualMenuItem onRender function. Pass in a no op function instead.\n        return item.onRender(item, function () {\n          return undefined;\n        });\n      }\n      // eslint-disable-next-line deprecation/deprecation\n      var itemText = item.text || item.name;\n      var commandButtonProps = __assign(__assign({\n        allowDisabledFocus: true,\n        role: 'menuitem'\n      }, item), {\n        styles: getCommandButtonStyles(item.buttonStyles),\n        className: css('ms-CommandBarItem-link', item.className),\n        text: !item.iconOnly ? itemText : undefined,\n        menuProps: item.subMenuProps,\n        onClick: _this._onButtonClick(item)\n      });\n      if (item.iconOnly && (itemText !== undefined || item.tooltipHostProps)) {\n        return React.createElement(TooltipHost, __assign({\n          content: itemText\n        }, item.tooltipHostProps), _this._commandButton(item, commandButtonProps));\n      }\n      return _this._commandButton(item, commandButtonProps);\n    };\n    _this._commandButton = function (item, props) {\n      var ButtonAs = _this.props.buttonAs;\n      var CommandBarButtonAs = item.commandBarButtonAs;\n      var DefaultButtonAs = CommandBarButton;\n      // The prop types between these three possible implementations overlap enough that a force-cast is safe.\n      var Type = DefaultButtonAs;\n      if (CommandBarButtonAs) {\n        Type = composeComponentAs(CommandBarButtonAs, Type);\n      }\n      if (ButtonAs) {\n        Type = composeComponentAs(ButtonAs, Type);\n      }\n      // Always pass the default implementation to the override so it may be composed.\n      return React.createElement(Type, __assign({}, props));\n    };\n    _this._onRenderOverflowButton = function (overflowItems) {\n      var _a = _this.props.overflowButtonProps,\n        overflowButtonProps = _a === void 0 ? {} : _a;\n      var combinedOverflowItems = __spreadArrays(overflowButtonProps.menuProps ? overflowButtonProps.menuProps.items : [], overflowItems);\n      var overflowProps = __assign(__assign({\n        role: 'menuitem'\n      }, overflowButtonProps), {\n        styles: __assign({\n          menuIcon: {\n            fontSize: '17px'\n          }\n        }, overflowButtonProps.styles),\n        className: css('ms-CommandBar-overflowButton', overflowButtonProps.className),\n        menuProps: __assign(__assign({}, overflowButtonProps.menuProps), {\n          items: combinedOverflowItems\n        }),\n        menuIconProps: __assign({\n          iconName: 'More'\n        }, overflowButtonProps.menuIconProps)\n      });\n      var OverflowButtonType = _this.props.overflowButtonAs ? composeComponentAs(_this.props.overflowButtonAs, CommandBarButton) : CommandBarButton;\n      return React.createElement(OverflowButtonType, __assign({}, overflowProps));\n    };\n    _this._onReduceData = function (data) {\n      var _a = _this.props,\n        shiftOnReduce = _a.shiftOnReduce,\n        onDataReduced = _a.onDataReduced;\n      var primaryItems = data.primaryItems,\n        overflowItems = data.overflowItems,\n        cacheKey = data.cacheKey;\n      // Use first item if shiftOnReduce, otherwise use last item\n      var movedItem = primaryItems[shiftOnReduce ? 0 : primaryItems.length - 1];\n      if (movedItem !== undefined) {\n        movedItem.renderedInOverflow = true;\n        overflowItems = __spreadArrays([movedItem], overflowItems);\n        primaryItems = shiftOnReduce ? primaryItems.slice(1) : primaryItems.slice(0, -1);\n        var newData = __assign(__assign({}, data), {\n          primaryItems: primaryItems,\n          overflowItems: overflowItems\n        });\n        cacheKey = _this._computeCacheKey({\n          primaryItems: primaryItems,\n          overflow: overflowItems.length > 0\n        });\n        if (onDataReduced) {\n          onDataReduced(movedItem);\n        }\n        newData.cacheKey = cacheKey;\n        return newData;\n      }\n      return undefined;\n    };\n    _this._onGrowData = function (data) {\n      var _a = _this.props,\n        shiftOnReduce = _a.shiftOnReduce,\n        onDataGrown = _a.onDataGrown;\n      var minimumOverflowItems = data.minimumOverflowItems;\n      var primaryItems = data.primaryItems,\n        overflowItems = data.overflowItems,\n        cacheKey = data.cacheKey;\n      var movedItem = overflowItems[0];\n      // Make sure that moved item exists and is not one of the original overflow items\n      if (movedItem !== undefined && overflowItems.length > minimumOverflowItems) {\n        movedItem.renderedInOverflow = false;\n        overflowItems = overflowItems.slice(1);\n        // if shiftOnReduce, movedItem goes first, otherwise, last.\n        primaryItems = shiftOnReduce ? __spreadArrays([movedItem], primaryItems) : __spreadArrays(primaryItems, [movedItem]);\n        var newData = __assign(__assign({}, data), {\n          primaryItems: primaryItems,\n          overflowItems: overflowItems\n        });\n        cacheKey = _this._computeCacheKey({\n          primaryItems: primaryItems,\n          overflow: overflowItems.length > 0\n        });\n        if (onDataGrown) {\n          onDataGrown(movedItem);\n        }\n        newData.cacheKey = cacheKey;\n        return newData;\n      }\n      return undefined;\n    };\n    initializeComponentRef(_this);\n    return _this;\n  }\n  CommandBarBase.prototype.render = function () {\n    var _a = this.props,\n      items = _a.items,\n      overflowItems = _a.overflowItems,\n      farItems = _a.farItems,\n      styles = _a.styles,\n      theme = _a.theme,\n      dataDidRender = _a.dataDidRender,\n      _b = _a.onReduceData,\n      onReduceData = _b === void 0 ? this._onReduceData : _b,\n      _c = _a.onGrowData,\n      onGrowData = _c === void 0 ? this._onGrowData : _c;\n    var commandBarData = {\n      primaryItems: __spreadArrays(items),\n      overflowItems: __spreadArrays(overflowItems),\n      minimumOverflowItems: __spreadArrays(overflowItems).length,\n      farItems: farItems,\n      cacheKey: this._computeCacheKey({\n        primaryItems: __spreadArrays(items),\n        overflow: overflowItems && overflowItems.length > 0\n      })\n    };\n    this._classNames = getClassNames(styles, {\n      theme: theme\n    });\n    // ResizeGroup will render these attributes to the root <div>.\n    // TODO We may need to elevate classNames from <FocusZone> into <ResizeGroup> ?\n    var nativeProps = getNativeProps(this.props, divProperties);\n    return React.createElement(ResizeGroup, __assign({}, nativeProps, {\n      componentRef: this._resizeGroup,\n      data: commandBarData,\n      onReduceData: onReduceData,\n      onGrowData: onGrowData,\n      onRenderData: this._onRenderData,\n      dataDidRender: dataDidRender\n    }));\n  };\n  CommandBarBase.prototype.focus = function () {\n    var overflowSet = this._overflowSet.current;\n    overflowSet && overflowSet.focus();\n  };\n  CommandBarBase.prototype.remeasure = function () {\n    this._resizeGroup.current && this._resizeGroup.current.remeasure();\n  };\n  CommandBarBase.prototype._onButtonClick = function (item) {\n    return function (ev) {\n      // inactive is deprecated. remove check in 7.0\n      // eslint-disable-next-line deprecation/deprecation\n      if (item.inactive) {\n        return;\n      }\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n  };\n  CommandBarBase.prototype._computeCacheKey = function (data) {\n    var primaryItems = data.primaryItems,\n      overflow = data.overflow;\n    var returnKey = function (acc, current) {\n      var _a = current.cacheKey,\n        cacheKey = _a === void 0 ? current.key : _a;\n      return acc + cacheKey;\n    };\n    var primaryKey = primaryItems && primaryItems.reduce(returnKey, '');\n    var overflowKey = overflow ? 'overflow' : '';\n    return [primaryKey, overflowKey].join('');\n  };\n  CommandBarBase.defaultProps = {\n    items: [],\n    overflowItems: []\n  };\n  return CommandBarBase;\n}(React.Component);\nexport { CommandBarBase };","map":{"version":3,"sources":["components/CommandBar/CommandBar.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  css,\n  nullRender,\n  IComponentAs,\n  getNativeProps,\n  divProperties,\n  composeComponentAs,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  ICommandBar,\n  ICommandBarItemProps,\n  ICommandBarProps,\n  ICommandBarStyleProps,\n  ICommandBarStyles,\n} from './CommandBar.types';\nimport { IOverflowSet, OverflowSet } from '../../OverflowSet';\nimport { IResizeGroup, ResizeGroup } from '../../ResizeGroup';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { CommandBarButton, IButtonProps } from '../../Button';\nimport { TooltipHost } from '../../Tooltip';\nimport { getCommandButtonStyles } from './CommandBar.styles';\n\nconst getClassNames = classNamesFunction<ICommandBarStyleProps, ICommandBarStyles>();\n\nexport interface ICommandBarData {\n  /**\n   * Items being rendered in the primary region\n   */\n  primaryItems: ICommandBarItemProps[];\n  /**\n   * Items being rendered in the overflow\n   */\n  overflowItems: ICommandBarItemProps[];\n  /**\n   * Items being rendered on the far side\n   */\n  farItems: ICommandBarItemProps[] | undefined;\n  /**\n   * Length of original overflowItems to ensure that they are not moved into primary region on resize\n   */\n  minimumOverflowItems: number;\n  /**\n   * Unique string used to cache the width of the command bar\n   */\n  cacheKey: string;\n}\n\nexport class CommandBarBase extends React.Component<ICommandBarProps, {}> implements ICommandBar {\n  public static defaultProps: ICommandBarProps = {\n    items: [],\n    overflowItems: [],\n  };\n\n  private _overflowSet = React.createRef<IOverflowSet>();\n  private _resizeGroup = React.createRef<IResizeGroup>();\n  private _classNames: { [key in keyof ICommandBarStyles]: string };\n\n  constructor(props: ICommandBarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      items,\n      overflowItems,\n      farItems,\n      styles,\n      theme,\n      dataDidRender,\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n    } = this.props;\n\n    const commandBarData: ICommandBarData = {\n      primaryItems: [...items],\n      overflowItems: [...overflowItems!],\n      minimumOverflowItems: [...overflowItems!].length, // for tracking\n      farItems,\n      cacheKey: this._computeCacheKey({\n        primaryItems: [...items],\n        overflow: overflowItems && overflowItems.length > 0,\n      }),\n    };\n\n    this._classNames = getClassNames(styles!, { theme: theme! });\n\n    // ResizeGroup will render these attributes to the root <div>.\n    // TODO We may need to elevate classNames from <FocusZone> into <ResizeGroup> ?\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    return (\n      <ResizeGroup\n        {...nativeProps}\n        componentRef={this._resizeGroup}\n        data={commandBarData}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        onRenderData={this._onRenderData}\n        dataDidRender={dataDidRender}\n      />\n    );\n  }\n\n  public focus(): void {\n    const { current: overflowSet } = this._overflowSet;\n\n    overflowSet && overflowSet.focus();\n  }\n\n  public remeasure(): void {\n    this._resizeGroup.current && this._resizeGroup.current.remeasure();\n  }\n\n  private _onRenderData = (data: ICommandBarData): JSX.Element => {\n    return (\n      <FocusZone\n        className={css(this._classNames.root)}\n        direction={FocusZoneDirection.horizontal}\n        role={'menubar'}\n        aria-label={this.props.ariaLabel}\n      >\n        {/*Primary Items*/}\n        <OverflowSet\n          role=\"none\"\n          componentRef={this._overflowSet}\n          className={css(this._classNames.primarySet)}\n          doNotContainWithinFocusZone={true}\n          items={data.primaryItems}\n          overflowItems={data.overflowItems.length ? data.overflowItems : undefined}\n          onRenderItem={this._onRenderItem}\n          onRenderOverflowButton={this._onRenderOverflowButton}\n        />\n\n        {/*Secondary Items*/}\n        {data.farItems && data.farItems.length > 0 && (\n          <OverflowSet\n            role=\"none\"\n            className={css(this._classNames.secondarySet)}\n            doNotContainWithinFocusZone={true}\n            items={data.farItems}\n            onRenderItem={this._onRenderItem}\n            onRenderOverflowButton={nullRender}\n          />\n        )}\n      </FocusZone>\n    );\n  };\n\n  private _onRenderItem = (item: ICommandBarItemProps): JSX.Element | React.ReactNode => {\n    if (item.onRender) {\n      // These are the top level items, there is no relevant menu dismissing function to\n      // provide for the IContextualMenuItem onRender function. Pass in a no op function instead.\n      return item.onRender(item, () => undefined);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const itemText = item.text || item.name;\n    const commandButtonProps: ICommandBarItemProps = {\n      allowDisabledFocus: true,\n      role: 'menuitem',\n      ...item,\n      styles: getCommandButtonStyles(item.buttonStyles),\n      className: css('ms-CommandBarItem-link', item.className),\n      text: !item.iconOnly ? itemText : undefined,\n      menuProps: item.subMenuProps,\n      onClick: this._onButtonClick(item),\n    };\n\n    if (item.iconOnly && (itemText !== undefined || item.tooltipHostProps)) {\n      return (\n        <TooltipHost content={itemText} {...item.tooltipHostProps}>\n          {this._commandButton(item, commandButtonProps)}\n        </TooltipHost>\n      );\n    }\n\n    return this._commandButton(item, commandButtonProps);\n  };\n\n  private _commandButton = (item: ICommandBarItemProps, props: ICommandBarItemProps): JSX.Element => {\n    const ButtonAs = this.props.buttonAs as IComponentAs<ICommandBarItemProps> | undefined;\n    const CommandBarButtonAs = item.commandBarButtonAs as IComponentAs<ICommandBarItemProps> | undefined;\n    const DefaultButtonAs = (CommandBarButton as {}) as IComponentAs<ICommandBarItemProps>;\n\n    // The prop types between these three possible implementations overlap enough that a force-cast is safe.\n    let Type = DefaultButtonAs;\n\n    if (CommandBarButtonAs) {\n      Type = composeComponentAs(CommandBarButtonAs, Type);\n    }\n\n    if (ButtonAs) {\n      Type = composeComponentAs(ButtonAs, Type);\n    }\n\n    // Always pass the default implementation to the override so it may be composed.\n    return <Type {...(props as ICommandBarItemProps)} />;\n  };\n\n  private _onButtonClick(item: ICommandBarItemProps): (ev: React.MouseEvent<HTMLButtonElement>) => void {\n    return ev => {\n      // inactive is deprecated. remove check in 7.0\n      // eslint-disable-next-line deprecation/deprecation\n      if (item.inactive) {\n        return;\n      }\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n  }\n\n  private _onRenderOverflowButton = (overflowItems: ICommandBarItemProps[]): JSX.Element => {\n    const {\n      overflowButtonProps = {}, // assure that props is not empty\n    } = this.props;\n\n    const combinedOverflowItems: ICommandBarItemProps[] = [\n      ...(overflowButtonProps.menuProps ? overflowButtonProps.menuProps.items : []),\n      ...overflowItems,\n    ];\n\n    const overflowProps: IButtonProps = {\n      role: 'menuitem',\n      ...overflowButtonProps,\n      styles: { menuIcon: { fontSize: '17px' }, ...overflowButtonProps.styles },\n      className: css('ms-CommandBar-overflowButton', overflowButtonProps.className),\n      menuProps: { ...overflowButtonProps.menuProps, items: combinedOverflowItems },\n      menuIconProps: { iconName: 'More', ...overflowButtonProps.menuIconProps },\n    };\n\n    const OverflowButtonType = this.props.overflowButtonAs\n      ? composeComponentAs(this.props.overflowButtonAs, CommandBarButton)\n      : CommandBarButton;\n\n    return <OverflowButtonType {...(overflowProps as IButtonProps)} />;\n  };\n\n  private _computeCacheKey(data: { primaryItems?: ICommandBarItemProps[]; overflow?: boolean }): string {\n    const { primaryItems, overflow } = data;\n    const returnKey = (acc: string, current: ICommandBarItemProps): string => {\n      const { cacheKey = current.key } = current;\n      return acc + cacheKey;\n    };\n\n    const primaryKey = primaryItems && primaryItems.reduce(returnKey, '');\n    const overflowKey = overflow ? 'overflow' : '';\n\n    return [primaryKey, overflowKey].join('');\n  }\n\n  private _onReduceData = (data: ICommandBarData): ICommandBarData | undefined => {\n    const { shiftOnReduce, onDataReduced } = this.props;\n    let { primaryItems, overflowItems, cacheKey } = data;\n\n    // Use first item if shiftOnReduce, otherwise use last item\n    const movedItem = primaryItems[shiftOnReduce ? 0 : primaryItems.length - 1];\n\n    if (movedItem !== undefined) {\n      movedItem.renderedInOverflow = true;\n\n      overflowItems = [movedItem, ...overflowItems];\n      primaryItems = shiftOnReduce ? primaryItems.slice(1) : primaryItems.slice(0, -1);\n\n      const newData = { ...data, primaryItems, overflowItems };\n      cacheKey = this._computeCacheKey({ primaryItems, overflow: overflowItems.length > 0 });\n\n      if (onDataReduced) {\n        onDataReduced(movedItem);\n      }\n\n      newData.cacheKey = cacheKey;\n      return newData;\n    }\n\n    return undefined;\n  };\n\n  private _onGrowData = (data: ICommandBarData): ICommandBarData | undefined => {\n    const { shiftOnReduce, onDataGrown } = this.props;\n    const { minimumOverflowItems } = data;\n    let { primaryItems, overflowItems, cacheKey } = data;\n    const movedItem = overflowItems[0];\n\n    // Make sure that moved item exists and is not one of the original overflow items\n    if (movedItem !== undefined && overflowItems.length > minimumOverflowItems) {\n      movedItem.renderedInOverflow = false;\n\n      overflowItems = overflowItems.slice(1);\n      // if shiftOnReduce, movedItem goes first, otherwise, last.\n      primaryItems = shiftOnReduce ? [movedItem, ...primaryItems] : [...primaryItems, movedItem];\n\n      const newData = { ...data, primaryItems, overflowItems };\n      cacheKey = this._computeCacheKey({ primaryItems, overflow: overflowItems.length > 0 });\n\n      if (onDataGrown) {\n        onDataGrown(movedItem);\n      }\n\n      newData.cacheKey = cacheKey;\n      return newData;\n    }\n\n    return undefined;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}