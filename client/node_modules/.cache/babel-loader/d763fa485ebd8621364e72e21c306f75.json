{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getId, toMatrix, classNamesFunction, getNativeProps, htmlElementProperties, initializeComponentRef } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\nvar ButtonGridBase = /** @class */function (_super) {\n  __extends(ButtonGridBase, _super);\n  function ButtonGridBase(props) {\n    var _this = _super.call(this, props) || this;\n    initializeComponentRef(_this);\n    _this._id = props.id || getId();\n    return _this;\n  }\n  ButtonGridBase.prototype.render = function () {\n    var _this = this;\n    var props = this.props;\n    var items = props.items,\n      columnCount = props.columnCount,\n      onRenderItem = props.onRenderItem,\n      /* eslint-disable deprecation/deprecation */\n      _a = props.ariaPosInSet,\n      /* eslint-disable deprecation/deprecation */\n      ariaPosInSet = _a === void 0 ? props.positionInSet : _a,\n      _b = props.ariaSetSize,\n      ariaSetSize = _b === void 0 ? props.setSize : _b,\n      /* eslint-enable deprecation/deprecation */\n      styles = props.styles,\n      doNotContainWithinFocusZone = props.doNotContainWithinFocusZone;\n    var htmlProps = getNativeProps(this.props, htmlElementProperties,\n    // avoid applying onBlur on the table if it's being used in the FocusZone\n    doNotContainWithinFocusZone ? [] : ['onBlur']);\n    var classNames = getClassNames(styles, {\n      theme: this.props.theme\n    });\n    // Array to store the cells in the correct row index\n    var rowsOfItems = toMatrix(items, columnCount);\n    var content = React.createElement(\"table\", __assign({\n      \"aria-posinset\": ariaPosInSet,\n      \"aria-setsize\": ariaSetSize,\n      id: this._id,\n      role: \"grid\"\n    }, htmlProps, {\n      className: classNames.root\n    }), React.createElement(\"tbody\", null, rowsOfItems.map(function (rows, rowIndex) {\n      return React.createElement(\"tr\", {\n        role: 'row',\n        key: _this._id + '-' + rowIndex + '-row'\n      }, rows.map(function (cell, cellIndex) {\n        return React.createElement(\"td\", {\n          role: 'presentation',\n          key: _this._id + '-' + cellIndex + '-cell',\n          className: classNames.tableCell\n        }, onRenderItem(cell, cellIndex));\n      }));\n    })));\n    // Create the table/grid\n    return doNotContainWithinFocusZone ? content : React.createElement(FocusZone, {\n      isCircularNavigation: this.props.shouldFocusCircularNavigate,\n      className: classNames.focusedContainer,\n      onBlur: this.props.onBlur\n    }, content);\n  };\n  return ButtonGridBase;\n}(React.Component);\nexport { ButtonGridBase };\n/**\n * @deprecated - use ButtonGridBase instead\n */\nexport var GridBase = ButtonGridBase;","map":{"version":3,"sources":["utilities/ButtonGrid/ButtonGrid.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getId,\n  toMatrix,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { IButtonGrid, IButtonGridProps, IButtonGridStyleProps, IButtonGridStyles } from './ButtonGrid.types';\n\nconst getClassNames = classNamesFunction<IButtonGridStyleProps, IButtonGridStyles>();\n\nexport class ButtonGridBase extends React.Component<IButtonGridProps, {}> implements IButtonGrid {\n  private _id: string;\n\n  constructor(props: IButtonGridProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._id = props.id || getId();\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const {\n      items,\n      columnCount,\n      onRenderItem,\n\n      /* eslint-disable deprecation/deprecation */\n      ariaPosInSet = props.positionInSet,\n      ariaSetSize = props.setSize,\n      /* eslint-enable deprecation/deprecation */\n\n      styles,\n      doNotContainWithinFocusZone,\n    } = props;\n\n    const htmlProps = getNativeProps<React.HTMLAttributes<HTMLTableElement>>(\n      this.props,\n      htmlElementProperties,\n      // avoid applying onBlur on the table if it's being used in the FocusZone\n      doNotContainWithinFocusZone ? [] : ['onBlur'],\n    );\n\n    const classNames = getClassNames(styles!, { theme: this.props.theme! });\n\n    // Array to store the cells in the correct row index\n    const rowsOfItems: any[][] = toMatrix(items, columnCount);\n\n    const content = (\n      <table\n        aria-posinset={ariaPosInSet}\n        aria-setsize={ariaSetSize}\n        id={this._id}\n        role=\"grid\"\n        {...htmlProps}\n        className={classNames.root}\n      >\n        <tbody>\n          {rowsOfItems.map((rows: any[], rowIndex: number) => {\n            return (\n              <tr role={'row'} key={this._id + '-' + rowIndex + '-row'}>\n                {rows.map((cell: any, cellIndex: number) => {\n                  return (\n                    <td\n                      role={'presentation'}\n                      key={this._id + '-' + cellIndex + '-cell'}\n                      className={classNames.tableCell}\n                    >\n                      {onRenderItem(cell, cellIndex)}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n\n    // Create the table/grid\n    return doNotContainWithinFocusZone ? (\n      content\n    ) : (\n      <FocusZone\n        isCircularNavigation={this.props.shouldFocusCircularNavigate}\n        className={classNames.focusedContainer}\n        onBlur={this.props.onBlur}\n      >\n        {content}\n      </FocusZone>\n    );\n  }\n}\n\n/**\n * @deprecated - use ButtonGridBase instead\n */\nexport const GridBase = ButtonGridBase;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}