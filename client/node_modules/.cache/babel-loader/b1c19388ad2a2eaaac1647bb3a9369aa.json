{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpHeaders } from \"../httpHeaders\";\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nvar HeaderConstants = Constants.HeaderConstants;\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\nvar BasicAuthenticationCredentials = /** @class */function () {\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @param userName - User name.\n   * @param password - Password.\n   * @param authorizationScheme - The authorization scheme.\n   */\n  function BasicAuthenticationCredentials(userName, password, authorizationScheme) {\n    if (authorizationScheme === void 0) {\n      authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n    }\n    this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  BasicAuthenticationCredentials.prototype.signRequest = function (webResource) {\n    var credentials = this.userName + \":\" + this.password;\n    var encodedCredentials = this.authorizationScheme + \" \" + base64.encodeString(credentials);\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  };\n  return BasicAuthenticationCredentials;\n}();\nexport { BasicAuthenticationCredentials };","map":{"version":3,"sources":["../../../src/credentials/basicAuthenticationCredentials.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,WAAW,QAAQ,gBAAgB;AAC5C,OAAO,KAAK,MAAM,MAAM,gBAAgB;AACxC,SAAS,SAAS,QAAQ,mBAAmB;AAG7C,IAAM,eAAe,GAAG,SAAS,CAAC,eAAe;AACjD,IAAM,4BAA4B,GAAG,OAAO;AAE5C,IAAA,8BAAA,GAAA,aAAA,YAAA;EAKE;;;;;;AAMG;EACH,SAAA,8BAAA,CACE,QAAgB,EAChB,QAAgB,EAChB,mBAA0D,EAAA;IAA1D,IAAA,mBAAA,KAAA,KAAA,CAAA,EAAA;MAAA,mBAAA,GAAA,4BAA0D;IAAA;IAZ5D,IAAA,CAAA,mBAAmB,GAAW,4BAA4B;IAcxD,IAAI,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,IAAI,OAAO,QAAQ,CAAC,OAAO,CAAA,CAAE,KAAK,QAAQ,EAAE;MACzF,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC;IACpF;IACD,IAAI,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,IAAI,OAAO,QAAQ,CAAC,OAAO,CAAA,CAAE,KAAK,QAAQ,EAAE;MACzF,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC;IACpF;IACD,IAAI,CAAC,QAAQ,GAAG,QAAQ;IACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ;IACxB,IAAI,CAAC,mBAAmB,GAAG,mBAAmB;EAChD;EAEA;;;;;AAKG;EACH,8BAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,WAA4B,EAAA;IACtC,IAAM,WAAW,GAAM,IAAI,CAAC,QAAQ,GAAA,GAAA,GAAI,IAAI,CAAC,QAAU;IACvD,IAAM,kBAAkB,GAAM,IAAI,CAAC,mBAAmB,GAAA,GAAA,GAAI,MAAM,CAAC,YAAY,CAAC,WAAW,CAAG;IAC5F,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,OAAO,GAAG,IAAI,WAAW,CAAA,CAAE;IACjE,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,aAAa,EAAE,kBAAkB,CAAC;IAC1E,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;EACrC,CAAC;EACH,OAAA,8BAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nimport { WebResourceLike } from \"../webResource\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\nconst HeaderConstants = Constants.HeaderConstants;\nconst DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n\nexport class BasicAuthenticationCredentials implements ServiceClientCredentials {\n  userName: string;\n  password: string;\n  authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME;\n\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @param userName - User name.\n   * @param password - Password.\n   * @param authorizationScheme - The authorization scheme.\n   */\n  constructor(\n    userName: string,\n    password: string,\n    authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME\n  ) {\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  signRequest(webResource: WebResourceLike): Promise<WebResourceLike> {\n    const credentials = `${this.userName}:${this.password}`;\n    const encodedCredentials = `${this.authorizationScheme} ${base64.encodeString(credentials)}`;\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}