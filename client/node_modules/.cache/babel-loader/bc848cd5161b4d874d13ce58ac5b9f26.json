{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nclass GraphError extends Error {\n  constructor(message) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\nvar Errors;\n(function (Errors) {\n  /**\n   * @description Error thrown when an input document cannot be parsed.\n   * @export\n   * @class DocumentParseError\n   * @extends {GraphError}\n   */\n  class DocumentParseError extends GraphError {\n    /**\n     *Creates an instance of DocumentParseError.\n     * @param {*} innerError The parse error.\n     * @memberof DocumentParseError\n     */\n    constructor(innerError) {\n      super(`Failed to parse input. Error: ${innerError}`);\n      this.innerError = innerError;\n      this.name = 'DocumentParseError';\n    }\n  }\n  Errors.DocumentParseError = DocumentParseError;\n  /**\n   * @description Error thrown when a duplicate prefix is detected.\n   * @export\n   * @class DuplicatePrefixError\n   * @extends {GraphError}\n   */\n  class DuplicatePrefixError extends GraphError {\n    /**\n     * Creates an instance of DuplicatePrefixError.\n     * @param {string} prefix The duplicate prefix name.\n     * @memberof DuplicatePrefixError\n     */\n    constructor(prefix) {\n      super(`The prefix ${prefix} has already been defined.`);\n      this.prefix = prefix;\n    }\n  }\n  Errors.DuplicatePrefixError = DuplicatePrefixError;\n  /**\n   * @description Error thrown when multiple prefixes are detected for a URI\n   * @export\n   * @class DuplicatePrefixUriError\n   * @extends {GraphError}\n   */\n  class DuplicatePrefixUriError extends GraphError {\n    /**\n     * Creates an instance of DuplicatePrefixUriError.\n     * @param {string} prefix The prefix that has already been registered for the URI.\n     * @param {string} uri The URI for which a prefix has already been registered.\n     * @memberof DuplicatePrefixUriError\n     */\n    constructor(prefix, uri) {\n      super(`A prefix for uri ${uri} has already been registered with prefix ${prefix}`);\n      this.prefix = prefix;\n      this.uri = uri;\n    }\n  }\n  Errors.DuplicatePrefixUriError = DuplicatePrefixUriError;\n  /**\n   * @description Error thrown when an referenced context is not found.\n   * @export\n   * @class ContextNotFoundError\n   * @extends {GraphError}\n   */\n  class ContextNotFoundError extends GraphError {\n    /**\n     *Creates an instance of ContextNotFoundError.\n     * @param {string} uri The uri of the context that was not found.\n     * @memberof ContextNotFoundError\n     */\n    constructor(uri) {\n      super(`Referenced context ${uri} was not found and remote contexts are disabled. Did you forget to add a context?`);\n      this.uri = uri;\n      this.name = 'ContextNotFoundError';\n    }\n  }\n  Errors.ContextNotFoundError = ContextNotFoundError;\n  /**\n   * @description Error thrown when a context was not found or specified for an operation context.\n   * @export\n   * @class ContextNotSpecifiedError\n   * @extends {GraphError}\n   */\n  class ContextNotSpecifiedError extends GraphError {\n    /**\n     *Creates an instance of ContextNotSpecifiedError.\n     * @param {string} operationContext The operation context the error occurred.\n     * @memberof ContextNotSpecifiedError\n     */\n    constructor(operationContext) {\n      super(`A context was not specified implicitly or explicitly for operation ${operationContext}`);\n      this.operationContext = operationContext;\n      this.name = 'ContextNotSpecifiedError';\n    }\n  }\n  Errors.ContextNotSpecifiedError = ContextNotSpecifiedError;\n  /**\n   * @description Error thrown when a duplicate context was found.\n   * @export\n   * @class DuplicateContextError\n   * @extends {GraphError}\n   */\n  class DuplicateContextError extends GraphError {\n    /**\n     *Creates an instance of DuplicateContextError.\n     * @param {string} uri The uri of the duplicate context.\n     * @memberof DuplicateContextError\n     */\n    constructor(uri) {\n      super(`Another context with uri ${uri} already exists.`);\n      this.uri = uri;\n      this.name = 'DuplicateContextError';\n    }\n  }\n  Errors.DuplicateContextError = DuplicateContextError;\n  /**\n   * @description Error thrown when a edge is cyclical.\n   * @export\n   * @class IndexEdgeCyclicalError\n   * @extends {GraphError}\n   */\n  class IndexEdgeCyclicalError extends GraphError {\n    /**\n     *Creates an instance of IndexEdgeCyclicalError.\n     * @param {string} label The label of the edge.\n     * @param {string} nodeId The id of the node that is referred to as both the outgoing and incoming.\n     * @memberof IndexEdgeCyclicalError\n     */\n    constructor(label, nodeId) {\n      super(`Cyclical index edge ${label} with outgoing and incoming node ${nodeId}`);\n      this.label = label;\n      this.nodeId = nodeId;\n      this.name = 'IndexEdgeCyclicalError';\n    }\n  }\n  Errors.IndexEdgeCyclicalError = IndexEdgeCyclicalError;\n  /**\n   * @description Error thrown when a duplicate edge was found.\n   * @export\n   * @class IndexEdgeDuplicateError\n   * @extends {GraphError}\n   */\n  class IndexEdgeDuplicateError extends GraphError {\n    /**\n     *Creates an instance of IndexEdgeDuplicateError.\n     * @param {string} label The edge label.\n     * @param {string} fromNodeId Id of the outgoing node.\n     * @param {string} toNodeId Id of the incoming node.\n     * @memberof IndexEdgeDuplicateError\n     */\n    constructor(label, fromNodeId, toNodeId) {\n      super(`Duplicate edge ${label} from node ${fromNodeId} to node ${toNodeId}`);\n      this.label = label;\n      this.fromNodeId = fromNodeId;\n      this.toNodeId = toNodeId;\n      this.name = 'IndexEdgeDuplicateError';\n    }\n  }\n  Errors.IndexEdgeDuplicateError = IndexEdgeDuplicateError;\n  /**\n   * @description Error thrown when a node referred to by an index edge doesn't exist.\n   * @export\n   * @class IndexEdgeNodeNotFoundError\n   * @extends {GraphError}\n   */\n  class IndexEdgeNodeNotFoundError extends GraphError {\n    /**\n     *Creates an instance of IndexEdgeNodeNotFoundError.\n     * @param {string} label The edge label.\n     * @param {string} fromNodeId The id of the outgoing node.\n     * @param {string} direction The edge direction.\n     * @memberof IndexEdgeNodeNotFoundError\n     */\n    constructor(label, fromNodeId, direction) {\n      super(`Expected ${direction} node with id ${fromNodeId} was not found for edge ${label}`);\n      this.label = label;\n      this.fromNodeId = fromNodeId;\n      this.direction = direction;\n      this.name = 'IndexEdgeNotFoundError';\n    }\n  }\n  Errors.IndexEdgeNodeNotFoundError = IndexEdgeNodeNotFoundError;\n  /**\n   * @description Error thrown when a duplicate node in the index is found.\n   * @export\n   * @class IndexNodeDuplicateError\n   * @extends {GraphError}\n   */\n  class IndexNodeDuplicateError extends GraphError {\n    /**\n     * Creates an instance of IndexNodeDuplicateError.\n     * @param {string} nodeId The id of the duplicate node.\n     * @memberof IndexNodeDuplicateError\n     */\n    constructor(nodeId) {\n      super(`Duplicate index node ${nodeId}`);\n      this.nodeId = nodeId;\n      this.name = 'IndexNodeDuplicateError';\n    }\n  }\n  Errors.IndexNodeDuplicateError = IndexNodeDuplicateError;\n  /**\n   * @description Error thrown when a index node is not found.\n   * @export\n   * @class IndexNodeNotFoundError\n   * @extends {GraphError}\n   */\n  class IndexNodeNotFoundError extends GraphError {\n    /**\n     * Creates an instance of IndexNodeNotFoundError.\n     * @param {string} nodeId Id of the node that was not found.\n     * @memberof IndexNodeNotFoundError\n     */\n    constructor(nodeId) {\n      super(`A node with the id ${nodeId} was not found`);\n      this.nodeId = nodeId;\n      this.name = 'IndexNodeNotFoundError';\n    }\n  }\n  Errors.IndexNodeNotFoundError = IndexNodeNotFoundError;\n  /**\n   * @description Error thrown when an invalid IRI is found.\n   * @export\n   * @class InvalidIriError\n   * @extends {GraphError}\n   */\n  class InvalidIriError extends GraphError {\n    /**\n     * Creates an instance of InvalidIriError.\n     * @param {string} iri The invalid iri string.\n     * @param {string} error Error details.\n     * @memberof InvalidIriError\n     */\n    constructor(iri, error) {\n      super(`Invalid iri ${iri}. Error: ${error}`);\n      this.iri = iri;\n    }\n  }\n  Errors.InvalidIriError = InvalidIriError;\n  /**\n   * @description Error thrown when an invalid prefix format is found.\n   * @export\n   * @class InvalidPrefixError\n   * @extends {GraphError}\n   */\n  class InvalidPrefixError extends GraphError {\n    /**\n     * Creates an instance of InvalidPrefixError.\n     * @param {string} prefix The invalid prefix string.\n     * @param {string} error Error details.\n     * @memberof InvalidPrefixError\n     */\n    constructor(prefix, error) {\n      super(`Invalid prefix ${prefix}. Error: ${error}`);\n      this.prefix = prefix;\n    }\n  }\n  Errors.InvalidPrefixError = InvalidPrefixError;\n})(Errors = exports.Errors || (exports.Errors = {}));\nexports.default = Errors;","map":{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass GraphError extends Error {\n    constructor(message) {\n        super(message);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\nvar Errors;\n(function (Errors) {\n    /**\n     * @description Error thrown when an input document cannot be parsed.\n     * @export\n     * @class DocumentParseError\n     * @extends {GraphError}\n     */\n    class DocumentParseError extends GraphError {\n        /**\n         *Creates an instance of DocumentParseError.\n         * @param {*} innerError The parse error.\n         * @memberof DocumentParseError\n         */\n        constructor(innerError) {\n            super(`Failed to parse input. Error: ${innerError}`);\n            this.innerError = innerError;\n            this.name = 'DocumentParseError';\n        }\n    }\n    Errors.DocumentParseError = DocumentParseError;\n    /**\n     * @description Error thrown when a duplicate prefix is detected.\n     * @export\n     * @class DuplicatePrefixError\n     * @extends {GraphError}\n     */\n    class DuplicatePrefixError extends GraphError {\n        /**\n         * Creates an instance of DuplicatePrefixError.\n         * @param {string} prefix The duplicate prefix name.\n         * @memberof DuplicatePrefixError\n         */\n        constructor(prefix) {\n            super(`The prefix ${prefix} has already been defined.`);\n            this.prefix = prefix;\n        }\n    }\n    Errors.DuplicatePrefixError = DuplicatePrefixError;\n    /**\n     * @description Error thrown when multiple prefixes are detected for a URI\n     * @export\n     * @class DuplicatePrefixUriError\n     * @extends {GraphError}\n     */\n    class DuplicatePrefixUriError extends GraphError {\n        /**\n         * Creates an instance of DuplicatePrefixUriError.\n         * @param {string} prefix The prefix that has already been registered for the URI.\n         * @param {string} uri The URI for which a prefix has already been registered.\n         * @memberof DuplicatePrefixUriError\n         */\n        constructor(prefix, uri) {\n            super(`A prefix for uri ${uri} has already been registered with prefix ${prefix}`);\n            this.prefix = prefix;\n            this.uri = uri;\n        }\n    }\n    Errors.DuplicatePrefixUriError = DuplicatePrefixUriError;\n    /**\n     * @description Error thrown when an referenced context is not found.\n     * @export\n     * @class ContextNotFoundError\n     * @extends {GraphError}\n     */\n    class ContextNotFoundError extends GraphError {\n        /**\n         *Creates an instance of ContextNotFoundError.\n         * @param {string} uri The uri of the context that was not found.\n         * @memberof ContextNotFoundError\n         */\n        constructor(uri) {\n            super(`Referenced context ${uri} was not found and remote contexts are disabled. Did you forget to add a context?`);\n            this.uri = uri;\n            this.name = 'ContextNotFoundError';\n        }\n    }\n    Errors.ContextNotFoundError = ContextNotFoundError;\n    /**\n     * @description Error thrown when a context was not found or specified for an operation context.\n     * @export\n     * @class ContextNotSpecifiedError\n     * @extends {GraphError}\n     */\n    class ContextNotSpecifiedError extends GraphError {\n        /**\n         *Creates an instance of ContextNotSpecifiedError.\n         * @param {string} operationContext The operation context the error occurred.\n         * @memberof ContextNotSpecifiedError\n         */\n        constructor(operationContext) {\n            super(`A context was not specified implicitly or explicitly for operation ${operationContext}`);\n            this.operationContext = operationContext;\n            this.name = 'ContextNotSpecifiedError';\n        }\n    }\n    Errors.ContextNotSpecifiedError = ContextNotSpecifiedError;\n    /**\n     * @description Error thrown when a duplicate context was found.\n     * @export\n     * @class DuplicateContextError\n     * @extends {GraphError}\n     */\n    class DuplicateContextError extends GraphError {\n        /**\n         *Creates an instance of DuplicateContextError.\n         * @param {string} uri The uri of the duplicate context.\n         * @memberof DuplicateContextError\n         */\n        constructor(uri) {\n            super(`Another context with uri ${uri} already exists.`);\n            this.uri = uri;\n            this.name = 'DuplicateContextError';\n        }\n    }\n    Errors.DuplicateContextError = DuplicateContextError;\n    /**\n     * @description Error thrown when a edge is cyclical.\n     * @export\n     * @class IndexEdgeCyclicalError\n     * @extends {GraphError}\n     */\n    class IndexEdgeCyclicalError extends GraphError {\n        /**\n         *Creates an instance of IndexEdgeCyclicalError.\n         * @param {string} label The label of the edge.\n         * @param {string} nodeId The id of the node that is referred to as both the outgoing and incoming.\n         * @memberof IndexEdgeCyclicalError\n         */\n        constructor(label, nodeId) {\n            super(`Cyclical index edge ${label} with outgoing and incoming node ${nodeId}`);\n            this.label = label;\n            this.nodeId = nodeId;\n            this.name = 'IndexEdgeCyclicalError';\n        }\n    }\n    Errors.IndexEdgeCyclicalError = IndexEdgeCyclicalError;\n    /**\n     * @description Error thrown when a duplicate edge was found.\n     * @export\n     * @class IndexEdgeDuplicateError\n     * @extends {GraphError}\n     */\n    class IndexEdgeDuplicateError extends GraphError {\n        /**\n         *Creates an instance of IndexEdgeDuplicateError.\n         * @param {string} label The edge label.\n         * @param {string} fromNodeId Id of the outgoing node.\n         * @param {string} toNodeId Id of the incoming node.\n         * @memberof IndexEdgeDuplicateError\n         */\n        constructor(label, fromNodeId, toNodeId) {\n            super(`Duplicate edge ${label} from node ${fromNodeId} to node ${toNodeId}`);\n            this.label = label;\n            this.fromNodeId = fromNodeId;\n            this.toNodeId = toNodeId;\n            this.name = 'IndexEdgeDuplicateError';\n        }\n    }\n    Errors.IndexEdgeDuplicateError = IndexEdgeDuplicateError;\n    /**\n     * @description Error thrown when a node referred to by an index edge doesn't exist.\n     * @export\n     * @class IndexEdgeNodeNotFoundError\n     * @extends {GraphError}\n     */\n    class IndexEdgeNodeNotFoundError extends GraphError {\n        /**\n         *Creates an instance of IndexEdgeNodeNotFoundError.\n         * @param {string} label The edge label.\n         * @param {string} fromNodeId The id of the outgoing node.\n         * @param {string} direction The edge direction.\n         * @memberof IndexEdgeNodeNotFoundError\n         */\n        constructor(label, fromNodeId, direction) {\n            super(`Expected ${direction} node with id ${fromNodeId} was not found for edge ${label}`);\n            this.label = label;\n            this.fromNodeId = fromNodeId;\n            this.direction = direction;\n            this.name = 'IndexEdgeNotFoundError';\n        }\n    }\n    Errors.IndexEdgeNodeNotFoundError = IndexEdgeNodeNotFoundError;\n    /**\n     * @description Error thrown when a duplicate node in the index is found.\n     * @export\n     * @class IndexNodeDuplicateError\n     * @extends {GraphError}\n     */\n    class IndexNodeDuplicateError extends GraphError {\n        /**\n         * Creates an instance of IndexNodeDuplicateError.\n         * @param {string} nodeId The id of the duplicate node.\n         * @memberof IndexNodeDuplicateError\n         */\n        constructor(nodeId) {\n            super(`Duplicate index node ${nodeId}`);\n            this.nodeId = nodeId;\n            this.name = 'IndexNodeDuplicateError';\n        }\n    }\n    Errors.IndexNodeDuplicateError = IndexNodeDuplicateError;\n    /**\n     * @description Error thrown when a index node is not found.\n     * @export\n     * @class IndexNodeNotFoundError\n     * @extends {GraphError}\n     */\n    class IndexNodeNotFoundError extends GraphError {\n        /**\n         * Creates an instance of IndexNodeNotFoundError.\n         * @param {string} nodeId Id of the node that was not found.\n         * @memberof IndexNodeNotFoundError\n         */\n        constructor(nodeId) {\n            super(`A node with the id ${nodeId} was not found`);\n            this.nodeId = nodeId;\n            this.name = 'IndexNodeNotFoundError';\n        }\n    }\n    Errors.IndexNodeNotFoundError = IndexNodeNotFoundError;\n    /**\n     * @description Error thrown when an invalid IRI is found.\n     * @export\n     * @class InvalidIriError\n     * @extends {GraphError}\n     */\n    class InvalidIriError extends GraphError {\n        /**\n         * Creates an instance of InvalidIriError.\n         * @param {string} iri The invalid iri string.\n         * @param {string} error Error details.\n         * @memberof InvalidIriError\n         */\n        constructor(iri, error) {\n            super(`Invalid iri ${iri}. Error: ${error}`);\n            this.iri = iri;\n        }\n    }\n    Errors.InvalidIriError = InvalidIriError;\n    /**\n     * @description Error thrown when an invalid prefix format is found.\n     * @export\n     * @class InvalidPrefixError\n     * @extends {GraphError}\n     */\n    class InvalidPrefixError extends GraphError {\n        /**\n         * Creates an instance of InvalidPrefixError.\n         * @param {string} prefix The invalid prefix string.\n         * @param {string} error Error details.\n         * @memberof InvalidPrefixError\n         */\n        constructor(prefix, error) {\n            super(`Invalid prefix ${prefix}. Error: ${error}`);\n            this.prefix = prefix;\n        }\n    }\n    Errors.InvalidPrefixError = InvalidPrefixError;\n})(Errors = exports.Errors || (exports.Errors = {}));\nexports.default = Errors;\n//# sourceMappingURL=errors.js.map"]},"metadata":{},"sourceType":"script"}