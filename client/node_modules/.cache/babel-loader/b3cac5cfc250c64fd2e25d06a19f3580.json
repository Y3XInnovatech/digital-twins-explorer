{"ast":null,"code":"import { du as parseLinkedTwinExpression, dc as isNumericType, bk as ViewerConfigUtility } from './Interfaces-f1972c79.js';\n\n/**\r\n * Function to determine if visual will be shown based on an evaluated expression\r\n */\nfunction shouldShowVisual(propertyType, twins, valueExpression, values) {\n  var evaluatedExpression = parseLinkedTwinExpression(valueExpression, twins);\n  if (propertyType === 'boolean') {\n    return values[0] === evaluatedExpression;\n  } else if (propertyType === 'string') {\n    return values.includes(evaluatedExpression);\n  } else if (isNumericType(propertyType)) {\n    return ViewerConfigUtility.isValueWithinRange(values, evaluatedExpression);\n  } else {\n    // Return false since other property types are not yet supported\n    return false;\n  }\n}\n/** Utility that returns if a Condition contains or not a badge icon */\nvar hasBadge = function (condition) {\n  var _a;\n  return !!((_a = condition === null || condition === void 0 ? void 0 : condition.visual) === null || _a === void 0 ? void 0 : _a.iconName);\n};\nexport { hasBadge as h, shouldShowVisual as s };","map":{"version":3,"sources":["../../src/Models/SharedUtils/VisualRuleUtils.ts"],"names":[],"mappings":";;AASA;;AAEG;AACG,SAAU,gBAAgB,CAC5B,YAA2C,EAC3C,KAA4B,EAC5B,eAAuB,EACvB,MAAqC,EAAA;EAErC,IAAM,mBAAmB,GAAG,yBAAyB,CACjD,eAAe,EACf,KAAK,CACR;EACD,IAAI,YAAY,KAAK,SAAS,EAAE;IAC5B,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,mBAAmB;EAC3C,CAAA,MAAM,IAAI,YAAY,KAAK,QAAQ,EAAE;IAClC,OAAO,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC;EAC9C,CAAA,MAAM,IAAI,aAAa,CAAC,YAAY,CAAC,EAAE;IACpC,OAAO,mBAAmB,CAAC,kBAAkB,CACzC,MAAkB,EAClB,mBAA6B,CAChC;EACJ,CAAA,MAAM;;IAEH,OAAO,KAAK;EACf;AACL;AAEA;AACO,IAAM,QAAQ,GAAG,SAAA,CAAC,SAAsB,EAAA;;EAC3C,OAAO,CAAC,EAAC,CAAA,EAAA,GAAA,SAAS,KAAT,IAAA,IAAA,SAAS,KAAT,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,SAAS,CAAE,MAAM,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAQ,CAAA;AACxC,CAAA","sourcesContent":["import { isNumericType } from '../Classes/3DVConfig';\nimport ViewerConfigUtility from '../Classes/ViewerConfigUtility';\nimport { DTwin } from '../Constants/Interfaces';\nimport { parseLinkedTwinExpression } from '../Services/Utils';\nimport {\n    IDTDLPropertyType,\n    IValueRange\n} from '../Types/Generated/3DScenesConfiguration-v1.0.0';\n\n/**\n * Function to determine if visual will be shown based on an evaluated expression\n */\nexport function shouldShowVisual(\n    propertyType: IDTDLPropertyType | undefined,\n    twins: Record<string, DTwin>,\n    valueExpression: string,\n    values: (number | string | boolean)[]\n): boolean {\n    const evaluatedExpression = parseLinkedTwinExpression(\n        valueExpression,\n        twins\n    );\n    if (propertyType === 'boolean') {\n        return values[0] === evaluatedExpression;\n    } else if (propertyType === 'string') {\n        return values.includes(evaluatedExpression);\n    } else if (isNumericType(propertyType)) {\n        return ViewerConfigUtility.isValueWithinRange(\n            values as number[],\n            evaluatedExpression as number\n        );\n    } else {\n        // Return false since other property types are not yet supported\n        return false;\n    }\n}\n\n/** Utility that returns if a Condition contains or not a badge icon */\nexport const hasBadge = (condition: IValueRange): boolean => {\n    return !!condition?.visual?.iconName;\n};\n"]},"metadata":{},"sourceType":"module"}