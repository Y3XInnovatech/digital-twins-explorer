{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nvar getClassNames = classNamesFunction();\nvar TooltipBase = /** @class */function (_super) {\n  __extends(TooltipBase, _super);\n  function TooltipBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._onRenderContent = function (props) {\n      return React.createElement(\"p\", {\n        className: _this._classNames.subText\n      }, props.content);\n    };\n    return _this;\n  }\n  TooltipBase.prototype.render = function () {\n    var _a = this.props,\n      className = _a.className,\n      calloutProps = _a.calloutProps,\n      directionalHint = _a.directionalHint,\n      directionalHintForRTL = _a.directionalHintForRTL,\n      styles = _a.styles,\n      id = _a.id,\n      maxWidth = _a.maxWidth,\n      _b = _a.onRenderContent,\n      onRenderContent = _b === void 0 ? this._onRenderContent : _b,\n      targetElement = _a.targetElement,\n      theme = _a.theme;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className || calloutProps && calloutProps.className,\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth\n    });\n    return React.createElement(Callout, __assign({\n      target: targetElement,\n      directionalHint: directionalHint,\n      directionalHintForRTL: directionalHintForRTL\n    }, calloutProps, getNativeProps(this.props, divProperties, ['id']), {\n      className: this._classNames.root\n    }), React.createElement(\"div\", {\n      className: this._classNames.content,\n      id: id,\n      role: \"tooltip\",\n      onMouseEnter: this.props.onMouseEnter,\n      onMouseLeave: this.props.onMouseLeave\n    }, onRenderContent(this.props, this._onRenderContent)));\n  };\n  // Specify default props values\n  TooltipBase.defaultProps = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false\n    }\n  };\n  return TooltipBase;\n}(React.Component);\nexport { TooltipBase };","map":{"version":3,"sources":["components/Tooltip/Tooltip.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\n\nconst getClassNames = classNamesFunction<ITooltipStyleProps, ITooltipStyles>();\n\nexport class TooltipBase extends React.Component<ITooltipProps, any> {\n  // Specify default props values\n  public static defaultProps: Partial<ITooltipProps> = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false,\n    },\n  };\n\n  private _classNames: IProcessedStyleSet<ITooltipStyles>;\n\n  public render(): JSX.Element {\n    const {\n      className,\n      calloutProps,\n      directionalHint,\n      directionalHintForRTL,\n      styles,\n      id,\n      maxWidth,\n      onRenderContent = this._onRenderContent,\n      targetElement,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: className || (calloutProps && calloutProps.className),\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth!,\n    });\n\n    return (\n      <Callout\n        target={targetElement}\n        directionalHint={directionalHint}\n        directionalHintForRTL={directionalHintForRTL}\n        {...calloutProps}\n        {...getNativeProps(this.props, divProperties, ['id'])} // omitting ID due to it being used in the div below\n        className={this._classNames.root}\n      >\n        <div\n          className={this._classNames.content}\n          id={id}\n          role=\"tooltip\"\n          onMouseEnter={this.props.onMouseEnter}\n          onMouseLeave={this.props.onMouseLeave}\n        >\n          {onRenderContent(this.props, this._onRenderContent)}\n        </div>\n      </Callout>\n    );\n  }\n\n  private _onRenderContent = (props: ITooltipProps): JSX.Element => {\n    return <p className={this._classNames.subText}>{props.content}</p>;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}