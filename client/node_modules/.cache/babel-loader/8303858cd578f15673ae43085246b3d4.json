{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar PositionStats = function () {\n  function PositionStats(scale) {\n    this.scale = scale;\n    this.AB = 0;\n    this.AD = 0;\n    this.A2 = 0;\n  }\n  PositionStats.prototype.addVariable = function (v) {\n    var ai = this.scale / v.scale;\n    var bi = v.offset / v.scale;\n    var wi = v.weight;\n    this.AB += wi * ai * bi;\n    this.AD += wi * ai * v.desiredPosition;\n    this.A2 += wi * ai * ai;\n  };\n  PositionStats.prototype.getPosn = function () {\n    return (this.AD - this.AB) / this.A2;\n  };\n  return PositionStats;\n}();\nexports.PositionStats = PositionStats;\nvar Constraint = function () {\n  function Constraint(left, right, gap, equality) {\n    if (equality === void 0) {\n      equality = false;\n    }\n    this.left = left;\n    this.right = right;\n    this.gap = gap;\n    this.equality = equality;\n    this.active = false;\n    this.unsatisfiable = false;\n    this.left = left;\n    this.right = right;\n    this.gap = gap;\n    this.equality = equality;\n  }\n  Constraint.prototype.slack = function () {\n    return this.unsatisfiable ? Number.MAX_VALUE : this.right.scale * this.right.position() - this.gap - this.left.scale * this.left.position();\n  };\n  return Constraint;\n}();\nexports.Constraint = Constraint;\nvar Variable = function () {\n  function Variable(desiredPosition, weight, scale) {\n    if (weight === void 0) {\n      weight = 1;\n    }\n    if (scale === void 0) {\n      scale = 1;\n    }\n    this.desiredPosition = desiredPosition;\n    this.weight = weight;\n    this.scale = scale;\n    this.offset = 0;\n  }\n  Variable.prototype.dfdv = function () {\n    return 2.0 * this.weight * (this.position() - this.desiredPosition);\n  };\n  Variable.prototype.position = function () {\n    return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;\n  };\n  Variable.prototype.visitNeighbours = function (prev, f) {\n    var ff = function (c, next) {\n      return c.active && prev !== next && f(c, next);\n    };\n    this.cOut.forEach(function (c) {\n      return ff(c, c.right);\n    });\n    this.cIn.forEach(function (c) {\n      return ff(c, c.left);\n    });\n  };\n  return Variable;\n}();\nexports.Variable = Variable;\nvar Block = function () {\n  function Block(v) {\n    this.vars = [];\n    v.offset = 0;\n    this.ps = new PositionStats(v.scale);\n    this.addVariable(v);\n  }\n  Block.prototype.addVariable = function (v) {\n    v.block = this;\n    this.vars.push(v);\n    this.ps.addVariable(v);\n    this.posn = this.ps.getPosn();\n  };\n  Block.prototype.updateWeightedPosition = function () {\n    this.ps.AB = this.ps.AD = this.ps.A2 = 0;\n    for (var i = 0, n = this.vars.length; i < n; ++i) this.ps.addVariable(this.vars[i]);\n    this.posn = this.ps.getPosn();\n  };\n  Block.prototype.compute_lm = function (v, u, postAction) {\n    var _this = this;\n    var dfdv = v.dfdv();\n    v.visitNeighbours(u, function (c, next) {\n      var _dfdv = _this.compute_lm(next, v, postAction);\n      if (next === c.right) {\n        dfdv += _dfdv * c.left.scale;\n        c.lm = _dfdv;\n      } else {\n        dfdv += _dfdv * c.right.scale;\n        c.lm = -_dfdv;\n      }\n      postAction(c);\n    });\n    return dfdv / v.scale;\n  };\n  Block.prototype.populateSplitBlock = function (v, prev) {\n    var _this = this;\n    v.visitNeighbours(prev, function (c, next) {\n      next.offset = v.offset + (next === c.right ? c.gap : -c.gap);\n      _this.addVariable(next);\n      _this.populateSplitBlock(next, v);\n    });\n  };\n  Block.prototype.traverse = function (visit, acc, v, prev) {\n    var _this = this;\n    if (v === void 0) {\n      v = this.vars[0];\n    }\n    if (prev === void 0) {\n      prev = null;\n    }\n    v.visitNeighbours(prev, function (c, next) {\n      acc.push(visit(c));\n      _this.traverse(visit, acc, next, v);\n    });\n  };\n  Block.prototype.findMinLM = function () {\n    var m = null;\n    this.compute_lm(this.vars[0], null, function (c) {\n      if (!c.equality && (m === null || c.lm < m.lm)) m = c;\n    });\n    return m;\n  };\n  Block.prototype.findMinLMBetween = function (lv, rv) {\n    this.compute_lm(lv, null, function () {});\n    var m = null;\n    this.findPath(lv, null, rv, function (c, next) {\n      if (!c.equality && c.right === next && (m === null || c.lm < m.lm)) m = c;\n    });\n    return m;\n  };\n  Block.prototype.findPath = function (v, prev, to, visit) {\n    var _this = this;\n    var endFound = false;\n    v.visitNeighbours(prev, function (c, next) {\n      if (!endFound && (next === to || _this.findPath(next, v, to, visit))) {\n        endFound = true;\n        visit(c, next);\n      }\n    });\n    return endFound;\n  };\n  Block.prototype.isActiveDirectedPathBetween = function (u, v) {\n    if (u === v) return true;\n    var i = u.cOut.length;\n    while (i--) {\n      var c = u.cOut[i];\n      if (c.active && this.isActiveDirectedPathBetween(c.right, v)) return true;\n    }\n    return false;\n  };\n  Block.split = function (c) {\n    c.active = false;\n    return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];\n  };\n  Block.createSplitBlock = function (startVar) {\n    var b = new Block(startVar);\n    b.populateSplitBlock(startVar, null);\n    return b;\n  };\n  Block.prototype.splitBetween = function (vl, vr) {\n    var c = this.findMinLMBetween(vl, vr);\n    if (c !== null) {\n      var bs = Block.split(c);\n      return {\n        constraint: c,\n        lb: bs[0],\n        rb: bs[1]\n      };\n    }\n    return null;\n  };\n  Block.prototype.mergeAcross = function (b, c, dist) {\n    c.active = true;\n    for (var i = 0, n = b.vars.length; i < n; ++i) {\n      var v = b.vars[i];\n      v.offset += dist;\n      this.addVariable(v);\n    }\n    this.posn = this.ps.getPosn();\n  };\n  Block.prototype.cost = function () {\n    var sum = 0,\n      i = this.vars.length;\n    while (i--) {\n      var v = this.vars[i],\n        d = v.position() - v.desiredPosition;\n      sum += d * d * v.weight;\n    }\n    return sum;\n  };\n  return Block;\n}();\nexports.Block = Block;\nvar Blocks = function () {\n  function Blocks(vs) {\n    this.vs = vs;\n    var n = vs.length;\n    this.list = new Array(n);\n    while (n--) {\n      var b = new Block(vs[n]);\n      this.list[n] = b;\n      b.blockInd = n;\n    }\n  }\n  Blocks.prototype.cost = function () {\n    var sum = 0,\n      i = this.list.length;\n    while (i--) sum += this.list[i].cost();\n    return sum;\n  };\n  Blocks.prototype.insert = function (b) {\n    b.blockInd = this.list.length;\n    this.list.push(b);\n  };\n  Blocks.prototype.remove = function (b) {\n    var last = this.list.length - 1;\n    var swapBlock = this.list[last];\n    this.list.length = last;\n    if (b !== swapBlock) {\n      this.list[b.blockInd] = swapBlock;\n      swapBlock.blockInd = b.blockInd;\n    }\n  };\n  Blocks.prototype.merge = function (c) {\n    var l = c.left.block,\n      r = c.right.block;\n    var dist = c.right.offset - c.left.offset - c.gap;\n    if (l.vars.length < r.vars.length) {\n      r.mergeAcross(l, c, dist);\n      this.remove(l);\n    } else {\n      l.mergeAcross(r, c, -dist);\n      this.remove(r);\n    }\n  };\n  Blocks.prototype.forEach = function (f) {\n    this.list.forEach(f);\n  };\n  Blocks.prototype.updateBlockPositions = function () {\n    this.list.forEach(function (b) {\n      return b.updateWeightedPosition();\n    });\n  };\n  Blocks.prototype.split = function (inactive) {\n    var _this = this;\n    this.updateBlockPositions();\n    this.list.forEach(function (b) {\n      var v = b.findMinLM();\n      if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {\n        b = v.left.block;\n        Block.split(v).forEach(function (nb) {\n          return _this.insert(nb);\n        });\n        _this.remove(b);\n        inactive.push(v);\n      }\n    });\n  };\n  return Blocks;\n}();\nexports.Blocks = Blocks;\nvar Solver = function () {\n  function Solver(vs, cs) {\n    this.vs = vs;\n    this.cs = cs;\n    this.vs = vs;\n    vs.forEach(function (v) {\n      v.cIn = [], v.cOut = [];\n    });\n    this.cs = cs;\n    cs.forEach(function (c) {\n      c.left.cOut.push(c);\n      c.right.cIn.push(c);\n    });\n    this.inactive = cs.map(function (c) {\n      c.active = false;\n      return c;\n    });\n    this.bs = null;\n  }\n  Solver.prototype.cost = function () {\n    return this.bs.cost();\n  };\n  Solver.prototype.setStartingPositions = function (ps) {\n    this.inactive = this.cs.map(function (c) {\n      c.active = false;\n      return c;\n    });\n    this.bs = new Blocks(this.vs);\n    this.bs.forEach(function (b, i) {\n      return b.posn = ps[i];\n    });\n  };\n  Solver.prototype.setDesiredPositions = function (ps) {\n    this.vs.forEach(function (v, i) {\n      return v.desiredPosition = ps[i];\n    });\n  };\n  Solver.prototype.mostViolated = function () {\n    var minSlack = Number.MAX_VALUE,\n      v = null,\n      l = this.inactive,\n      n = l.length,\n      deletePoint = n;\n    for (var i = 0; i < n; ++i) {\n      var c = l[i];\n      if (c.unsatisfiable) continue;\n      var slack = c.slack();\n      if (c.equality || slack < minSlack) {\n        minSlack = slack;\n        v = c;\n        deletePoint = i;\n        if (c.equality) break;\n      }\n    }\n    if (deletePoint !== n && (minSlack < Solver.ZERO_UPPERBOUND && !v.active || v.equality)) {\n      l[deletePoint] = l[n - 1];\n      l.length = n - 1;\n    }\n    return v;\n  };\n  Solver.prototype.satisfy = function () {\n    if (this.bs == null) {\n      this.bs = new Blocks(this.vs);\n    }\n    this.bs.split(this.inactive);\n    var v = null;\n    while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver.ZERO_UPPERBOUND && !v.active)) {\n      var lb = v.left.block,\n        rb = v.right.block;\n      if (lb !== rb) {\n        this.bs.merge(v);\n      } else {\n        if (lb.isActiveDirectedPathBetween(v.right, v.left)) {\n          v.unsatisfiable = true;\n          continue;\n        }\n        var split = lb.splitBetween(v.left, v.right);\n        if (split !== null) {\n          this.bs.insert(split.lb);\n          this.bs.insert(split.rb);\n          this.bs.remove(lb);\n          this.inactive.push(split.constraint);\n        } else {\n          v.unsatisfiable = true;\n          continue;\n        }\n        if (v.slack() >= 0) {\n          this.inactive.push(v);\n        } else {\n          this.bs.merge(v);\n        }\n      }\n    }\n  };\n  Solver.prototype.solve = function () {\n    this.satisfy();\n    var lastcost = Number.MAX_VALUE,\n      cost = this.bs.cost();\n    while (Math.abs(lastcost - cost) > 0.0001) {\n      this.satisfy();\n      lastcost = cost;\n      cost = this.bs.cost();\n    }\n    return cost;\n  };\n  Solver.LAGRANGIAN_TOLERANCE = -1e-4;\n  Solver.ZERO_UPPERBOUND = -1e-10;\n  return Solver;\n}();\nexports.Solver = Solver;\nfunction removeOverlapInOneDimension(spans, lowerBound, upperBound) {\n  var vs = spans.map(function (s) {\n    return new Variable(s.desiredCenter);\n  });\n  var cs = [];\n  var n = spans.length;\n  for (var i = 0; i < n - 1; i++) {\n    var left = spans[i],\n      right = spans[i + 1];\n    cs.push(new Constraint(vs[i], vs[i + 1], (left.size + right.size) / 2));\n  }\n  var leftMost = vs[0],\n    rightMost = vs[n - 1],\n    leftMostSize = spans[0].size / 2,\n    rightMostSize = spans[n - 1].size / 2;\n  var vLower = null,\n    vUpper = null;\n  if (lowerBound) {\n    vLower = new Variable(lowerBound, leftMost.weight * 1000);\n    vs.push(vLower);\n    cs.push(new Constraint(vLower, leftMost, leftMostSize));\n  }\n  if (upperBound) {\n    vUpper = new Variable(upperBound, rightMost.weight * 1000);\n    vs.push(vUpper);\n    cs.push(new Constraint(rightMost, vUpper, rightMostSize));\n  }\n  var solver = new Solver(vs, cs);\n  solver.solve();\n  return {\n    newCenters: vs.slice(0, spans.length).map(function (v) {\n      return v.position();\n    }),\n    lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,\n    upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize\n  };\n}\nexports.removeOverlapInOneDimension = removeOverlapInOneDimension;","map":{"version":3,"sources":["../../WebCola/src/vpsc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PositionStats = (function () {\r\n    function PositionStats(scale) {\r\n        this.scale = scale;\r\n        this.AB = 0;\r\n        this.AD = 0;\r\n        this.A2 = 0;\r\n    }\r\n    PositionStats.prototype.addVariable = function (v) {\r\n        var ai = this.scale / v.scale;\r\n        var bi = v.offset / v.scale;\r\n        var wi = v.weight;\r\n        this.AB += wi * ai * bi;\r\n        this.AD += wi * ai * v.desiredPosition;\r\n        this.A2 += wi * ai * ai;\r\n    };\r\n    PositionStats.prototype.getPosn = function () {\r\n        return (this.AD - this.AB) / this.A2;\r\n    };\r\n    return PositionStats;\r\n}());\r\nexports.PositionStats = PositionStats;\r\nvar Constraint = (function () {\r\n    function Constraint(left, right, gap, equality) {\r\n        if (equality === void 0) { equality = false; }\r\n        this.left = left;\r\n        this.right = right;\r\n        this.gap = gap;\r\n        this.equality = equality;\r\n        this.active = false;\r\n        this.unsatisfiable = false;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.gap = gap;\r\n        this.equality = equality;\r\n    }\r\n    Constraint.prototype.slack = function () {\r\n        return this.unsatisfiable ? Number.MAX_VALUE\r\n            : this.right.scale * this.right.position() - this.gap\r\n                - this.left.scale * this.left.position();\r\n    };\r\n    return Constraint;\r\n}());\r\nexports.Constraint = Constraint;\r\nvar Variable = (function () {\r\n    function Variable(desiredPosition, weight, scale) {\r\n        if (weight === void 0) { weight = 1; }\r\n        if (scale === void 0) { scale = 1; }\r\n        this.desiredPosition = desiredPosition;\r\n        this.weight = weight;\r\n        this.scale = scale;\r\n        this.offset = 0;\r\n    }\r\n    Variable.prototype.dfdv = function () {\r\n        return 2.0 * this.weight * (this.position() - this.desiredPosition);\r\n    };\r\n    Variable.prototype.position = function () {\r\n        return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;\r\n    };\r\n    Variable.prototype.visitNeighbours = function (prev, f) {\r\n        var ff = function (c, next) { return c.active && prev !== next && f(c, next); };\r\n        this.cOut.forEach(function (c) { return ff(c, c.right); });\r\n        this.cIn.forEach(function (c) { return ff(c, c.left); });\r\n    };\r\n    return Variable;\r\n}());\r\nexports.Variable = Variable;\r\nvar Block = (function () {\r\n    function Block(v) {\r\n        this.vars = [];\r\n        v.offset = 0;\r\n        this.ps = new PositionStats(v.scale);\r\n        this.addVariable(v);\r\n    }\r\n    Block.prototype.addVariable = function (v) {\r\n        v.block = this;\r\n        this.vars.push(v);\r\n        this.ps.addVariable(v);\r\n        this.posn = this.ps.getPosn();\r\n    };\r\n    Block.prototype.updateWeightedPosition = function () {\r\n        this.ps.AB = this.ps.AD = this.ps.A2 = 0;\r\n        for (var i = 0, n = this.vars.length; i < n; ++i)\r\n            this.ps.addVariable(this.vars[i]);\r\n        this.posn = this.ps.getPosn();\r\n    };\r\n    Block.prototype.compute_lm = function (v, u, postAction) {\r\n        var _this = this;\r\n        var dfdv = v.dfdv();\r\n        v.visitNeighbours(u, function (c, next) {\r\n            var _dfdv = _this.compute_lm(next, v, postAction);\r\n            if (next === c.right) {\r\n                dfdv += _dfdv * c.left.scale;\r\n                c.lm = _dfdv;\r\n            }\r\n            else {\r\n                dfdv += _dfdv * c.right.scale;\r\n                c.lm = -_dfdv;\r\n            }\r\n            postAction(c);\r\n        });\r\n        return dfdv / v.scale;\r\n    };\r\n    Block.prototype.populateSplitBlock = function (v, prev) {\r\n        var _this = this;\r\n        v.visitNeighbours(prev, function (c, next) {\r\n            next.offset = v.offset + (next === c.right ? c.gap : -c.gap);\r\n            _this.addVariable(next);\r\n            _this.populateSplitBlock(next, v);\r\n        });\r\n    };\r\n    Block.prototype.traverse = function (visit, acc, v, prev) {\r\n        var _this = this;\r\n        if (v === void 0) { v = this.vars[0]; }\r\n        if (prev === void 0) { prev = null; }\r\n        v.visitNeighbours(prev, function (c, next) {\r\n            acc.push(visit(c));\r\n            _this.traverse(visit, acc, next, v);\r\n        });\r\n    };\r\n    Block.prototype.findMinLM = function () {\r\n        var m = null;\r\n        this.compute_lm(this.vars[0], null, function (c) {\r\n            if (!c.equality && (m === null || c.lm < m.lm))\r\n                m = c;\r\n        });\r\n        return m;\r\n    };\r\n    Block.prototype.findMinLMBetween = function (lv, rv) {\r\n        this.compute_lm(lv, null, function () { });\r\n        var m = null;\r\n        this.findPath(lv, null, rv, function (c, next) {\r\n            if (!c.equality && c.right === next && (m === null || c.lm < m.lm))\r\n                m = c;\r\n        });\r\n        return m;\r\n    };\r\n    Block.prototype.findPath = function (v, prev, to, visit) {\r\n        var _this = this;\r\n        var endFound = false;\r\n        v.visitNeighbours(prev, function (c, next) {\r\n            if (!endFound && (next === to || _this.findPath(next, v, to, visit))) {\r\n                endFound = true;\r\n                visit(c, next);\r\n            }\r\n        });\r\n        return endFound;\r\n    };\r\n    Block.prototype.isActiveDirectedPathBetween = function (u, v) {\r\n        if (u === v)\r\n            return true;\r\n        var i = u.cOut.length;\r\n        while (i--) {\r\n            var c = u.cOut[i];\r\n            if (c.active && this.isActiveDirectedPathBetween(c.right, v))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    Block.split = function (c) {\r\n        c.active = false;\r\n        return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];\r\n    };\r\n    Block.createSplitBlock = function (startVar) {\r\n        var b = new Block(startVar);\r\n        b.populateSplitBlock(startVar, null);\r\n        return b;\r\n    };\r\n    Block.prototype.splitBetween = function (vl, vr) {\r\n        var c = this.findMinLMBetween(vl, vr);\r\n        if (c !== null) {\r\n            var bs = Block.split(c);\r\n            return { constraint: c, lb: bs[0], rb: bs[1] };\r\n        }\r\n        return null;\r\n    };\r\n    Block.prototype.mergeAcross = function (b, c, dist) {\r\n        c.active = true;\r\n        for (var i = 0, n = b.vars.length; i < n; ++i) {\r\n            var v = b.vars[i];\r\n            v.offset += dist;\r\n            this.addVariable(v);\r\n        }\r\n        this.posn = this.ps.getPosn();\r\n    };\r\n    Block.prototype.cost = function () {\r\n        var sum = 0, i = this.vars.length;\r\n        while (i--) {\r\n            var v = this.vars[i], d = v.position() - v.desiredPosition;\r\n            sum += d * d * v.weight;\r\n        }\r\n        return sum;\r\n    };\r\n    return Block;\r\n}());\r\nexports.Block = Block;\r\nvar Blocks = (function () {\r\n    function Blocks(vs) {\r\n        this.vs = vs;\r\n        var n = vs.length;\r\n        this.list = new Array(n);\r\n        while (n--) {\r\n            var b = new Block(vs[n]);\r\n            this.list[n] = b;\r\n            b.blockInd = n;\r\n        }\r\n    }\r\n    Blocks.prototype.cost = function () {\r\n        var sum = 0, i = this.list.length;\r\n        while (i--)\r\n            sum += this.list[i].cost();\r\n        return sum;\r\n    };\r\n    Blocks.prototype.insert = function (b) {\r\n        b.blockInd = this.list.length;\r\n        this.list.push(b);\r\n    };\r\n    Blocks.prototype.remove = function (b) {\r\n        var last = this.list.length - 1;\r\n        var swapBlock = this.list[last];\r\n        this.list.length = last;\r\n        if (b !== swapBlock) {\r\n            this.list[b.blockInd] = swapBlock;\r\n            swapBlock.blockInd = b.blockInd;\r\n        }\r\n    };\r\n    Blocks.prototype.merge = function (c) {\r\n        var l = c.left.block, r = c.right.block;\r\n        var dist = c.right.offset - c.left.offset - c.gap;\r\n        if (l.vars.length < r.vars.length) {\r\n            r.mergeAcross(l, c, dist);\r\n            this.remove(l);\r\n        }\r\n        else {\r\n            l.mergeAcross(r, c, -dist);\r\n            this.remove(r);\r\n        }\r\n    };\r\n    Blocks.prototype.forEach = function (f) {\r\n        this.list.forEach(f);\r\n    };\r\n    Blocks.prototype.updateBlockPositions = function () {\r\n        this.list.forEach(function (b) { return b.updateWeightedPosition(); });\r\n    };\r\n    Blocks.prototype.split = function (inactive) {\r\n        var _this = this;\r\n        this.updateBlockPositions();\r\n        this.list.forEach(function (b) {\r\n            var v = b.findMinLM();\r\n            if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {\r\n                b = v.left.block;\r\n                Block.split(v).forEach(function (nb) { return _this.insert(nb); });\r\n                _this.remove(b);\r\n                inactive.push(v);\r\n            }\r\n        });\r\n    };\r\n    return Blocks;\r\n}());\r\nexports.Blocks = Blocks;\r\nvar Solver = (function () {\r\n    function Solver(vs, cs) {\r\n        this.vs = vs;\r\n        this.cs = cs;\r\n        this.vs = vs;\r\n        vs.forEach(function (v) {\r\n            v.cIn = [], v.cOut = [];\r\n        });\r\n        this.cs = cs;\r\n        cs.forEach(function (c) {\r\n            c.left.cOut.push(c);\r\n            c.right.cIn.push(c);\r\n        });\r\n        this.inactive = cs.map(function (c) { c.active = false; return c; });\r\n        this.bs = null;\r\n    }\r\n    Solver.prototype.cost = function () {\r\n        return this.bs.cost();\r\n    };\r\n    Solver.prototype.setStartingPositions = function (ps) {\r\n        this.inactive = this.cs.map(function (c) { c.active = false; return c; });\r\n        this.bs = new Blocks(this.vs);\r\n        this.bs.forEach(function (b, i) { return b.posn = ps[i]; });\r\n    };\r\n    Solver.prototype.setDesiredPositions = function (ps) {\r\n        this.vs.forEach(function (v, i) { return v.desiredPosition = ps[i]; });\r\n    };\r\n    Solver.prototype.mostViolated = function () {\r\n        var minSlack = Number.MAX_VALUE, v = null, l = this.inactive, n = l.length, deletePoint = n;\r\n        for (var i = 0; i < n; ++i) {\r\n            var c = l[i];\r\n            if (c.unsatisfiable)\r\n                continue;\r\n            var slack = c.slack();\r\n            if (c.equality || slack < minSlack) {\r\n                minSlack = slack;\r\n                v = c;\r\n                deletePoint = i;\r\n                if (c.equality)\r\n                    break;\r\n            }\r\n        }\r\n        if (deletePoint !== n &&\r\n            (minSlack < Solver.ZERO_UPPERBOUND && !v.active || v.equality)) {\r\n            l[deletePoint] = l[n - 1];\r\n            l.length = n - 1;\r\n        }\r\n        return v;\r\n    };\r\n    Solver.prototype.satisfy = function () {\r\n        if (this.bs == null) {\r\n            this.bs = new Blocks(this.vs);\r\n        }\r\n        this.bs.split(this.inactive);\r\n        var v = null;\r\n        while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver.ZERO_UPPERBOUND && !v.active)) {\r\n            var lb = v.left.block, rb = v.right.block;\r\n            if (lb !== rb) {\r\n                this.bs.merge(v);\r\n            }\r\n            else {\r\n                if (lb.isActiveDirectedPathBetween(v.right, v.left)) {\r\n                    v.unsatisfiable = true;\r\n                    continue;\r\n                }\r\n                var split = lb.splitBetween(v.left, v.right);\r\n                if (split !== null) {\r\n                    this.bs.insert(split.lb);\r\n                    this.bs.insert(split.rb);\r\n                    this.bs.remove(lb);\r\n                    this.inactive.push(split.constraint);\r\n                }\r\n                else {\r\n                    v.unsatisfiable = true;\r\n                    continue;\r\n                }\r\n                if (v.slack() >= 0) {\r\n                    this.inactive.push(v);\r\n                }\r\n                else {\r\n                    this.bs.merge(v);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Solver.prototype.solve = function () {\r\n        this.satisfy();\r\n        var lastcost = Number.MAX_VALUE, cost = this.bs.cost();\r\n        while (Math.abs(lastcost - cost) > 0.0001) {\r\n            this.satisfy();\r\n            lastcost = cost;\r\n            cost = this.bs.cost();\r\n        }\r\n        return cost;\r\n    };\r\n    Solver.LAGRANGIAN_TOLERANCE = -1e-4;\r\n    Solver.ZERO_UPPERBOUND = -1e-10;\r\n    return Solver;\r\n}());\r\nexports.Solver = Solver;\r\nfunction removeOverlapInOneDimension(spans, lowerBound, upperBound) {\r\n    var vs = spans.map(function (s) { return new Variable(s.desiredCenter); });\r\n    var cs = [];\r\n    var n = spans.length;\r\n    for (var i = 0; i < n - 1; i++) {\r\n        var left = spans[i], right = spans[i + 1];\r\n        cs.push(new Constraint(vs[i], vs[i + 1], (left.size + right.size) / 2));\r\n    }\r\n    var leftMost = vs[0], rightMost = vs[n - 1], leftMostSize = spans[0].size / 2, rightMostSize = spans[n - 1].size / 2;\r\n    var vLower = null, vUpper = null;\r\n    if (lowerBound) {\r\n        vLower = new Variable(lowerBound, leftMost.weight * 1000);\r\n        vs.push(vLower);\r\n        cs.push(new Constraint(vLower, leftMost, leftMostSize));\r\n    }\r\n    if (upperBound) {\r\n        vUpper = new Variable(upperBound, rightMost.weight * 1000);\r\n        vs.push(vUpper);\r\n        cs.push(new Constraint(rightMost, vUpper, rightMostSize));\r\n    }\r\n    var solver = new Solver(vs, cs);\r\n    solver.solve();\r\n    return {\r\n        newCenters: vs.slice(0, spans.length).map(function (v) { return v.position(); }),\r\n        lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,\r\n        upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize\r\n    };\r\n}\r\nexports.removeOverlapInOneDimension = removeOverlapInOneDimension;\r\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}