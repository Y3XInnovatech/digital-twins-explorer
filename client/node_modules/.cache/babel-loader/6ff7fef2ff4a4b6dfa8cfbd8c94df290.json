{"ast":null,"code":"import { __assign, __extends, __rest, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, getRTL, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nvar getClassNames = classNamesFunction();\nvar OVERFLOW_KEY = 'overflow';\nvar nullFunction = function () {\n  return null;\n};\nvar nonActionableItemProps = {\n  styles: function (props) {\n    var theme = props.theme;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText\n          }\n        }\n      }\n    };\n  }\n};\n/**\n * {@docCategory Breadcrumb}\n */\nvar BreadcrumbBase = /** @class */function (_super) {\n  __extends(BreadcrumbBase, _super);\n  function BreadcrumbBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._focusZone = React.createRef();\n    /**\n     * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n     */\n    _this._onReduceData = function (data) {\n      var renderedItems = data.renderedItems,\n        renderedOverflowItems = data.renderedOverflowItems;\n      var overflowIndex = data.props.overflowIndex;\n      var movedItem = renderedItems[overflowIndex];\n      if (!movedItem) {\n        return undefined;\n      }\n      renderedItems = __spreadArrays(renderedItems);\n      renderedItems.splice(overflowIndex, 1);\n      renderedOverflowItems = __spreadArrays(renderedOverflowItems, [movedItem]);\n      return __assign(__assign({}, data), {\n        renderedItems: renderedItems,\n        renderedOverflowItems: renderedOverflowItems\n      });\n    };\n    /**\n     * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n     * point.\n     */\n    _this._onGrowData = function (data) {\n      var renderedItems = data.renderedItems,\n        renderedOverflowItems = data.renderedOverflowItems;\n      var _a = data.props,\n        overflowIndex = _a.overflowIndex,\n        maxDisplayedItems = _a.maxDisplayedItems;\n      renderedOverflowItems = __spreadArrays(renderedOverflowItems);\n      var movedItem = renderedOverflowItems.pop();\n      if (!movedItem || renderedItems.length >= maxDisplayedItems) {\n        return undefined;\n      }\n      renderedItems = __spreadArrays(renderedItems);\n      renderedItems.splice(overflowIndex, 0, movedItem);\n      return __assign(__assign({}, data), {\n        renderedItems: renderedItems,\n        renderedOverflowItems: renderedOverflowItems\n      });\n    };\n    _this._onRenderBreadcrumb = function (data) {\n      var _a = data.props,\n        ariaLabel = _a.ariaLabel,\n        _b = _a.dividerAs,\n        DividerType = _b === void 0 ? Icon : _b,\n        _c = _a.onRenderItem,\n        onRenderItem = _c === void 0 ? _this._onRenderItem : _c,\n        overflowAriaLabel = _a.overflowAriaLabel,\n        overflowIndex = _a.overflowIndex,\n        onRenderOverflowIcon = _a.onRenderOverflowIcon,\n        overflowButtonAs = _a.overflowButtonAs;\n      var renderedOverflowItems = data.renderedOverflowItems,\n        renderedItems = data.renderedItems;\n      var contextualItems = renderedOverflowItems.map(function (item) {\n        var isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? _this._onBreadcrumbClicked.bind(_this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps\n        };\n      });\n      // Find index of last rendered item so the divider icon\n      // knows not to render on that item\n      var lastItemIndex = renderedItems.length - 1;\n      var hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n      var itemElements = renderedItems.map(function (item, index) {\n        return React.createElement(\"li\", {\n          className: _this._classNames.listItem,\n          key: item.key || String(index)\n        }, onRenderItem(item, _this._onRenderItem), (index !== lastItemIndex || hasOverflowItems && index === overflowIndex - 1) && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: getRTL(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight',\n          item: item\n        }));\n      });\n      if (hasOverflowItems) {\n        var iconProps = !onRenderOverflowIcon ? {\n          iconName: 'More'\n        } : {};\n        var onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n        var OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n        itemElements.splice(overflowIndex, 0, React.createElement(\"li\", {\n          className: _this._classNames.overflow,\n          key: OVERFLOW_KEY\n        }, React.createElement(OverflowButton, {\n          className: _this._classNames.overflowButton,\n          iconProps: iconProps,\n          role: \"button\",\n          \"aria-haspopup\": \"true\",\n          ariaLabel: overflowAriaLabel,\n          onRenderMenuIcon: onRenderMenuIcon,\n          menuProps: {\n            items: contextualItems,\n            directionalHint: DirectionalHint.bottomLeftEdge\n          }\n        }), overflowIndex !== lastItemIndex + 1 && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: getRTL(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight',\n          item: renderedOverflowItems[renderedOverflowItems.length - 1]\n        })));\n      }\n      var nativeProps = getNativeProps(_this.props, htmlElementProperties, ['className']);\n      return React.createElement(\"div\", __assign({\n        className: _this._classNames.root,\n        role: \"navigation\",\n        \"aria-label\": ariaLabel\n      }, nativeProps), React.createElement(FocusZone, __assign({\n        componentRef: _this._focusZone,\n        direction: FocusZoneDirection.horizontal\n      }, _this.props.focusZoneProps), React.createElement(\"ol\", {\n        className: _this._classNames.list\n      }, itemElements)));\n    };\n    _this._onRenderItem = function (item) {\n      var as = item.as,\n        href = item.href,\n        onClick = item.onClick,\n        isCurrentItem = item.isCurrentItem,\n        text = item.text,\n        additionalProps = __rest(item, [\"as\", \"href\", \"onClick\", \"isCurrentItem\", \"text\"]);\n      if (onClick || href) {\n        return React.createElement(Link, __assign({}, additionalProps, {\n          as: as,\n          className: _this._classNames.itemLink,\n          href: href,\n          \"aria-current\": isCurrentItem ? 'page' : undefined,\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick: _this._onBreadcrumbClicked.bind(_this, item)\n        }), React.createElement(TooltipHost, __assign({\n          content: text,\n          overflowMode: TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), text));\n      } else {\n        var Tag = as || 'span';\n        return React.createElement(Tag, __assign({}, additionalProps, {\n          className: _this._classNames.item\n        }), React.createElement(TooltipHost, __assign({\n          content: text,\n          overflowMode: TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), text));\n      }\n    };\n    _this._onBreadcrumbClicked = function (item, ev) {\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n    initializeComponentRef(_this);\n    _this._validateProps(props);\n    return _this;\n  }\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  BreadcrumbBase.prototype.focus = function () {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  };\n  BreadcrumbBase.prototype.render = function () {\n    this._validateProps(this.props);\n    var _a = this.props,\n      _b = _a.onReduceData,\n      onReduceData = _b === void 0 ? this._onReduceData : _b,\n      _c = _a.onGrowData,\n      onGrowData = _c === void 0 ? this._onGrowData : _c,\n      overflowIndex = _a.overflowIndex,\n      maxDisplayedItems = _a.maxDisplayedItems,\n      items = _a.items,\n      className = _a.className,\n      theme = _a.theme,\n      styles = _a.styles;\n    var renderedItems = __spreadArrays(items);\n    var renderedOverflowItems = renderedItems.splice(overflowIndex, renderedItems.length - maxDisplayedItems);\n    var breadcrumbData = {\n      props: this.props,\n      renderedItems: renderedItems,\n      renderedOverflowItems: renderedOverflowItems\n    };\n    this._classNames = getClassNames(styles, {\n      className: className,\n      theme: theme\n    });\n    return React.createElement(ResizeGroup, {\n      onRenderData: this._onRenderBreadcrumb,\n      onReduceData: onReduceData,\n      onGrowData: onGrowData,\n      data: breadcrumbData\n    });\n  };\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  BreadcrumbBase.prototype._validateProps = function (props) {\n    var maxDisplayedItems = props.maxDisplayedItems,\n      overflowIndex = props.overflowIndex,\n      items = props.items;\n    if (overflowIndex < 0 || maxDisplayedItems > 1 && overflowIndex > maxDisplayedItems - 1 || items.length > 0 && overflowIndex > items.length - 1) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  };\n  BreadcrumbBase.defaultProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0\n  };\n  return BreadcrumbBase;\n}(React.Component);\nexport { BreadcrumbBase };","map":{"version":3,"sources":["components/Breadcrumb/Breadcrumb.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  getRTL,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n} from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport { IContextualMenuItem, IContextualMenuItemProps } from '../../ContextualMenu';\nimport {\n  IBreadcrumbProps,\n  IBreadcrumbItem,\n  IDividerAsProps,\n  IBreadcrumbData,\n  IBreadcrumbStyleProps,\n  IBreadcrumbStyles,\n} from './Breadcrumb.types';\n\n/** @deprecated Use IBreadcrumbData */\nexport type IBreadCrumbData = IBreadcrumbData;\n\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\n\nconst OVERFLOW_KEY = 'overflow';\nconst nullFunction = (): null => null;\n\nconst nonActionableItemProps: Partial<IContextualMenuItemProps> = {\n  styles: props => {\n    const { theme } = props;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText,\n          },\n        },\n      },\n    };\n  },\n};\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport class BreadcrumbBase extends React.Component<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0,\n  };\n\n  private _classNames: IProcessedStyleSet<IBreadcrumbStyles>;\n  private _focusZone = React.createRef<FocusZone>();\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._validateProps(props);\n  }\n\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    this._validateProps(this.props);\n\n    const {\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n      overflowIndex,\n      maxDisplayedItems,\n      items,\n      className,\n      theme,\n      styles,\n    } = this.props;\n    const renderedItems = [...items];\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\n    const breadcrumbData: IBreadcrumbData = {\n      props: this.props,\n      renderedItems,\n      renderedOverflowItems,\n    };\n\n    this._classNames = getClassNames(styles, {\n      className,\n      theme: theme!,\n    });\n\n    return (\n      <ResizeGroup\n        onRenderData={this._onRenderBreadcrumb}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        data={breadcrumbData}\n      />\n    );\n  }\n\n  /**\n   * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n   */\n  private _onReduceData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex } = data.props;\n\n    const movedItem = renderedItems[overflowIndex!];\n\n    if (!movedItem) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  /**\n   * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n   * point.\n   */\n  private _onGrowData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex, maxDisplayedItems } = data.props;\n\n    renderedOverflowItems = [...renderedOverflowItems];\n    const movedItem = renderedOverflowItems.pop();\n\n    if (!movedItem || renderedItems.length >= maxDisplayedItems!) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 0, movedItem);\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  private _onRenderBreadcrumb = (data: IBreadcrumbData) => {\n    const {\n      ariaLabel,\n      dividerAs: DividerType = Icon as React.ElementType<IDividerAsProps>,\n      onRenderItem = this._onRenderItem,\n      overflowAriaLabel,\n      overflowIndex,\n      onRenderOverflowIcon,\n      overflowButtonAs,\n    } = data.props;\n    const { renderedOverflowItems, renderedItems } = data;\n\n    const contextualItems = renderedOverflowItems.map(\n      (item): IContextualMenuItem => {\n        const isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps,\n        };\n      },\n    );\n\n    // Find index of last rendered item so the divider icon\n    // knows not to render on that item\n    const lastItemIndex = renderedItems.length - 1;\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n\n    const itemElements: JSX.Element[] = renderedItems.map((item, index) => (\n      <li className={this._classNames.listItem} key={item.key || String(index)}>\n        {onRenderItem(item, this._onRenderItem)}\n        {(index !== lastItemIndex || (hasOverflowItems && index === overflowIndex! - 1)) && (\n          <DividerType\n            className={this._classNames.chevron}\n            iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n            item={item}\n          />\n        )}\n      </li>\n    ));\n\n    if (hasOverflowItems) {\n      const iconProps = !onRenderOverflowIcon ? { iconName: 'More' } : {};\n      const onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n      const OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n\n      itemElements.splice(\n        overflowIndex!,\n        0,\n        <li className={this._classNames.overflow} key={OVERFLOW_KEY}>\n          <OverflowButton\n            className={this._classNames.overflowButton}\n            iconProps={iconProps}\n            role=\"button\"\n            aria-haspopup=\"true\"\n            ariaLabel={overflowAriaLabel}\n            onRenderMenuIcon={onRenderMenuIcon}\n            menuProps={{\n              items: contextualItems,\n              directionalHint: DirectionalHint.bottomLeftEdge,\n            }}\n          />\n          {overflowIndex !== lastItemIndex + 1 && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={renderedOverflowItems[renderedOverflowItems.length - 1]}\n            />\n          )}\n        </li>,\n      );\n    }\n\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div className={this._classNames.root} role=\"navigation\" aria-label={ariaLabel} {...nativeProps}>\n        <FocusZone\n          componentRef={this._focusZone}\n          direction={FocusZoneDirection.horizontal}\n          {...this.props.focusZoneProps}\n        >\n          <ol className={this._classNames.list}>{itemElements}</ol>\n        </FocusZone>\n      </div>\n    );\n  };\n\n  private _onRenderItem = (item: IBreadcrumbItem) => {\n    const { as, href, onClick, isCurrentItem, text, ...additionalProps } = item;\n\n    if (onClick || href) {\n      return (\n        <Link\n          {...additionalProps}\n          as={as}\n          className={this._classNames.itemLink}\n          href={href}\n          aria-current={isCurrentItem ? 'page' : undefined}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={this._onBreadcrumbClicked.bind(this, item)}\n        >\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {text}\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      const Tag = as || 'span';\n      return (\n        <Tag {...additionalProps} className={this._classNames.item}>\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {text}\n          </TooltipHost>\n        </Tag>\n      );\n    }\n  };\n\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  };\n\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  private _validateProps(props: IBreadcrumbProps): void {\n    const { maxDisplayedItems, overflowIndex, items } = props;\n    if (\n      overflowIndex! < 0 ||\n      (maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1) ||\n      (items.length > 0 && overflowIndex! > items.length - 1)\n    ) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}