{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction();\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nvar ZERO_THRESHOLD = 0.01;\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\nvar ProgressIndicatorBase = /** @class */function (_super) {\n  __extends(ProgressIndicatorBase, _super);\n  function ProgressIndicatorBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._onRenderProgress = function (props) {\n      var _a = _this.props,\n        ariaValueText = _a.ariaValueText,\n        barHeight = _a.barHeight,\n        className = _a.className,\n        styles = _a.styles,\n        theme = _a.theme;\n      var percentComplete = typeof _this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, _this.props.percentComplete * 100)) : undefined;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        className: className,\n        barHeight: barHeight,\n        indeterminate: percentComplete === undefined ? true : false\n      });\n      var progressBarStyles = {\n        width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n        transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined\n      };\n      var ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n      var ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n      var ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete) : undefined;\n      return React.createElement(\"div\", {\n        className: classNames.itemProgress\n      }, React.createElement(\"div\", {\n        className: classNames.progressTrack\n      }), React.createElement(\"div\", {\n        className: classNames.progressBar,\n        style: progressBarStyles,\n        role: \"progressbar\",\n        \"aria-valuemin\": ariaValueMin,\n        \"aria-valuemax\": ariaValueMax,\n        \"aria-valuenow\": ariaValueNow,\n        \"aria-valuetext\": ariaValueText\n      }));\n    };\n    return _this;\n  }\n  ProgressIndicatorBase.prototype.render = function () {\n    var _a = this.props,\n      barHeight = _a.barHeight,\n      className = _a.className,\n      // eslint-disable-next-line deprecation/deprecation\n      _b = _a.label,\n      // eslint-disable-next-line deprecation/deprecation\n      label = _b === void 0 ? this.props.title : _b,\n      // Fall back to deprecated value.\n      description = _a.description,\n      styles = _a.styles,\n      theme = _a.theme,\n      progressHidden = _a.progressHidden,\n      _c = _a.onRenderProgress,\n      onRenderProgress = _c === void 0 ? this._onRenderProgress : _c;\n    var percentComplete = typeof this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, this.props.percentComplete * 100)) : undefined;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      barHeight: barHeight,\n      indeterminate: percentComplete === undefined ? true : false\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, label ? React.createElement(\"div\", {\n      className: classNames.itemName\n    }, label) : null, !progressHidden ? onRenderProgress(__assign(__assign({}, this.props), {\n      percentComplete: percentComplete\n    }), this._onRenderProgress) : null, description ? React.createElement(\"div\", {\n      className: classNames.itemDescription\n    }, description) : null);\n  };\n  ProgressIndicatorBase.defaultProps = {\n    label: '',\n    description: '',\n    width: 180\n  };\n  return ProgressIndicatorBase;\n}(React.Component);\nexport { ProgressIndicatorBase };","map":{"version":3,"sources":["components/ProgressIndicator/ProgressIndicator.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport {\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles,\n} from './ProgressIndicator.types';\n\nconst getClassNames = classNamesFunction<IProgressIndicatorStyleProps, IProgressIndicatorStyles>();\n\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nconst ZERO_THRESHOLD = 0.01;\n\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\nexport class ProgressIndicatorBase extends React.Component<IProgressIndicatorProps, {}> {\n  public static defaultProps = {\n    label: '',\n    description: '',\n    width: 180,\n  };\n\n  public render() {\n    const {\n      barHeight,\n      className,\n      // eslint-disable-next-line deprecation/deprecation\n      label = this.props.title, // Fall back to deprecated value.\n      description,\n      styles,\n      theme,\n      progressHidden,\n      onRenderProgress = this._onRenderProgress,\n    } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    return (\n      <div className={classNames.root}>\n        {label ? <div className={classNames.itemName}>{label}</div> : null}\n        {!progressHidden\n          ? onRenderProgress(\n              {\n                ...(this.props as IProgressIndicatorProps),\n                percentComplete: percentComplete,\n              },\n              this._onRenderProgress,\n            )\n          : null}\n        {description ? <div className={classNames.itemDescription}>{description}</div> : null}\n      </div>\n    );\n  }\n\n  private _onRenderProgress = (props: IProgressIndicatorProps): JSX.Element => {\n    const { ariaValueText, barHeight, className, styles, theme } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    const progressBarStyles = {\n      width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n      transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined,\n    };\n\n    const ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n    const ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n    const ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete!) : undefined;\n\n    return (\n      <div className={classNames.itemProgress}>\n        <div className={classNames.progressTrack} />\n        <div\n          className={classNames.progressBar}\n          style={progressBarStyles}\n          role=\"progressbar\"\n          aria-valuemin={ariaValueMin}\n          aria-valuemax={ariaValueMax}\n          aria-valuenow={ariaValueNow}\n          aria-valuetext={ariaValueText}\n        />\n      </div>\n    );\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}