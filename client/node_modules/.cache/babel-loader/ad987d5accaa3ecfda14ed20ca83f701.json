{"ast":null,"code":"import { MAX_COLOR_ALPHA } from './consts';\n/**\n * @internal\n * Get a CSS color string from some color components.\n * If `a` is specified and not 100, returns an `rgba()` string.\n * Otherwise returns `hex` prefixed with #.\n */\nexport function _rgbaOrHexString(r, g, b, a, hex) {\n  return a === MAX_COLOR_ALPHA || typeof a !== 'number' ? \"#\" + hex : \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a / MAX_COLOR_ALPHA + \")\";\n}","map":{"version":3,"sources":["utilities/color/_rgbaOrHexString.ts"],"names":[],"mappings":"AAAA,SAAS,eAAe,QAAQ,UAAU;AAE1C;;;;;AAKG;AACH,OAAM,SAAU,gBAAgB,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAqB,EAAE,GAAW,EAAA;EAClG,OAAO,CAAC,KAAK,eAAe,IAAI,OAAO,CAAC,KAAK,QAAQ,GAAG,GAAA,GAAI,GAAK,GAAG,OAAA,GAAQ,CAAC,GAAA,IAAA,GAAK,CAAC,GAAA,IAAA,GAAK,CAAC,GAAA,IAAA,GAAK,CAAC,GAAG,eAAe,GAAA,GAAG;AACtH","sourcesContent":["import { MAX_COLOR_ALPHA } from './consts';\n\n/**\n * @internal\n * Get a CSS color string from some color components.\n * If `a` is specified and not 100, returns an `rgba()` string.\n * Otherwise returns `hex` prefixed with #.\n */\nexport function _rgbaOrHexString(r: number, g: number, b: number, a: number | undefined, hex: string): string {\n  return a === MAX_COLOR_ALPHA || typeof a !== 'number' ? `#${hex}` : `rgba(${r}, ${g}, ${b}, ${a / MAX_COLOR_ALPHA})`;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}