{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DigitalTwinsClient } from \"@azure/digital-twins-core\";\nimport { DefaultHttpClient } from \"@azure/core-http\";\nimport { BatchService } from \"./BatchService\";\nimport { configService } from \"./ConfigService\";\n// REL_TYPE_ALL,\nimport { REL_TYPE_INCOMING, REL_TYPE_OUTGOING, API_VERSION } from \"./Constants\";\nimport { print } from \"./LoggingService\";\n// Import { settingsService } from \"./SettingsService\";\n// Import { eventService } from \"./EventService\";\nimport fs from \"fs\";\nimport path from \"path\";\nconst USE_LOCAL_MODELS = process.env.USE_LOCAL_MODELS === \"true\";\nconst MODELS_FILE_PATH = path.join(__dirname, \"../models.json\");\nconst getAllTwinsQuery = \"SELECT * FROM digitaltwins\";\nconst getDataFromQueryResponse = response => {\n  const list = [...response];\n  const data = {\n    twins: [],\n    relationships: [],\n    other: []\n  };\n  for (let i = 0; i < list.length; i++) {\n    const current = list[i];\n    if (current.$dtId && current.$metadata && current.$metadata.$model && !data.twins.some(t => t.$dtId === current.$dtId)) {\n      data.twins.push(current);\n      continue;\n    } else if (current.$relationshipId) {\n      data.relationships.push(current);\n      continue;\n    }\n    for (const k of Object.keys(current)) {\n      const v = current[k];\n      if (typeof v === \"object\") {\n        list.push(v);\n      } else if (Array.isArray(v)) {\n        v.forEach(x => list.push(x));\n      } else {\n        data.other.push(v);\n      }\n    }\n  }\n  return data;\n};\nclass CustomHttpClient {\n  constructor() {\n    this.client = new DefaultHttpClient();\n  }\n  sendRequest(httpRequest) {\n    const url = new URL(httpRequest.url);\n    url.searchParams.set(\"api-version\", API_VERSION);\n    httpRequest.headers.set(\"x-adt-host\", url.hostname);\n    const baseUrl = new URL(window.location.origin);\n    url.host = baseUrl.host;\n    url.pathname = `/api/proxy${url.pathname}`;\n    url.protocol = baseUrl.protocol;\n    httpRequest.url = url.toString();\n    return this.client.sendRequest(httpRequest);\n  }\n}\nclass ApiService {\n  constructor() {\n    this.client = null;\n  }\n  async initialize() {\n    const {\n      appAdtUrl\n    } = await configService.getConfig();\n    const nullTokenCredentials = {\n      getToken: () => null\n    };\n    const httpClient = new CustomHttpClient();\n    this.client = new DigitalTwinsClient(appAdtUrl, nullTokenCredentials, {\n      httpClient\n    });\n  }\n  async query(query, callback) {\n    await this.initialize();\n    let count = 1;\n    for await (const page of this.client.queryTwins(query).byPage()) {\n      print(`Ran query for twins, page ${count++}:`, \"info\");\n      print(JSON.stringify(page, null, 2), \"info\");\n      await callback(getDataFromQueryResponse(page.value));\n    }\n  }\n  async queryTwins(query) {\n    const list = [];\n    await this.query(query, ({\n      twins\n    }) => twins.forEach(x => list.push(x)));\n    return list;\n  }\n  async getAllTwins() {\n    return await this.queryTwins(getAllTwinsQuery);\n  }\n  async queryModels(bypassCache = false) {\n    if (USE_LOCAL_MODELS && !bypassCache) {\n      try {\n        if (fs.existsSync(MODELS_FILE_PATH)) {\n          print(\"Loading models from local models.json file\", \"info\");\n          const modelsData = fs.readFileSync(MODELS_FILE_PATH, \"utf-8\");\n          return JSON.parse(modelsData);\n        }\n        print(\"Local models.json file not found. Falling back to Azure Digital Twins.\", \"warning\");\n      } catch (err) {\n        print(`Error reading models.json: ${err.message}`, \"error\");\n        throw err;\n      }\n    }\n    print(\"Fetching models from Azure Digital Twins\", \"info\");\n    await this.initialize();\n    const list = [];\n    const models = this.client.listModels([], true);\n    for await (const model of models) {\n      list.push(model);\n    }\n    return list;\n  }\n  async getModelById(modelId) {\n    await this.initialize();\n    return await this.client.getModel(modelId, true);\n  }\n  async addModels(models) {\n    await this.initialize();\n    return await this.client.createModels(models);\n  }\n  async deleteRelationship(twinId, relationshipId) {\n    await this.initialize();\n    print(`Deleting relationship ${relationshipId} for twin ${twinId}`, \"warning\");\n    await this.client.deleteRelationship(twinId, relationshipId);\n  }\n  async deleteTwin(twinId, skipRelationships = false) {\n    if (!skipRelationships) {\n      await this.deleteTwinRelationships(twinId);\n    }\n    print(`Deleting twin ${twinId}`, \"warning\");\n    await this.client.deleteDigitalTwin(twinId);\n  }\n  async deleteTwinRelationships(twinId, skipIncoming = false) {\n    await this.initialize();\n    const rels = await this.queryRelationships([twinId], REL_TYPE_OUTGOING);\n    for (const r of rels) {\n      await this.deleteRelationship(twinId, r.$relationshipId);\n    }\n    if (!skipIncoming) {\n      const incRels = await this.queryRelationships([twinId], REL_TYPE_INCOMING);\n      for (const r of incRels) {\n        await this.deleteRelationship(r.$sourceId, r.$relationshipId);\n      }\n    }\n  }\n  async deleteAllTwins(ids) {\n    await this.initialize();\n    const relsBs = new BatchService({\n      items: ids,\n      action: (item, resolve, reject) => {\n        this.deleteTwinRelationships(item, true).then(resolve, reject);\n      }\n    });\n    await relsBs.run();\n    const twinsBs = new BatchService({\n      items: ids,\n      action: (item, resolve, reject) => {\n        this.deleteTwin(item, true).then(resolve, reject);\n      }\n    });\n    await twinsBs.run();\n    print(\"*** Delete complete\", \"warning\");\n  }\n  async deleteModel(id) {\n    await this.initialize();\n    await this.client.deleteModel(id);\n    print(`*** Delete complete for model with ID: ${id}`, \"warning\");\n  }\n  async getRelationship(sourceTwinId, relationshipId) {\n    print(`Get relationship with id ${relationshipId} for source twin ${sourceTwinId}`, \"info\");\n    await this.initialize();\n    return await this.client.getRelationship(sourceTwinId, relationshipId);\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["DigitalTwinsClient","DefaultHttpClient","BatchService","configService","REL_TYPE_INCOMING","REL_TYPE_OUTGOING","API_VERSION","print","fs","path","USE_LOCAL_MODELS","process","env","MODELS_FILE_PATH","join","__dirname","getAllTwinsQuery","getDataFromQueryResponse","response","list","data","twins","relationships","other","i","length","current","$dtId","$metadata","$model","some","t","push","$relationshipId","k","Object","keys","v","Array","isArray","forEach","x","CustomHttpClient","constructor","client","sendRequest","httpRequest","url","URL","searchParams","set","headers","hostname","baseUrl","window","location","origin","host","pathname","protocol","toString","ApiService","initialize","appAdtUrl","getConfig","nullTokenCredentials","getToken","httpClient","query","callback","count","page","queryTwins","byPage","JSON","stringify","value","getAllTwins","queryModels","bypassCache","existsSync","modelsData","readFileSync","parse","err","message","models","listModels","model","getModelById","modelId","getModel","addModels","createModels","deleteRelationship","twinId","relationshipId","deleteTwin","skipRelationships","deleteTwinRelationships","deleteDigitalTwin","skipIncoming","rels","queryRelationships","r","incRels","$sourceId","deleteAllTwins","ids","relsBs","items","action","item","resolve","reject","then","run","twinsBs","deleteModel","id","getRelationship","sourceTwinId","apiService"],"sources":["/home/saharsh/digital-twins-explorer/client/src/services/ApiService.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DigitalTwinsClient } from \"@azure/digital-twins-core\";\nimport { DefaultHttpClient } from \"@azure/core-http\";\nimport { BatchService } from \"./BatchService\";\nimport { configService } from \"./ConfigService\";\n// REL_TYPE_ALL,\nimport { REL_TYPE_INCOMING, REL_TYPE_OUTGOING, API_VERSION } from \"./Constants\";\nimport { print } from \"./LoggingService\";\n// Import { settingsService } from \"./SettingsService\";\n// Import { eventService } from \"./EventService\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst USE_LOCAL_MODELS = process.env.USE_LOCAL_MODELS === \"true\";\nconst MODELS_FILE_PATH = path.join(__dirname, \"../models.json\");\n\nconst getAllTwinsQuery = \"SELECT * FROM digitaltwins\";\n\nconst getDataFromQueryResponse = response => {\n  const list = [ ...response ];\n  const data = {\n    twins: [],\n    relationships: [],\n    other: []\n  };\n  for (let i = 0; i < list.length; i++) {\n    const current = list[i];\n    if (\n      current.$dtId\n      && current.$metadata\n      && current.$metadata.$model\n      && !data.twins.some(t => t.$dtId === current.$dtId)\n    ) {\n      data.twins.push(current);\n      continue;\n    } else if (current.$relationshipId) {\n      data.relationships.push(current);\n      continue;\n    }\n\n    for (const k of Object.keys(current)) {\n      const v = current[k];\n      if (typeof v === \"object\") {\n        list.push(v);\n      } else if (Array.isArray(v)) {\n        v.forEach(x => list.push(x));\n      } else {\n        data.other.push(v);\n      }\n    }\n  }\n  return data;\n};\n\nclass CustomHttpClient {\n\n  constructor() {\n    this.client = new DefaultHttpClient();\n  }\n\n  sendRequest(httpRequest) {\n    const url = new URL(httpRequest.url);\n    url.searchParams.set(\"api-version\", API_VERSION);\n    httpRequest.headers.set(\"x-adt-host\", url.hostname);\n\n    const baseUrl = new URL(window.location.origin);\n    url.host = baseUrl.host;\n    url.pathname = `/api/proxy${url.pathname}`;\n    url.protocol = baseUrl.protocol;\n    httpRequest.url = url.toString();\n\n    return this.client.sendRequest(httpRequest);\n  }\n}\n\nclass ApiService {\n\n  constructor() {\n    this.client = null;\n  }\n\n  async initialize() {\n    const { appAdtUrl } = await configService.getConfig();\n\n    const nullTokenCredentials = {\n      getToken: () => null\n    };\n    const httpClient = new CustomHttpClient();\n    this.client = new DigitalTwinsClient(appAdtUrl, nullTokenCredentials, {\n      httpClient\n    });\n  }\n\n  async query(query, callback) {\n    await this.initialize();\n\n    let count = 1;\n    for await (const page of this.client.queryTwins(query).byPage()) {\n      print(`Ran query for twins, page ${count++}:`, \"info\");\n      print(JSON.stringify(page, null, 2), \"info\");\n      await callback(getDataFromQueryResponse(page.value));\n    }\n  }\n\n  async queryTwins(query) {\n    const list = [];\n    await this.query(query, ({ twins }) => twins.forEach(x => list.push(x)));\n\n    return list;\n  }\n\n  async getAllTwins() {\n    return await this.queryTwins(getAllTwinsQuery);\n  }\n\n  async queryModels(bypassCache = false) {\n    if (USE_LOCAL_MODELS && !bypassCache) {\n      try {\n        if (fs.existsSync(MODELS_FILE_PATH)) {\n          print(\"Loading models from local models.json file\", \"info\");\n          const modelsData = fs.readFileSync(MODELS_FILE_PATH, \"utf-8\");\n          return JSON.parse(modelsData);\n        }\n        print(\n          \"Local models.json file not found. Falling back to Azure Digital Twins.\",\n          \"warning\"\n        );\n      } catch (err) {\n        print(`Error reading models.json: ${err.message}`, \"error\");\n        throw err;\n      }\n    }\n\n    print(\"Fetching models from Azure Digital Twins\", \"info\");\n    await this.initialize();\n\n    const list = [];\n    const models = this.client.listModels([], true);\n    for await (const model of models) {\n      list.push(model);\n    }\n\n    return list;\n  }\n\n  async getModelById(modelId) {\n    await this.initialize();\n\n    return await this.client.getModel(modelId, true);\n  }\n\n  async addModels(models) {\n    await this.initialize();\n\n    return await this.client.createModels(models);\n  }\n\n  async deleteRelationship(twinId, relationshipId) {\n    await this.initialize();\n\n    print(\n      `Deleting relationship ${relationshipId} for twin ${twinId}`,\n      \"warning\"\n    );\n    await this.client.deleteRelationship(twinId, relationshipId);\n  }\n\n  async deleteTwin(twinId, skipRelationships = false) {\n    if (!skipRelationships) {\n      await this.deleteTwinRelationships(twinId);\n    }\n\n    print(`Deleting twin ${twinId}`, \"warning\");\n    await this.client.deleteDigitalTwin(twinId);\n  }\n\n  async deleteTwinRelationships(twinId, skipIncoming = false) {\n    await this.initialize();\n\n    const rels = await this.queryRelationships([ twinId ], REL_TYPE_OUTGOING);\n    for (const r of rels) {\n      await this.deleteRelationship(twinId, r.$relationshipId);\n    }\n\n    if (!skipIncoming) {\n      const incRels = await this.queryRelationships(\n        [ twinId ],\n        REL_TYPE_INCOMING\n      );\n      for (const r of incRels) {\n        await this.deleteRelationship(r.$sourceId, r.$relationshipId);\n      }\n    }\n  }\n\n  async deleteAllTwins(ids) {\n    await this.initialize();\n\n    const relsBs = new BatchService({\n      items: ids,\n      action: (item, resolve, reject) => {\n        this.deleteTwinRelationships(item, true).then(resolve, reject);\n      }\n    });\n    await relsBs.run();\n\n    const twinsBs = new BatchService({\n      items: ids,\n      action: (item, resolve, reject) => {\n        this.deleteTwin(item, true).then(resolve, reject);\n      }\n    });\n    await twinsBs.run();\n\n    print(\"*** Delete complete\", \"warning\");\n  }\n\n  async deleteModel(id) {\n    await this.initialize();\n    await this.client.deleteModel(id);\n    print(`*** Delete complete for model with ID: ${id}`, \"warning\");\n  }\n\n  async getRelationship(sourceTwinId, relationshipId) {\n    print(\n      `Get relationship with id ${relationshipId} for source twin ${sourceTwinId}`,\n      \"info\"\n    );\n    await this.initialize();\n    return await this.client.getRelationship(sourceTwinId, relationshipId);\n  }\n\n}\n\nexport const apiService = new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}