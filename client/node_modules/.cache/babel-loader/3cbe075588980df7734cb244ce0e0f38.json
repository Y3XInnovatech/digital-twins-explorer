{"ast":null,"code":"var _jsxFileName = \"/home/saharsh/digital-twins-explorer/client/src/components/ConfigurationFormComponent/ConfigurationFormComponent.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { Component } from \"react\";\nimport { TextField, DefaultButton, PrimaryButton, FocusZone, FocusZoneTabbableElements, Dropdown, Icon } from \"office-ui-fabric-react\";\nimport ModalComponent from \"../ModalComponent/ModalComponent\";\nimport { eventService } from \"../../services/EventService\";\nimport { settingsService } from \"../../services/SettingsService\";\nimport { configService } from \"../../services/ConfigService\";\nimport \"./ConfigurationFormComponent.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ConfigurationFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.loadConfigurationSettings = evt => {\n      if (evt.type === \"start\") {\n        this.setState({\n          showModal: true,\n          appAdtUrl: evt.appAdtUrl\n        });\n      }\n    };\n    this.saveConfigurationsSettings = e => {\n      e.preventDefault();\n      const config = {\n        appAdtUrl: this.state.appAdtUrl\n      };\n      if (this.validateConfig(config)) {\n        this.saveEnvironment(config);\n        configService.setConfig(config);\n        eventService.publishConfigure({\n          type: \"end\",\n          config\n        });\n        this.resetModalState();\n      }\n    };\n    this.saveEnvironment = config => {\n      const {\n        environmentOptions\n      } = this.state;\n      const {\n        appAdtUrl\n      } = config;\n      if (this.environments) {\n        const environment = this.environments.find(env => env.name === appAdtUrl);\n        if (environment) {\n          environment.config = config;\n        } else {\n          this.environments.push({\n            name: appAdtUrl,\n            config\n          });\n          environmentOptions.push(appAdtUrl);\n        }\n      } else {\n        this.environments = [{\n          name: appAdtUrl,\n          config\n        }];\n        environmentOptions.push(appAdtUrl);\n      }\n      settingsService.environments = this.environments;\n      eventService.publishEnvironmentChange();\n    };\n    this.validateConfig = config => {\n      if (!config.appAdtUrl) {\n        eventService.publishError({\n          customMessage: \"All fields are required.\"\n        });\n        return false;\n      }\n      if (!config.appAdtUrl.startsWith(\"https\")) {\n        eventService.publishError({\n          customMessage: \"Azure Digital Twins URL must start with ‘https’.\"\n        });\n        return false;\n      }\n      const regexp = /^(https):\\/\\/[\\w-]+.api.[\\w-.]+.[\\w-.]+digitaltwins[\\w-.]+/gm;\n      if (!regexp.test(config.appAdtUrl)) {\n        eventService.publishError({\n          customMessage: \"Azure Digital Twins URL must match the format 'https://<name>.api.<dc>.<domain>'.\"\n        });\n        return false;\n      }\n      return true;\n    };\n    this.closeConfigurationSettings = e => {\n      e.preventDefault();\n      eventService.publishConfigure({\n        type: \"end\"\n      });\n      this.resetModalState();\n    };\n    this.resetModalState = () => {\n      this.setState({\n        showModal: false,\n        appAdtUrl: \"\"\n      });\n    };\n    this.onSelectedEnvironmentChange = i => {\n      if (this.environments) {\n        const environment = this.environments.find(env => env.name === i.key);\n        if (environment) {\n          this.setState({\n            appAdtUrl: environment.name,\n            ...environment.config\n          });\n        }\n      }\n    };\n    this.onEnvironmentNameChange = e => {\n      this.setState({\n        appAdtUrl: e.target.value\n      });\n    };\n    this.onRemoveEnvironmentClick = (evt, item) => {\n      evt.stopPropagation();\n      const {\n        environmentOptions,\n        appAdtUrl\n      } = this.state;\n      const filteredOptions = environmentOptions.filter(option => option !== item);\n      this.environments = this.environments.filter(env => env.name !== item);\n      settingsService.environments = this.environments;\n      this.setState({\n        environmentOptions: filteredOptions\n      });\n      if (item === appAdtUrl) {\n        this.resetModalState(true);\n      }\n    };\n    this.onRenderOption = item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-option\",\n      onClick: () => this.onSelectedEnvironmentChange(item),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: item.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        className: \"close-icon\",\n        iconName: \"ChromeClose\",\n        \"aria-hidden\": \"true\",\n        onClick: e => this.onRemoveEnvironmentClick(e, item.key),\n        \"aria-label\": `Remove ${item.text} environment`,\n        role: \"button\",\n        title: \"Remove environment\",\n        tabIndex: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }, this);\n    this.onAppAdtUrlChange = evt => this.setState({\n      appAdtUrl: evt.target.value\n    });\n    this.getStyles = () => ({\n      root: {\n        width: 450\n      }\n    });\n    this.state = {\n      showModal: false,\n      appAdtUrl: \"\",\n      environmentOptions: [],\n      isEnvironmentSelected: false\n    };\n    this.environments = settingsService.environments;\n  }\n  async componentDidMount() {\n    eventService.subscribeConfigure(evt => {\n      this.loadConfigurationSettings(evt);\n    });\n    if (this.environments) {\n      this.setState({\n        environmentOptions: this.environments.map(env => env.name)\n      });\n    }\n    let config = {};\n    try {\n      config = await configService.getConfig();\n    } catch (exc) {\n      config = {};\n    }\n    if (config.appAdtUrl) {\n      this.setState({\n        isEnvironmentSelected: true\n      });\n    }\n  }\n  render() {\n    const {\n      appAdtUrl,\n      showModal,\n      environmentOptions\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(ModalComponent, {\n      isVisible: showModal,\n      className: \"configuration-settings\",\n      children: /*#__PURE__*/_jsxDEV(FocusZone, {\n        handleTabKey: FocusZoneTabbableElements.all,\n        isCircularNavigation: true,\n        defaultActiveElement: \"#appClientIdField\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.saveConfigurationsSettings,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"heading-2\",\n            children: this.props.t(\"configurationFormComponent.heading\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"select-settings\",\n            children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n              placeholder: \"Selected Environment\",\n              options: environmentOptions.filter(env => env !== appAdtUrl).map(env => ({\n                key: env,\n                text: env\n              })),\n              onRenderOption: this.onRenderOption,\n              styles: {\n                dropdown: {\n                  width: \"100%\"\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              autoFocus: true,\n              required: true,\n              id: \"appAdtUrlField\",\n              label: this.props.t(\"configurationFormComponent.appAdtUrlField\"),\n              className: \"configuration-input\",\n              styles: this.getStyles,\n              value: appAdtUrl,\n              onChange: this.onAppAdtUrlChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", this.props.t(\"configurationFormComponent.detail\")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group\",\n            children: [/*#__PURE__*/_jsxDEV(PrimaryButton, {\n              type: \"submit\",\n              className: \"modal-button save-button\",\n              onClick: this.saveConfigurationsSettings,\n              children: this.props.t(\"configurationFormComponent.saveButton\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this), this.state.isEnvironmentSelected && /*#__PURE__*/_jsxDEV(DefaultButton, {\n              className: \"modal-button cancel-button\",\n              onClick: this.closeConfigurationSettings,\n              children: this.props.t(\"configurationFormComponent.cancelButton\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","TextField","DefaultButton","PrimaryButton","FocusZone","FocusZoneTabbableElements","Dropdown","Icon","ModalComponent","eventService","settingsService","configService","jsxDEV","_jsxDEV","ConfigurationFormComponent","constructor","props","loadConfigurationSettings","evt","type","setState","showModal","appAdtUrl","saveConfigurationsSettings","e","preventDefault","config","state","validateConfig","saveEnvironment","setConfig","publishConfigure","resetModalState","environmentOptions","environments","environment","find","env","name","push","publishEnvironmentChange","publishError","customMessage","startsWith","regexp","test","closeConfigurationSettings","onSelectedEnvironmentChange","i","key","onEnvironmentNameChange","target","value","onRemoveEnvironmentClick","item","stopPropagation","filteredOptions","filter","option","onRenderOption","className","onClick","children","text","fileName","_jsxFileName","lineNumber","columnNumber","iconName","role","title","tabIndex","onAppAdtUrlChange","getStyles","root","width","isEnvironmentSelected","componentDidMount","subscribeConfigure","map","getConfig","exc","render","isVisible","handleTabKey","all","isCircularNavigation","defaultActiveElement","onSubmit","t","placeholder","options","styles","dropdown","autoFocus","required","id","label","onChange"],"sources":["/home/saharsh/digital-twins-explorer/client/src/components/ConfigurationFormComponent/ConfigurationFormComponent.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { Component } from \"react\";\nimport {\n  TextField,\n  DefaultButton,\n  PrimaryButton,\n  FocusZone,\n  FocusZoneTabbableElements,\n  Dropdown,\n  Icon\n} from \"office-ui-fabric-react\";\nimport ModalComponent from \"../ModalComponent/ModalComponent\";\nimport { eventService } from \"../../services/EventService\";\nimport { settingsService } from \"../../services/SettingsService\";\nimport { configService } from \"../../services/ConfigService\";\n\nimport \"./ConfigurationFormComponent.scss\";\n\nexport class ConfigurationFormComponent extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false,\n      appAdtUrl: \"\",\n      environmentOptions: [],\n      isEnvironmentSelected: false\n    };\n    this.environments = settingsService.environments;\n  }\n\n  async componentDidMount() {\n    eventService.subscribeConfigure(evt => {\n      this.loadConfigurationSettings(evt);\n    });\n    if (this.environments) {\n      this.setState({\n        environmentOptions: this.environments.map(env => env.name)\n      });\n    }\n\n    let config = {};\n    try {\n      config = await configService.getConfig();\n    } catch (exc) {\n      config = {};\n    }\n\n    if (config.appAdtUrl) {\n      this.setState({ isEnvironmentSelected: true });\n    }\n  }\n\n  loadConfigurationSettings = evt => {\n    if (evt.type === \"start\") {\n      this.setState({ showModal: true, appAdtUrl: evt.appAdtUrl });\n    }\n  };\n\n  saveConfigurationsSettings = e => {\n    e.preventDefault();\n    const config = {\n      appAdtUrl: this.state.appAdtUrl\n    };\n    if (this.validateConfig(config)) {\n      this.saveEnvironment(config);\n      configService.setConfig(config);\n      eventService.publishConfigure({ type: \"end\", config });\n      this.resetModalState();\n    }\n  };\n\n  saveEnvironment = config => {\n    const { environmentOptions } = this.state;\n    const { appAdtUrl } = config;\n    if (this.environments) {\n      const environment = this.environments.find(\n        env => env.name === appAdtUrl\n      );\n      if (environment) {\n        environment.config = config;\n      } else {\n        this.environments.push({ name: appAdtUrl, config });\n        environmentOptions.push(appAdtUrl);\n      }\n    } else {\n      this.environments = [ { name: appAdtUrl, config } ];\n      environmentOptions.push(appAdtUrl);\n    }\n    settingsService.environments = this.environments;\n    eventService.publishEnvironmentChange();\n  };\n\n  validateConfig = config => {\n    if (!config.appAdtUrl) {\n      eventService.publishError({\n        customMessage: \"All fields are required.\"\n      });\n      return false;\n    }\n\n    if (!config.appAdtUrl.startsWith(\"https\")) {\n      eventService.publishError({\n        customMessage: \"Azure Digital Twins URL must start with ‘https’.\"\n      });\n      return false;\n    }\n\n    const regexp = /^(https):\\/\\/[\\w-]+.api.[\\w-.]+.[\\w-.]+digitaltwins[\\w-.]+/gm;\n    if (!regexp.test(config.appAdtUrl)) {\n      eventService.publishError({\n        customMessage: \"Azure Digital Twins URL must match the format 'https://<name>.api.<dc>.<domain>'.\"\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  closeConfigurationSettings = e => {\n    e.preventDefault();\n    eventService.publishConfigure({ type: \"end\" });\n    this.resetModalState();\n  };\n\n  resetModalState = () => {\n    this.setState({\n      showModal: false,\n      appAdtUrl: \"\"\n    });\n  };\n\n  onSelectedEnvironmentChange = i => {\n    if (this.environments) {\n      const environment = this.environments.find(env => env.name === i.key);\n      if (environment) {\n        this.setState({ appAdtUrl: environment.name, ...environment.config });\n      }\n    }\n  };\n\n  onEnvironmentNameChange = e => {\n    this.setState({ appAdtUrl: e.target.value });\n  };\n\n  onRemoveEnvironmentClick = (evt, item) => {\n    evt.stopPropagation();\n    const { environmentOptions, appAdtUrl } = this.state;\n    const filteredOptions = environmentOptions.filter(\n      option => option !== item\n    );\n    this.environments = this.environments.filter(env => env.name !== item);\n    settingsService.environments = this.environments;\n    this.setState({ environmentOptions: filteredOptions });\n    if (item === appAdtUrl) {\n      this.resetModalState(true);\n    }\n  };\n\n  onRenderOption = item => (\n    <div\n      className=\"dropdown-option\"\n      onClick={() => this.onSelectedEnvironmentChange(item)}>\n      <span>{item.text}</span>\n      <Icon\n        className=\"close-icon\"\n        iconName=\"ChromeClose\"\n        aria-hidden=\"true\"\n        onClick={e => this.onRemoveEnvironmentClick(e, item.key)}\n        aria-label={`Remove ${item.text} environment`}\n        role=\"button\"\n        title=\"Remove environment\"\n        tabIndex=\"0\" />\n    </div>\n  );\n\n  onAppAdtUrlChange = evt => this.setState({ appAdtUrl: evt.target.value });\n\n  getStyles = () => ({\n    root: {\n      width: 450\n    }\n  });\n\n  render() {\n    const { appAdtUrl, showModal, environmentOptions } = this.state;\n\n    return (\n      <ModalComponent isVisible={showModal} className=\"configuration-settings\">\n        <FocusZone\n          handleTabKey={FocusZoneTabbableElements.all}\n          isCircularNavigation\n          defaultActiveElement=\"#appClientIdField\">\n          <form onSubmit={this.saveConfigurationsSettings}>\n            <h2 className=\"heading-2\">{this.props.t(\"configurationFormComponent.heading\")}</h2>\n            <div className=\"select-settings\">\n              <Dropdown\n                placeholder=\"Selected Environment\"\n                options={environmentOptions\n                  .filter(env => env !== appAdtUrl)\n                  .map(env => ({ key: env, text: env }))}\n                onRenderOption={this.onRenderOption}\n                styles={{\n                  dropdown: { width: \"100%\" }\n                }} />\n              <TextField\n                autoFocus\n                required\n                id=\"appAdtUrlField\"\n                label={this.props.t(\"configurationFormComponent.appAdtUrlField\")}\n                className=\"configuration-input\"\n                styles={this.getStyles}\n                value={appAdtUrl}\n                onChange={this.onAppAdtUrlChange} />\n            </div>\n            <p> {this.props.t(\"configurationFormComponent.detail\")}</p>\n            <div className=\"btn-group\">\n              <PrimaryButton\n                type=\"submit\"\n                className=\"modal-button save-button\"\n                onClick={this.saveConfigurationsSettings}>\n                {this.props.t(\"configurationFormComponent.saveButton\")}\n              </PrimaryButton>\n              {this.state.isEnvironmentSelected && <DefaultButton\n                className=\"modal-button cancel-button\"\n                onClick={this.closeConfigurationSettings}>\n                {this.props.t(\"configurationFormComponent.cancelButton\")}\n              </DefaultButton>}\n            </div>\n          </form>\n        </FocusZone>\n      </ModalComponent>\n    );\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}