{"ast":null,"code":"/**\n * Concatination helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nexport function css() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var classes = [];\n  for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n    var arg = args_1[_a];\n    if (arg) {\n      if (typeof arg === 'string') {\n        classes.push(arg);\n      } else if (arg.hasOwnProperty('toString') && typeof arg.toString === 'function') {\n        classes.push(arg.toString());\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (var key in arg) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          if (arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n  }\n  return classes.join(' ');\n}","map":{"version":3,"sources":["css.ts"],"names":[],"mappings":"AAyBA;;;;AAIG;AACH,OAAM,SAAU,GAAG,CAAA,EAAA;EAAC,IAAA,IAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAoB,EAApB,EAAA,GAAA,SAAA,CAAA,MAAoB,EAApB,EAAA,EAAoB,EAAA;IAApB,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAClB,IAAI,OAAO,GAAG,EAAE;EAEhB,KAAgB,IAAA,EAAA,GAAA,CAAI,EAAJ,MAAA,GAAA,IAAI,EAAJ,EAAA,GAAA,MAAA,CAAA,MAAI,EAAJ,EAAA,EAAI,EAAE;IAAjB,IAAI,GAAG,GAAA,MAAA,CAAA,EAAA,CAAA;IACV,IAAI,GAAG,EAAE;MACP,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;OAClB,MAAM,IAAI,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,OAAO,GAAG,CAAC,QAAQ,KAAK,UAAU,EAAE;QAC/E,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAA,CAAE,CAAC;OAC7B,MAAM;QACL;QACA,KAAK,IAAI,GAAG,IAAI,GAAU,EAAE;UAC1B;UACA,IAAK,GAAW,CAAC,GAAG,CAAC,EAAE;YACrB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;UAClB;QACF;MACF;IACF;EACF;EAED,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;AAC1B","sourcesContent":["/**\n * Dictionary of booleans.\n *\n * @internal\n */\nexport interface IDictionary {\n  [className: string]: boolean;\n}\n\n/**\n * Serializable object.\n *\n * @internal\n */\nexport interface ISerializableObject {\n  toString?: () => string;\n}\n\n/**\n * css input type.\n *\n * @internal\n */\nexport type ICssInput = string | ISerializableObject | IDictionary | null | undefined | boolean;\n\n/**\n * Concatination helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nexport function css(...args: ICssInput[]): string {\n  let classes = [];\n\n  for (let arg of args) {\n    if (arg) {\n      if (typeof arg === 'string') {\n        classes.push(arg);\n      } else if (arg.hasOwnProperty('toString') && typeof arg.toString === 'function') {\n        classes.push(arg.toString());\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (let key in arg as any) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          if ((arg as any)[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n  }\n\n  return classes.join(' ');\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}