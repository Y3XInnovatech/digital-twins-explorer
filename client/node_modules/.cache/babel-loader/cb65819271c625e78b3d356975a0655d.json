{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getGlobalObject } from \"./global\";\n// V1 = OpenTelemetry 0.1\n// V2 = OpenTelemetry 0.2\n// V3 = OpenTelemetry 0.6.1\nvar GLOBAL_TRACER_VERSION = 3;\n// preview5 shipped with @azure/core-tracing.tracerCache\n// and didn't have smart detection for collisions\nvar GLOBAL_TRACER_SYMBOL = Symbol.for(\"@azure/core-tracing.tracerCache2\");\nvar cache;\nfunction loadTracerCache() {\n  var globalObj = getGlobalObject();\n  var existingCache = globalObj[GLOBAL_TRACER_SYMBOL];\n  var setGlobalCache = true;\n  if (existingCache) {\n    if (existingCache.version === GLOBAL_TRACER_VERSION) {\n      cache = existingCache;\n    } else {\n      setGlobalCache = false;\n      if (existingCache.tracer) {\n        throw new Error(\"Two incompatible versions of @azure/core-tracing have been loaded.\\n          This library is \" + GLOBAL_TRACER_VERSION + \", existing is \" + existingCache.version + \".\");\n      }\n    }\n  }\n  if (!cache) {\n    cache = {\n      tracer: undefined,\n      version: GLOBAL_TRACER_VERSION\n    };\n  }\n  if (setGlobalCache) {\n    globalObj[GLOBAL_TRACER_SYMBOL] = cache;\n  }\n}\nexport function getCache() {\n  if (!cache) {\n    loadTracerCache();\n  }\n  return cache;\n}","map":{"version":3,"sources":["../../../src/utils/cache.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SAAS,eAAe,QAAQ,UAAU;AAE1C;AACA;AACA;AACA,IAAM,qBAAqB,GAAG,CAAC;AAC/B;AACA;AACA,IAAM,oBAAoB,GAAG,MAAM,CAAC,GAAG,CAAC,kCAAkC,CAAC;AAO3E,IAAI,KAAkB;AAEtB,SAAS,eAAe,CAAA,EAAA;EACtB,IAAM,SAAS,GAAG,eAAe,CAAA,CAAE;EACnC,IAAM,aAAa,GAAgB,SAAS,CAAC,oBAAoB,CAAC;EAClE,IAAI,cAAc,GAAG,IAAI;EACzB,IAAI,aAAa,EAAE;IACjB,IAAI,aAAa,CAAC,OAAO,KAAK,qBAAqB,EAAE;MACnD,KAAK,GAAG,aAAa;KACtB,MAAM;MACL,cAAc,GAAG,KAAK;MACtB,IAAI,aAAa,CAAC,MAAM,EAAE;QACxB,MAAM,IAAI,KAAK,CACb,gGAAA,GACkB,qBAAqB,GAAA,gBAAA,GAAiB,aAAa,CAAC,OAAO,GAAA,GAAG,CACjF;MACF;IACF;EACF;EAED,IAAI,CAAC,KAAK,EAAE;IACV,KAAK,GAAG;MACN,MAAM,EAAE,SAAS;MACjB,OAAO,EAAE;KACV;EACF;EACD,IAAI,cAAc,EAAE;IAClB,SAAS,CAAC,oBAAoB,CAAC,GAAG,KAAK;EACxC;AACH;AAEA,OAAM,SAAU,QAAQ,CAAA,EAAA;EACtB,IAAI,CAAC,KAAK,EAAE;IACV,eAAe,CAAA,CAAE;EAClB;EACD,OAAO,KAAK;AACd","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Tracer } from \"@opentelemetry/api\";\nimport { getGlobalObject } from \"./global\";\n\n// V1 = OpenTelemetry 0.1\n// V2 = OpenTelemetry 0.2\n// V3 = OpenTelemetry 0.6.1\nconst GLOBAL_TRACER_VERSION = 3;\n// preview5 shipped with @azure/core-tracing.tracerCache\n// and didn't have smart detection for collisions\nconst GLOBAL_TRACER_SYMBOL = Symbol.for(\"@azure/core-tracing.tracerCache2\");\n\nexport interface TracerCache {\n  version: number;\n  tracer?: Tracer;\n}\n\nlet cache: TracerCache;\n\nfunction loadTracerCache(): void {\n  const globalObj = getGlobalObject();\n  const existingCache: TracerCache = globalObj[GLOBAL_TRACER_SYMBOL];\n  let setGlobalCache = true;\n  if (existingCache) {\n    if (existingCache.version === GLOBAL_TRACER_VERSION) {\n      cache = existingCache;\n    } else {\n      setGlobalCache = false;\n      if (existingCache.tracer) {\n        throw new Error(\n          `Two incompatible versions of @azure/core-tracing have been loaded.\n          This library is ${GLOBAL_TRACER_VERSION}, existing is ${existingCache.version}.`\n        );\n      }\n    }\n  }\n\n  if (!cache) {\n    cache = {\n      tracer: undefined,\n      version: GLOBAL_TRACER_VERSION\n    };\n  }\n  if (setGlobalCache) {\n    globalObj[GLOBAL_TRACER_SYMBOL] = cache;\n  }\n}\n\nexport function getCache(): TracerCache {\n  if (!cache) {\n    loadTracerCache();\n  }\n  return cache;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}