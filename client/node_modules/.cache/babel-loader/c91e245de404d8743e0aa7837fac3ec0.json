{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { GlobalSettings, warn } from '@uifabric/utilities';\nimport { fontFace, mergeStyles, Stylesheet } from '@uifabric/merge-styles';\nvar ICON_SETTING_NAME = 'icons';\nvar _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {\n  __options: {\n    disableWarnings: false,\n    warnOnMissingIcons: true\n  },\n  __remapped: {}\n});\n// Reset icon registration on stylesheet resets.\nvar stylesheet = Stylesheet.getInstance();\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(function () {\n    for (var name_1 in _iconSettings) {\n      if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {\n        _iconSettings[name_1].subset.className = undefined;\n      }\n    }\n  });\n}\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\nvar normalizeIconName = function (name) {\n  return name.toLowerCase();\n};\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\nexport function registerIcons(iconSubset, options) {\n  var subset = __assign(__assign({}, iconSubset), {\n    isRegistered: false,\n    className: undefined\n  });\n  var icons = iconSubset.icons;\n  // Grab options, optionally mix user provided ones on top.\n  options = options ? __assign(__assign({}, _iconSettings.__options), options) : _iconSettings.__options;\n  for (var iconName in icons) {\n    if (icons.hasOwnProperty(iconName)) {\n      var code = icons[iconName];\n      var normalizedIconName = normalizeIconName(iconName);\n      if (_iconSettings[normalizedIconName]) {\n        _warnDuplicateIcon(iconName);\n      } else {\n        _iconSettings[normalizedIconName] = {\n          code: code,\n          subset: subset\n        };\n      }\n    }\n  }\n}\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\nexport function unregisterIcons(iconNames) {\n  var options = _iconSettings.__options;\n  var _loop_1 = function (iconName) {\n    var normalizedIconName = normalizeIconName(iconName);\n    if (_iconSettings[normalizedIconName]) {\n      delete _iconSettings[normalizedIconName];\n    } else {\n      // Warn that we are trying to delete an icon that doesn't exist\n      if (!options.disableWarnings) {\n        warn(\"The icon \\\"\" + iconName + \"\\\" tried to unregister but was not registered.\");\n      }\n    }\n    // Delete any aliases for this iconName\n    if (_iconSettings.__remapped[normalizedIconName]) {\n      delete _iconSettings.__remapped[normalizedIconName];\n    }\n    // Delete any items that were an alias for this iconName\n    Object.keys(_iconSettings.__remapped).forEach(function (key) {\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\n        delete _iconSettings.__remapped[key];\n      }\n    });\n  };\n  for (var _i = 0, iconNames_1 = iconNames; _i < iconNames_1.length; _i++) {\n    var iconName = iconNames_1[_i];\n    _loop_1(iconName);\n  }\n}\n/**\n * Remaps one icon name to another.\n */\nexport function registerIconAlias(iconName, mappedToName) {\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\nexport function getIcon(name) {\n  var icon = undefined;\n  var options = _iconSettings.__options;\n  name = name ? normalizeIconName(name) : '';\n  name = _iconSettings.__remapped[name] || name;\n  if (name) {\n    icon = _iconSettings[name];\n    if (icon) {\n      var subset = icon.subset;\n      if (subset && subset.fontFace) {\n        if (!subset.isRegistered) {\n          fontFace(subset.fontFace);\n          subset.isRegistered = true;\n        }\n        if (!subset.className) {\n          subset.className = mergeStyles(subset.style, {\n            fontFamily: subset.fontFace.fontFamily,\n            fontWeight: subset.fontFace.fontWeight || 'normal',\n            fontStyle: subset.fontFace.fontStyle || 'normal'\n          });\n        }\n      }\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\n        warn(\"The icon \\\"\" + name + \"\\\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.\");\n      }\n    }\n  }\n  return icon;\n}\n/**\n * Sets the icon options.\n *\n * @public\n */\nexport function setIconOptions(options) {\n  _iconSettings.__options = __assign(__assign({}, _iconSettings.__options), options);\n}\nvar _missingIcons = [];\nvar _missingIconsTimer = undefined;\nfunction _warnDuplicateIcon(iconName) {\n  var options = _iconSettings.__options;\n  var warningDelay = 2000;\n  var maxIconsInMessage = 10;\n  if (!options.disableWarnings) {\n    _missingIcons.push(iconName);\n    if (_missingIconsTimer === undefined) {\n      _missingIconsTimer = setTimeout(function () {\n        warn(\"Some icons were re-registered. Applications should only call registerIcons for any given \" + \"icon once. Redefining what an icon is may have unintended consequences. Duplicates \" + \"include: \\n\" + _missingIcons.slice(0, maxIconsInMessage).join(', ') + (_missingIcons.length > maxIconsInMessage ? \" (+ \" + (_missingIcons.length - maxIconsInMessage) + \" more)\" : ''));\n        _missingIconsTimer = undefined;\n        _missingIcons = [];\n      }, warningDelay);\n    }\n  }\n}","map":{"version":3,"sources":["utilities/icons.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalSettings, warn } from '@uifabric/utilities';\nimport { IRawStyle, IFontFace, fontFace, mergeStyles, Stylesheet } from '@uifabric/merge-styles';\n\nexport interface IIconSubset {\n  fontFace?: IFontFace;\n  icons: {\n    [key: string]: string | JSX.Element;\n  };\n\n  style?: IRawStyle;\n}\n\nexport interface IIconSubsetRecord extends IIconSubset {\n  isRegistered?: boolean;\n  className?: string;\n}\n\nexport interface IIconRecord {\n  code: string | undefined;\n  subset: IIconSubsetRecord;\n}\n\nexport interface IIconOptions {\n  /**\n   * By default, registering the same set of icons will generate a console warning per duplicate icon\n   * registered, because this scenario can create unexpected consequences.\n   *\n   * Some scenarios include:\n   *\n   * Icon set was previously registered using a different base url.\n   * Icon set was previously registered but a different version was provided.\n   * Icons in a previous registered set overlap with a new set.\n   *\n   * To simply ignore previously registered icons, you can specify to disable warnings. This means\n   * that if an icon which was previous registered is registered again, it will be silently ignored.\n   * However, consider whether the problems listed above will cause issues.\n   **/\n  disableWarnings: boolean;\n\n  /**\n   * @deprecated\n   * Use 'disableWarnings' instead.\n   */\n  warnOnMissingIcons?: boolean;\n}\n\nexport interface IIconRecords {\n  __options: IIconOptions;\n  __remapped: { [key: string]: string };\n  [key: string]: IIconRecord | {};\n}\n\nconst ICON_SETTING_NAME = 'icons';\n\nconst _iconSettings = GlobalSettings.getValue<IIconRecords>(ICON_SETTING_NAME, {\n  __options: {\n    disableWarnings: false,\n    warnOnMissingIcons: true,\n  },\n  __remapped: {},\n});\n\n// Reset icon registration on stylesheet resets.\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(() => {\n    for (const name in _iconSettings) {\n      if (_iconSettings.hasOwnProperty(name) && !!(_iconSettings[name] as IIconRecord).subset) {\n        (_iconSettings[name] as IIconRecord).subset.className = undefined;\n      }\n    }\n  });\n}\n\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\nconst normalizeIconName = (name: string): string => name.toLowerCase();\n\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\nexport function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void {\n  let subset = {\n    ...iconSubset,\n    isRegistered: false,\n    className: undefined,\n  };\n  let { icons } = iconSubset;\n\n  // Grab options, optionally mix user provided ones on top.\n  options = options ? { ..._iconSettings.__options, ...options } : _iconSettings.__options;\n\n  for (const iconName in icons) {\n    if (icons.hasOwnProperty(iconName)) {\n      const code = icons[iconName];\n      const normalizedIconName = normalizeIconName(iconName);\n\n      if (_iconSettings[normalizedIconName]) {\n        _warnDuplicateIcon(iconName);\n      } else {\n        _iconSettings[normalizedIconName] = {\n          code,\n          subset,\n        } as IIconRecord;\n      }\n    }\n  }\n}\n\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\nexport function unregisterIcons(iconNames: string[]): void {\n  const options = _iconSettings.__options;\n\n  for (const iconName of iconNames) {\n    const normalizedIconName = normalizeIconName(iconName);\n    if (_iconSettings[normalizedIconName]) {\n      delete _iconSettings[normalizedIconName];\n    } else {\n      // Warn that we are trying to delete an icon that doesn't exist\n      if (!options.disableWarnings) {\n        warn(`The icon \"${iconName}\" tried to unregister but was not registered.`);\n      }\n    }\n\n    // Delete any aliases for this iconName\n    if (_iconSettings.__remapped[normalizedIconName]) {\n      delete _iconSettings.__remapped[normalizedIconName];\n    }\n\n    // Delete any items that were an alias for this iconName\n    Object.keys(_iconSettings.__remapped).forEach((key: string) => {\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\n        delete _iconSettings.__remapped[key];\n      }\n    });\n  }\n}\n\n/**\n * Remaps one icon name to another.\n */\nexport function registerIconAlias(iconName: string, mappedToName: string): void {\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\nexport function getIcon(name?: string): IIconRecord | undefined {\n  let icon: IIconRecord | undefined = undefined;\n  const options = _iconSettings.__options;\n\n  name = name ? normalizeIconName(name) : '';\n  name = _iconSettings.__remapped[name] || name;\n\n  if (name) {\n    icon = _iconSettings[name!] as IIconRecord;\n\n    if (icon) {\n      let { subset } = icon;\n      if (subset && subset.fontFace) {\n        if (!subset.isRegistered) {\n          fontFace(subset.fontFace);\n          subset.isRegistered = true;\n        }\n\n        if (!subset.className) {\n          subset.className = mergeStyles(subset.style, {\n            fontFamily: subset.fontFace.fontFamily,\n            fontWeight: subset.fontFace.fontWeight || 'normal',\n            fontStyle: subset.fontFace.fontStyle || 'normal',\n          });\n        }\n      }\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\n        warn(\n          `The icon \"${name}\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.`,\n        );\n      }\n    }\n  }\n\n  return icon;\n}\n\n/**\n * Sets the icon options.\n *\n * @public\n */\nexport function setIconOptions(options: Partial<IIconOptions>): void {\n  _iconSettings.__options = {\n    ..._iconSettings.__options,\n    ...options,\n  };\n}\n\nlet _missingIcons: string[] = [];\nlet _missingIconsTimer: number | undefined = undefined;\n\nfunction _warnDuplicateIcon(iconName: string): void {\n  const options = _iconSettings.__options;\n  const warningDelay = 2000;\n  const maxIconsInMessage = 10;\n\n  if (!options.disableWarnings) {\n    _missingIcons.push(iconName);\n    if (_missingIconsTimer === undefined) {\n      _missingIconsTimer = setTimeout(() => {\n        warn(\n          `Some icons were re-registered. Applications should only call registerIcons for any given ` +\n            `icon once. Redefining what an icon is may have unintended consequences. Duplicates ` +\n            `include: \\n` +\n            _missingIcons.slice(0, maxIconsInMessage).join(', ') +\n            (_missingIcons.length > maxIconsInMessage ? ` (+ ${_missingIcons.length - maxIconsInMessage} more)` : ''),\n        );\n        _missingIconsTimer = undefined;\n        _missingIcons = [];\n      }, warningDelay);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}