{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Icon } from '../../Icon';\nimport { Image } from '../../Image';\nimport { Link } from '../../Link';\nimport { classNamesFunction, css, initializeComponentRef } from '../../Utilities';\nvar LIST_ITEM_COUNT = 3;\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory DocumentCard}\n */\nvar DocumentCardPreviewBase = /** @class */function (_super) {\n  __extends(DocumentCardPreviewBase, _super);\n  function DocumentCardPreviewBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._renderPreviewList = function (previewImages) {\n      var getOverflowDocumentCountText = _this.props.getOverflowDocumentCountText;\n      // Determine how many documents we won't be showing\n      var overflowDocumentCount = previewImages.length - LIST_ITEM_COUNT;\n      // Determine the overflow text that will be rendered after the preview list.\n      var overflowText = overflowDocumentCount ? getOverflowDocumentCountText ? getOverflowDocumentCountText(overflowDocumentCount) : '+' + overflowDocumentCount : null;\n      // Create list items for the documents to be shown\n      var fileListItems = previewImages.slice(0, LIST_ITEM_COUNT).map(function (file, fileIndex) {\n        return React.createElement(\"li\", {\n          key: fileIndex\n        }, React.createElement(Image, {\n          className: _this._classNames.fileListIcon,\n          src: file.iconSrc,\n          role: \"presentation\",\n          alt: \"\",\n          width: \"16px\",\n          height: \"16px\"\n        }), React.createElement(Link, __assign({\n          className: _this._classNames.fileListLink\n        }, (file.linkProps, {\n          href: file.linkProps && file.linkProps.href || file.url\n        })), file.name));\n      });\n      return React.createElement(\"div\", null, React.createElement(\"ul\", {\n        className: _this._classNames.fileList\n      }, fileListItems), overflowText && React.createElement(\"span\", {\n        className: _this._classNames.fileListOverflowText\n      }, overflowText));\n    };\n    initializeComponentRef(_this);\n    return _this;\n  }\n  DocumentCardPreviewBase.prototype.render = function () {\n    var _a = this.props,\n      previewImages = _a.previewImages,\n      styles = _a.styles,\n      theme = _a.theme,\n      className = _a.className;\n    var style;\n    var preview;\n    var isFileList = previewImages.length > 1;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isFileList: isFileList\n    });\n    if (previewImages.length > 1) {\n      // Render a list of files\n      preview = this._renderPreviewList(previewImages);\n    } else if (previewImages.length === 1) {\n      // Render a single preview\n      preview = this._renderPreviewImage(previewImages[0]);\n      // Override the border color if an accent color was provided\n      /* eslint-disable deprecation/deprecation */\n      if (previewImages[0].accentColor) {\n        style = {\n          borderBottomColor: previewImages[0].accentColor\n        };\n      }\n      /* eslint-enable deprecation/deprecation */\n    }\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: style\n    }, preview);\n  };\n  DocumentCardPreviewBase.prototype._renderPreviewImage = function (previewImage) {\n    var width = previewImage.width,\n      height = previewImage.height,\n      imageFit = previewImage.imageFit,\n      previewIconProps = previewImage.previewIconProps,\n      previewIconContainerClass = previewImage.previewIconContainerClass;\n    if (previewIconProps) {\n      return React.createElement(\"div\", {\n        className: css(this._classNames.previewIcon, previewIconContainerClass),\n        style: {\n          width: width,\n          height: height\n        }\n      }, React.createElement(Icon, __assign({}, previewIconProps)));\n    }\n    var image = React.createElement(Image, {\n      width: width,\n      height: height,\n      imageFit: imageFit,\n      src: previewImage.previewImageSrc,\n      role: \"presentation\",\n      alt: \"\"\n    });\n    var icon;\n    if (previewImage.iconSrc) {\n      icon = React.createElement(Image, {\n        className: this._classNames.icon,\n        src: previewImage.iconSrc,\n        role: \"presentation\",\n        alt: \"\"\n      });\n    }\n    return React.createElement(\"div\", null, image, icon);\n  };\n  return DocumentCardPreviewBase;\n}(React.Component);\nexport { DocumentCardPreviewBase };","map":{"version":3,"sources":["components/DocumentCard/DocumentCardPreview.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Icon } from '../../Icon';\nimport { Image } from '../../Image';\nimport { Link } from '../../Link';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { classNamesFunction, css, initializeComponentRef } from '../../Utilities';\nimport {\n  IDocumentCardPreviewImage,\n  IDocumentCardPreviewProps,\n  IDocumentCardPreviewStyleProps,\n  IDocumentCardPreviewStyles,\n} from './DocumentCardPreview.types';\n\nconst LIST_ITEM_COUNT = 3;\nconst getClassNames = classNamesFunction<IDocumentCardPreviewStyleProps, IDocumentCardPreviewStyles>();\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardPreviewBase extends React.Component<IDocumentCardPreviewProps, any> {\n  private _classNames: IProcessedStyleSet<IDocumentCardPreviewStyles>;\n\n  constructor(props: IDocumentCardPreviewProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { previewImages, styles, theme, className } = this.props;\n    let style: React.CSSProperties | undefined;\n    let preview: React.ReactNode;\n    const isFileList = previewImages.length > 1;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isFileList,\n    });\n\n    if (previewImages.length > 1) {\n      // Render a list of files\n      preview = this._renderPreviewList(previewImages);\n    } else if (previewImages.length === 1) {\n      // Render a single preview\n      preview = this._renderPreviewImage(previewImages[0]);\n\n      // Override the border color if an accent color was provided\n      /* eslint-disable deprecation/deprecation */\n      if (previewImages[0].accentColor) {\n        style = {\n          borderBottomColor: previewImages[0].accentColor,\n        };\n      }\n      /* eslint-enable deprecation/deprecation */\n    }\n\n    return (\n      <div className={this._classNames.root} style={style}>\n        {preview}\n      </div>\n    );\n  }\n\n  private _renderPreviewImage(\n    previewImage: IDocumentCardPreviewImage,\n  ): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> {\n    const { width, height, imageFit, previewIconProps, previewIconContainerClass } = previewImage;\n\n    if (previewIconProps) {\n      return (\n        <div\n          className={css(this._classNames.previewIcon, previewIconContainerClass)}\n          style={{ width: width, height: height }}\n        >\n          <Icon {...previewIconProps} />\n        </div>\n      );\n    }\n\n    const image = (\n      <Image\n        width={width}\n        height={height}\n        imageFit={imageFit}\n        src={previewImage.previewImageSrc}\n        role=\"presentation\"\n        alt=\"\"\n      />\n    );\n\n    let icon;\n    if (previewImage.iconSrc) {\n      icon = <Image className={this._classNames.icon} src={previewImage.iconSrc} role=\"presentation\" alt=\"\" />;\n    }\n\n    return (\n      <div>\n        {image}\n        {icon}\n      </div>\n    );\n  }\n\n  private _renderPreviewList = (\n    previewImages: IDocumentCardPreviewImage[],\n  ): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> => {\n    const { getOverflowDocumentCountText } = this.props;\n\n    // Determine how many documents we won't be showing\n    const overflowDocumentCount = previewImages.length - LIST_ITEM_COUNT;\n\n    // Determine the overflow text that will be rendered after the preview list.\n    const overflowText = overflowDocumentCount\n      ? getOverflowDocumentCountText\n        ? getOverflowDocumentCountText(overflowDocumentCount)\n        : '+' + overflowDocumentCount\n      : null;\n\n    // Create list items for the documents to be shown\n    const fileListItems = previewImages.slice(0, LIST_ITEM_COUNT).map((file, fileIndex) => (\n      <li key={fileIndex}>\n        <Image\n          className={this._classNames.fileListIcon}\n          src={file.iconSrc}\n          role=\"presentation\"\n          alt=\"\"\n          width=\"16px\"\n          height=\"16px\"\n        />\n        <Link\n          className={this._classNames.fileListLink}\n          // eslint-disable-next-line deprecation/deprecation\n          {...(file.linkProps, { href: (file.linkProps && file.linkProps.href) || file.url })}\n        >\n          {file.name}\n        </Link>\n      </li>\n    ));\n\n    return (\n      <div>\n        <ul className={this._classNames.fileList}>{fileListItems}</ul>\n        {overflowText && <span className={this._classNames.fileListOverflowText}>{overflowText}</span>}\n      </div>\n    );\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}