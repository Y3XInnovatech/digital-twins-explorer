{"ast":null,"code":"import { labelProperties, audioProperties, videoProperties, olProperties, liProperties, anchorProperties, buttonProperties, inputProperties, textAreaProperties, selectProperties, optionProperties, tableProperties, trProperties, thProperties, tdProperties, colGroupProperties, colProperties, formProperties, iframeProperties, imgProperties, htmlElementProperties, getNativeProps } from './properties';\nvar nativeElementMap = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties\n};\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps(tagName, props, excludedPropNames) {\n  var allowedPropNames = tagName && nativeElementMap[tagName] || htmlElementProperties;\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}","map":{"version":3,"sources":["getNativeElementProps.ts"],"names":[],"mappings":"AAAA,SACE,eAAe,EACf,eAAe,EACf,eAAe,EACf,YAAY,EACZ,YAAY,EACZ,gBAAgB,EAChB,gBAAgB,EAChB,eAAe,EACf,kBAAkB,EAClB,gBAAgB,EAChB,gBAAgB,EAChB,eAAe,EACf,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,kBAAkB,EAClB,aAAa,EACb,cAAc,EACd,gBAAgB,EAChB,aAAa,EACb,qBAAqB,EACrB,cAAc,QACT,cAAc;AAGrB,IAAM,gBAAgB,GAA2C;EAC/D,KAAK,EAAE,eAAe;EACtB,KAAK,EAAE,eAAe;EACtB,KAAK,EAAE,eAAe;EACtB,EAAE,EAAE,YAAY;EAChB,EAAE,EAAE,YAAY;EAChB,CAAC,EAAE,gBAAgB;EACnB,MAAM,EAAE,gBAAgB;EACxB,KAAK,EAAE,eAAe;EACtB,QAAQ,EAAE,kBAAkB;EAC5B,MAAM,EAAE,gBAAgB;EACxB,MAAM,EAAE,gBAAgB;EACxB,KAAK,EAAE,eAAe;EACtB,EAAE,EAAE,YAAY;EAChB,EAAE,EAAE,YAAY;EAChB,EAAE,EAAE,YAAY;EAChB,QAAQ,EAAE,kBAAkB;EAC5B,GAAG,EAAE,aAAa;EAClB,IAAI,EAAE,cAAc;EACpB,MAAM,EAAE,gBAAgB;EACxB,GAAG,EAAE;CACN;AAED;;;;;;AAMG;AACH;AACA,OAAM,SAAU,qBAAqB,CACnC,OAAe,EACf,KAAS,EACT,iBAA4B,EAAA;EAE5B,IAAM,gBAAgB,GAAI,OAAO,IAAI,gBAAgB,CAAC,OAAO,CAAC,IAAK,qBAAqB;EAExF,OAAO,cAAc,CAAC,KAAK,EAAE,gBAAgB,EAAE,iBAAiB,CAAC;AACnE","sourcesContent":["import {\n  labelProperties,\n  audioProperties,\n  videoProperties,\n  olProperties,\n  liProperties,\n  anchorProperties,\n  buttonProperties,\n  inputProperties,\n  textAreaProperties,\n  selectProperties,\n  optionProperties,\n  tableProperties,\n  trProperties,\n  thProperties,\n  tdProperties,\n  colGroupProperties,\n  colProperties,\n  formProperties,\n  iframeProperties,\n  imgProperties,\n  htmlElementProperties,\n  getNativeProps,\n} from './properties';\nimport * as React from 'react';\n\nconst nativeElementMap: Record<string, Record<string, number>> = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n};\n\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(\n  tagName: string,\n  props: {},\n  excludedPropNames?: string[],\n): TAttributes {\n  const allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;\n\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}