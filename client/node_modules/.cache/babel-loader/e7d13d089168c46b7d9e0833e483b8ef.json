{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar VERSION = \"00\";\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nexport function extractSpanContextFromTraceParentHeader(traceParentHeader) {\n  var parts = traceParentHeader.split(\"-\");\n  if (parts.length !== 4) {\n    return;\n  }\n  var version = parts[0],\n    traceId = parts[1],\n    spanId = parts[2],\n    traceOptions = parts[3];\n  if (version !== VERSION) {\n    return;\n  }\n  var traceFlags = parseInt(traceOptions, 16);\n  var spanContext = {\n    spanId: spanId,\n    traceId: traceId,\n    traceFlags: traceFlags\n  };\n  return spanContext;\n}\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nexport function getTraceParentHeader(spanContext) {\n  var missingFields = [];\n  if (!spanContext.traceId) {\n    missingFields.push(\"traceId\");\n  }\n  if (!spanContext.spanId) {\n    missingFields.push(\"spanId\");\n  }\n  if (missingFields.length) {\n    return;\n  }\n  var flags = spanContext.traceFlags || 0 /* NONE */;\n  var hexFlags = flags.toString(16);\n  var traceFlags = hexFlags.length === 1 ? \"0\" + hexFlags : hexFlags;\n  // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n  return VERSION + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-\" + traceFlags;\n}","map":{"version":3,"sources":["../../../src/utils/traceParentHeader.ts"],"names":[],"mappings":"AAAA;AACA;AAIA,IAAM,OAAO,GAAG,IAAI;AAEpB;;;;AAIG;AACH,OAAM,SAAU,uCAAuC,CACrD,iBAAyB,EAAA;EAEzB,IAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC;EAE1C,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;IACtB;EACD;EAEM,IAAA,OAAO,GAAmC,KAAK,CAAA,CAAA,CAAxC;IAAE,OAAO,GAA0B,KAAK,CAAA,CAAA,CAA/B;IAAE,MAAM,GAAkB,KAAK,CAAA,CAAA,CAAvB;IAAE,YAAY,GAAI,KAAK,CAAA,CAAA,CAAT;EAE7C,IAAI,OAAO,KAAK,OAAO,EAAE;IACvB;EACD;EAED,IAAM,UAAU,GAAG,QAAQ,CAAC,YAAY,EAAE,EAAE,CAAC;EAE7C,IAAM,WAAW,GAAgB;IAC/B,MAAM,EAAA,MAAA;IACN,OAAO,EAAA,OAAA;IACP,UAAU,EAAA;GACX;EAED,OAAO,WAAW;AACpB;AAEA;;;;AAIG;AACH,OAAM,SAAU,oBAAoB,CAAC,WAAwB,EAAA;EAC3D,IAAM,aAAa,GAAa,EAAE;EAClC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;IACxB,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC;EAC9B;EACD,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;IACvB,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC;EAC7B;EAED,IAAI,aAAa,CAAC,MAAM,EAAE;IACxB;EACD;EAED,IAAM,KAAK,GAAG,WAAW,CAAC,UAAU,IAAA,CAAA,CAAA;EACpC,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;EACnC,IAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG,GAAA,GAAI,QAAU,GAAG,QAAQ;EAEpE;EACA,OAAU,OAAO,GAAA,GAAA,GAAI,WAAW,CAAC,OAAO,GAAA,GAAA,GAAI,WAAW,CAAC,MAAM,GAAA,GAAA,GAAI,UAAY;AAChF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SpanContext, TraceFlags } from \"../interfaces\";\n\nconst VERSION = \"00\";\n\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nexport function extractSpanContextFromTraceParentHeader(\n  traceParentHeader: string\n): SpanContext | undefined {\n  const parts = traceParentHeader.split(\"-\");\n\n  if (parts.length !== 4) {\n    return;\n  }\n\n  const [version, traceId, spanId, traceOptions] = parts;\n\n  if (version !== VERSION) {\n    return;\n  }\n\n  const traceFlags = parseInt(traceOptions, 16);\n\n  const spanContext: SpanContext = {\n    spanId,\n    traceId,\n    traceFlags\n  };\n\n  return spanContext;\n}\n\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nexport function getTraceParentHeader(spanContext: SpanContext): string | undefined {\n  const missingFields: string[] = [];\n  if (!spanContext.traceId) {\n    missingFields.push(\"traceId\");\n  }\n  if (!spanContext.spanId) {\n    missingFields.push(\"spanId\");\n  }\n\n  if (missingFields.length) {\n    return;\n  }\n\n  const flags = spanContext.traceFlags || TraceFlags.NONE;\n  const hexFlags = flags.toString(16);\n  const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;\n\n  // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n  return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}