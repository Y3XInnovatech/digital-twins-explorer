{"ast":null,"code":"import { concatStyleSets } from './concatStyleSets';\n/**\n * Concatenates style sets into one, but resolves functional sets using the given props.\n * @param styleProps - Props used to resolve functional sets.\n * @param allStyles - Style sets, which can be functions or objects.\n */\nexport function concatStyleSetsWithProps(styleProps) {\n  var allStyles = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    allStyles[_i - 1] = arguments[_i];\n  }\n  var result = [];\n  for (var _a = 0, allStyles_1 = allStyles; _a < allStyles_1.length; _a++) {\n    var styles = allStyles_1[_a];\n    if (styles) {\n      result.push(typeof styles === 'function' ? styles(styleProps) : styles);\n    }\n  }\n  if (result.length === 1) {\n    return result[0];\n  } else if (result.length) {\n    // cliffkoh: I cannot figure out how to avoid the cast to any here.\n    // It is something to do with the use of Omit in IStyleSet.\n    // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on\n    // the official version).\n    return concatStyleSets.apply(void 0, result);\n  }\n  return {};\n}","map":{"version":3,"sources":["concatStyleSetsWithProps.ts"],"names":[],"mappings":"AAAA,SAAS,eAAe,QAAQ,mBAAmB;AAKnD;;;;AAIG;AACH,OAAM,SAAU,wBAAwB,CACtC,UAAuB,EAAA;EACvB,IAAA,SAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAA4E,EAA5E,EAAA,GAAA,SAAA,CAAA,MAA4E,EAA5E,EAAA,EAA4E,EAAA;IAA5E,SAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAEA,IAAM,MAAM,GAA6B,EAAE;EAC3C,KAAqB,IAAA,EAAA,GAAA,CAAS,EAAT,WAAA,GAAA,SAAS,EAAT,EAAA,GAAA,WAAA,CAAA,MAAS,EAAT,EAAA,EAAS,EAAE;IAA3B,IAAM,MAAM,GAAA,WAAA,CAAA,EAAA,CAAA;IACf,IAAI,MAAM,EAAE;MACV,MAAM,CAAC,IAAI,CAAC,OAAO,MAAM,KAAK,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;IACxE;EACF;EACD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;IACvB,OAAO,MAAM,CAAC,CAAC,CAA2B;GAC3C,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;IACxB;IACA;IACA;IACA;IACA,OAAO,eAAe,CAAA,KAAA,CAAA,KAAA,CAAA,EAAK,MAAc,CAAQ;EAClD;EAED,OAAO,CAAA,CAAE;AACX","sourcesContent":["import { concatStyleSets } from './concatStyleSets';\nimport { IStyleSet } from './IStyleSet';\nimport { IStyleFunctionOrObject } from './IStyleFunction';\nimport { DeepPartial } from './DeepPartial';\n\n/**\n * Concatenates style sets into one, but resolves functional sets using the given props.\n * @param styleProps - Props used to resolve functional sets.\n * @param allStyles - Style sets, which can be functions or objects.\n */\nexport function concatStyleSetsWithProps<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>>(\n  styleProps: TStyleProps,\n  ...allStyles: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[]\n): DeepPartial<TStyleSet> {\n  const result: DeepPartial<TStyleSet>[] = [];\n  for (const styles of allStyles) {\n    if (styles) {\n      result.push(typeof styles === 'function' ? styles(styleProps) : styles);\n    }\n  }\n  if (result.length === 1) {\n    return result[0] as DeepPartial<TStyleSet>;\n  } else if (result.length) {\n    // cliffkoh: I cannot figure out how to avoid the cast to any here.\n    // It is something to do with the use of Omit in IStyleSet.\n    // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on\n    // the official version).\n    return concatStyleSets(...(result as any)) as any;\n  }\n\n  return {};\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}