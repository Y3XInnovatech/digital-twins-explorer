{"ast":null,"code":"import * as React from 'react';\nimport { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\nexport function useKeytipRef(options) {\n  var _a = useKeytipData(options),\n    keytipId = _a.keytipId,\n    ariaDescribedBy = _a.ariaDescribedBy;\n  var contentRef = React.useCallback(function (contentElement) {\n    if (!contentElement) {\n      return;\n    }\n    var targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n    var executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n    var ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n    setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n    setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n    setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n  }, [keytipId, ariaDescribedBy]);\n  return contentRef;\n}\nexport function setAttribute(element, attributeName, attributeValue, append) {\n  if (append === void 0) {\n    append = false;\n  }\n  if (element && attributeValue) {\n    var value = attributeValue;\n    if (append) {\n      var currentValue = element.getAttribute(attributeName);\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = currentValue + \" \" + attributeValue;\n      }\n    }\n    element.setAttribute(attributeName, value);\n  }\n}\nfunction findFirstElement(rootElement, dataAttribute) {\n  return rootElement.querySelector(\"[\" + dataAttribute + \"]\");\n}","map":{"version":3,"sources":["components/KeytipData/useKeytipRef.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAE9B,SAAS,cAAc,EAAE,sBAAsB,EAAE,mBAAmB,QAAQ,+BAA+B;AAC3G,SAAS,aAAa,QAAQ,iBAAiB;AAE/C;;;AAGG;AACH,OAAM,SAAU,YAAY,CAC1B,OAA0B,EAAA;EAEpB,IAAA,EAAA,GAAA,aAAA,CAAA,OAAA,CAAsD;IAApD,QAAA,GAAA,EAAA,CAAA,QAAQ;IAAE,eAAA,GAAA,EAAA,CAAA,eAA0C;EAE5D,IAAM,UAAU,GAAwB,KAAK,CAAC,WAAW,CACvD,UAAC,cAA+B,EAAA;IAC9B,IAAI,CAAC,cAAc,EAAE;MACnB;IACD;IAED,IAAM,aAAa,GAAG,gBAAgB,CAAC,cAAc,EAAE,cAAc,CAAC,IAAI,cAAc;IACxF,IAAM,cAAc,GAAG,gBAAgB,CAAC,cAAc,EAAE,sBAAsB,CAAC,IAAI,aAAa;IAChG,IAAM,WAAW,GAAG,gBAAgB,CAAC,cAAc,EAAE,mBAAmB,CAAC,IAAI,cAAc;IAE3F,YAAY,CAAC,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC;IACrD,YAAY,CAAC,cAAc,EAAE,sBAAsB,EAAE,QAAQ,CAAC;IAC9D,YAAY,CAAC,WAAW,EAAE,kBAAkB,EAAE,eAAe,EAAE,IAAI,CAAC;EACtE,CAAC,EACD,CAAC,QAAQ,EAAE,eAAe,CAAC,CAC5B;EAED,OAAO,UAAU;AACnB;AAEA,OAAM,SAAU,YAAY,CAC1B,OAA2B,EAC3B,aAAqB,EACrB,cAAkC,EAClC,MAAuB,EAAA;EAAvB,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;IAAA,MAAA,GAAA,KAAuB;EAAA;EAEvB,IAAI,OAAO,IAAI,cAAc,EAAE;IAC7B,IAAI,KAAK,GAAG,cAAc;IAC1B,IAAI,MAAM,EAAE;MACV,IAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC;MACxD,IAAI,YAAY,IAAI,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/D,KAAK,GAAM,YAAY,GAAA,GAAA,GAAI,cAAgB;MAC5C;IACF;IAED,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,KAAK,CAAC;EAC3C;AACH;AAEA,SAAS,gBAAgB,CAAC,WAAwB,EAAE,aAAqB,EAAA;EACvE,OAAO,WAAW,CAAC,aAAa,CAAC,GAAA,GAAI,aAAa,GAAA,GAAG,CAAC;AACxD","sourcesContent":["import * as React from 'react';\nimport { KeytipDataOptions } from './KeytipData.types';\nimport { DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, DATAKTP_ARIA_TARGET } from '../../utilities/keytips/index';\nimport { useKeytipData } from './useKeytipData';\n\n/**\n * Hook that creates a ref which is used for passing to Keytip target element.\n * The ref will handle setting the attributes needed for Keytip to work.\n */\nexport function useKeytipRef<TElement extends HTMLElement = HTMLElement>(\n  options: KeytipDataOptions,\n): React.Ref<TElement> {\n  const { keytipId, ariaDescribedBy } = useKeytipData(options);\n\n  const contentRef: React.Ref<TElement> = React.useCallback(\n    (contentElement: TElement | null): void => {\n      if (!contentElement) {\n        return;\n      }\n\n      const targetElement = findFirstElement(contentElement, DATAKTP_TARGET) || contentElement;\n      const executeElement = findFirstElement(contentElement, DATAKTP_EXECUTE_TARGET) || targetElement;\n      const ariaElement = findFirstElement(contentElement, DATAKTP_ARIA_TARGET) || executeElement;\n\n      setAttribute(targetElement, DATAKTP_TARGET, keytipId);\n      setAttribute(executeElement, DATAKTP_EXECUTE_TARGET, keytipId);\n      setAttribute(ariaElement, 'aria-describedby', ariaDescribedBy, true);\n    },\n    [keytipId, ariaDescribedBy],\n  );\n\n  return contentRef;\n}\n\nexport function setAttribute(\n  element: HTMLElement | null,\n  attributeName: string,\n  attributeValue: string | undefined,\n  append: boolean = false,\n): void {\n  if (element && attributeValue) {\n    let value = attributeValue;\n    if (append) {\n      const currentValue = element.getAttribute(attributeName);\n      if (currentValue && currentValue.indexOf(attributeValue) === -1) {\n        value = `${currentValue} ${attributeValue}`;\n      }\n    }\n\n    element.setAttribute(attributeName, value);\n  }\n}\n\nfunction findFirstElement(rootElement: HTMLElement, dataAttribute: string): HTMLElement | null {\n  return rootElement.querySelector(`[${dataAttribute}]`);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}