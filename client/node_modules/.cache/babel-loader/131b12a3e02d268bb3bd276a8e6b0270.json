{"ast":null,"code":"var _jsxFileName = \"/home/saharsh/digital-twins-explorer/client/src/components/PropertyInspectorComponent/PropertyInspectorComponent.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/* eslint-disable */\nimport React, { useCallback, useEffect, useState, useReducer, createElement as _createElement } from 'react';\nimport { eventService } from '../../services/EventService';\nimport { apiService } from '../../services/ApiService';\nimport { StandalonePropertyInspector } from '@microsoft/iot-cardboard-js';\nimport { PropertyInspectorPatchInformationComponent } from './PropertyInspectorPatchInformationComponent/PropertyInspectorPatchInformationComponent';\nimport produce from 'immer';\nimport '@microsoft/iot-cardboard-js/themes.css';\nimport './PropertyInspectorComponent.scss';\nimport LoaderComponent from '../LoaderComponent/LoaderComponent';\nimport ErrorPage from '../ErrorPage/ErrorPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pIActionTypes = {\n  setSelectionType: 'setSelectionType',\n  setSelection: 'setSelection',\n  setRootAndExpandedModels: 'setRootAndExpandedModels',\n  setRelationshipModel: 'setRelationshipModel',\n  setIsSelectionLoading: 'setIsSelectionLoading',\n  setIsPatchInformationVisible: 'setIsPatchInformationVisible',\n  setPatchInformation: 'setPatchInformation',\n  resetMissingModelIds: 'resetMissingModelIds',\n  addMissingModelIds: 'addMissingModelIds'\n};\nconst propertyInspectorReducer = produce((draft, action) => {\n  switch (action.type) {\n    case pIActionTypes.setSelectionType:\n      draft.selectionType = action.payload;\n      break;\n    case pIActionTypes.setSelection:\n      draft.selection = action.payload;\n      break;\n    case pIActionTypes.setRootAndExpandedModels:\n      draft.rootAndExpandedModels = action.payload;\n      break;\n    case pIActionTypes.setRelationshipModel:\n      draft.relationshipModel = action.payload;\n      break;\n    case pIActionTypes.setIsSelectionLoading:\n      draft.isSelectionLoading = action.payload;\n      break;\n    case pIActionTypes.setIsPatchInformationVisible:\n      draft.isPatchInformationVisible = action.payload;\n      break;\n    case pIActionTypes.setPatchInformation:\n      draft.patchInformation = action.payload;\n      draft.isPatchInformationVisible = true;\n      break;\n    case pIActionTypes.resetMissingModelIds:\n      draft.missingModelIds = [];\n      break;\n    case pIActionTypes.addMissingModelIds:\n      if (Array.isArray(action.payload)) {\n        draft.missingModelIds = [...draft.missingModelIds, ...action.payload];\n      } else {\n        draft.missingModelIds.push(action.payload);\n      }\n      break;\n  }\n});\nconst PropertyInspectorComponent = ({\n  isOpen,\n  onErrorBoundary\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(propertyInspectorReducer, {\n    selectionType: null,\n    selection: null,\n    rootAndExpandedModels: null,\n    relationshipModel: null,\n    isSelectionLoading: false,\n    isPatchInformationVisible: false,\n    patchInformation: null,\n    missingModelIds: []\n  });\n  const subscribeSelection = () => {\n    eventService.subscribeSelection(payload => {\n      dispatch({\n        type: pIActionTypes.setIsSelectionLoading,\n        payload: true\n      });\n      dispatch({\n        type: pIActionTypes.setSelectionType,\n        payload: null\n      });\n      dispatch({\n        type: pIActionTypes.setSelection,\n        payload: null\n      });\n      if (payload && payload.selection !== state.selection) {\n        const {\n          selection,\n          selectionType\n        } = payload;\n        queryModelsAndSetSelection(selection, selectionType);\n      } else {\n        dispatch({\n          type: pIActionTypes.setIsSelectionLoading,\n          payload: false\n        });\n      }\n    });\n  };\n  const getModelDependencies = (models, rootModelId) => {\n    const flatModels = [];\n    const addModelDependencies = modelId => {\n      var _models$find;\n      const model = (_models$find = models.find(m => m.id === modelId)) === null || _models$find === void 0 ? void 0 : _models$find.model;\n      if (!model) {\n        dispatch({\n          type: pIActionTypes.addMissingModelIds,\n          payload: modelId\n        });\n      } else {\n        flatModels.push(model);\n        if (model.extends) {\n          const extendedModelIds = Array.isArray(model.extends) ? model.extends : [model.extends];\n          extendedModelIds.forEach(id => addModelDependencies(id));\n        }\n        if (model.contents) {\n          const componentIds = model.contents.filter(c => c['@type'] === 'Component').map(c => c.schema);\n          componentIds.forEach(id => addModelDependencies(id));\n        }\n      }\n    };\n    addModelDependencies(rootModelId);\n    return flatModels;\n  };\n  const queryModelsAndSetSelection = async (selection, selectionType) => {\n    dispatch({\n      type: pIActionTypes.setIsSelectionLoading,\n      payload: true\n    });\n    dispatch({\n      type: pIActionTypes.resetMissingModelIds\n    });\n    if (selectionType === 'twin') {\n      const models = await apiService.queryModels();\n      const rootModel = models.find(m => m.id === selection['$metadata']['$model']);\n      if (!rootModel) {\n        dispatch({\n          type: pIActionTypes.addMissingModelIds,\n          payload: selection['$metadata']['$model']\n        });\n        dispatch({\n          type: pIActionTypes.setRootAndExpandedModels,\n          payload: {\n            rootModel: null,\n            expandedModels: []\n          }\n        });\n      } else {\n        const expandedModels = getModelDependencies(models, rootModel === null || rootModel === void 0 ? void 0 : rootModel.id);\n        dispatch({\n          type: pIActionTypes.setRootAndExpandedModels,\n          payload: {\n            rootModel: rootModel === null || rootModel === void 0 ? void 0 : rootModel.model,\n            expandedModels\n          }\n        });\n      }\n    } else if (selectionType === 'relationship') {\n      const sourceTwin = await apiService.getTwinById(selection['$sourceId']);\n      const models = await apiService.queryModels();\n      const rootModel = models.find(m => m.id === sourceTwin['$metadata']['$model']);\n      if (!rootModel) {\n        dispatch({\n          type: pIActionTypes.addMissingModelIds,\n          payload: sourceTwin['$metadata']['$model']\n        });\n        dispatch({\n          type: pIActionTypes.setRelationshipModel,\n          payload: null\n        });\n      } else {\n        const expandedModels = getModelDependencies(models, rootModel === null || rootModel === void 0 ? void 0 : rootModel.id);\n        let relationshipModel = null;\n        for (const model of expandedModels) {\n          if (model.contents) {\n            for (const item of model.contents) {\n              const type = Array.isArray(item['@type']) ? item['@type'][0] : item['@type'];\n              if (type === 'Relationship' && selection['$relationshipName'] === item.name) {\n                relationshipModel = model;\n                break;\n              }\n            }\n          }\n          if (relationshipModel) break;\n        }\n        dispatch({\n          type: pIActionTypes.setRelationshipModel,\n          payload: relationshipModel\n        });\n      }\n    }\n    dispatch({\n      type: pIActionTypes.setSelectionType,\n      payload: selectionType\n    });\n    dispatch({\n      type: pIActionTypes.setSelection,\n      payload: selection\n    });\n    dispatch({\n      type: pIActionTypes.setIsSelectionLoading,\n      payload: false\n    });\n  };\n  const subscribeCreateModel = () => {\n    eventService.subscribeCreateModel(_models => {\n      dispatch({\n        type: pIActionTypes.setSelectionType,\n        payload: null\n      });\n      dispatch({\n        type: pIActionTypes.setSelection,\n        payload: null\n      });\n    });\n  };\n  const subscribeDeleteModel = () => {\n    eventService.subscribeDeleteModel(_model => {\n      dispatch({\n        type: pIActionTypes.setSelectionType,\n        payload: null\n      });\n      dispatch({\n        type: pIActionTypes.setSelection,\n        payload: null\n      });\n    });\n  };\n  const onUpdateTwin = useCallback(async patchData => {\n    dispatch({\n      type: pIActionTypes.setIsSelectionLoading,\n      payload: true\n    });\n    try {\n      await apiService.updateTwin(patchData.id, patchData.patches);\n    } catch (err) {\n      dispatch({\n        type: pIActionTypes.setIsSelectionLoading,\n        payload: false\n      });\n      dispatch({\n        type: pIActionTypes.setPatchInformation,\n        payload: err.details.error\n      });\n      return;\n    }\n    const updatedTwin = await apiService.getTwinById(patchData.id);\n    dispatch({\n      type: pIActionTypes.setPatchInformation,\n      payload: patchData.patches\n    });\n    dispatch({\n      type: pIActionTypes.setSelection,\n      payload: updatedTwin\n    });\n    dispatch({\n      type: pIActionTypes.setIsSelectionLoading,\n      payload: false\n    });\n  }, [dispatch, apiService]);\n  const onUpdateRelationship = useCallback(async patchData => {\n    dispatch({\n      type: pIActionTypes.setIsSelectionLoading,\n      payload: true\n    });\n    try {\n      await apiService.updateRelationship(patchData.sourceTwinId, patchData.id, patchData.patches);\n    } catch (err) {\n      dispatch({\n        type: pIActionTypes.setIsSelectionLoading,\n        payload: false\n      });\n      dispatch({\n        type: pIActionTypes.setPatchInformation,\n        payload: err.details.error\n      });\n      return;\n    }\n    try {\n      const updatedRelationship = await apiService.getRelationship(patchData.sourceTwinId, patchData.id);\n      dispatch({\n        type: pIActionTypes.setPatchInformation,\n        payload: patchData.patches\n      });\n      dispatch({\n        type: pIActionTypes.setSelection,\n        payload: updatedRelationship.body\n      });\n      dispatch({\n        type: pIActionTypes.setIsSelectionLoading,\n        payload: false\n      });\n    } catch (err) {\n      console.err(err);\n    }\n  }, [dispatch, apiService]);\n\n  // On mount\n  useEffect(() => {\n    subscribeSelection();\n    subscribeCreateModel();\n    subscribeDeleteModel();\n  }, []);\n  if (state.isSelectionLoading) {\n    return isOpen ? /*#__PURE__*/_jsxDEV(LoaderComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 25\n    }, this) : null;\n  }\n  if (!state.selection) {\n    return null;\n  }\n  if (state.selectionType === 'twin') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"property-inspector-container\",\n      children: [/*#__PURE__*/_jsxDEV(PropertyInspectorPatchInformationComponent, {\n        isVisible: state.isPatchInformationVisible,\n        patch: state.patchInformation,\n        onCloseModal: () => dispatch({\n          type: pIActionTypes.setIsPatchInformationVisible,\n          payload: false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StandalonePropertyInspector, {\n        theme: 'explorer',\n        inputData: {\n          rootModel: state.rootAndExpandedModels.rootModel,\n          expandedModels: state.rootAndExpandedModels.expandedModels,\n          twin: state.selection\n        },\n        onCommitChanges: onUpdateTwin,\n        missingModelIds: state.missingModelIds,\n        onErrorBoundary: onErrorBoundary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this);\n  } else if (state.selectionType === 'relationship') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"property-inspector-container\",\n      children: [/*#__PURE__*/_jsxDEV(PropertyInspectorPatchInformationComponent, {\n        isVisible: state.isPatchInformationVisible,\n        patch: state.patchInformation,\n        onCloseModal: () => dispatch({\n          type: pIActionTypes.setIsPatchInformationVisible,\n          payload: false\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StandalonePropertyInspector, {\n        theme: 'explorer',\n        inputData: {\n          relationship: state.selection,\n          relationshipModel: state.relationshipModel\n        },\n        onCommitChanges: onUpdateRelationship,\n        missingModelIds: state.missingModelIds,\n        onErrorBoundary: onErrorBoundary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this);\n  } else {\n    return null;\n  }\n};\n_s(PropertyInspectorComponent, \"YIZXwF+wEG50y5D1EOTkXZRM2IY=\");\n_c = PropertyInspectorComponent;\nconst PropertyInspectorErrorContainer = props => {\n  _s2();\n  const [error, setError] = useState(null);\n  const [key, setKey] = useState(1);\n  const subscribeSelection = () => {\n    eventService.subscribeSelection(payload => {\n      if (!payload || !payload.selection) {\n        setError(null);\n      }\n    });\n  };\n  useEffect(() => {\n    subscribeSelection();\n  }, []);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"property-inspector-container\",\n      children: /*#__PURE__*/_jsxDEV(ErrorPage, {\n        error: error,\n        resetErrorBoundary: () => {\n          setKey(prevKey => prevKey + 1);\n          setError(null);\n        },\n        isGlobalBoundary: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_createElement(PropertyInspectorComponent, {\n      ...props,\n      key: key,\n      onErrorBoundary: error => setError(error),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 16\n      }\n    });\n  }\n};\n_s2(PropertyInspectorErrorContainer, \"nJIP6Jig995qmfL8ve2q0TXR4+c=\");\n_c2 = PropertyInspectorErrorContainer;\nexport default _c3 = /*#__PURE__*/React.memo(PropertyInspectorErrorContainer);\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"PropertyInspectorComponent\");\n$RefreshReg$(_c2, \"PropertyInspectorErrorContainer\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","useReducer","createElement","_createElement","eventService","apiService","StandalonePropertyInspector","PropertyInspectorPatchInformationComponent","produce","LoaderComponent","ErrorPage","jsxDEV","_jsxDEV","pIActionTypes","setSelectionType","setSelection","setRootAndExpandedModels","setRelationshipModel","setIsSelectionLoading","setIsPatchInformationVisible","setPatchInformation","resetMissingModelIds","addMissingModelIds","propertyInspectorReducer","draft","action","type","selectionType","payload","selection","rootAndExpandedModels","relationshipModel","isSelectionLoading","isPatchInformationVisible","patchInformation","missingModelIds","Array","isArray","push","PropertyInspectorComponent","isOpen","onErrorBoundary","_s","state","dispatch","subscribeSelection","queryModelsAndSetSelection","getModelDependencies","models","rootModelId","flatModels","addModelDependencies","modelId","_models$find","model","find","m","id","extends","extendedModelIds","forEach","contents","componentIds","filter","c","map","schema","queryModels","rootModel","expandedModels","sourceTwin","getTwinById","item","name","subscribeCreateModel","_models","subscribeDeleteModel","_model","onUpdateTwin","patchData","updateTwin","patches","err","details","error","updatedTwin","onUpdateRelationship","updateRelationship","sourceTwinId","updatedRelationship","getRelationship","body","console","fileName","_jsxFileName","lineNumber","columnNumber","className","children","isVisible","patch","onCloseModal","theme","inputData","twin","onCommitChanges","relationship","_c","PropertyInspectorErrorContainer","props","_s2","setError","key","setKey","resetErrorBoundary","prevKey","isGlobalBoundary","__self","__source","_c2","_c3","memo","$RefreshReg$"],"sources":["/home/saharsh/digital-twins-explorer/client/src/components/PropertyInspectorComponent/PropertyInspectorComponent.js"],"sourcesContent":["/* eslint-disable */\nimport React, { useCallback, useEffect, useState, useReducer } from 'react';\nimport { eventService } from '../../services/EventService';\nimport { apiService } from '../../services/ApiService';\nimport { StandalonePropertyInspector } from '@microsoft/iot-cardboard-js';\nimport { PropertyInspectorPatchInformationComponent } from './PropertyInspectorPatchInformationComponent/PropertyInspectorPatchInformationComponent';\nimport produce from 'immer';\nimport '@microsoft/iot-cardboard-js/themes.css';\nimport './PropertyInspectorComponent.scss';\nimport LoaderComponent from '../LoaderComponent/LoaderComponent';\nimport ErrorPage from '../ErrorPage/ErrorPage';\n\nconst pIActionTypes = {\n    setSelectionType: 'setSelectionType',\n    setSelection: 'setSelection',\n    setRootAndExpandedModels: 'setRootAndExpandedModels',\n    setRelationshipModel: 'setRelationshipModel',\n    setIsSelectionLoading: 'setIsSelectionLoading',\n    setIsPatchInformationVisible: 'setIsPatchInformationVisible',\n    setPatchInformation: 'setPatchInformation',\n    resetMissingModelIds: 'resetMissingModelIds',\n    addMissingModelIds: 'addMissingModelIds'\n};\n\nconst propertyInspectorReducer = produce((draft, action) => {\n    switch (action.type) {\n        case pIActionTypes.setSelectionType:\n            draft.selectionType = action.payload;\n            break;\n        case pIActionTypes.setSelection:\n            draft.selection = action.payload;\n            break;\n        case pIActionTypes.setRootAndExpandedModels:\n            draft.rootAndExpandedModels = action.payload;\n            break;\n        case pIActionTypes.setRelationshipModel:\n            draft.relationshipModel = action.payload;\n            break;\n        case pIActionTypes.setIsSelectionLoading:\n            draft.isSelectionLoading = action.payload;\n            break;\n        case pIActionTypes.setIsPatchInformationVisible:\n            draft.isPatchInformationVisible = action.payload;\n            break;\n        case pIActionTypes.setPatchInformation:\n            draft.patchInformation = action.payload;\n            draft.isPatchInformationVisible = true;\n            break;\n        case pIActionTypes.resetMissingModelIds:\n            draft.missingModelIds = [];\n            break;\n        case pIActionTypes.addMissingModelIds:\n            if (Array.isArray(action.payload)) {\n                draft.missingModelIds = [\n                    ...draft.missingModelIds,\n                    ...action.payload\n                ];\n            } else {\n                draft.missingModelIds.push(action.payload);\n            }\n            break;\n    }\n});\n\nconst PropertyInspectorComponent = ({ isOpen, onErrorBoundary }) => {\n    const [state, dispatch] = useReducer(propertyInspectorReducer, {\n        selectionType: null,\n        selection: null,\n        rootAndExpandedModels: null,\n        relationshipModel: null,\n        isSelectionLoading: false,\n        isPatchInformationVisible: false,\n        patchInformation: null,\n        missingModelIds: []\n    });\n\n    const subscribeSelection = () => {\n        eventService.subscribeSelection((payload) => {\n            dispatch({\n                type: pIActionTypes.setIsSelectionLoading,\n                payload: true\n            });\n            dispatch({ type: pIActionTypes.setSelectionType, payload: null });\n            dispatch({ type: pIActionTypes.setSelection, payload: null });\n            if (payload && payload.selection !== state.selection) {\n                const { selection, selectionType } = payload;\n                queryModelsAndSetSelection(selection, selectionType);\n            } else {\n                dispatch({\n                    type: pIActionTypes.setIsSelectionLoading,\n                    payload: false\n                });\n            }\n        });\n    };\n\n    const getModelDependencies = (models, rootModelId) => {\n        const flatModels = [];\n\n        const addModelDependencies = (modelId) => {\n            const model = models.find((m) => m.id === modelId)?.model;\n            if (!model) {\n                dispatch({\n                    type: pIActionTypes.addMissingModelIds,\n                    payload: modelId\n                });\n            } else {\n                flatModels.push(model);\n\n                if (model.extends) {\n                    const extendedModelIds = Array.isArray(model.extends)\n                        ? model.extends\n                        : [model.extends];\n                    extendedModelIds.forEach((id) => addModelDependencies(id));\n                }\n                if (model.contents) {\n                    const componentIds = model.contents\n                        .filter((c) => c['@type'] === 'Component')\n                        .map((c) => c.schema);\n                    componentIds.forEach((id) => addModelDependencies(id));\n                }\n            }\n        };\n\n        addModelDependencies(rootModelId);\n        return flatModels;\n    };\n\n    const queryModelsAndSetSelection = async (selection, selectionType) => {\n        dispatch({\n            type: pIActionTypes.setIsSelectionLoading,\n            payload: true\n        });\n\n        dispatch({\n            type: pIActionTypes.resetMissingModelIds\n        });\n\n        if (selectionType === 'twin') {\n            const models = await apiService.queryModels();\n            const rootModel = models.find(\n                (m) => m.id === selection['$metadata']['$model']\n            );\n\n            if (!rootModel) {\n                dispatch({\n                    type: pIActionTypes.addMissingModelIds,\n                    payload: selection['$metadata']['$model']\n                });\n                dispatch({\n                    type: pIActionTypes.setRootAndExpandedModels,\n                    payload: {\n                        rootModel: null,\n                        expandedModels: []\n                    }\n                });\n            } else {\n                const expandedModels = getModelDependencies(\n                    models,\n                    rootModel?.id\n                );\n                dispatch({\n                    type: pIActionTypes.setRootAndExpandedModels,\n                    payload: {\n                        rootModel: rootModel?.model,\n                        expandedModels\n                    }\n                });\n            }\n        } else if (selectionType === 'relationship') {\n            const sourceTwin = await apiService.getTwinById(\n                selection['$sourceId']\n            );\n            const models = await apiService.queryModels();\n            const rootModel = models.find(\n                (m) => m.id === sourceTwin['$metadata']['$model']\n            );\n\n            if (!rootModel) {\n                dispatch({\n                    type: pIActionTypes.addMissingModelIds,\n                    payload: sourceTwin['$metadata']['$model']\n                });\n                dispatch({\n                    type: pIActionTypes.setRelationshipModel,\n                    payload: null\n                });\n            } else {\n                const expandedModels = getModelDependencies(\n                    models,\n                    rootModel?.id\n                );\n                let relationshipModel = null;\n\n                for (const model of expandedModels) {\n                    if (model.contents) {\n                        for (const item of model.contents) {\n                            const type = Array.isArray(item['@type'])\n                                ? item['@type'][0]\n                                : item['@type'];\n                            if (\n                                type === 'Relationship' &&\n                                selection['$relationshipName'] === item.name\n                            ) {\n                                relationshipModel = model;\n                                break;\n                            }\n                        }\n                    }\n                    if (relationshipModel) break;\n                }\n\n                dispatch({\n                    type: pIActionTypes.setRelationshipModel,\n                    payload: relationshipModel\n                });\n            }\n        }\n\n        dispatch({\n            type: pIActionTypes.setSelectionType,\n            payload: selectionType\n        });\n        dispatch({\n            type: pIActionTypes.setSelection,\n            payload: selection\n        });\n        dispatch({\n            type: pIActionTypes.setIsSelectionLoading,\n            payload: false\n        });\n    };\n\n    const subscribeCreateModel = () => {\n        eventService.subscribeCreateModel((_models) => {\n            dispatch({ type: pIActionTypes.setSelectionType, payload: null });\n            dispatch({ type: pIActionTypes.setSelection, payload: null });\n        });\n    };\n\n    const subscribeDeleteModel = () => {\n        eventService.subscribeDeleteModel((_model) => {\n            dispatch({ type: pIActionTypes.setSelectionType, payload: null });\n            dispatch({ type: pIActionTypes.setSelection, payload: null });\n        });\n    };\n\n    const onUpdateTwin = useCallback(\n        async (patchData) => {\n            dispatch({\n                type: pIActionTypes.setIsSelectionLoading,\n                payload: true\n            });\n\n            try {\n                await apiService.updateTwin(patchData.id, patchData.patches);\n            } catch (err) {\n                dispatch({\n                    type: pIActionTypes.setIsSelectionLoading,\n                    payload: false\n                });\n                dispatch({\n                    type: pIActionTypes.setPatchInformation,\n                    payload: err.details.error\n                });\n                return;\n            }\n\n            const updatedTwin = await apiService.getTwinById(patchData.id);\n\n            dispatch({\n                type: pIActionTypes.setPatchInformation,\n                payload: patchData.patches\n            });\n\n            dispatch({\n                type: pIActionTypes.setSelection,\n                payload: updatedTwin\n            });\n\n            dispatch({\n                type: pIActionTypes.setIsSelectionLoading,\n                payload: false\n            });\n        },\n        [dispatch, apiService]\n    );\n\n    const onUpdateRelationship = useCallback(\n        async (patchData) => {\n            dispatch({\n                type: pIActionTypes.setIsSelectionLoading,\n                payload: true\n            });\n\n            try {\n                await apiService.updateRelationship(\n                    patchData.sourceTwinId,\n                    patchData.id,\n                    patchData.patches\n                );\n            } catch (err) {\n                dispatch({\n                    type: pIActionTypes.setIsSelectionLoading,\n                    payload: false\n                });\n                dispatch({\n                    type: pIActionTypes.setPatchInformation,\n                    payload: err.details.error\n                });\n                return;\n            }\n\n            try {\n                const updatedRelationship = await apiService.getRelationship(\n                    patchData.sourceTwinId,\n                    patchData.id\n                );\n\n                dispatch({\n                    type: pIActionTypes.setPatchInformation,\n                    payload: patchData.patches\n                });\n\n                dispatch({\n                    type: pIActionTypes.setSelection,\n                    payload: updatedRelationship.body\n                });\n\n                dispatch({\n                    type: pIActionTypes.setIsSelectionLoading,\n                    payload: false\n                });\n            } catch (err) {\n                console.err(err);\n            }\n        },\n        [dispatch, apiService]\n    );\n\n    // On mount\n    useEffect(() => {\n        subscribeSelection();\n        subscribeCreateModel();\n        subscribeDeleteModel();\n    }, []);\n\n    if (state.isSelectionLoading) {\n        return isOpen ? <LoaderComponent /> : null;\n    }\n\n    if (!state.selection) {\n        return null;\n    }\n\n    if (state.selectionType === 'twin') {\n        return (\n            <div className=\"property-inspector-container\">\n                <PropertyInspectorPatchInformationComponent\n                    isVisible={state.isPatchInformationVisible}\n                    patch={state.patchInformation}\n                    onCloseModal={() =>\n                        dispatch({\n                            type: pIActionTypes.setIsPatchInformationVisible,\n                            payload: false\n                        })\n                    }\n                />\n\n                <StandalonePropertyInspector\n                    theme={'explorer'}\n                    inputData={{\n                        rootModel: state.rootAndExpandedModels.rootModel,\n                        expandedModels:\n                            state.rootAndExpandedModels.expandedModels,\n                        twin: state.selection\n                    }}\n                    onCommitChanges={onUpdateTwin}\n                    missingModelIds={state.missingModelIds}\n                    onErrorBoundary={onErrorBoundary}\n                />\n            </div>\n        );\n    } else if (state.selectionType === 'relationship') {\n        return (\n            <div className=\"property-inspector-container\">\n                <PropertyInspectorPatchInformationComponent\n                    isVisible={state.isPatchInformationVisible}\n                    patch={state.patchInformation}\n                    onCloseModal={() =>\n                        dispatch({\n                            type: pIActionTypes.setIsPatchInformationVisible,\n                            payload: false\n                        })\n                    }\n                />\n\n                <StandalonePropertyInspector\n                    theme={'explorer'}\n                    inputData={{\n                        relationship: state.selection,\n                        relationshipModel: state.relationshipModel\n                    }}\n                    onCommitChanges={onUpdateRelationship}\n                    missingModelIds={state.missingModelIds}\n                    onErrorBoundary={onErrorBoundary}\n                />\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\nconst PropertyInspectorErrorContainer = (props) => {\n    const [error, setError] = useState(null);\n    const [key, setKey] = useState(1);\n\n    const subscribeSelection = () => {\n        eventService.subscribeSelection((payload) => {\n            if (!payload || !payload.selection) {\n                setError(null);\n            }\n        });\n    };\n\n    useEffect(() => {\n        subscribeSelection();\n    }, [])\n\n    if (error) {\n        return (\n            <div className=\"property-inspector-container\">\n                <ErrorPage\n                    error={error}\n                    resetErrorBoundary={() => {\n                        setKey(prevKey => prevKey + 1);\n                        setError(null);\n                    }}\n                    isGlobalBoundary={false}\n                />\n            </div>\n        )\n    } else {\n        return <PropertyInspectorComponent {...props} key={key} onErrorBoundary={(error) => setError(error)} />\n    }\n}\n\nexport default React.memo(PropertyInspectorErrorContainer);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}