{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\nvar LinkBase = /** @class */function (_super) {\n  __extends(LinkBase, _super);\n  function LinkBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._link = React.createRef();\n    _this._renderContent = function (keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n      var _a = _this.props,\n        disabled = _a.disabled,\n        children = _a.children,\n        className = _a.className,\n        href = _a.href,\n        underline = _a.underline,\n        theme = _a.theme,\n        styles = _a.styles;\n      var classNames = getClassNames(styles, {\n        className: className,\n        isButton: !href,\n        isDisabled: disabled,\n        isUnderlined: underline,\n        theme: theme\n      });\n      var RootType = _this._getRootType(_this.props);\n      return React.createElement(RootType, __assign({}, keytipAttributes, _this._adjustPropsForRootType(RootType, _this.props), {\n        className: classNames.root,\n        onClick: _this._onClick,\n        ref: _this._link,\n        \"aria-disabled\": disabled\n      }), children);\n    };\n    _this._onClick = function (ev) {\n      var _a = _this.props,\n        onClick = _a.onClick,\n        disabled = _a.disabled;\n      if (disabled) {\n        ev.preventDefault();\n      } else if (onClick) {\n        onClick(ev);\n      }\n    };\n    initializeComponentRef(_this);\n    return _this;\n  }\n  LinkBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      disabled = _a.disabled,\n      keytipProps = _a.keytipProps;\n    if (keytipProps) {\n      return React.createElement(KeytipData, {\n        keytipProps: keytipProps,\n        ariaDescribedBy: this.props['aria-describedby'],\n        disabled: disabled\n      }, function (keytipAttributes) {\n        return _this._renderContent(keytipAttributes);\n      });\n    }\n    return this._renderContent();\n  };\n  LinkBase.prototype.focus = function () {\n    var current = this._link.current;\n    if (current && current.focus) {\n      current.focus();\n    }\n  };\n  LinkBase.prototype._adjustPropsForRootType = function (RootType, props) {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    var children = props.children,\n      as = props.as,\n      disabled = props.disabled,\n      target = props.target,\n      href = props.href,\n      theme = props.theme,\n      getStyles = props.getStyles,\n      styles = props.styles,\n      componentRef = props.componentRef,\n      keytipProps = props.keytipProps,\n      underline = props.underline,\n      restProps = __rest(props, [\"children\", \"as\", \"disabled\", \"target\", \"href\", \"theme\", \"getStyles\", \"styles\", \"componentRef\", \"keytipProps\", \"underline\"]);\n    // RootType will be a string if we're dealing with an html component\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return __assign({\n          target: target,\n          href: disabled ? undefined : href\n        }, restProps);\n      }\n      // Add the type='button' prop for button elements\n      if (RootType === 'button') {\n        return __assign({\n          type: 'button',\n          disabled: disabled\n        }, restProps);\n      }\n      // Remove the target and href props for all other non anchor elements\n      return __assign(__assign({}, restProps), {\n        disabled: disabled\n      });\n    }\n    // Retain all props except 'as' for ReactComponents\n    return __assign({\n      target: target,\n      href: href,\n      disabled: disabled\n    }, restProps);\n  };\n  LinkBase.prototype._getRootType = function (props) {\n    if (props.as) {\n      return props.as;\n    }\n    if (props.href) {\n      return 'a';\n    }\n    return 'button';\n  };\n  return LinkBase;\n}(React.Component);\nexport { LinkBase };","map":{"version":3,"sources":["components/Link/Link.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\nimport { KeytipData } from '../../KeytipData';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\nexport class LinkBase extends React.Component<ILinkProps, {}> implements ILink {\n  private _link = React.createRef<HTMLAnchorElement | HTMLButtonElement | null>();\n\n  constructor(props: ILinkProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { disabled, keytipProps } = this.props;\n\n    if (keytipProps) {\n      return (\n        <KeytipData\n          keytipProps={keytipProps}\n          ariaDescribedBy={(this.props as { 'aria-describedby': string })['aria-describedby']}\n          disabled={disabled}\n        >\n          {(keytipAttributes: any): JSX.Element => this._renderContent(keytipAttributes)}\n        </KeytipData>\n      );\n    }\n\n    return this._renderContent();\n  }\n\n  public focus() {\n    const { current } = this._link;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  }\n\n  private _renderContent = (keytipAttributes: any = {}): JSX.Element => {\n    const { disabled, children, className, href, underline, theme, styles } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      className,\n      isButton: !href,\n      isDisabled: disabled,\n      isUnderlined: underline,\n      theme: theme!,\n    });\n\n    const RootType = this._getRootType(this.props);\n\n    return (\n      <RootType\n        {...keytipAttributes}\n        {...this._adjustPropsForRootType(RootType, this.props)}\n        className={classNames.root}\n        onClick={this._onClick}\n        ref={this._link}\n        aria-disabled={disabled}\n      >\n        {children}\n      </RootType>\n    );\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { onClick, disabled } = this.props;\n\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  private _adjustPropsForRootType(\n    RootType: string | React.ComponentClass | React.FunctionComponent,\n    props: ILinkProps & { getStyles?: any },\n  ): Partial<ILinkProps> {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    const {\n      children,\n      as,\n      disabled,\n      target,\n      href,\n      theme,\n      getStyles,\n      styles,\n      componentRef,\n      keytipProps,\n      underline,\n      ...restProps\n    } = props;\n\n    // RootType will be a string if we're dealing with an html component\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return {\n          target,\n          href: disabled ? undefined : href,\n          ...restProps,\n        };\n      }\n\n      // Add the type='button' prop for button elements\n      if (RootType === 'button') {\n        return {\n          type: 'button',\n          disabled,\n          ...restProps,\n        };\n      }\n\n      // Remove the target and href props for all other non anchor elements\n      return { ...restProps, disabled };\n    }\n\n    // Retain all props except 'as' for ReactComponents\n    return { target, href, disabled, ...restProps };\n  }\n\n  private _getRootType(props: ILinkProps): string | React.ComponentClass | React.FunctionComponent {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}