{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, KeyCodes, Async, initializeComponentRef } from '../../Utilities';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { CardCallout } from './CardCallout/CardCallout';\nvar getClassNames = classNamesFunction();\nvar ExpandingCardBase = /** @class */function (_super) {\n  __extends(ExpandingCardBase, _super);\n  function ExpandingCardBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._expandedElem = React.createRef();\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.escape) {\n        _this.props.onLeave && _this.props.onLeave(ev);\n      }\n    };\n    _this._onRenderCompactCard = function () {\n      return React.createElement(\"div\", {\n        className: _this._classNames.compactCard\n      }, _this.props.onRenderCompactCard(_this.props.renderData));\n    };\n    _this._onRenderExpandedCard = function () {\n      // firstFrameRendered helps in initially setting height of expanded card to 1px, even if mode prop is set to\n      // ExpandingCardMode.expanded on first render. This is to make sure transition animation takes place.\n      !_this.state.firstFrameRendered && _this._async.requestAnimationFrame(function () {\n        _this.setState({\n          firstFrameRendered: true\n        });\n      });\n      return React.createElement(\"div\", {\n        className: _this._classNames.expandedCard,\n        ref: _this._expandedElem\n      }, React.createElement(\"div\", {\n        className: _this._classNames.expandedCardScroll\n      }, _this.props.onRenderExpandedCard && _this.props.onRenderExpandedCard(_this.props.renderData)));\n    };\n    _this._checkNeedsScroll = function () {\n      var expandedCardHeight = _this.props.expandedCardHeight;\n      _this._async.requestAnimationFrame(function () {\n        if (_this._expandedElem.current && _this._expandedElem.current.scrollHeight >= expandedCardHeight) {\n          _this.setState({\n            needsScroll: true\n          });\n        }\n      });\n    };\n    _this._async = new Async(_this);\n    initializeComponentRef(_this);\n    _this.state = {\n      firstFrameRendered: false,\n      needsScroll: false\n    };\n    return _this;\n  }\n  ExpandingCardBase.prototype.componentDidMount = function () {\n    this._checkNeedsScroll();\n  };\n  ExpandingCardBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n  ExpandingCardBase.prototype.render = function () {\n    var _a = this.props,\n      styles = _a.styles,\n      compactCardHeight = _a.compactCardHeight,\n      expandedCardHeight = _a.expandedCardHeight,\n      theme = _a.theme,\n      mode = _a.mode,\n      className = _a.className;\n    var _b = this.state,\n      needsScroll = _b.needsScroll,\n      firstFrameRendered = _b.firstFrameRendered;\n    var finalHeight = compactCardHeight + expandedCardHeight;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      compactCardHeight: compactCardHeight,\n      className: className,\n      expandedCardHeight: expandedCardHeight,\n      needsScroll: needsScroll,\n      expandedCardFirstFrameRendered: mode === ExpandingCardMode.expanded && firstFrameRendered\n    });\n    var content = React.createElement(\"div\", {\n      onMouseEnter: this.props.onEnter,\n      onMouseLeave: this.props.onLeave,\n      onKeyDown: this._onKeyDown\n    }, this._onRenderCompactCard(), this._onRenderExpandedCard());\n    return React.createElement(CardCallout, __assign({}, this.props, {\n      content: content,\n      finalHeight: finalHeight,\n      className: this._classNames.root\n    }));\n  };\n  ExpandingCardBase.defaultProps = {\n    compactCardHeight: 156,\n    expandedCardHeight: 384,\n    directionalHintFixed: true\n  };\n  return ExpandingCardBase;\n}(React.Component);\nexport { ExpandingCardBase };","map":{"version":3,"sources":["components/HoverCard/ExpandingCard.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, KeyCodes, Async, initializeComponentRef } from '../../Utilities';\nimport {\n  ExpandingCardMode,\n  IExpandingCardProps,\n  IExpandingCardStyles,\n  IExpandingCardStyleProps,\n} from './ExpandingCard.types';\nimport { CardCallout } from './CardCallout/CardCallout';\n\nconst getClassNames = classNamesFunction<IExpandingCardStyleProps, IExpandingCardStyles>();\n\nexport interface IExpandingCardState {\n  firstFrameRendered: boolean;\n  needsScroll: boolean;\n}\n\nexport class ExpandingCardBase extends React.Component<IExpandingCardProps, IExpandingCardState> {\n  public static defaultProps = {\n    compactCardHeight: 156,\n    expandedCardHeight: 384,\n    directionalHintFixed: true,\n  };\n\n  private _classNames: { [key in keyof IExpandingCardStyles]: string };\n  private _expandedElem = React.createRef<HTMLDivElement>();\n  private _async: Async;\n\n  constructor(props: IExpandingCardProps) {\n    super(props);\n\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    this.state = {\n      firstFrameRendered: false,\n      needsScroll: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._checkNeedsScroll();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { styles, compactCardHeight, expandedCardHeight, theme, mode, className } = this.props;\n    const { needsScroll, firstFrameRendered } = this.state;\n\n    const finalHeight = compactCardHeight! + expandedCardHeight!;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      compactCardHeight,\n      className,\n      expandedCardHeight,\n      needsScroll: needsScroll,\n      expandedCardFirstFrameRendered: mode === ExpandingCardMode.expanded && firstFrameRendered,\n    });\n\n    const content: JSX.Element = (\n      <div onMouseEnter={this.props.onEnter} onMouseLeave={this.props.onLeave} onKeyDown={this._onKeyDown}>\n        {this._onRenderCompactCard()}\n        {this._onRenderExpandedCard()}\n      </div>\n    );\n\n    return (\n      <CardCallout {...this.props} content={content} finalHeight={finalHeight} className={this._classNames.root} />\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.escape) {\n      this.props.onLeave && this.props.onLeave(ev);\n    }\n  };\n\n  private _onRenderCompactCard = (): JSX.Element => {\n    return <div className={this._classNames.compactCard}>{this.props.onRenderCompactCard!(this.props.renderData)}</div>;\n  };\n\n  private _onRenderExpandedCard = (): JSX.Element => {\n    // firstFrameRendered helps in initially setting height of expanded card to 1px, even if mode prop is set to\n    // ExpandingCardMode.expanded on first render. This is to make sure transition animation takes place.\n    !this.state.firstFrameRendered &&\n      this._async.requestAnimationFrame(() => {\n        this.setState({\n          firstFrameRendered: true,\n        });\n      });\n\n    return (\n      <div className={this._classNames.expandedCard} ref={this._expandedElem}>\n        <div className={this._classNames.expandedCardScroll}>\n          {this.props.onRenderExpandedCard && this.props.onRenderExpandedCard(this.props.renderData)}\n        </div>\n      </div>\n    );\n  };\n\n  private _checkNeedsScroll = (): void => {\n    const { expandedCardHeight } = this.props;\n    this._async.requestAnimationFrame(() => {\n      if (this._expandedElem.current && this._expandedElem.current.scrollHeight >= expandedCardHeight!) {\n        this.setState({\n          needsScroll: true,\n        });\n      }\n    });\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}