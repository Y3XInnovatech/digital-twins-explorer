{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\nvar nameMap = {\n  start: 'flex-start',\n  end: 'flex-end'\n};\nvar GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner'\n};\nexport var styles = function (props, theme, tokens) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  var verticalFill = props.verticalFill,\n    horizontal = props.horizontal,\n    reversed = props.reversed,\n    grow = props.grow,\n    wrap = props.wrap,\n    horizontalAlign = props.horizontalAlign,\n    verticalAlign = props.verticalAlign,\n    disableShrink = props.disableShrink,\n    className = props.className;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  /* eslint-disable deprecation/deprecation */\n  var childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n  var maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  var maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  var padding = tokens && tokens.padding ? tokens.padding : props.padding;\n  /* eslint-enable deprecation/deprecation */\n  var _h = parseGap(childrenGap, theme),\n    rowGap = _h.rowGap,\n    columnGap = _h.columnGap;\n  var horizontalMargin = \"\" + -0.5 * columnGap.value + columnGap.unit;\n  var verticalMargin = \"\" + -0.5 * rowGap.value + rowGap.unit;\n  // styles to be applied to all direct children regardless of wrap or direction\n  var childStyles = {\n    textOverflow: 'ellipsis'\n  };\n  // selectors to be applied regardless of wrap or direction\n  var commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1\n    }\n  };\n  if (wrap) {\n    return {\n      root: [classNames.root, {\n        flexWrap: 'wrap',\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        width: 'auto',\n        overflow: 'visible',\n        height: '100%'\n      }, horizontalAlign && (_a = {}, _a[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _a), verticalAlign && (_b = {}, _b[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _b), className, {\n        // not allowed to be overridden by className\n        // since this is necessary in order to prevent collapsing margins\n        display: 'flex'\n      }, horizontal && {\n        height: verticalFill ? '100%' : 'auto'\n      }],\n      inner: [classNames.inner, {\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginLeft: horizontalMargin,\n        marginRight: horizontalMargin,\n        marginTop: verticalMargin,\n        marginBottom: verticalMargin,\n        overflow: 'visible',\n        boxSizing: 'border-box',\n        padding: parsePadding(padding, theme),\n        // avoid unnecessary calc() calls if horizontal gap is 0\n        width: columnGap.value === 0 ? '100%' : \"calc(100% + \" + columnGap.value + columnGap.unit + \")\",\n        maxWidth: '100vw',\n        selectors: __assign({\n          '> *': __assign({\n            margin: \"\" + 0.5 * rowGap.value + rowGap.unit + \" \" + 0.5 * columnGap.value + columnGap.unit\n          }, childStyles)\n        }, commonSelectors)\n      }, horizontalAlign && (_c = {}, _c[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _c), verticalAlign && (_d = {}, _d[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _d), horizontal && {\n        flexDirection: reversed ? 'row-reverse' : 'row',\n        // avoid unnecessary calc() calls if vertical gap is 0\n        height: rowGap.value === 0 ? '100%' : \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n        selectors: {\n          '> *': {\n            maxWidth: columnGap.value === 0 ? '100%' : \"calc(100% - \" + columnGap.value + columnGap.unit + \")\"\n          }\n        }\n      }, !horizontal && {\n        flexDirection: reversed ? 'column-reverse' : 'column',\n        height: \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n        selectors: {\n          '> *': {\n            maxHeight: rowGap.value === 0 ? '100%' : \"calc(100% - \" + rowGap.value + rowGap.unit + \")\"\n          }\n        }\n      }]\n    };\n  }\n  return {\n    root: [classNames.root, {\n      display: 'flex',\n      flexDirection: horizontal ? reversed ? 'row-reverse' : 'row' : reversed ? 'column-reverse' : 'column',\n      flexWrap: 'nowrap',\n      width: 'auto',\n      height: verticalFill ? '100%' : 'auto',\n      maxWidth: maxWidth,\n      maxHeight: maxHeight,\n      padding: parsePadding(padding, theme),\n      boxSizing: 'border-box',\n      selectors: __assign((_e = {\n        '> *': childStyles\n      }, _e[reversed ? '> *:not(:last-child)' : '> *:not(:first-child)'] = [horizontal && {\n        marginLeft: \"\" + columnGap.value + columnGap.unit\n      }, !horizontal && {\n        marginTop: \"\" + rowGap.value + rowGap.unit\n      }], _e), commonSelectors)\n    }, grow && {\n      flexGrow: grow === true ? 1 : grow\n    }, horizontalAlign && (_f = {}, _f[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _f), verticalAlign && (_g = {}, _g[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _g), className]\n  };\n};","map":{"version":3,"sources":["components/Stack/Stack.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { IStackComponent, IStackStyles, IStackStylesReturnType } from './Stack.types';\nimport { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst nameMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nconst GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner',\n};\n\nexport const styles: IStackComponent['styles'] = (props, theme, tokens): IStackStylesReturnType => {\n  const {\n    verticalFill,\n    horizontal,\n    reversed,\n    grow,\n    wrap,\n    horizontalAlign,\n    verticalAlign,\n    disableShrink,\n    className,\n  } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  /* eslint-disable deprecation/deprecation */\n  const childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n  const maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  const maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  const padding = tokens && tokens.padding ? tokens.padding : props.padding;\n  /* eslint-enable deprecation/deprecation */\n\n  const { rowGap, columnGap } = parseGap(childrenGap, theme);\n\n  const horizontalMargin = `${-0.5 * columnGap.value}${columnGap.unit}`;\n  const verticalMargin = `${-0.5 * rowGap.value}${rowGap.unit}`;\n\n  // styles to be applied to all direct children regardless of wrap or direction\n  const childStyles = {\n    textOverflow: 'ellipsis',\n  };\n\n  // selectors to be applied regardless of wrap or direction\n  const commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1,\n    },\n  };\n\n  if (wrap) {\n    return {\n      root: [\n        classNames.root,\n        {\n          flexWrap: 'wrap',\n          maxWidth,\n          maxHeight,\n          width: 'auto',\n          overflow: 'visible',\n          height: '100%',\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        className,\n        {\n          // not allowed to be overridden by className\n          // since this is necessary in order to prevent collapsing margins\n          display: 'flex',\n        },\n        horizontal && {\n          height: verticalFill ? '100%' : 'auto',\n        },\n      ],\n\n      inner: [\n        classNames.inner,\n        {\n          display: 'flex',\n          flexWrap: 'wrap',\n          marginLeft: horizontalMargin,\n          marginRight: horizontalMargin,\n          marginTop: verticalMargin,\n          marginBottom: verticalMargin,\n          overflow: 'visible',\n          boxSizing: 'border-box',\n          padding: parsePadding(padding, theme),\n          // avoid unnecessary calc() calls if horizontal gap is 0\n          width: columnGap.value === 0 ? '100%' : `calc(100% + ${columnGap.value}${columnGap.unit})`,\n          maxWidth: '100vw',\n\n          selectors: {\n            '> *': {\n              margin: `${0.5 * rowGap.value}${rowGap.unit} ${0.5 * columnGap.value}${columnGap.unit}`,\n\n              ...childStyles,\n            },\n            ...commonSelectors,\n          },\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        horizontal && {\n          flexDirection: reversed ? 'row-reverse' : 'row',\n\n          // avoid unnecessary calc() calls if vertical gap is 0\n          height: rowGap.value === 0 ? '100%' : `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxWidth: columnGap.value === 0 ? '100%' : `calc(100% - ${columnGap.value}${columnGap.unit})`,\n            },\n          },\n        },\n        !horizontal && {\n          flexDirection: reversed ? 'column-reverse' : 'column',\n          height: `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxHeight: rowGap.value === 0 ? '100%' : `calc(100% - ${rowGap.value}${rowGap.unit})`,\n            },\n          },\n        },\n      ],\n    } as IStackStyles;\n  }\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: horizontal ? (reversed ? 'row-reverse' : 'row') : reversed ? 'column-reverse' : 'column',\n        flexWrap: 'nowrap',\n        width: 'auto',\n        height: verticalFill ? '100%' : 'auto',\n        maxWidth,\n        maxHeight,\n        padding: parsePadding(padding, theme),\n        boxSizing: 'border-box',\n\n        selectors: {\n          '> *': childStyles,\n\n          // apply gap margin to every direct child except the first direct child if the direction is not reversed,\n          // and the last direct one if it is\n          [reversed ? '> *:not(:last-child)' : '> *:not(:first-child)']: [\n            horizontal && {\n              marginLeft: `${columnGap.value}${columnGap.unit}`,\n            },\n            !horizontal && {\n              marginTop: `${rowGap.value}${rowGap.unit}`,\n            },\n          ],\n\n          ...commonSelectors,\n        },\n      },\n      grow && {\n        flexGrow: grow === true ? 1 : grow,\n      },\n      horizontalAlign && {\n        [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n      },\n      verticalAlign && {\n        [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n      },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackStyles;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}