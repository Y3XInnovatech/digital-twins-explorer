{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { DropdownMenuItemType } from '../Dropdown.types';\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\nvar DropdownSizePosCache = /** @class */function () {\n  function DropdownSizePosCache() {\n    this._size = 0;\n  }\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n  DropdownSizePosCache.prototype.updateOptions = function (options) {\n    var displayOnlyOptionsCache = [];\n    var size = 0;\n    for (var i = 0; i < options.length; i++) {\n      if (options[i].itemType === DropdownMenuItemType.Divider || options[i].itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n      } else if (!options[i].hidden) {\n        size++;\n      }\n    }\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._cachedOptions = __spreadArrays(options);\n  };\n  Object.defineProperty(DropdownSizePosCache.prototype, \"optionSetSize\", {\n    /**\n     * The size of all the selectable options.\n     */\n    get: function () {\n      return this._size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DropdownSizePosCache.prototype, \"cachedOptions\", {\n    /**\n     * The chached options array.\n     */\n    get: function () {\n      return this._cachedOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n  DropdownSizePosCache.prototype.positionInSet = function (index) {\n    if (index === undefined) {\n      return undefined;\n    }\n    // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n    var offset = 0;\n    while (index > this._displayOnlyOptionsCache[offset]) {\n      offset++;\n    }\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(\"Unexpected: Option at index \" + index + \" is not a selectable element.\");\n    }\n    return index - offset + 1;\n  };\n  return DropdownSizePosCache;\n}();\nexport { DropdownSizePosCache };","map":{"version":3,"sources":["components/Dropdown/utilities/DropdownSizePosCache.ts"],"names":[],"mappings":";AAAA,SAA0B,oBAAoB,QAAQ,mBAAmB;AAEzE;;;;;;;;;AASG;AACH,IAAA,oBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,oBAAA,CAAA,EAAA;IAGU,IAAA,CAAA,KAAK,GAAG,CAAC;EA0DnB;EAxDE;;AAEG;EACI,oBAAA,CAAA,SAAA,CAAA,aAAa,GAApB,UAAqB,OAA0B,EAAA;IAC7C,IAAM,uBAAuB,GAAG,EAAE;IAClC,IAAI,IAAI,GAAG,CAAC;IACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACvC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,oBAAoB,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,oBAAoB,CAAC,MAAM,EAAE;QAC/G,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;OAChC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;QAC7B,IAAI,EAAE;MACP;IACF;IAED,IAAI,CAAC,KAAK,GAAG,IAAI;IACjB,IAAI,CAAC,wBAAwB,GAAG,uBAAuB;IACvD,IAAI,CAAC,cAAc,GAAA,cAAA,CAAO,OAAO,CAAC;EACpC,CAAC;EAKD,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAA,EAAA,eAAa,EAAA;IAHxB;;AAEG;SACH,SAAA,CAAA,EAAA;MACE,OAAO,IAAI,CAAC,KAAK;IACnB,CAAC;;;IAAA;EAKD,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAA,EAAA,eAAa,EAAA;IAHxB;;AAEG;SACH,SAAA,CAAA,EAAA;MACE,OAAO,IAAI,CAAC,cAAc;IAC5B,CAAC;;;IAAA;EAED;;;;AAIG;EACI,oBAAA,CAAA,SAAA,CAAA,aAAa,GAApB,UAAqB,KAAyB,EAAA;IAC5C,IAAI,KAAK,KAAK,SAAS,EAAE;MACvB,OAAO,SAAS;IACjB;IAED;IACA;IACA,IAAI,MAAM,GAAG,CAAC;IACd,OAAO,KAAK,GAAG,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,EAAE;MACpD,MAAM,EAAE;IACT;IAED,IAAI,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,KAAK,KAAK,EAAE;MACnD,MAAM,IAAI,KAAK,CAAC,8BAAA,GAA+B,KAAK,GAAA,+BAA+B,CAAC;IACrF;IAED,OAAO,KAAK,GAAG,MAAM,GAAG,CAAC;EAC3B,CAAC;EACH,OAAA,oBAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["import { IDropdownOption, DropdownMenuItemType } from '../Dropdown.types';\n\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\nexport class DropdownSizePosCache {\n  private _cachedOptions: IDropdownOption[];\n  private _displayOnlyOptionsCache: number[];\n  private _size = 0;\n\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n  public updateOptions(options: IDropdownOption[]) {\n    const displayOnlyOptionsCache = [];\n    let size = 0;\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].itemType === DropdownMenuItemType.Divider || options[i].itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n      } else if (!options[i].hidden) {\n        size++;\n      }\n    }\n\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._cachedOptions = [...options];\n  }\n\n  /**\n   * The size of all the selectable options.\n   */\n  public get optionSetSize(): number {\n    return this._size;\n  }\n\n  /**\n   * The chached options array.\n   */\n  public get cachedOptions(): IDropdownOption[] {\n    return this._cachedOptions;\n  }\n\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n  public positionInSet(index: number | undefined): number | undefined {\n    if (index === undefined) {\n      return undefined;\n    }\n\n    // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n    let offset = 0;\n    while (index > this._displayOnlyOptionsCache[offset]) {\n      offset++;\n    }\n\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(`Unexpected: Option at index ${index} is not a selectable element.`);\n    }\n\n    return index - offset + 1;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}