{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { TestSpan } from \"./testSpan\";\nimport { NoOpTracer } from \"../noop/noOpTracer\";\nimport { SpanKind, TraceFlags } from \"@opentelemetry/api\";\n/**\n * A mock tracer useful for testing\n */\nvar TestTracer = /** @class */function (_super) {\n  __extends(TestTracer, _super);\n  function TestTracer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.traceIdCounter = 0;\n    _this.spanIdCounter = 0;\n    _this.rootSpans = [];\n    _this.knownSpans = [];\n    return _this;\n  }\n  TestTracer.prototype.getNextTraceId = function () {\n    this.traceIdCounter++;\n    return String(this.traceIdCounter);\n  };\n  TestTracer.prototype.getNextSpanId = function () {\n    this.spanIdCounter++;\n    return String(this.spanIdCounter);\n  };\n  /**\n   * Returns all Spans that were created without a parent\n   */\n  TestTracer.prototype.getRootSpans = function () {\n    return this.rootSpans;\n  };\n  /**\n   * Returns all Spans this Tracer knows about\n   */\n  TestTracer.prototype.getKnownSpans = function () {\n    return this.knownSpans;\n  };\n  /**\n   * Returns all Spans where end() has not been called\n   */\n  TestTracer.prototype.getActiveSpans = function () {\n    return this.knownSpans.filter(function (span) {\n      return !span.endCalled;\n    });\n  };\n  /**\n   * Return all Spans for a particular trace, grouped by their\n   * parent Span in a tree-like structure\n   * @param traceId The traceId to return the graph for\n   */\n  TestTracer.prototype.getSpanGraph = function (traceId) {\n    var traceSpans = this.knownSpans.filter(function (span) {\n      return span.context().traceId === traceId;\n    });\n    var roots = [];\n    var nodeMap = new Map();\n    for (var _i = 0, traceSpans_1 = traceSpans; _i < traceSpans_1.length; _i++) {\n      var span = traceSpans_1[_i];\n      var spanId = span.context().spanId;\n      var node = {\n        name: span.name,\n        children: []\n      };\n      nodeMap.set(spanId, node);\n      if (span.parentSpanId) {\n        var parent = nodeMap.get(span.parentSpanId);\n        if (!parent) {\n          throw new Error(\"Span with name \" + node.name + \" has an unknown parentSpan with id \" + span.parentSpanId);\n        }\n        parent.children.push(node);\n      } else {\n        roots.push(node);\n      }\n    }\n    return {\n      roots: roots\n    };\n  };\n  /**\n   * Starts a new Span.\n   * @param name The name of the span.\n   * @param options The SpanOptions used during Span creation.\n   */\n  TestTracer.prototype.startSpan = function (name, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var parentContext = this._getParentContext(options);\n    var traceId;\n    var isRootSpan = false;\n    if (parentContext && parentContext.traceId) {\n      traceId = parentContext.traceId;\n    } else {\n      traceId = this.getNextTraceId();\n      isRootSpan = true;\n    }\n    var context = {\n      traceId: traceId,\n      spanId: this.getNextSpanId(),\n      traceFlags: TraceFlags.NONE\n    };\n    var span = new TestSpan(this, name, context, options.kind || SpanKind.INTERNAL, parentContext ? parentContext.spanId : undefined, options.startTime);\n    this.knownSpans.push(span);\n    if (isRootSpan) {\n      this.rootSpans.push(span);\n    }\n    return span;\n  };\n  TestTracer.prototype._getParentContext = function (options) {\n    var parent = options.parent;\n    var result;\n    if (parent) {\n      if (\"traceId\" in parent) {\n        result = parent;\n      } else {\n        result = parent.context();\n      }\n    }\n    return result;\n  };\n  return TestTracer;\n}(NoOpTracer);\nexport { TestTracer };","map":{"version":3,"sources":["../../../../src/tracers/test/testTracer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TestSpan } from \"./testSpan\";\nimport { NoOpTracer } from \"../noop/noOpTracer\";\nimport { SpanContext, SpanKind, SpanOptions, TraceFlags } from \"@opentelemetry/api\";\n\n/**\n * Simple representation of a Span that only has name and child relationships.\n * Children should be arranged in the order they were created.\n */\nexport interface SpanGraphNode {\n  /**\n   * The Span name\n   */\n  name: string;\n  /**\n   * All child Spans of this Span\n   */\n  children: SpanGraphNode[];\n}\n\n/**\n * Contains all the spans for a particular TraceID\n * starting at unparented roots\n */\nexport interface SpanGraph {\n  /**\n   * All Spans without a parentSpanId\n   */\n  roots: SpanGraphNode[];\n}\n\n/**\n * A mock tracer useful for testing\n */\nexport class TestTracer extends NoOpTracer {\n  private traceIdCounter = 0;\n  private getNextTraceId(): string {\n    this.traceIdCounter++;\n    return String(this.traceIdCounter);\n  }\n\n  private spanIdCounter = 0;\n  private getNextSpanId(): string {\n    this.spanIdCounter++;\n    return String(this.spanIdCounter);\n  }\n\n  private rootSpans: TestSpan[] = [];\n  private knownSpans: TestSpan[] = [];\n\n  /**\n   * Returns all Spans that were created without a parent\n   */\n  getRootSpans(): TestSpan[] {\n    return this.rootSpans;\n  }\n\n  /**\n   * Returns all Spans this Tracer knows about\n   */\n  getKnownSpans(): TestSpan[] {\n    return this.knownSpans;\n  }\n\n  /**\n   * Returns all Spans where end() has not been called\n   */\n  getActiveSpans(): TestSpan[] {\n    return this.knownSpans.filter((span) => {\n      return !span.endCalled;\n    });\n  }\n\n  /**\n   * Return all Spans for a particular trace, grouped by their\n   * parent Span in a tree-like structure\n   * @param traceId The traceId to return the graph for\n   */\n  getSpanGraph(traceId: string): SpanGraph {\n    const traceSpans = this.knownSpans.filter((span) => {\n      return span.context().traceId === traceId;\n    });\n\n    const roots: SpanGraphNode[] = [];\n    const nodeMap: Map<string, SpanGraphNode> = new Map<string, SpanGraphNode>();\n\n    for (const span of traceSpans) {\n      const spanId = span.context().spanId;\n      const node: SpanGraphNode = {\n        name: span.name,\n        children: []\n      };\n      nodeMap.set(spanId, node);\n      if (span.parentSpanId) {\n        const parent = nodeMap.get(span.parentSpanId);\n        if (!parent) {\n          throw new Error(\n            `Span with name ${node.name} has an unknown parentSpan with id ${span.parentSpanId}`\n          );\n        }\n        parent.children.push(node);\n      } else {\n        roots.push(node);\n      }\n    }\n\n    return {\n      roots\n    };\n  }\n\n  /**\n   * Starts a new Span.\n   * @param name The name of the span.\n   * @param options The SpanOptions used during Span creation.\n   */\n  startSpan(name: string, options: SpanOptions = {}): TestSpan {\n    const parentContext = this._getParentContext(options);\n\n    let traceId: string;\n    let isRootSpan = false;\n\n    if (parentContext && parentContext.traceId) {\n      traceId = parentContext.traceId;\n    } else {\n      traceId = this.getNextTraceId();\n      isRootSpan = true;\n    }\n\n    const context: SpanContext = {\n      traceId,\n      spanId: this.getNextSpanId(),\n      traceFlags: TraceFlags.NONE\n    };\n    const span = new TestSpan(\n      this,\n      name,\n      context,\n      options.kind || SpanKind.INTERNAL,\n      parentContext ? parentContext.spanId : undefined,\n      options.startTime\n    );\n    this.knownSpans.push(span);\n    if (isRootSpan) {\n      this.rootSpans.push(span);\n    }\n    return span;\n  }\n\n  private _getParentContext(options: SpanOptions): SpanContext | undefined {\n    const parent = options.parent;\n    let result: SpanContext | undefined;\n    if (parent) {\n      if (\"traceId\" in parent) {\n        result = parent;\n      } else {\n        result = parent.context();\n      }\n    }\n    return result;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}