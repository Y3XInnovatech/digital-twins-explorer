{"ast":null,"code":"var _a, _b, _c;\nimport { __assign } from \"tslib\";\nimport { HighContrastSelector, ScreenWidthMaxSmall, getScreenSelector, getGlobalClassNames, getFocusStyle, IconFontSizes, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nvar GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine'\n};\nvar backgroundColor = (_a = {}, _a[MessageBarType.error] = 'errorBackground', _a[MessageBarType.blocked] = 'errorBackground', _a[MessageBarType.success] = 'successBackground', _a[MessageBarType.warning] = 'warningBackground', _a[MessageBarType.severeWarning] = 'severeWarningBackground', _a[MessageBarType.info] = 'infoBackground', _a);\nvar highContrastBackgroundColor = (_b = {}, _b[MessageBarType.error] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.blocked] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.success] = 'rgba(48, 241, 73, 0.3)', _b[MessageBarType.warning] = 'rgba(255, 254, 57, 0.3)', _b[MessageBarType.severeWarning] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.info] = 'Window', _b);\nvar iconColor = (_c = {}, _c[MessageBarType.error] = 'errorIcon', _c[MessageBarType.blocked] = 'errorIcon', _c[MessageBarType.success] = 'successIcon', _c[MessageBarType.warning] = 'warningIcon', _c[MessageBarType.severeWarning] = 'severeWarningIcon', _c[MessageBarType.info] = 'infoIcon', _c);\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e;\n  var theme = props.theme,\n    className = props.className,\n    onDismiss = props.onDismiss,\n    truncated = props.truncated,\n    isMultiline = props.isMultiline,\n    expandSingleLine = props.expandSingleLine,\n    _f = props.messageBarType,\n    messageBarType = _f === void 0 ? MessageBarType.info : _f;\n  var semanticColors = theme.semanticColors,\n    fonts = theme.fonts;\n  var SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var dismissalAndExpandIconStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: (_a = {}, _a[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), {\n      color: 'WindowText'\n    }), _a)\n  };\n  var dismissalAndExpandStyle = [getFocusStyle(theme, {\n    inset: 1,\n    highContrastStyle: {\n      outlineOffset: '-6px',\n      outline: '1px solid Highlight'\n    },\n    borderColor: 'transparent'\n  }), {\n    flexShrink: 0,\n    width: 32,\n    height: 32,\n    padding: '8px 12px',\n    selectors: {\n      '& .ms-Button-icon': dismissalAndExpandIconStyle,\n      ':hover': {\n        backgroundColor: 'transparent'\n      },\n      ':active': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }];\n  return {\n    root: [classNames.root, fonts.medium, messageBarType === MessageBarType.error && classNames.error, messageBarType === MessageBarType.blocked && classNames.blocked, messageBarType === MessageBarType.severeWarning && classNames.severeWarning, messageBarType === MessageBarType.success && classNames.success, messageBarType === MessageBarType.warning && classNames.warning, isMultiline ? classNames.multiline : classNames.singleline, !isMultiline && onDismiss && classNames.dismissalSingleLine, !isMultiline && truncated && classNames.expandingSingleLine, {\n      background: semanticColors[backgroundColor[messageBarType]],\n      color: semanticColors.messageText,\n      minHeight: 32,\n      width: '100%',\n      display: 'flex',\n      wordBreak: 'break-word',\n      selectors: (_b = {\n        '.ms-Link': {\n          color: semanticColors.messageLink,\n          selectors: {\n            ':hover': {\n              color: semanticColors.messageLinkHovered\n            }\n          }\n        }\n      }, _b[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), {\n        background: highContrastBackgroundColor[messageBarType],\n        border: '1px solid WindowText',\n        color: 'WindowText'\n      }), _b)\n    }, isMultiline && {\n      flexDirection: 'column'\n    }, className],\n    content: [classNames.content, {\n      display: 'flex',\n      width: '100%',\n      lineHeight: 'normal'\n    }],\n    iconContainer: [classNames.iconContainer, {\n      fontSize: IconFontSizes.medium,\n      minWidth: 16,\n      minHeight: 16,\n      display: 'flex',\n      flexShrink: 0,\n      margin: '8px 0 8px 12px'\n    }],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: (_c = {}, _c[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), {\n        color: 'WindowText'\n      }), _c)\n    },\n    text: [classNames.text, __assign(__assign({\n      minWidth: 0,\n      display: 'flex',\n      flexGrow: 1,\n      margin: 8\n    }, fonts.small), {\n      selectors: (_d = {}, _d[HighContrastSelector] = __assign({}, getHighContrastNoAdjustStyle()), _d)\n    }), !onDismiss && {\n      marginRight: 12\n    }],\n    innerText: [classNames.innerText, {\n      lineHeight: 16,\n      selectors: {\n        '& span a': {\n          paddingLeft: 4\n        }\n      }\n    }, truncated && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }, !isMultiline && {\n      // In high contrast this causes the top and bottom of links' focus outline to be clipped\n      // (not sure of a good way around that while still maintaining text clipping)\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }, !isMultiline && !truncated && {\n      selectors: (_e = {}, _e[SmallScreenSelector] = {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap'\n      }, _e)\n    }, expandSingleLine && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [isMultiline ? classNames.actions : classNames.actionsSingleline, {\n      display: 'flex',\n      flexGrow: 0,\n      flexShrink: 0,\n      flexBasis: 'auto',\n      flexDirection: 'row-reverse',\n      alignItems: 'center',\n      margin: '0 12px 0 8px',\n      selectors: {\n        '& button:nth-child(n+2)': {\n          marginLeft: 8\n        }\n      }\n    }, isMultiline && {\n      marginBottom: 8\n    }, onDismiss && !isMultiline && {\n      marginRight: 0\n    }]\n  };\n};","map":{"version":3,"sources":["components/MessageBar/MessageBar.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IStyle,\n  ISemanticColors,\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}