{"ast":null,"code":"import { MAX_COLOR_RGB } from './consts';\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\nexport function hsv2rgb(h, s, v) {\n  s = s / 100;\n  v = v / 100;\n  var rgb = [];\n  var c = v * s;\n  var hh = h / 60;\n  var x = c * (1 - Math.abs(hh % 2 - 1));\n  var m = v - c;\n  switch (Math.floor(hh)) {\n    case 0:\n      rgb = [c, x, 0];\n      break;\n    case 1:\n      rgb = [x, c, 0];\n      break;\n    case 2:\n      rgb = [0, c, x];\n      break;\n    case 3:\n      rgb = [0, x, c];\n      break;\n    case 4:\n      rgb = [x, 0, c];\n      break;\n    case 5:\n      rgb = [c, 0, x];\n      break;\n  }\n  return {\n    r: Math.round(MAX_COLOR_RGB * (rgb[0] + m)),\n    g: Math.round(MAX_COLOR_RGB * (rgb[1] + m)),\n    b: Math.round(MAX_COLOR_RGB * (rgb[2] + m))\n  };\n}","map":{"version":3,"sources":["utilities/color/hsv2rgb.ts"],"names":[],"mappings":"AACA,SAAS,aAAa,QAAQ,UAAU;AAExC;AACA,OAAM,SAAU,OAAO,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAA;EACrD,CAAC,GAAG,CAAC,GAAG,GAAG;EACX,CAAC,GAAG,CAAC,GAAG,GAAG;EAEX,IAAI,GAAG,GAAa,EAAE;EAEtB,IAAM,CAAC,GAAG,CAAC,GAAG,CAAC;EACf,IAAM,EAAE,GAAG,CAAC,GAAG,EAAE;EACjB,IAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAE,EAAE,GAAG,CAAC,GAAI,CAAC,CAAC,CAAC;EAC1C,IAAM,CAAC,GAAG,CAAC,GAAG,CAAC;EAEf,QAAQ,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;IACpB,KAAK,CAAC;MACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACf;IAEF,KAAK,CAAC;MACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACf;IAEF,KAAK,CAAC;MACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACf;IAEF,KAAK,CAAC;MACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACf;IAEF,KAAK,CAAC;MACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACf;IAEF,KAAK,CAAC;MACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACf;EACH;EAED,OAAO;IACL,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3C,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3C,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;GAC3C;AACH","sourcesContent":["import { IRGB } from './interfaces';\nimport { MAX_COLOR_RGB } from './consts';\n\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\nexport function hsv2rgb(h: number, s: number, v: number): IRGB {\n  s = s / 100;\n  v = v / 100;\n\n  let rgb: number[] = [];\n\n  const c = v * s;\n  const hh = h / 60;\n  const x = c * (1 - Math.abs((hh % 2) - 1));\n  const m = v - c;\n\n  switch (Math.floor(hh)) {\n    case 0:\n      rgb = [c, x, 0];\n      break;\n\n    case 1:\n      rgb = [x, c, 0];\n      break;\n\n    case 2:\n      rgb = [0, c, x];\n      break;\n\n    case 3:\n      rgb = [0, x, c];\n      break;\n\n    case 4:\n      rgb = [x, 0, c];\n      break;\n\n    case 5:\n      rgb = [c, 0, x];\n      break;\n  }\n\n  return {\n    r: Math.round(MAX_COLOR_RGB * (rgb[0] + m)),\n    g: Math.round(MAX_COLOR_RGB * (rgb[1] + m)),\n    b: Math.round(MAX_COLOR_RGB * (rgb[2] + m)),\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}