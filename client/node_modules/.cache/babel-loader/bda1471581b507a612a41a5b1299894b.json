{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { Async, DelayedRender, classNamesFunction, getId, getNativeProps, getWindow, initializeComponentRef, inputProperties, isControlled, isIE11, textAreaProperties, warn, warnControlledUsage, warnMutuallyExclusive } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STATE_VALUE = '';\nvar COMPONENT_NAME = 'TextField';\nvar REVEAL_ICON_NAME = 'RedEye';\nvar HIDE_ICON_NAME = 'Hide';\nvar TextFieldBase = /** @class */function (_super) {\n  __extends(TextFieldBase, _super);\n  function TextFieldBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._textElement = React.createRef();\n    _this._onFocus = function (ev) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n      _this.setState({\n        isFocused: true\n      }, function () {\n        if (_this.props.validateOnFocusIn) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n    _this._onBlur = function (ev) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n      _this.setState({\n        isFocused: false\n      }, function () {\n        if (_this.props.validateOnFocusOut) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n        required = props.required;\n      // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n      if (label) {\n        return React.createElement(Label, {\n          required: required,\n          htmlFor: _this._id,\n          styles: labelStyles,\n          disabled: props.disabled,\n          id: _this._labelId\n        }, props.label);\n      }\n      return null;\n    };\n    _this._onRenderDescription = function (props) {\n      if (props.description) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.description\n        }, props.description);\n      }\n      return null;\n    };\n    _this._onRevealButtonClick = function (event) {\n      _this.setState(function (prevState) {\n        return {\n          isRevealingPassword: !prevState.isRevealingPassword\n        };\n      });\n    };\n    _this._onInputChange = function (event) {\n      // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n      // which have *probably* been fixed now:\n      // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n      // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n      // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n      // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n      var element = event.target;\n      var value = element.value;\n      // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n      if (value === undefined || value === _this._lastChangeValue) {\n        return;\n      }\n      _this._lastChangeValue = value;\n      // This is so developers can access the event properties in asynchronous callbacks\n      // https://reactjs.org/docs/events.html#event-pooling\n      event.persist();\n      var isSameValue;\n      _this.setState(function (prevState, props) {\n        var prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue;\n        // Avoid doing unnecessary work when the value has not changed.\n        if (isSameValue) {\n          return null;\n        }\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        return _this._isControlled ? null : {\n          uncontrolledValue: value\n        };\n      }, function () {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        var onChange = _this.props.onChange;\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      });\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage'\n      });\n    }\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    _this._labelId = getId(COMPONENT_NAME + 'Label');\n    _this._warnControlledUsage();\n    var _a = props.defaultValue,\n      defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    _this.state = {\n      uncontrolledValue: _this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: ''\n    };\n    _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n    _this._lastValidation = 0;\n    return _this;\n  }\n  Object.defineProperty(TextFieldBase.prototype, \"value\", {\n    /**\n     * Gets the current value of the text field.\n     */\n    get: function () {\n      return _getValue(this.props, this.state);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  TextFieldBase.prototype.componentDidMount = function () {\n    this._adjustInputHeight();\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  };\n  TextFieldBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n  TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {\n    return {\n      selection: [this.selectionStart, this.selectionEnd]\n    };\n  };\n  TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n    var props = this.props;\n    var _a = (snapshot || {}).selection,\n      selection = _a === void 0 ? [null, null] : _a;\n    var start = selection[0],\n      end = selection[1];\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n    var prevValue = _getValue(prevProps, prevState);\n    var value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({\n          errorMessage: ''\n        });\n      }\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n      // Reset the record of the last value seen by a change/input event\n      this._lastChangeValue = undefined;\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  };\n  TextFieldBase.prototype.render = function () {\n    var _a = this.props,\n      borderless = _a.borderless,\n      className = _a.className,\n      disabled = _a.disabled,\n      iconProps = _a.iconProps,\n      inputClassName = _a.inputClassName,\n      label = _a.label,\n      multiline = _a.multiline,\n      required = _a.required,\n      underlined = _a.underlined,\n      prefix = _a.prefix,\n      resizable = _a.resizable,\n      suffix = _a.suffix,\n      theme = _a.theme,\n      styles = _a.styles,\n      autoAdjustHeight = _a.autoAdjustHeight,\n      canRevealPassword = _a.canRevealPassword,\n      type = _a.type,\n      _b = _a.onRenderPrefix,\n      onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b,\n      _c = _a.onRenderSuffix,\n      onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c,\n      _d = _a.onRenderLabel,\n      onRenderLabel = _d === void 0 ? this._onRenderLabel : _d,\n      _e = _a.onRenderDescription,\n      onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;\n    var _f = this.state,\n      isFocused = _f.isFocused,\n      isRevealingPassword = _f.isRevealingPassword;\n    var errorMessage = this._errorMessage;\n    var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n    var classNames = this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      focused: isFocused,\n      required: required,\n      multiline: multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless: borderless,\n      resizable: resizable,\n      hasIcon: !!iconProps,\n      underlined: underlined,\n      inputClassName: inputClassName,\n      autoAdjustHeight: autoAdjustHeight,\n      hasRevealButton: hasRevealButton\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, React.createElement(\"div\", {\n      className: classNames.wrapper\n    }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(\"div\", {\n      className: classNames.fieldGroup\n    }, (prefix !== undefined || this.props.onRenderPrefix) && React.createElement(\"div\", {\n      className: classNames.prefix\n    }, onRenderPrefix(this.props, this._onRenderPrefix)), multiline ? this._renderTextArea() : this._renderInput(), iconProps && React.createElement(Icon, __assign({\n      className: classNames.icon\n    }, iconProps)), hasRevealButton &&\n    // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n    React.createElement(\"button\", {\n      className: classNames.revealButton,\n      onClick: this._onRevealButtonClick,\n      type: \"button\"\n    }, React.createElement(\"span\", {\n      className: classNames.revealSpan\n    }, React.createElement(Icon, {\n      className: classNames.revealIcon,\n      iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME\n    }))), (suffix !== undefined || this.props.onRenderSuffix) && React.createElement(\"div\", {\n      className: classNames.suffix\n    }, onRenderSuffix(this.props, this._onRenderSuffix)))), this._isDescriptionAvailable && React.createElement(\"span\", {\n      id: this._descriptionId\n    }, onRenderDescription(this.props, this._onRenderDescription), errorMessage && React.createElement(\"div\", {\n      role: \"alert\"\n    }, React.createElement(DelayedRender, null, React.createElement(\"p\", {\n      className: classNames.errorMessage\n    }, React.createElement(\"span\", {\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage))))));\n  };\n  /**\n   * Sets focus on the text field\n   */\n  TextFieldBase.prototype.focus = function () {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  };\n  /**\n   * Blurs the text field.\n   */\n  TextFieldBase.prototype.blur = function () {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  };\n  /**\n   * Selects the text field\n   */\n  TextFieldBase.prototype.select = function () {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  };\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  TextFieldBase.prototype.setSelectionStart = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  };\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  TextFieldBase.prototype.setSelectionEnd = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n    /**\n     * Gets the selection start of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionStart : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n    /**\n     * Gets the selection end of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  TextFieldBase.prototype.setSelectionRange = function (start, end) {\n    if (this._textElement.current) {\n      this._textElement.current.setSelectionRange(start, end);\n    }\n  };\n  TextFieldBase.prototype._warnControlledUsage = function (prevProps) {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly'\n    });\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\"Warning: 'value' prop on '\" + COMPONENT_NAME + \"' should not be null. Consider using an \" + 'empty string to clear the component or undefined to indicate an uncontrolled component.');\n    }\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"_id\", {\n    /** Returns `props.id` if available, or a fallback if not. */\n    get: function () {\n      return this.props.id || this._fallbackId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isControlled\", {\n    get: function () {\n      return isControlled(this.props, 'value');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  TextFieldBase.prototype._onRenderPrefix = function (props) {\n    var prefix = props.prefix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, prefix);\n  };\n  TextFieldBase.prototype._onRenderSuffix = function (props) {\n    var suffix = props.suffix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, suffix);\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n    /**\n     * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n     *\n     * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n     * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n     */\n    get: function () {\n      var _a = this.props.errorMessage,\n        errorMessage = _a === void 0 ? this.state.errorMessage : _a;\n      return errorMessage || '';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n    /**\n     * If a custom description render function is supplied then treat description as always available.\n     * Otherwise defer to the presence of description or error message text.\n     */\n    get: function () {\n      var props = this.props;\n      return !!(props.onRenderDescription || props.description || this._errorMessage);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  TextFieldBase.prototype._renderTextArea = function () {\n    var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return React.createElement(\"textarea\", __assign({\n      id: this._id\n    }, textAreaProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": !!this._errorMessage,\n      \"aria-label\": this.props.ariaLabel,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n  TextFieldBase.prototype._renderInput = function () {\n    var _a;\n    var inputProps = getNativeProps(this.props, inputProperties, ['defaultValue', 'type']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    var type = this.state.isRevealingPassword ? 'text' : (_a = this.props.type, _a !== null && _a !== void 0 ? _a : 'text');\n    return React.createElement(\"input\", __assign({\n      type: type,\n      id: this._id,\n      \"aria-labelledby\": ariaLabelledBy\n    }, inputProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-label\": this.props.ariaLabel,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": !!this._errorMessage,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n  TextFieldBase.prototype._validate = function (value) {\n    var _this = this;\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n    this._latestValidateValue = value;\n    var onGetErrorMessage = this.props.onGetErrorMessage;\n    var result = onGetErrorMessage && onGetErrorMessage(value || '');\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({\n          errorMessage: result\n        });\n        this._notifyAfterValidate(value, result);\n      } else {\n        var currentValidation_1 = ++this._lastValidation;\n        result.then(function (errorMessage) {\n          if (currentValidation_1 === _this._lastValidation) {\n            _this.setState({\n              errorMessage: errorMessage\n            });\n          }\n          _this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  };\n  TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  };\n  TextFieldBase.prototype._adjustInputHeight = function () {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      var textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  };\n  TextFieldBase.defaultProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n    canRevealPassword: false\n  };\n  return TextFieldBase;\n}(React.Component);\nexport { TextFieldBase };\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props, state) {\n  var _a = props.value,\n    value = _a === void 0 ? state.uncontrolledValue : _a;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props) {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n// Only calculate this once across all TextFields, since will stay the same\nvar __browserNeedsRevealButton;\nfunction _browserNeedsRevealButton() {\n  var _a;\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    var win = getWindow();\n    if ((_a = win) === null || _a === void 0 ? void 0 : _a.navigator) {\n      // Edge, Chromium Edge\n      var isEdge = /Edg/.test(win.navigator.userAgent || '');\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}","map":{"version":3,"sources":["components/TextField/TextField.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAE9B,SAAS,KAAK,QAAwC,aAAa;AACnE,SAAS,IAAI,QAAQ,YAAY;AACjC,SACE,KAAK,EACL,aAAa,EAEb,kBAAkB,EAClB,KAAK,EACL,cAAc,EACd,SAAS,EACT,sBAAsB,EACtB,eAAe,EACf,YAAY,EACZ,MAAM,EACN,kBAAkB,EAClB,IAAI,EACJ,mBAAmB,EACnB,qBAAqB,QAChB,iBAAiB;AAGxB,IAAM,aAAa,GAAG,kBAAkB,CAAA,CAA0C;AA+BlF,IAAM,mBAAmB,GAAG,EAAE;AAC9B,IAAM,cAAc,GAAG,WAAW;AAElC,IAAM,gBAAgB,GAAG,QAAQ;AACjC,IAAM,cAAc,GAAG,MAAM;AAE7B,IAAA,aAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmC,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;EAuBjC,SAAA,aAAA,CAAmB,KAAsB,EAAA;IAAzC,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IAPN,KAAA,CAAA,YAAY,GAAG,KAAK,CAAC,SAAS,CAAA,CAA0C;IA4SxE,KAAA,CAAA,QAAQ,GAAG,UAAC,EAA4D,EAAA;MAC9E,IAAI,KAAI,CAAC,KAAK,CAAC,OAAO,EAAE;QACtB,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;MACvB;MAED,KAAI,CAAC,QAAQ,CAAC;QAAE,SAAS,EAAE;MAAI,CAAE,EAAE,YAAA;QACjC,IAAI,KAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE;UAChC,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,KAAK,CAAC;QAC3B;MACH,CAAC,CAAC;IACJ,CAAC;IAEO,KAAA,CAAA,OAAO,GAAG,UAAC,EAA4D,EAAA;MAC7E,IAAI,KAAI,CAAC,KAAK,CAAC,MAAM,EAAE;QACrB,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;MACtB;MAED,KAAI,CAAC,QAAQ,CAAC;QAAE,SAAS,EAAE;MAAK,CAAE,EAAE,YAAA;QAClC,IAAI,KAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE;UACjC,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,KAAK,CAAC;QAC3B;MACH,CAAC,CAAC;IACJ,CAAC;IAEO,KAAA,CAAA,cAAc,GAAG,UAAC,KAAsB,EAAA;MACtC,IAAA,KAAA,GAAA,KAAA,CAAA,KAAK;QAAE,QAAA,GAAA,KAAA,CAAA,QAAQ;MACvB;MACA,IAAM,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,kBAAkB,GAClD,KAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,KAAgE,GACrG,SAAS;MAEb,IAAI,KAAK,EAAE;QACT,OACE,KAAA,CAAA,aAAA,CAAC,KAAK,EAAA;UAAC,QAAQ,EAAE,QAAQ;UAAE,OAAO,EAAE,KAAI,CAAC,GAAG;UAAE,MAAM,EAAE,WAAW;UAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ;UAAE,EAAE,EAAE,KAAI,CAAC;QAAQ,CAAA,EAC3G,KAAK,CAAC,KAAK,CACN;MAEX;MACD,OAAO,IAAI;IACb,CAAC;IAEO,KAAA,CAAA,oBAAoB,GAAG,UAAC,KAAsB,EAAA;MACpD,IAAI,KAAK,CAAC,WAAW,EAAE;QACrB,OAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;UAAM,SAAS,EAAE,KAAI,CAAC,WAAW,CAAC;QAAW,CAAA,EAAG,KAAK,CAAC,WAAW,CAAQ;MACjF;MACD,OAAO,IAAI;IACb,CAAC;IAuFO,KAAA,CAAA,oBAAoB,GAAG,UAAC,KAA0C,EAAA;MACxE,KAAI,CAAC,QAAQ,CAAC,UAAA,SAAS,EAAA;QAAI,OAAC;UAAE,mBAAmB,EAAE,CAAC,SAAS,CAAC;QAAmB,CAAE;MAAxD,CAAyD,CAAC;IACvF,CAAC;IAEO,KAAA,CAAA,cAAc,GAAG,UAAC,KAA8D,EAAA;MACtF;MACA;MACA;MACA;MAEA;MACA;MAEA,IAAM,OAAO,GAAG,KAAK,CAAC,MAA0B;MAChD,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK;MAC3B;MACA,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,KAAI,CAAC,gBAAgB,EAAE;QAC1D;MACD;MACD,KAAI,CAAC,gBAAgB,GAAG,KAAK;MAE7B;MACA;MACA,KAAK,CAAC,OAAO,CAAA,CAAE;MAEf,IAAI,WAAoB;MACxB,KAAI,CAAC,QAAQ,CACX,UAAC,SAA0B,EAAE,KAAsB,EAAA;QACjD,IAAM,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,EAAE;QACnD,WAAW,GAAG,KAAK,KAAK,SAAS;QACjC;QACA,IAAI,WAAW,EAAE;UACf,OAAO,IAAI;QACZ;QAED;QACA;QACA,OAAO,KAAI,CAAC,aAAa,GAAG,IAAI,GAAG;UAAE,iBAAiB,EAAE;QAAK,CAAE;MACjE,CAAC,EACD,YAAA;QACE;QACQ,IAAA,QAAA,GAAA,KAAA,CAAA,KAAA,CAAA,QAAQ;QAChB,IAAI,CAAC,WAAW,IAAI,QAAQ,EAAE;UAC5B,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC;QACvB;MACH,CAAC,CACF;IACH,CAAC;IAvdC,sBAAsB,CAAC,KAAI,CAAC;IAC5B,KAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,KAAI,CAAC;IAC7B,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;MACzC,qBAAqB,CAAC,cAAc,EAAE,KAAK,EAAE;QAC3C,YAAY,EAAE;OACf,CAAC;IACH;IAED,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC,cAAc,CAAC;IACxC,KAAI,CAAC,cAAc,GAAG,KAAK,CAAC,cAAc,GAAG,aAAa,CAAC;IAC3D,KAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,cAAc,GAAG,OAAO,CAAC;IAE/C,KAAI,CAAC,oBAAoB,CAAA,CAAE;IAErB,IAAA,EAAA,GAAA,KAAA,CAAA,YAAkC;MAAlC,YAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,mBAAA,GAAA,EAAkC;IACxC,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;MACpC;MACA,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;IACpC;IACD,KAAI,CAAC,KAAK,GAAG;MACX,iBAAiB,EAAE,KAAI,CAAC,aAAa,GAAG,SAAS,GAAG,YAAY;MAChE,SAAS,EAAE,KAAK;MAChB,YAAY,EAAE;KACf;IAED,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAI,CAAC,SAAS,EAAE,KAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC;IAC/F,KAAI,CAAC,eAAe,GAAG,CAAC;;EAC1B;EAKA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAA,EAAA,OAAK,EAAA;IAHhB;;AAEG;SACH,SAAA,CAAA,EAAA;MACE,OAAO,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC;IAC1C,CAAC;;;IAAA;EAEM,aAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,YAAA;IACE,IAAI,CAAC,kBAAkB,CAAA,CAAE;IAEzB,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;MAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;IAC3B;EACH,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,oBAAoB,GAA3B,YAAA;IACE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAA,CAAE;EACvB,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,uBAAuB,GAA9B,UAA+B,SAA0B,EAAE,SAA0B,EAAA;IACnF,OAAO;MACL,SAAS,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY;KACnD;EACH,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,kBAAkB,GAAzB,UACE,SAA0B,EAC1B,SAA0B,EAC1B,QAA4B,EAAA;IAE5B,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK;IAChB,IAAA,EAAA,GAAA,CAAA,QAAA,IAAA,CAAA,CAAA,EAAA,SAAwB;MAAxB,SAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,CAAA,IAAA,EAAA,IAAA,CAAA,GAAA,EAAwB;IACzB,IAAA,KAAA,GAAA,SAAA,CAAA,CAAA,CAAK;MAAE,GAAA,GAAA,SAAA,CAAA,CAAA,CAAG;IAEjB,IAAI,CAAC,CAAC,SAAS,CAAC,SAAS,KAAK,CAAC,CAAC,KAAK,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,EAAE;MACtE;MACA;MACA,IAAI,CAAC,KAAK,CAAA,CAAE;MACZ,IAAI,KAAK,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE;QAC5D,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,CAAC;MACnC;IACF;IAED,IAAM,SAAS,GAAG,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC;IACjD,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK;IACxB,IAAI,SAAS,KAAK,KAAK,EAAE;MACvB;MACA,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC;MAEpC;MACA;MACA,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;QAClD,IAAI,CAAC,QAAQ,CAAC;UAAE,YAAY,EAAE;QAAE,CAAE,CAAC;MACpC;MAED;MACA,IAAI,CAAC,kBAAkB,CAAA,CAAE;MAEzB;MACA,IAAI,CAAC,gBAAgB,GAAG,SAAS;MAEjC;MACA;MACA;MACA,IAAI,yBAAyB,CAAC,KAAK,CAAC,EAAE;QACpC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;MAC7B;IACF;EACH,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACQ,IAAA,EAAA,GAAA,IAAA,CAAA,KAsBQ;MArBZ,UAAA,GAAA,EAAA,CAAA,UAAU;MACV,SAAA,GAAA,EAAA,CAAA,SAAS;MACT,QAAA,GAAA,EAAA,CAAA,QAAQ;MACR,SAAA,GAAA,EAAA,CAAA,SAAS;MACT,cAAA,GAAA,EAAA,CAAA,cAAc;MACd,KAAA,GAAA,EAAA,CAAA,KAAK;MACL,SAAA,GAAA,EAAA,CAAA,SAAS;MACT,QAAA,GAAA,EAAA,CAAA,QAAQ;MACR,UAAA,GAAA,EAAA,CAAA,UAAU;MACV,MAAA,GAAA,EAAA,CAAA,MAAM;MACN,SAAA,GAAA,EAAA,CAAA,SAAS;MACT,MAAA,GAAA,EAAA,CAAA,MAAM;MACN,KAAA,GAAA,EAAA,CAAA,KAAK;MACL,MAAA,GAAA,EAAA,CAAA,MAAM;MACN,gBAAA,GAAA,EAAA,CAAA,gBAAgB;MAChB,iBAAA,GAAA,EAAA,CAAA,iBAAiB;MACjB,IAAA,GAAA,EAAA,CAAA,IAAI;MACJ,EAAA,GAAA,EAAA,CAAA,cAAqC;MAArC,cAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,CAAA,eAAA,GAAA,EAAqC;MACrC,EAAA,GAAA,EAAA,CAAA,cAAqC;MAArC,cAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,CAAA,eAAA,GAAA,EAAqC;MACrC,EAAA,GAAA,EAAA,CAAA,aAAmC;MAAnC,aAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,CAAA,cAAA,GAAA,EAAmC;MACnC,EAAA,GAAA,EAAA,CAAA,mBAA+C;MAA/C,mBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,CAAA,oBAAA,GAAA,EACY;IACR,IAAA,EAAA,GAAA,IAAA,CAAA,KAA+C;MAA7C,SAAA,GAAA,EAAA,CAAA,SAAS;MAAE,mBAAA,GAAA,EAAA,CAAA,mBAAkC;IACrD,IAAM,YAAY,GAAG,IAAI,CAAC,aAAa;IAEvC,IAAM,eAAe,GAAG,CAAC,CAAC,iBAAiB,IAAI,IAAI,KAAK,UAAU,IAAI,yBAAyB,CAAA,CAAE;IAEjG,IAAM,UAAU,GAAI,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAO,EAAE;MAC5D,KAAK,EAAE,KAAM;MACb,SAAS,EAAA,SAAA;MACT,QAAQ,EAAA,QAAA;MACR,OAAO,EAAE,SAAS;MAClB,QAAQ,EAAA,QAAA;MACR,SAAS,EAAA,SAAA;MACT,QAAQ,EAAE,CAAC,CAAC,KAAK;MACjB,eAAe,EAAE,CAAC,CAAC,YAAY;MAC/B,UAAU,EAAA,UAAA;MACV,SAAS,EAAA,SAAA;MACT,OAAO,EAAE,CAAC,CAAC,SAAS;MACpB,UAAU,EAAA,UAAA;MACV,cAAc,EAAA,cAAA;MACd,gBAAgB,EAAA,gBAAA;MAChB,eAAe,EAAA;KAChB,CAAE;IAEH,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAAI,CAAA,EAC7B,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAAO,CAAA,EAC/B,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,EAC/C,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAAU,CAAA,EAClC,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,KACjD,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAAM,CAAA,EAAG,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CACrF,EACA,SAAS,GAAG,IAAI,CAAC,eAAe,CAAA,CAAE,GAAG,IAAI,CAAC,YAAY,CAAA,CAAE,EACxD,SAAS,IAAI,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA,QAAA,CAAA;MAAC,SAAS,EAAE,UAAU,CAAC;IAAI,CAAA,EAAM,SAAS,CAAA,CAAI,EAChE,eAAe;IACd;IACA,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;MAAQ,SAAS,EAAE,UAAU,CAAC,YAAY;MAAE,OAAO,EAAE,IAAI,CAAC,oBAAoB;MAAE,IAAI,EAAC;IAAQ,CAAA,EAC3F,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;MAAM,SAAS,EAAE,UAAU,CAAC;IAAU,CAAA,EACpC,KAAA,CAAA,aAAA,CAAC,IAAI,EAAA;MACH,SAAS,EAAE,UAAU,CAAC,UAAU;MAChC,QAAQ,EAAE,mBAAmB,GAAG,cAAc,GAAG;IAAgB,CAAA,CACjE,CACG,CAEV,EACA,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,KACjD,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAAM,CAAA,EAAG,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CACrF,CACG,CACF,EACL,IAAI,CAAC,uBAAuB,IAC3B,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;MAAM,EAAE,EAAE,IAAI,CAAC;IAAc,CAAA,EAC1B,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,EAC1D,YAAY,IACX,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,IAAI,EAAC;IAAO,CAAA,EACf,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA,IAAA,EACZ,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;MAAG,SAAS,EAAE,UAAU,CAAC;IAAY,CAAA,EACnC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;MAAA,oBAAA,EAAyB;IAAe,CAAA,EAAE,YAAY,CAAQ,CAC5D,CACU,CAEnB,CAEJ,CACG;EAEV,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,YAAA;IACE,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;MAC7B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAA,CAAE;IAClC;EACH,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,IAAI,GAAX,YAAA;IACE,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;MAC7B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAA,CAAE;IACjC;EACH,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;MAC7B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAA,CAAE;IACnC;EACH,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,UAAyB,KAAa,EAAA;IACpC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;MAC7B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,GAAG,KAAK;IACjD;EACH,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UAAuB,KAAa,EAAA;IAClC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;MAC7B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,GAAG,KAAK;IAC/C;EACH,CAAC;EAKD,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAA,EAAA,gBAAc,EAAA;IAHzB;;AAEG;SACH,SAAA,CAAA,EAAA;MACE,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC;IAClF,CAAC;;;IAAA;EAKD,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAA,EAAA,cAAY,EAAA;IAHvB;;AAEG;SACH,SAAA,CAAA,EAAA;MACE,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC;IAChF,CAAC;;;IAAA;EAED;;;;AAIG;EACI,aAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,UAAyB,KAAa,EAAE,GAAW,EAAA;IACjD,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;MAC5B,IAAI,CAAC,YAAY,CAAC,OAA4B,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,CAAC;IAC9E;EACH,CAAC;EAEO,aAAA,CAAA,SAAA,CAAA,oBAAoB,GAA5B,UAA6B,SAA2B,EAAA;IACtD;IACA,mBAAmB,CAAC;MAClB,WAAW,EAAE,IAAI,CAAC,GAAG;MACrB,aAAa,EAAE,cAAc;MAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,QAAQ,EAAE,SAAS;MACnB,SAAS,EAAE,OAAO;MAClB,gBAAgB,EAAE,cAAc;MAChC,YAAY,EAAE,UAAU;MACxB,YAAY,EAAE;KACf,CAAC;IAEF,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;MAC1D,IAAI,CAAC,mBAAmB,GAAG,IAAI;MAC/B,IAAI,CACF,4BAAA,GAA6B,cAAc,GAAA,0CAA0C,GACnF,yFAAyF,CAC5F;IACF;EACH,CAAC;EAGD,MAAA,CAAA,cAAA,CAAY,aAAA,CAAA,SAAA,EAAA,KAAG,EAAA;IADf;SACA,SAAA,CAAA,EAAA;MACE,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC,WAAW;IAC1C,CAAC;;;IAAA;EAED,MAAA,CAAA,cAAA,CAAY,aAAA,CAAA,SAAA,EAAA,eAAa,EAAA;SAAzB,SAAA,CAAA,EAAA;MACE,OAAO,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC;IAC1C,CAAC;;;IAAA;EAkDO,aAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,UAAwB,KAAsB,EAAA;IACpC,IAAA,MAAA,GAAA,KAAA,CAAA,MAAM;IACd,OAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;MAAM,KAAK,EAAE;QAAE,aAAa,EAAE;MAAK;IAAE,CAAA,EAAG,MAAM,CAAQ;EAC/D,CAAC;EAEO,aAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,UAAwB,KAAsB,EAAA;IACpC,IAAA,MAAA,GAAA,KAAA,CAAA,MAAM;IACd,OAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;MAAM,KAAK,EAAE;QAAE,aAAa,EAAE;MAAK;IAAE,CAAA,EAAG,MAAM,CAAQ;EAC/D,CAAC;EAQD,MAAA,CAAA,cAAA,CAAY,aAAA,CAAA,SAAA,EAAA,eAAa,EAAA;IANzB;;;;;AAKG;SACH,SAAA,CAAA,EAAA;MACU,IAAA,EAAA,GAAA,IAAA,CAAA,KAAA,CAAA,YAAsC;QAAtC,YAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,YAAA,GAAA,EAAsC;MAC9C,OAAO,YAAY,IAAI,EAAE;IAC3B,CAAC;;;IAAA;EAMD,MAAA,CAAA,cAAA,CAAY,aAAA,CAAA,SAAA,EAAA,yBAAuB,EAAA;IAJnC;;;AAGG;SACH,SAAA,CAAA,EAAA;MACE,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK;MACxB,OAAO,CAAC,EAAE,KAAK,CAAC,mBAAmB,IAAI,KAAK,CAAC,WAAW,IAAI,IAAI,CAAC,aAAa,CAAC;IACjF,CAAC;;;IAAA;EAEO,aAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,YAAA;IACE,IAAM,aAAa,GAAG,cAAc,CAClC,IAAI,CAAC,KAAK,EACV,kBAAkB,EAClB,CAAC,cAAc,CAAC,CACjB;IACD,IAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;IACtG,OACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;MACE,EAAE,EAAE,IAAI,CAAC;IAAG,CAAA,EACR,aAAa,EAAA;MACjB,GAAG,EAAE,IAAI,CAAC,YAAoD;MAC9D,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE;MACvB,OAAO,EAAE,IAAI,CAAC,cAAc;MAC5B,QAAQ,EAAE,IAAI,CAAC,cAAc;MAC7B,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK;MAAA,iBAAA,EAChB,cAAc;MAAA,kBAAA,EACb,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;MAAA,cAAA,EACvF,CAAC,CAAC,IAAI,CAAC,aAAa;MAAA,YAAA,EACtB,IAAI,CAAC,KAAK,CAAC,SAAS;MAChC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;MAC7B,OAAO,EAAE,IAAI,CAAC,QAAQ;MACtB,MAAM,EAAE,IAAI,CAAC;IAAO,CAAA,CAAA,CACpB;EAEN,CAAC;EAEO,aAAA,CAAA,SAAA,CAAA,YAAY,GAApB,YAAA;;IACE,IAAM,UAAU,GAAG,cAAc,CAAyC,IAAI,CAAC,KAAK,EAAE,eAAe,EAAE,CACrG,cAAc,EACd,MAAM,CACP,CAAC;IACF,IAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;IACtG,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,GAAG,MAAM,IAAE,EAAA,GAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAA,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,MAAM,CAAA;IAChF,OACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;MACE,IAAI,EAAE,IAAI;MACV,EAAE,EAAE,IAAI,CAAC,GAAG;MAAA,iBAAA,EACK;IAAc,CAAA,EAC3B,UAAU,EAAA;MACd,GAAG,EAAE,IAAI,CAAC,YAAiD;MAC3D,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE;MACvB,OAAO,EAAE,IAAI,CAAC,cAAc;MAC5B,QAAQ,EAAE,IAAI,CAAC,cAAc;MAC7B,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK;MAAA,YAAA,EACrB,IAAI,CAAC,KAAK,CAAC,SAAS;MAAA,kBAAA,EACd,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;MAAA,cAAA,EACvF,CAAC,CAAC,IAAI,CAAC,aAAa;MAClC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;MAC7B,OAAO,EAAE,IAAI,CAAC,QAAQ;MACtB,MAAM,EAAE,IAAI,CAAC;IAAO,CAAA,CAAA,CACpB;EAEN,CAAC;EAmDO,aAAA,CAAA,SAAA,CAAA,SAAS,GAAjB,UAAkB,KAAyB,EAAA;IAA3C,IAAA,KAAA,GAAA,IAAA;IACE;IACA,IAAI,IAAI,CAAC,oBAAoB,KAAK,KAAK,IAAI,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;MAChF;IACD;IAED,IAAI,CAAC,oBAAoB,GAAG,KAAK;IACjC,IAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB;IACtD,IAAM,MAAM,GAAG,iBAAiB,IAAI,iBAAiB,CAAC,KAAK,IAAI,EAAE,CAAC;IAElE,IAAI,MAAM,KAAK,SAAS,EAAE;MACxB,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,EAAE,MAAM,IAAI,MAAM,CAAC,EAAE;QACrD,IAAI,CAAC,QAAQ,CAAC;UAAE,YAAY,EAAE;QAAM,CAAE,CAAC;QACvC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,CAAC;OACzC,MAAM;QACL,IAAM,mBAAiB,GAAW,EAAE,IAAI,CAAC,eAAe;QAExD,MAAM,CAAC,IAAI,CAAC,UAAC,YAAkC,EAAA;UAC7C,IAAI,mBAAiB,KAAK,KAAI,CAAC,eAAe,EAAE;YAC9C,KAAI,CAAC,QAAQ,CAAC;cAAE,YAAY,EAAA;YAAA,CAAE,CAAC;UAChC;UACD,KAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,YAAY,CAAC;QAChD,CAAC,CAAC;MACH;KACF,MAAM;MACL,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,EAAE,CAAC;IACrC;EACH,CAAC;EAEO,aAAA,CAAA,SAAA,CAAA,oBAAoB,GAA5B,UAA6B,KAAyB,EAAE,YAAkC,EAAA;IACxF,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,wBAAwB,EAAE;MAC/D,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,YAAY,EAAE,KAAK,CAAC;IACzD;EACH,CAAC;EAEO,aAAA,CAAA,SAAA,CAAA,kBAAkB,GAA1B,YAAA;IACE,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;MACpF,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO;MAC3C,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE;MAC3B,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC,YAAY,GAAG,IAAI;IACvD;EACH,CAAC;EA1hBa,aAAA,CAAA,YAAY,GAAoB;IAC5C,SAAS,EAAE,IAAI;IACf,sBAAsB,EAAE,GAAG;IAC3B,cAAc,EAAE,IAAI;IACpB,iBAAiB,EAAE;GACpB;EAshBH,OAAA,aAAC;CAAA,CA7hBkC,KAAK,CAAC,SAAS,CAAA;SAArC,aAAa;AA+hB1B;AACA,SAAS,SAAS,CAAC,KAAsB,EAAE,KAAsB,EAAA;EACvD,IAAA,EAAA,GAAA,KAAA,CAAA,KAA+B;IAA/B,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,iBAAA,GAAA,EAA+B;EACvC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B;IACA,OAAO,MAAM,CAAC,KAAK,CAAC;EACrB;EACD,OAAO,KAAK;AACd;AAEA;;;AAGG;AACH,SAAS,yBAAyB,CAAC,KAAsB,EAAA;EACvD,OAAO,EAAE,KAAK,CAAC,iBAAiB,IAAI,KAAK,CAAC,kBAAkB,CAAC;AAC/D;AAEA;AACA,IAAI,0BAA+C;AAEnD,SAAS,yBAAyB,CAAA,EAAA;;EAChC,IAAI,OAAO,0BAA0B,KAAK,SAAS,EAAE;IACnD,IAAM,GAAG,GAAG,SAAS,CAAA,CAAE;IAEvB,IAAA,CAAA,EAAA,GAAI,GAAG,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,EAAE;MAClB;MACA,IAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,IAAI,EAAE,CAAC;MAExD,0BAA0B,GAAG,EAAE,MAAM,CAAA,CAAE,IAAI,MAAM,CAAC;KACnD,MAAM;MACL,0BAA0B,GAAG,IAAI;IAClC;EACF;EACD,OAAO,0BAA0B;AACnC","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { Label, ILabelStyleProps, ILabelStyles } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  DelayedRender,\n  IStyleFunctionOrObject,\n  classNamesFunction,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n    canRevealPassword: false,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // Reset the record of the last value seen by a change/input event\n      this._lastChangeValue = undefined;\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: !!errorMessage,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      <div className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix}>{onRenderPrefix(this.props, this._onRenderPrefix)}</div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button className={classNames.revealButton} onClick={this._onRevealButtonClick} type=\"button\">\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix}>{onRenderSuffix(this.props, this._onRenderSuffix)}</div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>\n                  <p className={classNames.errorMessage}>\n                    <span data-automation-id=\"error-message\">{errorMessage}</span>\n                  </p>\n                </DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): React.ReactElement<React.HTMLAttributes<HTMLInputElement>> {\n    const inputProps = getNativeProps<React.HTMLAttributes<HTMLInputElement>>(this.props, inputProperties, [\n      'defaultValue',\n      'type',\n    ]);\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    const type = this.state.isRevealingPassword ? 'text' : this.props.type ?? 'text';\n    return (\n      <input\n        type={type}\n        id={this._id}\n        aria-labelledby={ariaLabelledBy}\n        {...inputProps}\n        ref={this._textElement as React.RefObject<HTMLInputElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-label={this.props.ariaLabel}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={!!this._errorMessage}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if the value is undefined (in case one of the IE bugs comes back)\n    if (value === undefined || value === this._lastChangeValue) {\n      return;\n    }\n    this._lastChangeValue = value;\n\n    // This is so developers can access the event properties in asynchronous callbacks\n    // https://reactjs.org/docs/events.html#event-pooling\n    event.persist();\n\n    let isSameValue: boolean;\n    this.setState(\n      (prevState: ITextFieldState, props: ITextFieldProps) => {\n        const prevValue = _getValue(props, prevState) || '';\n        isSameValue = value === prevValue;\n        // Avoid doing unnecessary work when the value has not changed.\n        if (isSameValue) {\n          return null;\n        }\n\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        return this._isControlled ? null : { uncontrolledValue: value };\n      },\n      () => {\n        // If the value actually changed, call onChange (for either controlled or uncontrolled)\n        const { onChange } = this.props;\n        if (!isSameValue && onChange) {\n          onChange(event, value);\n        }\n      },\n    );\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}