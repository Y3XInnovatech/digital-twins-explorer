{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport { QueryCollectionFormat } from \"@azure/core-http\";\nimport { QuerySpecification as QuerySpecificationMapper, EventRoute as EventRouteMapper } from \"../models/mappers\";\nexport var contentType = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var models = {\n  parameterPath: [\"options\", \"models\"],\n  mapper: {\n    constraints: {\n      MinItems: 1,\n      UniqueItems: true\n    },\n    serializedName: \"models\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"any\"\n        }\n      }\n    }\n  }\n};\nexport var $host = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport var traceparent = {\n  parameterPath: [\"options\", \"traceparent\"],\n  mapper: {\n    serializedName: \"traceparent\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var tracestate = {\n  parameterPath: [\"options\", \"tracestate\"],\n  mapper: {\n    serializedName: \"tracestate\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var apiVersion = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2020-10-31\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var dependenciesFor = {\n  parameterPath: [\"options\", \"dependenciesFor\"],\n  mapper: {\n    serializedName: \"dependenciesFor\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\nexport var includeModelDefinition = {\n  parameterPath: [\"options\", \"includeModelDefinition\"],\n  mapper: {\n    serializedName: \"includeModelDefinition\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport var maxItemsPerPage = {\n  parameterPath: [\"options\", \"maxItemsPerPage\"],\n  mapper: {\n    serializedName: \"max-items-per-page\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport var id = {\n  parameterPath: \"id\",\n  mapper: {\n    serializedName: \"id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var contentType1 = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json-patch+json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var updateModel = {\n  parameterPath: \"updateModel\",\n  mapper: {\n    serializedName: \"updateModel\",\n    required: true,\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"any\"\n        }\n      }\n    }\n  }\n};\nexport var nextLink = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport var querySpecification = {\n  parameterPath: \"querySpecification\",\n  mapper: QuerySpecificationMapper\n};\nexport var twin = {\n  parameterPath: \"twin\",\n  mapper: {\n    serializedName: \"twin\",\n    required: true,\n    type: {\n      name: \"any\"\n    }\n  }\n};\nexport var ifNoneMatch = {\n  parameterPath: [\"options\", \"ifNoneMatch\"],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var ifMatch = {\n  parameterPath: [\"options\", \"ifMatch\"],\n  mapper: {\n    serializedName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var patchDocument = {\n  parameterPath: \"patchDocument\",\n  mapper: {\n    serializedName: \"patchDocument\",\n    required: true,\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"any\"\n        }\n      }\n    }\n  }\n};\nexport var relationshipId = {\n  parameterPath: \"relationshipId\",\n  mapper: {\n    serializedName: \"relationshipId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var relationship = {\n  parameterPath: \"relationship\",\n  mapper: {\n    serializedName: \"relationship\",\n    required: true,\n    type: {\n      name: \"any\"\n    }\n  }\n};\nexport var relationshipName = {\n  parameterPath: [\"options\", \"relationshipName\"],\n  mapper: {\n    serializedName: \"relationshipName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var telemetry = {\n  parameterPath: \"telemetry\",\n  mapper: {\n    serializedName: \"telemetry\",\n    required: true,\n    type: {\n      name: \"any\"\n    }\n  }\n};\nexport var messageId = {\n  parameterPath: \"messageId\",\n  mapper: {\n    serializedName: \"Message-Id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var telemetrySourceTime = {\n  parameterPath: [\"options\", \"telemetrySourceTime\"],\n  mapper: {\n    serializedName: \"Telemetry-Source-Time\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var componentPath = {\n  parameterPath: \"componentPath\",\n  mapper: {\n    serializedName: \"componentPath\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport var eventRoute = {\n  parameterPath: [\"options\", \"eventRoute\"],\n  mapper: EventRouteMapper\n};","map":{"version":3,"sources":["../../../../src/generated/models/parameters.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n  QueryCollectionFormat\n} from \"@azure/core-http\";\nimport {\n  QuerySpecification as QuerySpecificationMapper,\n  EventRoute as EventRouteMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const models: OperationParameter = {\n  parameterPath: [\"options\", \"models\"],\n  mapper: {\n    constraints: {\n      MinItems: 1,\n      UniqueItems: true\n    },\n    serializedName: \"models\",\n    type: {\n      name: \"Sequence\",\n      element: { type: { name: \"any\" } }\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const traceparent: OperationParameter = {\n  parameterPath: [\"options\", \"traceparent\"],\n  mapper: {\n    serializedName: \"traceparent\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tracestate: OperationParameter = {\n  parameterPath: [\"options\", \"tracestate\"],\n  mapper: {\n    serializedName: \"tracestate\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2020-10-31\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const dependenciesFor: OperationQueryParameter = {\n  parameterPath: [\"options\", \"dependenciesFor\"],\n  mapper: {\n    serializedName: \"dependenciesFor\",\n    type: {\n      name: \"Sequence\",\n      element: { type: { name: \"String\" } }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const includeModelDefinition: OperationQueryParameter = {\n  parameterPath: [\"options\", \"includeModelDefinition\"],\n  mapper: {\n    serializedName: \"includeModelDefinition\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const maxItemsPerPage: OperationParameter = {\n  parameterPath: [\"options\", \"maxItemsPerPage\"],\n  mapper: {\n    serializedName: \"max-items-per-page\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const id: OperationURLParameter = {\n  parameterPath: \"id\",\n  mapper: {\n    serializedName: \"id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json-patch+json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const updateModel: OperationParameter = {\n  parameterPath: \"updateModel\",\n  mapper: {\n    serializedName: \"updateModel\",\n    required: true,\n    type: {\n      name: \"Sequence\",\n      element: { type: { name: \"any\" } }\n    }\n  }\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const querySpecification: OperationParameter = {\n  parameterPath: \"querySpecification\",\n  mapper: QuerySpecificationMapper\n};\n\nexport const twin: OperationParameter = {\n  parameterPath: \"twin\",\n  mapper: {\n    serializedName: \"twin\",\n    required: true,\n    type: {\n      name: \"any\"\n    }\n  }\n};\n\nexport const ifNoneMatch: OperationParameter = {\n  parameterPath: [\"options\", \"ifNoneMatch\"],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifMatch: OperationParameter = {\n  parameterPath: [\"options\", \"ifMatch\"],\n  mapper: {\n    serializedName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const patchDocument: OperationParameter = {\n  parameterPath: \"patchDocument\",\n  mapper: {\n    serializedName: \"patchDocument\",\n    required: true,\n    type: {\n      name: \"Sequence\",\n      element: { type: { name: \"any\" } }\n    }\n  }\n};\n\nexport const relationshipId: OperationURLParameter = {\n  parameterPath: \"relationshipId\",\n  mapper: {\n    serializedName: \"relationshipId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const relationship: OperationParameter = {\n  parameterPath: \"relationship\",\n  mapper: {\n    serializedName: \"relationship\",\n    required: true,\n    type: {\n      name: \"any\"\n    }\n  }\n};\n\nexport const relationshipName: OperationQueryParameter = {\n  parameterPath: [\"options\", \"relationshipName\"],\n  mapper: {\n    serializedName: \"relationshipName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const telemetry: OperationParameter = {\n  parameterPath: \"telemetry\",\n  mapper: {\n    serializedName: \"telemetry\",\n    required: true,\n    type: {\n      name: \"any\"\n    }\n  }\n};\n\nexport const messageId: OperationParameter = {\n  parameterPath: \"messageId\",\n  mapper: {\n    serializedName: \"Message-Id\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const telemetrySourceTime: OperationParameter = {\n  parameterPath: [\"options\", \"telemetrySourceTime\"],\n  mapper: {\n    serializedName: \"Telemetry-Source-Time\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const componentPath: OperationURLParameter = {\n  parameterPath: \"componentPath\",\n  mapper: {\n    serializedName: \"componentPath\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const eventRoute: OperationParameter = {\n  parameterPath: [\"options\", \"eventRoute\"],\n  mapper: EventRouteMapper\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}