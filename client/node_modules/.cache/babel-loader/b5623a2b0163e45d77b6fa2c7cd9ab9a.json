{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, warnDeprecations, warn } from '../../Utilities';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\nimport { MAX_COLOR_ALPHA, MAX_COLOR_RGB, MAX_HEX_LENGTH, MAX_RGBA_LENGTH, MIN_HEX_LENGTH, MIN_RGBA_LENGTH, HEX_REGEX, RGBA_REGEX } from '../../utilities/color/consts';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { clamp } from '../../utilities/color/clamp';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateT } from '../../utilities/color/updateT';\nimport { updateH } from '../../utilities/color/updateH';\nimport { correctRGB } from '../../utilities/color/correctRGB';\nimport { correctHex } from '../../utilities/color/correctHex';\nimport { ColorRectangleBase } from './ColorRectangle/ColorRectangle.base';\nvar getClassNames = classNamesFunction();\nvar allColorComponents = ['hex', 'r', 'g', 'b', 'a', 't'];\n/**\n * {@docCategory ColorPicker}\n */\nvar ColorPickerBase = /** @class */function (_super) {\n  __extends(ColorPickerBase, _super);\n  function ColorPickerBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._onSVChanged = function (ev, color) {\n      _this._updateColor(ev, color);\n    };\n    _this._onHChanged = function (ev, h) {\n      _this._updateColor(ev, updateH(_this.state.color, h));\n    };\n    /** Callback for when the alpha/transparency slider changes */\n    _this._onATChanged = function (ev, value) {\n      var updater = _this.props.alphaType === 'transparency' ? updateT : updateA;\n      _this._updateColor(ev, updater(_this.state.color, Math.round(value)));\n    };\n    _this._onBlur = function (event) {\n      var _a;\n      var _b = _this.state,\n        color = _b.color,\n        editingColor = _b.editingColor;\n      if (!editingColor) {\n        return;\n      }\n      // If there was an intermediate incorrect value (such as too large or empty), correct it.\n      var value = editingColor.value,\n        component = editingColor.component;\n      var isHex = component === 'hex';\n      var isAlpha = component === 'a';\n      var isTransparency = component === 't';\n      var minLength = isHex ? MIN_HEX_LENGTH : MIN_RGBA_LENGTH;\n      if (value.length >= minLength && (isHex || !isNaN(Number(value)))) {\n        // Real value. Clamp to appropriate length (hex) or range (rgba).\n        var newColor = void 0;\n        if (isHex) {\n          newColor = getColorFromString('#' + correctHex(value));\n        } else if (isAlpha || isTransparency) {\n          var updater = isAlpha ? updateA : updateT;\n          newColor = updater(color, clamp(Number(value), MAX_COLOR_ALPHA));\n        } else {\n          newColor = getColorFromRGBA(correctRGB(__assign(__assign({}, color), (_a = {}, _a[component] = Number(value), _a))));\n        }\n        // Update state and call onChange\n        _this._updateColor(event, newColor);\n      } else {\n        // Intermediate value was an empty string or too short (hex only).\n        // Just clear the intermediate state and revert to the previous value.\n        _this.setState({\n          editingColor: undefined\n        });\n      }\n    };\n    initializeComponentRef(_this);\n    var strings = props.strings; // always defined since it's in defaultProps\n    warnDeprecations('ColorPicker', props, {\n      hexLabel: 'strings.hex',\n      redLabel: 'strings.red',\n      greenLabel: 'strings.green',\n      blueLabel: 'strings.blue',\n      alphaLabel: 'strings.alpha',\n      alphaSliderHidden: 'alphaType'\n    });\n    // eslint-disable-next-line deprecation/deprecation\n    if (strings.hue) {\n      // warnDeprecations can't handle nested deprecated props\n      warn(\"ColorPicker property 'strings.hue' was used but has been deprecated. Use 'strings.hueAriaLabel' instead.\");\n    }\n    _this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')\n    };\n    _this._textChangeHandlers = {};\n    for (var _i = 0, allColorComponents_1 = allColorComponents; _i < allColorComponents_1.length; _i++) {\n      var component = allColorComponents_1[_i];\n      _this._textChangeHandlers[component] = _this._onTextChange.bind(_this, component);\n    }\n    var defaultStrings = ColorPickerBase.defaultProps.strings;\n    _this._textLabels = {\n      /* eslint-disable deprecation/deprecation */\n      r: props.redLabel || strings.red || defaultStrings.red,\n      g: props.greenLabel || strings.green || defaultStrings.green,\n      b: props.blueLabel || strings.blue || defaultStrings.blue,\n      a: props.alphaLabel || strings.alpha || defaultStrings.alpha,\n      hex: props.hexLabel || strings.hex || defaultStrings.hex,\n      t: strings.transparency || defaultStrings.transparency\n    };\n    _this._strings = __assign(__assign(__assign({}, defaultStrings), {\n      // these aria labels default to the visible labels\n      alphaAriaLabel: _this._textLabels.a,\n      transparencyAriaLabel: _this._textLabels.t\n    }), strings);\n    return _this;\n  }\n  Object.defineProperty(ColorPickerBase.prototype, \"color\", {\n    get: function () {\n      return this.state.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ColorPickerBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // if props changed (as opposed to a state update), update the color\n    if (prevProps !== this.props) {\n      var color = _getColorFromProps(this.props);\n      if (color) {\n        this._updateColor(undefined, color);\n      }\n    }\n  };\n  ColorPickerBase.prototype.render = function () {\n    var _this = this;\n    var props = this.props;\n    var strings = this._strings;\n    var textLabels = this._textLabels;\n    var theme = props.theme,\n      className = props.className,\n      styles = props.styles,\n      alphaType = props.alphaType,\n      // eslint-disable-next-line deprecation/deprecation\n      _a = props.alphaSliderHidden,\n      // eslint-disable-next-line deprecation/deprecation\n      alphaSliderHidden = _a === void 0 ? alphaType === 'none' : _a;\n    var color = this.state.color;\n    var useTransparency = alphaType === 'transparency';\n    var colorComponents = ['hex', 'r', 'g', 'b', useTransparency ? 't' : 'a'];\n    var atValue = useTransparency ? color.t : color.a;\n    var atLabel = useTransparency ? textLabels.t : textLabels.a;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      alphaType: alphaType\n    });\n    var selectedColorAriaParts = [textLabels.r, color.r, textLabels.g, color.g, textLabels.b, color.b];\n    if (!alphaSliderHidden && typeof atValue === 'number') {\n      selectedColorAriaParts.push(atLabel, atValue + \"%\");\n    }\n    var ariaLabel = strings.rootAriaLabelFormat.replace('{0}', selectedColorAriaParts.join(' '));\n    return React.createElement(\"div\", {\n      className: classNames.root,\n      role: \"group\",\n      \"aria-label\": ariaLabel\n    }, React.createElement(\"div\", {\n      className: classNames.panel\n    }, React.createElement(ColorRectangle, {\n      color: color,\n      onChange: this._onSVChanged,\n      ariaLabel: strings.svAriaLabel,\n      ariaDescription: strings.svAriaDescription,\n      ariaValueFormat: strings.svAriaValueFormat,\n      className: classNames.colorRectangle\n    }), React.createElement(\"div\", {\n      className: classNames.flexContainer\n    }, React.createElement(\"div\", {\n      className: classNames.flexSlider\n    }, React.createElement(ColorSlider, {\n      className: \"is-hue\",\n      type: \"hue\",\n      // eslint-disable-next-line deprecation/deprecation\n      ariaLabel: strings.hue || strings.hueAriaLabel,\n      value: color.h,\n      onChange: this._onHChanged\n    }), !alphaSliderHidden && React.createElement(ColorSlider, {\n      className: \"is-alpha\",\n      type: alphaType,\n      ariaLabel: useTransparency ? strings.transparencyAriaLabel : strings.alphaAriaLabel,\n      overlayColor: color.hex,\n      value: atValue,\n      onChange: this._onATChanged\n    })), props.showPreview && React.createElement(\"div\", {\n      className: classNames.flexPreviewBox\n    }, React.createElement(\"div\", {\n      className: classNames.colorSquare + ' is-preview',\n      style: {\n        backgroundColor: color.str\n      }\n    }))), React.createElement(\"table\", {\n      className: classNames.table,\n      role: \"group\",\n      cellPadding: \"0\",\n      cellSpacing: \"0\"\n    }, React.createElement(\"thead\", null, React.createElement(\"tr\", {\n      className: classNames.tableHeader\n    }, React.createElement(\"td\", {\n      className: classNames.tableHexCell\n    }, textLabels.hex), React.createElement(\"td\", null, textLabels.r), React.createElement(\"td\", null, textLabels.g), React.createElement(\"td\", null, textLabels.b), !alphaSliderHidden && React.createElement(\"td\", {\n      className: classNames.tableAlphaCell\n    }, atLabel))), React.createElement(\"tbody\", null, React.createElement(\"tr\", null, colorComponents.map(function (comp) {\n      if ((comp === 'a' || comp === 't') && alphaSliderHidden) {\n        return null;\n      }\n      return React.createElement(\"td\", {\n        key: comp\n      }, React.createElement(TextField, {\n        className: classNames.input,\n        onChange: _this._textChangeHandlers[comp],\n        onBlur: _this._onBlur,\n        value: _this._getDisplayValue(comp),\n        spellCheck: false,\n        ariaLabel: textLabels[comp],\n        \"aria-live\": comp !== 'hex' ? 'assertive' : undefined,\n        autoComplete: \"off\"\n      }));\n    }))))));\n  };\n  ColorPickerBase.prototype._getDisplayValue = function (component) {\n    var _a = this.state,\n      color = _a.color,\n      editingColor = _a.editingColor;\n    if (editingColor && editingColor.component === component) {\n      return editingColor.value;\n    }\n    if (component === 'hex') {\n      return color[component] || '';\n    } else if (typeof color[component] === 'number' && !isNaN(color[component])) {\n      return String(color[component]);\n    }\n    return '';\n  };\n  ColorPickerBase.prototype._onTextChange = function (component, event, newValue) {\n    var _a;\n    var color = this.state.color;\n    var isHex = component === 'hex';\n    var isAlpha = component === 'a';\n    var isTransparency = component === 't';\n    newValue = (newValue || '').substr(0, isHex ? MAX_HEX_LENGTH : MAX_RGBA_LENGTH);\n    // Ignore what the user typed if it contains invalid characters\n    var validCharsRegex = isHex ? HEX_REGEX : RGBA_REGEX;\n    if (!validCharsRegex.test(newValue)) {\n      return;\n    }\n    // Determine if the entry is valid (different methods for hex, alpha, and RGB)\n    var isValid;\n    if (newValue === '') {\n      // Empty string is obviously not valid\n      isValid = false;\n    } else if (isHex) {\n      // Technically hex values of length 3 are also valid, but committing the value here would\n      // cause it to be automatically converted to a value of length 6, which may not be what the\n      // user wanted if they're not finished typing. (Values of length 3 will be committed on blur.)\n      isValid = newValue.length === MAX_HEX_LENGTH;\n    } else if (isAlpha || isTransparency) {\n      isValid = Number(newValue) <= MAX_COLOR_ALPHA;\n    } else {\n      isValid = Number(newValue) <= MAX_COLOR_RGB;\n    }\n    if (!isValid) {\n      // If the new value is an empty string or other invalid value, save that to display.\n      // (if the user still hasn't entered anything on blur, the last value is restored)\n      this.setState({\n        editingColor: {\n          component: component,\n          value: newValue\n        }\n      });\n    } else if (String(color[component]) === newValue) {\n      // If the new value is the same as the current value, mostly ignore it.\n      // Exception is that if the user was previously editing the value (but hadn't yet entered\n      // a new valid value), we should clear the intermediate value.\n      if (this.state.editingColor) {\n        this.setState({\n          editingColor: undefined\n        });\n      }\n    } else {\n      // Should be a valid color. Update the value.\n      var newColor = isHex ? getColorFromString('#' + newValue) : isTransparency ? updateT(color, Number(newValue)) : getColorFromRGBA(__assign(__assign({}, color), (_a = {}, _a[component] = Number(newValue), _a)));\n      this._updateColor(event, newColor);\n    }\n  };\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n  ColorPickerBase.prototype._updateColor = function (ev, newColor) {\n    if (!newColor) {\n      return;\n    }\n    var _a = this.state,\n      color = _a.color,\n      editingColor = _a.editingColor;\n    // For black or white, the hue can change without changing the string.\n    var isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n    if (isDifferentColor || editingColor) {\n      // If ev is undefined, it's an update from props (which should be unconditionally respected\n      // and not call onChange).\n      if (ev && this.props.onChange) {\n        this.props.onChange(ev, newColor);\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n      this.setState({\n        color: newColor,\n        editingColor: undefined\n      });\n    }\n  };\n  ColorPickerBase.defaultProps = {\n    alphaType: 'alpha',\n    strings: {\n      rootAriaLabelFormat: 'Color picker, {0} selected.',\n      hex: 'Hex',\n      red: 'Red',\n      green: 'Green',\n      blue: 'Blue',\n      alpha: 'Alpha',\n      transparency: 'Transparency',\n      hueAriaLabel: 'Hue',\n      svAriaLabel: ColorRectangleBase.defaultProps.ariaLabel,\n      svAriaValueFormat: ColorRectangleBase.defaultProps.ariaValueFormat,\n      svAriaDescription: ColorRectangleBase.defaultProps.ariaDescription\n    }\n  };\n  return ColorPickerBase;\n}(React.Component);\nexport { ColorPickerBase };\nfunction _getColorFromProps(props) {\n  var color = props.color;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}","map":{"version":3,"sources":["components/ColorPicker/ColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, warnDeprecations, warn } from '../../Utilities';\nimport {\n  IColorPickerProps,\n  IColorPickerStyleProps,\n  IColorPickerStyles,\n  IColorPicker,\n  IColorPickerStrings,\n} from './ColorPicker.types';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\nimport {\n  MAX_COLOR_ALPHA,\n  MAX_COLOR_RGB,\n  MAX_HEX_LENGTH,\n  MAX_RGBA_LENGTH,\n  MIN_HEX_LENGTH,\n  MIN_RGBA_LENGTH,\n  HEX_REGEX,\n  RGBA_REGEX,\n} from '../../utilities/color/consts';\n// These imports are separated to help with bundling\nimport { IColor, IRGB } from '../../utilities/color/interfaces';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { clamp } from '../../utilities/color/clamp';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateT } from '../../utilities/color/updateT';\nimport { updateH } from '../../utilities/color/updateH';\nimport { correctRGB } from '../../utilities/color/correctRGB';\nimport { correctHex } from '../../utilities/color/correctHex';\nimport { ColorRectangleBase } from './ColorRectangle/ColorRectangle.base';\n\ntype ColorComponent = keyof Pick<IColor, 'r' | 'g' | 'b' | 'a' | 't' | 'hex'>;\n\nexport interface IColorPickerState {\n  /** Most recently selected color */\n  color: IColor;\n  /** Color component currently being edited via a text field (if intermediate value is invalid) */\n  editingColor?: {\n    /** Which color component is being edited */\n    component: ColorComponent;\n    /** Currently entered value, which is not valid */\n    value: string;\n  };\n}\n\nconst getClassNames = classNamesFunction<IColorPickerStyleProps, IColorPickerStyles>();\n\nconst allColorComponents: ColorComponent[] = ['hex', 'r', 'g', 'b', 'a', 't'];\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorPickerBase extends React.Component<IColorPickerProps, IColorPickerState> implements IColorPicker {\n  public static defaultProps: Partial<IColorPickerProps> = {\n    alphaType: 'alpha',\n    strings: {\n      rootAriaLabelFormat: 'Color picker, {0} selected.',\n      hex: 'Hex',\n      red: 'Red',\n      green: 'Green',\n      blue: 'Blue',\n      alpha: 'Alpha',\n      transparency: 'Transparency',\n      hueAriaLabel: 'Hue',\n      svAriaLabel: ColorRectangleBase.defaultProps.ariaLabel!,\n      svAriaValueFormat: ColorRectangleBase.defaultProps.ariaValueFormat!,\n      svAriaDescription: ColorRectangleBase.defaultProps.ariaDescription!,\n    },\n  };\n\n  private _textChangeHandlers: {\n    [K in ColorComponent]: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;\n  };\n  /**\n   * Strings displayed in the UI as text field labels (these are in a separate object for convenient\n   * indexing by short color component name).\n   */\n  private _textLabels: { [K in ColorComponent]: string };\n\n  /** Strings besides red/green/blue/alpha/hex, with defaults for all values except the deprecated `hue` */\n  private _strings: Required<Omit<IColorPickerStrings, ColorComponent | 'hue'>> & Pick<IColorPickerStrings, 'hue'>;\n\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const strings = props.strings!; // always defined since it's in defaultProps\n\n    warnDeprecations('ColorPicker', props, {\n      hexLabel: 'strings.hex',\n      redLabel: 'strings.red',\n      greenLabel: 'strings.green',\n      blueLabel: 'strings.blue',\n      alphaLabel: 'strings.alpha',\n      alphaSliderHidden: 'alphaType',\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (strings.hue) {\n      // warnDeprecations can't handle nested deprecated props\n      warn(\"ColorPicker property 'strings.hue' was used but has been deprecated. Use 'strings.hueAriaLabel' instead.\");\n    }\n\n    this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')!,\n    };\n\n    this._textChangeHandlers = {} as any;\n    for (const component of allColorComponents) {\n      this._textChangeHandlers[component] = this._onTextChange.bind(this, component);\n    }\n\n    const defaultStrings = ColorPickerBase.defaultProps.strings as Required<IColorPickerStrings>;\n\n    this._textLabels = {\n      /* eslint-disable deprecation/deprecation */\n      r: props.redLabel || strings.red || defaultStrings.red,\n      g: props.greenLabel || strings.green || defaultStrings.green,\n      b: props.blueLabel || strings.blue || defaultStrings.blue,\n      a: props.alphaLabel || strings.alpha || defaultStrings.alpha,\n      hex: props.hexLabel || strings.hex || defaultStrings.hex,\n      t: strings.transparency || defaultStrings.transparency,\n      /* eslint-enable deprecation/deprecation */\n    };\n\n    this._strings = {\n      ...defaultStrings,\n      // these aria labels default to the visible labels\n      alphaAriaLabel: this._textLabels.a,\n      transparencyAriaLabel: this._textLabels.t,\n      ...strings,\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorPickerProps>, prevState: Readonly<IColorPickerState>): void {\n    // if props changed (as opposed to a state update), update the color\n    if (prevProps !== this.props) {\n      const color = _getColorFromProps(this.props);\n      if (color) {\n        this._updateColor(undefined, color);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const strings = this._strings;\n    const textLabels = this._textLabels;\n    const {\n      theme,\n      className,\n      styles,\n      alphaType,\n      // eslint-disable-next-line deprecation/deprecation\n      alphaSliderHidden = alphaType === 'none',\n    } = props;\n    const { color } = this.state;\n    const useTransparency = alphaType === 'transparency';\n    const colorComponents = ['hex', 'r', 'g', 'b', useTransparency ? 't' : 'a'];\n    const atValue = useTransparency ? color.t : color.a;\n    const atLabel = useTransparency ? textLabels.t : textLabels.a;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      alphaType,\n    });\n\n    const selectedColorAriaParts = [textLabels.r, color.r, textLabels.g, color.g, textLabels.b, color.b];\n    if (!alphaSliderHidden && typeof atValue === 'number') {\n      selectedColorAriaParts.push(atLabel, `${atValue}%`);\n    }\n    const ariaLabel = strings.rootAriaLabelFormat.replace('{0}', selectedColorAriaParts.join(' '));\n\n    return (\n      <div className={classNames.root} role=\"group\" aria-label={ariaLabel}>\n        <div className={classNames.panel}>\n          <ColorRectangle\n            color={color}\n            onChange={this._onSVChanged}\n            ariaLabel={strings.svAriaLabel}\n            ariaDescription={strings.svAriaDescription}\n            ariaValueFormat={strings.svAriaValueFormat}\n            className={classNames.colorRectangle}\n          />\n          <div className={classNames.flexContainer}>\n            <div className={classNames.flexSlider}>\n              <ColorSlider\n                className=\"is-hue\"\n                type=\"hue\"\n                // eslint-disable-next-line deprecation/deprecation\n                ariaLabel={strings.hue || strings.hueAriaLabel}\n                value={color.h}\n                onChange={this._onHChanged}\n              />\n              {!alphaSliderHidden && (\n                <ColorSlider\n                  className=\"is-alpha\"\n                  type={alphaType as 'alpha' | 'transparency'}\n                  ariaLabel={useTransparency ? strings.transparencyAriaLabel : strings.alphaAriaLabel}\n                  overlayColor={color.hex}\n                  value={atValue}\n                  onChange={this._onATChanged}\n                />\n              )}\n            </div>\n            {props.showPreview && (\n              <div className={classNames.flexPreviewBox}>\n                <div\n                  className={classNames.colorSquare + ' is-preview'}\n                  style={{\n                    backgroundColor: color.str,\n                  }}\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Give the table role=group to prevent it from being read as a table (ideally we should\n          just get rid of the table, but this has the potential of breaking consumers) */}\n          <table className={classNames.table} role=\"group\" cellPadding=\"0\" cellSpacing=\"0\">\n            <thead>\n              <tr className={classNames.tableHeader}>\n                <td className={classNames.tableHexCell}>{textLabels.hex}</td>\n                <td>{textLabels.r}</td>\n                <td>{textLabels.g}</td>\n                <td>{textLabels.b}</td>\n                {!alphaSliderHidden && <td className={classNames.tableAlphaCell}>{atLabel}</td>}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {colorComponents.map((comp: ColorComponent) => {\n                  if ((comp === 'a' || comp === 't') && alphaSliderHidden) {\n                    return null;\n                  }\n                  return (\n                    <td key={comp}>\n                      <TextField\n                        className={classNames.input}\n                        onChange={this._textChangeHandlers[comp]}\n                        onBlur={this._onBlur}\n                        value={this._getDisplayValue(comp)}\n                        spellCheck={false}\n                        ariaLabel={textLabels[comp]}\n                        aria-live={comp !== 'hex' ? 'assertive' : undefined}\n                        autoComplete=\"off\"\n                      />\n                    </td>\n                  );\n                })}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private _getDisplayValue(component: ColorComponent): string {\n    const { color, editingColor } = this.state;\n    if (editingColor && editingColor.component === component) {\n      return editingColor.value;\n    }\n    if (component === 'hex') {\n      return color[component] || '';\n    } else if (typeof color[component] === 'number' && !isNaN(color[component] as number)) {\n      return String(color[component]);\n    }\n    return '';\n  }\n\n  private _onSVChanged = (ev: React.MouseEvent<HTMLElement>, color: IColor): void => {\n    this._updateColor(ev, color);\n  };\n\n  private _onHChanged = (ev: React.MouseEvent<HTMLElement>, h: number): void => {\n    this._updateColor(ev, updateH(this.state.color, h));\n  };\n\n  /** Callback for when the alpha/transparency slider changes */\n  private _onATChanged = (ev: React.MouseEvent<HTMLElement>, value: number): void => {\n    const updater = this.props.alphaType === 'transparency' ? updateT : updateA;\n    this._updateColor(ev, updater(this.state.color, Math.round(value)));\n  };\n\n  private _onTextChange(component: ColorComponent, event: React.FormEvent<HTMLInputElement>, newValue?: string): void {\n    const color = this.state.color;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    const isTransparency = component === 't';\n    newValue = (newValue || '').substr(0, isHex ? MAX_HEX_LENGTH : MAX_RGBA_LENGTH);\n\n    // Ignore what the user typed if it contains invalid characters\n    const validCharsRegex = isHex ? HEX_REGEX : RGBA_REGEX;\n    if (!validCharsRegex.test(newValue)) {\n      return;\n    }\n\n    // Determine if the entry is valid (different methods for hex, alpha, and RGB)\n    let isValid: boolean;\n    if (newValue === '') {\n      // Empty string is obviously not valid\n      isValid = false;\n    } else if (isHex) {\n      // Technically hex values of length 3 are also valid, but committing the value here would\n      // cause it to be automatically converted to a value of length 6, which may not be what the\n      // user wanted if they're not finished typing. (Values of length 3 will be committed on blur.)\n      isValid = newValue.length === MAX_HEX_LENGTH;\n    } else if (isAlpha || isTransparency) {\n      isValid = Number(newValue) <= MAX_COLOR_ALPHA;\n    } else {\n      isValid = Number(newValue) <= MAX_COLOR_RGB;\n    }\n\n    if (!isValid) {\n      // If the new value is an empty string or other invalid value, save that to display.\n      // (if the user still hasn't entered anything on blur, the last value is restored)\n      this.setState({ editingColor: { component, value: newValue } });\n    } else if (String(color[component]) === newValue) {\n      // If the new value is the same as the current value, mostly ignore it.\n      // Exception is that if the user was previously editing the value (but hadn't yet entered\n      // a new valid value), we should clear the intermediate value.\n      if (this.state.editingColor) {\n        this.setState({ editingColor: undefined });\n      }\n    } else {\n      // Should be a valid color. Update the value.\n      const newColor = isHex\n        ? getColorFromString('#' + newValue)\n        : isTransparency\n        ? updateT(color, Number(newValue))\n        : getColorFromRGBA({\n            ...color,\n            // Overwrite whichever key is being updated with the new value\n            [component]: Number(newValue),\n          });\n      this._updateColor(event, newColor);\n    }\n  }\n\n  private _onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const { color, editingColor } = this.state;\n    if (!editingColor) {\n      return;\n    }\n\n    // If there was an intermediate incorrect value (such as too large or empty), correct it.\n    const { value, component } = editingColor;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    const isTransparency = component === 't';\n    const minLength = isHex ? MIN_HEX_LENGTH : MIN_RGBA_LENGTH;\n    if (value.length >= minLength && (isHex || !isNaN(Number(value)))) {\n      // Real value. Clamp to appropriate length (hex) or range (rgba).\n      let newColor: IColor | undefined;\n      if (isHex) {\n        newColor = getColorFromString('#' + correctHex(value));\n      } else if (isAlpha || isTransparency) {\n        const updater = isAlpha ? updateA : updateT;\n        newColor = updater(color, clamp(Number(value), MAX_COLOR_ALPHA));\n      } else {\n        newColor = getColorFromRGBA(\n          correctRGB({\n            ...color,\n            [component]: Number(value),\n          } as IRGB),\n        );\n      }\n\n      // Update state and call onChange\n      this._updateColor(event, newColor);\n    } else {\n      // Intermediate value was an empty string or too short (hex only).\n      // Just clear the intermediate state and revert to the previous value.\n      this.setState({ editingColor: undefined });\n    }\n  };\n\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n  private _updateColor(ev: React.SyntheticEvent<HTMLElement> | undefined, newColor: IColor | undefined): void {\n    if (!newColor) {\n      return;\n    }\n\n    const { color, editingColor } = this.state;\n    // For black or white, the hue can change without changing the string.\n    const isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n\n    if (isDifferentColor || editingColor) {\n      // If ev is undefined, it's an update from props (which should be unconditionally respected\n      // and not call onChange).\n      if (ev && this.props.onChange) {\n        this.props.onChange(ev, newColor);\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n      this.setState({ color: newColor, editingColor: undefined });\n    }\n  }\n}\n\nfunction _getColorFromProps(props: IColorPickerProps): IColor | undefined {\n  const { color } = props;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}