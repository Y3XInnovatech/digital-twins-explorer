{"ast":null,"code":"/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\n// eslint-disable-next-line no-unused-vars\nconst TERMS = ['subject', 'predicate', 'object', 'graph'];\nconst RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nconst RDF_LANGSTRING = RDF + 'langString';\nconst XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';\n\n// build regexes\nconst REGEX = {};\n(() => {\n  const iri = '(?:<([^:]+:[^>]*)>)';\n  // https://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL\n  const PN_CHARS_BASE = 'A-Z' + 'a-z' + '\\u00C0-\\u00D6' + '\\u00D8-\\u00F6' + '\\u00F8-\\u02FF' + '\\u0370-\\u037D' + '\\u037F-\\u1FFF' + '\\u200C-\\u200D' + '\\u2070-\\u218F' + '\\u2C00-\\u2FEF' + '\\u3001-\\uD7FF' + '\\uF900-\\uFDCF' + '\\uFDF0-\\uFFFD';\n  // TODO:\n  //'\\u10000-\\uEFFFF';\n  const PN_CHARS_U = PN_CHARS_BASE + '_';\n  const PN_CHARS = PN_CHARS_U + '0-9' + '-' + '\\u00B7' + '\\u0300-\\u036F' + '\\u203F-\\u2040';\n  const BLANK_NODE_LABEL = '(_:' + '(?:[' + PN_CHARS_U + '0-9])' + '(?:(?:[' + PN_CHARS + '.])*(?:[' + PN_CHARS + ']))?' + ')';\n  const bnode = BLANK_NODE_LABEL;\n  const plain = '\"([^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*)\"';\n  const datatype = '(?:\\\\^\\\\^' + iri + ')';\n  const language = '(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))';\n  const literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';\n  const ws = '[ \\\\t]+';\n  const wso = '[ \\\\t]*';\n\n  // define quad part regexes\n  const subject = '(?:' + iri + '|' + bnode + ')' + ws;\n  const property = iri + ws;\n  const object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;\n  const graphName = '(?:\\\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\\\.))';\n\n  // end of line and empty regexes\n  REGEX.eoln = /(?:\\r\\n)|(?:\\n)|(?:\\r)/g;\n  REGEX.empty = new RegExp('^' + wso + '$');\n\n  // full quad regex\n  REGEX.quad = new RegExp('^' + wso + subject + property + object + graphName + wso + '$');\n})();\nmodule.exports = class NQuads {\n  /**\n   * Parses RDF in the form of N-Quads.\n   *\n   * @param input the N-Quads input to parse.\n   *\n   * @return an RDF dataset (an array of quads per http://rdf.js.org/).\n   */\n  static parse(input) {\n    // build RDF dataset\n    const dataset = [];\n    const graphs = {};\n\n    // split N-Quad input into lines\n    const lines = input.split(REGEX.eoln);\n    let lineNumber = 0;\n    for (const line of lines) {\n      lineNumber++;\n\n      // skip empty lines\n      if (REGEX.empty.test(line)) {\n        continue;\n      }\n\n      // parse quad\n      const match = line.match(REGEX.quad);\n      if (match === null) {\n        throw new Error('N-Quads parse error on line ' + lineNumber + '.');\n      }\n\n      // create RDF quad\n      const quad = {};\n\n      // get subject\n      if (match[1] !== undefined) {\n        quad.subject = {\n          termType: 'NamedNode',\n          value: match[1]\n        };\n      } else {\n        quad.subject = {\n          termType: 'BlankNode',\n          value: match[2]\n        };\n      }\n\n      // get predicate\n      quad.predicate = {\n        termType: 'NamedNode',\n        value: match[3]\n      };\n\n      // get object\n      if (match[4] !== undefined) {\n        quad.object = {\n          termType: 'NamedNode',\n          value: match[4]\n        };\n      } else if (match[5] !== undefined) {\n        quad.object = {\n          termType: 'BlankNode',\n          value: match[5]\n        };\n      } else {\n        quad.object = {\n          termType: 'Literal',\n          value: undefined,\n          datatype: {\n            termType: 'NamedNode'\n          }\n        };\n        if (match[7] !== undefined) {\n          quad.object.datatype.value = match[7];\n        } else if (match[8] !== undefined) {\n          quad.object.datatype.value = RDF_LANGSTRING;\n          quad.object.language = match[8];\n        } else {\n          quad.object.datatype.value = XSD_STRING;\n        }\n        quad.object.value = _unescape(match[6]);\n      }\n\n      // get graph\n      if (match[9] !== undefined) {\n        quad.graph = {\n          termType: 'NamedNode',\n          value: match[9]\n        };\n      } else if (match[10] !== undefined) {\n        quad.graph = {\n          termType: 'BlankNode',\n          value: match[10]\n        };\n      } else {\n        quad.graph = {\n          termType: 'DefaultGraph',\n          value: ''\n        };\n      }\n\n      // only add quad if it is unique in its graph\n      if (!(quad.graph.value in graphs)) {\n        graphs[quad.graph.value] = [quad];\n        dataset.push(quad);\n      } else {\n        let unique = true;\n        const quads = graphs[quad.graph.value];\n        for (const q of quads) {\n          if (_compareTriples(q, quad)) {\n            unique = false;\n            break;\n          }\n        }\n        if (unique) {\n          quads.push(quad);\n          dataset.push(quad);\n        }\n      }\n    }\n    return dataset;\n  }\n\n  /**\n   * Converts an RDF dataset to N-Quads.\n   *\n   * @param dataset (array of quads) the RDF dataset to convert.\n   *\n   * @return the N-Quads string.\n   */\n  static serialize(dataset) {\n    if (!Array.isArray(dataset)) {\n      dataset = NQuads.legacyDatasetToQuads(dataset);\n    }\n    const quads = [];\n    for (const quad of dataset) {\n      quads.push(NQuads.serializeQuad(quad));\n    }\n    return quads.sort().join('');\n  }\n\n  /**\n   * Converts an RDF quad to an N-Quad string (a single quad).\n   *\n   * @param quad the RDF quad convert.\n   *\n   * @return the N-Quad string.\n   */\n  static serializeQuad(quad) {\n    const s = quad.subject;\n    const p = quad.predicate;\n    const o = quad.object;\n    const g = quad.graph;\n    let nquad = '';\n\n    // subject and predicate can only be NamedNode or BlankNode\n    [s, p].forEach(term => {\n      if (term.termType === 'NamedNode') {\n        nquad += '<' + term.value + '>';\n      } else {\n        nquad += term.value;\n      }\n      nquad += ' ';\n    });\n\n    // object is NamedNode, BlankNode, or Literal\n    if (o.termType === 'NamedNode') {\n      nquad += '<' + o.value + '>';\n    } else if (o.termType === 'BlankNode') {\n      nquad += o.value;\n    } else {\n      nquad += '\"' + _escape(o.value) + '\"';\n      if (o.datatype.value === RDF_LANGSTRING) {\n        if (o.language) {\n          nquad += '@' + o.language;\n        }\n      } else if (o.datatype.value !== XSD_STRING) {\n        nquad += '^^<' + o.datatype.value + '>';\n      }\n    }\n\n    // graph can only be NamedNode or BlankNode (or DefaultGraph, but that\n    // does not add to `nquad`)\n    if (g.termType === 'NamedNode') {\n      nquad += ' <' + g.value + '>';\n    } else if (g.termType === 'BlankNode') {\n      nquad += ' ' + g.value;\n    }\n    nquad += ' .\\n';\n    return nquad;\n  }\n\n  /**\n   * Converts a legacy-formatted dataset to an array of quads dataset per\n   * http://rdf.js.org/.\n   *\n   * @param dataset the legacy dataset to convert.\n   *\n   * @return the array of quads dataset.\n   */\n  static legacyDatasetToQuads(dataset) {\n    const quads = [];\n    const termTypeMap = {\n      'blank node': 'BlankNode',\n      IRI: 'NamedNode',\n      literal: 'Literal'\n    };\n    for (const graphName in dataset) {\n      const triples = dataset[graphName];\n      triples.forEach(triple => {\n        const quad = {};\n        for (const componentName in triple) {\n          const oldComponent = triple[componentName];\n          const newComponent = {\n            termType: termTypeMap[oldComponent.type],\n            value: oldComponent.value\n          };\n          if (newComponent.termType === 'Literal') {\n            newComponent.datatype = {\n              termType: 'NamedNode'\n            };\n            if ('datatype' in oldComponent) {\n              newComponent.datatype.value = oldComponent.datatype;\n            }\n            if ('language' in oldComponent) {\n              if (!('datatype' in oldComponent)) {\n                newComponent.datatype.value = RDF_LANGSTRING;\n              }\n              newComponent.language = oldComponent.language;\n            } else if (!('datatype' in oldComponent)) {\n              newComponent.datatype.value = XSD_STRING;\n            }\n          }\n          quad[componentName] = newComponent;\n        }\n        if (graphName === '@default') {\n          quad.graph = {\n            termType: 'DefaultGraph',\n            value: ''\n          };\n        } else {\n          quad.graph = {\n            termType: graphName.startsWith('_:') ? 'BlankNode' : 'NamedNode',\n            value: graphName\n          };\n        }\n        quads.push(quad);\n      });\n    }\n    return quads;\n  }\n};\n\n/**\n * Compares two RDF triples for equality.\n *\n * @param t1 the first triple.\n * @param t2 the second triple.\n *\n * @return true if the triples are the same, false if not.\n */\nfunction _compareTriples(t1, t2) {\n  for (const k in t1) {\n    if (t1[k].termType !== t2[k].termType || t1[k].value !== t2[k].value) {\n      return false;\n    }\n  }\n  if (t1.object.termType !== 'Literal') {\n    return true;\n  }\n  return t1.object.datatype.termType === t2.object.datatype.termType && t1.object.datatype.value === t2.object.datatype.value && t1.object.language === t2.object.language;\n}\nconst _escapeRegex = /[\"\\\\\\n\\r]/g;\n/**\n * Escape string to N-Quads literal\n */\nfunction _escape(s) {\n  return s.replace(_escapeRegex, function (match) {\n    switch (match) {\n      case '\"':\n        return '\\\\\"';\n      case '\\\\':\n        return '\\\\\\\\';\n      case '\\n':\n        return '\\\\n';\n      case '\\r':\n        return '\\\\r';\n    }\n  });\n}\nconst _unescapeRegex = /(?:\\\\([tbnrf\"'\\\\]))|(?:\\\\u([0-9A-Fa-f]{4}))|(?:\\\\U([0-9A-Fa-f]{8}))/g;\n/**\n * Unescape N-Quads literal to string\n */\nfunction _unescape(s) {\n  return s.replace(_unescapeRegex, function (match, code, u, U) {\n    if (code) {\n      switch (code) {\n        case 't':\n          return '\\t';\n        case 'b':\n          return '\\b';\n        case 'n':\n          return '\\n';\n        case 'r':\n          return '\\r';\n        case 'f':\n          return '\\f';\n        case '\"':\n          return '\"';\n        case '\\'':\n          return '\\'';\n        case '\\\\':\n          return '\\\\';\n      }\n    }\n    if (u) {\n      return String.fromCharCode(parseInt(u, 16));\n    }\n    if (U) {\n      // FIXME: support larger values\n      throw new Error('Unsupported U escape');\n    }\n  });\n}","map":{"version":3,"names":["TERMS","RDF","RDF_LANGSTRING","XSD_STRING","REGEX","iri","PN_CHARS_BASE","PN_CHARS_U","PN_CHARS","BLANK_NODE_LABEL","bnode","plain","datatype","language","literal","ws","wso","subject","property","object","graphName","eoln","empty","RegExp","quad","module","exports","NQuads","parse","input","dataset","graphs","lines","split","lineNumber","line","test","match","Error","undefined","termType","value","predicate","_unescape","graph","push","unique","quads","q","_compareTriples","serialize","Array","isArray","legacyDatasetToQuads","serializeQuad","sort","join","s","p","o","g","nquad","forEach","term","_escape","termTypeMap","IRI","triples","triple","componentName","oldComponent","newComponent","type","startsWith","t1","t2","k","_escapeRegex","replace","_unescapeRegex","code","u","U","String","fromCharCode","parseInt"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/rdf-canonize/lib/NQuads.js"],"sourcesContent":["/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\n// eslint-disable-next-line no-unused-vars\nconst TERMS = ['subject', 'predicate', 'object', 'graph'];\nconst RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nconst RDF_LANGSTRING = RDF + 'langString';\nconst XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';\n\n// build regexes\nconst REGEX = {};\n(() => {\n  const iri = '(?:<([^:]+:[^>]*)>)';\n  // https://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL\n  const PN_CHARS_BASE =\n    'A-Z' + 'a-z' +\n    '\\u00C0-\\u00D6' +\n    '\\u00D8-\\u00F6' +\n    '\\u00F8-\\u02FF' +\n    '\\u0370-\\u037D' +\n    '\\u037F-\\u1FFF' +\n    '\\u200C-\\u200D' +\n    '\\u2070-\\u218F' +\n    '\\u2C00-\\u2FEF' +\n    '\\u3001-\\uD7FF' +\n    '\\uF900-\\uFDCF' +\n    '\\uFDF0-\\uFFFD';\n    // TODO:\n    //'\\u10000-\\uEFFFF';\n  const PN_CHARS_U =\n    PN_CHARS_BASE +\n    '_';\n  const PN_CHARS =\n    PN_CHARS_U +\n    '0-9' +\n    '-' +\n    '\\u00B7' +\n    '\\u0300-\\u036F' +\n    '\\u203F-\\u2040';\n  const BLANK_NODE_LABEL =\n    '(_:' +\n      '(?:[' + PN_CHARS_U + '0-9])' +\n      '(?:(?:[' + PN_CHARS + '.])*(?:[' + PN_CHARS + ']))?' +\n    ')';\n  const bnode = BLANK_NODE_LABEL;\n  const plain = '\"([^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*)\"';\n  const datatype = '(?:\\\\^\\\\^' + iri + ')';\n  const language = '(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))';\n  const literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';\n  const ws = '[ \\\\t]+';\n  const wso = '[ \\\\t]*';\n\n  // define quad part regexes\n  const subject = '(?:' + iri + '|' + bnode + ')' + ws;\n  const property = iri + ws;\n  const object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;\n  const graphName = '(?:\\\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\\\.))';\n\n  // end of line and empty regexes\n  REGEX.eoln = /(?:\\r\\n)|(?:\\n)|(?:\\r)/g;\n  REGEX.empty = new RegExp('^' + wso + '$');\n\n  // full quad regex\n  REGEX.quad = new RegExp(\n    '^' + wso + subject + property + object + graphName + wso + '$');\n})();\n\nmodule.exports = class NQuads {\n  /**\n   * Parses RDF in the form of N-Quads.\n   *\n   * @param input the N-Quads input to parse.\n   *\n   * @return an RDF dataset (an array of quads per http://rdf.js.org/).\n   */\n  static parse(input) {\n    // build RDF dataset\n    const dataset = [];\n\n    const graphs = {};\n\n    // split N-Quad input into lines\n    const lines = input.split(REGEX.eoln);\n    let lineNumber = 0;\n    for(const line of lines) {\n      lineNumber++;\n\n      // skip empty lines\n      if(REGEX.empty.test(line)) {\n        continue;\n      }\n\n      // parse quad\n      const match = line.match(REGEX.quad);\n      if(match === null) {\n        throw new Error('N-Quads parse error on line ' + lineNumber + '.');\n      }\n\n      // create RDF quad\n      const quad = {};\n\n      // get subject\n      if(match[1] !== undefined) {\n        quad.subject = {termType: 'NamedNode', value: match[1]};\n      } else {\n        quad.subject = {termType: 'BlankNode', value: match[2]};\n      }\n\n      // get predicate\n      quad.predicate = {termType: 'NamedNode', value: match[3]};\n\n      // get object\n      if(match[4] !== undefined) {\n        quad.object = {termType: 'NamedNode', value: match[4]};\n      } else if(match[5] !== undefined) {\n        quad.object = {termType: 'BlankNode', value: match[5]};\n      } else {\n        quad.object = {\n          termType: 'Literal',\n          value: undefined,\n          datatype: {\n            termType: 'NamedNode'\n          }\n        };\n        if(match[7] !== undefined) {\n          quad.object.datatype.value = match[7];\n        } else if(match[8] !== undefined) {\n          quad.object.datatype.value = RDF_LANGSTRING;\n          quad.object.language = match[8];\n        } else {\n          quad.object.datatype.value = XSD_STRING;\n        }\n        quad.object.value = _unescape(match[6]);\n      }\n\n      // get graph\n      if(match[9] !== undefined) {\n        quad.graph = {\n          termType: 'NamedNode',\n          value: match[9]\n        };\n      } else if(match[10] !== undefined) {\n        quad.graph = {\n          termType: 'BlankNode',\n          value: match[10]\n        };\n      } else {\n        quad.graph = {\n          termType: 'DefaultGraph',\n          value: ''\n        };\n      }\n\n      // only add quad if it is unique in its graph\n      if(!(quad.graph.value in graphs)) {\n        graphs[quad.graph.value] = [quad];\n        dataset.push(quad);\n      } else {\n        let unique = true;\n        const quads = graphs[quad.graph.value];\n        for(const q of quads) {\n          if(_compareTriples(q, quad)) {\n            unique = false;\n            break;\n          }\n        }\n        if(unique) {\n          quads.push(quad);\n          dataset.push(quad);\n        }\n      }\n    }\n\n    return dataset;\n  }\n\n  /**\n   * Converts an RDF dataset to N-Quads.\n   *\n   * @param dataset (array of quads) the RDF dataset to convert.\n   *\n   * @return the N-Quads string.\n   */\n  static serialize(dataset) {\n    if(!Array.isArray(dataset)) {\n      dataset = NQuads.legacyDatasetToQuads(dataset);\n    }\n    const quads = [];\n    for(const quad of dataset) {\n      quads.push(NQuads.serializeQuad(quad));\n    }\n    return quads.sort().join('');\n  }\n\n  /**\n   * Converts an RDF quad to an N-Quad string (a single quad).\n   *\n   * @param quad the RDF quad convert.\n   *\n   * @return the N-Quad string.\n   */\n  static serializeQuad(quad) {\n    const s = quad.subject;\n    const p = quad.predicate;\n    const o = quad.object;\n    const g = quad.graph;\n\n    let nquad = '';\n\n    // subject and predicate can only be NamedNode or BlankNode\n    [s, p].forEach(term => {\n      if(term.termType === 'NamedNode') {\n        nquad += '<' + term.value + '>';\n      } else {\n        nquad += term.value;\n      }\n      nquad += ' ';\n    });\n\n    // object is NamedNode, BlankNode, or Literal\n    if(o.termType === 'NamedNode') {\n      nquad += '<' + o.value + '>';\n    } else if(o.termType === 'BlankNode') {\n      nquad += o.value;\n    } else {\n      nquad += '\"' + _escape(o.value) + '\"';\n      if(o.datatype.value === RDF_LANGSTRING) {\n        if(o.language) {\n          nquad += '@' + o.language;\n        }\n      } else if(o.datatype.value !== XSD_STRING) {\n        nquad += '^^<' + o.datatype.value + '>';\n      }\n    }\n\n    // graph can only be NamedNode or BlankNode (or DefaultGraph, but that\n    // does not add to `nquad`)\n    if(g.termType === 'NamedNode') {\n      nquad += ' <' + g.value + '>';\n    } else if(g.termType === 'BlankNode') {\n      nquad += ' ' + g.value;\n    }\n\n    nquad += ' .\\n';\n    return nquad;\n  }\n\n  /**\n   * Converts a legacy-formatted dataset to an array of quads dataset per\n   * http://rdf.js.org/.\n   *\n   * @param dataset the legacy dataset to convert.\n   *\n   * @return the array of quads dataset.\n   */\n  static legacyDatasetToQuads(dataset) {\n    const quads = [];\n\n    const termTypeMap = {\n      'blank node': 'BlankNode',\n      IRI: 'NamedNode',\n      literal: 'Literal'\n    };\n\n    for(const graphName in dataset) {\n      const triples = dataset[graphName];\n      triples.forEach(triple => {\n        const quad = {};\n        for(const componentName in triple) {\n          const oldComponent = triple[componentName];\n          const newComponent = {\n            termType: termTypeMap[oldComponent.type],\n            value: oldComponent.value\n          };\n          if(newComponent.termType === 'Literal') {\n            newComponent.datatype = {\n              termType: 'NamedNode'\n            };\n            if('datatype' in oldComponent) {\n              newComponent.datatype.value = oldComponent.datatype;\n            }\n            if('language' in oldComponent) {\n              if(!('datatype' in oldComponent)) {\n                newComponent.datatype.value = RDF_LANGSTRING;\n              }\n              newComponent.language = oldComponent.language;\n            } else if(!('datatype' in oldComponent)) {\n              newComponent.datatype.value = XSD_STRING;\n            }\n          }\n          quad[componentName] = newComponent;\n        }\n        if(graphName === '@default') {\n          quad.graph = {\n            termType: 'DefaultGraph',\n            value: ''\n          };\n        } else {\n          quad.graph = {\n            termType: graphName.startsWith('_:') ? 'BlankNode' : 'NamedNode',\n            value: graphName\n          };\n        }\n        quads.push(quad);\n      });\n    }\n\n    return quads;\n  }\n};\n\n/**\n * Compares two RDF triples for equality.\n *\n * @param t1 the first triple.\n * @param t2 the second triple.\n *\n * @return true if the triples are the same, false if not.\n */\nfunction _compareTriples(t1, t2) {\n  for(const k in t1) {\n    if(t1[k].termType !== t2[k].termType || t1[k].value !== t2[k].value) {\n      return false;\n    }\n  }\n  if(t1.object.termType !== 'Literal') {\n    return true;\n  }\n  return (\n    (t1.object.datatype.termType === t2.object.datatype.termType) &&\n    (t1.object.datatype.value === t2.object.datatype.value) &&\n    (t1.object.language === t2.object.language)\n  );\n}\n\nconst _escapeRegex = /[\"\\\\\\n\\r]/g;\n/**\n * Escape string to N-Quads literal\n */\nfunction _escape(s) {\n  return s.replace(_escapeRegex, function(match) {\n    switch(match) {\n      case '\"': return '\\\\\"';\n      case '\\\\': return '\\\\\\\\';\n      case '\\n': return '\\\\n';\n      case '\\r': return '\\\\r';\n    }\n  });\n}\n\nconst _unescapeRegex =\n  /(?:\\\\([tbnrf\"'\\\\]))|(?:\\\\u([0-9A-Fa-f]{4}))|(?:\\\\U([0-9A-Fa-f]{8}))/g;\n/**\n * Unescape N-Quads literal to string\n */\nfunction _unescape(s) {\n  return s.replace(_unescapeRegex, function(match, code, u, U) {\n    if(code) {\n      switch(code) {\n        case 't': return '\\t';\n        case 'b': return '\\b';\n        case 'n': return '\\n';\n        case 'r': return '\\r';\n        case 'f': return '\\f';\n        case '\"': return '\"';\n        case '\\'': return '\\'';\n        case '\\\\': return '\\\\';\n      }\n    }\n    if(u) {\n      return String.fromCharCode(parseInt(u, 16));\n    }\n    if(U) {\n      // FIXME: support larger values\n      throw new Error('Unsupported U escape');\n    }\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}