{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\nvar _root = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\nvar _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;\nvar _themeState = initializeThemeState();\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\nvar _themeTokenRegex = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\nvar now = function () {\n  return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\nfunction measure(func) {\n  var start = now();\n  func();\n  var end = now();\n  _themeState.perf.duration += end - start;\n}\n/**\n * initialize global state object\n */\nfunction initializeThemeState() {\n  var state = _root.__themeState__ || {\n    theme: undefined,\n    lastStyleElement: undefined,\n    registeredStyles: []\n  };\n  if (!state.runState) {\n    state = __assign(__assign({}, state), {\n      perf: {\n        count: 0,\n        duration: 0\n      },\n      runState: {\n        flushTimer: 0,\n        mode: 0 /* sync */,\n        buffer: []\n      }\n    });\n  }\n  if (!state.registeredThemableStyles) {\n    state = __assign(__assign({}, state), {\n      registeredThemableStyles: []\n    });\n  }\n  _root.__themeState__ = state;\n  return state;\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\n */\nexport function loadStyles(styles, loadAsync) {\n  if (loadAsync === void 0) {\n    loadAsync = false;\n  }\n  measure(function () {\n    var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);\n    var _a = _themeState.runState,\n      mode = _a.mode,\n      buffer = _a.buffer,\n      flushTimer = _a.flushTimer;\n    if (loadAsync || mode === 1 /* async */) {\n      buffer.push(styleParts);\n      if (!flushTimer) {\n        _themeState.runState.flushTimer = asyncLoadStyles();\n      }\n    } else {\n      applyThemableStyles(styleParts);\n    }\n  });\n}\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\n * a loadStyles callback that gets called when styles are loaded or reloaded\n */\nexport function configureLoadStyles(loadStylesFn) {\n  _themeState.loadStyles = loadStylesFn;\n}\n/**\n * Configure run mode of load-themable-styles\n * @param mode load-themable-styles run mode, async or sync\n */\nexport function configureRunMode(mode) {\n  _themeState.runState.mode = mode;\n}\n/**\n * external code can call flush to synchronously force processing of currently buffered styles\n */\nexport function flush() {\n  measure(function () {\n    var styleArrays = _themeState.runState.buffer.slice();\n    _themeState.runState.buffer = [];\n    var mergedStyleArray = [].concat.apply([], styleArrays);\n    if (mergedStyleArray.length > 0) {\n      applyThemableStyles(mergedStyleArray);\n    }\n  });\n}\n/**\n * register async loadStyles\n */\nfunction asyncLoadStyles() {\n  return setTimeout(function () {\n    _themeState.runState.flushTimer = 0;\n    flush();\n  }, 0);\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\nfunction applyThemableStyles(stylesArray, styleRecord) {\n  if (_themeState.loadStyles) {\n    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\n  } else {\n    registerStyles(stylesArray);\n  }\n}\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\nexport function loadTheme(theme) {\n  _themeState.theme = theme;\n  // reload styles.\n  reloadStyles();\n}\n/**\n * Clear already registered style elements and style records in theme_State object\n * @param option - specify which group of registered styles should be cleared.\n * Default to be both themable and non-themable styles will be cleared\n */\nexport function clearStyles(option) {\n  if (option === void 0) {\n    option = 3 /* all */;\n  }\n  if (option === 3 /* all */ || option === 2 /* onlyNonThemable */) {\n    clearStylesInternal(_themeState.registeredStyles);\n    _themeState.registeredStyles = [];\n  }\n  if (option === 3 /* all */ || option === 1 /* onlyThemable */) {\n    clearStylesInternal(_themeState.registeredThemableStyles);\n    _themeState.registeredThemableStyles = [];\n  }\n}\nfunction clearStylesInternal(records) {\n  records.forEach(function (styleRecord) {\n    var styleElement = styleRecord && styleRecord.styleElement;\n    if (styleElement && styleElement.parentElement) {\n      styleElement.parentElement.removeChild(styleElement);\n    }\n  });\n}\n/**\n * Reloads styles.\n */\nfunction reloadStyles() {\n  if (_themeState.theme) {\n    var themableStyles = [];\n    for (var _i = 0, _a = _themeState.registeredThemableStyles; _i < _a.length; _i++) {\n      var styleRecord = _a[_i];\n      themableStyles.push(styleRecord.themableStyle);\n    }\n    if (themableStyles.length > 0) {\n      clearStyles(1 /* onlyThemable */);\n      applyThemableStyles([].concat.apply([], themableStyles));\n    }\n  }\n}\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\nexport function detokenize(styles) {\n  if (styles) {\n    styles = resolveThemableArray(splitStyles(styles)).styleString;\n  }\n  return styles;\n}\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\nfunction resolveThemableArray(splitStyleArray) {\n  var theme = _themeState.theme;\n  var themable = false;\n  // Resolve the array of theming instructions to an array of strings.\n  // Then join the array to produce the final CSS string.\n  var resolvedArray = (splitStyleArray || []).map(function (currentValue) {\n    var themeSlot = currentValue.theme;\n    if (themeSlot) {\n      themable = true;\n      // A theming annotation. Resolve it.\n      var themedValue = theme ? theme[themeSlot] : undefined;\n      var defaultValue = currentValue.defaultValue || 'inherit';\n      // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\n      // Allow the themedValue to be undefined to explicitly request the default value.\n      if (theme && !themedValue && console && !(themeSlot in theme) && typeof DEBUG !== 'undefined' && DEBUG) {\n        console.warn(\"Theming value not provided for \\\"\" + themeSlot + \"\\\". Falling back to \\\"\" + defaultValue + \"\\\".\");\n      }\n      return themedValue || defaultValue;\n    } else {\n      // A non-themable string. Preserve it.\n      return currentValue.rawString;\n    }\n  });\n  return {\n    styleString: resolvedArray.join(''),\n    themable: themable\n  };\n}\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\nexport function splitStyles(styles) {\n  var result = [];\n  if (styles) {\n    var pos = 0; // Current position in styles.\n    var tokenMatch = void 0;\n    while (tokenMatch = _themeTokenRegex.exec(styles)) {\n      var matchIndex = tokenMatch.index;\n      if (matchIndex > pos) {\n        result.push({\n          rawString: styles.substring(pos, matchIndex)\n        });\n      }\n      result.push({\n        theme: tokenMatch[1],\n        defaultValue: tokenMatch[2] // May be undefined\n      });\n      // index of the first character after the current match\n      pos = _themeTokenRegex.lastIndex;\n    }\n    // Push the rest of the string after the last match.\n    result.push({\n      rawString: styles.substring(pos)\n    });\n  }\n  return result;\n}\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\nfunction registerStyles(styleArray) {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  var head = document.getElementsByTagName('head')[0];\n  var styleElement = document.createElement('style');\n  var _a = resolveThemableArray(styleArray),\n    styleString = _a.styleString,\n    themable = _a.themable;\n  styleElement.setAttribute('data-load-themed-styles', 'true');\n  if (_styleNonce) {\n    styleElement.setAttribute('nonce', _styleNonce);\n  }\n  styleElement.appendChild(document.createTextNode(styleString));\n  _themeState.perf.count++;\n  head.appendChild(styleElement);\n  var ev = document.createEvent('HTMLEvents');\n  ev.initEvent('styleinsert', true /* bubbleEvent */, false /* cancelable */);\n  ev.args = {\n    newStyle: styleElement\n  };\n  document.dispatchEvent(ev);\n  var record = {\n    styleElement: styleElement,\n    themableStyle: styleArray\n  };\n  if (themable) {\n    _themeState.registeredThemableStyles.push(record);\n  } else {\n    _themeState.registeredStyles.push(record);\n  }\n}","map":{"version":3,"sources":["../../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value\r\n * to use if that slot is not specified by the theme.\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\n\r\n// Declaring a global here in case that the execution environment is Node.js (without importing the\r\n// entire node.js d.ts for now)\r\ndeclare let global: any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\nexport interface IThemingInstruction {\r\n  theme?: string;\r\n  defaultValue?: string;\r\n  rawString?: string;\r\n}\r\n\r\nexport type ThemableArray = IThemingInstruction[];\r\n\r\nexport interface ITheme {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface IStyleSheet {\r\n  cssText: string;\r\n}\r\n\r\ninterface IExtendedHtmlStyleElement extends HTMLStyleElement {\r\n  styleSheet: IStyleSheet;\r\n}\r\n\r\n/**\r\n * Performance Measurement of loading styles\r\n */\r\ninterface IMeasurement {\r\n  /**\r\n   * Count of style element injected, which is the slow operation in IE\r\n   */\r\n  count: number;\r\n  /**\r\n   * Total duration of all loadStyles exections\r\n   */\r\n  duration: number;\r\n}\r\n\r\ninterface IRunState {\r\n  mode: Mode;\r\n  buffer: ThemableArray[];\r\n  flushTimer: number;\r\n}\r\n\r\ninterface IThemeState {\r\n  theme: ITheme | undefined;\r\n  lastStyleElement: IExtendedHtmlStyleElement;\r\n  registeredStyles: IStyleRecord[]; // records of already registered non-themable styles\r\n  registeredThemableStyles: IStyleRecord[]; // records of already registered themable styles\r\n  loadStyles: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined;\r\n  perf: IMeasurement;\r\n  runState: IRunState;\r\n}\r\n\r\ninterface IStyleRecord {\r\n  styleElement: Element;\r\n  themableStyle: ThemableArray;\r\n}\r\n\r\ninterface ICustomEvent<T> extends Event {\r\n  args?: T;\r\n}\r\n\r\n/**\r\n * object returned from resolveThemableArray function\r\n */\r\ninterface IThemableArrayResolveResult {\r\n  /** this string is the processed styles in string */\r\n  styleString: string;\r\n\r\n  /** this boolean indicates if this style array is themable */\r\n  themable: boolean;\r\n}\r\n\r\n/**\r\n * In sync mode, styles are registered as style elements synchronously with loadStyles() call.\r\n * In async mode, styles are buffered and registered as batch in async timer for performance purpose.\r\n */\r\nexport const enum Mode {\r\n  sync,\r\n  async\r\n}\r\n\r\n/**\r\n * Themable styles and non-themable styles are tracked separately\r\n * Specify ClearStyleOptions when calling clearStyles API to specify which group of registered styles should be cleared.\r\n */\r\nexport const enum ClearStyleOptions {\r\n  /** only themable styles will be cleared */\r\n  onlyThemable = 1,\r\n  /** only non-themable styles will be cleared */\r\n  onlyNonThemable = 2,\r\n  /** both themable and non-themable styles will be cleared */\r\n  all = 3\r\n}\r\n\r\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\r\n// load-themed-styles hosted on the page.\r\nconst _root: any = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\r\nconst _styleNonce: string = _root && _root.CSPSettings && _root.CSPSettings.nonce;\r\n\r\nconst _themeState: IThemeState = initializeThemeState();\r\n\r\n/**\r\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\r\n */\r\nconst _themeTokenRegex: RegExp = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\r\n\r\nconst now: () => number = () =>\r\n  typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\r\n\r\nfunction measure(func: () => void): void {\r\n  const start: number = now();\r\n  func();\r\n  const end: number = now();\r\n  _themeState.perf.duration += end - start;\r\n}\r\n\r\n/**\r\n * initialize global state object\r\n */\r\nfunction initializeThemeState(): IThemeState {\r\n  let state: IThemeState = _root.__themeState__ || {\r\n    theme: undefined,\r\n    lastStyleElement: undefined,\r\n    registeredStyles: []\r\n  };\r\n\r\n  if (!state.runState) {\r\n    state = {\r\n      ...state,\r\n      perf: {\r\n        count: 0,\r\n        duration: 0\r\n      },\r\n      runState: {\r\n        flushTimer: 0,\r\n        mode: Mode.sync,\r\n        buffer: []\r\n      }\r\n    };\r\n  }\r\n  if (!state.registeredThemableStyles) {\r\n    state = {\r\n      ...state,\r\n      registeredThemableStyles: []\r\n    };\r\n  }\r\n  _root.__themeState__ = state;\r\n  return state;\r\n}\r\n\r\n/**\r\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\r\n * event is fired.\r\n * @param {string | ThemableArray} styles Themable style text to register.\r\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\r\n */\r\nexport function loadStyles(styles: string | ThemableArray, loadAsync: boolean = false): void {\r\n  measure(() => {\r\n    const styleParts: ThemableArray = Array.isArray(styles) ? styles : splitStyles(styles);\r\n    const { mode, buffer, flushTimer } = _themeState.runState;\r\n    if (loadAsync || mode === Mode.async) {\r\n      buffer.push(styleParts);\r\n      if (!flushTimer) {\r\n        _themeState.runState.flushTimer = asyncLoadStyles();\r\n      }\r\n    } else {\r\n      applyThemableStyles(styleParts);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\r\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\r\n * a loadStyles callback that gets called when styles are loaded or reloaded\r\n */\r\nexport function configureLoadStyles(\r\n  loadStylesFn: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined\r\n): void {\r\n  _themeState.loadStyles = loadStylesFn;\r\n}\r\n\r\n/**\r\n * Configure run mode of load-themable-styles\r\n * @param mode load-themable-styles run mode, async or sync\r\n */\r\nexport function configureRunMode(mode: Mode): void {\r\n  _themeState.runState.mode = mode;\r\n}\r\n\r\n/**\r\n * external code can call flush to synchronously force processing of currently buffered styles\r\n */\r\nexport function flush(): void {\r\n  measure(() => {\r\n    const styleArrays: ThemableArray[] = _themeState.runState.buffer.slice();\r\n    _themeState.runState.buffer = [];\r\n    const mergedStyleArray: ThemableArray = ([] as ThemableArray).concat.apply([], styleArrays);\r\n    if (mergedStyleArray.length > 0) {\r\n      applyThemableStyles(mergedStyleArray);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * register async loadStyles\r\n */\r\nfunction asyncLoadStyles(): number {\r\n  return setTimeout(() => {\r\n    _themeState.runState.flushTimer = 0;\r\n    flush();\r\n  }, 0);\r\n}\r\n\r\n/**\r\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\r\n * is fired.\r\n * @param {string} styleText Style to register.\r\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\r\n */\r\nfunction applyThemableStyles(stylesArray: ThemableArray, styleRecord?: IStyleRecord): void {\r\n  if (_themeState.loadStyles) {\r\n    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\r\n  } else {\r\n    registerStyles(stylesArray);\r\n  }\r\n}\r\n\r\n/**\r\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\r\n * replaced.\r\n * @param {theme} theme JSON object of theme tokens to values.\r\n */\r\nexport function loadTheme(theme: ITheme | undefined): void {\r\n  _themeState.theme = theme;\r\n\r\n  // reload styles.\r\n  reloadStyles();\r\n}\r\n\r\n/**\r\n * Clear already registered style elements and style records in theme_State object\r\n * @param option - specify which group of registered styles should be cleared.\r\n * Default to be both themable and non-themable styles will be cleared\r\n */\r\nexport function clearStyles(option: ClearStyleOptions = ClearStyleOptions.all): void {\r\n  if (option === ClearStyleOptions.all || option === ClearStyleOptions.onlyNonThemable) {\r\n    clearStylesInternal(_themeState.registeredStyles);\r\n    _themeState.registeredStyles = [];\r\n  }\r\n  if (option === ClearStyleOptions.all || option === ClearStyleOptions.onlyThemable) {\r\n    clearStylesInternal(_themeState.registeredThemableStyles);\r\n    _themeState.registeredThemableStyles = [];\r\n  }\r\n}\r\n\r\nfunction clearStylesInternal(records: IStyleRecord[]): void {\r\n  records.forEach((styleRecord: IStyleRecord) => {\r\n    const styleElement: HTMLStyleElement = styleRecord && (styleRecord.styleElement as HTMLStyleElement);\r\n    if (styleElement && styleElement.parentElement) {\r\n      styleElement.parentElement.removeChild(styleElement);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Reloads styles.\r\n */\r\nfunction reloadStyles(): void {\r\n  if (_themeState.theme) {\r\n    const themableStyles: ThemableArray[] = [];\r\n    for (const styleRecord of _themeState.registeredThemableStyles) {\r\n      themableStyles.push(styleRecord.themableStyle);\r\n    }\r\n    if (themableStyles.length > 0) {\r\n      clearStyles(ClearStyleOptions.onlyThemable);\r\n      applyThemableStyles(([] as ThemableArray).concat.apply([], themableStyles));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Find theme tokens and replaces them with provided theme values.\r\n * @param {string} styles Tokenized styles to fix.\r\n */\r\nexport function detokenize(styles: string | undefined): string | undefined {\r\n  if (styles) {\r\n    styles = resolveThemableArray(splitStyles(styles)).styleString;\r\n  }\r\n\r\n  return styles;\r\n}\r\n\r\n/**\r\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\r\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\r\n */\r\nfunction resolveThemableArray(splitStyleArray: ThemableArray): IThemableArrayResolveResult {\r\n  const { theme }: IThemeState = _themeState;\r\n  let themable: boolean = false;\r\n  // Resolve the array of theming instructions to an array of strings.\r\n  // Then join the array to produce the final CSS string.\r\n  const resolvedArray: (string | undefined)[] = (splitStyleArray || []).map(\r\n    (currentValue: IThemingInstruction) => {\r\n      const themeSlot: string | undefined = currentValue.theme;\r\n      if (themeSlot) {\r\n        themable = true;\r\n        // A theming annotation. Resolve it.\r\n        const themedValue: string | undefined = theme ? theme[themeSlot] : undefined;\r\n        const defaultValue: string = currentValue.defaultValue || 'inherit';\r\n\r\n        // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\r\n        // Allow the themedValue to be undefined to explicitly request the default value.\r\n        if (\r\n          theme &&\r\n          !themedValue &&\r\n          console &&\r\n          !(themeSlot in theme) &&\r\n          typeof DEBUG !== 'undefined' &&\r\n          DEBUG\r\n        ) {\r\n          console.warn(`Theming value not provided for \"${themeSlot}\". Falling back to \"${defaultValue}\".`);\r\n        }\r\n\r\n        return themedValue || defaultValue;\r\n      } else {\r\n        // A non-themable string. Preserve it.\r\n        return currentValue.rawString;\r\n      }\r\n    }\r\n  );\r\n\r\n  return {\r\n    styleString: resolvedArray.join(''),\r\n    themable: themable\r\n  };\r\n}\r\n\r\n/**\r\n * Split tokenized CSS into an array of strings and theme specification objects\r\n * @param {string} styles Tokenized styles to split.\r\n */\r\nexport function splitStyles(styles: string): ThemableArray {\r\n  const result: ThemableArray = [];\r\n  if (styles) {\r\n    let pos: number = 0; // Current position in styles.\r\n    let tokenMatch: RegExpExecArray | null;\r\n    while ((tokenMatch = _themeTokenRegex.exec(styles))) {\r\n      const matchIndex: number = tokenMatch.index;\r\n      if (matchIndex > pos) {\r\n        result.push({\r\n          rawString: styles.substring(pos, matchIndex)\r\n        });\r\n      }\r\n\r\n      result.push({\r\n        theme: tokenMatch[1],\r\n        defaultValue: tokenMatch[2] // May be undefined\r\n      });\r\n\r\n      // index of the first character after the current match\r\n      pos = _themeTokenRegex.lastIndex;\r\n    }\r\n\r\n    // Push the rest of the string after the last match.\r\n    result.push({\r\n      rawString: styles.substring(pos)\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Registers a set of style text. If it is registered too early, we will register it when the\r\n * window.load event is fired.\r\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\r\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\r\n */\r\nfunction registerStyles(styleArray: ThemableArray): void {\r\n  if (typeof document === 'undefined') {\r\n    return;\r\n  }\r\n  const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\r\n  const styleElement: HTMLStyleElement = document.createElement('style');\r\n  const { styleString, themable } = resolveThemableArray(styleArray);\r\n\r\n  styleElement.setAttribute('data-load-themed-styles', 'true');\r\n  if (_styleNonce) {\r\n    styleElement.setAttribute('nonce', _styleNonce);\r\n  }\r\n  styleElement.appendChild(document.createTextNode(styleString));\r\n  _themeState.perf.count++;\r\n  head.appendChild(styleElement);\r\n\r\n  const ev: ICustomEvent<{ newStyle: HTMLStyleElement }> = document.createEvent('HTMLEvents');\r\n  ev.initEvent('styleinsert', true /* bubbleEvent */, false /* cancelable */);\r\n  ev.args = {\r\n    newStyle: styleElement\r\n  };\r\n  document.dispatchEvent(ev);\r\n\r\n  const record: IStyleRecord = {\r\n    styleElement: styleElement,\r\n    themableStyle: styleArray\r\n  };\r\n\r\n  if (themable) {\r\n    _themeState.registeredThemableStyles.push(record);\r\n  } else {\r\n    _themeState.registeredStyles.push(record);\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}