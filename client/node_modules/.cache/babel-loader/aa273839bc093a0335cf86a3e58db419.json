{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\nexport function mergeSettings(oldSettings, newSettings) {\n  if (oldSettings === void 0) {\n    oldSettings = {};\n  }\n  var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n  return mergeSettingsWith(oldSettings);\n}\nexport function mergeScopedSettings(oldSettings, newSettings) {\n  if (oldSettings === void 0) {\n    oldSettings = {};\n  }\n  var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n  return mergeSettingsWith(oldSettings);\n}\nfunction _isSettingsFunction(settings) {\n  return typeof settings === 'function';\n}\nfunction _settingsMergeWith(newSettings) {\n  return function (settings) {\n    return newSettings ? __assign(__assign({}, settings), newSettings) : settings;\n  };\n}\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps) {\n  if (scopedSettingsFromProps === void 0) {\n    scopedSettingsFromProps = {};\n  }\n  return function (oldScopedSettings) {\n    var newScopedSettings = __assign({}, oldScopedSettings);\n    for (var scopeName in scopedSettingsFromProps) {\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n        newScopedSettings[scopeName] = __assign(__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);\n      }\n    }\n    return newScopedSettings;\n  };\n}","map":{"version":3,"sources":["customizations/mergeSettings.ts"],"names":[],"mappings":";AAEA;;;;;;AAMG;AACH,OAAM,SAAU,aAAa,CAAC,WAA2B,EAAE,WAA2C,EAAA;EAAxE,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;IAAA,WAAA,GAAA,CAAA,CAA2B;EAAA;EACvD,IAAM,iBAAiB,GAAG,mBAAmB,CAAC,WAAW,CAAC,GAAG,WAAW,GAAG,kBAAkB,CAAC,WAAW,CAAC;EAE1G,OAAO,iBAAiB,CAAC,WAAW,CAAC;AACvC;AAEA,OAAM,SAAU,mBAAmB,CACjC,WAA2B,EAC3B,WAA2C,EAAA;EAD3C,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;IAAA,WAAA,GAAA,CAAA,CAA2B;EAAA;EAG3B,IAAM,iBAAiB,GAAG,mBAAmB,CAAC,WAAW,CAAC,GAAG,WAAW,GAAG,wBAAwB,CAAC,WAAW,CAAC;EAEhH,OAAO,iBAAiB,CAAC,WAAW,CAAC;AACvC;AAEA,SAAS,mBAAmB,CAAC,QAAwC,EAAA;EACnE,OAAO,OAAO,QAAQ,KAAK,UAAU;AACvC;AAEA,SAAS,kBAAkB,CAAC,WAAoB,EAAA;EAC9C,OAAO,UAAC,QAAmB,EAAA;IAAK,OAAC,WAAW,GAAE,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAM,QAAQ,CAAA,EAAK,WAAW,CAAA,GAAK,QAAQ;EAAzD,CAA0D;AAC5F;AAEA,SAAS,wBAAwB,CAAC,uBAAuC,EAAA;EAAvC,IAAA,uBAAA,KAAA,KAAA,CAAA,EAAA;IAAA,uBAAA,GAAA,CAAA,CAAuC;EAAA;EACvE,OAAO,UAAC,iBAA4B,EAAA;IAClC,IAAM,iBAAiB,GAAA,QAAA,CAAA,CAAA,CAAA,EAAmB,iBAAiB,CAAE;IAE7D,KAAK,IAAI,SAAS,IAAI,uBAAuB,EAAE;MAC7C,IAAI,uBAAuB,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;QACrD,iBAAiB,CAAC,SAAS,CAAC,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAQ,iBAAiB,CAAC,SAAS,CAAC,CAAA,EAAK,uBAAuB,CAAC,SAAS,CAAC,CAAE;MAC1G;IACF;IAED,OAAO,iBAAiB;EAC1B,CAAC;AACH","sourcesContent":["import { ISettings, ISettingsFunction } from './Customizations';\n\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\nexport function mergeSettings(oldSettings: ISettings = {}, newSettings?: ISettings | ISettingsFunction): ISettings {\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n\n  return mergeSettingsWith(oldSettings);\n}\n\nexport function mergeScopedSettings(\n  oldSettings: ISettings = {},\n  newSettings?: ISettings | ISettingsFunction,\n): ISettings {\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n\n  return mergeSettingsWith(oldSettings);\n}\n\nfunction _isSettingsFunction(settings?: ISettings | ISettingsFunction): settings is ISettingsFunction {\n  return typeof settings === 'function';\n}\n\nfunction _settingsMergeWith(newSettings?: object): (settings: ISettings) => ISettings {\n  return (settings: ISettings) => (newSettings ? { ...settings, ...newSettings } : settings);\n}\n\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps: ISettings = {}): (scopedSettings: ISettings) => ISettings {\n  return (oldScopedSettings: ISettings): ISettings => {\n    const newScopedSettings: ISettings = { ...oldScopedSettings };\n\n    for (let scopeName in scopedSettingsFromProps) {\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n        newScopedSettings[scopeName] = { ...oldScopedSettings[scopeName], ...scopedSettingsFromProps[scopeName] };\n      }\n    }\n\n    return newScopedSettings;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}