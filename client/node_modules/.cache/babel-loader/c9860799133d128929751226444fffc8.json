{"ast":null,"code":"import { C as ComponentError, be as __awaiter, bf as __generator, bE as __rest, d as ComponentErrorType, bg as __assign, H as HierarchyNodeType, bj as __spreadArray, bF as downloadJSON, I as AdtPusherSimulationType } from './Interfaces-f1972c79.js';\nimport { a as axios } from './index-f67cd73f.js';\nimport { A as AdapterResult } from './AdapterResult-96d676e4.js';\nvar ADTAdapterModelsData = /** @class */function () {\n  function ADTAdapterModelsData(data) {\n    this.data = data;\n  }\n  ADTAdapterModelsData.prototype.hasNoData = function () {\n    var _a;\n    return this.data === undefined || this.data === null || ((_a = this.data.value) === null || _a === void 0 ? void 0 : _a.length) === 0;\n  };\n  return ADTAdapterModelsData;\n}();\nvar ADTAdapterTwinsData = /** @class */function () {\n  function ADTAdapterTwinsData(data) {\n    this.data = data;\n  }\n  ADTAdapterTwinsData.prototype.hasNoData = function () {\n    return this.data === undefined || this.data === null || this.data.value.length === 0;\n  };\n  return ADTAdapterTwinsData;\n}();\nvar ADTAdapterSearchByQueryData = /** @class */function () {\n  function ADTAdapterSearchByQueryData(data) {\n    this.data = data;\n  }\n  ADTAdapterSearchByQueryData.prototype.hasNoData = function () {\n    return this.data === undefined || this.data === null || this.data.value.length === 0;\n  };\n  return ADTAdapterSearchByQueryData;\n}();\nvar ADTAdapterPatchData = /** @class */function () {\n  function ADTAdapterPatchData(data) {\n    this.data = data;\n  }\n  ADTAdapterPatchData.prototype.hasNoData = function () {\n    return this.data === null || this.data === undefined;\n  };\n  return ADTAdapterPatchData;\n}();\nvar ADTModelData = /** @class */function () {\n  function ADTModelData(data) {\n    this.data = data;\n  }\n  ADTModelData.prototype.hasNoData = function () {\n    return this.data === null || this.data === undefined;\n  };\n  return ADTModelData;\n}();\nvar ADTAllModelsData = /** @class */function () {\n  function ADTAllModelsData(data) {\n    this.data = data;\n  }\n  ADTAllModelsData.prototype.hasNoData = function () {\n    var _a, _b;\n    return !((_a = this.data) === null || _a === void 0 ? void 0 : _a.parsedModels) || !((_b = this.data) === null || _b === void 0 ? void 0 : _b.rawModels);\n  };\n  return ADTAllModelsData;\n}();\nvar ADTTwinToModelMappingData = /** @class */function () {\n  function ADTTwinToModelMappingData(data) {\n    this.data = data;\n  }\n  ADTTwinToModelMappingData.prototype.hasNoData = function () {\n    var _a, _b;\n    return !((_a = this.data) === null || _a === void 0 ? void 0 : _a.twinId) || !((_b = this.data) === null || _b === void 0 ? void 0 : _b.modelId);\n  };\n  return ADTTwinToModelMappingData;\n}();\nvar ADTRelationshipsData = /** @class */function () {\n  function ADTRelationshipsData(data) {\n    this.data = data;\n  }\n  ADTRelationshipsData.prototype.hasNoData = function () {\n    return this.data === null || this.data.length === 0;\n  };\n  return ADTRelationshipsData;\n}();\nvar ADTRelationshipData = /** @class */function () {\n  function ADTRelationshipData(data) {\n    this.data = data;\n  }\n  ADTRelationshipData.prototype.hasNoData = function () {\n    return this.data === null || this.data.length === 0;\n  };\n  return ADTRelationshipData;\n}();\nvar ADTTwinData = /** @class */function () {\n  function ADTTwinData(data) {\n    this.data = data;\n  }\n  ADTTwinData.prototype.hasNoData = function () {\n    return this.data === null || this.data === undefined;\n  };\n  return ADTTwinData;\n}();\nvar KeyValuePairAdapterData = /** @class */function () {\n  function KeyValuePairAdapterData(data) {\n    this.data = data;\n  }\n  KeyValuePairAdapterData.prototype.hasNoData = function () {\n    return this.data === null || this.data.length === 0 || !this.data.reduce(function (acc, curr) {\n      return acc || curr.value;\n    }, false);\n  };\n  return KeyValuePairAdapterData;\n}();\n\n/** Utility class which creates sandbox environment for adapter data fetching.\r\n *\r\n * • Manages errors and catasrophicErrors.\r\n *\r\n * • Safely fetches auth token and passes token to data fetching callback\r\n *\r\n * • Catches, classifies, and aggregates errors\r\n */\nvar AdapterMethodSandbox = /** @class */function () {\n  function AdapterMethodSandbox(authservice) {\n    this.errors = [];\n    this.catasrophicError = null;\n    this.authService = authservice;\n  }\n  /**\r\n   *  Pushes new ComponentError onto errors list.  If error is marked as catastrophic,\r\n   *  execution will halt with catastrophic error attached to result\r\n   */\n  AdapterMethodSandbox.prototype.pushError = function (_a) {\n    var rawError = _a.rawError,\n      message = _a.message,\n      type = _a.type,\n      isCatastrophic = _a.isCatastrophic;\n    var error = new ComponentError({\n      message: message,\n      type: type,\n      isCatastrophic: isCatastrophic,\n      rawError: rawError\n    });\n    this.errors.push(error);\n    if (error.isCatastrophic) {\n      this.catasrophicError = error;\n      throw error;\n    }\n  };\n  /**\r\n   * Fetch token wrapped in try / catch block.  If token fetch fails, will attach\r\n   * catastrophic TokenRetrievalFailed error, halting further execution.\r\n   */\n  AdapterMethodSandbox.prototype.safelyFetchToken = function (tokenFor) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // If adapterMethodSandbox not constructed with authService, skip token fetching\n            if (!this.authService) {\n              return [2 /*return*/, null];\n            }\n            token = '';\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.authService.getToken(tokenFor)];\n          case 2:\n            token = _a.sent();\n            if (!token && token !== '') {\n              throw new Error('Token undefined');\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _a.sent();\n            this.pushError({\n              isCatastrophic: true,\n              type: ComponentErrorType.TokenRetrievalFailed,\n              rawError: err_1\n            });\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/, token];\n        }\n      });\n    });\n  };\n  /**\r\n   * Wraps adapter data-fetching logic in sandbox which safely fetches an auth token and handles errors consistently.\r\n   *\r\n   * • Any operation that may throw in the callback passed to this method should be wrapped in additional try/catch\r\n   * blocks which push specific error info to the sandbox.\r\n   *\r\n   * • Errors marked isCatastrophic will halt adapter execution.\r\n   *\r\n   * • Uncaught errors will be treated as catastrophic errors with unknown types and will also halt adapter execution.\r\n   *  */\n  AdapterMethodSandbox.prototype.safelyFetchData = function (fetchDataWithToken, tokenFor) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, data, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this.safelyFetchToken(tokenFor)];\n          case 1:\n            token = _a.sent();\n            return [4 /*yield*/, fetchDataWithToken(token)];\n          case 2:\n            data = _a.sent();\n            return [2 /*return*/, new AdapterResult({\n              errorInfo: {\n                errors: this.errors,\n                catastrophicError: this.catasrophicError\n              },\n              result: data\n            })];\n          case 3:\n            err_2 = _a.sent();\n            // Uncaught errors are bubbled up and caught here.\n            if (!(err_2 instanceof ComponentError)) {\n              // Unknown error, construct new catastrophicError error\n              this.catasrophicError = new ComponentError({\n                isCatastrophic: true,\n                rawError: err_2,\n                type: ComponentErrorType.UnknownError\n              });\n              this.errors.unshift(this.catasrophicError);\n            } else if (!this.catasrophicError) {\n              // Uncaught ComponentError thrown explicitly (not pushed to sandbox).  Attach to catastrophicError.\n              this.catasrophicError = err_2;\n              this.errors.unshift(this.catasrophicError);\n            }\n            // Attach errorInfo, nullify result, and return AdapterResult.\n            return [2 /*return*/, new AdapterResult({\n              errorInfo: {\n                errors: this.errors,\n                catastrophicError: this.catasrophicError\n              },\n              result: null\n            })];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AdapterMethodSandbox.prototype.safelyFetchDataCancellableAxiosPromise = function (returnDataClass, axiosParams, dataTransformFunc, tokenFor) {\n    var _this = this;\n    var headers = axiosParams.headers,\n      restOfParams = __rest(axiosParams, [\"headers\"]);\n    var cancelTokenSource = axios.CancelToken.source();\n    var cancellablePromise = this.safelyFetchData(function (token) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var axiosData, err_3, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n              return [4 /*yield*/, axios(__assign(__assign({}, restOfParams), {\n                headers: __assign({\n                  'Content-Type': 'application/json',\n                  authorization: 'Bearer ' + token\n                }, headers),\n                cancelToken: cancelTokenSource.token\n              }))];\n            case 1:\n              axiosData = _a.sent();\n              return [3 /*break*/, 3];\n            case 2:\n              err_3 = _a.sent();\n              if (axios.isCancel(err_3)) {\n                this.pushError({\n                  type: ComponentErrorType.DataFetchFailed,\n                  isCatastrophic: false,\n                  rawError: err_3\n                });\n              } else {\n                this.pushError({\n                  type: ComponentErrorType.DataFetchFailed,\n                  isCatastrophic: true,\n                  rawError: err_3\n                });\n              }\n              return [3 /*break*/, 3];\n            case 3:\n              result = axiosData === null || axiosData === void 0 ? void 0 : axiosData.data;\n              return [2 /*return*/, new returnDataClass(dataTransformFunc ? dataTransformFunc(result) : result)];\n          }\n        });\n      });\n    }, tokenFor);\n    cancellablePromise.cancel = cancelTokenSource.cancel;\n    return cancellablePromise;\n  };\n  return AdapterMethodSandbox;\n}();\nvar HierarchyNode = /** @class */function () {\n  function HierarchyNode() {}\n  HierarchyNode.createNodesFromADTModels = function (models, nodeType, newlyAddedModelIds) {\n    if (nodeType === void 0) {\n      nodeType = HierarchyNodeType.Parent;\n    }\n    return models ? models.sort(function (a, b) {\n      var _a, _b;\n      return (((_a = a.displayName) === null || _a === void 0 ? void 0 : _a.en) || a.id).localeCompare(((_b = b.displayName) === null || _b === void 0 ? void 0 : _b.en) || b.id, undefined, {\n        numeric: true,\n        sensitivity: 'base'\n      });\n    }).reduce(function (p, c) {\n      var _a;\n      p[c.id] = __assign(__assign({\n        name: ((_a = c.displayName) === null || _a === void 0 ? void 0 : _a.en) || c.id,\n        id: c.id,\n        nodeData: c,\n        nodeType: nodeType\n      }, nodeType === HierarchyNodeType.Parent && {\n        children: {},\n        isCollapsed: true\n      }), {\n        isNewlyAdded: newlyAddedModelIds === null || newlyAddedModelIds === void 0 ? void 0 : newlyAddedModelIds.includes(c.id)\n      });\n      return p;\n    }, {}) : {};\n  };\n  HierarchyNode.createNodesFromADTTwins = function (twins, modelNode) {\n    return twins ? twins.sort(function (a, b) {\n      return a.$dtId.localeCompare(b.$dtId, undefined, {\n        numeric: true,\n        sensitivity: 'base'\n      });\n    }).reduce(function (p, c) {\n      p[c.$dtId] = {\n        name: c.$dtId,\n        id: c.$dtId,\n        parentNode: modelNode,\n        nodeData: c,\n        nodeType: HierarchyNodeType.Child\n      };\n      return p;\n    }, {}) : {};\n  };\n  return HierarchyNode;\n}();\nvar Asset = /** @class */function () {\n  function Asset(name) {\n    var _this = this;\n    this.getDoubleValue = function (minValue, maxValue) {\n      return function (currentValue) {\n        var direction = currentValue > maxValue ? -1 : currentValue < minValue ? 1 : Math.random() < 0.5 ? -1 : 1;\n        var step = direction * (Math.random() * (maxValue - minValue) * 0.02);\n        return currentValue += step;\n      };\n    };\n    this.getIntegerValue = function (minValue, maxValue) {\n      return function (currentValue) {\n        var direction = currentValue >= maxValue ? -1 : currentValue <= minValue ? 1 : Math.random() < 0.5 ? -1 : 1;\n        return currentValue += direction;\n      };\n    };\n    this.getBooleanValue = function (isTrueThreshold) {\n      return function (_currentValue) {\n        return Math.random() > isTrueThreshold;\n      };\n    };\n    this.getStringValue = function () {\n      return function (_currentValue) {\n        var fourDigitNumber = Math.floor(Math.random() * 1000);\n        return \"Box\" + fourDigitNumber;\n      };\n    };\n    this.properties = [];\n    this.relationships = [];\n    this.twins = [];\n    this.name = name;\n    switch (name) {\n      case 'RobotArm':\n        {\n          this.properties = [{\n            id: this.name,\n            propertyName: 'FailedPickupsLastHr',\n            currentValue: 1,\n            getNextValue: this.getIntegerValue(0, 5),\n            schema: 'integer'\n          }, {\n            id: this.name,\n            propertyName: 'PickupFailedAlert',\n            currentValue: false,\n            getNextValue: this.getBooleanValue(0.75),\n            schema: 'boolean'\n          }, {\n            id: this.name,\n            propertyName: 'PickupFailedBoxID',\n            currentValue: 'Box1',\n            getNextValue: this.getStringValue(),\n            schema: 'string'\n          }, {\n            id: this.name,\n            propertyName: 'HydraulicPressure',\n            currentValue: 20,\n            getNextValue: this.getDoubleValue(10, 100)\n          }];\n          [1, 2, 3, 4, 5, 6].forEach(function (idx) {\n            _this.twins.push({\n              name: \"Arm\" + idx,\n              properties: _this.getAssetProperties()\n            });\n          });\n          break;\n        }\n      case 'DistributionCenter':\n        {\n          this.relationships.push({\n            name: 'contains',\n            target: 'RobotArm'\n          });\n          this.twins.push({\n            name: 'DistCtr',\n            assetRelationships: [1, 2, 3, 4, 5, 6].map(function (idx) {\n              return {\n                name: 'contains',\n                target: \"Arm\" + idx,\n                targetModel: 'RobotArm'\n              };\n            }),\n            properties: []\n          });\n          break;\n        }\n      case 'Car':\n        {\n          this.properties = [{\n            id: this.name,\n            propertyName: 'Speed',\n            currentValue: Math.floor(Math.random() * 20) + 40,\n            getNextValue: this.getDoubleValue(0, 100)\n          }, {\n            id: this.name,\n            propertyName: 'OutdoorTemperature',\n            currentValue: Math.floor(Math.random()) + 40,\n            getNextValue: this.getDoubleValue(20, 80)\n          }, {\n            id: this.name,\n            propertyName: 'OilPressure',\n            currentValue: Math.floor(Math.random()) + 30,\n            getNextValue: this.getDoubleValue(28, 32)\n          }];\n          this.twins.push({\n            name: 'CarTwin',\n            properties: this.getAssetProperties()\n          });\n          break;\n        }\n      case 'Windmill':\n        {\n          this.properties = [{\n            id: this.name,\n            propertyName: 'OutdoorTemperature',\n            currentValue: Math.floor(Math.random() * 20) + 40,\n            getNextValue: this.getDoubleValue(0, 100)\n          }, {\n            id: this.name,\n            propertyName: 'AtmosphericPressure',\n            currentValue: Math.floor(Math.random()) + 30,\n            getNextValue: this.getDoubleValue(29, 31)\n          }, {\n            id: this.name,\n            propertyName: 'WindVelocity',\n            currentValue: Math.floor(Math.random() * 30),\n            getNextValue: this.getDoubleValue(0, 70)\n          }, {\n            id: this.name,\n            propertyName: 'BearingTemperature',\n            currentValue: Math.floor(Math.random() * 30) + 90,\n            getNextValue: this.getDoubleValue(90, 200)\n          }, {\n            id: this.name,\n            propertyName: 'OilViscosity',\n            currentValue: Math.floor(Math.random() * 5) + 10,\n            getNextValue: this.getDoubleValue(10, 80)\n          }];\n          this.twins.push({\n            name: 'Windmill_1',\n            properties: this.getAssetProperties()\n          });\n          break;\n        }\n      case 'HVACSystem':\n        {\n          this.properties = [{\n            id: this.name,\n            propertyName: 'FanSpeed',\n            currentValue: Math.floor(Math.random() * 20) + 40,\n            getNextValue: this.getDoubleValue(0, 100)\n          }, {\n            id: this.name,\n            propertyName: 'CoolerTemperature',\n            currentValue: Math.floor(Math.random()) + 40,\n            getNextValue: this.getDoubleValue(20, 60)\n          }, {\n            id: this.name,\n            propertyName: 'HeaterTemperature',\n            currentValue: Math.floor(Math.random()) + 50,\n            getNextValue: this.getDoubleValue(40, 100)\n          }];\n          this.twins.push({\n            name: 'HVACSystem_1',\n            properties: this.getAssetProperties()\n          });\n          break;\n        }\n      case 'PasteurizationMachine':\n        {\n          this.properties = [{\n            id: this.name,\n            propertyName: 'InFlow',\n            currentValue: Math.floor(Math.random() * 300) + 50,\n            getNextValue: this.getDoubleValue(50, 600)\n          }, {\n            id: this.name,\n            propertyName: 'OutFlow',\n            currentValue: Math.floor(Math.random() * 300) + 50,\n            getNextValue: this.getDoubleValue(50, 600)\n          }, {\n            id: this.name,\n            propertyName: 'Temperature',\n            currentValue: Math.floor(Math.random()) + 120,\n            getNextValue: this.getDoubleValue(110, 250)\n          }, {\n            id: this.name,\n            propertyName: 'PercentFull',\n            currentValue: Math.floor(Math.random()),\n            getNextValue: this.getDoubleValue(0, 1)\n          }];\n          this.relationships.push({\n            name: 'feeds',\n            target: 'SaltMachine'\n          });\n          this.twins.push({\n            name: 'PasteurizationMachine_A01',\n            assetRelationships: [{\n              name: 'feeds',\n              target: 'SaltMachine_C0',\n              targetModel: 'SaltMachine'\n            }],\n            properties: this.getAssetProperties()\n          });\n          this.twins.push({\n            name: 'PasteurizationMachine_A02',\n            assetRelationships: [{\n              name: 'feeds',\n              target: 'SaltMachine_C0',\n              targetModel: 'SaltMachine'\n            }],\n            properties: this.getAssetProperties()\n          });\n          this.twins.push({\n            name: 'PasteurizationMachine_A03',\n            assetRelationships: [{\n              name: 'feeds',\n              target: 'SaltMachine_C1',\n              targetModel: 'SaltMachine'\n            }],\n            properties: this.getAssetProperties()\n          });\n          this.twins.push({\n            name: 'PasteurizationMachine_A04',\n            assetRelationships: [{\n              name: 'feeds',\n              target: 'SaltMachine_C2',\n              targetModel: 'SaltMachine'\n            }],\n            properties: this.getAssetProperties()\n          });\n          break;\n        }\n      case 'SaltMachine':\n        {\n          this.properties = [{\n            id: this.name,\n            propertyName: 'InFlow',\n            currentValue: Math.floor(Math.random() * 300) + 50,\n            getNextValue: this.getDoubleValue(50, 600)\n          }, {\n            id: this.name,\n            propertyName: 'OutFlow',\n            currentValue: Math.floor(Math.random() * 300) + 50,\n            getNextValue: this.getDoubleValue(50, 600)\n          }];\n          this.twins.push({\n            name: 'SaltMachine_C0',\n            properties: this.getAssetProperties()\n          });\n          this.twins.push({\n            name: 'SaltMachine_C1',\n            properties: this.getAssetProperties()\n          });\n          this.twins.push({\n            name: 'SaltMachine_C2',\n            properties: this.getAssetProperties()\n          });\n          break;\n        }\n      case 'MaintenancePersonnel':\n        {\n          this.relationships.push({\n            name: 'maintains'\n          });\n          this.twins.push({\n            name: 'Xenia',\n            assetRelationships: [{\n              name: 'maintains',\n              target: 'SaltMachine_C0',\n              targetModel: 'SaltMachine'\n            }, {\n              name: 'maintains',\n              target: 'SaltMachine_C1',\n              targetModel: 'SaltMachine'\n            }],\n            properties: []\n          });\n          this.twins.push({\n            name: 'Amy',\n            assetRelationships: [{\n              name: 'maintains',\n              target: 'SaltMachine_C1',\n              targetModel: 'SaltMachine'\n            }, {\n              name: 'maintains',\n              target: 'PasteurizationMachine_A01',\n              targetModel: 'PasteurizationMachine'\n            }],\n            properties: []\n          });\n          this.twins.push({\n            name: 'John',\n            assetRelationships: [{\n              name: 'maintains',\n              target: 'PasteurizationMachine_A02',\n              targetModel: 'PasteurizationMachine'\n            }, {\n              name: 'maintains',\n              target: 'PasteurizationMachine_A03',\n              targetModel: 'PasteurizationMachine'\n            }],\n            properties: []\n          });\n          this.twins.push({\n            name: 'Phillip',\n            assetRelationships: [{\n              name: 'maintains',\n              target: 'SaltMachine_C2',\n              targetModel: 'SaltMachine'\n            }, {\n              name: 'maintains',\n              target: 'PasteurizationMachine_A04',\n              targetModel: 'PasteurizationMachine'\n            }],\n            properties: []\n          });\n          break;\n        }\n      case 'Factory':\n        {\n          this.relationships.push({\n            name: 'contains'\n          });\n          this.relationships.push({\n            name: 'employs',\n            target: 'MaintenancePersonnel'\n          });\n          this.twins.push({\n            name: 'OsloFactory',\n            assetRelationships: [{\n              name: 'contains',\n              target: 'SaltMachine_C0',\n              targetModel: 'SaltMachine'\n            }, {\n              name: 'contains',\n              target: 'SaltMachine_C1',\n              targetModel: 'SaltMachine'\n            }, {\n              name: 'contains',\n              target: 'PasteurizationMachine_A01',\n              targetModel: 'PasteurizationMachine'\n            }, {\n              name: 'contains',\n              target: 'PasteurizationMachine_A02',\n              targetModel: 'PasteurizationMachine'\n            }, {\n              name: 'contains',\n              target: 'PasteurizationMachine_A03',\n              targetModel: 'PasteurizationMachine'\n            }, {\n              name: 'employs',\n              target: 'Amy',\n              targetModel: 'MaintenancePersonnel'\n            }, {\n              name: 'employs',\n              target: 'John',\n              targetModel: 'MaintenancePersonnel'\n            }, {\n              name: 'employs',\n              target: 'Xenia',\n              targetModel: 'MaintenancePersonnel'\n            }],\n            properties: []\n          });\n          this.twins.push({\n            name: 'StockholmFactory',\n            assetRelationships: [{\n              name: 'contains',\n              target: 'SaltMachine_C2',\n              targetModel: 'SaltMachine'\n            }, {\n              name: 'contains',\n              target: 'PasteurizationMachine_A04',\n              targetModel: 'PasteurizationMachine'\n            }, {\n              name: 'employs',\n              target: 'Phillip',\n              targetModel: 'MaintenancePersonnel'\n            }],\n            properties: []\n          });\n          break;\n        }\n      case 'Country':\n        {\n          this.relationships.push({\n            name: 'contains',\n            target: 'Factory'\n          });\n          this.twins.push({\n            name: 'Norway',\n            assetRelationships: [{\n              name: 'contains',\n              target: 'OsloFactory',\n              targetModel: 'Factory'\n            }],\n            properties: []\n          });\n          this.twins.push({\n            name: 'Sweden',\n            assetRelationships: [{\n              name: 'contains',\n              target: 'StockholmFactory',\n              targetModel: 'Factory'\n            }],\n            properties: []\n          });\n          break;\n        }\n    }\n  }\n  Asset.prototype.getAssetProperties = function () {\n    var assetProperties = [];\n    this.properties.forEach(function (property) {\n      assetProperties.push(new AssetProperty(property));\n    });\n    return assetProperties;\n  };\n  return Asset;\n}();\nvar AssetProperty = /** @class */function () {\n  function AssetProperty(_a) {\n    var id = _a.id,\n      propertyName = _a.propertyName,\n      currentValue = _a.currentValue,\n      getNextValue = _a.getNextValue,\n      _b = _a.schema,\n      schema = _b === void 0 ? 'double' : _b;\n    this.id = id;\n    this.propertyName = propertyName;\n    this.currentValue = currentValue;\n    this.getNextValue = getNextValue;\n    this.schema = schema;\n  }\n  AssetProperty.prototype.tick = function () {\n    this.currentValue = this.getNextValue(this.currentValue);\n    var event = {\n      op: 'replace',\n      path: \"/\" + this.propertyName,\n      value: this.currentValue\n    };\n    return event;\n  };\n  return AssetProperty;\n}();\nvar modelTwinsRelationshipsData = {\n  versionNumber: 1\n};\nvar AssetSimulation = /** @class */function () {\n  function AssetSimulation(seedTimeMillis, intervalMillis, simulationType) {\n    this.assets = [];\n    this.seedTimeMillis = seedTimeMillis;\n    this.intervalMillis = intervalMillis;\n    if (simulationType === AdtPusherSimulationType.DairyProduction) {\n      this.assets.push(new Asset('PasteurizationMachine'));\n      this.assets.push(new Asset('SaltMachine'));\n      this.assets.push(new Asset('MaintenancePersonnel'));\n      this.assets.push(new Asset('Factory'));\n      this.assets.push(new Asset('Country'));\n    } else if (simulationType === AdtPusherSimulationType.RobotArms) {\n      this.assets.push(new Asset('RobotArm'));\n      this.assets.push(new Asset('DistributionCenter'));\n    }\n  }\n  AssetSimulation.prototype.generateTwinId = function (name) {\n    return name + \"Twin\";\n  };\n  AssetSimulation.prototype.generateModelId = function (name) {\n    return \"dtmi:assetGen:\" + name + \";\" + modelTwinsRelationshipsData.versionNumber;\n  };\n  AssetSimulation.prototype.tick = function () {\n    this.seedTimeMillis += this.intervalMillis;\n    var events = [];\n    this.assets.forEach(function (asset) {\n      asset.twins.forEach(function (twin) {\n        var updateTwin = {\n          dtId: twin.name,\n          patchJSON: twin.properties.map(function (d) {\n            return d.tick();\n          })\n        };\n        events.push(updateTwin);\n      });\n    });\n    return events;\n  };\n  AssetSimulation.prototype.generateDTModels = function (download) {\n    var _this = this;\n    if (download === void 0) {\n      download = false;\n    }\n    var dtdlModels = this.assets.map(function (asset) {\n      var propertyContents = asset.properties.map(function (property) {\n        return {\n          '@type': 'Property',\n          name: property.propertyName,\n          schema: property.schema || 'double'\n        };\n      });\n      var relationshipContents = asset.relationships.map(function (assetRelationship) {\n        var relationship = {\n          '@type': 'Relationship',\n          name: assetRelationship.name,\n          properties: [{\n            '@type': 'Property',\n            name: 'targetModel',\n            schema: 'string'\n          }]\n        };\n        if (assetRelationship.target) {\n          relationship.target = _this.generateModelId(assetRelationship.target);\n        }\n        return relationship;\n      });\n      var model = {\n        '@id': _this.generateModelId(asset.name),\n        '@type': 'Interface',\n        '@context': 'dtmi:dtdl:context;2',\n        displayName: asset.name,\n        contents: __spreadArray(__spreadArray([], propertyContents), relationshipContents)\n      };\n      return model;\n    });\n    if (download) {\n      downloadJSON(JSON.stringify(dtdlModels), 'DT_Models.json');\n    }\n    return dtdlModels;\n  };\n  AssetSimulation.prototype.generateDTwins = function (download) {\n    if (download === void 0) {\n      download = false;\n    }\n    var twins = [];\n    this.assets.forEach(function (asset) {\n      asset.twins.forEach(function (assetTwin) {\n        var twin = {\n          $dtId: assetTwin.name,\n          $metadata: {\n            $model: \"dtmi:assetGen:\" + asset.name + \";\" + modelTwinsRelationshipsData.versionNumber\n          }\n        };\n        asset.properties.forEach(function (property) {\n          twin[\"\" + property.propertyName] = property.currentValue;\n        });\n        twins.push(twin);\n      });\n    });\n    if (download) {\n      downloadJSON(JSON.stringify(twins), 'DT_Twins.json');\n    }\n    return twins;\n  };\n  AssetSimulation.prototype.generateTwinRelationships = function () {\n    var relationships = [];\n    this.assets.forEach(function (asset) {\n      asset === null || asset === void 0 ? void 0 : asset.twins.forEach(function (twin) {\n        var _a;\n        (_a = twin.assetRelationships) === null || _a === void 0 ? void 0 : _a.forEach(function (relationship, relationshipIndex) {\n          relationships.push({\n            $relId: twin.name + \"_\" + relationship.name + \"_Relationship\" + relationshipIndex,\n            $dtId: twin.name,\n            $name: relationship.name,\n            $targetId: relationship.target ? relationship.target : '',\n            targetModel: relationship.targetModel ? relationship.targetModel : ''\n          });\n        });\n      });\n    });\n    return relationships;\n  };\n  return AssetSimulation;\n}();\nexport { ADTAdapterModelsData as A, HierarchyNode as H, KeyValuePairAdapterData as K, ADTAdapterTwinsData as a, ADTModelData as b, ADTRelationshipsData as c, ADTRelationshipData as d, ADTTwinData as e, AdapterMethodSandbox as f, AssetSimulation as g, ADTAdapterSearchByQueryData as h, ADTAdapterPatchData as i, ADTTwinToModelMappingData as j, ADTAllModelsData as k };","map":{"version":3,"sources":["../../src/Models/Classes/AdapterDataClasses/ADTAdapterData.ts","../../src/Models/Classes/AdapterDataClasses/ADTModelData.ts","../../src/Models/Classes/AdapterDataClasses/ADTRelationshipsData.ts","../../src/Models/Classes/AdapterDataClasses/ADTTwinData.ts","../../src/Models/Classes/AdapterDataClasses/KeyValuePairAdapterData.ts","../../src/Models/Classes/AdapterMethodSandbox.ts","../../src/Models/Classes/HierarchyNode.ts","../../src/Models/Classes/Simulations/Asset.ts","../../src/Models/Classes/Simulations/AssetSimulation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IAdapterData } from '../../Constants/Interfaces';\nimport { ADTModelsApiData, ADTTwinsApiData } from '../../Constants/Types';\nimport { DtdlInterface } from '../../Constants/dtdlInterfaces';\n\nexport class ADTAdapterModelsData implements IAdapterData {\n    data: ADTModelsApiData;\n\n    constructor(data: ADTModelsApiData) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return (\n            this.data === undefined ||\n            this.data === null ||\n            this.data.value?.length === 0\n        );\n    }\n}\n\nexport class ADTAdapterTwinsData implements IAdapterData {\n    data: ADTTwinsApiData;\n\n    constructor(data: ADTTwinsApiData) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return (\n            this.data === undefined ||\n            this.data === null ||\n            this.data.value.length === 0\n        );\n    }\n}\n\nexport class ADTAdapterSearchByQueryData implements IAdapterData {\n    data: ADTTwinsApiData;\n\n    constructor(data: ADTTwinsApiData) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return (\n            this.data === undefined ||\n            this.data === null ||\n            this.data.value.length === 0\n        );\n    }\n}\n\ninterface IADTAdapterExpandedModelData {\n    rootModel: DtdlInterface;\n    expandedModels: DtdlInterface[];\n}\n\nexport class ADTAdapterExpandedModelData implements IAdapterData {\n    data: IADTAdapterExpandedModelData;\n\n    constructor(data: IADTAdapterExpandedModelData) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return this.data === null || this.data === undefined;\n    }\n}\n\nexport class ADTAdapterPatchData implements IAdapterData {\n    data: any;\n\n    constructor(data: any) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return this.data === null || this.data === undefined;\n    }\n}\n","import { ModelDict } from 'azure-iot-dtdl-parser';\nimport { DtdlInterface } from '../../Constants';\nimport { IAdapterData, IADTModel } from '../../Constants/Interfaces';\n\nclass ADTModelData implements IAdapterData {\n    data: IADTModel;\n\n    constructor(data: IADTModel) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return this.data === null || this.data === undefined;\n    }\n}\n\nexport class ADTAllModelsData implements IAdapterData {\n    data: {\n        rawModels: DtdlInterface[];\n        parsedModels: ModelDict;\n    };\n\n    constructor(data: { rawModels: DtdlInterface[]; parsedModels: ModelDict }) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return !this.data?.parsedModels || !this.data?.rawModels;\n    }\n}\n\nexport class ADTTwinToModelMappingData implements IAdapterData {\n    data: {\n        twinId: string;\n        modelId: string;\n    };\n\n    constructor(data: { twinId: string; modelId: string }) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return !this.data?.twinId || !this.data?.modelId;\n    }\n}\n\nexport default ADTModelData;\n","import { IAdapterData, IADTRelationship } from '../../Constants/Interfaces';\nimport { ADTRelationship } from '../../Constants/Types';\n\nclass ADTRelationshipsData implements IAdapterData {\n    data: ADTRelationship[];\n\n    constructor(data: ADTRelationship[]) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return this.data === null || this.data.length === 0;\n    }\n}\n\nclass ADTRelationshipData implements IAdapterData {\n    data: IADTRelationship;\n\n    constructor(data: IADTRelationship) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return this.data === null || this.data.length === 0;\n    }\n}\n\nexport { ADTRelationshipsData, ADTRelationshipData };\n","import { IAdapterData, IADTTwin } from '../../Constants/Interfaces';\n\nclass ADTTwinData implements IAdapterData {\n    data: IADTTwin;\n\n    constructor(data: IADTTwin) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return this.data === null || this.data === undefined;\n    }\n}\n\nexport default ADTTwinData;\n","import { IAdapterData } from '../../Constants/Interfaces';\nimport { KeyValuePairData } from '../../Constants/Types';\n\nclass KeyValuePairAdapterData implements IAdapterData {\n    data: Array<KeyValuePairData>;\n\n    constructor(data: Array<KeyValuePairData>) {\n        this.data = data;\n    }\n\n    hasNoData() {\n        return (\n            this.data === null ||\n            this.data.length === 0 ||\n            !this.data.reduce((acc, curr) => {\n                return acc || curr.value;\n            }, false)\n        );\n    }\n}\n\nexport default KeyValuePairAdapterData;\n","import axios from 'axios';\nimport {\n    IComponentError,\n    ComponentErrorType,\n    AxiosParams,\n    IAdapterData,\n    IAuthService,\n    ICancellablePromise\n} from '../Constants';\nimport AdapterResult from './AdapterResult';\nimport { ComponentError } from './Errors';\n\n/** Utility class which creates sandbox environment for adapter data fetching.\n *\n * • Manages errors and catasrophicErrors.\n *\n * • Safely fetches auth token and passes token to data fetching callback\n *\n * • Catches, classifies, and aggregates errors\n */\nclass AdapterMethodSandbox {\n    private errors: IComponentError[];\n    private catasrophicError: IComponentError;\n    private authService: IAuthService;\n\n    constructor(authservice?: IAuthService) {\n        this.errors = [];\n        this.catasrophicError = null;\n        this.authService = authservice;\n    }\n\n    /**\n     *  Pushes new ComponentError onto errors list.  If error is marked as catastrophic,\n     *  execution will halt with catastrophic error attached to result\n     */\n    pushError({ rawError, message, type, isCatastrophic }: IComponentError) {\n        const error = new ComponentError({\n            message,\n            type,\n            isCatastrophic,\n            rawError\n        });\n\n        this.errors.push(error);\n\n        if (error.isCatastrophic) {\n            this.catasrophicError = error;\n            throw error;\n        }\n    }\n\n    /**\n     * Fetch token wrapped in try / catch block.  If token fetch fails, will attach\n     * catastrophic TokenRetrievalFailed error, halting further execution.\n     */\n    private async safelyFetchToken(\n        tokenFor?: 'azureManagement' | 'adx' | 'storage'\n    ) {\n        // If adapterMethodSandbox not constructed with authService, skip token fetching\n        if (!this.authService) {\n            return null;\n        }\n\n        let token = '';\n        try {\n            token = await this.authService.getToken(tokenFor);\n            if (!token && token !== '') {\n                throw new Error('Token undefined');\n            }\n        } catch (err) {\n            this.pushError({\n                isCatastrophic: true,\n                type: ComponentErrorType.TokenRetrievalFailed,\n                rawError: err\n            });\n        }\n        return token;\n    }\n\n    /**\n     * Wraps adapter data-fetching logic in sandbox which safely fetches an auth token and handles errors consistently.\n     *\n     * • Any operation that may throw in the callback passed to this method should be wrapped in additional try/catch\n     * blocks which push specific error info to the sandbox.\n     *\n     * • Errors marked isCatastrophic will halt adapter execution.\n     *\n     * • Uncaught errors will be treated as catastrophic errors with unknown types and will also halt adapter execution.\n     *  */\n    async safelyFetchData<T extends IAdapterData>(\n        fetchDataWithToken: (token?: string) => Promise<T>,\n        tokenFor?: 'azureManagement' | 'adx' | 'storage'\n    ) {\n        try {\n            // Fetch token\n            const token = await this.safelyFetchToken(tokenFor);\n            // Execute data fetching callback\n            const data = await fetchDataWithToken(token);\n\n            return new AdapterResult<T>({\n                errorInfo: {\n                    errors: this.errors,\n                    catastrophicError: this.catasrophicError\n                },\n                result: data\n            });\n        } catch (err) {\n            // Uncaught errors are bubbled up and caught here.\n            if (!(err instanceof ComponentError)) {\n                // Unknown error, construct new catastrophicError error\n                this.catasrophicError = new ComponentError({\n                    isCatastrophic: true,\n                    rawError: err,\n                    type: ComponentErrorType.UnknownError\n                });\n\n                this.errors.unshift(this.catasrophicError);\n            } else if (!this.catasrophicError) {\n                // Uncaught ComponentError thrown explicitly (not pushed to sandbox).  Attach to catastrophicError.\n                this.catasrophicError = err;\n                this.errors.unshift(this.catasrophicError);\n            }\n            // Attach errorInfo, nullify result, and return AdapterResult.\n            return new AdapterResult<T>({\n                errorInfo: {\n                    errors: this.errors,\n                    catastrophicError: this.catasrophicError\n                },\n                result: null\n            });\n        }\n    }\n\n    safelyFetchDataCancellableAxiosPromise(\n        returnDataClass: { new (data: any) },\n        axiosParams: AxiosParams,\n        dataTransformFunc?: (data) => any,\n        tokenFor?: 'azureManagement' | 'adx' | 'storage'\n    ): ICancellablePromise<AdapterResult<any>> {\n        const { headers, ...restOfParams } = axiosParams;\n        const cancelTokenSource = axios.CancelToken.source();\n\n        const cancellablePromise = this.safelyFetchData(async (token) => {\n            let axiosData;\n            try {\n                axiosData = await axios({\n                    ...restOfParams,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        authorization: 'Bearer ' + token,\n                        ...headers\n                    },\n                    cancelToken: cancelTokenSource.token\n                });\n            } catch (err) {\n                if (axios.isCancel(err)) {\n                    this.pushError({\n                        type: ComponentErrorType.DataFetchFailed,\n                        isCatastrophic: false,\n                        rawError: err\n                    });\n                } else {\n                    this.pushError({\n                        type: ComponentErrorType.DataFetchFailed,\n                        isCatastrophic: true,\n                        rawError: err\n                    });\n                }\n            }\n            const result = axiosData?.data;\n            return new returnDataClass(\n                dataTransformFunc ? dataTransformFunc(result) : result\n            );\n        }, tokenFor) as ICancellablePromise<AdapterResult<any>>;\n        cancellablePromise.cancel = cancelTokenSource.cancel;\n        return cancellablePromise;\n    }\n}\n\nexport default AdapterMethodSandbox;\n","import { HierarchyNodeType } from '../Constants';\nimport { IADTModel, IADTTwin, IHierarchyNode } from '../Constants/Interfaces';\n\nexport class HierarchyNode implements IHierarchyNode {\n    name: string;\n    id: string;\n    parentNode?: IHierarchyNode;\n    nodeData: any;\n    nodeType: HierarchyNodeType;\n    children?: Record<string, IHierarchyNode>;\n    childrenContinuationToken?: string;\n    onNodeClick?: (node?: IHierarchyNode) => void;\n    isCollapsed?: boolean;\n    isSelected?: boolean;\n    isLoading?: boolean;\n\n    public static createNodesFromADTModels = (\n        models: Array<IADTModel>,\n        nodeType: HierarchyNodeType = HierarchyNodeType.Parent,\n        newlyAddedModelIds?: Array<string>\n    ): Record<string, IHierarchyNode> | Record<string, never> => {\n        return models\n            ? models\n                  .sort((a, b) =>\n                      (a.displayName?.en || a.id).localeCompare(\n                          b.displayName?.en || b.id,\n                          undefined,\n                          {\n                              numeric: true,\n                              sensitivity: 'base'\n                          }\n                      )\n                  )\n                  .reduce((p, c: IADTModel) => {\n                      p[c.id] = {\n                          name: c.displayName?.en || c.id,\n                          id: c.id,\n                          nodeData: c,\n                          nodeType,\n                          ...(nodeType === HierarchyNodeType.Parent && {\n                              children: {},\n                              isCollapsed: true\n                          }),\n                          isNewlyAdded: newlyAddedModelIds?.includes(c.id)\n                      } as IHierarchyNode;\n                      return p;\n                  }, {})\n            : {};\n    };\n\n    public static createNodesFromADTTwins = (\n        twins: Array<IADTTwin>,\n        modelNode: IHierarchyNode\n    ): Record<string, IHierarchyNode> | Record<string, never> => {\n        return twins\n            ? twins\n                  .sort((a, b) =>\n                      a.$dtId.localeCompare(b.$dtId, undefined, {\n                          numeric: true,\n                          sensitivity: 'base'\n                      })\n                  )\n                  .reduce((p, c: IADTTwin) => {\n                      p[c.$dtId] = {\n                          name: c.$dtId,\n                          id: c.$dtId,\n                          parentNode: modelNode,\n                          nodeData: c,\n                          nodeType: HierarchyNodeType.Child\n                      } as IHierarchyNode;\n                      return p;\n                  }, {})\n            : {};\n    };\n}\n","import {\n    AssetRelationship,\n    AssetTwin,\n    ADTPatch,\n    IAssetProperty\n} from '../../Constants';\n\nexport class Asset {\n    public name: string;\n    public relationships: Array<AssetRelationship>;\n    public twins: Array<AssetTwin>;\n    public properties: Array<IAssetProperty<any>>;\n\n    public getDoubleValue = (minValue: number, maxValue: number) => {\n        return (currentValue: number) => {\n            const direction =\n                currentValue > maxValue\n                    ? -1\n                    : currentValue < minValue\n                    ? 1\n                    : Math.random() < 0.5\n                    ? -1\n                    : 1;\n            const step =\n                direction * (Math.random() * (maxValue - minValue) * 0.02);\n            return (currentValue += step);\n        };\n    };\n\n    public getIntegerValue = (minValue: number, maxValue: number) => {\n        return (currentValue: number) => {\n            const direction =\n                currentValue >= maxValue\n                    ? -1\n                    : currentValue <= minValue\n                    ? 1\n                    : Math.random() < 0.5\n                    ? -1\n                    : 1;\n            return (currentValue += direction);\n        };\n    };\n\n    public getBooleanValue = (isTrueThreshold: number) => {\n        return (_currentValue: boolean) => {\n            return Math.random() > isTrueThreshold;\n        };\n    };\n\n    public getStringValue = () => {\n        return (_currentValue: boolean) => {\n            const fourDigitNumber = Math.floor(Math.random() * 1000);\n            return `Box${fourDigitNumber}`;\n        };\n    };\n\n    private getAssetProperties() {\n        const assetProperties = [];\n        this.properties.forEach((property) => {\n            assetProperties.push(new AssetProperty(property));\n        });\n        return assetProperties;\n    }\n\n    constructor(name: string) {\n        this.properties = [];\n        this.relationships = [];\n        this.twins = [];\n        this.name = name;\n\n        switch (name) {\n            case 'RobotArm': {\n                this.properties = [\n                    {\n                        id: this.name,\n                        propertyName: 'FailedPickupsLastHr',\n                        currentValue: 1,\n                        getNextValue: this.getIntegerValue(0, 5),\n                        schema: 'integer'\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'PickupFailedAlert',\n                        currentValue: false,\n                        getNextValue: this.getBooleanValue(0.75),\n                        schema: 'boolean'\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'PickupFailedBoxID',\n                        currentValue: 'Box1',\n                        getNextValue: this.getStringValue(),\n                        schema: 'string'\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'HydraulicPressure',\n                        currentValue: 20,\n                        getNextValue: this.getDoubleValue(10, 100)\n                    }\n                ];\n                [1, 2, 3, 4, 5, 6].forEach((idx) => {\n                    this.twins.push({\n                        name: `Arm${idx}`,\n                        properties: this.getAssetProperties()\n                    });\n                });\n                break;\n            }\n            case 'DistributionCenter': {\n                this.relationships.push({\n                    name: 'contains',\n                    target: 'RobotArm'\n                });\n                this.twins.push({\n                    name: 'DistCtr',\n                    assetRelationships: [1, 2, 3, 4, 5, 6].map((idx) => {\n                        return {\n                            name: 'contains',\n                            target: `Arm${idx}`,\n                            targetModel: 'RobotArm'\n                        };\n                    }),\n                    properties: []\n                });\n                break;\n            }\n            case 'Car': {\n                this.properties = [\n                    {\n                        id: this.name,\n                        propertyName: 'Speed',\n                        currentValue: Math.floor(Math.random() * 20) + 40,\n                        getNextValue: this.getDoubleValue(0, 100)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'OutdoorTemperature',\n                        currentValue: Math.floor(Math.random()) + 40,\n                        getNextValue: this.getDoubleValue(20, 80)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'OilPressure',\n                        currentValue: Math.floor(Math.random()) + 30,\n                        getNextValue: this.getDoubleValue(28, 32)\n                    }\n                ];\n                this.twins.push({\n                    name: 'CarTwin',\n                    properties: this.getAssetProperties()\n                });\n                break;\n            }\n            case 'Windmill': {\n                this.properties = [\n                    {\n                        id: this.name,\n                        propertyName: 'OutdoorTemperature',\n                        currentValue: Math.floor(Math.random() * 20) + 40,\n                        getNextValue: this.getDoubleValue(0, 100)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'AtmosphericPressure',\n                        currentValue: Math.floor(Math.random()) + 30,\n                        getNextValue: this.getDoubleValue(29, 31)\n                    },\n\n                    {\n                        id: this.name,\n                        propertyName: 'WindVelocity',\n                        currentValue: Math.floor(Math.random() * 30),\n                        getNextValue: this.getDoubleValue(0, 70)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'BearingTemperature',\n                        currentValue: Math.floor(Math.random() * 30) + 90,\n                        getNextValue: this.getDoubleValue(90, 200)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'OilViscosity',\n                        currentValue: Math.floor(Math.random() * 5) + 10,\n                        getNextValue: this.getDoubleValue(10, 80)\n                    }\n                ];\n\n                this.twins.push({\n                    name: 'Windmill_1',\n                    properties: this.getAssetProperties()\n                });\n                break;\n            }\n            case 'HVACSystem': {\n                this.properties = [\n                    {\n                        id: this.name,\n                        propertyName: 'FanSpeed',\n                        currentValue: Math.floor(Math.random() * 20) + 40,\n                        getNextValue: this.getDoubleValue(0, 100)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'CoolerTemperature',\n                        currentValue: Math.floor(Math.random()) + 40,\n                        getNextValue: this.getDoubleValue(20, 60)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'HeaterTemperature',\n                        currentValue: Math.floor(Math.random()) + 50,\n                        getNextValue: this.getDoubleValue(40, 100)\n                    }\n                ];\n\n                this.twins.push({\n                    name: 'HVACSystem_1',\n                    properties: this.getAssetProperties()\n                });\n                break;\n            }\n            case 'PasteurizationMachine': {\n                this.properties = [\n                    {\n                        id: this.name,\n                        propertyName: 'InFlow',\n                        currentValue: Math.floor(Math.random() * 300) + 50,\n                        getNextValue: this.getDoubleValue(50, 600)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'OutFlow',\n                        currentValue: Math.floor(Math.random() * 300) + 50,\n                        getNextValue: this.getDoubleValue(50, 600)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'Temperature',\n                        currentValue: Math.floor(Math.random()) + 120,\n                        getNextValue: this.getDoubleValue(110, 250)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'PercentFull',\n                        currentValue: Math.floor(Math.random()),\n                        getNextValue: this.getDoubleValue(0, 1)\n                    }\n                ];\n\n                this.relationships.push({\n                    name: 'feeds',\n                    target: 'SaltMachine'\n                });\n\n                this.twins.push({\n                    name: 'PasteurizationMachine_A01',\n                    assetRelationships: [\n                        {\n                            name: 'feeds',\n                            target: 'SaltMachine_C0',\n                            targetModel: 'SaltMachine'\n                        }\n                    ],\n                    properties: this.getAssetProperties()\n                });\n                this.twins.push({\n                    name: 'PasteurizationMachine_A02',\n                    assetRelationships: [\n                        {\n                            name: 'feeds',\n                            target: 'SaltMachine_C0',\n                            targetModel: 'SaltMachine'\n                        }\n                    ],\n                    properties: this.getAssetProperties()\n                });\n                this.twins.push({\n                    name: 'PasteurizationMachine_A03',\n                    assetRelationships: [\n                        {\n                            name: 'feeds',\n                            target: 'SaltMachine_C1',\n                            targetModel: 'SaltMachine'\n                        }\n                    ],\n                    properties: this.getAssetProperties()\n                });\n                this.twins.push({\n                    name: 'PasteurizationMachine_A04',\n                    assetRelationships: [\n                        {\n                            name: 'feeds',\n                            target: 'SaltMachine_C2',\n                            targetModel: 'SaltMachine'\n                        }\n                    ],\n                    properties: this.getAssetProperties()\n                });\n                break;\n            }\n            case 'SaltMachine': {\n                this.properties = [\n                    {\n                        id: this.name,\n                        propertyName: 'InFlow',\n                        currentValue: Math.floor(Math.random() * 300) + 50,\n                        getNextValue: this.getDoubleValue(50, 600)\n                    },\n                    {\n                        id: this.name,\n                        propertyName: 'OutFlow',\n                        currentValue: Math.floor(Math.random() * 300) + 50,\n                        getNextValue: this.getDoubleValue(50, 600)\n                    }\n                ];\n\n                this.twins.push({\n                    name: 'SaltMachine_C0',\n                    properties: this.getAssetProperties()\n                });\n                this.twins.push({\n                    name: 'SaltMachine_C1',\n                    properties: this.getAssetProperties()\n                });\n                this.twins.push({\n                    name: 'SaltMachine_C2',\n                    properties: this.getAssetProperties()\n                });\n                break;\n            }\n            case 'MaintenancePersonnel': {\n                this.relationships.push({ name: 'maintains' });\n\n                this.twins.push({\n                    name: 'Xenia',\n                    assetRelationships: [\n                        {\n                            name: 'maintains',\n                            target: 'SaltMachine_C0',\n                            targetModel: 'SaltMachine'\n                        },\n                        {\n                            name: 'maintains',\n                            target: 'SaltMachine_C1',\n                            targetModel: 'SaltMachine'\n                        }\n                    ],\n                    properties: []\n                });\n\n                this.twins.push({\n                    name: 'Amy',\n                    assetRelationships: [\n                        {\n                            name: 'maintains',\n                            target: 'SaltMachine_C1',\n                            targetModel: 'SaltMachine'\n                        },\n                        {\n                            name: 'maintains',\n                            target: 'PasteurizationMachine_A01',\n                            targetModel: 'PasteurizationMachine'\n                        }\n                    ],\n                    properties: []\n                });\n\n                this.twins.push({\n                    name: 'John',\n                    assetRelationships: [\n                        {\n                            name: 'maintains',\n                            target: 'PasteurizationMachine_A02',\n                            targetModel: 'PasteurizationMachine'\n                        },\n                        {\n                            name: 'maintains',\n                            target: 'PasteurizationMachine_A03',\n                            targetModel: 'PasteurizationMachine'\n                        }\n                    ],\n                    properties: []\n                });\n\n                this.twins.push({\n                    name: 'Phillip',\n                    assetRelationships: [\n                        {\n                            name: 'maintains',\n                            target: 'SaltMachine_C2',\n                            targetModel: 'SaltMachine'\n                        },\n                        {\n                            name: 'maintains',\n                            target: 'PasteurizationMachine_A04',\n                            targetModel: 'PasteurizationMachine'\n                        }\n                    ],\n                    properties: []\n                });\n\n                break;\n            }\n            case 'Factory': {\n                this.relationships.push({ name: 'contains' });\n                this.relationships.push({\n                    name: 'employs',\n                    target: 'MaintenancePersonnel'\n                });\n\n                this.twins.push({\n                    name: 'OsloFactory',\n                    assetRelationships: [\n                        {\n                            name: 'contains',\n                            target: 'SaltMachine_C0',\n                            targetModel: 'SaltMachine'\n                        },\n                        {\n                            name: 'contains',\n                            target: 'SaltMachine_C1',\n                            targetModel: 'SaltMachine'\n                        },\n                        {\n                            name: 'contains',\n                            target: 'PasteurizationMachine_A01',\n                            targetModel: 'PasteurizationMachine'\n                        },\n                        {\n                            name: 'contains',\n                            target: 'PasteurizationMachine_A02',\n                            targetModel: 'PasteurizationMachine'\n                        },\n                        {\n                            name: 'contains',\n                            target: 'PasteurizationMachine_A03',\n                            targetModel: 'PasteurizationMachine'\n                        },\n                        {\n                            name: 'employs',\n                            target: 'Amy',\n                            targetModel: 'MaintenancePersonnel'\n                        },\n                        {\n                            name: 'employs',\n                            target: 'John',\n                            targetModel: 'MaintenancePersonnel'\n                        },\n                        {\n                            name: 'employs',\n                            target: 'Xenia',\n                            targetModel: 'MaintenancePersonnel'\n                        }\n                    ],\n                    properties: []\n                });\n\n                this.twins.push({\n                    name: 'StockholmFactory',\n                    assetRelationships: [\n                        {\n                            name: 'contains',\n                            target: 'SaltMachine_C2',\n                            targetModel: 'SaltMachine'\n                        },\n                        {\n                            name: 'contains',\n                            target: 'PasteurizationMachine_A04',\n                            targetModel: 'PasteurizationMachine'\n                        },\n                        {\n                            name: 'employs',\n                            target: 'Phillip',\n                            targetModel: 'MaintenancePersonnel'\n                        }\n                    ],\n                    properties: []\n                });\n\n                break;\n            }\n            case 'Country': {\n                this.relationships.push({\n                    name: 'contains',\n                    target: 'Factory'\n                });\n                this.twins.push({\n                    name: 'Norway',\n                    assetRelationships: [\n                        {\n                            name: 'contains',\n                            target: 'OsloFactory',\n                            targetModel: 'Factory'\n                        }\n                    ],\n                    properties: []\n                });\n                this.twins.push({\n                    name: 'Sweden',\n                    assetRelationships: [\n                        {\n                            name: 'contains',\n                            target: 'StockholmFactory',\n                            targetModel: 'Factory'\n                        }\n                    ],\n                    properties: []\n                });\n                break;\n            }\n            default:\n                break;\n        }\n    }\n}\n\nexport class AssetProperty<T> {\n    public id: string;\n    public propertyName: string;\n    private currentValue: T;\n    private getNextValue: (currentValue: T) => T;\n    public schema: string;\n\n    constructor({\n        id,\n        propertyName,\n        currentValue,\n        getNextValue,\n        schema = 'double'\n    }: IAssetProperty<T>) {\n        this.id = id;\n        this.propertyName = propertyName;\n        this.currentValue = currentValue;\n        this.getNextValue = getNextValue;\n        this.schema = schema;\n    }\n\n    tick() {\n        this.currentValue = this.getNextValue(this.currentValue);\n        const event: ADTPatch = {\n            op: 'replace',\n            path: `/${this.propertyName}`,\n            value: this.currentValue\n        };\n        return event;\n    }\n}\n","import {\n    DTModelContent,\n    DTModel,\n    DTwin,\n    DTwinRelationship,\n    IAdtPusherSimulation,\n    AdtPusherSimulationType\n} from '../../Constants';\nimport {\n    AssetRelationship,\n    AssetTwin,\n    ADTPatch,\n    DTwinUpdateEvent\n} from '../../Constants/Interfaces';\nimport { downloadJSON } from '../../Services/Utils';\nimport { Asset } from './Asset';\n\nconst modelTwinsRelationshipsData = {\n    versionNumber: 1\n};\n\nexport default class AssetSimulation implements IAdtPusherSimulation {\n    private assets: Array<Asset>;\n    public seedTimeMillis: number;\n    private intervalMillis: number;\n\n    constructor(\n        seedTimeMillis: number,\n        intervalMillis: number,\n        simulationType: AdtPusherSimulationType\n    ) {\n        this.assets = [];\n        this.seedTimeMillis = seedTimeMillis;\n        this.intervalMillis = intervalMillis;\n        if (simulationType === AdtPusherSimulationType.DairyProduction) {\n            this.assets.push(new Asset('PasteurizationMachine'));\n            this.assets.push(new Asset('SaltMachine'));\n            this.assets.push(new Asset('MaintenancePersonnel'));\n            this.assets.push(new Asset('Factory'));\n            this.assets.push(new Asset('Country'));\n        } else if (simulationType === AdtPusherSimulationType.RobotArms) {\n            this.assets.push(new Asset('RobotArm'));\n            this.assets.push(new Asset('DistributionCenter'));\n        }\n    }\n\n    generateTwinId(name: string) {\n        return `${name}Twin`;\n    }\n\n    generateModelId(name: string): string {\n        return `dtmi:assetGen:${name};${modelTwinsRelationshipsData.versionNumber}`;\n    }\n\n    tick() {\n        this.seedTimeMillis += this.intervalMillis;\n        const events: any = [];\n        this.assets.forEach(function (asset) {\n            asset.twins.forEach(function (twin: AssetTwin) {\n                const updateTwin: DTwinUpdateEvent = {\n                    dtId: twin.name,\n                    patchJSON: twin.properties.map(function (d) {\n                        return d.tick() as ADTPatch;\n                    })\n                };\n                events.push(updateTwin);\n            });\n        });\n        return events;\n    }\n\n    generateDTModels(download = false) {\n        const dtdlModels = this.assets.map((asset) => {\n            const propertyContents: Array<DTModelContent> = asset.properties.map(\n                (property) => ({\n                    '@type': 'Property',\n                    name: property.propertyName,\n                    schema: property.schema || 'double'\n                })\n            );\n            const relationshipContents: Array<any> = asset.relationships.map(\n                (assetRelationship: AssetRelationship) => {\n                    const relationship: any = {\n                        '@type': 'Relationship',\n                        name: assetRelationship.name,\n                        properties: [\n                            {\n                                '@type': 'Property',\n                                name: 'targetModel',\n                                schema: 'string'\n                            }\n                        ]\n                    };\n                    if (assetRelationship.target) {\n                        relationship.target = this.generateModelId(\n                            assetRelationship.target\n                        );\n                    }\n                    return relationship;\n                }\n            );\n\n            const model: DTModel = {\n                '@id': this.generateModelId(asset.name),\n                '@type': 'Interface',\n                '@context': 'dtmi:dtdl:context;2',\n                displayName: asset.name,\n                contents: [...propertyContents, ...relationshipContents]\n            };\n            return model;\n        });\n        if (download) {\n            downloadJSON(JSON.stringify(dtdlModels), 'DT_Models.json');\n        }\n        return dtdlModels;\n    }\n\n    generateDTwins(download = false) {\n        const twins: Array<DTwin> = [];\n        this.assets.forEach((asset: Asset) => {\n            asset.twins.forEach((assetTwin: AssetTwin) => {\n                const twin: DTwin = {\n                    $dtId: assetTwin.name,\n                    $metadata: {\n                        $model: `dtmi:assetGen:${asset.name};${modelTwinsRelationshipsData.versionNumber}`\n                    }\n                };\n                asset.properties.forEach((property) => {\n                    twin[`${property.propertyName}`] = property.currentValue;\n                });\n                twins.push(twin);\n            });\n        });\n        if (download) {\n            downloadJSON(JSON.stringify(twins), 'DT_Twins.json');\n        }\n        return twins;\n    }\n\n    generateTwinRelationships() {\n        const relationships: Array<DTwinRelationship> = [];\n        this.assets.forEach((asset: Asset) => {\n            asset?.twins.forEach((twin: AssetTwin) => {\n                twin.assetRelationships?.forEach(\n                    (\n                        relationship: AssetRelationship,\n                        relationshipIndex: number\n                    ) => {\n                        relationships.push({\n                            $relId: `${twin.name}_${relationship.name}_Relationship${relationshipIndex}`,\n                            $dtId: twin.name,\n                            $name: relationship.name,\n                            $targetId: relationship.target\n                                ? relationship.target\n                                : '',\n                            targetModel: relationship.targetModel\n                                ? relationship.targetModel\n                                : ''\n                        });\n                    }\n                );\n            });\n        });\n        return relationships;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}