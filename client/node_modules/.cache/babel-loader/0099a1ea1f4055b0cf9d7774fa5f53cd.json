{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, initializeComponentRef } from '../../../Utilities';\nimport { CommandButton, IconButton } from '../../../Button';\nimport * as stylesImport from './Suggestions.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Pickers}\n */\nvar SuggestionsItem = /** @class */function (_super) {\n  __extends(SuggestionsItem, _super);\n  function SuggestionsItem(props) {\n    var _this = _super.call(this, props) || this;\n    initializeComponentRef(_this);\n    return _this;\n  }\n  SuggestionsItem.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      suggestionModel = _b.suggestionModel,\n      RenderSuggestion = _b.RenderSuggestion,\n      onClick = _b.onClick,\n      className = _b.className,\n      id = _b.id,\n      onRemoveItem = _b.onRemoveItem,\n      isSelectedOverride = _b.isSelectedOverride,\n      removeButtonAriaLabel = _b.removeButtonAriaLabel,\n      styles = _b.styles,\n      theme = _b.theme;\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggested: suggestionModel.selected || isSelectedOverride\n    }) : {\n      root: css('ms-Suggestions-item', legacyStyles.suggestionsItem, (_a = {}, _a['is-suggested ' + legacyStyles.suggestionsItemIsSuggested] = suggestionModel.selected || isSelectedOverride, _a), className),\n      itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n      closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton)\n    };\n    return React.createElement(\"div\", {\n      className: classNames.root,\n      role: \"presentation\"\n    }, React.createElement(CommandButton, {\n      onClick: onClick,\n      className: classNames.itemButton,\n      id: id,\n      \"aria-selected\": suggestionModel.selected,\n      role: \"option\",\n      \"aria-label\": suggestionModel.ariaLabel\n    }, RenderSuggestion(suggestionModel.item, this.props)), this.props.showRemoveButton ? React.createElement(IconButton, {\n      iconProps: {\n        iconName: 'Cancel',\n        styles: {\n          root: {\n            fontSize: '12px'\n          }\n        }\n      },\n      title: removeButtonAriaLabel,\n      ariaLabel: removeButtonAriaLabel,\n      onClick: onRemoveItem,\n      className: classNames.closeButton\n    }) : null);\n  };\n  return SuggestionsItem;\n}(React.Component);\nexport { SuggestionsItem };","map":{"version":3,"sources":["components/pickers/Suggestions/SuggestionsItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css, initializeComponentRef } from '../../../Utilities';\nimport { IProcessedStyleSet } from '../../../Styling';\nimport { CommandButton, IconButton } from '../../../Button';\nimport { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nimport * as stylesImport from './Suggestions.scss';\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsItemStyleProps, ISuggestionsItemStyles>();\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsItem<T> extends React.Component<ISuggestionItemProps<T>, {}> {\n  constructor(props: ISuggestionItemProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      suggestionModel,\n      RenderSuggestion,\n      onClick,\n      className,\n      id,\n      onRemoveItem,\n      isSelectedOverride,\n      removeButtonAriaLabel,\n      styles,\n      theme,\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<ISuggestionsItemStyles>> = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggested: suggestionModel.selected || isSelectedOverride,\n        })\n      : {\n          root: css(\n            'ms-Suggestions-item',\n            legacyStyles.suggestionsItem,\n            {\n              ['is-suggested ' + legacyStyles.suggestionsItemIsSuggested]:\n                suggestionModel.selected || isSelectedOverride,\n            },\n            className,\n          ),\n          itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n          closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton),\n        };\n\n    return (\n      <div className={classNames.root} role=\"presentation\">\n        <CommandButton\n          onClick={onClick}\n          className={classNames.itemButton}\n          id={id}\n          aria-selected={suggestionModel.selected}\n          role=\"option\"\n          aria-label={suggestionModel.ariaLabel}\n        >\n          {RenderSuggestion(suggestionModel.item, this.props)}\n        </CommandButton>\n        {this.props.showRemoveButton ? (\n          <IconButton\n            iconProps={{ iconName: 'Cancel', styles: { root: { fontSize: '12px' } } }}\n            title={removeButtonAriaLabel}\n            ariaLabel={removeButtonAriaLabel}\n            onClick={onRemoveItem}\n            className={classNames.closeButton}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}