{"ast":null,"code":"import { mergeSettings, mergeScopedSettings } from './mergeSettings';\n/**\n * Merge props and customizations giving priority to props over context.\n * NOTE: This function will always perform multiple merge operations. Use with caution.\n * @param props - New settings to merge in.\n * @param parentContext - Context containing current settings.\n * @returns Merged customizations.\n */\nexport function mergeCustomizations(props, parentContext) {\n  var _a = (parentContext || {}).customizations,\n    customizations = _a === void 0 ? {\n      settings: {},\n      scopedSettings: {}\n    } : _a;\n  return {\n    customizations: {\n      settings: mergeSettings(customizations.settings, props.settings),\n      scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\n      inCustomizerContext: true\n    }\n  };\n}","map":{"version":3,"sources":["customizations/mergeCustomizations.ts"],"names":[],"mappings":"AAAA,SAAS,aAAa,EAAE,mBAAmB,QAAQ,iBAAiB;AAIpE;;;;;;AAMG;AACH,OAAM,SAAU,mBAAmB,CAAC,KAAuB,EAAE,aAAiC,EAAA;EACpF,IAAA,EAAA,GAAA,CAAA,aAAA,IAAA,CAAA,CAAA,EAAA,cAAqD;IAArD,cAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA;MAAA,QAAA,EAAA,CAAA,CAAA;MAAA,cAAA,EAAA,CAAA;IAAA,CAAA,GAAA,EAAqD;EAE7D,OAAO;IACL,cAAc,EAAE;MACd,QAAQ,EAAE,aAAa,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC;MAChE,cAAc,EAAE,mBAAmB,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,CAAC,cAAc,CAAC;MACxF,mBAAmB,EAAE;IACtB;GACF;AACH","sourcesContent":["import { mergeSettings, mergeScopedSettings } from './mergeSettings';\nimport { ICustomizerProps } from './Customizer.types';\nimport { ICustomizerContext } from './CustomizerContext';\n\n/**\n * Merge props and customizations giving priority to props over context.\n * NOTE: This function will always perform multiple merge operations. Use with caution.\n * @param props - New settings to merge in.\n * @param parentContext - Context containing current settings.\n * @returns Merged customizations.\n */\nexport function mergeCustomizations(props: ICustomizerProps, parentContext: ICustomizerContext): ICustomizerContext {\n  const { customizations = { settings: {}, scopedSettings: {} } } = parentContext || {};\n\n  return {\n    customizations: {\n      settings: mergeSettings(customizations.settings, props.settings),\n      scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\n      inCustomizerContext: true,\n    },\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}