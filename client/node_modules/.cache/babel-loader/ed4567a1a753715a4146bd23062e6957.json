{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __assign } from \"tslib\";\nimport { getTracer } from \"@azure/core-tracing\";\nimport { SpanKind } from \"@opentelemetry/api\";\n/**\n * Creates a span using the global tracer.\n * @internal\n * @param name The name of the operation being performed.\n * @param tracingOptions The options for the underlying http request.\n */\nexport function createSpan(operationName, operationOptions) {\n  var tracer = getTracer();\n  var tracingOptions = operationOptions.tracingOptions || {};\n  var spanOptions = __assign(__assign({}, tracingOptions.spanOptions), {\n    kind: SpanKind.INTERNAL\n  });\n  var span = tracer.startSpan(\"DigitalTwinsClient.\" + operationName, spanOptions);\n  span.setAttribute(\"az.namespace\", \"Microsoft.DigitalTwins\");\n  var newSpanOptions = tracingOptions.spanOptions || {};\n  if (span.isRecording()) {\n    newSpanOptions = __assign(__assign({}, tracingOptions.spanOptions), {\n      parent: span.context(),\n      attributes: __assign(__assign({}, spanOptions.attributes), {\n        \"az.namespace\": \"Microsoft.DigitalTwins\"\n      })\n    });\n  }\n  var newTracingOptions = __assign(__assign({}, tracingOptions), {\n    spanOptions: newSpanOptions\n  });\n  var newOperationOptions = __assign(__assign({}, operationOptions), {\n    tracingOptions: newTracingOptions\n  });\n  return {\n    span: span,\n    updatedOptions: newOperationOptions\n  };\n}","map":{"version":3,"sources":["../../src/tracing.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA,SAAS,SAAS,QAAQ,qBAAqB;AAC/C,SAA4B,QAAQ,QAAQ,oBAAoB;AAKhE;;;;;AAKG;AACH,OAAM,SAAU,UAAU,CACxB,aAAqB,EACrB,gBAAmB,EAAA;EAEnB,IAAM,MAAM,GAAG,SAAS,CAAA,CAAE;EAC1B,IAAM,cAAc,GAAG,gBAAgB,CAAC,cAAc,IAAI,CAAA,CAAE;EAC5D,IAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACZ,cAAc,CAAC,WAAW,CAAA,EAAA;IAC7B,IAAI,EAAE,QAAQ,CAAC;EAAQ,CAAA,CACxB;EAED,IAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,qBAAA,GAAsB,aAAe,EAAE,WAAW,CAAC;EAEjF,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,wBAAwB,CAAC;EAE3D,IAAI,cAAc,GAAG,cAAc,CAAC,WAAW,IAAI,CAAA,CAAE;EACrD,IAAI,IAAI,CAAC,WAAW,CAAA,CAAE,EAAE;IACtB,cAAc,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACT,cAAc,CAAC,WAAW,CAAA,EAAA;MAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,CAAA,CAAE;MACtB,UAAU,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACL,WAAW,CAAC,UAAU,CAAA,EAAA;QACzB,cAAc,EAAE;MAAwB,CAAA;IAAA,CAAA,CAE3C;EACF;EAED,IAAM,iBAAiB,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAClB,cAAc,CAAA,EAAA;IACjB,WAAW,EAAE;EAAc,CAAA,CAC5B;EAED,IAAM,mBAAmB,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACpB,gBAAgB,CAAA,EAAA;IACnB,cAAc,EAAE;EAAiB,CAAA,CAClC;EAED,OAAO;IACL,IAAI,EAAA,IAAA;IACJ,cAAc,EAAE;GACjB;AACH","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getTracer } from \"@azure/core-tracing\";\nimport { Span, SpanOptions, SpanKind } from \"@opentelemetry/api\";\nimport { OperationOptions } from \"@azure/core-http\";\n\ntype OperationTracingOptions = OperationOptions[\"tracingOptions\"];\n\n/**\n * Creates a span using the global tracer.\n * @internal\n * @param name The name of the operation being performed.\n * @param tracingOptions The options for the underlying http request.\n */\nexport function createSpan<T extends OperationOptions>(\n  operationName: string,\n  operationOptions: T\n): { span: Span; updatedOptions: T } {\n  const tracer = getTracer();\n  const tracingOptions = operationOptions.tracingOptions || {};\n  const spanOptions: SpanOptions = {\n    ...tracingOptions.spanOptions,\n    kind: SpanKind.INTERNAL\n  };\n\n  const span = tracer.startSpan(`DigitalTwinsClient.${operationName}`, spanOptions);\n\n  span.setAttribute(\"az.namespace\", \"Microsoft.DigitalTwins\");\n\n  let newSpanOptions = tracingOptions.spanOptions || {};\n  if (span.isRecording()) {\n    newSpanOptions = {\n      ...tracingOptions.spanOptions,\n      parent: span.context(),\n      attributes: {\n        ...spanOptions.attributes,\n        \"az.namespace\": \"Microsoft.DigitalTwins\"\n      }\n    };\n  }\n\n  const newTracingOptions: OperationTracingOptions = {\n    ...tracingOptions,\n    spanOptions: newSpanOptions\n  };\n\n  const newOperationOptions: T = {\n    ...operationOptions,\n    tracingOptions: newTracingOptions\n  };\n\n  return {\n    span,\n    updatedOptions: newOperationOptions\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}