{"ast":null,"code":"/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\n// TODO: convert to ES6 iterable\nmodule.exports = class Permutator {\n  /**\n   * A Permutator iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.list = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.left = {};\n    for (let i = 0; i < list.length; ++i) {\n      this.left[list[i]] = true;\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n  hasNext() {\n    return !this.done;\n  }\n\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n  next() {\n    // copy current permutation\n    const rval = this.list.slice();\n\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n    let k = null;\n    let pos = 0;\n    const length = this.list.length;\n    for (let i = 0; i < length; ++i) {\n      const element = this.list[i];\n      const left = this.left[element];\n      if ((k === null || element > k) && (left && i > 0 && element > this.list[i - 1] || !left && i < length - 1 && element > this.list[i + 1])) {\n        k = element;\n        pos = i;\n      }\n    }\n\n    // no more permutations\n    if (k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = this.left[k] ? pos - 1 : pos + 1;\n      this.list[pos] = this.list[swap];\n      this.list[swap] = k;\n\n      // reverse the direction of all elements larger than k\n      for (let i = 0; i < length; ++i) {\n        if (this.list[i] > k) {\n          this.left[this.list[i]] = !this.left[this.list[i]];\n        }\n      }\n    }\n    return rval;\n  }\n};","map":{"version":3,"names":["module","exports","Permutator","constructor","list","sort","done","left","i","length","hasNext","next","rval","slice","k","pos","element","swap"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/rdf-canonize/lib/Permutator.js"],"sourcesContent":["/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\n// TODO: convert to ES6 iterable\n\nmodule.exports = class Permutator {\n  /**\n   * A Permutator iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.list = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.left = {};\n    for(let i = 0; i < list.length; ++i) {\n      this.left[list[i]] = true;\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n  hasNext() {\n    return !this.done;\n  }\n\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n  next() {\n    // copy current permutation\n    const rval = this.list.slice();\n\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n    let k = null;\n    let pos = 0;\n    const length = this.list.length;\n    for(let i = 0; i < length; ++i) {\n      const element = this.list[i];\n      const left = this.left[element];\n      if((k === null || element > k) &&\n        ((left && i > 0 && element > this.list[i - 1]) ||\n        (!left && i < (length - 1) && element > this.list[i + 1]))) {\n        k = element;\n        pos = i;\n      }\n    }\n\n    // no more permutations\n    if(k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = this.left[k] ? pos - 1 : pos + 1;\n      this.list[pos] = this.list[swap];\n      this.list[swap] = k;\n\n      // reverse the direction of all elements larger than k\n      for(let i = 0; i < length; ++i) {\n        if(this.list[i] > k) {\n          this.left[this.list[i]] = !this.left[this.list[i]];\n        }\n      }\n    }\n\n    return rval;\n  }\n};\n\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZ;AAEAA,MAAM,CAACC,OAAO,GAAG,MAAMC,UAAU,CAAC;EAChC;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,IAAI,EAAE;IAChB;IACA,IAAI,CAACA,IAAI,GAAGA,IAAI,CAACC,IAAI,CAAC,CAAC;IACvB;IACA,IAAI,CAACC,IAAI,GAAG,KAAK;IACjB;IACA,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC;IACd,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACK,MAAM,EAAE,EAAED,CAAC,EAAE;MACnC,IAAI,CAACD,IAAI,CAACH,IAAI,CAACI,CAAC,CAAC,CAAC,GAAG,IAAI;IAC3B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEE,OAAOA,CAAA,EAAG;IACR,OAAO,CAAC,IAAI,CAACJ,IAAI;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,IAAIA,CAAA,EAAG;IACL;IACA,MAAMC,IAAI,GAAG,IAAI,CAACR,IAAI,CAACS,KAAK,CAAC,CAAC;;IAE9B;AACJ;;IAEI;IACA;IACA,IAAIC,CAAC,GAAG,IAAI;IACZ,IAAIC,GAAG,GAAG,CAAC;IACX,MAAMN,MAAM,GAAG,IAAI,CAACL,IAAI,CAACK,MAAM;IAC/B,KAAI,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAE,EAAED,CAAC,EAAE;MAC9B,MAAMQ,OAAO,GAAG,IAAI,CAACZ,IAAI,CAACI,CAAC,CAAC;MAC5B,MAAMD,IAAI,GAAG,IAAI,CAACA,IAAI,CAACS,OAAO,CAAC;MAC/B,IAAG,CAACF,CAAC,KAAK,IAAI,IAAIE,OAAO,GAAGF,CAAC,MACzBP,IAAI,IAAIC,CAAC,GAAG,CAAC,IAAIQ,OAAO,GAAG,IAAI,CAACZ,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC,IAC5C,CAACD,IAAI,IAAIC,CAAC,GAAIC,MAAM,GAAG,CAAE,IAAIO,OAAO,GAAG,IAAI,CAACZ,IAAI,CAACI,CAAC,GAAG,CAAC,CAAE,CAAC,EAAE;QAC5DM,CAAC,GAAGE,OAAO;QACXD,GAAG,GAAGP,CAAC;MACT;IACF;;IAEA;IACA,IAAGM,CAAC,KAAK,IAAI,EAAE;MACb,IAAI,CAACR,IAAI,GAAG,IAAI;IAClB,CAAC,MAAM;MACL;MACA,MAAMW,IAAI,GAAG,IAAI,CAACV,IAAI,CAACO,CAAC,CAAC,GAAGC,GAAG,GAAG,CAAC,GAAGA,GAAG,GAAG,CAAC;MAC7C,IAAI,CAACX,IAAI,CAACW,GAAG,CAAC,GAAG,IAAI,CAACX,IAAI,CAACa,IAAI,CAAC;MAChC,IAAI,CAACb,IAAI,CAACa,IAAI,CAAC,GAAGH,CAAC;;MAEnB;MACA,KAAI,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAE,EAAED,CAAC,EAAE;QAC9B,IAAG,IAAI,CAACJ,IAAI,CAACI,CAAC,CAAC,GAAGM,CAAC,EAAE;UACnB,IAAI,CAACP,IAAI,CAAC,IAAI,CAACH,IAAI,CAACI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAACD,IAAI,CAAC,IAAI,CAACH,IAAI,CAACI,CAAC,CAAC,CAAC;QACpD;MACF;IACF;IAEA,OAAOI,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}