{"ast":null,"code":"import { PersonaInitialsColor } from './Persona.types';\n/**\n * Following colors are considered reserved and can only be set with overrides, so they are excluded from this set:\n * - `gray` and `black` can result in offensive persona coins with some initials combinations\n * - `red` often has a special meaning\n * - `transparent` is not intended to be used with typical initials due to accessibility issues;\n *   its primary use is for Facepile overflow buttons.\n */\nvar COLOR_SWATCHES_LOOKUP = [PersonaInitialsColor.lightBlue, PersonaInitialsColor.blue, PersonaInitialsColor.darkBlue, PersonaInitialsColor.teal, PersonaInitialsColor.green, PersonaInitialsColor.darkGreen, PersonaInitialsColor.lightPink, PersonaInitialsColor.pink, PersonaInitialsColor.magenta, PersonaInitialsColor.purple, PersonaInitialsColor.orange, PersonaInitialsColor.lightRed, PersonaInitialsColor.darkRed, PersonaInitialsColor.violet, PersonaInitialsColor.gold, PersonaInitialsColor.burgundy, PersonaInitialsColor.warmGray, PersonaInitialsColor.cyan, PersonaInitialsColor.rust, PersonaInitialsColor.coolGray];\nvar COLOR_SWATCHES_NUM_ENTRIES = COLOR_SWATCHES_LOOKUP.length;\nfunction getInitialsColorFromName(displayName) {\n  var color = PersonaInitialsColor.blue;\n  if (!displayName) {\n    return color;\n  }\n  var hashCode = 0;\n  for (var iLen = displayName.length - 1; iLen >= 0; iLen--) {\n    var ch = displayName.charCodeAt(iLen);\n    var shift = iLen % 8;\n    // eslint-disable-next-line no-bitwise\n    hashCode ^= (ch << shift) + (ch >> 8 - shift);\n  }\n  color = COLOR_SWATCHES_LOOKUP[hashCode % COLOR_SWATCHES_NUM_ENTRIES];\n  return color;\n}\nfunction personaInitialsColorToHexCode(personaInitialsColor) {\n  switch (personaInitialsColor) {\n    case PersonaInitialsColor.lightBlue:\n      return '#4F6BED';\n    case PersonaInitialsColor.blue:\n      return '#0078D4';\n    case PersonaInitialsColor.darkBlue:\n      return '#004E8C';\n    case PersonaInitialsColor.teal:\n      return '#038387';\n    case PersonaInitialsColor.lightGreen:\n    case PersonaInitialsColor.green:\n      return '#498205';\n    case PersonaInitialsColor.darkGreen:\n      return '#0B6A0B';\n    case PersonaInitialsColor.lightPink:\n      return '#C239B3';\n    case PersonaInitialsColor.pink:\n      return '#E3008C';\n    case PersonaInitialsColor.magenta:\n      return '#881798';\n    case PersonaInitialsColor.purple:\n      return '#5C2E91';\n    case PersonaInitialsColor.orange:\n      return '#CA5010';\n    // eslint-disable-next-line deprecation/deprecation\n    case PersonaInitialsColor.red:\n      return '#EE1111';\n    case PersonaInitialsColor.lightRed:\n      return '#D13438';\n    case PersonaInitialsColor.darkRed:\n      return '#A4262C';\n    case PersonaInitialsColor.transparent:\n      return 'transparent';\n    case PersonaInitialsColor.violet:\n      return '#8764B8';\n    case PersonaInitialsColor.gold:\n      return '#986F0B';\n    case PersonaInitialsColor.burgundy:\n      return '#750B1C';\n    case PersonaInitialsColor.warmGray:\n      return '#7A7574';\n    case PersonaInitialsColor.cyan:\n      return '#005B70';\n    case PersonaInitialsColor.rust:\n      return '#8E562E';\n    case PersonaInitialsColor.coolGray:\n      return '#69797E';\n    // eslint-disable-next-line deprecation/deprecation\n    case PersonaInitialsColor.black:\n      return '#1D1D1D';\n    case PersonaInitialsColor.gray:\n      return '#393939';\n  }\n}\n/** @deprecated Use `getPersonaInitialsColor` */\nexport function initialsColorPropToColorCode(props) {\n  return getPersonaInitialsColor(props);\n}\n/**\n * Gets the hex color string (prefixed with #) for the given persona props.\n * This is the logic used internally by the Persona control.\n * @param props - Current persona props\n * @returns Hex color string prefixed with #\n */\nexport function getPersonaInitialsColor(props) {\n  // eslint-disable-next-line deprecation/deprecation\n  var primaryText = props.primaryText,\n    text = props.text;\n  var initialsColor = props.initialsColor;\n  var initialsColorCode;\n  if (typeof initialsColor === 'string') {\n    initialsColorCode = initialsColor;\n  } else {\n    initialsColor = initialsColor !== undefined ? initialsColor : getInitialsColorFromName(text || primaryText);\n    initialsColorCode = personaInitialsColorToHexCode(initialsColor);\n  }\n  return initialsColorCode;\n}","map":{"version":3,"sources":["components/Persona/PersonaInitialsColor.ts"],"names":[],"mappings":"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","sourcesContent":["import { PersonaInitialsColor, IPersonaProps } from './Persona.types';\n\n/**\n * Following colors are considered reserved and can only be set with overrides, so they are excluded from this set:\n * - `gray` and `black` can result in offensive persona coins with some initials combinations\n * - `red` often has a special meaning\n * - `transparent` is not intended to be used with typical initials due to accessibility issues;\n *   its primary use is for Facepile overflow buttons.\n */\nconst COLOR_SWATCHES_LOOKUP: PersonaInitialsColor[] = [\n  PersonaInitialsColor.lightBlue,\n  PersonaInitialsColor.blue,\n  PersonaInitialsColor.darkBlue,\n  PersonaInitialsColor.teal,\n  PersonaInitialsColor.green,\n  PersonaInitialsColor.darkGreen,\n  PersonaInitialsColor.lightPink,\n  PersonaInitialsColor.pink,\n  PersonaInitialsColor.magenta,\n  PersonaInitialsColor.purple,\n  PersonaInitialsColor.orange,\n  PersonaInitialsColor.lightRed,\n  PersonaInitialsColor.darkRed,\n  PersonaInitialsColor.violet,\n  PersonaInitialsColor.gold,\n  PersonaInitialsColor.burgundy,\n  PersonaInitialsColor.warmGray,\n  PersonaInitialsColor.cyan,\n  PersonaInitialsColor.rust,\n  PersonaInitialsColor.coolGray,\n];\n\nconst COLOR_SWATCHES_NUM_ENTRIES = COLOR_SWATCHES_LOOKUP.length;\n\nfunction getInitialsColorFromName(displayName: string | undefined): PersonaInitialsColor {\n  let color = PersonaInitialsColor.blue;\n  if (!displayName) {\n    return color;\n  }\n\n  let hashCode = 0;\n  for (let iLen: number = displayName.length - 1; iLen >= 0; iLen--) {\n    const ch: number = displayName.charCodeAt(iLen);\n    const shift: number = iLen % 8;\n    // eslint-disable-next-line no-bitwise\n    hashCode ^= (ch << shift) + (ch >> (8 - shift));\n  }\n\n  color = COLOR_SWATCHES_LOOKUP[hashCode % COLOR_SWATCHES_NUM_ENTRIES];\n\n  return color;\n}\n\nfunction personaInitialsColorToHexCode(personaInitialsColor: PersonaInitialsColor): string {\n  switch (personaInitialsColor) {\n    case PersonaInitialsColor.lightBlue:\n      return '#4F6BED';\n    case PersonaInitialsColor.blue:\n      return '#0078D4';\n    case PersonaInitialsColor.darkBlue:\n      return '#004E8C';\n    case PersonaInitialsColor.teal:\n      return '#038387';\n    case PersonaInitialsColor.lightGreen:\n    case PersonaInitialsColor.green:\n      return '#498205';\n    case PersonaInitialsColor.darkGreen:\n      return '#0B6A0B';\n    case PersonaInitialsColor.lightPink:\n      return '#C239B3';\n    case PersonaInitialsColor.pink:\n      return '#E3008C';\n    case PersonaInitialsColor.magenta:\n      return '#881798';\n    case PersonaInitialsColor.purple:\n      return '#5C2E91';\n    case PersonaInitialsColor.orange:\n      return '#CA5010';\n    // eslint-disable-next-line deprecation/deprecation\n    case PersonaInitialsColor.red:\n      return '#EE1111';\n    case PersonaInitialsColor.lightRed:\n      return '#D13438';\n    case PersonaInitialsColor.darkRed:\n      return '#A4262C';\n    case PersonaInitialsColor.transparent:\n      return 'transparent';\n    case PersonaInitialsColor.violet:\n      return '#8764B8';\n    case PersonaInitialsColor.gold:\n      return '#986F0B';\n    case PersonaInitialsColor.burgundy:\n      return '#750B1C';\n    case PersonaInitialsColor.warmGray:\n      return '#7A7574';\n    case PersonaInitialsColor.cyan:\n      return '#005B70';\n    case PersonaInitialsColor.rust:\n      return '#8E562E';\n    case PersonaInitialsColor.coolGray:\n      return '#69797E';\n    // eslint-disable-next-line deprecation/deprecation\n    case PersonaInitialsColor.black:\n      return '#1D1D1D';\n    case PersonaInitialsColor.gray:\n      return '#393939';\n  }\n}\n\n/** @deprecated Use `getPersonaInitialsColor` */\nexport function initialsColorPropToColorCode(props: IPersonaProps): string {\n  return getPersonaInitialsColor(props);\n}\n\n/**\n * Gets the hex color string (prefixed with #) for the given persona props.\n * This is the logic used internally by the Persona control.\n * @param props - Current persona props\n * @returns Hex color string prefixed with #\n */\nexport function getPersonaInitialsColor(props: Pick<IPersonaProps, 'primaryText' | 'text' | 'initialsColor'>): string {\n  // eslint-disable-next-line deprecation/deprecation\n  const { primaryText, text } = props;\n  let { initialsColor } = props;\n  let initialsColorCode: string;\n  if (typeof initialsColor === 'string') {\n    initialsColorCode = initialsColor;\n  } else {\n    initialsColor = initialsColor !== undefined ? initialsColor : getInitialsColorFromName(text || primaryText);\n    initialsColorCode = personaInitialsColorToHexCode(initialsColor);\n  }\n\n  return initialsColorCode;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}