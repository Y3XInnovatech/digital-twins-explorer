{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { RestError } from \"../restError\";\nimport { MapperType } from \"../serializer\";\nimport { parseXML } from \"../util/xml\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { XML_CHARKEY } from \"../util/serializer.common\";\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(deserializationContentTypes, parsingOptions) {\n  return {\n    create: function (nextPolicy, options) {\n      return new DeserializationPolicy(nextPolicy, options, deserializationContentTypes, parsingOptions);\n    }\n  };\n}\nexport var defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport var defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\nexport var DefaultDeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes\n  }\n};\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nvar DeserializationPolicy = /** @class */function (_super) {\n  __extends(DeserializationPolicy, _super);\n  function DeserializationPolicy(nextPolicy, requestPolicyOptions, deserializationContentTypes, parsingOptions) {\n    if (parsingOptions === void 0) {\n      parsingOptions = {};\n    }\n    var _a;\n    var _this = _super.call(this, nextPolicy, requestPolicyOptions) || this;\n    _this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;\n    _this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;\n    _this.xmlCharKey = (_a = parsingOptions.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;\n    return _this;\n  }\n  DeserializationPolicy.prototype.sendRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this._nextPolicy.sendRequest(request).then(function (response) {\n          return deserializeResponseBody(_this.jsonContentTypes, _this.xmlContentTypes, response, {\n            xmlCharKey: _this.xmlCharKey\n          });\n        })];\n      });\n    });\n  };\n  return DeserializationPolicy;\n}(BaseRequestPolicy);\nexport { DeserializationPolicy };\nfunction getOperationResponse(parsedResponse) {\n  var result;\n  var request = parsedResponse.request;\n  var operationSpec = request.operationSpec;\n  if (operationSpec) {\n    var operationResponseGetter = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n  var shouldDeserialize = parsedResponse.request.shouldDeserialize;\n  var result;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\nexport function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options) {\n  var _a, _b, _c;\n  if (options === void 0) {\n    options = {};\n  }\n  var updatedOptions = {\n    rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"\",\n    includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,\n    xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n  };\n  return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(function (parsedResponse) {\n    if (!shouldDeserializeResponse(parsedResponse)) {\n      return parsedResponse;\n    }\n    var operationSpec = parsedResponse.request.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n      return parsedResponse;\n    }\n    var responseSpec = getOperationResponse(parsedResponse);\n    var _a = handleErrorResponse(parsedResponse, operationSpec, responseSpec),\n      error = _a.error,\n      shouldReturnResponse = _a.shouldReturnResponse;\n    if (error) {\n      throw error;\n    } else if (shouldReturnResponse) {\n      return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n      if (responseSpec.bodyMapper) {\n        var valueToDeserialize = parsedResponse.parsedBody;\n        if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];\n        }\n        try {\n          parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n        } catch (innerError) {\n          var restError = new RestError(\"Error \" + innerError + \" occurred in deserializing the responseBody - \" + parsedResponse.bodyAsText, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);\n          throw restError;\n        }\n      } else if (operationSpec.httpMethod === \"HEAD\") {\n        // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n        parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n      }\n      if (responseSpec.headersMapper) {\n        parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), \"operationRes.parsedHeaders\", options);\n      }\n    }\n    return parsedResponse;\n  });\n}\nfunction isOperationSpecEmpty(operationSpec) {\n  var expectedStatusCodes = Object.keys(operationSpec.responses);\n  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\";\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec) {\n  var _a;\n  var isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  var isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return {\n          error: null,\n          shouldReturnResponse: false\n        };\n      }\n    } else {\n      return {\n        error: null,\n        shouldReturnResponse: false\n      };\n    }\n  }\n  var errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n  var streaming = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) || parsedResponse.request.streamResponseBody;\n  var initialErrorMessage = streaming ? \"Unexpected status code: \" + parsedResponse.status : parsedResponse.bodyAsText;\n  var error = new RestError(initialErrorMessage, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n  var defaultBodyMapper = errorResponseSpec.bodyMapper;\n  var defaultHeadersMapper = errorResponseSpec.headersMapper;\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      var parsedBody = parsedResponse.parsedBody;\n      var parsedError = void 0;\n      if (defaultBodyMapper) {\n        var valueToDeserialize = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize = typeof parsedBody === \"object\" ? parsedBody[defaultBodyMapper.xmlElementName] : [];\n        }\n        parsedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\");\n      }\n      var internalError = parsedBody.error || parsedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n      if (defaultBodyMapper) {\n        error.response.parsedBody = parsedError;\n      }\n    }\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.rawHeaders(), \"operationRes.parsedHeaders\");\n    }\n  } catch (defaultError) {\n    error.message = \"Error \\\"\" + defaultError.message + \"\\\" occurred in deserializing the responseBody - \\\"\" + parsedResponse.bodyAsText + \"\\\" for the default response.\";\n  }\n  return {\n    error: error,\n    shouldReturnResponse: false\n  };\n}\nfunction parse(jsonContentTypes, xmlContentTypes, operationResponse, opts) {\n  var _a;\n  var errorHandler = function (err) {\n    var msg = \"Error \\\"\" + err + \"\\\" occurred while parsing the response body - \" + operationResponse.bodyAsText + \".\";\n    var errCode = err.code || RestError.PARSE_ERROR;\n    var e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse);\n    return Promise.reject(e);\n  };\n  var streaming = ((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) || operationResponse.request.streamResponseBody;\n  if (!streaming && operationResponse.bodyAsText) {\n    var text_1 = operationResponse.bodyAsText;\n    var contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n    var contentComponents = !contentType ? [] : contentType.split(\";\").map(function (component) {\n      return component.toLowerCase();\n    });\n    if (contentComponents.length === 0 || contentComponents.some(function (component) {\n      return jsonContentTypes.indexOf(component) !== -1;\n    })) {\n      return new Promise(function (resolve) {\n        operationResponse.parsedBody = JSON.parse(text_1);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some(function (component) {\n      return xmlContentTypes.indexOf(component) !== -1;\n    })) {\n      return parseXML(text_1, opts).then(function (body) {\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }).catch(errorHandler);\n    }\n  }\n  return Promise.resolve(operationResponse);\n}","map":{"version":3,"sources":["../../../src/policies/deserializationPolicy.ts"],"names":[],"mappings":"AAAA;AACA;;AAKA,SAAS,SAAS,QAAQ,cAAc;AACxC,SAAS,UAAU,QAAQ,eAAe;AAC1C,SAAS,QAAQ,QAAQ,aAAa;AAEtC,SACE,iBAAiB,QAIZ,iBAAiB;AACxB,SAAS,WAAW,QAA2B,2BAA2B;AA+B1E;;;AAGG;AACH,OAAM,SAAU,qBAAqB,CACnC,2BAAyD,EACzD,cAAkC,EAAA;EAElC,OAAO;IACL,MAAM,EAAE,SAAA,CAAC,UAAyB,EAAE,OAA6B,EAAA;MAC/D,OAAO,IAAI,qBAAqB,CAC9B,UAAU,EACV,OAAO,EACP,2BAA2B,EAC3B,cAAc,CACf;IACH;GACD;AACH;AAEA,OAAO,IAAM,uBAAuB,GAAG,CAAC,kBAAkB,EAAE,WAAW,CAAC;AACxE,OAAO,IAAM,sBAAsB,GAAG,CAAC,iBAAiB,EAAE,sBAAsB,CAAC;AAEjF,OAAO,IAAM,6BAA6B,GAA2B;EACnE,oBAAoB,EAAE;IACpB,IAAI,EAAE,uBAAuB;IAC7B,GAAG,EAAE;EACN;CACF;AAED;;;AAGG;AACH,IAAA,qBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA2C,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;EAKzC,SAAA,qBAAA,CACE,UAAyB,EACzB,oBAA0C,EAC1C,2BAAyD,EACzD,cAAsC,EAAA;IAAtC,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;MAAA,cAAA,GAAA,CAAA,CAAsC;IAAA;;IAJxC,IAAA,KAAA,GAME,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAU,EAAE,oBAAoB,CAAC,IAAA,IAAA;IAEvC,KAAI,CAAC,gBAAgB,GAClB,2BAA2B,IAAI,2BAA2B,CAAC,IAAI,IAAK,uBAAuB;IAC9F,KAAI,CAAC,eAAe,GACjB,2BAA2B,IAAI,2BAA2B,CAAC,GAAG,IAAK,sBAAsB;IAC5F,KAAI,CAAC,UAAU,GAAA,CAAA,EAAA,GAAG,cAAc,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,WAAW;;EAC5D;EAEa,qBAAA,CAAA,SAAA,CAAA,WAAW,GAAxB,UAAyB,OAAwB,EAAA;;;;QAC/C,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,QAA+B,EAAA;UAChF,OAAA,uBAAuB,CAAC,KAAI,CAAC,gBAAgB,EAAE,KAAI,CAAC,eAAe,EAAE,QAAQ,EAAE;YAC7E,UAAU,EAAE,KAAI,CAAC;WAClB,CAAC;QAFF,CAEE,CACH,CAAA;;;GACF;EACH,OAAA,qBAAC;AAAD,CAAC,CA3B0C,iBAAiB,CAAA;;AA6B5D,SAAS,oBAAoB,CAC3B,cAAqC,EAAA;EAErC,IAAI,MAAqC;EACzC,IAAM,OAAO,GAAoB,cAAc,CAAC,OAAO;EACvD,IAAM,aAAa,GAA8B,OAAO,CAAC,aAAa;EACtE,IAAI,aAAa,EAAE;IACjB,IAAM,uBAAuB,GAKa,OAAO,CAAC,uBAAuB;IACzE,IAAI,CAAC,uBAAuB,EAAE;MAC5B,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC;KACxD,MAAM;MACL,MAAM,GAAG,uBAAuB,CAAC,aAAa,EAAE,cAAc,CAAC;IAChE;EACF;EACD,OAAO,MAAM;AACf;AAEA,SAAS,yBAAyB,CAAC,cAAqC,EAAA;EACtE,IAAM,iBAAiB,GACrB,cAAc,CAAC,OAAO,CAAC,iBAAiB;EAC1C,IAAI,MAAe;EACnB,IAAI,iBAAiB,KAAK,SAAS,EAAE;IACnC,MAAM,GAAG,IAAI;GACd,MAAM,IAAI,OAAO,iBAAiB,KAAK,SAAS,EAAE;IACjD,MAAM,GAAG,iBAAiB;GAC3B,MAAM;IACL,MAAM,GAAG,iBAAiB,CAAC,cAAc,CAAC;EAC3C;EACD,OAAO,MAAM;AACf;AAEA,OAAM,SAAU,uBAAuB,CACrC,gBAA0B,EAC1B,eAAyB,EACzB,QAA+B,EAC/B,OAA+B,EAAA;;EAA/B,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;IAAA,OAAA,GAAA,CAAA,CAA+B;EAAA;EAE/B,IAAM,cAAc,GAAgC;IAClD,QAAQ,EAAA,CAAA,EAAA,GAAE,OAAO,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;IAChC,WAAW,EAAA,CAAA,EAAA,GAAE,OAAO,CAAC,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,KAAK;IACzC,UAAU,EAAA,CAAA,EAAA,GAAE,OAAO,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI;GACnC;EACD,OAAO,KAAK,CAAC,gBAAgB,EAAE,eAAe,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC,IAAI,CAC5E,UAAC,cAAc,EAAA;IACb,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,EAAE;MAC9C,OAAO,cAAc;IACtB;IAED,IAAM,aAAa,GAAG,cAAc,CAAC,OAAO,CAAC,aAAa;IAC1D,IAAI,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE;MAC9C,OAAO,cAAc;IACtB;IAED,IAAM,YAAY,GAAG,oBAAoB,CAAC,cAAc,CAAC;IAEnD,IAAA,EAAA,GAAkC,mBAAmB,CACzD,cAAc,EACd,aAAa,EACb,YAAY,CACb;MAJO,KAAK,GAAA,EAAA,CAAA,KAAA;MAAE,oBAAoB,GAAA,EAAA,CAAA,oBAIlC;IACD,IAAI,KAAK,EAAE;MACT,MAAM,KAAK;KACZ,MAAM,IAAI,oBAAoB,EAAE;MAC/B,OAAO,cAAc;IACtB;IAED;IACA;IACA,IAAI,YAAY,EAAE;MAChB,IAAI,YAAY,CAAC,UAAU,EAAE;QAC3B,IAAI,kBAAkB,GAAQ,cAAc,CAAC,UAAU;QACvD,IAAI,aAAa,CAAC,KAAK,IAAI,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC,QAAQ,EAAE;UACpF,kBAAkB,GAChB,OAAO,kBAAkB,KAAK,QAAQ,GAClC,kBAAkB,CAAC,YAAY,CAAC,UAAU,CAAC,cAAe,CAAC,GAC3D,EAAE;QACT;QACD,IAAI;UACF,cAAc,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,WAAW,CAC9D,YAAY,CAAC,UAAU,EACvB,kBAAkB,EAClB,yBAAyB,EACzB,OAAO,CACR;SACF,CAAC,OAAO,UAAU,EAAE;UACnB,IAAM,SAAS,GAAG,IAAI,SAAS,CAC7B,QAAA,GAAS,UAAU,GAAA,gDAAA,GAAiD,cAAc,CAAC,UAAY,EAC/F,SAAS,EACT,cAAc,CAAC,MAAM,EACrB,cAAc,CAAC,OAAO,EACtB,cAAc,CACf;UACD,MAAM,SAAS;QAChB;OACF,MAAM,IAAI,aAAa,CAAC,UAAU,KAAK,MAAM,EAAE;QAC9C;QACA,cAAc,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG;MAC5E;MAED,IAAI,YAAY,CAAC,aAAa,EAAE;QAC9B,cAAc,CAAC,aAAa,GAAG,aAAa,CAAC,UAAU,CAAC,WAAW,CACjE,YAAY,CAAC,aAAa,EAC1B,cAAc,CAAC,OAAO,CAAC,UAAU,CAAA,CAAE,EACnC,4BAA4B,EAC5B,OAAO,CACR;MACF;IACF;IAED,OAAO,cAAc;EACvB,CAAC,CACF;AACH;AAEA,SAAS,oBAAoB,CAAC,aAA4B,EAAA;EACxD,IAAM,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC;EAChE,OACE,mBAAmB,CAAC,MAAM,KAAK,CAAC,IAC/B,mBAAmB,CAAC,MAAM,KAAK,CAAC,IAAI,mBAAmB,CAAC,CAAC,CAAC,KAAK,SAAU;AAE9E;AAEA,SAAS,mBAAmB,CAC1B,cAAqC,EACrC,aAA4B,EAC5B,YAA2C,EAAA;;EAE3C,IAAM,iBAAiB,GAAG,GAAG,IAAI,cAAc,CAAC,MAAM,IAAI,cAAc,CAAC,MAAM,GAAG,GAAG;EACrF,IAAM,oBAAoB,GAAY,oBAAoB,CAAC,aAAa,CAAC,GACrE,iBAAiB,GACjB,CAAC,CAAC,YAAY;EAElB,IAAI,oBAAoB,EAAE;IACxB,IAAI,YAAY,EAAE;MAChB,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;QACzB,OAAO;UAAE,KAAK,EAAE,IAAI;UAAE,oBAAoB,EAAE;QAAK,CAAE;MACpD;KACF,MAAM;MACL,OAAO;QAAE,KAAK,EAAE,IAAI;QAAE,oBAAoB,EAAE;MAAK,CAAE;IACpD;EACF;EAED,IAAM,iBAAiB,GAAG,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAZ,YAAY,GAAI,aAAa,CAAC,SAAS,CAAC,OAAO;EACzE,IAAM,SAAS,GACb,CAAA,CAAA,EAAA,GAAA,cAAc,CAAC,OAAO,CAAC,yBAAyB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAC,cAAc,CAAC,MAAM,CAAA,KAC3E,cAAc,CAAC,OAAO,CAAC,kBAAkB;EAC3C,IAAM,mBAAmB,GAAG,SAAS,GACjC,0BAAA,GAA2B,cAAc,CAAC,MAAQ,GACjD,cAAc,CAAC,UAAqB;EAEzC,IAAM,KAAK,GAAG,IAAI,SAAS,CACzB,mBAAmB,EACnB,SAAS,EACT,cAAc,CAAC,MAAM,EACrB,cAAc,CAAC,OAAO,EACtB,cAAc,CACf;EAED;EACA;EACA,IAAI,CAAC,iBAAiB,EAAE;IACtB,MAAM,KAAK;EACZ;EAED,IAAM,iBAAiB,GAAG,iBAAiB,CAAC,UAAU;EACtD,IAAM,oBAAoB,GAAG,iBAAiB,CAAC,aAAa;EAE5D,IAAI;IACF;IACA;IACA,IAAI,cAAc,CAAC,UAAU,EAAE;MAC7B,IAAM,UAAU,GAAG,cAAc,CAAC,UAAU;MAC5C,IAAI,WAAW,GAAA,KAAA,CAAA;MACf,IAAI,iBAAiB,EAAE;QACrB,IAAI,kBAAkB,GAAQ,UAAU;QACxC,IAAI,aAAa,CAAC,KAAK,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC,QAAQ,EAAE;UAC9E,kBAAkB,GAChB,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,CAAC,iBAAiB,CAAC,cAAe,CAAC,GAAG,EAAE;QACtF;QACD,WAAW,GAAG,aAAa,CAAC,UAAU,CAAC,WAAW,CAChD,iBAAiB,EACjB,kBAAkB,EAClB,2BAA2B,CAC5B;MACF;MAED,IAAM,aAAa,GAAQ,UAAU,CAAC,KAAK,IAAI,WAAW,IAAI,UAAU;MACxE,KAAK,CAAC,IAAI,GAAG,aAAa,CAAC,IAAI;MAC/B,IAAI,aAAa,CAAC,OAAO,EAAE;QACzB,KAAK,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO;MACtC;MAED,IAAI,iBAAiB,EAAE;QACrB,KAAK,CAAC,QAAS,CAAC,UAAU,GAAG,WAAW;MACzC;IACF;IAED;IACA,IAAI,cAAc,CAAC,OAAO,IAAI,oBAAoB,EAAE;MAClD,KAAK,CAAC,QAAS,CAAC,aAAa,GAAG,aAAa,CAAC,UAAU,CAAC,WAAW,CAClE,oBAAoB,EACpB,cAAc,CAAC,OAAO,CAAC,UAAU,CAAA,CAAE,EACnC,4BAA4B,CAC7B;IACF;GACF,CAAC,OAAO,YAAY,EAAE;IACrB,KAAK,CAAC,OAAO,GAAG,UAAA,GAAU,YAAY,CAAC,OAAO,GAAA,oDAAA,GAAmD,cAAc,CAAC,UAAU,GAAA,8BAA6B;EACxJ;EAED,OAAO;IAAE,KAAK,EAAA,KAAA;IAAE,oBAAoB,EAAE;EAAK,CAAE;AAC/C;AAEA,SAAS,KAAK,CACZ,gBAA0B,EAC1B,eAAyB,EACzB,iBAAwC,EACxC,IAAiC,EAAA;;EAEjC,IAAM,YAAY,GAAG,SAAA,CAAC,GAA6B,EAAA;IACjD,IAAM,GAAG,GAAG,UAAA,GAAU,GAAG,GAAA,gDAAA,GAAgD,iBAAiB,CAAC,UAAU,GAAA,GAAG;IACxG,IAAM,OAAO,GAAG,GAAG,CAAC,IAAI,IAAI,SAAS,CAAC,WAAW;IACjD,IAAM,CAAC,GAAG,IAAI,SAAS,CACrB,GAAG,EACH,OAAO,EACP,iBAAiB,CAAC,MAAM,EACxB,iBAAiB,CAAC,OAAO,EACzB,iBAAiB,CAClB;IACD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,IAAM,SAAS,GACb,CAAA,CAAA,EAAA,GAAA,iBAAiB,CAAC,OAAO,CAAC,yBAAyB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAA,KACjF,iBAAiB,CAAC,OAAO,CAAC,kBAAkB;EAC9C,IAAI,CAAC,SAAS,IAAI,iBAAiB,CAAC,UAAU,EAAE;IAC9C,IAAM,MAAI,GAAG,iBAAiB,CAAC,UAAU;IACzC,IAAM,WAAW,GAAW,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE;IAC/E,IAAM,iBAAiB,GAAa,CAAC,WAAW,GAC5C,EAAE,GACF,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAC,SAAS,EAAA;MAAK,OAAA,SAAS,CAAC,WAAW,CAAA,CAAE;IAAvB,CAAuB,CAAC;IACtE,IACE,iBAAiB,CAAC,MAAM,KAAK,CAAC,IAC9B,iBAAiB,CAAC,IAAI,CAAC,UAAC,SAAS,EAAA;MAAK,OAAA,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAA1C,CAA0C,CAAC,EACjF;MACA,OAAO,IAAI,OAAO,CAAwB,UAAC,OAAO,EAAA;QAChD,iBAAiB,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAI,CAAC;QAC/C,OAAO,CAAC,iBAAiB,CAAC;MAC5B,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC;KACvB,MAAM,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAC,SAAS,EAAA;MAAK,OAAA,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAAzC,CAAyC,CAAC,EAAE;MAC3F,OAAO,QAAQ,CAAC,MAAI,EAAE,IAAI,CAAC,CACxB,IAAI,CAAC,UAAC,IAAI,EAAA;QACT,iBAAiB,CAAC,UAAU,GAAG,IAAI;QACnC,OAAO,iBAAiB;MAC1B,CAAC,CAAC,CACD,KAAK,CAAC,YAAY,CAAC;IACvB;EACF;EAED,OAAO,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC;AAC3C","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { MapperType } from \"../serializer\";\nimport { parseXML } from \"../util/xml\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\nimport { XML_CHARKEY, SerializerOptions } from \"../util/serializer.common\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes: DeserializationContentTypes;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(\n  deserializationContentTypes?: DeserializationContentTypes,\n  parsingOptions?: SerializerOptions\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new DeserializationPolicy(\n        nextPolicy,\n        options,\n        deserializationContentTypes,\n        parsingOptions\n      );\n    }\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\nexport const DefaultDeserializationOptions: DeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes\n  }\n};\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n  public readonly xmlCharKey: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    requestPolicyOptions: RequestPolicyOptions,\n    deserializationContentTypes?: DeserializationContentTypes,\n    parsingOptions: SerializerOptions = {}\n  ) {\n    super(nextPolicy, requestPolicyOptions);\n\n    this.jsonContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;\n    this.xmlContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;\n    this.xmlCharKey = parsingOptions.xmlCharKey ?? XML_CHARKEY;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then((response: HttpOperationResponse) =>\n      deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response, {\n        xmlCharKey: this.xmlCharKey\n      })\n    );\n  }\n}\n\nfunction getOperationResponse(\n  parsedResponse: HttpOperationResponse\n): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResourceLike = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter:\n      | undefined\n      | ((\n          operationSpec: OperationSpec,\n          response: HttpOperationResponse\n        ) => undefined | OperationResponse) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) =\n    parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nexport function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: HttpOperationResponse,\n  options: SerializerOptions = {}\n): Promise<HttpOperationResponse> {\n  const updatedOptions: Required<SerializerOptions> = {\n    rootName: options.rootName ?? \"\",\n    includeRoot: options.includeRoot ?? false,\n    xmlCharKey: options.xmlCharKey ?? XML_CHARKEY\n  };\n  return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(\n    (parsedResponse) => {\n      if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n      }\n\n      const operationSpec = parsedResponse.request.operationSpec;\n      if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n      }\n\n      const responseSpec = getOperationResponse(parsedResponse);\n\n      const { error, shouldReturnResponse } = handleErrorResponse(\n        parsedResponse,\n        operationSpec,\n        responseSpec\n      );\n      if (error) {\n        throw error;\n      } else if (shouldReturnResponse) {\n        return parsedResponse;\n      }\n\n      // An operation response spec does exist for current status code, so\n      // use it to deserialize the response.\n      if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n          let valueToDeserialize: any = parsedResponse.parsedBody;\n          if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n            valueToDeserialize =\n              typeof valueToDeserialize === \"object\"\n                ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n                : [];\n          }\n          try {\n            parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n              responseSpec.bodyMapper,\n              valueToDeserialize,\n              \"operationRes.parsedBody\",\n              options\n            );\n          } catch (innerError) {\n            const restError = new RestError(\n              `Error ${innerError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`,\n              undefined,\n              parsedResponse.status,\n              parsedResponse.request,\n              parsedResponse\n            );\n            throw restError;\n          }\n        } else if (operationSpec.httpMethod === \"HEAD\") {\n          // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n          parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n\n        if (responseSpec.headersMapper) {\n          parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n            responseSpec.headersMapper,\n            parsedResponse.headers.rawHeaders(),\n            \"operationRes.parsedHeaders\",\n            options\n          );\n        }\n      }\n\n      return parsedResponse;\n    }\n  );\n}\n\nfunction isOperationSpecEmpty(operationSpec: OperationSpec): boolean {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return (\n    expectedStatusCodes.length === 0 ||\n    (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\")\n  );\n}\n\nfunction handleErrorResponse(\n  parsedResponse: HttpOperationResponse,\n  operationSpec: OperationSpec,\n  responseSpec: OperationResponse | undefined\n): { error: RestError | null; shouldReturnResponse: boolean } {\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode: boolean = isOperationSpecEmpty(operationSpec)\n    ? isSuccessByStatus\n    : !!responseSpec;\n\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return { error: null, shouldReturnResponse: false };\n      }\n    } else {\n      return { error: null, shouldReturnResponse: false };\n    }\n  }\n\n  const errorResponseSpec = responseSpec ?? operationSpec.responses.default;\n  const streaming =\n    parsedResponse.request.streamResponseStatusCodes?.has(parsedResponse.status) ||\n    parsedResponse.request.streamResponseBody;\n  const initialErrorMessage = streaming\n    ? `Unexpected status code: ${parsedResponse.status}`\n    : (parsedResponse.bodyAsText as string);\n\n  const error = new RestError(\n    initialErrorMessage,\n    undefined,\n    parsedResponse.status,\n    parsedResponse.request,\n    parsedResponse\n  );\n\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let parsedError;\n      if (defaultBodyMapper) {\n        let valueToDeserialize: any = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize =\n            typeof parsedBody === \"object\" ? parsedBody[defaultBodyMapper.xmlElementName!] : [];\n        }\n        parsedError = operationSpec.serializer.deserialize(\n          defaultBodyMapper,\n          valueToDeserialize,\n          \"error.response.parsedBody\"\n        );\n      }\n\n      const internalError: any = parsedBody.error || parsedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n\n      if (defaultBodyMapper) {\n        error.response!.parsedBody = parsedError;\n      }\n    }\n\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response!.parsedHeaders = operationSpec.serializer.deserialize(\n        defaultHeadersMapper,\n        parsedResponse.headers.rawHeaders(),\n        \"operationRes.parsedHeaders\"\n      );\n    }\n  } catch (defaultError) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n\n  return { error, shouldReturnResponse: false };\n}\n\nfunction parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: HttpOperationResponse,\n  opts: Required<SerializerOptions>\n): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }): Promise<never> => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(\n      msg,\n      errCode,\n      operationResponse.status,\n      operationResponse.request,\n      operationResponse\n    );\n    return Promise.reject(e);\n  };\n\n  const streaming =\n    operationResponse.request.streamResponseStatusCodes?.has(operationResponse.status) ||\n    operationResponse.request.streamResponseBody;\n  if (!streaming && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n    if (\n      contentComponents.length === 0 ||\n      contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n    ) {\n      return new Promise<HttpOperationResponse>((resolve) => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text, opts)\n        .then((body) => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}