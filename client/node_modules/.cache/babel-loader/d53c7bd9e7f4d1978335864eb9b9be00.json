{"ast":null,"code":"var _jsxFileName = \"/home/saharsh/Music/digital-twins-explorer/client/src/components/ModelGraphViewerComponent/ModelGraphViewerCytoscapeComponent/ModelGraphViewerCytoscapeComponent.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React from \"react\";\nimport CytoscapeComponent from \"react-cytoscapejs\";\nimport { graphStyles, modelWithImageStyle, minZoomShowLabels, ellipsisMaxTextLength, ellipsisMaxTextLengthWithImage } from \"./config\";\nimport { colors, dagreOptions, colaOptions, klayOptions, fcoseOptions, d3ForceOptions, navigationOptions } from \"../../../config/CytoscapeConfig\";\nimport { settingsService } from \"../../../services/SettingsService\";\nimport { addNavigator } from \"../../../utils/utilities\";\nimport \"./ModelGraphViewerCytoscapeComponent.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModelGraphViewerCytoscapeLayouts = {\n  \"Cola\": {\n    ...colaOptions,\n    nodeSpacing: () => 40\n  },\n  \"Dagre\": dagreOptions,\n  \"fCoSE\": fcoseOptions,\n  \"Klay\": klayOptions,\n  \"d3Force\": d3ForceOptions\n};\nexport class ModelGraphViewerCytoscapeComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onNodeSelected = ({\n      target: node\n    }) => {\n      const {\n        onNodeClicked\n      } = this.props;\n      this.selectedNodes.push({\n        id: node.id()\n      });\n      this.highlightRelatedNodes();\n      if (onNodeClicked) {\n        onNodeClicked(node.id());\n      }\n    };\n    this.onNodeUnselected = e => {\n      const removed = this.selectedNodes.findIndex(x => x.id === e.target.id());\n      if (removed >= 0) {\n        this.selectedNodes.splice(removed, 1);\n        this.highlightRelatedNodes();\n      }\n    };\n    this.onEdgeSelected = e => {\n      this.props.onEdgeClicked(e.target.data());\n    };\n    this.onNodeDoubleClicked = e => {\n      if (this.props.onNodeDoubleClicked) {\n        this.props.onNodeDoubleClicked({\n          id: e.target.id()\n        });\n      }\n    };\n    this.onEdgeSelected = e => {\n      if (this.props.onEdgeClicked) {\n        this.props.onEdgeClicked(e.target.data());\n      }\n    };\n    this.onControlClicked = e => {\n      if (e.target === this.graphControl) {\n        const {\n          isHighlighting,\n          highlightFilteredNodes\n        } = this.props;\n        if (isHighlighting && highlightFilteredNodes) {\n          highlightFilteredNodes();\n        } else {\n          this.clearHighlighting();\n        }\n        if (this.props.onControlClicked) {\n          this.props.onControlClicked(e);\n        }\n      }\n    };\n    this.clearHighlighting = () => {\n      const cy = this.graphControl;\n      cy.edges().toggleClass(\"highlighted\", false);\n      cy.edges().toggleClass(\"opaque\", false);\n      cy.nodes().forEach(cyNode => {\n        cy.$id(cyNode.id()).toggleClass(\"highlighted\", false);\n        cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n      });\n    };\n    this.onNodeUnhover = () => {\n      if (this.hoverTimeout) {\n        clearTimeout(this.hoverTimeout);\n        this.hoverTimeout = null;\n      }\n      this.canRenderPopper = false;\n      this.unhoverTimeout = setTimeout(() => {\n        if (!this.canRenderPopper) {\n          this.removePopper();\n        }\n      }, 200);\n    };\n    this.onNodeHover = ({\n      target\n    }) => {\n      this.removePopper();\n      if (target !== this.graphControl) {\n        const {\n          category,\n          source,\n          relationshipId\n        } = target.data();\n        if (category === \"Model\" && this.props.onNodeMouseEnter) {\n          this.canRenderPopper = true;\n          this.hoverTimeout = setTimeout(async () => {\n            if (this.canRenderPopper) {\n              const {\n                properties,\n                telemetries\n              } = await this.props.onNodeMouseEnter(target.id());\n              const contentDiv = this.getPopperContent(target.id(), properties, telemetries);\n              document.body.appendChild(contentDiv);\n              this.renderPopper(target.id(), contentDiv);\n            }\n          }, 1000);\n        } else if (source && this.props.onEdgeMouseEnter) {\n          this.canRenderPopper = true;\n          this.hoverTimeout = setTimeout(async () => {\n            if (this.canRenderPopper) {\n              const relationship = await this.props.onEdgeMouseEnter(source, relationshipId);\n              const contentDiv = this.getPopperRelationshipContent(target.data(), relationship);\n              document.body.appendChild(contentDiv);\n              this.renderPopper(target.id(), contentDiv);\n            }\n          }, 1000);\n        }\n      }\n    };\n    this.getContents = (properties, telemetries) => {\n      let definedProperties = \"\";\n      let definedTelemetries = \"\";\n      for (const [key] of Object.entries(properties)) {\n        definedProperties += `<li>${key}</li>`;\n      }\n      if (telemetries) {\n        telemetries.forEach(r => definedTelemetries += `<li>${r.name}</li>`);\n      }\n      return {\n        definedTelemetries,\n        definedProperties\n      };\n    };\n    this.getRelationshipsContents = properties => {\n      let definedProperties = \"\";\n      for (const prop of properties) {\n        definedProperties += `<li>${prop}</li>`;\n      }\n      return {\n        definedProperties\n      };\n    };\n    this.getPopperContent = (modelId, properties, telemetries) => {\n      const {\n        definedProperties,\n        definedTelemetries\n      } = this.getContents(properties, telemetries);\n      const div = document.createElement(\"div\");\n      div.setAttribute(\"id\", \"cy-popper\");\n      div.addEventListener(\"mouseenter\", () => {\n        this.canRenderPopper = true;\n      });\n      div.addEventListener(\"mouseleave\", () => {\n        this.canRenderPopper = false;\n        this.removePopper();\n      });\n      div.innerHTML = `\n      <div>\n        <h4>DTID:</h4>\n        <p>${modelId}</p>\n      </div>\n      ${definedProperties && `<div>\n        <h4>PROPERTIES</h4>\n        <ul>${definedProperties}</ul>\n      </div>`}\n      ${definedTelemetries && `<div>\n        <h4>TELEMETRY</h4>\n        <ul>${definedTelemetries}</ul>\n      </div>`}`;\n      return div;\n    };\n    this.getPopperRelationshipContent = (data, relationship) => {\n      const {\n        source,\n        target,\n        label\n      } = data;\n      const properties = relationship.properties || [];\n      const {\n        definedProperties\n      } = this.getRelationshipsContents(properties);\n      const div = document.createElement(\"div\");\n      div.setAttribute(\"id\", \"cy-popper\");\n      div.addEventListener(\"mouseenter\", () => {\n        this.canRenderPopper = true;\n      });\n      div.addEventListener(\"mouseleave\", () => {\n        this.canRenderPopper = false;\n        this.removePopper();\n      });\n      if (relationship.componentModel) {\n        div.innerHTML = `\n        <div>\n          <h4>HOST MODEL:</h4>\n          <p>${source}</p>\n        </div>\n        <div>\n          <h4>COMPONENT NAME:</h4>\n          <p>${relationship.name}</p>\n        </div>\n        <div>\n          <h4>COMPONENT MODEL:</h4>\n          <p>${relationship.componentModel}</p>\n        </div>\n      `;\n      } else if (relationship.baseModel) {\n        div.innerHTML = `\n        <div>\n          <h4>EXTENDED MODEL:</h4>\n          <p>${source}</p>\n        </div>\n        <div>\n          <h4>EXTENDS</h4>\n        </div>\n        <div>\n          <h4>BASE MODEL:</h4>\n          <p>${relationship.baseModel}</p>\n        </div>\n      `;\n      } else {\n        div.innerHTML = `\n        <div>\n          <h4>SOURCE ID:</h4>\n          <p>${source}</p>\n        </div>\n        ${label && `<div>\n          <h4>RELATIONSHIP NAME:</h4>\n          <p>${label}</p>\n        </div>`}\n        ${target && `<div>\n          <h4>TARGET ID:</h4>\n          <p>${target}</p>\n        </div>`}\n      ${definedProperties && `<div>\n        <h4>PROPERTIES</h4>\n        <ul>${definedProperties}</ul>\n      `}`;\n      }\n      return div;\n    };\n    this.removePopper = () => {\n      const activePopper = document.querySelector(\"#cy-popper\");\n      if (activePopper) {\n        activePopper.parentNode.removeChild(activePopper);\n      }\n    };\n    this.renderPopper = (nodeId, content) => {\n      const cy = this.graphControl;\n      cy.$id(nodeId).popper({\n        content,\n        popper: {}\n      });\n    };\n    this.showAllNodes = () => {\n      const cy = this.graphControl;\n      cy.nodes().forEach(cyNode => {\n        cy.$id(cyNode.id()).toggleClass(\"hide\", false);\n      });\n      cy.edges().forEach(cyEdge => {\n        cy.$id(cyEdge.id()).toggleClass(\"hide\", false);\n      });\n    };\n    this.filterNodes = nodes => {\n      const cy = this.graphControl;\n      const cleanNodes = nodes.filter(n => n && n.id);\n      cy.nodes().forEach(cyNode => {\n        cy.$id(cyNode.id()).toggleClass(\"hide\", !cleanNodes.some(node => node.id === cyNode.id()));\n      });\n    };\n    this.onGraphZoom = () => {\n      const cy = this.graphControl;\n      if (cy.zoom() <= minZoomShowLabels && !this.isHidingLabels) {\n        this.isHidingLabels = true;\n        cy.edges().toggleClass(\"hide-label\", true);\n      } else {\n        this.isHidingLabels = false;\n        cy.edges().not(cy.$(\".extends\")).toggleClass(\"hide-label\", false);\n      }\n    };\n    this.ellipsisText = (text, modelId) => {\n      const backgroundImage = this.getBackgroundImage(modelId);\n      const ellipsisLength = this.getTextWidth(\"...\");\n      const maxLength = backgroundImage ? ellipsisMaxTextLengthWithImage - ellipsisLength : ellipsisMaxTextLength - ellipsisLength;\n      return `...${this.cutTextToMaxLength(text, maxLength)}`;\n    };\n    this.getTextWidth = text => {\n      this.hiddenTextRuler.current.innerHTML = text;\n      const offsetWidth = this.hiddenTextRuler.current.offsetWidth;\n      this.hiddenTextRuler.current.innerHTML = \"\";\n      return offsetWidth;\n    };\n    this.cutTextToMaxLength = (text, maxLength) => {\n      let length = this.getTextWidth(text);\n      let cutText = text.slice(Math.floor((length - maxLength) / length * text.length), text.length);\n      length = this.getTextWidth(cutText);\n      while (length > maxLength) {\n        const lastIndex = cutText.length;\n        cutText = cutText.slice(1, lastIndex);\n        length = this.getTextWidth(cutText);\n      }\n      return cutText;\n    };\n    this.onEdgeRightClick = () => {\n      this.setState({\n        hideContextMenu: false\n      });\n      this.onNodeUnhover();\n    };\n    this.onNodeRightClick = () => {\n      this.setState({\n        hideContextMenu: this.contextMenuItems.every(i => i.selector === \"edge\")\n      });\n    };\n    this.onControlRightClick = e => {\n      if (e.target === this.graphControl) {\n        this.setState({\n          hideContextMenu: true\n        });\n      }\n    };\n    this.onShowDestination = e => {\n      const target = e.target || e.cyTarget;\n      const cy = this.graphControl;\n      cy.animate({\n        fit: {\n          eles: cy.$id(target.target().id())\n        }\n      });\n    };\n    this.onShowSource = e => {\n      const target = e.target || e.cyTarget;\n      const cy = this.graphControl;\n      cy.animate({\n        fit: {\n          eles: cy.$id(target.source().id())\n        }\n      });\n    };\n    this.onScaleToRel = e => {\n      const target = e.target || e.cyTarget;\n      const cy = this.graphControl;\n      cy.animate({\n        fit: {\n          eles: cy.$(`[id = \"${target.source().id()}\"], [id = \"${target.target().id()}\"]`)\n        }\n      });\n    };\n    this.emitNodeEvent = (nodeId, event) => {\n      this.graphControl.$id(nodeId).emit(event);\n    };\n    this.state = {\n      hideContextMenu: false\n    };\n    this.graphControl = null;\n    this.selectedNodes = [];\n    this.layout = \"d3Force\";\n    this.hoverTimeout = null;\n    this.isHidingLabels = false;\n    this.hiddenTextRuler = /*#__PURE__*/React.createRef();\n    this.canRenderPopper = false;\n    this.contextMenuItems = [{\n      id: \"show-source\",\n      content: \"Show source\",\n      selector: \"edge\",\n      onClickFunction: this.onShowSource\n    }, {\n      id: \"show-destination\",\n      content: \"Show destination\",\n      selector: \"edge\",\n      onClickFunction: this.onShowDestination\n    }, {\n      id: \"scale-to-rel\",\n      content: \"Scale to relationship\",\n      selector: \"edge\",\n      onClickFunction: this.onScaleToRel\n    }];\n  }\n  componentDidMount() {\n    const cy = this.graphControl;\n    this.contextMenu = cy.contextMenus({\n      menuItems: this.contextMenuItems,\n      menuItemClasses: [\"custom-menu-item\"],\n      contextMenuClasses: [\"custom-context-menu\"]\n    });\n  }\n  addNodes(nodes) {\n    const mapped = nodes.filter(x => this.graphControl.$id(x.id).length === 0).map(x => ({\n      data: {\n        id: x.id,\n        label: this.getTextWidth(x.label) > ellipsisMaxTextLength ? this.ellipsisText(x.label, x.id) : x.label,\n        category: \"Model\"\n      }\n    }));\n    this.graphControl.add(mapped);\n  }\n  removeNodes(nodes) {\n    if (nodes) {\n      nodes.forEach(x => {\n        const i = this.selectedNodes.findIndex(y => y.id === x);\n        if (i >= 0) {\n          this.selectedNodes.splice(i, 1);\n        }\n        this.graphControl.$id(x).remove();\n      });\n    }\n  }\n  hideSelectedNodes() {\n    this.selectedNodes.forEach(x => {\n      this.graphControl.$id(x.id).toggleClass(\"hide\");\n    });\n  }\n  clearNodes() {\n    this.selectedNodes = [];\n    this.graphControl.elements().remove();\n  }\n  getNodes() {\n    return this.graphControl.nodes().map(x => x.id());\n  }\n  addRelationships(relationships, relationshipClassName = \"\") {\n    const mapped = relationships.map(x => ({\n      data: {\n        source: x.sourceId,\n        target: x.targetId,\n        label: x.relationshipName,\n        relationshipId: x.relationshipId,\n        id: `${x.sourceId}_${x.targetId}_${x.relationshipName}`\n      },\n      classes: relationshipClassName\n    })).filter(x => this.graphControl.$id(x.id).length === 0);\n    const checked = [];\n    for (const rel of mapped) {\n      const src = rel.data.source;\n      const tar = rel.data.target;\n      const el = this.graphControl.nodes(`[id=\"${src}\"]`);\n      const elt = this.graphControl.nodes(`[id=\"${tar}\"]`);\n      if (!el.empty() && !elt.empty()) {\n        checked.push(rel);\n      }\n    }\n    this.graphControl.add(checked);\n  }\n  getRelationships() {\n    return this.graphControl.edges().map(x => x.id());\n  }\n  removeRelationships(relationships) {\n    relationships.forEach(x => {\n      this.graphControl.$id(`${x.sourceId}_${x.targetId}_${x.relationshipName}`).remove();\n    });\n  }\n  getColor(i) {\n    const im = i % colors.length;\n    return colors[colors.length - 1 - im];\n  }\n  getBackgroundImage(modelId) {\n    return settingsService.getModelImage(modelId);\n  }\n  doLayout(progressCallback) {\n    const cy = this.graphControl;\n    cy.batch(() => {\n      const el = cy.nodes(\"*\");\n      // Add model images\n      for (let i = 0; i < el.length; i++) {\n        const modelId = el[i].data(\"id\");\n        const backgroundImage = this.getBackgroundImage(modelId);\n        if (backgroundImage) {\n          cy.elements(`node[id=\"${modelId}\"]`).style({\n            \"background-image\": `url(${backgroundImage})`,\n            ...modelWithImageStyle\n          });\n        } else {\n          cy.elements(`node[id=\"${modelId}\"]`).style({\n            ...modelWithImageStyle\n          });\n        }\n      }\n    });\n    return new Promise(resolve => {\n      const options = ModelGraphViewerCytoscapeLayouts[this.layout];\n      if (progressCallback && options.tick) {\n        options.tick = progressCallback;\n      }\n      const layout = cy.layout(options);\n      layout.on(\"layoutstop\", () => resolve());\n      layout.run();\n    });\n  }\n  setLayout(layout) {\n    this.layout = layout;\n  }\n  updateModelIcon(modelId) {\n    const cy = this.graphControl;\n    const backgroundImage = this.getBackgroundImage(modelId);\n    if (backgroundImage) {\n      cy.elements(`node[id=\"${modelId}\"]`).style({\n        \"background-image\": `url(${backgroundImage})`,\n        ...modelWithImageStyle\n      });\n    } else {\n      cy.elements(`node[id=\"${modelId}\"]`).style({\n        ...modelWithImageStyle\n      });\n    }\n  }\n  highlightRelatedNodes() {\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    if (this.selectedNodes && this.selectedNodes.length > 0) {\n      cy.edges().toggleClass(\"opaque\", true);\n      let relatedNodesIds = [];\n      this.selectedNodes.forEach(selectedNodeItem => {\n        const selectedNode = cy.nodes().filter(n => n.id() === selectedNodeItem.id);\n        const connectedEdges = selectedNode.connectedEdges();\n        connectedEdges.forEach(edge => {\n          cy.$id(edge.data().id).toggleClass(\"highlighted\", true);\n          cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n        });\n        const selectedNodeRelatedNodesIds = connectedEdges.map(edge => selectedNode.id() === edge.data().source ? edge.data().target : edge.data().source);\n        relatedNodesIds = relatedNodesIds.concat(selectedNodeRelatedNodesIds);\n        relatedNodesIds.push(selectedNode.id());\n      });\n      cy.nodes().forEach(cyNode => {\n        if (relatedNodesIds.indexOf(cyNode.id()) === -1) {\n          cy.$id(cyNode.id()).toggleClass(\"opaque\", true);\n        } else {\n          cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n        }\n      });\n    }\n  }\n  highlightNodes(nodes, highlightEdges) {\n    const nodesIds = nodes.map(node => node.id);\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    cy.edges().toggleClass(\"opaque\", true);\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"opaque\", true);\n    });\n    nodes.forEach(node => {\n      const selectedNode = cy.nodes().filter(n => node && n.id() === node.id);\n      cy.$id(selectedNode.id()).toggleClass(\"opaque\", false);\n      cy.$id(selectedNode.id()).toggleClass(\"highlighted\", true);\n      const connectedEdges = selectedNode.connectedEdges();\n      connectedEdges.forEach(edge => {\n        if (nodesIds.includes(edge.data().source) && nodesIds.includes(edge.data().target)) {\n          cy.$id(edge.data().id).toggleClass(\"highlighted\", highlightEdges);\n          cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n        }\n      });\n    });\n  }\n  zoomToFit() {\n    this.graphControl.fit();\n  }\n  center() {\n    this.graphControl.center();\n  }\n  zoomIn() {\n    let zoomLevel = this.graphControl.zoom();\n    zoomLevel += 0.15;\n    this.graphControl.zoom(zoomLevel);\n  }\n  zoomOut() {\n    let zoomLevel = this.graphControl.zoom();\n    if (zoomLevel > 0.3) {\n      zoomLevel -= 0.15;\n      this.graphControl.zoom(zoomLevel);\n    }\n  }\n  render() {\n    const {\n      hideContextMenu\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n        elements: [],\n        className: `graph-control ${hideContextMenu ? \"hide-context\" : \"\"}`,\n        stylesheet: graphStyles,\n        maxZoom: 2,\n        cy: cy => {\n          if (this.graphControl !== cy) {\n            this.graphControl = cy;\n            addNavigator(this.graphControl, navigationOptions, \"#model-graph-viewer-nav\");\n            this.graphControl.dblclick();\n            this.graphControl.on(\"select\", \"node\", this.onNodeSelected);\n            this.graphControl.on(\"unselect\", \"node\", this.onNodeUnselected);\n            this.graphControl.on(\"select\", \"edge\", this.onEdgeSelected);\n            this.graphControl.on(\"click\", this.onControlClicked);\n            this.graphControl.on(\"dblclick\", \"node\", this.onNodeDoubleClicked);\n            this.graphControl.on(\"mouseover\", this.onNodeHover);\n            this.graphControl.on(\"mouseout\", this.onNodeUnhover);\n            this.graphControl.on(\"mousedown\", this.onNodeUnhover);\n            this.graphControl.on(\"zoom\", this.onGraphZoom);\n            this.graphControl.on(\"cxttap\", \"edge\", this.onEdgeRightClick);\n            this.graphControl.on(\"cxttap\", \"node\", this.onNodeRightClick);\n            this.graphControl.on(\"cxttap\", this.onControlRightClick);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigator-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"model-graph-viewer-nav\",\n          className: \"graph-navigator\",\n          role: \"presentation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"hidden-text-ruler\",\n        ref: this.hiddenTextRuler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","CytoscapeComponent","graphStyles","modelWithImageStyle","minZoomShowLabels","ellipsisMaxTextLength","ellipsisMaxTextLengthWithImage","colors","dagreOptions","colaOptions","klayOptions","fcoseOptions","d3ForceOptions","navigationOptions","settingsService","addNavigator","jsxDEV","_jsxDEV","ModelGraphViewerCytoscapeLayouts","nodeSpacing","ModelGraphViewerCytoscapeComponent","Component","constructor","props","onNodeSelected","target","node","onNodeClicked","selectedNodes","push","id","highlightRelatedNodes","onNodeUnselected","e","removed","findIndex","x","splice","onEdgeSelected","onEdgeClicked","data","onNodeDoubleClicked","onControlClicked","graphControl","isHighlighting","highlightFilteredNodes","clearHighlighting","cy","edges","toggleClass","nodes","forEach","cyNode","$id","onNodeUnhover","hoverTimeout","clearTimeout","canRenderPopper","unhoverTimeout","setTimeout","removePopper","onNodeHover","category","source","relationshipId","onNodeMouseEnter","properties","telemetries","contentDiv","getPopperContent","document","body","appendChild","renderPopper","onEdgeMouseEnter","relationship","getPopperRelationshipContent","getContents","definedProperties","definedTelemetries","key","Object","entries","r","name","getRelationshipsContents","prop","modelId","div","createElement","setAttribute","addEventListener","innerHTML","label","componentModel","baseModel","activePopper","querySelector","parentNode","removeChild","nodeId","content","popper","showAllNodes","cyEdge","filterNodes","cleanNodes","filter","n","some","onGraphZoom","zoom","isHidingLabels","not","$","ellipsisText","text","backgroundImage","getBackgroundImage","ellipsisLength","getTextWidth","maxLength","cutTextToMaxLength","hiddenTextRuler","current","offsetWidth","length","cutText","slice","Math","floor","lastIndex","onEdgeRightClick","setState","hideContextMenu","onNodeRightClick","contextMenuItems","every","i","selector","onControlRightClick","onShowDestination","cyTarget","animate","fit","eles","onShowSource","onScaleToRel","emitNodeEvent","event","emit","state","layout","createRef","onClickFunction","componentDidMount","contextMenu","contextMenus","menuItems","menuItemClasses","contextMenuClasses","addNodes","mapped","map","add","removeNodes","y","remove","hideSelectedNodes","clearNodes","elements","getNodes","addRelationships","relationships","relationshipClassName","sourceId","targetId","relationshipName","classes","checked","rel","src","tar","el","elt","empty","getRelationships","removeRelationships","getColor","im","getModelImage","doLayout","progressCallback","batch","style","Promise","resolve","options","tick","on","run","setLayout","updateModelIcon","relatedNodesIds","selectedNodeItem","selectedNode","connectedEdges","edge","selectedNodeRelatedNodesIds","concat","indexOf","highlightNodes","highlightEdges","nodesIds","includes","zoomToFit","center","zoomIn","zoomLevel","zoomOut","render","position","height","children","className","stylesheet","maxZoom","dblclick","fileName","_jsxFileName","lineNumber","columnNumber","role","ref"],"sources":["/home/saharsh/Music/digital-twins-explorer/client/src/components/ModelGraphViewerComponent/ModelGraphViewerCytoscapeComponent/ModelGraphViewerCytoscapeComponent.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React from \"react\";\nimport CytoscapeComponent from \"react-cytoscapejs\";\n\nimport { graphStyles, modelWithImageStyle, minZoomShowLabels, ellipsisMaxTextLength, ellipsisMaxTextLengthWithImage } from \"./config\";\nimport { colors, dagreOptions, colaOptions, klayOptions, fcoseOptions, d3ForceOptions, navigationOptions } from \"../../../config/CytoscapeConfig\";\nimport { settingsService } from \"../../../services/SettingsService\";\nimport { addNavigator } from \"../../../utils/utilities\";\n\nimport \"./ModelGraphViewerCytoscapeComponent.scss\";\n\nexport const ModelGraphViewerCytoscapeLayouts = {\n  \"Cola\": { ...colaOptions, nodeSpacing: () => 40 },\n  \"Dagre\": dagreOptions,\n  \"fCoSE\": fcoseOptions,\n  \"Klay\": klayOptions,\n  \"d3Force\": d3ForceOptions\n};\n\nexport class ModelGraphViewerCytoscapeComponent extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hideContextMenu: false\n    };\n    this.graphControl = null;\n    this.selectedNodes = [];\n    this.layout = \"d3Force\";\n    this.hoverTimeout = null;\n    this.isHidingLabels = false;\n    this.hiddenTextRuler = React.createRef();\n    this.canRenderPopper = false;\n    this.contextMenuItems = [\n      {\n        id: \"show-source\",\n        content: \"Show source\",\n        selector: \"edge\",\n        onClickFunction: this.onShowSource\n      },\n      {\n        id: \"show-destination\",\n        content: \"Show destination\",\n        selector: \"edge\",\n        onClickFunction: this.onShowDestination\n      },\n      {\n        id: \"scale-to-rel\",\n        content: \"Scale to relationship\",\n        selector: \"edge\",\n        onClickFunction: this.onScaleToRel\n      }\n    ];\n  }\n\n  componentDidMount() {\n    const cy = this.graphControl;\n    this.contextMenu = cy.contextMenus({\n      menuItems: this.contextMenuItems,\n      menuItemClasses: [ \"custom-menu-item\" ],\n      contextMenuClasses: [ \"custom-context-menu\" ]\n    });\n  }\n\n  addNodes(nodes) {\n    const mapped = nodes\n      .filter(x => this.graphControl.$id(x.id).length === 0)\n      .map(x => ({\n        data: {\n          id: x.id,\n          label: this.getTextWidth(x.label) > ellipsisMaxTextLength ? this.ellipsisText(x.label, x.id) : x.label,\n          category: \"Model\"\n        }\n      }));\n\n    this.graphControl.add(mapped);\n  }\n\n  removeNodes(nodes) {\n    if (nodes) {\n      nodes.forEach(x => {\n        const i = this.selectedNodes.findIndex(y => y.id === x);\n        if (i >= 0) {\n          this.selectedNodes.splice(i, 1);\n        }\n\n        this.graphControl.$id(x).remove();\n      });\n    }\n  }\n\n  hideSelectedNodes() {\n    this.selectedNodes.forEach(x => {\n      this.graphControl.$id(x.id).toggleClass(\"hide\");\n    });\n  }\n\n  clearNodes() {\n    this.selectedNodes = [];\n    this.graphControl.elements().remove();\n  }\n\n  getNodes() {\n    return this.graphControl.nodes().map(x => x.id());\n  }\n\n  addRelationships(relationships, relationshipClassName = \"\") {\n    const mapped = relationships\n      .map(x => ({\n        data: {\n          source: x.sourceId,\n          target: x.targetId,\n          label: x.relationshipName,\n          relationshipId: x.relationshipId,\n          id: `${x.sourceId}_${x.targetId}_${x.relationshipName}`\n        },\n        classes: relationshipClassName\n      }))\n      .filter(x => this.graphControl.$id(x.id).length === 0);\n\n    const checked = [];\n    for (const rel of mapped) {\n      const src = rel.data.source;\n      const tar = rel.data.target;\n      const el = this.graphControl.nodes(`[id=\"${src}\"]`);\n      const elt = this.graphControl.nodes(`[id=\"${tar}\"]`);\n      if (!el.empty() && !elt.empty()) {\n        checked.push(rel);\n      }\n    }\n\n    this.graphControl.add(checked);\n  }\n\n  getRelationships() {\n    return this.graphControl.edges().map(x => x.id());\n  }\n\n  removeRelationships(relationships) {\n    relationships.forEach(x => {\n      this.graphControl.$id(`${x.sourceId}_${x.targetId}_${x.relationshipName}`).remove();\n    });\n  }\n\n  getColor(i) {\n    const im = i % colors.length;\n    return (colors[(colors.length - 1) - im]);\n  }\n\n  getBackgroundImage(modelId) {\n    return settingsService.getModelImage(modelId);\n  }\n\n  doLayout(progressCallback) {\n    const cy = this.graphControl;\n    cy.batch(() => {\n      const el = cy.nodes(\"*\");\n      // Add model images\n      for (let i = 0; i < el.length; i++) {\n        const modelId = el[i].data(\"id\");\n        const backgroundImage = this.getBackgroundImage(modelId);\n        if (backgroundImage) {\n          cy.elements(`node[id=\"${modelId}\"]`).style({\n            \"background-image\": `url(${backgroundImage})`,\n            ...modelWithImageStyle\n          });\n        } else {\n          cy.elements(`node[id=\"${modelId}\"]`).style({\n            ...modelWithImageStyle\n          });\n        }\n      }\n    });\n\n    return new Promise(resolve => {\n      const options = ModelGraphViewerCytoscapeLayouts[this.layout];\n      if (progressCallback && options.tick) {\n        options.tick = progressCallback;\n      }\n      const layout = cy.layout(options);\n      layout.on(\"layoutstop\", () => resolve());\n      layout.run();\n    });\n  }\n\n  setLayout(layout) {\n    this.layout = layout;\n  }\n\n  updateModelIcon(modelId) {\n    const cy = this.graphControl;\n    const backgroundImage = this.getBackgroundImage(modelId);\n    if (backgroundImage) {\n      cy.elements(`node[id=\"${modelId}\"]`).style({\n        \"background-image\": `url(${backgroundImage})`,\n        ...modelWithImageStyle\n      });\n    } else {\n      cy.elements(`node[id=\"${modelId}\"]`).style({\n        ...modelWithImageStyle\n      });\n    }\n  }\n\n  onNodeSelected = ({ target: node }) => {\n    const { onNodeClicked } = this.props;\n    this.selectedNodes.push({ id: node.id() });\n    this.highlightRelatedNodes();\n    if (onNodeClicked) {\n      onNodeClicked(node.id());\n    }\n  }\n\n  onNodeUnselected = e => {\n    const removed = this.selectedNodes.findIndex(x => x.id === e.target.id());\n    if (removed >= 0) {\n      this.selectedNodes.splice(removed, 1);\n      this.highlightRelatedNodes();\n    }\n  }\n\n  onEdgeSelected = e => {\n    this.props.onEdgeClicked(e.target.data());\n  }\n\n  onNodeDoubleClicked = e => {\n    if (this.props.onNodeDoubleClicked) {\n      this.props.onNodeDoubleClicked({ id: e.target.id() });\n    }\n  }\n\n  onEdgeSelected = e => {\n    if (this.props.onEdgeClicked) {\n      this.props.onEdgeClicked(e.target.data());\n    }\n  }\n\n  onControlClicked = e => {\n    if (e.target === this.graphControl) {\n      const { isHighlighting, highlightFilteredNodes } = this.props;\n      if (isHighlighting && highlightFilteredNodes) {\n        highlightFilteredNodes();\n      } else {\n        this.clearHighlighting();\n      }\n      if (this.props.onControlClicked) {\n        this.props.onControlClicked(e);\n      }\n    }\n  }\n\n  highlightRelatedNodes() {\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    if (this.selectedNodes && this.selectedNodes.length > 0) {\n      cy.edges().toggleClass(\"opaque\", true);\n      let relatedNodesIds = [];\n      this.selectedNodes.forEach(selectedNodeItem => {\n        const selectedNode = cy.nodes().filter(n => n.id() === selectedNodeItem.id);\n        const connectedEdges = selectedNode.connectedEdges();\n        connectedEdges.forEach(edge => {\n          cy.$id(edge.data().id).toggleClass(\"highlighted\", true);\n          cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n        });\n        const selectedNodeRelatedNodesIds = connectedEdges.map(edge =>\n          selectedNode.id() === edge.data().source ? edge.data().target : edge.data().source);\n        relatedNodesIds = relatedNodesIds.concat(selectedNodeRelatedNodesIds);\n        relatedNodesIds.push(selectedNode.id());\n      });\n      cy.nodes().forEach(cyNode => {\n        if (relatedNodesIds.indexOf(cyNode.id()) === -1) {\n          cy.$id(cyNode.id()).toggleClass(\"opaque\", true);\n        } else {\n          cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n        }\n      });\n    }\n  }\n\n  highlightNodes(nodes, highlightEdges) {\n    const nodesIds = nodes.map(node => node.id);\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    cy.edges().toggleClass(\"opaque\", true);\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"opaque\", true);\n    });\n    nodes.forEach(node => {\n      const selectedNode = cy.nodes().filter(n => node && n.id() === node.id);\n      cy.$id(selectedNode.id()).toggleClass(\"opaque\", false);\n      cy.$id(selectedNode.id()).toggleClass(\"highlighted\", true);\n      const connectedEdges = selectedNode.connectedEdges();\n      connectedEdges\n        .forEach(edge => {\n          if (nodesIds.includes(edge.data().source)\n            && nodesIds.includes(edge.data().target)) {\n            cy.$id(edge.data().id).toggleClass(\"highlighted\", highlightEdges);\n            cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n          }\n        });\n    });\n  }\n\n  clearHighlighting = () => {\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    cy.edges().toggleClass(\"opaque\", false);\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"highlighted\", false);\n      cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n    });\n  }\n\n  zoomToFit() {\n    this.graphControl.fit();\n  }\n\n  center() {\n    this.graphControl.center();\n  }\n\n  zoomIn() {\n    let zoomLevel = this.graphControl.zoom();\n    zoomLevel += 0.15;\n    this.graphControl.zoom(zoomLevel);\n  }\n\n  zoomOut() {\n    let zoomLevel = this.graphControl.zoom();\n    if (zoomLevel > 0.3) {\n      zoomLevel -= 0.15;\n      this.graphControl.zoom(zoomLevel);\n    }\n  }\n\n  onNodeUnhover = () => {\n    if (this.hoverTimeout) {\n      clearTimeout(this.hoverTimeout);\n      this.hoverTimeout = null;\n    }\n    this.canRenderPopper = false;\n    this.unhoverTimeout = setTimeout(() => {\n      if (!this.canRenderPopper) {\n        this.removePopper();\n      }\n    }, 200);\n  }\n\n  onNodeHover = ({ target }) => {\n    this.removePopper();\n    if (target !== this.graphControl) {\n      const { category, source, relationshipId } = target.data();\n      if (category === \"Model\" && this.props.onNodeMouseEnter) {\n        this.canRenderPopper = true;\n        this.hoverTimeout = setTimeout(async () => {\n          if (this.canRenderPopper) {\n            const { properties, telemetries } = await this.props.onNodeMouseEnter(target.id());\n            const contentDiv = this.getPopperContent(target.id(), properties, telemetries);\n            document.body.appendChild(contentDiv);\n            this.renderPopper(target.id(), contentDiv);\n          }\n        }, 1000);\n      } else if (source && this.props.onEdgeMouseEnter) {\n        this.canRenderPopper = true;\n        this.hoverTimeout = setTimeout(async () => {\n          if (this.canRenderPopper) {\n            const relationship = await this.props.onEdgeMouseEnter(source, relationshipId);\n            const contentDiv = this.getPopperRelationshipContent(target.data(), relationship);\n            document.body.appendChild(contentDiv);\n            this.renderPopper(target.id(), contentDiv);\n          }\n        }, 1000);\n      }\n    }\n  }\n\n  getContents = (properties, telemetries) => {\n    let definedProperties = \"\";\n    let definedTelemetries = \"\";\n    for (const [ key ] of Object.entries(properties)) {\n      definedProperties += `<li>${key}</li>`;\n    }\n    if (telemetries) {\n      telemetries.forEach(r => definedTelemetries += `<li>${r.name}</li>`);\n    }\n    return { definedTelemetries, definedProperties };\n  }\n\n  getRelationshipsContents = properties => {\n    let definedProperties = \"\";\n    for (const prop of properties) {\n      definedProperties += `<li>${prop}</li>`;\n    }\n    return { definedProperties };\n  }\n\n  getPopperContent = (modelId, properties, telemetries) => {\n    const { definedProperties, definedTelemetries } = this.getContents(properties, telemetries);\n    const div = document.createElement(\"div\");\n    div.setAttribute(\"id\", \"cy-popper\");\n    div.addEventListener(\"mouseenter\", () => {\n      this.canRenderPopper = true;\n    });\n    div.addEventListener(\"mouseleave\", () => {\n      this.canRenderPopper = false;\n      this.removePopper();\n    });\n    div.innerHTML = `\n      <div>\n        <h4>DTID:</h4>\n        <p>${modelId}</p>\n      </div>\n      ${definedProperties && `<div>\n        <h4>PROPERTIES</h4>\n        <ul>${definedProperties}</ul>\n      </div>`}\n      ${definedTelemetries && `<div>\n        <h4>TELEMETRY</h4>\n        <ul>${definedTelemetries}</ul>\n      </div>`}`;\n\n    return div;\n  };\n\n  getPopperRelationshipContent = (data, relationship) => {\n    const {source, target, label } = data;\n    const properties = relationship.properties || [];\n    const { definedProperties } = this.getRelationshipsContents(properties);\n    const div = document.createElement(\"div\");\n    div.setAttribute(\"id\", \"cy-popper\");\n    div.addEventListener(\"mouseenter\", () => {\n      this.canRenderPopper = true;\n    });\n    div.addEventListener(\"mouseleave\", () => {\n      this.canRenderPopper = false;\n      this.removePopper();\n    });\n\n    if (relationship.componentModel) {\n      div.innerHTML = `\n        <div>\n          <h4>HOST MODEL:</h4>\n          <p>${source}</p>\n        </div>\n        <div>\n          <h4>COMPONENT NAME:</h4>\n          <p>${relationship.name}</p>\n        </div>\n        <div>\n          <h4>COMPONENT MODEL:</h4>\n          <p>${relationship.componentModel}</p>\n        </div>\n      `;\n    } else if (relationship.baseModel) {\n      div.innerHTML = `\n        <div>\n          <h4>EXTENDED MODEL:</h4>\n          <p>${source}</p>\n        </div>\n        <div>\n          <h4>EXTENDS</h4>\n        </div>\n        <div>\n          <h4>BASE MODEL:</h4>\n          <p>${relationship.baseModel}</p>\n        </div>\n      `;\n    } else {\n      div.innerHTML = `\n        <div>\n          <h4>SOURCE ID:</h4>\n          <p>${source}</p>\n        </div>\n        ${label && `<div>\n          <h4>RELATIONSHIP NAME:</h4>\n          <p>${label}</p>\n        </div>`}\n        ${target && `<div>\n          <h4>TARGET ID:</h4>\n          <p>${target}</p>\n        </div>`}\n      ${definedProperties && `<div>\n        <h4>PROPERTIES</h4>\n        <ul>${definedProperties}</ul>\n      `}`;\n    }\n\n    return div;\n  };\n\n  removePopper = () => {\n    const activePopper = document.querySelector(\"#cy-popper\");\n    if (activePopper) {\n      activePopper.parentNode.removeChild(activePopper);\n    }\n  }\n\n  renderPopper = (nodeId, content) => {\n    const cy = this.graphControl;\n    cy.$id(nodeId).popper({\n      content,\n      popper: {}\n    });\n  }\n\n  showAllNodes = () => {\n    const cy = this.graphControl;\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"hide\", false);\n    });\n    cy.edges().forEach(cyEdge => {\n      cy.$id(cyEdge.id()).toggleClass(\"hide\", false);\n    });\n  }\n\n  filterNodes = nodes => {\n    const cy = this.graphControl;\n    const cleanNodes = nodes.filter(n => n && n.id);\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"hide\", !cleanNodes.some(node => node.id === cyNode.id()));\n    });\n  }\n\n  onGraphZoom = () => {\n    const cy = this.graphControl;\n    if (cy.zoom() <= minZoomShowLabels && !this.isHidingLabels) {\n      this.isHidingLabels = true;\n      cy.edges().toggleClass(\"hide-label\", true);\n    } else {\n      this.isHidingLabels = false;\n      cy.edges().not(cy.$(\".extends\"))\n        .toggleClass(\"hide-label\", false);\n    }\n  }\n\n  ellipsisText = (text, modelId) => {\n    const backgroundImage = this.getBackgroundImage(modelId);\n    const ellipsisLength = this.getTextWidth(\"...\");\n    const maxLength = backgroundImage ? (ellipsisMaxTextLengthWithImage - ellipsisLength) : (ellipsisMaxTextLength - ellipsisLength);\n    return `...${this.cutTextToMaxLength(text, maxLength)}`;\n  }\n\n  getTextWidth = text => {\n    this.hiddenTextRuler.current.innerHTML = text;\n    const offsetWidth = this.hiddenTextRuler.current.offsetWidth;\n    this.hiddenTextRuler.current.innerHTML = \"\";\n    return offsetWidth;\n  }\n\n  cutTextToMaxLength = (text, maxLength) => {\n    let length = this.getTextWidth(text);\n    let cutText = text.slice(Math.floor((length - maxLength) / length * text.length), text.length);\n    length = this.getTextWidth(cutText);\n    while (length > maxLength) {\n      const lastIndex = cutText.length;\n      cutText = cutText.slice(1, lastIndex);\n      length = this.getTextWidth(cutText);\n    }\n    return cutText;\n  }\n\n  onEdgeRightClick = () => {\n    this.setState({ hideContextMenu: false });\n    this.onNodeUnhover();\n  }\n\n  onNodeRightClick = () => {\n    this.setState({ hideContextMenu: this.contextMenuItems.every(i => i.selector === \"edge\") });\n  }\n\n  onControlRightClick = e => {\n    if (e.target === this.graphControl) {\n      this.setState({ hideContextMenu: true });\n    }\n  }\n\n  onShowDestination = e => {\n    const target = e.target || e.cyTarget;\n    const cy = this.graphControl;\n    cy.animate({\n      fit: {\n        eles: cy.$id(target.target().id())\n      }\n    });\n  }\n\n  onShowSource = e => {\n    const target = e.target || e.cyTarget;\n    const cy = this.graphControl;\n    cy.animate({\n      fit: {\n        eles: cy.$id(target.source().id())\n      }\n    });\n  }\n\n  onScaleToRel = e => {\n    const target = e.target || e.cyTarget;\n    const cy = this.graphControl;\n    cy.animate({\n      fit: {\n        eles: cy.$(`[id = \"${target.source().id()}\"], [id = \"${target.target().id()}\"]`)\n      }\n    });\n  }\n\n  emitNodeEvent = (nodeId, event) => {\n    this.graphControl.$id(nodeId).emit(event);\n  }\n\n  render() {\n    const { hideContextMenu } = this.state;\n    return (\n      <div style={{ position: \"relative\", height: \"100%\" }}>\n        <CytoscapeComponent elements={[]}\n          className={`graph-control ${hideContextMenu ? \"hide-context\" : \"\"}`}\n          stylesheet={graphStyles}\n          maxZoom={2}\n          cy={cy => {\n            if (this.graphControl !== cy) {\n              this.graphControl = cy;\n              addNavigator(this.graphControl, navigationOptions, \"#model-graph-viewer-nav\");\n              this.graphControl.dblclick();\n              this.graphControl.on(\"select\", \"node\", this.onNodeSelected);\n              this.graphControl.on(\"unselect\", \"node\", this.onNodeUnselected);\n              this.graphControl.on(\"select\", \"edge\", this.onEdgeSelected);\n              this.graphControl.on(\"click\", this.onControlClicked);\n              this.graphControl.on(\"dblclick\", \"node\", this.onNodeDoubleClicked);\n              this.graphControl.on(\"mouseover\", this.onNodeHover);\n              this.graphControl.on(\"mouseout\", this.onNodeUnhover);\n              this.graphControl.on(\"mousedown\", this.onNodeUnhover);\n              this.graphControl.on(\"zoom\", this.onGraphZoom);\n              this.graphControl.on(\"cxttap\", \"edge\", this.onEdgeRightClick);\n              this.graphControl.on(\"cxttap\", \"node\", this.onNodeRightClick);\n              this.graphControl.on(\"cxttap\", this.onControlRightClick);\n            }\n          }} />\n        <div className=\"navigator-container\">\n          <div id=\"model-graph-viewer-nav\" className=\"graph-navigator\" role=\"presentation\" />\n        </div>\n        <div id=\"hidden-text-ruler\" ref={this.hiddenTextRuler} />\n      </div>\n    );\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}