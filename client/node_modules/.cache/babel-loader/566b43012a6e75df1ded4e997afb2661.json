{"ast":null,"code":"/**\n * Determines the effective checked state of a menu item.\n *\n * @param item {IContextualMenuItem} to get the check state of.\n * @returns {true} if the item is checked.\n * @returns {false} if the item is unchecked.\n * @returns {null} if the item is not checkable.\n */\nexport function getIsChecked(item) {\n  if (item.canCheck) {\n    return !!(item.isChecked || item.checked);\n  }\n  if (typeof item.isChecked === 'boolean') {\n    return item.isChecked;\n  }\n  if (typeof item.checked === 'boolean') {\n    return item.checked;\n  }\n  // Item is not checkable.\n  return null;\n}\nexport function hasSubmenu(item) {\n  return !!(item.subMenuProps || item.items);\n}\nexport function isItemDisabled(item) {\n  return !!(item.isDisabled || item.disabled);\n}\nexport function getMenuItemAriaRole(item) {\n  var isChecked = getIsChecked(item);\n  var canCheck = isChecked !== null;\n  return canCheck ? 'menuitemcheckbox' : 'menuitem';\n}","map":{"version":3,"sources":["utilities/contextualMenu/contextualMenuUtility.ts"],"names":[],"mappings":"AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,YAAY,CAAC,IAAyB,EAAA;EACpD,IAAI,IAAI,CAAC,QAAQ,EAAE;IACjB,OAAO,CAAC,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC;EAC1C;EAED,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;IACvC,OAAO,IAAI,CAAC,SAAS;EACtB;EAED,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;IACrC,OAAO,IAAI,CAAC,OAAO;EACpB;EAED;EACA,OAAO,IAAI;AACb;AAEA,OAAM,SAAU,UAAU,CAAC,IAAyB,EAAA;EAClD,OAAO,CAAC,EAAE,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC;AAC5C;AAEA,OAAM,SAAU,cAAc,CAAC,IAAyB,EAAA;EACtD,OAAO,CAAC,EAAE,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,CAAC;AAC7C;AAEA,OAAM,SAAU,mBAAmB,CAAC,IAAyB,EAAA;EAC3D,IAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC;EACpC,IAAM,QAAQ,GAAY,SAAS,KAAK,IAAI;EAC5C,OAAO,QAAQ,GAAG,kBAAkB,GAAG,UAAU;AACnD","sourcesContent":["import { IContextualMenuItem } from '../../index';\n\n/**\n * Determines the effective checked state of a menu item.\n *\n * @param item {IContextualMenuItem} to get the check state of.\n * @returns {true} if the item is checked.\n * @returns {false} if the item is unchecked.\n * @returns {null} if the item is not checkable.\n */\nexport function getIsChecked(item: IContextualMenuItem): boolean | null {\n  if (item.canCheck) {\n    return !!(item.isChecked || item.checked);\n  }\n\n  if (typeof item.isChecked === 'boolean') {\n    return item.isChecked;\n  }\n\n  if (typeof item.checked === 'boolean') {\n    return item.checked;\n  }\n\n  // Item is not checkable.\n  return null;\n}\n\nexport function hasSubmenu(item: IContextualMenuItem): boolean {\n  return !!(item.subMenuProps || item.items);\n}\n\nexport function isItemDisabled(item: IContextualMenuItem): boolean {\n  return !!(item.isDisabled || item.disabled);\n}\n\nexport function getMenuItemAriaRole(item: IContextualMenuItem): string {\n  const isChecked = getIsChecked(item);\n  const canCheck: boolean = isChecked !== null;\n  return canCheck ? 'menuitemcheckbox' : 'menuitem';\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}