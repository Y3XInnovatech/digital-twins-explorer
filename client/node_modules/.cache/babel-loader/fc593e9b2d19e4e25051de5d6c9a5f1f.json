{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\nexport function buildKeytipConfigMap(config) {\n  var configMap = {};\n  for (var _i = 0, _a = config.keytips; _i < _a.length; _i++) {\n    var keytip = _a[_i];\n    constructKeytip(configMap, [], keytip);\n  }\n  return configMap;\n}\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\nexport function constructKeytip(configMap, parentSequence, keytip) {\n  // Compute full key sequence\n  var sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  var keytipSequence = parentSequence.concat(sequence);\n  // Save props in configMap\n  var keytipProps = __assign(__assign({}, keytip.optionalProps), {\n    keySequences: keytipSequence,\n    content: keytip.content\n  });\n  configMap[keytip.id] = keytipProps;\n  if (keytip.children) {\n    for (var _i = 0, _a = keytip.children; _i < _a.length; _i++) {\n      var child = _a[_i];\n      // Create keytips for all children\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}","map":{"version":3,"sources":["utilities/keytips/KeytipConfig.ts"],"names":[],"mappings":";AAsCA;;;;;AAKG;AACH,OAAM,SAAU,oBAAoB,CAAC,MAAqB,EAAA;EACxD,IAAM,SAAS,GAAqB,CAAA,CAAE;EAEtC,KAAqB,IAAA,EAAA,GAAA,CAAc,EAAd,EAAA,GAAA,MAAM,CAAC,OAAO,EAAd,EAAA,GAAA,EAAA,CAAA,MAAc,EAAd,EAAA,EAAc,EAAE;IAAhC,IAAM,MAAM,GAAA,EAAA,CAAA,EAAA,CAAA;IACf,eAAe,CAAC,SAAS,EAAE,EAAE,EAAE,MAAM,CAAC;EACvC;EAED,OAAO,SAAS;AAClB;AAEA;;;;;;AAMG;AACH,OAAM,SAAU,eAAe,CAC7B,SAA2B,EAC3B,cAAwB,EACxB,MAAyB,EAAA;EAEzB;EACA,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAA,CAAE;EACvF,IAAM,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC;EAEtD;EACA,IAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAsB,MAAM,CAAC,aAAa,CAAA,EAAA;IAAE,YAAY,EAAE,cAAc;IAAE,OAAO,EAAE,MAAM,CAAC;EAAO,CAAA,CAAE;EACpH,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,WAAW;EAElC,IAAI,MAAM,CAAC,QAAQ,EAAE;IACnB,KAAoB,IAAA,EAAA,GAAA,CAAe,EAAf,EAAA,GAAA,MAAM,CAAC,QAAQ,EAAf,EAAA,GAAA,EAAA,CAAA,MAAe,EAAf,EAAA,EAAe,EAAE;MAAhC,IAAM,KAAK,GAAA,EAAA,CAAA,EAAA,CAAA;MACd;MACA,eAAe,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC;IAClD;EACF;AACH","sourcesContent":["import { IKeytipProps } from '../../Keytip';\n\nexport interface IKeytipConfig {\n  keytips: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigItem {\n  /**\n   * Key Sequence for this keytip only\n   * If sequence is not defined it will be derived from the content string\n   */\n  sequence?: string;\n\n  /**\n   * Content for the keytip\n   */\n  content: string;\n\n  /**\n   * Identifier for the keytip, to be used to access in the configMap\n   */\n  id: string;\n\n  /**\n   * Optional props in IKeytipProps\n   */\n  optionalProps?: Partial<IKeytipProps>;\n\n  /**\n   * Children keytips of this keytip\n   */\n  children?: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigMap {\n  [id: string]: IKeytipProps;\n}\n\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\nexport function buildKeytipConfigMap(config: IKeytipConfig): IKeytipConfigMap {\n  const configMap: IKeytipConfigMap = {};\n\n  for (const keytip of config.keytips) {\n    constructKeytip(configMap, [], keytip);\n  }\n\n  return configMap;\n}\n\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\nexport function constructKeytip(\n  configMap: IKeytipConfigMap,\n  parentSequence: string[],\n  keytip: IKeytipConfigItem,\n): void {\n  // Compute full key sequence\n  const sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  const keytipSequence = parentSequence.concat(sequence);\n\n  // Save props in configMap\n  const keytipProps: IKeytipProps = { ...keytip.optionalProps, keySequences: keytipSequence, content: keytip.content };\n  configMap[keytip.id] = keytipProps;\n\n  if (keytip.children) {\n    for (const child of keytip.children) {\n      // Create keytips for all children\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}