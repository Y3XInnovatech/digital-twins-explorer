{"ast":null,"code":"import { extendComponent } from './extendComponent';\n/**\n * Helper to manage componentRef resolution. Internally appends logic to\n * lifetime methods to resolve componentRef to the passed in object.\n *\n * Usage: call initializeComponentRef(this) in the constructor,\n */\nexport function initializeComponentRef(obj) {\n  extendComponent(obj, {\n    componentDidMount: _onMount,\n    componentDidUpdate: _onUpdate,\n    componentWillUnmount: _onUnmount\n  });\n}\nfunction _onMount() {\n  _setComponentRef(this.props.componentRef, this);\n}\nfunction _onUpdate(prevProps) {\n  if (prevProps.componentRef !== this.props.componentRef) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _setComponentRef(prevProps.componentRef, null);\n    _setComponentRef(this.props.componentRef, this);\n  }\n}\nfunction _onUnmount() {\n  _setComponentRef(this.props.componentRef, null);\n}\nfunction _setComponentRef(componentRef, value) {\n  if (componentRef) {\n    if (typeof componentRef === 'object') {\n      componentRef.current = value;\n    } else if (typeof componentRef === 'function') {\n      componentRef(value);\n    }\n  }\n}","map":{"version":3,"sources":["initializeComponentRef.ts"],"names":[],"mappings":"AAEA,SAAS,eAAe,QAAQ,mBAAmB;AAEnD;;;;;AAKG;AACH,OAAM,SAAU,sBAAsB,CAAoC,GAAoC,EAAA;EAC5G,eAAe,CAAC,GAAG,EAAE;IACnB,iBAAiB,EAAE,QAAQ;IAC3B,kBAAkB,EAAE,SAAS;IAC7B,oBAAoB,EAAE;GACvB,CAAC;AACJ;AAEA,SAAS,QAAQ,CAAA,EAAA;EACf,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC;AACjD;AAEA,SAAS,SAAS,CAAC,SAAqB,EAAA;EACtC,IAAI,SAAS,CAAC,YAAY,KAAK,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;IACtD;IACA,gBAAgB,CAAE,SAAiB,CAAC,YAAY,EAAE,IAAI,CAAC;IACvD,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC;EAChD;AACH;AAEA,SAAS,UAAU,CAAA,EAAA;EACjB,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC;AACjD;AAEA,SAAS,gBAAgB,CAAa,YAAyC,EAAE,KAAwB,EAAA;EACvG,IAAI,YAAY,EAAE;IAChB,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;MACnC,YAA+C,CAAC,OAAO,GAAG,KAAK;KACjE,MAAM,IAAI,OAAO,YAAY,KAAK,UAAU,EAAE;MAC5C,YAAyB,CAAC,KAAK,CAAC;IAClC;EACF;AACH","sourcesContent":["import * as React from 'react';\nimport { IBaseProps } from './BaseComponent.types';\nimport { extendComponent } from './extendComponent';\n\n/**\n * Helper to manage componentRef resolution. Internally appends logic to\n * lifetime methods to resolve componentRef to the passed in object.\n *\n * Usage: call initializeComponentRef(this) in the constructor,\n */\nexport function initializeComponentRef<TProps extends IBaseProps, TState>(obj: React.Component<TProps, TState>): void {\n  extendComponent(obj, {\n    componentDidMount: _onMount,\n    componentDidUpdate: _onUpdate,\n    componentWillUnmount: _onUnmount,\n  });\n}\n\nfunction _onMount(): void {\n  _setComponentRef(this.props.componentRef, this);\n}\n\nfunction _onUpdate(prevProps: IBaseProps): void {\n  if (prevProps.componentRef !== this.props.componentRef) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _setComponentRef((prevProps as any).componentRef, null);\n    _setComponentRef(this.props.componentRef, this);\n  }\n}\n\nfunction _onUnmount(): void {\n  _setComponentRef(this.props.componentRef, null);\n}\n\nfunction _setComponentRef<TInterface>(componentRef: React.RefObject<TInterface>, value: TInterface | null): void {\n  if (componentRef) {\n    if (typeof componentRef === 'object') {\n      (componentRef as { current: TInterface | null }).current = value;\n    } else if (typeof componentRef === 'function') {\n      (componentRef as Function)(value);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}