{"ast":null,"code":"var _jsxFileName = \"/home/saharsh/digital-twins-explorer/client/src/components/GraphViewerComponent/GraphViewerComponent.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React from \"react\";\nimport { Icon } from \"office-ui-fabric-react\";\nimport GraphViewerCommandBarComponent from \"./GraphViewerCommandBarComponent/GraphViewerCommandBarComponent\";\nimport { GraphViewerCytoscapeComponent, GraphViewerCytoscapeLayouts } from \"./GraphViewerCytoscapeComponent/GraphViewerCytoscapeComponent\";\nimport GraphViewerRelationshipCreateComponent from \"./GraphViewerRelationshipCreateComponent/GraphViewerRelationshipCreateComponent\";\nimport { GraphViewerRelationshipViewerComponent } from \"./GraphViewerRelationshipViewerComponent/GraphViewerRelationshipViewerComponent\";\nimport { GraphViewerTwinDeleteComponent } from \"./GraphViewerTwinDeleteComponent/GraphViewerTwinDeleteComponent\";\nimport GraphViewerRelationshipDeleteComponent from \"./GraphViewerRelationshipDeleteComponent/GraphViewerRelationshipDeleteComponent\";\nimport PropertyInspectorComponent from \"../PropertyInspectorComponent/PropertyInspectorComponent\";\nimport GraphViewerFilteringComponent from \"./GraphViewerFilteringComponent/GraphViewerFilteringComponent\";\nimport { withTranslation } from \"react-i18next\";\nimport LoaderComponent from \"../LoaderComponent/LoaderComponent\";\nimport { apiService } from \"../../services/ApiService\";\nimport { ModelService } from \"../../services/ModelService\";\nimport { eventService } from \"../../services/EventService\";\nimport { print } from \"../../services/LoggingService\";\nimport { BatchService } from \"../../services/BatchService\";\nimport { settingsService } from \"../../services/SettingsService\";\nimport { REL_TYPE_OUTGOING, DETAIL_MIN_WIDTH, PROPERTY_INSPECTOR_DEFAULT_WIDTH } from \"../../services/Constants\";\nimport { getUniqueRelationshipId } from \"../../utils/utilities\";\nimport \"./GraphViewerComponent.scss\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass GraphViewerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onEdgeClicked = async (e, selectedEdges) => {\n      this.setState({\n        selectedEdges: selectedEdges.map(edge => edge.data())\n      });\n      const relationship = await apiService.getRelationship(e.source, e.relationshipId);\n      eventService.publishSelection({\n        selection: relationship.body,\n        selectionType: \"relationship\"\n      });\n    };\n    this.onNodeClicked = async e => {\n      this.setState({\n        selectedNode: e.selectedNode,\n        selectedNodes: e.selectedNodes\n      });\n      eventService.publishSelectedTwins(e.selectedNodes);\n      const {\n        highlightingTerms\n      } = this.state;\n      if (highlightingTerms.length > 0) {\n        const newTerms = highlightingTerms.map(t => ({\n          ...t,\n          isActive: false\n        }));\n        this.setState({\n          highlightingTerms: newTerms\n        });\n      }\n      if (e.selectedNodes && e.selectedNodes.length > 1) {\n        eventService.publishSelection();\n      } else if (e.selectedNode) {\n        try {\n          const data = await apiService.getTwinById(e.selectedNode.id);\n\n          // Get latest\n          const {\n            selectedNode\n          } = this.state;\n          if (data && selectedNode.id === e.selectedNode.id) {\n            eventService.publishSelection({\n              selection: data,\n              selectionType: \"twin\"\n            });\n          } else {\n            eventService.publishSelection();\n          }\n        } catch (exc) {\n          print(`*** Error fetching data for twin: ${exc}`, \"error\");\n          eventService.publishSelection();\n        }\n      } else {\n        eventService.publishSelection();\n      }\n    };\n    this.onNodeDoubleClicked = async e => {\n      try {\n        this.canceled = false;\n        await this.getRelationshipsData([{\n          $dtId: e.id\n        }], 10, true, false, settingsService.relTypeLoading, settingsService.relExpansionLevel);\n      } catch (exc) {\n        if (this.canceled) {\n          this.setState({\n            selectedNode: null,\n            selectedNodes: null,\n            selectedEdges: null\n          });\n        }\n        if (exc.errorCode !== \"user_cancelled\") {\n          exc.customMessage = \"Error fetching data for graph\";\n          eventService.publishError(exc);\n        }\n      } finally {\n        this.setState({\n          isLoading: false,\n          progress: 0\n        });\n      }\n    };\n    this.onNodeMouseEnter = async modelId => {\n      const model = await this.modelService.getModelById(modelId);\n      const properties = await this.modelService.getProperties(modelId);\n      const displayName = model && model.model ? model.model.displayName : model.displayName;\n      const description = model && model.model ? model.model.description : model.description;\n      return {\n        displayName: displayName ? displayName : \"\",\n        description: description ? description : \"\",\n        properties,\n        relationships: model ? model.relationships : []\n      };\n    };\n    this.onControlClicked = () => {\n      this.setState({\n        selectedNode: null,\n        selectedNodes: null,\n        selectedEdges: null\n      });\n      eventService.publishSelection();\n      eventService.publishSelectedTwins([]);\n      const {\n        highlightingTerms,\n        filteringTerms\n      } = this.state;\n      if (highlightingTerms.length > 0) {\n        const newTerms = highlightingTerms.map(t => ({\n          ...t,\n          isActive: false\n        }));\n        this.setState({\n          highlightingTerms: newTerms\n        });\n      }\n      if (filteringTerms.length > 0) {\n        const newTerms = filteringTerms.map(t => ({\n          ...t,\n          isActive: false\n        }));\n        if (this.cyRef.current) {\n          this.cyRef.current.showAllNodes();\n        }\n        this.setState({\n          filteringTerms: newTerms\n        });\n      }\n    };\n    this.onTwinDelete = ids => {\n      if (ids) {\n        this.cyRef.current.removeTwins(ids);\n        this.cyRef.current.clearSelection();\n      } else {\n        this.cyRef.current.clearTwins();\n      }\n      this.setState({\n        selectedNode: null,\n        selectedNodes: null\n      });\n      eventService.publishSelection();\n      this.allNodes = this.allNodes.filter(n => !ids.includes(n.$dtId));\n      eventService.publishGraphTwins(this.allNodes);\n    };\n    this.onHide = () => this.setState({\n      hideMode: \"hide-selected\",\n      canShowAll: true\n    });\n    this.onHideOthers = () => this.setState({\n      hideMode: \"hide-others\",\n      canShowAll: true\n    });\n    this.onHideNonChildren = () => this.setState({\n      hideMode: \"hide-non-children\",\n      canShowAll: true\n    });\n    this.onHideWithChildren = () => this.setState({\n      hideMode: \"hide-with-children\",\n      canShowAll: true\n    });\n    this.onShowAll = () => {\n      if (this.cyRef.current) {\n        this.cyRef.current.showAllNodes();\n        this.setState({\n          canShowAll: false\n        });\n      }\n    };\n    this.onShowAllRelationships = () => {\n      if (this.cyRef.current) {\n        this.cyRef.current.showAllEdges();\n        this.setState({\n          canShowAllRelationships: false\n        });\n      }\n    };\n    this.onHideRelationship = () => {\n      this.setState({\n        canShowAllRelationships: true\n      });\n    };\n    this.onRelationshipCreate = relationship => {\n      if (relationship) {\n        this.cyRef.current.addRelationships([relationship]);\n        this.setState({\n          selectedNode: null,\n          selectedNodes: null\n        });\n        this.cyRef.current.unselectSelectedNodes();\n        this.cyRef.current.clearSelection();\n      } else {\n        const {\n          selectedNodes\n        } = this.state;\n        selectedNodes.pop();\n        this.setState({\n          selectedNode: null,\n          selectedNodes\n        });\n      }\n    };\n    this.onRelationshipDelete = relationship => {\n      if (relationship) {\n        this.cyRef.current.removeRelationships([getUniqueRelationshipId(relationship)]);\n        this.setState({\n          selectedEdges: null\n        });\n      }\n    };\n    this.onLayoutChanged = layout => {\n      this.setState({\n        layout\n      });\n      this.cyRef.current.setLayout(layout);\n      this.cyRef.current.doLayout();\n    };\n    this.onTriggerHide = () => {\n      const {\n        selectedNodes,\n        hideMode\n      } = this.state;\n      if (selectedNodes && selectedNodes.length > 0) {\n        switch (hideMode) {\n          case \"hide-selected\":\n            this.cyRef.current.hideSelectedTwins();\n            break;\n          case \"hide-others\":\n            this.cyRef.current.hideOtherTwins();\n            break;\n          case \"hide-non-children\":\n            this.cyRef.current.hideNonChildren();\n            break;\n          case \"hide-with-children\":\n            this.cyRef.current.hideWithChildren();\n            break;\n          default:\n            break;\n        }\n      }\n      this.setState({\n        canShowAll: true\n      });\n    };\n    this.disableOverlay = () => {\n      this.setState({\n        overlayItems: {}\n      });\n    };\n    this.onConfirmTwinDelete = node => {\n      let {\n        selectedNode,\n        selectedNodes\n      } = this.state;\n      if (node && node.id()) {\n        if (!selectedNodes) {\n          selectedNodes = [];\n        }\n        selectedNode = {\n          id: node.id(),\n          modelId: node.data().modelId\n        };\n        if (selectedNodes.filter(n => n.id === node.id()).length === 0) {\n          selectedNodes.push({\n            id: node.id(),\n            modelId: node.data().modelId\n          });\n        }\n      }\n      this.setState({\n        selectedNode,\n        selectedNodes\n      }, () => {\n        this.delete.current.open();\n      });\n    };\n    this.onConfirmRelationshipDelete = edge => {\n      const {\n        selectedEdges\n      } = this.state;\n      const edgeData = edge.data();\n      if (selectedEdges) {\n        if (selectedEdges.some(e => e.id === edgeData.id)) {\n          this.deleteRel.current.open();\n        } else {\n          const newEdges = [...selectedEdges, edgeData];\n          this.setState({\n            selectedEdges: newEdges\n          }, () => {\n            this.deleteRel.current.open();\n          });\n        }\n      } else {\n        this.setState({\n          selectedEdges: [edgeData]\n        }, () => {\n          this.deleteRel.current.open();\n        });\n      }\n    };\n    this.onGetRelationships = node => {\n      let selectedNode = null;\n      if (node && node.id()) {\n        selectedNode = {\n          id: node.id(),\n          modelId: node.data().modelId\n        };\n      }\n      this.setState({\n        selectedNode\n      }, () => {\n        this.view.current.open();\n      });\n    };\n    this.toggleFilter = () => {\n      const {\n        filterIsOpen\n      } = this.state;\n      this.setState({\n        filterIsOpen: !filterIsOpen\n      });\n    };\n    this.togglePropertyInspector = () => {\n      const {\n        propertyInspectorIsOpen\n      } = this.state;\n      this.setState({\n        propertyInspectorIsOpen: !propertyInspectorIsOpen\n      });\n    };\n    this.onZoomIn = () => {\n      this.cyRef.current.zoomIn();\n    };\n    this.onZoomOut = () => {\n      this.cyRef.current.zoomOut();\n    };\n    this.onZoomToFit = () => {\n      this.cyRef.current.zoomToFit();\n    };\n    this.onCenter = () => {\n      this.cyRef.current.center();\n    };\n    this.onConfirmRelationshipCreate = node => {\n      const {\n        selectedNodes\n      } = this.state;\n      selectedNodes.push(node);\n      this.setState({\n        selectedNode: node,\n        selectedNodes\n      }, () => {\n        this.create.current.open();\n      });\n    };\n    this.handleMouseMove = e => {\n      this.resizeEndX = this.resizeStartX - e.screenX;\n      if (this.resizeEndX >= DETAIL_MIN_WIDTH) {\n        this.setState({\n          propInspectorDetailWidth: DETAIL_MIN_WIDTH + this.resizeEndX * 100 / window.innerWidth\n        });\n      }\n    };\n    this.handleMouseUp = e => {\n      e.preventDefault();\n      window.removeEventListener(\"mousemove\", this.handleMouseMove);\n      window.removeEventListener(\"mouseup\", this.handleMouseUp);\n    };\n    this.handleMouseDown = e => {\n      e.preventDefault();\n      if (this.resizeStartX === 0) {\n        this.resizeStartX = e.screenX;\n      }\n      window.addEventListener(\"mousemove\", this.handleMouseMove);\n      window.addEventListener(\"mouseup\", this.handleMouseUp);\n    };\n    this.onUpdateFilteringTerm = term => {\n      const {\n        filteringTerms\n      } = this.state;\n      filteringTerms[filteringTerms.map(t => t.text).indexOf(term.text)] = term;\n      this.setState({\n        filteringTerms\n      }, () => {\n        this.filterNodes();\n      });\n    };\n    this.onUpdateHighlightingTerm = term => {\n      const {\n        highlightingTerms\n      } = this.state;\n      highlightingTerms[highlightingTerms.map(t => t.text).indexOf(term.text)] = term;\n      this.setState({\n        highlightingTerms\n      }, () => {\n        this.highlightNodes();\n      });\n    };\n    this.onAddFilteringTerm = term => {\n      const {\n        filteringTerms\n      } = this.state;\n      filteringTerms.push(term);\n      this.setState({\n        filteringTerms\n      }, () => {\n        this.filterNodes();\n      });\n    };\n    this.onRemoveFilteringTerm = term => {\n      const {\n        filteringTerms\n      } = this.state;\n      filteringTerms.splice(filteringTerms.map(t => t.text).indexOf(term.text), 1);\n      this.setState({\n        filteringTerms\n      }, () => {\n        this.filterNodes();\n      });\n    };\n    this.onAddHighlightingTerm = term => {\n      const {\n        highlightingTerms\n      } = this.state;\n      highlightingTerms.push(term);\n      this.setState({\n        highlightingTerms\n      }, () => {\n        this.highlightNodes();\n      });\n    };\n    this.onRemoveHighlightingTerm = term => {\n      const {\n        highlightingTerms\n      } = this.state;\n      highlightingTerms.splice(highlightingTerms.map(t => t.text).indexOf(term.text), 1);\n      this.setState({\n        highlightingTerms\n      }, () => {\n        this.highlightNodes();\n      });\n    };\n    this.highlightNodes = () => {\n      const {\n        highlightingTerms,\n        overlayItems,\n        overlayResults\n      } = this.state;\n      this.cyRef.current.clearHighlighting();\n      const activeTerms = highlightingTerms.filter(term => term.isActive);\n      const highlightedNodes = this.getFilteredNodes(activeTerms, overlayResults);\n      let highlightedNodesIds = highlightedNodes.map(n => n.$dtId);\n      if (overlayResults && overlayItems.twins && overlayItems.twins.length > 0) {\n        highlightedNodesIds = [...highlightedNodesIds, ...overlayItems.twins];\n      }\n      this.cyRef.current.highlightNodes(highlightedNodesIds, activeTerms.length > 0 || overlayResults);\n      this.setState({\n        highlightedNodes\n      });\n    };\n    this.filterNodes = () => {\n      const {\n        filteringTerms\n      } = this.state;\n      const activeTerms = filteringTerms.filter(term => term.isActive);\n      const filteredNodes = this.getFilteredNodes(activeTerms, false);\n      this.setState({\n        filteredNodes\n      });\n      if (this.cyRef.current) {\n        this.cyRef.current.showAllNodes();\n        this.cyRef.current.filterNodes(filteredNodes);\n        eventService.publishGraphTwins(filteredNodes);\n      }\n    };\n    this.getFilteredNodes = (termsFilteringId, overlayResults) => {\n      let outgoingRels = [];\n      let filteredNodes = this.allNodes.filter(node => {\n        if (termsFilteringId.length === 0) {\n          return !overlayResults;\n        }\n        const matchesId = termsFilteringId.some(term => {\n          const matches = node.$dtId.toLowerCase().includes(term.text.toLowerCase());\n          if (matches) {\n            if (term.addOutgoingRelationships) {\n              outgoingRels = [...new Set([...outgoingRels, ...this.getNodeOutgoingRelationships(node)])];\n            }\n          }\n          return matches;\n        });\n        return matchesId;\n      });\n      if (outgoingRels.length > 0) {\n        filteredNodes = [...new Set([...filteredNodes, ...outgoingRels])];\n      }\n      return filteredNodes;\n    };\n    this.getNodeOutgoingRelationships = node => {\n      const outgoingRels = [];\n      const nodeRels = this.relationships.filter(rel => rel.$sourceId === node.$dtId);\n      if (nodeRels.length > 0) {\n        nodeRels.forEach(rel => {\n          outgoingRels.push(this.allNodes.find(n => n.$dtId === rel.$targetId));\n        });\n      }\n      return outgoingRels;\n    };\n    this.renderCommandBar = () => {\n      const {\n        selectedNode,\n        selectedNodes,\n        selectedEdges,\n        query,\n        layout,\n        hideMode,\n        canShowAll,\n        canShowAllRelationships\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(GraphViewerCommandBarComponent, {\n          className: \"gc-commandbar\",\n          buttonClass: \"gc-toolbarButtons\",\n          ref: this.commandRef,\n          selectedNode: selectedNode,\n          selectedNodes: selectedNodes,\n          query: query,\n          layouts: Object.keys(GraphViewerCytoscapeLayouts),\n          layout: layout,\n          hideMode: hideMode,\n          onRelationshipCreate: this.onRelationshipCreate,\n          onShowAllRelationships: this.onShowAllRelationships,\n          onTwinDelete: this.onTwinDelete,\n          onHideOthers: this.onHideOthers,\n          onHideNonChildren: this.onHideNonChildren,\n          onHide: this.onHide,\n          onHideWithChildren: this.onHideWithChildren,\n          onTriggerHide: this.onTriggerHide,\n          onShowAll: this.onShowAll,\n          canShowAll: canShowAll,\n          canShowAllRelationships: canShowAllRelationships,\n          onLayoutClicked: () => this.cyRef.current.doLayout(),\n          onZoomToFitClicked: () => this.cyRef.current.zoomToFit(),\n          onCenterClicked: () => this.cyRef.current.center(),\n          onLayoutChanged: this.onLayoutChanged,\n          onGetCurrentNodes: () => this.cyRef.current.graphControl.nodes(),\n          setSelectedDisplayNameProperty: this.props.setSelectedDisplayNameProperty,\n          selectedDisplayNameProperty: this.props.selectedDisplayNameProperty,\n          isDisplayNameAsteriskPresent: this.state.isDisplayNameAsteriskPresent,\n          displayNameProperties: this.props.displayNameProperties\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(GraphViewerRelationshipCreateComponent, {\n          ref: this.create,\n          selectedNode: selectedNode,\n          selectedNodes: selectedNodes,\n          onCreate: this.onRelationshipCreate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 774,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(GraphViewerRelationshipViewerComponent, {\n          selectedNode: selectedNode,\n          ref: this.view\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(GraphViewerTwinDeleteComponent, {\n          selectedNode: selectedNode,\n          selectedNodes: selectedNodes,\n          query: query,\n          ref: this.delete,\n          onDelete: this.onTwinDelete,\n          onGetCurrentNodes: () => this.cyRef.current.graphControl.nodes()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(GraphViewerRelationshipDeleteComponent, {\n          selectedEdges: selectedEdges,\n          ref: this.deleteRel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n    };\n    this.resetFiltering = () => {\n      if (this.cyRef.current) {\n        this.cyRef.current.showAllNodes();\n        this.cyRef.current.clearHighlighting();\n      }\n      this.setState({\n        highlightingTerms: [],\n        filteringTerms: []\n      });\n    };\n    this.onSwitchFilters = e => {\n      let currentFilter = \"filter\";\n      if (e.key.includes(\"filter\")) {\n        if (this.cyRef.current) {\n          this.cyRef.current.clearHighlighting();\n        }\n        this.filterNodes();\n      } else if (e.key.includes(\"highlight\")) {\n        if (this.cyRef.current) {\n          this.cyRef.current.showAllNodes();\n        }\n        currentFilter = \"highlight\";\n        this.highlightNodes();\n      }\n      this.setState({\n        currentFilter\n      });\n    };\n    this.onSelectAllHighlighted = () => {\n      const {\n        highlightedNodes\n      } = this.state;\n      if (highlightedNodes.length > 0) {\n        this.cyRef.current.selectNodes(highlightedNodes.map(node => node.$dtId));\n        const newSelectedNodes = highlightedNodes.map(node => ({\n          id: node.$dtId,\n          modelId: node.$metadata.$model\n        }));\n        this.setState({\n          selectedNode: newSelectedNodes[0],\n          selectedNodes: newSelectedNodes\n        });\n        eventService.publishSelectedTwins(newSelectedNodes);\n      }\n    };\n    this.onSelectAllFiltered = () => {\n      const {\n        filteredNodes\n      } = this.state;\n      if (filteredNodes.length > 0) {\n        this.cyRef.current.selectNodes(filteredNodes.map(node => node.$dtId));\n        const newSelectedNodes = filteredNodes.map(node => ({\n          id: node.$dtId,\n          modelId: node.$metadata.$model\n        }));\n        this.setState({\n          selectedNode: newSelectedNodes[0],\n          selectedNodes: newSelectedNodes\n        });\n        eventService.publishSelectedTwins(newSelectedNodes);\n      }\n    };\n    this.deselectAll = () => {\n      const {\n        currentFilter\n      } = this.state;\n      eventService.publishSelectedTwins([]);\n      this.setState({\n        selectedNode: null,\n        selectedNodes: null\n      });\n      if (currentFilter === \"filter\") {\n        this.cyRef.current.clearHighlighting();\n        this.filterNodes();\n      } else {\n        this.highlightNodes();\n      }\n    };\n    this.onClearAll = () => {\n      const {\n        currentFilter\n      } = this.state;\n      eventService.publishSelectedTwins([]);\n      if (currentFilter === \"filter\") {\n        this.setState({\n          selectedNode: null,\n          selectedNodes: null,\n          filteringTerms: []\n        }, () => {\n          this.cyRef.current.clearHighlighting();\n          this.filterNodes();\n        });\n      } else {\n        this.setState({\n          selectedNode: null,\n          selectedNodes: null,\n          highlightingTerms: []\n        }, () => {\n          this.highlightNodes();\n        });\n      }\n    };\n    this.onFocusBackToTwinViewer = () => eventService.publishFocusTwinViewer();\n    this.state = {\n      progress: 0,\n      isLoading: false,\n      selectedNode: null,\n      selectedNodes: null,\n      selectedEdges: null,\n      layout: \"Klay\",\n      hideMode: \"hide-selected\",\n      canShowAll: false,\n      overlayResults: false,\n      overlayItems: {},\n      filterIsOpen: false,\n      currentFilter: \"filter\",\n      propertyInspectorIsOpen: true,\n      canShowAllRelationships: false,\n      propInspectorDetailWidth: PROPERTY_INSPECTOR_DEFAULT_WIDTH,\n      couldNotDisplay: false,\n      outputIsOpen: false,\n      highlightingTerms: [],\n      filteringTerms: [],\n      highlightedNodes: [],\n      filteredNodes: [],\n      noResults: false,\n      isDisplayNameAsteriskPresent: false\n    };\n    this.view = /*#__PURE__*/React.createRef();\n    this.create = /*#__PURE__*/React.createRef();\n    this.delete = /*#__PURE__*/React.createRef();\n    this.deleteRel = /*#__PURE__*/React.createRef();\n    this.settings = /*#__PURE__*/React.createRef();\n    this.cyRef = /*#__PURE__*/React.createRef();\n    this.commandRef = /*#__PURE__*/React.createRef();\n    this.canceled = false;\n    this.modelService = new ModelService();\n    this.resizeStartX = 0;\n    this.resizeEndX = 0;\n    this.allNodes = [];\n    this.relationships = [];\n  }\n  componentDidMount() {\n    eventService.subscribeQuery(query => {\n      this.getData(query);\n    });\n    eventService.subscribeOverlayQueryResults(overlayResults => {\n      this.resetFiltering();\n      if (this.state.overlayResults && !overlayResults) {\n        this.disableOverlay();\n        if (this.cyRef.current) {\n          this.cyRef.current.clearOverlay();\n        }\n      }\n      this.setState({\n        overlayResults\n      });\n    });\n    eventService.subscribeDeleteTwin(id => {\n      if (id) {\n        this.onTwinDelete(id);\n      }\n    });\n    eventService.subscribeAddRelationship(data => data && this.onRelationshipCreate(data));\n    eventService.subscribeDeleteRelationship(data => data && this.onRelationshipDelete(data));\n    eventService.subscribeCreateTwin(data => {\n      this.cyRef.current.setNewNodesInitialPositions();\n      this.cyRef.current.addTwins([data]);\n      this.cyRef.current.updateNodeColors();\n      this.cyRef.current.zoomToFit(true);\n    });\n    eventService.subscribeConfigure(evt => {\n      if (evt.type === \"end\" && evt.config) {\n        this.clearData();\n      }\n    });\n    eventService.subscribeClearTwinsData(() => {\n      this.clearData();\n    });\n    eventService.subscribeModelIconUpdate(modelId => this.cyRef.current.updateModelIcon(modelId));\n    eventService.subscribeCreateTwin(() => {\n      this.cyRef.current.unselectSelectedNodes();\n    });\n    eventService.subscribeOpenOptionalComponent(() => {\n      this.setState({\n        outputIsOpen: true\n      });\n    });\n    eventService.subscribeComponentClosed(component => {\n      if (component === \"outputComponent\") {\n        this.setState({\n          outputIsOpen: false\n        });\n      }\n    });\n    eventService.subscribeFocusTwin(twin => {\n      this.cyRef.current.emitNodeEvent(twin.$dtId, \"mouseover\");\n    });\n    eventService.subscribeBlurTwin(twin => {\n      this.cyRef.current.emitNodeEvent(twin.$dtId, \"mouseout\");\n    });\n    eventService.subscribeTwinContextMenu(twin => {\n      this.cyRef.current.rightClickNode(twin.$dtId);\n      this.cyRef.current.focusContextMenu();\n    });\n    eventService.subscribeRelationshipContextMenu(relationship => {\n      this.cyRef.current.rightClickEdge(getUniqueRelationshipId(relationship));\n      this.cyRef.current.focusContextMenu();\n    });\n    eventService.subscribeClickRelationship(relationship => {\n      eventService.publishSelection({\n        selection: relationship,\n        selectionType: \"relationship\"\n      });\n      this.cyRef.current.clickEdge(getUniqueRelationshipId(relationship));\n    });\n    eventService.subscribeClearGraphSelection(() => {\n      this.cyRef.current.clearOverlay();\n    });\n    eventService.subscribeSelectTwins(twinIds => {\n      this.cyRef.current.selectNodes(twinIds, true);\n    });\n  }\n  clearData() {\n    eventService.publishSelection();\n    eventService.publishGraphTwins([]);\n    this.allNodes = [];\n    if (this.cyRef.current) {\n      this.cyRef.current.clearTwins();\n    }\n  }\n  updateProgress(newProgress) {\n    if (this.canceled) {\n      const e = new Error(\"Operation canceled by user\");\n      e.errorCode = \"user_cancelled\";\n      throw e;\n    }\n    const {\n      progress\n    } = this.state;\n    if (newProgress >= 0 && newProgress > progress) {\n      this.setState({\n        isLoading: newProgress < 100,\n        progress: newProgress >= 100 ? 0 : newProgress\n      });\n    }\n  }\n  async getData(query) {\n    const {\n      isLoading,\n      selectedNode,\n      overlayResults\n    } = this.state;\n    if (!query || isLoading) {\n      return;\n    }\n    this.resetFiltering();\n    this.setState({\n      query\n    });\n    this.canceled = false;\n    try {\n      if (this.cyRef.current) {\n        this.cyRef.current.clearSelection();\n      }\n      const allTwins = await this.getTwinsData(query, overlayResults);\n      if (allTwins.length > 0) {\n        await this.getRelationshipsData(allTwins, 30, false, !overlayResults, REL_TYPE_OUTGOING);\n        if (selectedNode) {\n          const selected = allTwins.find(t => t.$dtId === selectedNode.id);\n          if (selected) {\n            eventService.publishSelection({\n              selection: selected,\n              selectionType: \"twin\"\n            });\n          } else {\n            eventService.publishSelection();\n          }\n        }\n        if (overlayResults) {\n          const {\n            overlayItems: {\n              twins,\n              relationships\n            }\n          } = this.state;\n          this.cyRef.current.selectNodes(twins);\n          this.cyRef.current.selectEdges(relationships);\n        } else {\n          this.allNodes = allTwins;\n          eventService.publishGraphTwins(this.allNodes);\n        }\n      }\n    } catch (exc) {\n      if (exc.errorCode !== \"user_cancelled\") {\n        exc.customMessage = \"Error fetching data for graph\";\n        eventService.publishError(exc);\n      }\n    }\n    this.setState({\n      isLoading: false,\n      progress: 0\n    });\n  }\n  async getTwinsData(query, overlayResults = false) {\n    const allTwins = [];\n    let extraTwins = [];\n    const existingTwins = this.cyRef.current ? this.cyRef.current.getTwins() : [];\n    this.updateProgress(5);\n    if (overlayResults) {\n      await apiService.query(query, async data => {\n        if (data.twins.length > 0 || data.relationships.length > 0) {\n          this.setState({\n            couldNotDisplay: false,\n            noResults: false\n          });\n          extraTwins = data.twins.filter(twin => !existingTwins.some(et => et === twin.$dtId));\n          this.cyRef.current.addTwins(extraTwins);\n          await this.cyRef.current.doLayout();\n          data.twins.forEach(x => allTwins.push({\n            ...x,\n            selected: true\n          }));\n          this.setState({\n            overlayItems: {\n              ...data,\n              twins: data.twins.map(t => t.$dtId)\n            }\n          });\n          this.updateProgress();\n        } else {\n          this.setState({\n            couldNotDisplay: true\n          });\n        }\n      });\n    } else {\n      if (this.cyRef.current) {\n        this.cyRef.current.clearTwins();\n      }\n      await apiService.query(query, async data => {\n        if (data.twins.length > 0) {\n          this.setState({\n            couldNotDisplay: false,\n            noResults: false,\n            relationshipsOnly: false\n          });\n          this.cyRef.current.addTwins(data.twins);\n          await this.cyRef.current.doLayout();\n          data.twins.forEach(x => allTwins.push(x));\n          this.updateProgress();\n          if (data.other.length > 0) {\n            this.setState({\n              couldNotDisplay: true\n            });\n          }\n        } else if (data.relationships.length > 0) {\n          this.setState({\n            couldNotDisplay: true,\n            relationshipsOnly: true\n          });\n          this.relationships = data.relationships;\n        } else if (data.other.length > 0) {\n          this.setState({\n            couldNotDisplay: true,\n            relationshipsOnly: false\n          });\n        } else {\n          this.setState({\n            couldNotDisplay: true,\n            noResults: true,\n            relationshipsOnly: false\n          });\n        }\n      });\n    }\n    this.updateProgress(25);\n    if (overlayResults && extraTwins.length > 0) {\n      extraTwins.forEach(t => allTwins.push(t));\n    } else {\n      this.cyRef.current.removeTwins(extraTwins);\n    }\n    return allTwins;\n  }\n  async getRelationshipsData(twins, baseline = 0, loadTargets = false, clearExisting = false, relTypeLoading = REL_TYPE_OUTGOING, expansionLevel = 1) {\n    this.updateProgress(baseline);\n    this.relationships = [];\n    const existingRels = clearExisting ? this.cyRef.current.getRelationships() : [];\n    const allTwins = [...twins];\n    const existingTwins = [];\n    for (let i = 0; i < expansionLevel; i++) {\n      const baselineChunk = (100 - baseline) / expansionLevel;\n      const currentTwins = allTwins.filter(x => existingTwins.every(y => y.$dtId !== x.$dtId));\n      existingTwins.push(...currentTwins);\n      const twinsChunks = this.modelService.chunkModelsList(currentTwins, 100);\n      const bs = new BatchService({\n        refresh: () => {\n          this.cyRef.current.doLayout();\n        },\n        update: p => this.updateProgress(baseline + i * baselineChunk + p / 100 * baselineChunk),\n        items: twinsChunks,\n        action: (twinsList, resolve, reject) => {\n          if (this.canceled) {\n            resolve();\n          }\n          apiService.queryRelationshipsPaged(twinsList.map(twin => twin.$dtId), async rels => {\n            try {\n              if (this.canceled) {\n                resolve();\n              }\n              let presentRels = rels;\n              if (settingsService.eagerLoading || loadTargets) {\n                const missingTwins = [];\n                for (const rel of rels) {\n                  for (const prop of [\"$sourceId\", \"$targetId\"]) {\n                    // eslint-disable-next-line max-depth\n                    if (rel[prop] && allTwins.every(x => x.$dtId !== rel[prop])) {\n                      const missingTwin = await apiService.getTwinById(rel[prop]);\n                      [missingTwins, allTwins].forEach(x => x.push(missingTwin));\n                    }\n                  }\n                }\n                this.allNodes = this.allNodes.concat(missingTwins);\n                this.cyRef.current.addTwins(missingTwins);\n                eventService.publishGraphTwins(this.allNodes);\n              } else {\n                presentRels = rels.filter(x => allTwins.some(y => y.$dtId === x.$sourceId) && allTwins.some(y => y.$dtId === x.$targetId));\n              }\n              this.cyRef.current.addRelationships(presentRels);\n              presentRels.forEach(x => this.relationships.push(x));\n              if (!rels.nextLink) {\n                resolve();\n              }\n            } catch (e) {\n              reject(e);\n            }\n          }, relTypeLoading).then(null, exc => {\n            // If the twin has been deleted, warn but don't block the graph render\n            print(`*** Error fetching data for twin: ${exc}`, \"warning\");\n            resolve();\n          });\n        }\n      });\n      await bs.run();\n      eventService.publishGraphRelationships(this.relationships);\n    }\n    if (clearExisting) {\n      const removeRels = existingRels.filter(x => this.relationships.every(y => getUniqueRelationshipId(y) !== x));\n      this.cyRef.current.removeRelationships(removeRels);\n    }\n  }\n  render() {\n    const {\n      isLoading,\n      progress,\n      filterIsOpen,\n      propertyInspectorIsOpen,\n      overlayResults,\n      overlayItems,\n      propInspectorDetailWidth,\n      couldNotDisplay,\n      relationshipsOnly,\n      outputIsOpen,\n      highlightingTerms,\n      filteringTerms,\n      filteredNodes,\n      highlightedNodes,\n      noResults,\n      selectedNodes\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `gvc-wrap ${propertyInspectorIsOpen ? \"pi-open\" : \"pi-closed\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `gc-grid ${filterIsOpen ? \"open\" : \"closed\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gc-toolbar\",\n          children: this.renderCommandBar()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 866,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gc-wrap\",\n          children: [/*#__PURE__*/_jsxDEV(GraphViewerCytoscapeComponent, {\n            ref: this.cyRef,\n            overlayResults: overlayResults,\n            overlayItems: overlayItems,\n            disableOverlay: this.disableOverlay,\n            onEdgeClicked: this.onEdgeClicked,\n            onNodeClicked: this.onNodeClicked,\n            onNodeDoubleClicked: this.onNodeDoubleClicked,\n            onHideRelationship: this.onHideRelationship,\n            onControlClicked: this.onControlClicked,\n            onHideOthers: this.onHideOthers,\n            onHideNonChildren: this.onHideNonChildren,\n            onHide: this.onHide,\n            onFocusBackToTwinViewer: this.onFocusBackToTwinViewer,\n            onHideWithChildren: this.onHideWithChildren,\n            onCreateRelationship: this.onConfirmRelationshipCreate,\n            onGetRelationships: this.onGetRelationships,\n            onConfirmTwinDelete: this.onConfirmTwinDelete,\n            onConfirmRelationshipDelete: this.onConfirmRelationshipDelete,\n            isHighlighting: highlightingTerms && highlightingTerms.length > 0,\n            highlightFilteredNodes: this.highlightNodes,\n            displayNameProperty: this.props.selectedDisplayNameProperty,\n            setIsDisplayNameAsteriskPresent: isPresent => this.setState({\n              isDisplayNameAsteriskPresent: isPresent\n            }),\n            onNodeMouseEnter: this.onNodeMouseEnter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 870,\n            columnNumber: 13\n          }, this), couldNotDisplay && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `alert-no-display ${outputIsOpen ? \"output\" : \"\"} ${noResults ? \"no-results\" : \"\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alert--info\",\n              children: \"i\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 894,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alert--message\",\n              children: noResults ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"No results found. \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 896,\n                columnNumber: 30\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [relationshipsOnly ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"A graph may only be rendered if the results contain a twin. \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 899,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Click here to open the \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 900,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                    onClick: () => {\n                      eventService.publishOpenTabularView(this.relationships);\n                      this.setState({\n                        couldNotDisplay: false\n                      });\n                    },\n                    children: \"Tabular Relationships View\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 901,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"The query returned results that could not be displayed or overlayed. \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 905,\n                  columnNumber: 25\n                }, this), !outputIsOpen && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \" or open the \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 907,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                    onClick: () => {\n                      eventService.publishOpenOptionalComponent(\"output\");\n                      this.setState({\n                        couldNotDisplay: false\n                      });\n                    },\n                    children: \"Output Panel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 908,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \" and run the query again to see the results.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 912,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 895,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Icon, {\n              className: \"alert--close\",\n              iconName: \"ChromeClose\",\n              \"aria-label\": this.props.t(\"graphViewerComponent.alertCloseIcon\"),\n              role: \"button\",\n              onClick: () => this.setState({\n                couldNotDisplay: false\n              }),\n              title: \"Close alert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 916,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gc-filter\",\n          children: /*#__PURE__*/_jsxDEV(GraphViewerFilteringComponent, {\n            toggleFilter: this.toggleFilter,\n            onZoomIn: this.onZoomIn,\n            onZoomOut: this.onZoomOut,\n            onZoomToFit: this.onZoomToFit,\n            onCenter: this.onCenter,\n            onAddHighlightingTerm: this.onAddHighlightingTerm,\n            onRemoveHighlightingTerm: this.onRemoveHighlightingTerm,\n            onAddFilteringTerm: this.onAddFilteringTerm,\n            onRemoveFilteringTerm: this.onRemoveFilteringTerm,\n            onUpdateFilteringTerm: this.onUpdateFilteringTerm,\n            onUpdateHighlightingTerm: this.onUpdateHighlightingTerm,\n            onSwitchFilters: this.onSwitchFilters,\n            deselectAll: this.deselectAll,\n            canSelectAllFilter: filteredNodes.length > 0 && (!selectedNodes || selectedNodes.length === 0),\n            canSelectAllHighlight: highlightedNodes.length > 0 && (!selectedNodes || selectedNodes.length === 0),\n            onSelectAllHighlighted: this.onSelectAllHighlighted,\n            selectAllHighlightedText: this.props.t(\"graphViewerFilteringComponent.selectAllHighlighted\"),\n            onSelectAllFiltered: this.onSelectAllFiltered,\n            selectAllFilteredText: this.props.t(\"graphViewerFilteringComponent.selectAllFiltered\"),\n            highlightingTerms: highlightingTerms,\n            filteringTerms: filteringTerms,\n            onClearAll: this.onClearAll\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 926,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 925,\n          columnNumber: 11\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(LoaderComponent, {\n          message: `${Math.round(progress)}%`,\n          cancel: () => this.canceled = true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 945,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pi-wrap\",\n        style: {\n          width: propertyInspectorIsOpen ? `${propInspectorDetailWidth}%` : 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pi-toggle\",\n          tabIndex: \"0\",\n          onClick: this.togglePropertyInspector,\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            className: \"toggle-icon\",\n            iconName: propertyInspectorIsOpen ? \"DoubleChevronRight\" : \"DoubleChevronLeft\",\n            onClick: this.togglePropertyInspector,\n            \"aria-label\": this.props.t(\"graphViewerComponent.toggleIcon\"),\n            role: \"button\",\n            title: this.props.t(\"graphViewerComponent.toggleIcon\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 948,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PropertyInspectorComponent, {\n          isOpen: propertyInspectorIsOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 11\n        }, this), propertyInspectorIsOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dragable\",\n          onMouseDown: this.handleMouseDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 959,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 864,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default withTranslation(\"translation\", {\n  withRef: true\n})(GraphViewerComponent);","map":{"version":3,"names":["React","Icon","GraphViewerCommandBarComponent","GraphViewerCytoscapeComponent","GraphViewerCytoscapeLayouts","GraphViewerRelationshipCreateComponent","GraphViewerRelationshipViewerComponent","GraphViewerTwinDeleteComponent","GraphViewerRelationshipDeleteComponent","PropertyInspectorComponent","GraphViewerFilteringComponent","withTranslation","LoaderComponent","apiService","ModelService","eventService","print","BatchService","settingsService","REL_TYPE_OUTGOING","DETAIL_MIN_WIDTH","PROPERTY_INSPECTOR_DEFAULT_WIDTH","getUniqueRelationshipId","jsxDEV","_jsxDEV","Fragment","_Fragment","GraphViewerComponent","Component","constructor","props","onEdgeClicked","e","selectedEdges","setState","map","edge","data","relationship","getRelationship","source","relationshipId","publishSelection","selection","body","selectionType","onNodeClicked","selectedNode","selectedNodes","publishSelectedTwins","highlightingTerms","state","length","newTerms","t","isActive","getTwinById","id","exc","onNodeDoubleClicked","canceled","getRelationshipsData","$dtId","relTypeLoading","relExpansionLevel","errorCode","customMessage","publishError","isLoading","progress","onNodeMouseEnter","modelId","model","modelService","getModelById","properties","getProperties","displayName","description","relationships","onControlClicked","filteringTerms","cyRef","current","showAllNodes","onTwinDelete","ids","removeTwins","clearSelection","clearTwins","allNodes","filter","n","includes","publishGraphTwins","onHide","hideMode","canShowAll","onHideOthers","onHideNonChildren","onHideWithChildren","onShowAll","onShowAllRelationships","showAllEdges","canShowAllRelationships","onHideRelationship","onRelationshipCreate","addRelationships","unselectSelectedNodes","pop","onRelationshipDelete","removeRelationships","onLayoutChanged","layout","setLayout","doLayout","onTriggerHide","hideSelectedTwins","hideOtherTwins","hideNonChildren","hideWithChildren","disableOverlay","overlayItems","onConfirmTwinDelete","node","push","delete","open","onConfirmRelationshipDelete","edgeData","some","deleteRel","newEdges","onGetRelationships","view","toggleFilter","filterIsOpen","togglePropertyInspector","propertyInspectorIsOpen","onZoomIn","zoomIn","onZoomOut","zoomOut","onZoomToFit","zoomToFit","onCenter","center","onConfirmRelationshipCreate","create","handleMouseMove","resizeEndX","resizeStartX","screenX","propInspectorDetailWidth","window","innerWidth","handleMouseUp","preventDefault","removeEventListener","handleMouseDown","addEventListener","onUpdateFilteringTerm","term","text","indexOf","filterNodes","onUpdateHighlightingTerm","highlightNodes","onAddFilteringTerm","onRemoveFilteringTerm","splice","onAddHighlightingTerm","onRemoveHighlightingTerm","overlayResults","clearHighlighting","activeTerms","highlightedNodes","getFilteredNodes","highlightedNodesIds","twins","filteredNodes","termsFilteringId","outgoingRels","matchesId","matches","toLowerCase","addOutgoingRelationships","Set","getNodeOutgoingRelationships","nodeRels","rel","$sourceId","forEach","find","$targetId","renderCommandBar","query","children","className","buttonClass","ref","commandRef","layouts","Object","keys","onLayoutClicked","onZoomToFitClicked","onCenterClicked","onGetCurrentNodes","graphControl","nodes","setSelectedDisplayNameProperty","selectedDisplayNameProperty","isDisplayNameAsteriskPresent","displayNameProperties","fileName","_jsxFileName","lineNumber","columnNumber","onCreate","onDelete","resetFiltering","onSwitchFilters","currentFilter","key","onSelectAllHighlighted","selectNodes","newSelectedNodes","$metadata","$model","onSelectAllFiltered","deselectAll","onClearAll","onFocusBackToTwinViewer","publishFocusTwinViewer","couldNotDisplay","outputIsOpen","noResults","createRef","settings","componentDidMount","subscribeQuery","getData","subscribeOverlayQueryResults","clearOverlay","subscribeDeleteTwin","subscribeAddRelationship","subscribeDeleteRelationship","subscribeCreateTwin","setNewNodesInitialPositions","addTwins","updateNodeColors","subscribeConfigure","evt","type","config","clearData","subscribeClearTwinsData","subscribeModelIconUpdate","updateModelIcon","subscribeOpenOptionalComponent","subscribeComponentClosed","component","subscribeFocusTwin","twin","emitNodeEvent","subscribeBlurTwin","subscribeTwinContextMenu","rightClickNode","focusContextMenu","subscribeRelationshipContextMenu","rightClickEdge","subscribeClickRelationship","clickEdge","subscribeClearGraphSelection","subscribeSelectTwins","twinIds","updateProgress","newProgress","Error","allTwins","getTwinsData","selected","selectEdges","extraTwins","existingTwins","getTwins","et","x","relationshipsOnly","other","baseline","loadTargets","clearExisting","expansionLevel","existingRels","getRelationships","i","baselineChunk","currentTwins","every","y","twinsChunks","chunkModelsList","bs","refresh","update","p","items","action","twinsList","resolve","reject","queryRelationshipsPaged","rels","presentRels","eagerLoading","missingTwins","prop","missingTwin","concat","nextLink","then","run","publishGraphRelationships","removeRels","render","onCreateRelationship","isHighlighting","highlightFilteredNodes","displayNameProperty","setIsDisplayNameAsteriskPresent","isPresent","onClick","publishOpenTabularView","publishOpenOptionalComponent","iconName","role","title","canSelectAllFilter","canSelectAllHighlight","selectAllHighlightedText","selectAllFilteredText","message","Math","round","cancel","style","width","tabIndex","isOpen","onMouseDown","withRef"],"sources":["/home/saharsh/digital-twins-explorer/client/src/components/GraphViewerComponent/GraphViewerComponent.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React from \"react\";\nimport { Icon } from \"office-ui-fabric-react\";\n\nimport GraphViewerCommandBarComponent from \"./GraphViewerCommandBarComponent/GraphViewerCommandBarComponent\";\nimport { GraphViewerCytoscapeComponent, GraphViewerCytoscapeLayouts } from \"./GraphViewerCytoscapeComponent/GraphViewerCytoscapeComponent\";\nimport GraphViewerRelationshipCreateComponent from \"./GraphViewerRelationshipCreateComponent/GraphViewerRelationshipCreateComponent\";\nimport { GraphViewerRelationshipViewerComponent } from \"./GraphViewerRelationshipViewerComponent/GraphViewerRelationshipViewerComponent\";\nimport { GraphViewerTwinDeleteComponent } from \"./GraphViewerTwinDeleteComponent/GraphViewerTwinDeleteComponent\";\nimport GraphViewerRelationshipDeleteComponent from \"./GraphViewerRelationshipDeleteComponent/GraphViewerRelationshipDeleteComponent\";\nimport PropertyInspectorComponent from \"../PropertyInspectorComponent/PropertyInspectorComponent\";\nimport GraphViewerFilteringComponent from \"./GraphViewerFilteringComponent/GraphViewerFilteringComponent\";\nimport { withTranslation } from \"react-i18next\";\n\nimport LoaderComponent from \"../LoaderComponent/LoaderComponent\";\nimport { apiService } from \"../../services/ApiService\";\nimport { ModelService } from \"../../services/ModelService\";\nimport { eventService } from \"../../services/EventService\";\nimport { print } from \"../../services/LoggingService\";\nimport { BatchService } from \"../../services/BatchService\";\nimport { settingsService } from \"../../services/SettingsService\";\nimport { REL_TYPE_OUTGOING, DETAIL_MIN_WIDTH, PROPERTY_INSPECTOR_DEFAULT_WIDTH } from \"../../services/Constants\";\nimport { getUniqueRelationshipId } from \"../../utils/utilities\";\n\nimport \"./GraphViewerComponent.scss\";\nclass GraphViewerComponent extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: 0,\n      isLoading: false,\n      selectedNode: null,\n      selectedNodes: null,\n      selectedEdges: null,\n      layout: \"Klay\",\n      hideMode: \"hide-selected\",\n      canShowAll: false,\n      overlayResults: false,\n      overlayItems: {},\n      filterIsOpen: false,\n      currentFilter: \"filter\",\n      propertyInspectorIsOpen: true,\n      canShowAllRelationships: false,\n      propInspectorDetailWidth: PROPERTY_INSPECTOR_DEFAULT_WIDTH,\n      couldNotDisplay: false,\n      outputIsOpen: false,\n      highlightingTerms: [],\n      filteringTerms: [],\n      highlightedNodes: [],\n      filteredNodes: [],\n      noResults: false,\n      isDisplayNameAsteriskPresent: false\n    };\n    this.view = React.createRef();\n    this.create = React.createRef();\n    this.delete = React.createRef();\n    this.deleteRel = React.createRef();\n    this.settings = React.createRef();\n    this.cyRef = React.createRef();\n    this.commandRef = React.createRef();\n    this.canceled = false;\n    this.modelService = new ModelService();\n    this.resizeStartX = 0;\n    this.resizeEndX = 0;\n    this.allNodes = [];\n    this.relationships = [];\n  }\n\n  componentDidMount() {\n    eventService.subscribeQuery(query => {\n      this.getData(query);\n    });\n    eventService.subscribeOverlayQueryResults(overlayResults => {\n      this.resetFiltering();\n      if (this.state.overlayResults && !overlayResults) {\n        this.disableOverlay();\n        if (this.cyRef.current) {\n          this.cyRef.current.clearOverlay();\n        }\n      }\n      this.setState({ overlayResults });\n    });\n    eventService.subscribeDeleteTwin(id => {\n      if (id) {\n        this.onTwinDelete(id);\n      }\n    });\n    eventService.subscribeAddRelationship(data => data && this.onRelationshipCreate(data));\n    eventService.subscribeDeleteRelationship(data => data && this.onRelationshipDelete(data));\n    eventService.subscribeCreateTwin(data => {\n      this.cyRef.current.setNewNodesInitialPositions();\n      this.cyRef.current.addTwins([ data ]);\n      this.cyRef.current.updateNodeColors();\n      this.cyRef.current.zoomToFit(true);\n    });\n    eventService.subscribeConfigure(evt => {\n      if (evt.type === \"end\" && evt.config) {\n        this.clearData();\n      }\n    });\n    eventService.subscribeClearTwinsData(() => {\n      this.clearData();\n    });\n    eventService.subscribeModelIconUpdate(modelId => this.cyRef.current.updateModelIcon(modelId));\n    eventService.subscribeCreateTwin(() => {\n      this.cyRef.current.unselectSelectedNodes();\n    });\n    eventService.subscribeOpenOptionalComponent(() => {\n      this.setState({ outputIsOpen: true });\n    });\n    eventService.subscribeComponentClosed(component => {\n      if (component === \"outputComponent\") {\n        this.setState({ outputIsOpen: false });\n      }\n    });\n    eventService.subscribeFocusTwin(twin => {\n      this.cyRef.current.emitNodeEvent(twin.$dtId, \"mouseover\");\n    });\n    eventService.subscribeBlurTwin(twin => {\n      this.cyRef.current.emitNodeEvent(twin.$dtId, \"mouseout\");\n    });\n    eventService.subscribeTwinContextMenu(twin => {\n      this.cyRef.current.rightClickNode(twin.$dtId);\n      this.cyRef.current.focusContextMenu();\n    });\n    eventService.subscribeRelationshipContextMenu(relationship => {\n      this.cyRef.current.rightClickEdge(getUniqueRelationshipId(relationship));\n      this.cyRef.current.focusContextMenu();\n    });\n    eventService.subscribeClickRelationship(relationship => {\n      eventService.publishSelection({ selection: relationship, selectionType: \"relationship\" });\n      this.cyRef.current.clickEdge(getUniqueRelationshipId(relationship));\n    });\n    eventService.subscribeClearGraphSelection(() => {\n      this.cyRef.current.clearOverlay();\n    });\n    eventService.subscribeSelectTwins(twinIds => {\n      this.cyRef.current.selectNodes(twinIds, true);\n    });\n  }\n\n  clearData() {\n    eventService.publishSelection();\n    eventService.publishGraphTwins([]);\n    this.allNodes = [];\n    if (this.cyRef.current) {\n      this.cyRef.current.clearTwins();\n    }\n  }\n\n  updateProgress(newProgress) {\n    if (this.canceled) {\n      const e = new Error(\"Operation canceled by user\");\n      e.errorCode = \"user_cancelled\";\n      throw e;\n    }\n\n    const { progress } = this.state;\n    if (newProgress >= 0 && newProgress > progress) {\n      this.setState({ isLoading: newProgress < 100, progress: newProgress >= 100 ? 0 : newProgress });\n    }\n  }\n\n  async getData(query) {\n    const { isLoading, selectedNode, overlayResults } = this.state;\n    if (!query || isLoading) {\n      return;\n    }\n\n    this.resetFiltering();\n\n    this.setState({ query });\n    this.canceled = false;\n\n    try {\n      if (this.cyRef.current) {\n        this.cyRef.current.clearSelection();\n      }\n      const allTwins = await this.getTwinsData(query, overlayResults);\n      if (allTwins.length > 0) {\n        await this.getRelationshipsData(allTwins, 30, false, !overlayResults, REL_TYPE_OUTGOING);\n        if (selectedNode) {\n          const selected = allTwins.find(t => t.$dtId === selectedNode.id);\n          if (selected) {\n            eventService.publishSelection({ selection: selected, selectionType: \"twin\" });\n          } else {\n            eventService.publishSelection();\n          }\n        }\n        if (overlayResults) {\n          const { overlayItems: { twins, relationships } } = this.state;\n          this.cyRef.current.selectNodes(twins);\n          this.cyRef.current.selectEdges(relationships);\n        } else {\n          this.allNodes = allTwins;\n          eventService.publishGraphTwins(this.allNodes);\n        }\n      }\n    } catch (exc) {\n      if (exc.errorCode !== \"user_cancelled\") {\n        exc.customMessage = \"Error fetching data for graph\";\n        eventService.publishError(exc);\n      }\n    }\n\n    this.setState({ isLoading: false, progress: 0 });\n  }\n\n  async getTwinsData(query, overlayResults = false) {\n    const allTwins = [];\n    let extraTwins = [];\n    const existingTwins = this.cyRef.current ? this.cyRef.current.getTwins() : [];\n    this.updateProgress(5);\n\n    if (overlayResults) {\n      await apiService.query(query, async data => {\n        if (data.twins.length > 0 || data.relationships.length > 0) {\n          this.setState({ couldNotDisplay: false, noResults: false });\n          extraTwins = data.twins.filter(twin => !existingTwins.some(et => et === twin.$dtId));\n          this.cyRef.current.addTwins(extraTwins);\n          await this.cyRef.current.doLayout();\n          data.twins.forEach(x => allTwins.push({ ...x, selected: true }));\n          this.setState({ overlayItems: { ...data, twins: data.twins.map(t => t.$dtId) }});\n          this.updateProgress();\n        } else {\n          this.setState({ couldNotDisplay: true });\n        }\n      });\n    } else {\n      if (this.cyRef.current) {\n        this.cyRef.current.clearTwins();\n      }\n\n      await apiService.query(query, async data => {\n        if (data.twins.length > 0) {\n          this.setState({ couldNotDisplay: false, noResults: false, relationshipsOnly: false });\n          this.cyRef.current.addTwins(data.twins);\n          await this.cyRef.current.doLayout();\n          data.twins.forEach(x => allTwins.push(x));\n          this.updateProgress();\n\n          if (data.other.length > 0) {\n            this.setState({ couldNotDisplay: true });\n          }\n        } else if (data.relationships.length > 0) {\n          this.setState({ couldNotDisplay: true, relationshipsOnly: true });\n          this.relationships = data.relationships;\n        } else if (data.other.length > 0) {\n          this.setState({ couldNotDisplay: true, relationshipsOnly: false });\n        } else {\n          this.setState({ couldNotDisplay: true, noResults: true, relationshipsOnly: false });\n        }\n      });\n    }\n    this.updateProgress(25);\n\n    if (overlayResults && extraTwins.length > 0) {\n      extraTwins.forEach(t => allTwins.push(t));\n    } else {\n      this.cyRef.current.removeTwins(extraTwins);\n    }\n\n    return allTwins;\n  }\n\n  async getRelationshipsData(twins, baseline = 0, loadTargets = false, clearExisting = false,\n    relTypeLoading = REL_TYPE_OUTGOING, expansionLevel = 1) {\n    this.updateProgress(baseline);\n\n    this.relationships = [];\n    const existingRels = clearExisting ? this.cyRef.current.getRelationships() : [];\n\n    const allTwins = [ ...twins ];\n    const existingTwins = [];\n\n    for (let i = 0; i < expansionLevel; i++) {\n      const baselineChunk = (100 - baseline) / expansionLevel;\n      const currentTwins = allTwins.filter(x => existingTwins.every(y => y.$dtId !== x.$dtId));\n      existingTwins.push(...currentTwins);\n\n      const twinsChunks = this.modelService.chunkModelsList(currentTwins, 100);\n      const bs = new BatchService({\n        refresh: () => {\n          this.cyRef.current.doLayout();\n        },\n        update: p => this.updateProgress(baseline + (i * baselineChunk) + ((p / 100) * baselineChunk)),\n        items: twinsChunks,\n        action: (twinsList, resolve, reject) => {\n          if (this.canceled) {\n            resolve();\n          }\n          apiService\n            .queryRelationshipsPaged(twinsList.map(twin => twin.$dtId), async rels => {\n              try {\n                if (this.canceled) {\n                  resolve();\n                }\n                let presentRels = rels;\n                if (settingsService.eagerLoading || loadTargets) {\n                  const missingTwins = [];\n                  for (const rel of rels) {\n                    for (const prop of [ \"$sourceId\", \"$targetId\" ]) {\n                      // eslint-disable-next-line max-depth\n                      if (rel[prop] && allTwins.every(x => x.$dtId !== rel[prop])) {\n                        const missingTwin = await apiService.getTwinById(rel[prop]);\n                        [ missingTwins, allTwins ].forEach(x => x.push(missingTwin));\n                      }\n                    }\n                  }\n\n                  this.allNodes = this.allNodes.concat(missingTwins);\n                  this.cyRef.current.addTwins(missingTwins);\n                  eventService.publishGraphTwins(this.allNodes);\n                } else {\n                  presentRels = rels.filter(x =>\n                    allTwins.some(y => y.$dtId === x.$sourceId) && allTwins.some(y => y.$dtId === x.$targetId));\n                }\n\n                this.cyRef.current.addRelationships(presentRels);\n                presentRels.forEach(x => this.relationships.push(x));\n                if (!rels.nextLink) {\n                  resolve();\n                }\n              } catch (e) {\n                reject(e);\n              }\n            }, relTypeLoading)\n            .then(null, exc => {\n              // If the twin has been deleted, warn but don't block the graph render\n              print(`*** Error fetching data for twin: ${exc}`, \"warning\");\n              resolve();\n            });\n        }\n      });\n\n      await bs.run();\n      eventService.publishGraphRelationships(this.relationships);\n    }\n\n    if (clearExisting) {\n      const removeRels = existingRels.filter(x => this.relationships.every(y => getUniqueRelationshipId(y) !== x));\n      this.cyRef.current.removeRelationships(removeRels);\n    }\n  }\n\n  onEdgeClicked = async (e, selectedEdges) => {\n    this.setState({ selectedEdges: selectedEdges.map(edge => edge.data()) });\n    const relationship = await apiService.getRelationship(e.source, e.relationshipId);\n    eventService.publishSelection({ selection: relationship.body, selectionType: \"relationship\" });\n  }\n\n  onNodeClicked = async e => {\n    this.setState({ selectedNode: e.selectedNode, selectedNodes: e.selectedNodes });\n    eventService.publishSelectedTwins(e.selectedNodes);\n    const { highlightingTerms } = this.state;\n    if (highlightingTerms.length > 0) {\n      const newTerms = highlightingTerms.map(t => ({ ...t, isActive: false }));\n      this.setState({ highlightingTerms: newTerms });\n    }\n    if (e.selectedNodes && e.selectedNodes.length > 1) {\n      eventService.publishSelection();\n    } else if (e.selectedNode) {\n      try {\n        const data = await apiService.getTwinById(e.selectedNode.id);\n\n        // Get latest\n        const { selectedNode } = this.state;\n        if (data && selectedNode.id === e.selectedNode.id) {\n          eventService.publishSelection({ selection: data, selectionType: \"twin\" });\n        } else {\n          eventService.publishSelection();\n        }\n      } catch (exc) {\n        print(`*** Error fetching data for twin: ${exc}`, \"error\");\n        eventService.publishSelection();\n      }\n    } else {\n      eventService.publishSelection();\n    }\n  }\n\n  onNodeDoubleClicked = async e => {\n    try {\n      this.canceled = false;\n      await this.getRelationshipsData([ { $dtId: e.id } ], 10, true, false,\n        settingsService.relTypeLoading, settingsService.relExpansionLevel);\n    } catch (exc) {\n      if (this.canceled) {\n        this.setState({ selectedNode: null, selectedNodes: null, selectedEdges: null });\n      }\n      if (exc.errorCode !== \"user_cancelled\") {\n        exc.customMessage = \"Error fetching data for graph\";\n        eventService.publishError(exc);\n      }\n    } finally {\n      this.setState({ isLoading: false, progress: 0 });\n    }\n  }\n\n  onNodeMouseEnter = async modelId => {\n    const model = await this.modelService.getModelById(modelId);\n    const properties = await this.modelService.getProperties(modelId);\n    const displayName = model && model.model ? model.model.displayName : model.displayName;\n    const description = model && model.model ? model.model.description : model.description;\n    return {\n      displayName: displayName ? displayName : \"\",\n      description: description ? description : \"\",\n      properties,\n      relationships: model ? model.relationships : []\n    };\n  };\n\n  onControlClicked = () => {\n    this.setState({ selectedNode: null, selectedNodes: null, selectedEdges: null });\n    eventService.publishSelection();\n    eventService.publishSelectedTwins([]);\n\n    const { highlightingTerms, filteringTerms } = this.state;\n    if (highlightingTerms.length > 0) {\n      const newTerms = highlightingTerms.map(t => ({ ...t, isActive: false }));\n      this.setState({ highlightingTerms: newTerms });\n    }\n    if (filteringTerms.length > 0) {\n      const newTerms = filteringTerms.map(t => ({ ...t, isActive: false }));\n      if (this.cyRef.current) {\n        this.cyRef.current.showAllNodes();\n      }\n      this.setState({ filteringTerms: newTerms });\n    }\n  }\n\n  onTwinDelete = ids => {\n    if (ids) {\n      this.cyRef.current.removeTwins(ids);\n      this.cyRef.current.clearSelection();\n    } else {\n      this.cyRef.current.clearTwins();\n    }\n    this.setState({ selectedNode: null, selectedNodes: null });\n    eventService.publishSelection();\n    this.allNodes = this.allNodes.filter(n => !ids.includes(n.$dtId));\n    eventService.publishGraphTwins(this.allNodes);\n  }\n\n  onHide = () => this.setState({ hideMode: \"hide-selected\", canShowAll: true });\n\n  onHideOthers = () => this.setState({ hideMode: \"hide-others\", canShowAll: true });\n\n  onHideNonChildren = () => this.setState({ hideMode: \"hide-non-children\", canShowAll: true });\n\n  onHideWithChildren = () => this.setState({ hideMode: \"hide-with-children\", canShowAll: true });\n\n  onShowAll = () => {\n    if (this.cyRef.current) {\n      this.cyRef.current.showAllNodes();\n      this.setState({ canShowAll: false });\n    }\n  };\n\n  onShowAllRelationships = () => {\n    if (this.cyRef.current) {\n      this.cyRef.current.showAllEdges();\n      this.setState({ canShowAllRelationships: false });\n    }\n  };\n\n  onHideRelationship = () => {\n    this.setState({ canShowAllRelationships: true });\n  }\n\n  onRelationshipCreate = relationship => {\n    if (relationship) {\n      this.cyRef.current.addRelationships([ relationship ]);\n      this.setState({ selectedNode: null, selectedNodes: null });\n      this.cyRef.current.unselectSelectedNodes();\n      this.cyRef.current.clearSelection();\n    } else {\n      const { selectedNodes } = this.state;\n      selectedNodes.pop();\n      this.setState({ selectedNode: null, selectedNodes });\n    }\n  }\n\n  onRelationshipDelete = relationship => {\n    if (relationship) {\n      this.cyRef.current.removeRelationships([ getUniqueRelationshipId(relationship) ]);\n      this.setState({ selectedEdges: null });\n    }\n  }\n\n  onLayoutChanged = layout => {\n    this.setState({ layout });\n    this.cyRef.current.setLayout(layout);\n    this.cyRef.current.doLayout();\n  }\n\n  onTriggerHide = () => {\n    const { selectedNodes, hideMode } = this.state;\n    if (selectedNodes && selectedNodes.length > 0) {\n      switch (hideMode) {\n        case \"hide-selected\":\n          this.cyRef.current.hideSelectedTwins();\n          break;\n        case \"hide-others\":\n          this.cyRef.current.hideOtherTwins();\n          break;\n        case \"hide-non-children\":\n          this.cyRef.current.hideNonChildren();\n          break;\n        case \"hide-with-children\":\n          this.cyRef.current.hideWithChildren();\n          break;\n        default:\n          break;\n      }\n    }\n    this.setState({ canShowAll: true });\n  }\n\n  disableOverlay = () => {\n    this.setState({ overlayItems: {} });\n  }\n\n  onConfirmTwinDelete = node => {\n    let { selectedNode, selectedNodes } = this.state;\n    if (node && node.id()) {\n      if (!selectedNodes) {\n        selectedNodes = [];\n      }\n      selectedNode = { id: node.id(), modelId: node.data().modelId };\n      if (selectedNodes.filter(n => n.id === node.id()).length === 0) {\n        selectedNodes.push({ id: node.id(), modelId: node.data().modelId });\n      }\n    }\n    this.setState({ selectedNode, selectedNodes }, () => {\n      this.delete.current.open();\n    });\n  }\n\n  onConfirmRelationshipDelete = edge => {\n    const { selectedEdges } = this.state;\n    const edgeData = edge.data();\n    if (selectedEdges) {\n      if (selectedEdges.some(e => e.id === edgeData.id)) {\n        this.deleteRel.current.open();\n      } else {\n        const newEdges = [ ...selectedEdges, edgeData ];\n        this.setState({ selectedEdges: newEdges }, () => {\n          this.deleteRel.current.open();\n        });\n      }\n    } else {\n      this.setState({ selectedEdges: [ edgeData ] }, () => {\n        this.deleteRel.current.open();\n      });\n    }\n  }\n\n  onGetRelationships = node => {\n    let selectedNode = null;\n    if (node && node.id()) {\n      selectedNode = { id: node.id(), modelId: node.data().modelId };\n    }\n    this.setState({ selectedNode }, () => {\n      this.view.current.open();\n    });\n  }\n\n  toggleFilter = () => {\n    const { filterIsOpen } = this.state;\n    this.setState({ filterIsOpen: !filterIsOpen });\n  }\n\n  togglePropertyInspector = () => {\n    const { propertyInspectorIsOpen } = this.state;\n    this.setState({ propertyInspectorIsOpen: !propertyInspectorIsOpen });\n  }\n\n  onZoomIn = () => {\n    this.cyRef.current.zoomIn();\n  }\n\n  onZoomOut = () => {\n    this.cyRef.current.zoomOut();\n  }\n\n  onZoomToFit = () => {\n    this.cyRef.current.zoomToFit();\n  }\n\n  onCenter = () => {\n    this.cyRef.current.center();\n  }\n\n  onConfirmRelationshipCreate = node => {\n    const { selectedNodes } = this.state;\n    selectedNodes.push(node);\n    this.setState({ selectedNode: node, selectedNodes }, () => {\n      this.create.current.open();\n    });\n  }\n\n  handleMouseMove = e => {\n    this.resizeEndX = this.resizeStartX - e.screenX;\n    if (this.resizeEndX >= DETAIL_MIN_WIDTH) {\n      this.setState({\n        propInspectorDetailWidth: DETAIL_MIN_WIDTH + ((this.resizeEndX * 100) / window.innerWidth)\n      });\n    }\n  };\n\n\n  handleMouseUp = e => {\n    e.preventDefault();\n    window.removeEventListener(\"mousemove\", this.handleMouseMove);\n    window.removeEventListener(\"mouseup\", this.handleMouseUp);\n  };\n\n  handleMouseDown = e => {\n    e.preventDefault();\n    if (this.resizeStartX === 0) {\n      this.resizeStartX = e.screenX;\n    }\n    window.addEventListener(\"mousemove\", this.handleMouseMove);\n    window.addEventListener(\"mouseup\", this.handleMouseUp);\n  };\n\n  onUpdateFilteringTerm = term => {\n    const { filteringTerms } = this.state;\n    filteringTerms[filteringTerms.map(t => t.text).indexOf(term.text)] = term;\n    this.setState({ filteringTerms }, () => {\n      this.filterNodes();\n    });\n  }\n\n  onUpdateHighlightingTerm = term => {\n    const { highlightingTerms } = this.state;\n    highlightingTerms[highlightingTerms.map(t => t.text).indexOf(term.text)] = term;\n    this.setState({ highlightingTerms }, () => {\n      this.highlightNodes();\n    });\n  }\n\n  onAddFilteringTerm = term => {\n    const { filteringTerms } = this.state;\n    filteringTerms.push(term);\n    this.setState({ filteringTerms }, () => {\n      this.filterNodes();\n    });\n  }\n\n  onRemoveFilteringTerm = term => {\n    const { filteringTerms } = this.state;\n    filteringTerms.splice(filteringTerms.map(t => t.text).indexOf(term.text), 1);\n    this.setState({ filteringTerms }, () => {\n      this.filterNodes();\n    });\n  }\n\n  onAddHighlightingTerm = term => {\n    const { highlightingTerms } = this.state;\n    highlightingTerms.push(term);\n    this.setState({ highlightingTerms }, () => {\n      this.highlightNodes();\n    });\n  }\n\n  onRemoveHighlightingTerm = term => {\n    const { highlightingTerms } = this.state;\n    highlightingTerms.splice(highlightingTerms.map(t => t.text).indexOf(term.text), 1);\n    this.setState({ highlightingTerms }, () => {\n      this.highlightNodes();\n    });\n  }\n\n  highlightNodes = () => {\n    const { highlightingTerms, overlayItems, overlayResults } = this.state;\n    this.cyRef.current.clearHighlighting();\n    const activeTerms = highlightingTerms.filter(term => term.isActive);\n    const highlightedNodes = this.getFilteredNodes(activeTerms, overlayResults);\n    let highlightedNodesIds = highlightedNodes.map(n => n.$dtId);\n    if (overlayResults && overlayItems.twins && overlayItems.twins.length > 0) {\n      highlightedNodesIds = [ ...highlightedNodesIds, ...overlayItems.twins ];\n    }\n    this.cyRef.current.highlightNodes(highlightedNodesIds, activeTerms.length > 0 || overlayResults);\n    this.setState({ highlightedNodes });\n  }\n\n  filterNodes = () => {\n    const { filteringTerms } = this.state;\n    const activeTerms = filteringTerms.filter(term => term.isActive);\n    const filteredNodes = this.getFilteredNodes(activeTerms, false);\n    this.setState({ filteredNodes });\n    if (this.cyRef.current) {\n      this.cyRef.current.showAllNodes();\n      this.cyRef.current.filterNodes(filteredNodes);\n      eventService.publishGraphTwins(filteredNodes);\n    }\n  }\n\n  getFilteredNodes = (termsFilteringId, overlayResults) => {\n    let outgoingRels = [];\n    let filteredNodes = this.allNodes.filter(node => {\n      if (termsFilteringId.length === 0) {\n        return !overlayResults;\n      }\n      const matchesId = termsFilteringId.some(term => {\n        const matches = node.$dtId.toLowerCase().includes(term.text.toLowerCase());\n        if (matches) {\n          if (term.addOutgoingRelationships) {\n            outgoingRels = [ ...new Set([ ...outgoingRels, ...this.getNodeOutgoingRelationships(node) ]) ];\n          }\n        }\n        return matches;\n      });\n      return matchesId;\n    });\n    if (outgoingRels.length > 0) {\n      filteredNodes = [ ...new Set([ ...filteredNodes, ...outgoingRels ]) ];\n    }\n    return filteredNodes;\n  }\n\n  getNodeOutgoingRelationships = node => {\n    const outgoingRels = [];\n    const nodeRels = this.relationships.filter(rel => rel.$sourceId === node.$dtId);\n    if (nodeRels.length > 0) {\n      nodeRels.forEach(rel => {\n        outgoingRels.push(this.allNodes.find(n => n.$dtId === rel.$targetId));\n      });\n    }\n    return outgoingRels;\n  }\n\n  renderCommandBar = () => {\n    const {\n      selectedNode,\n      selectedNodes,\n      selectedEdges,\n      query,\n      layout,\n      hideMode,\n      canShowAll,\n      canShowAllRelationships\n    } = this.state;\n    return (\n      <>\n        <GraphViewerCommandBarComponent className=\"gc-commandbar\" buttonClass=\"gc-toolbarButtons\" ref={this.commandRef}\n          selectedNode={selectedNode} selectedNodes={selectedNodes} query={query}\n          layouts={Object.keys(GraphViewerCytoscapeLayouts)} layout={layout} hideMode={hideMode}\n          onRelationshipCreate={this.onRelationshipCreate}\n          onShowAllRelationships={this.onShowAllRelationships}\n          onTwinDelete={this.onTwinDelete}\n          onHideOthers={this.onHideOthers}\n          onHideNonChildren={this.onHideNonChildren}\n          onHide={this.onHide}\n          onHideWithChildren={this.onHideWithChildren}\n          onTriggerHide={this.onTriggerHide}\n          onShowAll={this.onShowAll}\n          canShowAll={canShowAll}\n          canShowAllRelationships={canShowAllRelationships}\n          onLayoutClicked={() => this.cyRef.current.doLayout()}\n          onZoomToFitClicked={() => this.cyRef.current.zoomToFit()}\n          onCenterClicked={() => this.cyRef.current.center()}\n          onLayoutChanged={this.onLayoutChanged}\n          onGetCurrentNodes={() => this.cyRef.current.graphControl.nodes()}\n          setSelectedDisplayNameProperty={this.props.setSelectedDisplayNameProperty}\n          selectedDisplayNameProperty={this.props.selectedDisplayNameProperty}\n          isDisplayNameAsteriskPresent={this.state.isDisplayNameAsteriskPresent}\n          displayNameProperties={this.props.displayNameProperties} />\n        <GraphViewerRelationshipCreateComponent ref={this.create}\n          selectedNode={selectedNode} selectedNodes={selectedNodes}\n          onCreate={this.onRelationshipCreate} />\n        <GraphViewerRelationshipViewerComponent selectedNode={selectedNode} ref={this.view} />\n        <GraphViewerTwinDeleteComponent selectedNode={selectedNode} selectedNodes={selectedNodes} query={query} ref={this.delete}\n          onDelete={this.onTwinDelete} onGetCurrentNodes={() => this.cyRef.current.graphControl.nodes()} />\n        <GraphViewerRelationshipDeleteComponent selectedEdges={selectedEdges} ref={this.deleteRel} />\n      </>\n    );\n  }\n\n  resetFiltering = () => {\n    if (this.cyRef.current) {\n      this.cyRef.current.showAllNodes();\n      this.cyRef.current.clearHighlighting();\n    }\n    this.setState({ highlightingTerms: [], filteringTerms: [] });\n  }\n\n  onSwitchFilters = e => {\n    let currentFilter = \"filter\";\n    if (e.key.includes(\"filter\")) {\n      if (this.cyRef.current) {\n        this.cyRef.current.clearHighlighting();\n      }\n      this.filterNodes();\n    } else if (e.key.includes(\"highlight\")) {\n      if (this.cyRef.current) {\n        this.cyRef.current.showAllNodes();\n      }\n      currentFilter = \"highlight\";\n      this.highlightNodes();\n    }\n    this.setState({ currentFilter });\n  }\n\n  onSelectAllHighlighted = () => {\n    const { highlightedNodes } = this.state;\n    if (highlightedNodes.length > 0) {\n      this.cyRef.current.selectNodes(highlightedNodes.map(node => node.$dtId));\n      const newSelectedNodes = highlightedNodes.map(node => ({ id: node.$dtId, modelId: node.$metadata.$model }));\n      this.setState({ selectedNode: newSelectedNodes[0], selectedNodes: newSelectedNodes });\n      eventService.publishSelectedTwins(newSelectedNodes);\n    }\n  }\n\n  onSelectAllFiltered = () => {\n    const { filteredNodes } = this.state;\n    if (filteredNodes.length > 0) {\n      this.cyRef.current.selectNodes(filteredNodes.map(node => node.$dtId));\n      const newSelectedNodes = filteredNodes.map(node => ({ id: node.$dtId, modelId: node.$metadata.$model }));\n      this.setState({ selectedNode: newSelectedNodes[0], selectedNodes: newSelectedNodes });\n      eventService.publishSelectedTwins(newSelectedNodes);\n    }\n  }\n\n  deselectAll = () => {\n    const { currentFilter } = this.state;\n    eventService.publishSelectedTwins([]);\n    this.setState({ selectedNode: null, selectedNodes: null });\n    if (currentFilter === \"filter\") {\n      this.cyRef.current.clearHighlighting();\n      this.filterNodes();\n    } else {\n      this.highlightNodes();\n    }\n  }\n\n  onClearAll = () => {\n    const { currentFilter } = this.state;\n    eventService.publishSelectedTwins([]);\n    if (currentFilter === \"filter\") {\n      this.setState({ selectedNode: null, selectedNodes: null, filteringTerms: [] }, () => {\n        this.cyRef.current.clearHighlighting();\n        this.filterNodes();\n      });\n    } else {\n      this.setState({ selectedNode: null, selectedNodes: null, highlightingTerms: [] }, () => {\n        this.highlightNodes();\n      });\n    }\n  }\n\n  onFocusBackToTwinViewer = () => eventService.publishFocusTwinViewer();\n\n  render() {\n    const { isLoading, progress, filterIsOpen, propertyInspectorIsOpen,\n      overlayResults, overlayItems, propInspectorDetailWidth, couldNotDisplay, relationshipsOnly,\n      outputIsOpen, highlightingTerms, filteringTerms, filteredNodes, highlightedNodes, noResults, selectedNodes } = this.state;\n    return (\n      <div className={`gvc-wrap ${propertyInspectorIsOpen ? \"pi-open\" : \"pi-closed\"}`}>\n        <div className={`gc-grid ${filterIsOpen ? \"open\" : \"closed\"}`}>\n          <div className=\"gc-toolbar\">\n            {this.renderCommandBar()}\n          </div>\n          <div className=\"gc-wrap\">\n            <GraphViewerCytoscapeComponent ref={this.cyRef}\n              overlayResults={overlayResults}\n              overlayItems={overlayItems}\n              disableOverlay={this.disableOverlay}\n              onEdgeClicked={this.onEdgeClicked}\n              onNodeClicked={this.onNodeClicked}\n              onNodeDoubleClicked={this.onNodeDoubleClicked}\n              onHideRelationship={this.onHideRelationship}\n              onControlClicked={this.onControlClicked}\n              onHideOthers={this.onHideOthers}\n              onHideNonChildren={this.onHideNonChildren}\n              onHide={this.onHide}\n              onFocusBackToTwinViewer={this.onFocusBackToTwinViewer}\n              onHideWithChildren={this.onHideWithChildren}\n              onCreateRelationship={this.onConfirmRelationshipCreate}\n              onGetRelationships={this.onGetRelationships}\n              onConfirmTwinDelete={this.onConfirmTwinDelete}\n              onConfirmRelationshipDelete={this.onConfirmRelationshipDelete}\n              isHighlighting={highlightingTerms && highlightingTerms.length > 0}\n              highlightFilteredNodes={this.highlightNodes}\n              displayNameProperty={this.props.selectedDisplayNameProperty}\n              setIsDisplayNameAsteriskPresent={isPresent => this.setState({ isDisplayNameAsteriskPresent: isPresent })}\n              onNodeMouseEnter={this.onNodeMouseEnter} />\n            {couldNotDisplay && <div className={`alert-no-display ${outputIsOpen ? \"output\" : \"\"} ${noResults ? \"no-results\" : \"\"}`}>\n              <div className=\"alert--info\">i</div>\n              <div className=\"alert--message\">\n                {noResults ? <span>No results found. </span>\n                  : <>\n                    {relationshipsOnly\n                      ? <><span>A graph may only be rendered if the results contain a twin. </span>\n                        <span>Click here to open the </span>\n                        <a onClick={() => {\n                          eventService.publishOpenTabularView(this.relationships);\n                          this.setState({ couldNotDisplay: false });\n                        }}>Tabular Relationships View</a></>\n                      : <span>The query returned results that could not be displayed or overlayed. </span>}\n                    {!outputIsOpen && <>\n                      <span> or open the </span>\n                      <a onClick={() => {\n                        eventService.publishOpenOptionalComponent(\"output\");\n                        this.setState({ couldNotDisplay: false });\n                      }}>Output Panel</a>\n                      <span> and run the query again to see the results.</span>\n                    </>}\n                  </>}\n              </div>\n              <Icon\n                className=\"alert--close\"\n                iconName=\"ChromeClose\"\n                aria-label={this.props.t(\"graphViewerComponent.alertCloseIcon\")}\n                role=\"button\"\n                onClick={() => this.setState({ couldNotDisplay: false })}\n                title=\"Close alert\" />\n            </div>}\n          </div>\n          <div className=\"gc-filter\">\n            <GraphViewerFilteringComponent toggleFilter={this.toggleFilter} onZoomIn={this.onZoomIn} onZoomOut={this.onZoomOut} onZoomToFit={this.onZoomToFit} onCenter={this.onCenter}\n              onAddHighlightingTerm={this.onAddHighlightingTerm}\n              onRemoveHighlightingTerm={this.onRemoveHighlightingTerm}\n              onAddFilteringTerm={this.onAddFilteringTerm}\n              onRemoveFilteringTerm={this.onRemoveFilteringTerm}\n              onUpdateFilteringTerm={this.onUpdateFilteringTerm}\n              onUpdateHighlightingTerm={this.onUpdateHighlightingTerm}\n              onSwitchFilters={this.onSwitchFilters}\n              deselectAll={this.deselectAll}\n              canSelectAllFilter={filteredNodes.length > 0 && (!selectedNodes || selectedNodes.length === 0)}\n              canSelectAllHighlight={highlightedNodes.length > 0 && (!selectedNodes || selectedNodes.length === 0)}\n              onSelectAllHighlighted={this.onSelectAllHighlighted}\n              selectAllHighlightedText={this.props.t(\"graphViewerFilteringComponent.selectAllHighlighted\")}\n              onSelectAllFiltered={this.onSelectAllFiltered}\n              selectAllFilteredText={this.props.t(\"graphViewerFilteringComponent.selectAllFiltered\")}\n              highlightingTerms={highlightingTerms}\n              filteringTerms={filteringTerms}\n              onClearAll={this.onClearAll} />\n          </div>\n          {isLoading && <LoaderComponent message={`${Math.round(progress)}%`} cancel={() => this.canceled = true} />}\n        </div>\n        <div className=\"pi-wrap\" style={{width: propertyInspectorIsOpen ? `${propInspectorDetailWidth}%` : 0}}>\n          <div className=\"pi-toggle\" tabIndex=\"0\" onClick={this.togglePropertyInspector}>\n            <Icon\n              className=\"toggle-icon\"\n              iconName={propertyInspectorIsOpen ? \"DoubleChevronRight\" : \"DoubleChevronLeft\"}\n              onClick={this.togglePropertyInspector}\n              aria-label={this.props.t(\"graphViewerComponent.toggleIcon\")}\n              role=\"button\"\n              title={this.props.t(\"graphViewerComponent.toggleIcon\")} />\n          </div>\n          <PropertyInspectorComponent isOpen={propertyInspectorIsOpen} />\n          {propertyInspectorIsOpen && (\n            <div\n              className=\"dragable\"\n              onMouseDown={this.handleMouseDown} />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default withTranslation(\"translation\", { withRef: true })(GraphViewerComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}