{"ast":null,"code":"import { getGlobalClassNames, getInputFocusStyle, hiddenContentStyle, HighContrastSelector } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input'\n};\nexport function getStyles(props) {\n  var _a;\n  var className = props.className,\n    theme = props.theme,\n    isFocused = props.isFocused,\n    inputClassName = props.inputClassName,\n    disabled = props.disabled;\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n  var semanticColors = theme.semanticColors,\n    effects = theme.effects,\n    fonts = theme.fonts;\n  var inputBorder = semanticColors.inputBorder,\n    inputBorderHovered = semanticColors.inputBorderHovered,\n    inputFocusBorderAlt = semanticColors.inputFocusBorderAlt;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n  var disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n  return {\n    root: [classNames.root, className],\n    text: [classNames.text, {\n      display: 'flex',\n      position: 'relative',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      boxSizing: 'border-box',\n      minWidth: 180,\n      minHeight: 30,\n      border: \"1px solid \" + inputBorder,\n      borderRadius: effects.roundedCorner2\n    }, !isFocused && !disabled && {\n      selectors: {\n        ':hover': {\n          borderColor: inputBorderHovered\n        }\n      }\n    }, isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2), disabled && {\n      borderColor: disabledOverlayColor,\n      selectors: (_a = {\n        ':after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          background: disabledOverlayColor\n        }\n      }, _a[HighContrastSelector] = {\n        borderColor: 'GrayText',\n        selectors: {\n          ':after': {\n            background: 'none'\n          }\n        }\n      }, _a)\n    }],\n    itemsWrapper: [classNames.itemsWrapper, {\n      display: 'flex',\n      flexWrap: 'wrap',\n      maxWidth: '100%'\n    }],\n    input: [classNames.input, fonts.medium, {\n      height: 30,\n      border: 'none',\n      flexGrow: 1,\n      outline: 'none',\n      padding: '0 6px 0',\n      alignSelf: 'flex-end',\n      borderRadius: effects.roundedCorner2,\n      backgroundColor: 'transparent',\n      color: semanticColors.inputText,\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, inputClassName],\n    screenReaderText: hiddenContentStyle\n  };\n}","map":{"version":3,"sources":["components/pickers/BasePicker.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { getGlobalClassNames, getInputFocusStyle, hiddenContentStyle, HighContrastSelector } from '../../Styling';\nimport { IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\n\nconst GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input',\n};\n\nexport function getStyles(props: IBasePickerStyleProps): IBasePickerStyles {\n  const { className, theme, isFocused, inputClassName, disabled } = props;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n  const { semanticColors, effects, fonts } = theme;\n  const { inputBorder, inputBorderHovered, inputFocusBorderAlt } = semanticColors;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n  const disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n\n  return {\n    root: [classNames.root, className],\n    text: [\n      classNames.text,\n      {\n        display: 'flex',\n        position: 'relative',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        minWidth: 180,\n        minHeight: 30,\n        border: `1px solid ${inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n      },\n      !isFocused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: inputBorderHovered,\n            },\n          },\n        },\n      isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2),\n      disabled && {\n        borderColor: disabledOverlayColor,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            background: disabledOverlayColor,\n          },\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            selectors: {\n              ':after': {\n                background: 'none',\n              },\n            },\n          },\n        },\n      },\n    ],\n    itemsWrapper: [\n      classNames.itemsWrapper,\n      {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxWidth: '100%',\n      },\n    ],\n    input: [\n      classNames.input,\n      fonts.medium,\n      {\n        height: 30,\n        border: 'none',\n        flexGrow: 1,\n        outline: 'none',\n        padding: '0 6px 0',\n        alignSelf: 'flex-end',\n        borderRadius: effects.roundedCorner2,\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        selectors: {\n          '::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n      inputClassName,\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}