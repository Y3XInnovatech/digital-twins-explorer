{"ast":null,"code":"import { getWindow } from './dom/getWindow';\n/**\n * Storing global state in local module variables has issues when more than one copy\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\n * a prebundled script.)\n *\n * This file contains helpers to deal with the getting and setting local state, and allows\n * callers to get called back when it mutates.\n */\nvar GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\nvar CALLBACK_STATE_PROP_NAME = '__callbacks__';\nvar _counter = 0;\n/**\n * Global settings helper, which stores settings in the global (window) namespace.\n * If window is not provided, it will store settings in module scope. Provides a\n * way to observe changes as well when their values change.\n *\n * @public\n * {@docCategory GlobalSettings}\n */\nvar GlobalSettings = /** @class */function () {\n  function GlobalSettings() {}\n  GlobalSettings.getValue = function (key, defaultValue) {\n    var globalSettings = _getGlobalSettings();\n    if (globalSettings[key] === undefined) {\n      globalSettings[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n    }\n    return globalSettings[key];\n  };\n  GlobalSettings.setValue = function (key, value) {\n    var globalSettings = _getGlobalSettings();\n    var callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\n    var oldValue = globalSettings[key];\n    if (value !== oldValue) {\n      globalSettings[key] = value;\n      var changeDescription = {\n        oldValue: oldValue,\n        value: value,\n        key: key\n      };\n      for (var id in callbacks) {\n        if (callbacks.hasOwnProperty(id)) {\n          callbacks[id](changeDescription);\n        }\n      }\n    }\n    return value;\n  };\n  GlobalSettings.addChangeListener = function (cb) {\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\n    var id = cb.__id__;\n    var callbacks = _getCallbacks();\n    if (!id) {\n      id = cb.__id__ = String(_counter++);\n    }\n    callbacks[id] = cb;\n  };\n  GlobalSettings.removeChangeListener = function (cb) {\n    var callbacks = _getCallbacks();\n    delete callbacks[cb.__id__];\n  };\n  return GlobalSettings;\n}();\nexport { GlobalSettings };\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _getGlobalSettings() {\n  var _a;\n  var win = getWindow();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var globalObj = win || {};\n  if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\n    globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a = {}, _a[CALLBACK_STATE_PROP_NAME] = {}, _a);\n  }\n  return globalObj[GLOBAL_SETTINGS_PROP_NAME];\n}\nfunction _getCallbacks() {\n  var globalSettings = _getGlobalSettings();\n  return globalSettings[CALLBACK_STATE_PROP_NAME];\n}","map":{"version":3,"sources":["GlobalSettings.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,iBAAiB;AAE3C;;;;;;;AAOG;AAEH,IAAM,yBAAyB,GAAG,oBAAoB;AACtD,IAAM,wBAAwB,GAAG,eAAe;AAEhD,IAAI,QAAQ,GAAG,CAAC;AA2BhB;;;;;;;AAOG;AACH,IAAA,cAAA,GAAA,aAAA,YAAA;EAAA,SAAA,cAAA,CAAA,EAAA,CAoDA;EAnDgB,cAAA,CAAA,QAAQ,GAAtB,UAA0B,GAAW,EAAE,YAA4B,EAAA;IACjE,IAAM,cAAc,GAAG,kBAAkB,CAAA,CAAE;IAE3C,IAAI,cAAc,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;MACrC,cAAc,CAAC,GAAG,CAAC,GAAG,OAAO,YAAY,KAAK,UAAU,GAAI,YAAyB,CAAA,CAAE,GAAG,YAAY;IACvG;IAED,OAAO,cAAc,CAAC,GAAG,CAAC;EAC5B,CAAC;EAEa,cAAA,CAAA,QAAQ,GAAtB,UAA0B,GAAW,EAAE,KAAQ,EAAA;IAC7C,IAAM,cAAc,GAAG,kBAAkB,CAAA,CAAE;IAC3C,IAAM,SAAS,GAAG,cAAc,CAAC,wBAAwB,CAAC;IAC1D,IAAI,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC;IAElC,IAAI,KAAK,KAAK,QAAQ,EAAE;MACtB,cAAc,CAAC,GAAG,CAAC,GAAG,KAAK;MAE3B,IAAI,iBAAiB,GAAG;QACtB,QAAQ,EAAA,QAAA;QACR,KAAK,EAAA,KAAA;QACL,GAAG,EAAA;OACJ;MAED,KAAK,IAAI,EAAE,IAAI,SAAS,EAAE;QACxB,IAAI,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE;UAChC,SAAS,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC;QACjC;MACF;IACF;IAED,OAAO,KAAK;EACd,CAAC;EAEa,cAAA,CAAA,iBAAiB,GAA/B,UAAgC,EAAwB,EAAA;IACtD;IACA;IACA,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM;IAClB,IAAM,SAAS,GAAG,aAAa,CAAA,CAAE;IAEjC,IAAI,CAAC,EAAE,EAAE;MACP,EAAE,GAAG,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;IACpC;IAED,SAAS,CAAC,EAAE,CAAC,GAAG,EAAE;EACpB,CAAC;EAEa,cAAA,CAAA,oBAAoB,GAAlC,UAAmC,EAAwB,EAAA;IACzD,IAAM,SAAS,GAAG,aAAa,CAAA,CAAE;IACjC,OAAO,SAAS,CAAC,EAAE,CAAC,MAAgB,CAAC;EACvC,CAAC;EACH,OAAA,cAAC;AAAD,CAAC,CAAA,CAAA;;AAED;AACA,SAAS,kBAAkB,CAAA,EAAA;;EACzB,IAAM,GAAG,GAAG,SAAS,CAAA,CAAE;EACvB;EACA,IAAM,SAAS,GAA2B,GAAG,IAAI,CAAA,CAAE;EAEnD,IAAI,CAAC,SAAS,CAAC,yBAAyB,CAAC,EAAE;IACzC,SAAS,CAAC,yBAAyB,CAAC,IAAA,EAAA,GAAA,CAAA,CAAA,EAClC,EAAA,CAAC,wBAAwB,CAAA,GAAG,CAAA,CAAE,E,GAC/B;EACF;EAED,OAAO,SAAS,CAAC,yBAAyB,CAAC;AAC7C;AAEA,SAAS,aAAa,CAAA,EAAA;EACpB,IAAM,cAAc,GAAG,kBAAkB,CAAA,CAAE;EAC3C,OAAO,cAAc,CAAC,wBAAwB,CAAC;AACjD","sourcesContent":["import { getWindow } from './dom/getWindow';\n\n/**\n * Storing global state in local module variables has issues when more than one copy\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\n * a prebundled script.)\n *\n * This file contains helpers to deal with the getting and setting local state, and allows\n * callers to get called back when it mutates.\n */\n\nconst GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\nconst CALLBACK_STATE_PROP_NAME = '__callbacks__';\n\nlet _counter = 0;\n\n/**\n * Change description used for change callbacks in GlobalSettings.\n *\n * @public\n * {@docCategory IChangeDescription}\n */\nexport interface IChangeDescription {\n  key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  oldValue: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n}\n\n/**\n * Change event callback.\n *\n * @public\n * {@docCategory IChangeEventCallback}\n */\nexport interface IChangeEventCallback {\n  __id__?: string;\n  (changeDescription?: IChangeDescription): void;\n}\n\n/**\n * Global settings helper, which stores settings in the global (window) namespace.\n * If window is not provided, it will store settings in module scope. Provides a\n * way to observe changes as well when their values change.\n *\n * @public\n * {@docCategory GlobalSettings}\n */\nexport class GlobalSettings {\n  public static getValue<T>(key: string, defaultValue?: T | (() => T)): T {\n    const globalSettings = _getGlobalSettings();\n\n    if (globalSettings[key] === undefined) {\n      globalSettings[key] = typeof defaultValue === 'function' ? (defaultValue as Function)() : defaultValue;\n    }\n\n    return globalSettings[key];\n  }\n\n  public static setValue<T>(key: string, value: T): T {\n    const globalSettings = _getGlobalSettings();\n    const callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\n    let oldValue = globalSettings[key];\n\n    if (value !== oldValue) {\n      globalSettings[key] = value;\n\n      let changeDescription = {\n        oldValue,\n        value,\n        key,\n      };\n\n      for (let id in callbacks) {\n        if (callbacks.hasOwnProperty(id)) {\n          callbacks[id](changeDescription);\n        }\n      }\n    }\n\n    return value;\n  }\n\n  public static addChangeListener(cb: IChangeEventCallback): void {\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\n    let id = cb.__id__;\n    const callbacks = _getCallbacks();\n\n    if (!id) {\n      id = cb.__id__ = String(_counter++);\n    }\n\n    callbacks[id] = cb;\n  }\n\n  public static removeChangeListener(cb: IChangeEventCallback): void {\n    const callbacks = _getCallbacks();\n    delete callbacks[cb.__id__ as string];\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _getGlobalSettings(): { [key: string]: any } {\n  const win = getWindow();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const globalObj: { [key: string]: any } = win || {};\n\n  if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\n    globalObj[GLOBAL_SETTINGS_PROP_NAME] = {\n      [CALLBACK_STATE_PROP_NAME]: {},\n    };\n  }\n\n  return globalObj[GLOBAL_SETTINGS_PROP_NAME];\n}\n\nfunction _getCallbacks(): { [key: string]: () => void } {\n  const globalSettings = _getGlobalSettings();\n  return globalSettings[CALLBACK_STATE_PROP_NAME];\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}