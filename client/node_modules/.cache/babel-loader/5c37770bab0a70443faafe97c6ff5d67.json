{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport { getTracer, getTraceParentHeader } from \"@azure/core-tracing\";\nimport { SpanKind } from \"@opentelemetry/api\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { URLBuilder } from \"../url\";\nexport function tracingPolicy(tracingOptions) {\n  if (tracingOptions === void 0) {\n    tracingOptions = {};\n  }\n  return {\n    create: function (nextPolicy, options) {\n      return new TracingPolicy(nextPolicy, options, tracingOptions);\n    }\n  };\n}\nvar TracingPolicy = /** @class */function (_super) {\n  __extends(TracingPolicy, _super);\n  function TracingPolicy(nextPolicy, options, tracingOptions) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n    _this.userAgent = tracingOptions.userAgent;\n    return _this;\n  }\n  TracingPolicy.prototype.sendRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tracer, spanOptions, path, span, spanContext, traceParentHeader, traceState, response, serviceRequestId, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!request.spanOptions || !request.spanOptions.parent) {\n              return [2 /*return*/, this._nextPolicy.sendRequest(request)];\n            }\n            tracer = getTracer();\n            spanOptions = __assign(__assign({}, request.spanOptions), {\n              kind: SpanKind.CLIENT\n            });\n            path = URLBuilder.parse(request.url).getPath() || \"/\";\n            span = tracer.startSpan(path, spanOptions);\n            span.setAttributes({\n              \"http.method\": request.method,\n              \"http.url\": request.url,\n              requestId: request.requestId\n            });\n            if (this.userAgent) {\n              span.setAttribute(\"http.user_agent\", this.userAgent);\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            spanContext = span.context();\n            traceParentHeader = getTraceParentHeader(spanContext);\n            if (traceParentHeader) {\n              request.headers.set(\"traceparent\", traceParentHeader);\n              traceState = spanContext.traceState && spanContext.traceState.serialize();\n              // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n              if (traceState) {\n                request.headers.set(\"tracestate\", traceState);\n              }\n            }\n            return [4 /*yield*/, this._nextPolicy.sendRequest(request)];\n          case 2:\n            response = _a.sent();\n            span.setAttribute(\"http.status_code\", response.status);\n            serviceRequestId = response.headers.get(\"x-ms-request-id\");\n            if (serviceRequestId) {\n              span.setAttribute(\"serviceRequestId\", serviceRequestId);\n            }\n            span.end();\n            return [2 /*return*/, response];\n          case 3:\n            err_1 = _a.sent();\n            span.end();\n            throw err_1;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return TracingPolicy;\n}(BaseRequestPolicy);\nexport { TracingPolicy };","map":{"version":3,"sources":["../../../src/policies/tracingPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getTracer, getTraceParentHeader } from \"@azure/core-tracing\";\nimport { SpanOptions, SpanKind } from \"@opentelemetry/api\";\nimport {\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions,\n  BaseRequestPolicy\n} from \"./requestPolicy\";\nimport { WebResourceLike } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\n\nexport interface TracingPolicyOptions {\n  userAgent?: string;\n}\n\nexport function tracingPolicy(tracingOptions: TracingPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      return new TracingPolicy(nextPolicy, options, tracingOptions);\n    }\n  };\n}\n\nexport class TracingPolicy extends BaseRequestPolicy {\n  private userAgent?: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    tracingOptions: TracingPolicyOptions\n  ) {\n    super(nextPolicy, options);\n    this.userAgent = tracingOptions.userAgent;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!request.spanOptions || !request.spanOptions.parent) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    // create a new span\n    const tracer = getTracer();\n    const spanOptions: SpanOptions = {\n      ...request.spanOptions,\n      kind: SpanKind.CLIENT\n    };\n    const path = URLBuilder.parse(request.url).getPath() || \"/\";\n    const span = tracer.startSpan(path, spanOptions);\n    span.setAttributes({\n      \"http.method\": request.method,\n      \"http.url\": request.url,\n      requestId: request.requestId\n    });\n\n    if (this.userAgent) {\n      span.setAttribute(\"http.user_agent\", this.userAgent);\n    }\n\n    try {\n      // set headers\n      const spanContext = span.context();\n      const traceParentHeader = getTraceParentHeader(spanContext);\n      if (traceParentHeader) {\n        request.headers.set(\"traceparent\", traceParentHeader);\n        const traceState = spanContext.traceState && spanContext.traceState.serialize();\n        // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n        if (traceState) {\n          request.headers.set(\"tracestate\", traceState);\n        }\n      }\n\n      const response = await this._nextPolicy.sendRequest(request);\n      span.setAttribute(\"http.status_code\", response.status);\n      const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n      if (serviceRequestId) {\n        span.setAttribute(\"serviceRequestId\", serviceRequestId);\n      }\n      span.end();\n      return response;\n    } catch (err) {\n      span.end();\n      throw err;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}