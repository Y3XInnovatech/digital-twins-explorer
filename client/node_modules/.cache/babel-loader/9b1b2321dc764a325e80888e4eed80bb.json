{"ast":null,"code":"import { _isSSR } from './setSSR';\nvar _window = undefined;\n// Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n// hits a memory leak, whereas aliasing it and calling \"typeof _window\" does not.\n// Caching the window value at the file scope lets us minimize the impact.\ntry {\n  _window = window;\n} catch (e) {\n  /* no-op */\n}\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the\n * window object won't match the \"global\" window object, and for these scenarios, you should\n * pass in an element hosted within the popup.\n *\n * @public\n */\nexport function getWindow(rootElement) {\n  if (_isSSR || typeof _window === 'undefined') {\n    return undefined;\n  } else {\n    var el = rootElement;\n    return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;\n  }\n}","map":{"version":3,"sources":["dom/getWindow.ts"],"names":[],"mappings":"AAAA,SAAS,MAAM,QAAQ,UAAU;AAEjC,IAAI,OAAO,GAAuB,SAAS;AAE3C;AACA;AACA;AACA,IAAI;EACF,OAAO,GAAG,MAAM;CACjB,CAAC,OAAO,CAAC,EAAE;EACV;AAAA;AAGF;;;;;;;AAOG;AACH,OAAM,SAAU,SAAS,CAAC,WAA4B,EAAA;EACpD,IAAI,MAAM,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;IAC5C,OAAO,SAAS;GACjB,MAAM;IACL,IAAM,EAAE,GAAG,WAAsB;IAEjC,OAAO,EAAE,IAAI,EAAE,CAAC,aAAa,IAAI,EAAE,CAAC,aAAa,CAAC,WAAW,GAAG,EAAE,CAAC,aAAa,CAAC,WAAW,GAAG,OAAO;EACvG;AACH","sourcesContent":["import { _isSSR } from './setSSR';\n\nlet _window: Window | undefined = undefined;\n\n// Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n// hits a memory leak, whereas aliasing it and calling \"typeof _window\" does not.\n// Caching the window value at the file scope lets us minimize the impact.\ntry {\n  _window = window;\n} catch (e) {\n  /* no-op */\n}\n\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the\n * window object won't match the \"global\" window object, and for these scenarios, you should\n * pass in an element hosted within the popup.\n *\n * @public\n */\nexport function getWindow(rootElement?: Element | null): Window | undefined {\n  if (_isSSR || typeof _window === 'undefined') {\n    return undefined;\n  } else {\n    const el = rootElement as Element;\n\n    return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}