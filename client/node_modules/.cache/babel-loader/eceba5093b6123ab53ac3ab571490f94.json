{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __assign } from \"tslib\";\nimport { URLBuilder, URLQuery } from \"../url\";\nvar RedactedString = \"REDACTED\";\nvar defaultAllowedHeaderNames = [\"x-ms-client-request-id\", \"x-ms-return-client-request-id\", \"x-ms-useragent\", \"x-ms-correlation-request-id\", \"x-ms-request-id\", \"client-request-id\", \"ms-cv\", \"return-client-request-id\", \"traceparent\", \"Access-Control-Allow-Credentials\", \"Access-Control-Allow-Headers\", \"Access-Control-Allow-Methods\", \"Access-Control-Allow-Origin\", \"Access-Control-Expose-Headers\", \"Access-Control-Max-Age\", \"Access-Control-Request-Headers\", \"Access-Control-Request-Method\", \"Origin\", \"Accept\", \"Cache-Control\", \"Connection\", \"Content-Length\", \"Content-Type\", \"Date\", \"ETag\", \"Expires\", \"If-Match\", \"If-Modified-Since\", \"If-None-Match\", \"If-Unmodified-Since\", \"Last-Modified\", \"Pragma\", \"Request-Id\", \"Retry-After\", \"Server\", \"Transfer-Encoding\", \"User-Agent\"];\nvar defaultAllowedQueryParameters = [\"api-version\"];\nvar Sanitizer = /** @class */function () {\n  function Sanitizer(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.allowedHeaderNames,\n      allowedHeaderNames = _c === void 0 ? [] : _c,\n      _d = _b.allowedQueryParameters,\n      allowedQueryParameters = _d === void 0 ? [] : _d;\n    allowedHeaderNames = Array.isArray(allowedHeaderNames) ? defaultAllowedHeaderNames.concat(allowedHeaderNames) : defaultAllowedHeaderNames;\n    allowedQueryParameters = Array.isArray(allowedQueryParameters) ? defaultAllowedQueryParameters.concat(allowedQueryParameters) : defaultAllowedQueryParameters;\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map(function (n) {\n      return n.toLowerCase();\n    }));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map(function (p) {\n      return p.toLowerCase();\n    }));\n  }\n  Sanitizer.prototype.sanitize = function (obj) {\n    return JSON.stringify(obj, this.replacer.bind(this), 2);\n  };\n  Sanitizer.prototype.replacer = function (key, value) {\n    // Ensure Errors include their interesting non-enumerable members\n    if (value instanceof Error) {\n      return __assign(__assign({}, value), {\n        name: value.name,\n        message: value.message\n      });\n    }\n    if (key === \"_headersMap\") {\n      return this.sanitizeHeaders(key, value);\n    } else if (key === \"url\") {\n      return this.sanitizeUrl(value);\n    } else if (key === \"query\") {\n      return this.sanitizeQuery(value);\n    } else if (key === \"body\") {\n      // Don't log the request body\n      return undefined;\n    } else if (key === \"response\") {\n      // Don't log response again\n      return undefined;\n    } else if (key === \"operationSpec\") {\n      // When using sendOperationRequest, the request carries a massive\n      // field with the autorest spec. No need to log it.\n      return undefined;\n    }\n    return value;\n  };\n  Sanitizer.prototype.sanitizeHeaders = function (_, value) {\n    return this.sanitizeObject(value, this.allowedHeaderNames, function (v, k) {\n      return v[k].value;\n    });\n  };\n  Sanitizer.prototype.sanitizeQuery = function (value) {\n    return this.sanitizeObject(value, this.allowedQueryParameters, function (v, k) {\n      return v[k];\n    });\n  };\n  Sanitizer.prototype.sanitizeObject = function (value, allowedKeys, accessor) {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n    var sanitized = {};\n    for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {\n      var k = _a[_i];\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n    return sanitized;\n  };\n  Sanitizer.prototype.sanitizeUrl = function (value) {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n    var urlBuilder = URLBuilder.parse(value);\n    var queryString = urlBuilder.getQuery();\n    if (!queryString) {\n      return value;\n    }\n    var query = URLQuery.parse(queryString);\n    for (var _i = 0, _a = query.keys(); _i < _a.length; _i++) {\n      var k = _a[_i];\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  };\n  return Sanitizer;\n}();\nexport { Sanitizer };","map":{"version":3,"sources":["../../../src/util/sanitizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { URLBuilder, URLQuery } from \"../url\";\n\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\"\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\nexport class Sanitizer {\n  public allowedHeaderNames: Set<string>;\n  public allowedQueryParameters: Set<string>;\n\n  constructor({ allowedHeaderNames = [], allowedQueryParameters = [] }: SanitizerOptions = {}) {\n    allowedHeaderNames = Array.isArray(allowedHeaderNames)\n      ? defaultAllowedHeaderNames.concat(allowedHeaderNames)\n      : defaultAllowedHeaderNames;\n\n    allowedQueryParameters = Array.isArray(allowedQueryParameters)\n      ? defaultAllowedQueryParameters.concat(allowedQueryParameters)\n      : defaultAllowedQueryParameters;\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    return JSON.stringify(obj, this.replacer.bind(this), 2);\n  }\n\n  private replacer(key: string, value: unknown): any {\n    // Ensure Errors include their interesting non-enumerable members\n    if (value instanceof Error) {\n      return {\n        ...value,\n        name: value.name,\n        message: value.message\n      };\n    }\n    if (key === \"_headersMap\") {\n      return this.sanitizeHeaders(key, value as Record<string, any>);\n    } else if (key === \"url\") {\n      return this.sanitizeUrl(value as string);\n    } else if (key === \"query\") {\n      return this.sanitizeQuery(value as Record<string, string>);\n    } else if (key === \"body\") {\n      // Don't log the request body\n      return undefined;\n    } else if (key === \"response\") {\n      // Don't log response again\n      return undefined;\n    } else if (key === \"operationSpec\") {\n      // When using sendOperationRequest, the request carries a massive\n      // field with the autorest spec. No need to log it.\n      return undefined;\n    }\n\n    return value;\n  }\n\n  private sanitizeHeaders(_: string, value: { [s: string]: any }): { [s: string]: string } {\n    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);\n  }\n\n  private sanitizeQuery(value: { [s: string]: string }): { [s: string]: string } {\n    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);\n  }\n\n  private sanitizeObject(\n    value: { [s: string]: any },\n    allowedKeys: Set<string>,\n    accessor: (value: any, key: string) => any\n  ): { [s: string]: string } {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: { [s: string]: string } = {};\n\n    for (const k of Object.keys(value)) {\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const urlBuilder = URLBuilder.parse(value);\n    const queryString = urlBuilder.getQuery();\n\n    if (!queryString) {\n      return value;\n    }\n\n    const query = URLQuery.parse(queryString);\n    for (const k of query.keys()) {\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}