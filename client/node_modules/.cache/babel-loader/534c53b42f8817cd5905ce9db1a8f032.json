{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../ContextualMenu';\nimport { KeytipContent } from './KeytipContent';\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\nvar Keytip = /** @class */function (_super) {\n  __extends(Keytip, _super);\n  function Keytip() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Keytip.prototype.render = function () {\n    var _a = this.props,\n      keySequences = _a.keySequences,\n      offset = _a.offset,\n      overflowSetSequence = _a.overflowSetSequence;\n    var calloutProps = this.props.calloutProps;\n    var keytipTarget;\n    // Take into consideration the overflow sequence\n    if (overflowSetSequence) {\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = ktpTargetFromSequences(keySequences);\n    }\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = __assign(__assign({}, calloutProps), {\n        coverTarget: true,\n        directionalHint: DirectionalHint.topLeftEdge\n      });\n    }\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = __assign(__assign({}, calloutProps), {\n        directionalHint: DirectionalHint.bottomCenter\n      });\n    }\n    return React.createElement(Callout, __assign({}, calloutProps, {\n      isBeakVisible: false,\n      doNotLayer: true,\n      minPagePadding: 0,\n      styles: offset ? getCalloutOffsetStyles(offset) : getCalloutStyles,\n      preventDismissOnScroll: true,\n      target: keytipTarget\n    }), React.createElement(KeytipContent, __assign({}, this.props)));\n  };\n  return Keytip;\n}(React.Component);\nexport { Keytip };","map":{"version":3,"sources":["components/Keytip/Keytip.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,cAAc,EAAE,sBAAsB,QAAQ,qCAAqC;AAC5F,SAAS,OAAO,QAAQ,eAAe;AACvC,SAAS,eAAe,QAAQ,sBAAsB;AAEtD,SAAS,aAAa,QAAQ,iBAAiB;AAC/C,SAAS,gBAAgB,EAAE,sBAAsB,QAAQ,iBAAiB;AAE1E;;AAEG;AACH,IAAA,MAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA4B,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;EAA5B,SAAA,MAAA,CAAA,EAAA;;EA6CA;EA5CS,MAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACQ,IAAA,EAAA,GAAA,IAAA,CAAA,KAA0D;MAAxD,YAAA,GAAA,EAAA,CAAA,YAAY;MAAE,MAAA,GAAA,EAAA,CAAA,MAAM;MAAE,mBAAA,GAAA,EAAA,CAAA,mBAAkC;IAC1D,IAAA,YAAA,GAAA,IAAA,CAAA,KAAA,CAAA,YAAY;IAElB,IAAI,YAAoB;IACxB;IACA,IAAI,mBAAmB,EAAE;MACvB,YAAY,GAAG,sBAAsB,CAAC,cAAc,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;KACzF,MAAM;MACL,YAAY,GAAG,sBAAsB,CAAC,YAAY,CAAC;IACpD;IAED,IAAI,MAAM,EAAE;MACV;MACA;MACA,YAAY,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACP,YAAY,CAAA,EAAA;QACf,WAAW,EAAE,IAAI;QACjB,eAAe,EAAE,eAAe,CAAC;MAAW,CAAA,CAC7C;IACF;IAED,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,eAAe,KAAK,SAAS,EAAE;MAC/D;MACA,YAAY,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACP,YAAY,CAAA,EAAA;QACf,eAAe,EAAE,eAAe,CAAC;MAAY,CAAA,CAC9C;IACF;IAED,OACE,KAAA,CAAA,aAAA,CAAC,OAAO,EAAA,QAAA,CAAA,CAAA,CAAA,EACF,YAAY,EAAA;MAChB,aAAa,EAAE,KAAK;MACpB,UAAU,EAAE,IAAI;MAChB,cAAc,EAAE,CAAC;MACjB,MAAM,EAAE,MAAM,GAAG,sBAAsB,CAAC,MAAM,CAAC,GAAG,gBAAgB;MAClE,sBAAsB,EAAE,IAAI;MAC5B,MAAM,EAAE;IAAY,CAAA,CAAA,EAEpB,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,IAAI,CAAC,KAAK,CAAA,CAAI,CACzB;EAEd,CAAC;EACH,OAAA,MAAC;AAAD,CAAC,CA7C2B,KAAK,CAAC,SAAS,CAAA","sourcesContent":["import * as React from 'react';\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../ContextualMenu';\nimport { IKeytipProps } from './Keytip.types';\nimport { KeytipContent } from './KeytipContent';\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\n\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\nexport class Keytip extends React.Component<IKeytipProps, {}> {\n  public render(): JSX.Element {\n    const { keySequences, offset, overflowSetSequence } = this.props;\n    let { calloutProps } = this.props;\n\n    let keytipTarget: string;\n    // Take into consideration the overflow sequence\n    if (overflowSetSequence) {\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = ktpTargetFromSequences(keySequences);\n    }\n\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = {\n        ...calloutProps,\n        coverTarget: true,\n        directionalHint: DirectionalHint.topLeftEdge,\n      };\n    }\n\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = {\n        ...calloutProps,\n        directionalHint: DirectionalHint.bottomCenter,\n      };\n    }\n\n    return (\n      <Callout\n        {...calloutProps}\n        isBeakVisible={false}\n        doNotLayer={true}\n        minPagePadding={0}\n        styles={offset ? getCalloutOffsetStyles(offset) : getCalloutStyles}\n        preventDismissOnScroll={true}\n        target={keytipTarget}\n      >\n        <KeytipContent {...this.props} />\n      </Callout>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}