{"ast":null,"code":"import { MAX_COLOR_RGB } from './consts';\n/** Converts RGB components to an HSV color. */\nexport function rgb2hsv(r, g, b) {\n  var h = NaN;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var delta = max - min;\n  // hue\n  if (delta === 0) {\n    h = 0;\n  } else if (r === max) {\n    h = (g - b) / delta % 6;\n  } else if (g === max) {\n    h = (b - r) / delta + 2;\n  } else if (b === max) {\n    h = (r - g) / delta + 4;\n  }\n  h = Math.round(h * 60);\n  if (h < 0) {\n    h += 360;\n  }\n  // saturation\n  var s = Math.round((max === 0 ? 0 : delta / max) * 100);\n  // value\n  var v = Math.round(max / MAX_COLOR_RGB * 100);\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n}","map":{"version":3,"sources":["utilities/color/rgb2hsv.ts"],"names":[],"mappings":"AACA,SAAS,aAAa,QAAQ,UAAU;AAExC;AACA,OAAM,SAAU,OAAO,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAA;EACrD,IAAI,CAAC,GAAG,GAAG;EACX,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7B,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7B,IAAM,KAAK,GAAG,GAAG,GAAG,GAAG;EAEvB;EACA,IAAI,KAAK,KAAK,CAAC,EAAE;IACf,CAAC,GAAG,CAAC;GACN,MAAM,IAAI,CAAC,KAAK,GAAG,EAAE;IACpB,CAAC,GAAI,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,GAAI,CAAC;GAC1B,MAAM,IAAI,CAAC,KAAK,GAAG,EAAE;IACpB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC;GACxB,MAAM,IAAI,CAAC,KAAK,GAAG,EAAE;IACpB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC;EACxB;EAED,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;EAEtB,IAAI,CAAC,GAAG,CAAC,EAAE;IACT,CAAC,IAAI,GAAG;EACT;EAED;EACA,IAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,CAAC;EAEzD;EACA,IAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAE,GAAG,GAAG,aAAa,GAAI,GAAG,CAAC;EAEjD,OAAO;IAAE,CAAC,EAAA,CAAA;IAAE,CAAC,EAAA,CAAA;IAAE,CAAC,EAAA;EAAA,CAAE;AACpB","sourcesContent":["import { IHSV } from './interfaces';\nimport { MAX_COLOR_RGB } from './consts';\n\n/** Converts RGB components to an HSV color. */\nexport function rgb2hsv(r: number, g: number, b: number): IHSV {\n  let h = NaN;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const delta = max - min;\n\n  // hue\n  if (delta === 0) {\n    h = 0;\n  } else if (r === max) {\n    h = ((g - b) / delta) % 6;\n  } else if (g === max) {\n    h = (b - r) / delta + 2;\n  } else if (b === max) {\n    h = (r - g) / delta + 4;\n  }\n\n  h = Math.round(h * 60);\n\n  if (h < 0) {\n    h += 360;\n  }\n\n  // saturation\n  const s = Math.round((max === 0 ? 0 : delta / max) * 100);\n\n  // value\n  const v = Math.round((max / MAX_COLOR_RGB) * 100);\n\n  return { h, s, v };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}