{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, divProperties, getNativeProps, warnDeprecations } from '../../Utilities';\nimport { ResizeGroupDirection } from './ResizeGroup.types';\nimport { initializeComponentRef } from '@uifabric/utilities';\nvar RESIZE_DELAY = 16;\n/**\n * Returns a simple object is able to store measurements with a given key.\n */\nexport var getMeasurementCache = function () {\n  var measurementsCache = {};\n  return {\n    /**\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\n     * corresponding entry in the measurementsCache, then it will return that value.\n     * Returns undefined otherwise.\n     */\n    getCachedMeasurement: function (data) {\n      if (data && data.cacheKey && measurementsCache.hasOwnProperty(data.cacheKey)) {\n        return measurementsCache[data.cacheKey];\n      }\n      return undefined;\n    },\n    /**\n     * Should be called whenever there is a new measurement associated with a given data object.\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\n     */\n    addMeasurementToCache: function (data, measurement) {\n      if (data.cacheKey) {\n        measurementsCache[data.cacheKey] = measurement;\n      }\n    }\n  };\n};\n/**\n * Returns a function that is able to compute the next state for the ResizeGroup given the current\n * state and any measurement updates.\n */\nexport var getNextResizeGroupStateProvider = function (measurementCache) {\n  if (measurementCache === void 0) {\n    measurementCache = getMeasurementCache();\n  }\n  var _measurementCache = measurementCache;\n  var _containerDimension;\n  /**\n   * Gets the width/height of the data rendered in a hidden div.\n   * @param measuredData - The data corresponding to the measurement we wish to take.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _getMeasuredDimension(measuredData, getElementToMeasureDimension) {\n    var cachedDimension = _measurementCache.getCachedMeasurement(measuredData);\n    if (cachedDimension !== undefined) {\n      return cachedDimension;\n    }\n    var measuredDimension = getElementToMeasureDimension();\n    _measurementCache.addMeasurementToCache(measuredData, measuredDimension);\n    return measuredDimension;\n  }\n  /**\n   * Will get the next IResizeGroupState based on the current data while trying to shrink contents\n   * to fit in the container.\n   * @param data - The initial data point to start measuring.\n   * @param onReduceData - Function that transforms the data into something that should render with less width/height.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _shrinkContentsUntilTheyFit(data, onReduceData, getElementToMeasureDimension) {\n    var dataToMeasure = data;\n    var measuredDimension = _getMeasuredDimension(data, getElementToMeasureDimension);\n    while (measuredDimension > _containerDimension) {\n      var nextMeasuredData = onReduceData(dataToMeasure);\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onReduceData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined\n        };\n      }\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData);\n      // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n          resizeDirection: 'shrink'\n        };\n      }\n      dataToMeasure = nextMeasuredData;\n    }\n    return {\n      renderedData: dataToMeasure,\n      resizeDirection: undefined,\n      dataToMeasure: undefined\n    };\n  }\n  /**\n   * This function should be called when the state changes in a manner that might allow for more content to fit\n   * on the screen, such as the window width/height growing.\n   * @param data - The initial data point to start measuring.\n   * @param onGrowData - Function that transforms the data into something that may take up more space when rendering.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _growDataUntilItDoesNotFit(data, onGrowData, getElementToMeasureDimension, onReduceData) {\n    var dataToMeasure = data;\n    var measuredDimension = _getMeasuredDimension(data, getElementToMeasureDimension);\n    while (measuredDimension < _containerDimension) {\n      var nextMeasuredData = onGrowData(dataToMeasure);\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onGrowData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined\n        };\n      }\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData);\n      // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData\n        };\n      }\n      dataToMeasure = nextMeasuredData;\n    }\n    // Once the loop is done, we should now shrink until the contents fit.\n    return __assign({\n      resizeDirection: 'shrink'\n    }, _shrinkContentsUntilTheyFit(dataToMeasure, onReduceData, getElementToMeasureDimension));\n  }\n  /**\n   * Handles an update to the container width/height.\n   * Should only be called when we knew the previous container width/height.\n   * @param newDimension - The new width/height of the container.\n   * @param fullDimensionData - The initial data passed in as a prop to resizeGroup.\n   * @param renderedData - The data that was rendered prior to the container size changing.\n   * @param onGrowData - Set to true if the Resize group has an onGrowData function.\n   */\n  function _updateContainerDimension(newDimension, fullDimensionData, renderedData, onGrowData) {\n    var nextState;\n    if (newDimension > _containerDimension) {\n      if (onGrowData) {\n        nextState = {\n          resizeDirection: 'grow',\n          dataToMeasure: onGrowData(renderedData)\n        };\n      } else {\n        nextState = {\n          resizeDirection: 'shrink',\n          dataToMeasure: fullDimensionData\n        };\n      }\n    } else {\n      nextState = {\n        resizeDirection: 'shrink',\n        dataToMeasure: renderedData\n      };\n    }\n    _containerDimension = newDimension;\n    return __assign(__assign({}, nextState), {\n      measureContainer: false\n    });\n  }\n  function getNextState(props, currentState, getElementToMeasureDimension, newContainerDimension) {\n    // If there is no new container width/height or data to measure, there is no need for a new state update\n    if (newContainerDimension === undefined && currentState.dataToMeasure === undefined) {\n      return undefined;\n    }\n    if (newContainerDimension) {\n      // If we know the last container size and we rendered data at that width/height, we can do an optimized render\n      if (_containerDimension && currentState.renderedData && !currentState.dataToMeasure) {\n        return __assign(__assign({}, currentState), _updateContainerDimension(newContainerDimension, props.data, currentState.renderedData, props.onGrowData));\n      }\n      // If we are just setting the container width/height for the first time, we can't do any optimizations\n      _containerDimension = newContainerDimension;\n    }\n    var nextState = __assign(__assign({}, currentState), {\n      measureContainer: false\n    });\n    if (currentState.dataToMeasure) {\n      if (currentState.resizeDirection === 'grow' && props.onGrowData) {\n        nextState = __assign(__assign({}, nextState), _growDataUntilItDoesNotFit(currentState.dataToMeasure, props.onGrowData, getElementToMeasureDimension, props.onReduceData));\n      } else {\n        nextState = __assign(__assign({}, nextState), _shrinkContentsUntilTheyFit(currentState.dataToMeasure, props.onReduceData, getElementToMeasureDimension));\n      }\n    }\n    return nextState;\n  }\n  /** Function that determines if we need to render content for measurement based on the measurement cache contents. */\n  function shouldRenderDataForMeasurement(dataToMeasure) {\n    if (!dataToMeasure || _measurementCache.getCachedMeasurement(dataToMeasure) !== undefined) {\n      return false;\n    }\n    return true;\n  }\n  function getInitialResizeGroupState(data) {\n    return {\n      dataToMeasure: __assign({}, data),\n      resizeDirection: 'grow',\n      measureContainer: true\n    };\n  }\n  return {\n    getNextState: getNextState,\n    shouldRenderDataForMeasurement: shouldRenderDataForMeasurement,\n    getInitialResizeGroupState: getInitialResizeGroupState\n  };\n};\n// Provides a context property that (if true) tells any child components that\n// they are only being used for measurement purposes and will not be visible.\nexport var MeasuredContext = React.createContext({\n  isMeasured: false\n});\n// Styles for the hidden div used for measurement\nvar hiddenDivStyles = {\n  position: 'fixed',\n  visibility: 'hidden'\n};\nvar hiddenParentStyles = {\n  position: 'relative'\n};\nvar COMPONENT_NAME = 'ResizeGroup';\nvar ResizeGroupBase = /** @class */function (_super) {\n  __extends(ResizeGroupBase, _super);\n  function ResizeGroupBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._nextResizeGroupStateProvider = getNextResizeGroupStateProvider();\n    // The root div which is the container inside of which we are trying to fit content.\n    _this._root = React.createRef();\n    // A div that can be used for the initial measurement so that we can avoid mounting a second instance\n    // of the component being measured for the initial render.\n    _this._initialHiddenDiv = React.createRef();\n    // A hidden div that is used for mounting a new instance of the component for measurement in a hidden\n    // div without unmounting the currently visible content.\n    _this._updateHiddenDiv = React.createRef();\n    // Tracks if any content has been rendered to the user. This enables us to do some performance optimizations\n    // for the initial render.\n    _this._hasRenderedContent = false;\n    _this.state = _this._nextResizeGroupStateProvider.getInitialResizeGroupState(_this.props.data);\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      styles: 'className'\n    });\n    return _this;\n  }\n  ResizeGroupBase.prototype.render = function () {\n    var _a = this.props,\n      className = _a.className,\n      onRenderData = _a.onRenderData;\n    var _b = this.state,\n      dataToMeasure = _b.dataToMeasure,\n      renderedData = _b.renderedData;\n    var divProps = getNativeProps(this.props, divProperties, ['data']);\n    var dataNeedsMeasuring = this._nextResizeGroupStateProvider.shouldRenderDataForMeasurement(dataToMeasure);\n    var isInitialMeasure = !this._hasRenderedContent && dataNeedsMeasuring;\n    // We only ever render the final content to the user. All measurements are done in a hidden div.\n    // For the initial render, we want this to be as fast as possible, so we need to make sure that we only mount one\n    // version of the component for measurement and the final render. For renders that update what is on screen, we\n    // want to make sure that there are no jarring effects such as the screen flashing as we apply scaling steps for\n    // measurement. In the update case, we mount a second version of the component just for measurement purposes and\n    // leave the rendered content untouched until we know the next state to show to the user.\n    return React.createElement(\"div\", __assign({}, divProps, {\n      className: className,\n      ref: this._root\n    }), React.createElement(\"div\", {\n      style: hiddenParentStyles\n    }, dataNeedsMeasuring && !isInitialMeasure && React.createElement(\"div\", {\n      style: hiddenDivStyles,\n      ref: this._updateHiddenDiv\n    }, React.createElement(MeasuredContext.Provider, {\n      value: {\n        isMeasured: true\n      }\n    }, onRenderData(dataToMeasure))), React.createElement(\"div\", {\n      ref: this._initialHiddenDiv,\n      style: isInitialMeasure ? hiddenDivStyles : undefined,\n      \"data-automation-id\": \"visibleContent\"\n    }, isInitialMeasure ? onRenderData(dataToMeasure) : renderedData && onRenderData(renderedData))));\n  };\n  ResizeGroupBase.prototype.componentDidMount = function () {\n    this._afterComponentRendered(this.props.direction);\n    this._events.on(window, 'resize', this._async.debounce(this._onResize, RESIZE_DELAY, {\n      leading: true\n    }));\n  };\n  ResizeGroupBase.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    this.setState({\n      dataToMeasure: __assign({}, nextProps.data),\n      resizeDirection: 'grow',\n      // Receiving new props means the parent might rerender and the root width/height might change\n      measureContainer: true\n    });\n  };\n  ResizeGroupBase.prototype.componentDidUpdate = function (prevProps) {\n    if (this.state.renderedData) {\n      this._hasRenderedContent = true;\n      if (this.props.dataDidRender) {\n        this.props.dataDidRender(this.state.renderedData);\n      }\n    }\n    this._afterComponentRendered(this.props.direction);\n  };\n  ResizeGroupBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  ResizeGroupBase.prototype.remeasure = function () {\n    if (this._root.current) {\n      this.setState({\n        measureContainer: true\n      });\n    }\n  };\n  ResizeGroupBase.prototype._afterComponentRendered = function (direction) {\n    var _this = this;\n    this._async.requestAnimationFrame(function () {\n      var containerDimension = undefined;\n      if (_this.state.measureContainer && _this._root.current) {\n        var boundingRect = _this._root.current.getBoundingClientRect();\n        containerDimension = direction && direction === ResizeGroupDirection.vertical ? boundingRect.height : boundingRect.width;\n      }\n      var nextState = _this._nextResizeGroupStateProvider.getNextState(_this.props, _this.state, function () {\n        var refToMeasure = !_this._hasRenderedContent ? _this._initialHiddenDiv : _this._updateHiddenDiv;\n        if (!refToMeasure.current) {\n          return 0;\n        }\n        return direction && direction === ResizeGroupDirection.vertical ? refToMeasure.current.scrollHeight : refToMeasure.current.scrollWidth;\n      }, containerDimension);\n      if (nextState) {\n        _this.setState(nextState);\n      }\n    }, this._root.current);\n  };\n  ResizeGroupBase.prototype._onResize = function () {\n    if (this._root.current) {\n      this.setState({\n        measureContainer: true\n      });\n    }\n  };\n  return ResizeGroupBase;\n}(React.Component);\nexport { ResizeGroupBase };","map":{"version":3,"sources":["components/ResizeGroup/ResizeGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Async, EventGroup, divProperties, getNativeProps, warnDeprecations } from '../../Utilities';\nimport { IResizeGroupProps, ResizeGroupDirection } from './ResizeGroup.types';\nimport { initializeComponentRef } from '@uifabric/utilities';\n\nconst RESIZE_DELAY = 16;\n\nexport interface IResizeGroupState {\n  /**\n   * Final data used to render proper sized component\n   */\n  renderedData?: any;\n\n  /**\n   * Data to render in a hidden div for measurement\n   */\n  dataToMeasure?: any;\n\n  /**\n   * Set to true when the content container might have new dimensions and should\n   * be remeasured.\n   */\n  measureContainer?: boolean;\n\n  /**\n   * Are we resizing to accommodate having more or less available space?\n   * The 'grow' direction is when the container may have more room than the last render,\n   * such as when a window resize occurs. This means we will try to fit more content in the window.\n   * The 'shrink' direction is when the contents don't fit in the container and we need\n   * to find a transformation of the data that makes everything fit.\n   */\n  resizeDirection?: 'grow' | 'shrink';\n}\n\n/**\n * Returns a simple object is able to store measurements with a given key.\n */\nexport const getMeasurementCache = () => {\n  const measurementsCache: { [key: string]: number } = {};\n\n  return {\n    /**\n     * Checks if the provided data has a cacheKey. If it has a cacheKey and there is a\n     * corresponding entry in the measurementsCache, then it will return that value.\n     * Returns undefined otherwise.\n     */\n    getCachedMeasurement: (data: any): number | undefined => {\n      if (data && data.cacheKey && measurementsCache.hasOwnProperty(data.cacheKey)) {\n        return measurementsCache[data.cacheKey];\n      }\n\n      return undefined;\n    },\n    /**\n     * Should be called whenever there is a new measurement associated with a given data object.\n     * If the data has a cacheKey, store that measurement in the measurementsCache.\n     */\n    addMeasurementToCache: (data: any, measurement: number): void => {\n      if (data.cacheKey) {\n        measurementsCache[data.cacheKey] = measurement;\n      }\n    },\n  };\n};\n\n/**\n * Returns a function that is able to compute the next state for the ResizeGroup given the current\n * state and any measurement updates.\n */\nexport const getNextResizeGroupStateProvider = (measurementCache = getMeasurementCache()) => {\n  const _measurementCache = measurementCache;\n  let _containerDimension: number | undefined;\n\n  /**\n   * Gets the width/height of the data rendered in a hidden div.\n   * @param measuredData - The data corresponding to the measurement we wish to take.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _getMeasuredDimension(measuredData: any, getElementToMeasureDimension: () => number): number {\n    const cachedDimension = _measurementCache.getCachedMeasurement(measuredData);\n    if (cachedDimension !== undefined) {\n      return cachedDimension;\n    }\n\n    const measuredDimension = getElementToMeasureDimension();\n    _measurementCache.addMeasurementToCache(measuredData, measuredDimension);\n    return measuredDimension;\n  }\n\n  /**\n   * Will get the next IResizeGroupState based on the current data while trying to shrink contents\n   * to fit in the container.\n   * @param data - The initial data point to start measuring.\n   * @param onReduceData - Function that transforms the data into something that should render with less width/height.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _shrinkContentsUntilTheyFit(\n    data: any,\n    onReduceData: (prevData: any) => any,\n    getElementToMeasureDimension: () => number,\n  ): IResizeGroupState {\n    let dataToMeasure = data;\n    let measuredDimension: number | undefined = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension > _containerDimension!) {\n      const nextMeasuredData = onReduceData(dataToMeasure);\n\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onReduceData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined,\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData);\n\n      // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n          resizeDirection: 'shrink',\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    return {\n      renderedData: dataToMeasure,\n      resizeDirection: undefined,\n      dataToMeasure: undefined,\n    };\n  }\n\n  /**\n   * This function should be called when the state changes in a manner that might allow for more content to fit\n   * on the screen, such as the window width/height growing.\n   * @param data - The initial data point to start measuring.\n   * @param onGrowData - Function that transforms the data into something that may take up more space when rendering.\n   * @param getElementToMeasureDimension - A function that returns the measurement of the rendered data.\n   * Only called when the measurement is not in the cache.\n   */\n  function _growDataUntilItDoesNotFit(\n    data: any,\n    onGrowData: (prevData: any) => any,\n    getElementToMeasureDimension: () => number,\n    onReduceData: (prevData: any) => any,\n  ): IResizeGroupState {\n    let dataToMeasure = data;\n    let measuredDimension: number | undefined = _getMeasuredDimension(data, getElementToMeasureDimension);\n\n    while (measuredDimension < _containerDimension!) {\n      const nextMeasuredData = onGrowData(dataToMeasure);\n\n      // We don't want to get stuck in an infinite render loop when there are no more\n      // scaling steps, so implementations of onGrowData should return undefined when\n      // there are no more scaling states to apply.\n      if (nextMeasuredData === undefined) {\n        return {\n          renderedData: dataToMeasure,\n          resizeDirection: undefined,\n          dataToMeasure: undefined,\n        };\n      }\n\n      measuredDimension = _measurementCache.getCachedMeasurement(nextMeasuredData);\n      // If the measurement isn't in the cache, we need to rerender with some data in a hidden div\n      if (measuredDimension === undefined) {\n        return {\n          dataToMeasure: nextMeasuredData,\n        };\n      }\n\n      dataToMeasure = nextMeasuredData;\n    }\n\n    // Once the loop is done, we should now shrink until the contents fit.\n    return {\n      resizeDirection: 'shrink',\n      ..._shrinkContentsUntilTheyFit(dataToMeasure, onReduceData, getElementToMeasureDimension),\n    };\n  }\n\n  /**\n   * Handles an update to the container width/height.\n   * Should only be called when we knew the previous container width/height.\n   * @param newDimension - The new width/height of the container.\n   * @param fullDimensionData - The initial data passed in as a prop to resizeGroup.\n   * @param renderedData - The data that was rendered prior to the container size changing.\n   * @param onGrowData - Set to true if the Resize group has an onGrowData function.\n   */\n  function _updateContainerDimension(\n    newDimension: number,\n    fullDimensionData: any,\n    renderedData: any,\n    onGrowData?: (prevData: any) => any,\n  ): IResizeGroupState {\n    let nextState: IResizeGroupState;\n    if (newDimension > _containerDimension!) {\n      if (onGrowData) {\n        nextState = {\n          resizeDirection: 'grow',\n          dataToMeasure: onGrowData(renderedData),\n        };\n      } else {\n        nextState = {\n          resizeDirection: 'shrink',\n          dataToMeasure: fullDimensionData,\n        };\n      }\n    } else {\n      nextState = {\n        resizeDirection: 'shrink',\n        dataToMeasure: renderedData,\n      };\n    }\n    _containerDimension = newDimension;\n    return { ...nextState, measureContainer: false };\n  }\n\n  function getNextState(\n    props: IResizeGroupProps,\n    currentState: IResizeGroupState,\n    getElementToMeasureDimension: () => number,\n    newContainerDimension?: number,\n  ): IResizeGroupState | undefined {\n    // If there is no new container width/height or data to measure, there is no need for a new state update\n    if (newContainerDimension === undefined && currentState.dataToMeasure === undefined) {\n      return undefined;\n    }\n\n    if (newContainerDimension) {\n      // If we know the last container size and we rendered data at that width/height, we can do an optimized render\n      if (_containerDimension && currentState.renderedData && !currentState.dataToMeasure) {\n        return {\n          ...currentState,\n          ..._updateContainerDimension(newContainerDimension, props.data, currentState.renderedData, props.onGrowData),\n        };\n      }\n\n      // If we are just setting the container width/height for the first time, we can't do any optimizations\n      _containerDimension = newContainerDimension;\n    }\n\n    let nextState: IResizeGroupState = {\n      ...currentState,\n      measureContainer: false,\n    };\n\n    if (currentState.dataToMeasure) {\n      if (currentState.resizeDirection === 'grow' && props.onGrowData) {\n        nextState = {\n          ...nextState,\n          ..._growDataUntilItDoesNotFit(\n            currentState.dataToMeasure,\n            props.onGrowData,\n            getElementToMeasureDimension,\n            props.onReduceData,\n          ),\n        };\n      } else {\n        nextState = {\n          ...nextState,\n          ..._shrinkContentsUntilTheyFit(currentState.dataToMeasure, props.onReduceData, getElementToMeasureDimension),\n        };\n      }\n    }\n\n    return nextState;\n  }\n\n  /** Function that determines if we need to render content for measurement based on the measurement cache contents. */\n  function shouldRenderDataForMeasurement(dataToMeasure: any | undefined): boolean {\n    if (!dataToMeasure || _measurementCache.getCachedMeasurement(dataToMeasure) !== undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function getInitialResizeGroupState(data: any): IResizeGroupState {\n    return {\n      dataToMeasure: { ...data },\n      resizeDirection: 'grow',\n      measureContainer: true,\n    };\n  }\n\n  return {\n    getNextState,\n    shouldRenderDataForMeasurement,\n    getInitialResizeGroupState,\n  };\n};\n\n// Provides a context property that (if true) tells any child components that\n// they are only being used for measurement purposes and will not be visible.\nexport const MeasuredContext = React.createContext({ isMeasured: false });\n\n// Styles for the hidden div used for measurement\nconst hiddenDivStyles: React.CSSProperties = { position: 'fixed', visibility: 'hidden' };\nconst hiddenParentStyles: React.CSSProperties = { position: 'relative' };\nconst COMPONENT_NAME = 'ResizeGroup';\n\nexport class ResizeGroupBase extends React.Component<IResizeGroupProps, IResizeGroupState> {\n  private _nextResizeGroupStateProvider = getNextResizeGroupStateProvider();\n  // The root div which is the container inside of which we are trying to fit content.\n  private _root = React.createRef<HTMLDivElement>();\n  // A div that can be used for the initial measurement so that we can avoid mounting a second instance\n  // of the component being measured for the initial render.\n  private _initialHiddenDiv = React.createRef<HTMLDivElement>();\n  // A hidden div that is used for mounting a new instance of the component for measurement in a hidden\n  // div without unmounting the currently visible content.\n  private _updateHiddenDiv = React.createRef<HTMLDivElement>();\n  // Tracks if any content has been rendered to the user. This enables us to do some performance optimizations\n  // for the initial render.\n  private _hasRenderedContent = false;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  constructor(props: IResizeGroupProps) {\n    super(props);\n    this.state = this._nextResizeGroupStateProvider.getInitialResizeGroupState(this.props.data);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      styles: 'className',\n    });\n  }\n\n  public render(): JSX.Element {\n    const { className, onRenderData } = this.props;\n    const { dataToMeasure, renderedData } = this.state;\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['data']);\n\n    const dataNeedsMeasuring = this._nextResizeGroupStateProvider.shouldRenderDataForMeasurement(dataToMeasure);\n\n    const isInitialMeasure = !this._hasRenderedContent && dataNeedsMeasuring;\n\n    // We only ever render the final content to the user. All measurements are done in a hidden div.\n    // For the initial render, we want this to be as fast as possible, so we need to make sure that we only mount one\n    // version of the component for measurement and the final render. For renders that update what is on screen, we\n    // want to make sure that there are no jarring effects such as the screen flashing as we apply scaling steps for\n    // measurement. In the update case, we mount a second version of the component just for measurement purposes and\n    // leave the rendered content untouched until we know the next state to show to the user.\n    return (\n      <div {...divProps} className={className} ref={this._root}>\n        <div style={hiddenParentStyles}>\n          {dataNeedsMeasuring && !isInitialMeasure && (\n            <div style={hiddenDivStyles} ref={this._updateHiddenDiv}>\n              <MeasuredContext.Provider value={{ isMeasured: true }}>\n                {onRenderData(dataToMeasure)}\n              </MeasuredContext.Provider>\n            </div>\n          )}\n\n          <div\n            ref={this._initialHiddenDiv}\n            style={isInitialMeasure ? hiddenDivStyles : undefined}\n            data-automation-id=\"visibleContent\"\n          >\n            {isInitialMeasure ? onRenderData(dataToMeasure) : renderedData && onRenderData(renderedData)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public componentDidMount(): void {\n    this._afterComponentRendered(this.props.direction);\n    this._events.on(window, 'resize', this._async.debounce(this._onResize, RESIZE_DELAY, { leading: true }));\n  }\n\n  public UNSAFE_componentWillReceiveProps(nextProps: IResizeGroupProps): void {\n    this.setState({\n      dataToMeasure: { ...nextProps.data },\n      resizeDirection: 'grow',\n      // Receiving new props means the parent might rerender and the root width/height might change\n      measureContainer: true,\n    });\n  }\n\n  public componentDidUpdate(prevProps: IResizeGroupProps) {\n    if (this.state.renderedData) {\n      this._hasRenderedContent = true;\n      if (this.props.dataDidRender) {\n        this.props.dataDidRender(this.state.renderedData);\n      }\n    }\n    this._afterComponentRendered(this.props.direction);\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public remeasure(): void {\n    if (this._root.current) {\n      this.setState({ measureContainer: true });\n    }\n  }\n\n  private _afterComponentRendered(direction?: ResizeGroupDirection): void {\n    this._async.requestAnimationFrame(() => {\n      let containerDimension = undefined;\n      if (this.state.measureContainer && this._root.current) {\n        const boundingRect = this._root.current.getBoundingClientRect();\n        containerDimension =\n          direction && direction === ResizeGroupDirection.vertical ? boundingRect.height : boundingRect.width;\n      }\n      const nextState = this._nextResizeGroupStateProvider.getNextState(\n        this.props,\n        this.state,\n        () => {\n          const refToMeasure = !this._hasRenderedContent ? this._initialHiddenDiv : this._updateHiddenDiv;\n          if (!refToMeasure.current) {\n            return 0;\n          }\n          return direction && direction === ResizeGroupDirection.vertical\n            ? refToMeasure.current.scrollHeight\n            : refToMeasure.current.scrollWidth;\n        },\n        containerDimension,\n      );\n\n      if (nextState) {\n        this.setState(nextState);\n      }\n    }, this._root.current);\n  }\n\n  private _onResize(): void {\n    if (this._root.current) {\n      this.setState({ measureContainer: true });\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}