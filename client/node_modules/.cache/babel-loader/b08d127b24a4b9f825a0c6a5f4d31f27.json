{"ast":null,"code":"/**\n * Sets the virtual parent of an element.\n * Pass `undefined` as the `parent` to clear the virtual parent.\n *\n * @public\n */\nexport function setVirtualParent(child, parent) {\n  var virtualChild = child;\n  var virtualParent = parent;\n  if (!virtualChild._virtual) {\n    virtualChild._virtual = {\n      children: []\n    };\n  }\n  var oldParent = virtualChild._virtual.parent;\n  if (oldParent && oldParent !== parent) {\n    // Remove the child from its old parent.\n    var index = oldParent._virtual.children.indexOf(virtualChild);\n    if (index > -1) {\n      oldParent._virtual.children.splice(index, 1);\n    }\n  }\n  virtualChild._virtual.parent = virtualParent || undefined;\n  if (virtualParent) {\n    if (!virtualParent._virtual) {\n      virtualParent._virtual = {\n        children: []\n      };\n    }\n    virtualParent._virtual.children.push(virtualChild);\n  }\n}","map":{"version":3,"sources":["setVirtualParent.ts"],"names":[],"mappings":"AACA;;;;;AAKG;AACH,OAAM,SAAU,gBAAgB,CAAC,KAAkB,EAAE,MAA0B,EAAA;EAC7E,IAAM,YAAY,GAAoB,KAAK;EAC3C,IAAM,aAAa,GAA2B,MAAM;EAEpD,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;IAC1B,YAAY,CAAC,QAAQ,GAAG;MACtB,QAAQ,EAAE;KACX;EACF;EAED,IAAM,SAAS,GAAG,YAAY,CAAC,QAAQ,CAAC,MAAM;EAE9C,IAAI,SAAS,IAAI,SAAS,KAAK,MAAM,EAAE;IACrC;IACA,IAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC;IAE/D,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;MACd,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;IAC7C;EACF;EAED,YAAY,CAAC,QAAQ,CAAC,MAAM,GAAG,aAAa,IAAI,SAAS;EAEzD,IAAI,aAAa,EAAE;IACjB,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;MAC3B,aAAa,CAAC,QAAQ,GAAG;QACvB,QAAQ,EAAE;OACX;IACF;IAED,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;EACnD;AACH","sourcesContent":["import { IVirtualElement } from './IVirtualElement';\n/**\n * Sets the virtual parent of an element.\n * Pass `undefined` as the `parent` to clear the virtual parent.\n *\n * @public\n */\nexport function setVirtualParent(child: HTMLElement, parent: HTMLElement | null): void {\n  const virtualChild = <IVirtualElement>child;\n  const virtualParent = <IVirtualElement | null>parent;\n\n  if (!virtualChild._virtual) {\n    virtualChild._virtual = {\n      children: [],\n    };\n  }\n\n  const oldParent = virtualChild._virtual.parent;\n\n  if (oldParent && oldParent !== parent) {\n    // Remove the child from its old parent.\n    const index = oldParent._virtual.children.indexOf(virtualChild);\n\n    if (index > -1) {\n      oldParent._virtual.children.splice(index, 1);\n    }\n  }\n\n  virtualChild._virtual.parent = virtualParent || undefined;\n\n  if (virtualParent) {\n    if (!virtualParent._virtual) {\n      virtualParent._virtual = {\n        children: [],\n      };\n    }\n\n    virtualParent._virtual.children.push(virtualChild);\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}