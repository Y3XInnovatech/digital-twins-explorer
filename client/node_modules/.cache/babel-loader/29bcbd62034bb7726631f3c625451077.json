{"ast":null,"code":"import { SELECTION_CHANGE, SelectionMode } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\n/**\n * {@docCategory Selection}\n */\nvar Selection = /** @class */function () {\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  function Selection() {\n    var options = []; // Otherwise, arguments require options with `getKey`.\n    for (var _i = 0 // Otherwise, arguments require options with `getKey`.\n    ; _i < arguments.length // Otherwise, arguments require options with `getKey`.\n    ; _i++ // Otherwise, arguments require options with `getKey`.\n    ) {\n      options[_i] = arguments[_i]; // Otherwise, arguments require options with `getKey`.\n    }\n    var _a = options[0] || {},\n      onSelectionChanged = _a.onSelectionChanged,\n      getKey = _a.getKey,\n      _b = _a.canSelectItem,\n      canSelectItem = _b === void 0 ? function () {\n        return true;\n      } : _b,\n      items = _a.items,\n      _c = _a.selectionMode,\n      selectionMode = _c === void 0 ? SelectionMode.multiple : _c;\n    this.mode = selectionMode;\n    this._getKey = getKey || defaultGetKey;\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n    this._onSelectionChanged = onSelectionChanged;\n    this._canSelectItem = canSelectItem;\n    this._isModal = false;\n    this.setItems(items || [], true);\n    this.count = this.getSelectedCount();\n  }\n  Selection.prototype.canSelectItem = function (item, index) {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n    return this._canSelectItem(item, index);\n  };\n  Selection.prototype.getKey = function (item, index) {\n    var key = this._getKey(item, index);\n    return typeof key === 'number' || key ? \"\" + key : '';\n  };\n  Selection.prototype.setChangeEvents = function (isEnabled, suppressChange) {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  };\n  Selection.prototype.isModal = function () {\n    return this._isModal;\n  };\n  Selection.prototype.setModal = function (isModal) {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n      this._isModal = isModal;\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n      this._change();\n      this.setChangeEvents(true);\n    }\n  };\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  Selection.prototype.setItems = function (items, shouldClear) {\n    if (shouldClear === void 0) {\n      shouldClear = true;\n    }\n    var newKeyToIndexMap = {};\n    var newUnselectableIndices = {};\n    var hasSelectionChanged = false;\n    this.setChangeEvents(false);\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n    // Build lookup table for quick selection evaluation.\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      if (item) {\n        var key = this.getKey(item, i);\n        if (key) {\n          newKeyToIndexMap[key] = i;\n        }\n      }\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n    // Check the exemption list for discrepencies.\n    var newExemptedIndicies = {};\n    var newExemptedCount = 0;\n    for (var indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        var index = Number(indexProperty);\n        var item = this._items[index];\n        var exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        var newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n    if (hasSelectionChanged) {\n      this._updateCount();\n      this._change();\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype.getItems = function () {\n    return this._items;\n  };\n  Selection.prototype.getSelection = function () {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n      var items = this._items;\n      if (items) {\n        for (var i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n    return this._selectedItems;\n  };\n  Selection.prototype.getSelectedCount = function () {\n    return this._isAllSelected ? this._items.length - this._exemptedCount - this._unselectableCount : this._exemptedCount;\n  };\n  Selection.prototype.getSelectedIndices = function () {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n      var items = this._items;\n      if (items) {\n        for (var i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n    return this._selectedIndices;\n  };\n  Selection.prototype.isRangeSelected = function (fromIndex, count) {\n    if (count === 0) {\n      return false;\n    }\n    var endIndex = fromIndex + count;\n    for (var i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  Selection.prototype.isAllSelected = function () {\n    var selectableCount = this._items.length - this._unselectableCount;\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n    return this.count > 0 && this._isAllSelected && this._exemptedCount === 0 || !this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0;\n  };\n  Selection.prototype.isKeySelected = function (key) {\n    var index = this._keyToIndexMap[key];\n    return this.isIndexSelected(index);\n  };\n  Selection.prototype.isIndexSelected = function (index) {\n    return !!(this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index] || !this._isAllSelected && this._exemptedIndices[index]);\n  };\n  Selection.prototype.setAllSelected = function (isAllSelected) {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n    var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n    this.setChangeEvents(false);\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n      this._updateCount();\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype.setKeySelected = function (key, isSelected, shouldAnchor) {\n    var index = this._keyToIndexMap[key];\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  };\n  Selection.prototype.setIndexSelected = function (index, isSelected, shouldAnchor) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n    this.setChangeEvents(false);\n    var isExempt = this._exemptedIndices[index];\n    var canSelect = !this._unselectableIndices[index];\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n      // Determine if we need to remove the exemption.\n      if (isExempt && (isSelected && this._isAllSelected || !isSelected && !this._isAllSelected)) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n      // Determine if we need to add the exemption.\n      if (!isExempt && (isSelected && !this._isAllSelected || !isSelected && this._isAllSelected)) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n    this._updateCount();\n    this.setChangeEvents(true);\n  };\n  Selection.prototype.selectToKey = function (key, clearSelection) {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  };\n  Selection.prototype.selectToIndex = function (index, clearSelection) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n    var anchorIndex = this._anchoredIndex || 0;\n    var startIndex = Math.min(index, anchorIndex);\n    var endIndex = Math.max(index, anchorIndex);\n    this.setChangeEvents(false);\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype.toggleAllSelected = function () {\n    this.setAllSelected(!this.isAllSelected());\n  };\n  Selection.prototype.toggleKeySelected = function (key) {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  };\n  Selection.prototype.toggleIndexSelected = function (index) {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  };\n  Selection.prototype.toggleRangeSelected = function (fromIndex, count) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n    var isRangeSelected = this.isRangeSelected(fromIndex, count);\n    var endIndex = fromIndex + count;\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n    this.setChangeEvents(false);\n    for (var i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype._updateCount = function (preserveModalState) {\n    if (preserveModalState === void 0) {\n      preserveModalState = false;\n    }\n    var count = this.getSelectedCount();\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  };\n  Selection.prototype._setAllSelected = function (isAllSelected, preserveModalState) {\n    if (preserveModalState === void 0) {\n      preserveModalState = false;\n    }\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n    var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n    this.setChangeEvents(false);\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n      this._updateCount(preserveModalState);\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype._change = function () {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n      EventGroup.raise(this, SELECTION_CHANGE);\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  };\n  return Selection;\n}();\nexport { Selection };\nfunction defaultGetKey(item, index) {\n  // 0 may be used as a key\n  var _a = (item || {}).key,\n    key = _a === void 0 ? \"\" + index : _a;\n  return key;\n}","map":{"version":3,"sources":["selection/Selection.ts"],"names":[],"mappings":"AAAA,SAAqC,gBAAgB,EAAE,aAAa,QAAQ,mBAAmB;AAC/F,SAAS,UAAU,QAAQ,eAAe;AAqB1C;;AAEG;AACH,IAAA,SAAA,GAAA,aAAA,YAAA;EAuBE;;;;AAIG;EACH,SAAA,SAAA,CAAA,EAAA;IACE,IAAA,OAAA,GAAA,EAAA,CAEgD,CAAC;SAFjD,IAAA,EAAA,GAAA,CAEgD,CAAC;IAAA,EAFjD,EAAA,GAAA,SAAA,CAAA,MAEgD,CAAC;IAAA,EAFjD,EAAA,EAEgD,CAAC;IAAA,E;MAFjD,OAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAEgD,CAAC;;IAE3C,IAAA,EAAA,GAAA,OAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAC0C;MADxC,kBAAA,GAAA,EAAA,CAAA,kBAAkB;MAAE,MAAA,GAAA,EAAA,CAAA,MAAM;MAAE,EAAA,GAAA,EAAA,CAAA,aAA0B;MAA1B,aAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,YAAA;QAAA,OAAA,IAAA;MAAA,CAAA,GAAA,EAA0B;MAAE,KAAA,GAAA,EAAA,CAAA,KAAK;MAAE,EAAA,GAAA,EAAA,CAAA,aAAsC;MAAtC,aAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,aAAA,CAAA,QAAA,GAAA,EACvB;IAEhD,IAAI,CAAC,IAAI,GAAG,aAAa;IAEzB,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,aAAa;IAEtC,IAAI,CAAC,4BAA4B,GAAG,CAAC;IACrC,IAAI,CAAC,cAAc,GAAG,CAAC;IACvB,IAAI,CAAC,cAAc,GAAG,CAAC;IACvB,IAAI,CAAC,kBAAkB,GAAG,CAAC;IAE3B,IAAI,CAAC,mBAAmB,GAAG,kBAAkB;IAC7C,IAAI,CAAC,cAAc,GAAG,aAAa;IAEnC,IAAI,CAAC,QAAQ,GAAG,KAAK;IAErB,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,EAAE,IAAI,CAAC;IAEhC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAA,CAAE;EACtC;EAEO,SAAA,CAAA,SAAA,CAAA,aAAa,GAApB,UAAqB,IAAW,EAAE,KAAc,EAAA;IAC9C,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,GAAG,CAAC,EAAE;MAC1C,OAAO,KAAK;IACb;IAED,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC;EACzC,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,IAAW,EAAE,KAAc,EAAA;IACvC,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;IAErC,OAAO,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,GAAG,EAAA,GAAG,GAAK,GAAG,EAAE;EACvD,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UAAuB,SAAkB,EAAE,cAAwB,EAAA;IACjE,IAAI,CAAC,4BAA4B,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC;IAEvD,IAAI,IAAI,CAAC,4BAA4B,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE;MAC/D,IAAI,CAAC,WAAW,GAAG,KAAK;MAExB,IAAI,CAAC,cAAc,EAAE;QACnB,IAAI,CAAC,OAAO,CAAA,CAAE;MACf;IACF;EACH,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IACE,OAAO,IAAI,CAAC,QAAQ;EACtB,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,UAAgB,OAAgB,EAAA;IAC9B,IAAI,IAAI,CAAC,QAAQ,KAAK,OAAO,EAAE;MAC7B,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;MAE3B,IAAI,CAAC,QAAQ,GAAG,OAAO;MAEvB,IAAI,CAAC,OAAO,EAAE;QACZ,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;MAC3B;MAED,IAAI,CAAC,OAAO,CAAA,CAAE;MAEd,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;IAC3B;EACH,CAAC;EAED;;;;;AAKG;EACI,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,UAAgB,KAAc,EAAE,WAA2B,EAAA;IAA3B,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;MAAA,WAAA,GAAA,IAA2B;IAAA;IACzD,IAAM,gBAAgB,GAA8B,CAAA,CAAE;IACtD,IAAM,sBAAsB,GAA+B,CAAA,CAAE;IAC7D,IAAI,mBAAmB,GAAG,KAAK;IAE/B,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IAE3B;IACA,IAAI,CAAC,kBAAkB,GAAG,CAAC;IAE3B;IACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACrC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;MAErB,IAAI,IAAI,EAAE;QACR,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QAEhC,IAAI,GAAG,EAAE;UACP,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC;QAC1B;MACF;MAED,sBAAsB,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;MAC7D,IAAI,sBAAsB,CAAC,CAAC,CAAC,EAAE;QAC7B,IAAI,CAAC,kBAAkB,EAAE;MAC1B;IACF;IAED,IAAI,WAAW,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;MACrC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC;IAClC;IAED;IACA,IAAM,mBAAmB,GAA+B,CAAA,CAAE;IAC1D,IAAI,gBAAgB,GAAG,CAAC;IAExB,KAAK,IAAM,aAAa,IAAI,IAAI,CAAC,gBAAgB,EAAE;MACjD,IAAI,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;QACvD,IAAM,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC;QACnC,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QAC/B,IAAM,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,SAAS;QACrE,IAAM,QAAQ,GAAG,SAAS,GAAG,gBAAgB,CAAC,SAAS,CAAC,GAAG,KAAK;QAEhE,IAAI,QAAQ,KAAK,SAAS,EAAE;UAC1B;UACA,mBAAmB,GAAG,IAAI;SAC3B,MAAM;UACL;UACA,mBAAmB,CAAC,QAAQ,CAAC,GAAG,IAAI;UACpC,gBAAgB,EAAE;UAClB,mBAAmB,GAAG,mBAAmB,IAAI,QAAQ,KAAK,KAAK;QAChE;MACF;IACF;IAED,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE;MAC1G;MACA,mBAAmB,GAAG,IAAI;IAC3B;IAED,IAAI,CAAC,gBAAgB,GAAG,mBAAmB;IAC3C,IAAI,CAAC,cAAc,GAAG,gBAAgB;IACtC,IAAI,CAAC,cAAc,GAAG,gBAAgB;IACtC,IAAI,CAAC,oBAAoB,GAAG,sBAAsB;IAClD,IAAI,CAAC,MAAM,GAAG,KAAK;IACnB,IAAI,CAAC,cAAc,GAAG,IAAI;IAE1B,IAAI,mBAAmB,EAAE;MACvB,IAAI,CAAC,YAAY,CAAA,CAAE;MACnB,IAAI,CAAC,OAAO,CAAA,CAAE;IACf;IAED,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;EAC5B,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,YAAA;IACE,OAAO,IAAI,CAAC,MAAM;EACpB,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,YAAY,GAAnB,YAAA;IACE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;MACxB,IAAI,CAAC,cAAc,GAAG,EAAE;MAExB,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM;MAEzB,IAAI,KAAK,EAAE;QACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;UACrC,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE;YAC3B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;UACnC;QACF;MACF;IACF;IAED,OAAO,IAAI,CAAC,cAAc;EAC5B,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,YAAA;IACE,OAAO,IAAI,CAAC,cAAc,GACtB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,kBAAkB,GAClE,IAAI,CAAC,cAAc;EACzB,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,kBAAkB,GAAzB,YAAA;IACE,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;MAC1B,IAAI,CAAC,gBAAgB,GAAG,EAAE;MAE1B,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM;MAEzB,IAAI,KAAK,EAAE;QACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;UACrC,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE;YAC3B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;UAC9B;QACF;MACF;IACF;IAED,OAAO,IAAI,CAAC,gBAAgB;EAC9B,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UAAuB,SAAiB,EAAE,KAAa,EAAA;IACrD,IAAI,KAAK,KAAK,CAAC,EAAE;MACf,OAAO,KAAK;IACb;IAED,IAAM,QAAQ,GAAG,SAAS,GAAG,KAAK;IAElC,KAAK,IAAI,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;MACzC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE;QAC5B,OAAO,KAAK;MACb;IACF;IAED,OAAO,IAAI;EACb,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,aAAa,GAApB,YAAA;IACE,IAAI,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB;IAElE;IACA,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,MAAM,EAAE;MACtC,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC;IAC/C;IAED,OACG,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,KAAK,CAAC,IAClE,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,KAAK,eAAe,IAAI,eAAe,GAAG,CAAE;EAE5F,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,aAAa,GAApB,UAAqB,GAAW,EAAA;IAC9B,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;IAEtC,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;EACpC,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UAAuB,KAAa,EAAA;IAClC,OAAO,CAAC,EACL,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAC3G,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAE,CACvD;EACH,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,cAAc,GAArB,UAAsB,aAAsB,EAAA;IAC1C,IAAI,aAAa,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,QAAQ,EAAE;MACzD;IACD;IAED,IAAM,eAAe,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,GAAG,CAAC;IAEtF,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IAE3B,IAAI,eAAe,GAAG,CAAC,KAAK,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,aAAa,KAAK,IAAI,CAAC,cAAc,CAAC,EAAE;MAC7F,IAAI,CAAC,gBAAgB,GAAG,CAAA,CAAE;MAE1B,IAAI,aAAa,KAAK,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;QACpE,IAAI,CAAC,cAAc,GAAG,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,aAAa;QACnC,IAAI,CAAC,OAAO,CAAA,CAAE;MACf;MAED,IAAI,CAAC,YAAY,CAAA,CAAE;IACpB;IAED,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;EAC5B,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,cAAc,GAArB,UAAsB,GAAW,EAAE,UAAmB,EAAE,YAAqB,EAAA;IAC3E,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;IAEtC,IAAI,KAAK,IAAI,CAAC,EAAE;MACd,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,YAAY,CAAC;IACvD;EACH,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UAAwB,KAAa,EAAE,UAAmB,EAAE,YAAqB,EAAA;IAC/E,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,EAAE;MACpC;IACD;IAED;IACA,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAE5D;IACA,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;MAC5C;IACD;IAED,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IAE3B,IAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;IAC7C,IAAM,SAAS,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;IAEnD,IAAI,SAAS,EAAE;MACb,IAAI,UAAU,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,MAAM,EAAE;QACpD;QACA,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC;MAClC;MAED;MACA,IAAI,QAAQ,KAAM,UAAU,IAAI,IAAI,CAAC,cAAc,IAAM,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,cAAe,CAAC,EAAE;QAC9F,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;QACnC,IAAI,CAAC,cAAc,EAAE;MACtB;MAED;MACA,IAAI,CAAC,QAAQ,KAAM,UAAU,IAAI,CAAC,IAAI,CAAC,cAAc,IAAM,CAAC,UAAU,IAAI,IAAI,CAAC,cAAe,CAAC,EAAE;QAC/F,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,IAAI;QACnC,IAAI,CAAC,cAAc,EAAE;MACtB;MAED,IAAI,YAAY,EAAE;QAChB,IAAI,CAAC,cAAc,GAAG,KAAK;MAC5B;IACF;IAED,IAAI,CAAC,YAAY,CAAA,CAAE;IAEnB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;EAC5B,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,UAAmB,GAAW,EAAE,cAAwB,EAAA;IACtD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,cAAc,CAAC;EAC9D,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,aAAa,GAApB,UAAqB,KAAa,EAAE,cAAwB,EAAA;IAC1D,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,EAAE;MACpC;IACD;IAED,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,MAAM,EAAE;MACtC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;MACxC;IACD;IAED,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,IAAI,CAAC;IAC5C,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC;IAC7C,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC;IAE7C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IAE3B,IAAI,cAAc,EAAE;MAClB,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC;IAClC;IAED,OAAO,UAAU,IAAI,QAAQ,EAAE,UAAU,EAAE,EAAE;MAC3C,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,EAAE,KAAK,CAAC;IAC/C;IAED,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;EAC5B,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,YAAA;IACE,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,aAAa,CAAA,CAAE,CAAC;EAC5C,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,UAAyB,GAAW,EAAA;IAClC,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC;EAC1D,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,mBAAmB,GAA1B,UAA2B,KAAa,EAAA;IACtC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;EAClE,CAAC;EAEM,SAAA,CAAA,SAAA,CAAA,mBAAmB,GAA1B,UAA2B,SAAiB,EAAE,KAAa,EAAA;IACzD,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,EAAE;MACpC;IACD;IAED,IAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,KAAK,CAAC;IAC9D,IAAM,QAAQ,GAAG,SAAS,GAAG,KAAK;IAElC,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,MAAM,IAAI,KAAK,GAAG,CAAC,EAAE;MACnD;IACD;IAED,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IAC3B,KAAK,IAAI,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;MACzC,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,eAAe,EAAE,KAAK,CAAC;IAClD;IACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;EAC5B,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,YAAY,GAApB,UAAqB,kBAAmC,EAAA;IAAnC,IAAA,kBAAA,KAAA,KAAA,CAAA,EAAA;MAAA,kBAAA,GAAA,KAAmC;IAAA;IACtD,IAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAA,CAAE;IAErC,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;MACxB,IAAI,CAAC,KAAK,GAAG,KAAK;MAClB,IAAI,CAAC,OAAO,CAAA,CAAE;IACf;IAED,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,kBAAkB,EAAE;MACtC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;IACrB;EACH,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,UAAwB,aAAsB,EAAE,kBAAmC,EAAA;IAAnC,IAAA,kBAAA,KAAA,KAAA,CAAA,EAAA;MAAA,kBAAA,GAAA,KAAmC;IAAA;IACjF,IAAI,aAAa,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,QAAQ,EAAE;MACzD;IACD;IAED,IAAM,eAAe,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,GAAG,CAAC;IAEtF,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IAE3B,IAAI,eAAe,GAAG,CAAC,KAAK,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,aAAa,KAAK,IAAI,CAAC,cAAc,CAAC,EAAE;MAC7F,IAAI,CAAC,gBAAgB,GAAG,CAAA,CAAE;MAE1B,IAAI,aAAa,KAAK,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;QACpE,IAAI,CAAC,cAAc,GAAG,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,aAAa;QACnC,IAAI,CAAC,OAAO,CAAA,CAAE;MACf;MAED,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC;IACtC;IAED,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;EAC5B,CAAC;EAEO,SAAA,CAAA,SAAA,CAAA,OAAO,GAAf,YAAA;IACE,IAAI,IAAI,CAAC,4BAA4B,KAAK,CAAC,EAAE;MAC3C,IAAI,CAAC,cAAc,GAAG,IAAI;MAC1B,IAAI,CAAC,gBAAgB,GAAG,SAAS;MAEjC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,gBAAgB,CAAC;MAExC,IAAI,IAAI,CAAC,mBAAmB,EAAE;QAC5B,IAAI,CAAC,mBAAmB,CAAA,CAAE;MAC3B;KACF,MAAM;MACL,IAAI,CAAC,WAAW,GAAG,IAAI;IACxB;EACH,CAAC;EACH,OAAA,SAAC;AAAD,CAAC,CAAA,CAAA;;AAED,SAAS,aAAa,CAAyB,IAAW,EAAE,KAAc,EAAA;EACxE;EACQ,IAAA,EAAA,GAAA,CAAA,IAAA,IAAA,CAAA,CAAA,EAAA,GAAgB;IAAhB,GAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,KAAA,GAAA,EAAgB;EACxB,OAAO,GAAG;AACZ","sourcesContent":["import { IObjectWithKey, ISelection, SELECTION_CHANGE, SelectionMode } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionOptions<TItem = IObjectWithKey> {\n  onSelectionChanged?: () => void;\n  /** Custom logic to generate item keys. Required if `TItem` does not have a `key` property. */\n  getKey?: (item: TItem, index?: number) => string | number;\n  canSelectItem?: (item: TItem, index?: number) => boolean;\n  selectionMode?: SelectionMode;\n  items?: TItem[];\n}\n\n/**\n * Selection options with required `getKey` property.\n * {@docCategory Selection}\n */\nexport type ISelectionOptionsWithRequiredGetKey<TItem> = ISelectionOptions<TItem> &\n  Required<Pick<ISelectionOptions<TItem>, 'getKey'>>;\n\n/**\n * {@docCategory Selection}\n */\nexport class Selection<TItem = IObjectWithKey> implements ISelection<TItem> {\n  /** Number of items selected. Do not modify. */\n  public count: number;\n  public readonly mode: SelectionMode;\n\n  private _getKey: (item: TItem, index?: number) => string | number;\n  private _canSelectItem: (item: TItem, index?: number) => boolean;\n\n  private _changeEventSuppressionCount: number;\n  private _items: TItem[];\n  private _selectedItems: TItem[] | null;\n  private _selectedIndices: number[] | undefined;\n  private _isAllSelected: boolean;\n  private _exemptedIndices: { [index: string]: boolean };\n  private _exemptedCount: number;\n  private _keyToIndexMap: { [key: string]: number };\n  private _anchoredIndex: number;\n  private _onSelectionChanged: (() => void) | undefined;\n  private _hasChanged: boolean;\n  private _unselectableIndices: { [index: string]: boolean };\n  private _unselectableCount: number;\n  private _isModal: boolean;\n\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  constructor(\n    ...options: TItem extends IObjectWithKey // If the item type has a built-in key...\n      ? [] | [ISelectionOptions<TItem>] // Then the arguments can be empty or have the options without `getKey`\n      : [ISelectionOptionsWithRequiredGetKey<TItem>] // Otherwise, arguments require options with `getKey`.\n  ) {\n    const { onSelectionChanged, getKey, canSelectItem = () => true, items, selectionMode = SelectionMode.multiple } =\n      options[0] || ({} as ISelectionOptions<TItem>);\n\n    this.mode = selectionMode;\n\n    this._getKey = getKey || defaultGetKey;\n\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n\n    this._onSelectionChanged = onSelectionChanged;\n    this._canSelectItem = canSelectItem;\n\n    this._isModal = false;\n\n    this.setItems(items || [], true);\n\n    this.count = this.getSelectedCount();\n  }\n\n  public canSelectItem(item: TItem, index?: number): boolean {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n\n    return this._canSelectItem(item, index);\n  }\n\n  public getKey(item: TItem, index?: number): string {\n    const key = this._getKey(item, index);\n\n    return typeof key === 'number' || key ? `${key}` : '';\n  }\n\n  public setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  }\n\n  public isModal(): boolean {\n    return this._isModal;\n  }\n\n  public setModal(isModal: boolean): void {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n\n      this._isModal = isModal;\n\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n\n      this._change();\n\n      this.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  public setItems(items: TItem[], shouldClear: boolean = true): void {\n    const newKeyToIndexMap: { [key: string]: number } = {};\n    const newUnselectableIndices: { [key: string]: boolean } = {};\n    let hasSelectionChanged = false;\n\n    this.setChangeEvents(false);\n\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n\n    // Build lookup table for quick selection evaluation.\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item) {\n        const key = this.getKey(item, i);\n\n        if (key) {\n          newKeyToIndexMap[key] = i;\n        }\n      }\n\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n\n    // Check the exemption list for discrepencies.\n    const newExemptedIndicies: { [key: string]: boolean } = {};\n    let newExemptedCount = 0;\n\n    for (const indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        const index = Number(indexProperty);\n        const item = this._items[index];\n        const exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        const newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n\n    if (hasSelectionChanged) {\n      this._updateCount();\n      this._change();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public getItems(): TItem[] {\n    return this._items;\n  }\n\n  public getSelection(): TItem[] {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n\n    return this._selectedItems;\n  }\n\n  public getSelectedCount(): number {\n    return this._isAllSelected\n      ? this._items.length - this._exemptedCount - this._unselectableCount\n      : this._exemptedCount;\n  }\n\n  public getSelectedIndices(): number[] {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n\n    return this._selectedIndices;\n  }\n\n  public isRangeSelected(fromIndex: number, count: number): boolean {\n    if (count === 0) {\n      return false;\n    }\n\n    const endIndex = fromIndex + count;\n\n    for (let i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isAllSelected(): boolean {\n    let selectableCount = this._items.length - this._unselectableCount;\n\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n\n    return (\n      (this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||\n      (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0)\n    );\n  }\n\n  public isKeySelected(key: string): boolean {\n    const index = this._keyToIndexMap[key];\n\n    return this.isIndexSelected(index);\n  }\n\n  public isIndexSelected(index: number): boolean {\n    return !!(\n      (this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\n      (!this._isAllSelected && this._exemptedIndices[index])\n    );\n  }\n\n  public setAllSelected(isAllSelected: boolean): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void {\n    const index = this._keyToIndexMap[key];\n\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  }\n\n  public setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const isExempt = this._exemptedIndices[index];\n    const canSelect = !this._unselectableIndices[index];\n\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n\n      // Determine if we need to remove the exemption.\n      if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n\n      // Determine if we need to add the exemption.\n      if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n\n    this._updateCount();\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToKey(key: string, clearSelection?: boolean): void {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  }\n\n  public selectToIndex(index: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(index, anchorIndex);\n    const endIndex = Math.max(index, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public toggleAllSelected(): void {\n    this.setAllSelected(!this.isAllSelected());\n  }\n\n  public toggleKeySelected(key: string): void {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  }\n\n  public toggleIndexSelected(index: number): void {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  }\n\n  public toggleRangeSelected(fromIndex: number, count: number): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    const isRangeSelected = this.isRangeSelected(fromIndex, count);\n    const endIndex = fromIndex + count;\n\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n    for (let i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  }\n\n  private _updateCount(preserveModalState: boolean = false): void {\n    const count = this.getSelectedCount();\n\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  }\n\n  private _setAllSelected(isAllSelected: boolean, preserveModalState: boolean = false): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount(preserveModalState);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  private _change(): void {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n\n      EventGroup.raise(this, SELECTION_CHANGE);\n\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  }\n}\n\nfunction defaultGetKey<TItem = IObjectWithKey>(item: TItem, index?: number): string | number {\n  // 0 may be used as a key\n  const { key = `${index}` } = (item || {}) as IObjectWithKey;\n  return key;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}