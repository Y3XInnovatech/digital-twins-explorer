{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, AutoScroll, classNamesFunction, findScrollableParent, getDistanceBetweenPoints, getRTL, initializeComponentRef } from '../../Utilities';\nvar getClassNames = classNamesFunction();\n// We want to make the marquee selection start when the user drags a minimum distance. Otherwise we'd start\n// the drag even if they just click an item without moving.\nvar MIN_DRAG_DISTANCE = 5;\n/**\n * MarqueeSelection component abstracts managing a draggable rectangle which sets items selected/not selected.\n * Elements which have data-selectable-index attributes are queried and measured once to determine if they\n * fall within the bounds of the rectangle. The measure is memoized during the drag as a performance optimization\n * so if the items change sizes while dragging, that could cause incorrect results.\n */\nvar MarqueeSelectionBase = /** @class */function (_super) {\n  __extends(MarqueeSelectionBase, _super);\n  function MarqueeSelectionBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._onMouseDown = function (ev) {\n      var _a = _this.props,\n        isEnabled = _a.isEnabled,\n        onShouldStartSelection = _a.onShouldStartSelection;\n      // Ensure the mousedown is within the boundaries of the target. If not, it may have been a click on a scrollbar.\n      if (_this._isMouseEventOnScrollbar(ev)) {\n        return;\n      }\n      if (_this._isInSelectionToggle(ev)) {\n        return;\n      }\n      if (!_this._isTouch && isEnabled && !_this._isDragStartInSelection(ev) && (!onShouldStartSelection || onShouldStartSelection(ev))) {\n        if (_this._scrollableSurface && ev.button === 0 && _this._root.current) {\n          _this._selectedIndicies = {};\n          _this._preservedIndicies = undefined;\n          _this._events.on(window, 'mousemove', _this._onAsyncMouseMove, true);\n          _this._events.on(_this._scrollableParent, 'scroll', _this._onAsyncMouseMove);\n          _this._events.on(window, 'click', _this._onMouseUp, true);\n          _this._autoScroll = new AutoScroll(_this._root.current);\n          _this._scrollTop = _this._scrollableSurface.scrollTop;\n          _this._scrollLeft = _this._scrollableSurface.scrollLeft;\n          _this._rootRect = _this._root.current.getBoundingClientRect();\n          _this._onMouseMove(ev);\n        }\n      }\n    };\n    _this._onTouchStart = function (ev) {\n      _this._isTouch = true;\n      _this._async.setTimeout(function () {\n        _this._isTouch = false;\n      }, 0);\n    };\n    _this._onPointerDown = function (ev) {\n      if (ev.pointerType === 'touch') {\n        _this._isTouch = true;\n        _this._async.setTimeout(function () {\n          _this._isTouch = false;\n        }, 0);\n      }\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      dragRect: undefined\n    };\n    return _this;\n  }\n  MarqueeSelectionBase.prototype.componentDidMount = function () {\n    this._scrollableParent = findScrollableParent(this._root.current);\n    this._scrollableSurface = this._scrollableParent === window ? document.body : this._scrollableParent;\n    // When scroll events come from window, we need to read scrollTop values from the body.\n    var hitTarget = this.props.isDraggingConstrainedToRoot ? this._root.current : this._scrollableSurface;\n    this._events.on(hitTarget, 'mousedown', this._onMouseDown);\n    this._events.on(hitTarget, 'touchstart', this._onTouchStart, true);\n    this._events.on(hitTarget, 'pointerdown', this._onPointerDown, true);\n  };\n  MarqueeSelectionBase.prototype.componentWillUnmount = function () {\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n    delete this._scrollableParent;\n    delete this._scrollableSurface;\n    this._events.dispose();\n    this._async.dispose();\n  };\n  MarqueeSelectionBase.prototype.render = function () {\n    var _a = this.props,\n      rootProps = _a.rootProps,\n      children = _a.children,\n      theme = _a.theme,\n      className = _a.className,\n      styles = _a.styles;\n    var dragRect = this.state.dragRect;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className\n    });\n    return React.createElement(\"div\", __assign({}, rootProps, {\n      className: classNames.root,\n      ref: this._root\n    }), children, dragRect && React.createElement(\"div\", {\n      className: classNames.dragMask\n    }), dragRect && React.createElement(\"div\", {\n      className: classNames.box,\n      style: dragRect\n    }, React.createElement(\"div\", {\n      className: classNames.boxFill\n    })));\n  };\n  /** Determine if the mouse event occured on a scrollbar of the target element. */\n  MarqueeSelectionBase.prototype._isMouseEventOnScrollbar = function (ev) {\n    var targetElement = ev.target;\n    var targetScrollbarWidth = targetElement.offsetWidth - targetElement.clientWidth;\n    if (targetScrollbarWidth) {\n      var targetRect = targetElement.getBoundingClientRect();\n      // Check vertical scroll\n      if (getRTL(this.props.theme)) {\n        if (ev.clientX < targetRect.left + targetScrollbarWidth) {\n          return true;\n        }\n      } else {\n        if (ev.clientX > targetRect.left + targetElement.clientWidth) {\n          return true;\n        }\n      }\n      // Check horizontal scroll\n      if (ev.clientY > targetRect.top + targetElement.clientHeight) {\n        return true;\n      }\n    }\n    return false;\n  };\n  MarqueeSelectionBase.prototype._getRootRect = function () {\n    return {\n      left: this._rootRect.left + (this._scrollLeft - this._scrollableSurface.scrollLeft),\n      top: this._rootRect.top + (this._scrollTop - this._scrollableSurface.scrollTop),\n      width: this._rootRect.width,\n      height: this._rootRect.height\n    };\n  };\n  MarqueeSelectionBase.prototype._onAsyncMouseMove = function (ev) {\n    var _this = this;\n    this._async.requestAnimationFrame(function () {\n      _this._onMouseMove(ev);\n    });\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n  MarqueeSelectionBase.prototype._onMouseMove = function (ev) {\n    if (!this._autoScroll) {\n      return;\n    }\n    if (ev.clientX !== undefined) {\n      this._lastMouseEvent = ev;\n    }\n    var rootRect = this._getRootRect();\n    var currentPoint = {\n      left: ev.clientX - rootRect.left,\n      top: ev.clientY - rootRect.top\n    };\n    if (!this._dragOrigin) {\n      this._dragOrigin = currentPoint;\n    }\n    if (ev.buttons !== undefined && ev.buttons === 0) {\n      this._onMouseUp(ev);\n    } else {\n      if (this.state.dragRect || getDistanceBetweenPoints(this._dragOrigin, currentPoint) > MIN_DRAG_DISTANCE) {\n        if (!this.state.dragRect) {\n          var selection = this.props.selection;\n          if (!ev.shiftKey) {\n            selection.setAllSelected(false);\n          }\n          this._preservedIndicies = selection && selection.getSelectedIndices && selection.getSelectedIndices();\n        }\n        // We need to constrain the current point to the rootRect boundaries.\n        var constrainedPoint = this.props.isDraggingConstrainedToRoot ? {\n          left: Math.max(0, Math.min(rootRect.width, this._lastMouseEvent.clientX - rootRect.left)),\n          top: Math.max(0, Math.min(rootRect.height, this._lastMouseEvent.clientY - rootRect.top))\n        } : {\n          left: this._lastMouseEvent.clientX - rootRect.left,\n          top: this._lastMouseEvent.clientY - rootRect.top\n        };\n        var dragRect = {\n          left: Math.min(this._dragOrigin.left || 0, constrainedPoint.left),\n          top: Math.min(this._dragOrigin.top || 0, constrainedPoint.top),\n          width: Math.abs(constrainedPoint.left - (this._dragOrigin.left || 0)),\n          height: Math.abs(constrainedPoint.top - (this._dragOrigin.top || 0))\n        };\n        this._evaluateSelection(dragRect, rootRect);\n        this.setState({\n          dragRect: dragRect\n        });\n      }\n    }\n    return false;\n  };\n  MarqueeSelectionBase.prototype._onMouseUp = function (ev) {\n    this._events.off(window);\n    this._events.off(this._scrollableParent, 'scroll');\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n    this._autoScroll = this._dragOrigin = this._lastMouseEvent = undefined;\n    this._selectedIndicies = this._itemRectCache = undefined;\n    if (this.state.dragRect) {\n      this.setState({\n        dragRect: undefined\n      });\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n  MarqueeSelectionBase.prototype._isPointInRectangle = function (rectangle, point) {\n    return !!point.top && rectangle.top < point.top && rectangle.bottom > point.top && !!point.left && rectangle.left < point.left && rectangle.right > point.left;\n  };\n  /**\n   * We do not want to start the marquee if we're trying to marquee\n   * from within an existing marquee selection.\n   */\n  MarqueeSelectionBase.prototype._isDragStartInSelection = function (ev) {\n    var selection = this.props.selection;\n    if (!this._root.current || selection && selection.getSelectedCount() === 0) {\n      return false;\n    }\n    var allElements = this._root.current.querySelectorAll('[data-selection-index]');\n    for (var i = 0; i < allElements.length; i++) {\n      var element = allElements[i];\n      var index = Number(element.getAttribute('data-selection-index'));\n      if (selection.isIndexSelected(index)) {\n        var itemRect = element.getBoundingClientRect();\n        if (this._isPointInRectangle(itemRect, {\n          left: ev.clientX,\n          top: ev.clientY\n        })) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  MarqueeSelectionBase.prototype._isInSelectionToggle = function (ev) {\n    var element = ev.target;\n    while (element && element !== this._root.current) {\n      if (element.getAttribute('data-selection-toggle') === 'true') {\n        return true;\n      }\n      element = element.parentElement;\n    }\n    return false;\n  };\n  MarqueeSelectionBase.prototype._evaluateSelection = function (dragRect, rootRect) {\n    // Break early if we don't need to evaluate.\n    if (!dragRect || !this._root.current) {\n      return;\n    }\n    var selection = this.props.selection;\n    var allElements = this._root.current.querySelectorAll('[data-selection-index]');\n    if (!this._itemRectCache) {\n      this._itemRectCache = {};\n    }\n    for (var i = 0; i < allElements.length; i++) {\n      var element = allElements[i];\n      var index = element.getAttribute('data-selection-index');\n      // Pull the memoized rectangle for the item, or the get the rect and memoize.\n      var itemRect = this._itemRectCache[index];\n      if (!itemRect) {\n        itemRect = element.getBoundingClientRect();\n        // Normalize the item rect to the dragRect coordinates.\n        itemRect = {\n          left: itemRect.left - rootRect.left,\n          top: itemRect.top - rootRect.top,\n          width: itemRect.width,\n          height: itemRect.height,\n          right: itemRect.left - rootRect.left + itemRect.width,\n          bottom: itemRect.top - rootRect.top + itemRect.height\n        };\n        if (itemRect.width > 0 && itemRect.height > 0) {\n          this._itemRectCache[index] = itemRect;\n        }\n      }\n      if (itemRect.top < dragRect.top + dragRect.height && itemRect.bottom > dragRect.top && itemRect.left < dragRect.left + dragRect.width && itemRect.right > dragRect.left) {\n        this._selectedIndicies[index] = true;\n      } else {\n        delete this._selectedIndicies[index];\n      }\n    }\n    // set previousSelectedIndices to be all of the selected indices from last time\n    var previousSelectedIndices = this._allSelectedIndices || {};\n    this._allSelectedIndices = {};\n    // set all indices that are supposed to be selected in _allSelectedIndices\n    for (var index in this._selectedIndicies) {\n      if (this._selectedIndicies.hasOwnProperty(index)) {\n        this._allSelectedIndices[index] = true;\n      }\n    }\n    if (this._preservedIndicies) {\n      for (var _i = 0, _a = this._preservedIndicies; _i < _a.length; _i++) {\n        var index = _a[_i];\n        this._allSelectedIndices[index] = true;\n      }\n    }\n    // check if needs to update selection, only when current _allSelectedIndices\n    // is different than previousSelectedIndices\n    var needToUpdate = false;\n    for (var index in this._allSelectedIndices) {\n      if (this._allSelectedIndices[index] !== previousSelectedIndices[index]) {\n        needToUpdate = true;\n        break;\n      }\n    }\n    if (!needToUpdate) {\n      for (var index in previousSelectedIndices) {\n        if (this._allSelectedIndices[index] !== previousSelectedIndices[index]) {\n          needToUpdate = true;\n          break;\n        }\n      }\n    }\n    // only update selection when needed\n    if (needToUpdate) {\n      // Stop change events, clear selection to re-populate.\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      for (var _b = 0, _c = Object.keys(this._allSelectedIndices); _b < _c.length; _b++) {\n        var index = _c[_b];\n        selection.setIndexSelected(Number(index), true, false);\n      }\n      selection.setChangeEvents(true);\n    }\n  };\n  MarqueeSelectionBase.defaultProps = {\n    rootTagName: 'div',\n    rootProps: {},\n    isEnabled: true\n  };\n  return MarqueeSelectionBase;\n}(React.Component);\nexport { MarqueeSelectionBase };","map":{"version":3,"sources":["components/MarqueeSelection/MarqueeSelection.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  Async,\n  EventGroup,\n  AutoScroll,\n  Point,\n  IRectangle,\n  classNamesFunction,\n  findScrollableParent,\n  getDistanceBetweenPoints,\n  getRTL,\n  initializeComponentRef,\n} from '../../Utilities';\n\nimport { IMarqueeSelectionProps, IMarqueeSelectionStyleProps, IMarqueeSelectionStyles } from './MarqueeSelection.types';\nimport {} from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>();\n\nexport interface IMarqueeSelectionState {\n  dragOrigin?: Point;\n  dragRect?: IRectangle;\n}\n\n// We want to make the marquee selection start when the user drags a minimum distance. Otherwise we'd start\n// the drag even if they just click an item without moving.\nconst MIN_DRAG_DISTANCE = 5;\n\n/**\n * MarqueeSelection component abstracts managing a draggable rectangle which sets items selected/not selected.\n * Elements which have data-selectable-index attributes are queried and measured once to determine if they\n * fall within the bounds of the rectangle. The measure is memoized during the drag as a performance optimization\n * so if the items change sizes while dragging, that could cause incorrect results.\n */\nexport class MarqueeSelectionBase extends React.Component<IMarqueeSelectionProps, IMarqueeSelectionState> {\n  public static defaultProps = {\n    rootTagName: 'div',\n    rootProps: {},\n    isEnabled: true,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragOrigin: Point | undefined;\n  private _rootRect: IRectangle;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _autoScroll: AutoScroll | undefined;\n  private _selectedIndicies: { [key: string]: boolean } | undefined;\n  private _preservedIndicies: number[] | undefined;\n  private _itemRectCache: { [key: string]: IRectangle } | undefined;\n  private _allSelectedIndices: { [key: string]: boolean } | undefined;\n  private _scrollableParent: HTMLElement;\n  private _scrollableSurface: HTMLElement;\n  private _scrollTop: number;\n  private _scrollLeft: number;\n  private _isTouch: boolean;\n\n  constructor(props: IMarqueeSelectionProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      dragRect: undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._scrollableParent = findScrollableParent(this._root.current) as HTMLElement;\n    this._scrollableSurface = this._scrollableParent === (window as any) ? document.body : this._scrollableParent;\n    // When scroll events come from window, we need to read scrollTop values from the body.\n\n    const hitTarget = this.props.isDraggingConstrainedToRoot ? this._root.current : this._scrollableSurface;\n\n    this._events.on(hitTarget, 'mousedown', this._onMouseDown);\n    this._events.on(hitTarget, 'touchstart', this._onTouchStart, true);\n    this._events.on(hitTarget, 'pointerdown', this._onPointerDown, true);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n    delete this._scrollableParent;\n    delete this._scrollableSurface;\n\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { rootProps, children, theme, className, styles } = this.props;\n    const { dragRect } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    return (\n      <div {...rootProps} className={classNames.root} ref={this._root}>\n        {children}\n        {dragRect && <div className={classNames.dragMask} />}\n        {dragRect && (\n          <div className={classNames.box} style={dragRect}>\n            <div className={classNames.boxFill} />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  /** Determine if the mouse event occured on a scrollbar of the target element. */\n  private _isMouseEventOnScrollbar(ev: MouseEvent): boolean {\n    const targetElement = ev.target as HTMLElement;\n    const targetScrollbarWidth = targetElement.offsetWidth - targetElement.clientWidth;\n\n    if (targetScrollbarWidth) {\n      const targetRect = targetElement.getBoundingClientRect();\n\n      // Check vertical scroll\n      if (getRTL(this.props.theme)) {\n        if (ev.clientX < targetRect.left + targetScrollbarWidth) {\n          return true;\n        }\n      } else {\n        if (ev.clientX > targetRect.left + targetElement.clientWidth) {\n          return true;\n        }\n      }\n\n      // Check horizontal scroll\n      if (ev.clientY > targetRect.top + targetElement.clientHeight) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseDown = (ev: MouseEvent): void => {\n    const { isEnabled, onShouldStartSelection } = this.props;\n\n    // Ensure the mousedown is within the boundaries of the target. If not, it may have been a click on a scrollbar.\n    if (this._isMouseEventOnScrollbar(ev)) {\n      return;\n    }\n\n    if (this._isInSelectionToggle(ev)) {\n      return;\n    }\n\n    if (\n      !this._isTouch &&\n      isEnabled &&\n      !this._isDragStartInSelection(ev) &&\n      (!onShouldStartSelection || onShouldStartSelection(ev))\n    ) {\n      if (this._scrollableSurface && ev.button === 0 && this._root.current) {\n        this._selectedIndicies = {};\n        this._preservedIndicies = undefined;\n        this._events.on(window, 'mousemove', this._onAsyncMouseMove, true);\n        this._events.on(this._scrollableParent, 'scroll', this._onAsyncMouseMove);\n        this._events.on(window, 'click', this._onMouseUp, true);\n\n        this._autoScroll = new AutoScroll(this._root.current);\n        this._scrollTop = this._scrollableSurface.scrollTop;\n        this._scrollLeft = this._scrollableSurface.scrollLeft;\n        this._rootRect = this._root.current.getBoundingClientRect();\n\n        this._onMouseMove(ev);\n      }\n    }\n  };\n\n  private _onTouchStart = (ev: TouchEvent): void => {\n    this._isTouch = true;\n\n    this._async.setTimeout(() => {\n      this._isTouch = false;\n    }, 0);\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._isTouch = true;\n\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 0);\n    }\n  };\n\n  private _getRootRect(): IRectangle {\n    return {\n      left: this._rootRect.left + (this._scrollLeft - this._scrollableSurface.scrollLeft),\n      top: this._rootRect.top + (this._scrollTop - this._scrollableSurface.scrollTop),\n      width: this._rootRect.width,\n      height: this._rootRect.height,\n    };\n  }\n\n  private _onAsyncMouseMove(ev: MouseEvent): void {\n    this._async.requestAnimationFrame(() => {\n      this._onMouseMove(ev);\n    });\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  private _onMouseMove(ev: MouseEvent): boolean | undefined {\n    if (!this._autoScroll) {\n      return;\n    }\n\n    if (ev.clientX !== undefined) {\n      this._lastMouseEvent = ev;\n    }\n\n    const rootRect = this._getRootRect();\n    const currentPoint = { left: ev.clientX - rootRect.left, top: ev.clientY - rootRect.top };\n\n    if (!this._dragOrigin) {\n      this._dragOrigin = currentPoint;\n    }\n\n    if (ev.buttons !== undefined && ev.buttons === 0) {\n      this._onMouseUp(ev);\n    } else {\n      if (this.state.dragRect || getDistanceBetweenPoints(this._dragOrigin, currentPoint) > MIN_DRAG_DISTANCE) {\n        if (!this.state.dragRect) {\n          const { selection } = this.props;\n\n          if (!ev.shiftKey) {\n            selection.setAllSelected(false);\n          }\n\n          this._preservedIndicies = selection && selection.getSelectedIndices && selection.getSelectedIndices();\n        }\n\n        // We need to constrain the current point to the rootRect boundaries.\n        const constrainedPoint = this.props.isDraggingConstrainedToRoot\n          ? {\n              left: Math.max(0, Math.min(rootRect.width, this._lastMouseEvent!.clientX - rootRect.left)),\n              top: Math.max(0, Math.min(rootRect.height, this._lastMouseEvent!.clientY - rootRect.top)),\n            }\n          : {\n              left: this._lastMouseEvent!.clientX - rootRect.left,\n              top: this._lastMouseEvent!.clientY - rootRect.top,\n            };\n\n        const dragRect = {\n          left: Math.min(this._dragOrigin.left || 0, constrainedPoint.left),\n          top: Math.min(this._dragOrigin.top || 0, constrainedPoint.top),\n          width: Math.abs(constrainedPoint.left - (this._dragOrigin.left || 0)),\n          height: Math.abs(constrainedPoint.top - (this._dragOrigin.top || 0)),\n        };\n\n        this._evaluateSelection(dragRect, rootRect);\n\n        this.setState({ dragRect });\n      }\n    }\n\n    return false;\n  }\n\n  private _onMouseUp(ev: MouseEvent): void {\n    this._events.off(window);\n    this._events.off(this._scrollableParent, 'scroll');\n\n    if (this._autoScroll) {\n      this._autoScroll.dispose();\n    }\n\n    this._autoScroll = this._dragOrigin = this._lastMouseEvent = undefined;\n    this._selectedIndicies = this._itemRectCache = undefined;\n\n    if (this.state.dragRect) {\n      this.setState({\n        dragRect: undefined,\n      });\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _isPointInRectangle(rectangle: IRectangle, point: Point): boolean {\n    return (\n      !!point.top &&\n      rectangle.top < point.top &&\n      rectangle.bottom! > point.top &&\n      !!point.left &&\n      rectangle.left < point.left &&\n      rectangle.right! > point.left\n    );\n  }\n\n  /**\n   * We do not want to start the marquee if we're trying to marquee\n   * from within an existing marquee selection.\n   */\n  private _isDragStartInSelection(ev: MouseEvent): boolean {\n    const selection = this.props.selection;\n    if (!this._root.current || (selection && selection.getSelectedCount() === 0)) {\n      return false;\n    }\n\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = Number(element.getAttribute('data-selection-index'));\n      if (selection.isIndexSelected(index)) {\n        const itemRect = element.getBoundingClientRect();\n        if (this._isPointInRectangle(itemRect, { left: ev.clientX, top: ev.clientY })) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private _isInSelectionToggle(ev: MouseEvent): boolean {\n    let element: HTMLElement | null = ev.target as HTMLElement;\n\n    while (element && element !== this._root.current) {\n      if (element.getAttribute('data-selection-toggle') === 'true') {\n        return true;\n      }\n\n      element = element.parentElement;\n    }\n\n    return false;\n  }\n\n  private _evaluateSelection(dragRect: IRectangle, rootRect: IRectangle): void {\n    // Break early if we don't need to evaluate.\n    if (!dragRect || !this._root.current) {\n      return;\n    }\n\n    const { selection } = this.props;\n    const allElements = this._root.current.querySelectorAll('[data-selection-index]');\n\n    if (!this._itemRectCache) {\n      this._itemRectCache = {};\n    }\n\n    for (let i = 0; i < allElements.length; i++) {\n      const element = allElements[i];\n      const index = element.getAttribute('data-selection-index') as string;\n\n      // Pull the memoized rectangle for the item, or the get the rect and memoize.\n      let itemRect = this._itemRectCache[index];\n\n      if (!itemRect) {\n        itemRect = element.getBoundingClientRect();\n\n        // Normalize the item rect to the dragRect coordinates.\n        itemRect = {\n          left: itemRect.left - rootRect.left,\n          top: itemRect.top - rootRect.top,\n          width: itemRect.width,\n          height: itemRect.height,\n          right: itemRect.left - rootRect.left + itemRect.width,\n          bottom: itemRect.top - rootRect.top + itemRect.height,\n        };\n\n        if (itemRect.width > 0 && itemRect.height > 0) {\n          this._itemRectCache[index] = itemRect;\n        }\n      }\n\n      if (\n        itemRect.top < dragRect.top + dragRect.height &&\n        itemRect.bottom! > dragRect.top &&\n        itemRect.left < dragRect.left + dragRect.width &&\n        itemRect.right! > dragRect.left\n      ) {\n        this._selectedIndicies![index] = true;\n      } else {\n        delete this._selectedIndicies![index];\n      }\n    }\n\n    // set previousSelectedIndices to be all of the selected indices from last time\n    const previousSelectedIndices = this._allSelectedIndices || {};\n    this._allSelectedIndices = {};\n\n    // set all indices that are supposed to be selected in _allSelectedIndices\n    for (const index in this._selectedIndicies!) {\n      if (this._selectedIndicies!.hasOwnProperty(index)) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    if (this._preservedIndicies) {\n      for (const index of this._preservedIndicies!) {\n        this._allSelectedIndices![index] = true;\n      }\n    }\n\n    // check if needs to update selection, only when current _allSelectedIndices\n    // is different than previousSelectedIndices\n    let needToUpdate = false;\n    for (const index in this._allSelectedIndices!) {\n      if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n        needToUpdate = true;\n        break;\n      }\n    }\n\n    if (!needToUpdate) {\n      for (const index in previousSelectedIndices!) {\n        if (this._allSelectedIndices![index] !== previousSelectedIndices![index]) {\n          needToUpdate = true;\n          break;\n        }\n      }\n    }\n\n    // only update selection when needed\n    if (needToUpdate) {\n      // Stop change events, clear selection to re-populate.\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n\n      for (const index of Object.keys(this._allSelectedIndices!)) {\n        selection.setIndexSelected(Number(index), true, false);\n      }\n\n      selection.setChangeEvents(true);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}