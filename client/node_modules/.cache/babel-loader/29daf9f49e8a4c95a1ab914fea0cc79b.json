{"ast":null,"code":"import { KeyCodes } from './KeyCodes';\nimport { getDocument } from './dom/getDocument';\nimport { getItem, setItem } from './sessionStorage';\nimport { setRTL as mergeStylesSetRTL } from '@uifabric/merge-styles';\nvar RTL_LOCAL_STORAGE_KEY = 'isRTL';\n// Default to undefined so that we initialize on first read.\nvar _isRTL;\n/**\n * Gets the rtl state of the page (returns true if in rtl.)\n */\nexport function getRTL(theme) {\n  if (theme === void 0) {\n    theme = {};\n  }\n  if (theme.rtl !== undefined) {\n    return theme.rtl;\n  }\n  if (_isRTL === undefined) {\n    // Fabric supports persisting the RTL setting between page refreshes via session storage\n    var savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);\n    if (savedRTL !== null) {\n      _isRTL = savedRTL === '1';\n      setRTL(_isRTL);\n    }\n    var doc = getDocument();\n    if (_isRTL === undefined && doc) {\n      _isRTL = (doc.body && doc.body.getAttribute('dir') || doc.documentElement.getAttribute('dir')) === 'rtl';\n      mergeStylesSetRTL(_isRTL);\n    }\n  }\n  return !!_isRTL;\n}\n/**\n * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)\n */\nexport function setRTL(isRTL, persistSetting) {\n  if (persistSetting === void 0) {\n    persistSetting = false;\n  }\n  var doc = getDocument();\n  if (doc) {\n    doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n  }\n  if (persistSetting) {\n    setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? '1' : '0');\n  }\n  _isRTL = isRTL;\n  mergeStylesSetRTL(_isRTL);\n}\n/**\n * Returns the given key, but flips right/left arrows if necessary.\n */\nexport function getRTLSafeKeyCode(key, theme) {\n  if (theme === void 0) {\n    theme = {};\n  }\n  if (getRTL(theme)) {\n    if (key === KeyCodes.left) {\n      key = KeyCodes.right;\n    } else if (key === KeyCodes.right) {\n      key = KeyCodes.left;\n    }\n  }\n  return key;\n}","map":{"version":3,"sources":["rtl.ts"],"names":[],"mappings":"AAAA,SAAS,QAAQ,QAAQ,YAAY;AACrC,SAAS,WAAW,QAAQ,mBAAmB;AAC/C,SAAS,OAAO,EAAE,OAAO,QAAQ,kBAAkB;AACnD,SAAS,MAAM,IAAI,iBAAiB,QAAQ,wBAAwB;AAEpE,IAAM,qBAAqB,GAAG,OAAO;AAErC;AACA,IAAI,MAA2B;AAE/B;;AAEG;AACH,OAAM,SAAU,MAAM,CAAC,KAA6B,EAAA;EAA7B,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;IAAA,KAAA,GAAA,CAAA,CAA6B;EAAA;EAClD,IAAI,KAAK,CAAC,GAAG,KAAK,SAAS,EAAE;IAC3B,OAAO,KAAK,CAAC,GAAG;EACjB;EACD,IAAI,MAAM,KAAK,SAAS,EAAE;IACxB;IACA,IAAI,QAAQ,GAAG,OAAO,CAAC,qBAAqB,CAAC;IAC7C,IAAI,QAAQ,KAAK,IAAI,EAAE;MACrB,MAAM,GAAG,QAAQ,KAAK,GAAG;MACzB,MAAM,CAAC,MAAM,CAAC;IACf;IAED,IAAI,GAAG,GAAG,WAAW,CAAA,CAAE;IACvB,IAAI,MAAM,KAAK,SAAS,IAAI,GAAG,EAAE;MAC/B,MAAM,GAAG,CAAE,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAK,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,KAAK;MAC1G,iBAAiB,CAAC,MAAM,CAAC;IAC1B;EACF;EAED,OAAO,CAAC,CAAC,MAAM;AACjB;AAEA;;AAEG;AACH,OAAM,SAAU,MAAM,CAAC,KAAc,EAAE,cAA+B,EAAA;EAA/B,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;IAAA,cAAA,GAAA,KAA+B;EAAA;EACpE,IAAI,GAAG,GAAG,WAAW,CAAA,CAAE;EACvB,IAAI,GAAG,EAAE;IACP,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;EAC/D;EAED,IAAI,cAAc,EAAE;IAClB,OAAO,CAAC,qBAAqB,EAAE,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC;EAClD;EAED,MAAM,GAAG,KAAK;EACd,iBAAiB,CAAC,MAAM,CAAC;AAC3B;AAEA;;AAEG;AACH,OAAM,SAAU,iBAAiB,CAAC,GAAW,EAAE,KAA6B,EAAA;EAA7B,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;IAAA,KAAA,GAAA,CAAA,CAA6B;EAAA;EAC1E,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;IACjB,IAAI,GAAG,KAAK,QAAQ,CAAC,IAAI,EAAE;MACzB,GAAG,GAAG,QAAQ,CAAC,KAAK;KACrB,MAAM,IAAI,GAAG,KAAK,QAAQ,CAAC,KAAK,EAAE;MACjC,GAAG,GAAG,QAAQ,CAAC,IAAI;IACpB;EACF;EAED,OAAO,GAAG;AACZ","sourcesContent":["import { KeyCodes } from './KeyCodes';\nimport { getDocument } from './dom/getDocument';\nimport { getItem, setItem } from './sessionStorage';\nimport { setRTL as mergeStylesSetRTL } from '@uifabric/merge-styles';\n\nconst RTL_LOCAL_STORAGE_KEY = 'isRTL';\n\n// Default to undefined so that we initialize on first read.\nlet _isRTL: boolean | undefined;\n\n/**\n * Gets the rtl state of the page (returns true if in rtl.)\n */\nexport function getRTL(theme: { rtl?: boolean } = {}): boolean {\n  if (theme.rtl !== undefined) {\n    return theme.rtl;\n  }\n  if (_isRTL === undefined) {\n    // Fabric supports persisting the RTL setting between page refreshes via session storage\n    let savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);\n    if (savedRTL !== null) {\n      _isRTL = savedRTL === '1';\n      setRTL(_isRTL);\n    }\n\n    let doc = getDocument();\n    if (_isRTL === undefined && doc) {\n      _isRTL = ((doc.body && doc.body.getAttribute('dir')) || doc.documentElement.getAttribute('dir')) === 'rtl';\n      mergeStylesSetRTL(_isRTL);\n    }\n  }\n\n  return !!_isRTL;\n}\n\n/**\n * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)\n */\nexport function setRTL(isRTL: boolean, persistSetting: boolean = false): void {\n  let doc = getDocument();\n  if (doc) {\n    doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n  }\n\n  if (persistSetting) {\n    setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? '1' : '0');\n  }\n\n  _isRTL = isRTL;\n  mergeStylesSetRTL(_isRTL);\n}\n\n/**\n * Returns the given key, but flips right/left arrows if necessary.\n */\nexport function getRTLSafeKeyCode(key: number, theme: { rtl?: boolean } = {}): number {\n  if (getRTL(theme)) {\n    if (key === KeyCodes.left) {\n      key = KeyCodes.right;\n    } else if (key === KeyCodes.right) {\n      key = KeyCodes.left;\n    }\n  }\n\n  return key;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}