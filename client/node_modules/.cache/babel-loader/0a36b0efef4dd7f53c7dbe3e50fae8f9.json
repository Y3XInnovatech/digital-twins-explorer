{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { initializeComponentRef, warnDeprecations, warnMutuallyExclusive, classNamesFunction, find, getId, isControlled, getNativeProps, divProperties, setFocusVisibility } from '../../Utilities';\nimport { ChoiceGroupOption } from './ChoiceGroupOption/index';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory ChoiceGroup}\n */\nvar ChoiceGroupBase = /** @class */function (_super) {\n  __extends(ChoiceGroupBase, _super);\n  function ChoiceGroupBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._focusCallbacks = {};\n    _this._changeCallbacks = {};\n    _this._onBlur = function (ev, option) {\n      _this.setState({\n        keyFocused: undefined\n      });\n    };\n    initializeComponentRef(_this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, {\n        onChanged: 'onChange'\n      });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey'\n      });\n    }\n    var defaultSelectedKey = props.defaultSelectedKey,\n      _a = props.options,\n      options = _a === void 0 ? [] : _a;\n    var validDefaultSelectedKey = !_isControlled(props) && defaultSelectedKey !== undefined && options.some(function (option) {\n      return option.key === defaultSelectedKey;\n    });\n    _this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : _this._getKeyChecked(props)\n    };\n    _this._id = getId('ChoiceGroup');\n    _this._labelId = getId('ChoiceGroupLabel');\n    return _this;\n  }\n  Object.defineProperty(ChoiceGroupBase.prototype, \"checkedOption\", {\n    /**\n     * Gets the current checked option.\n     */\n    get: function () {\n      var _this = this;\n      var _a = this.props.options,\n        options = _a === void 0 ? [] : _a;\n      return find(options, function (value) {\n        return value.key === _this.state.keyChecked;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ChoiceGroupBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      var newKeyChecked = this._getKeyChecked(this.props);\n      var oldKeyChecked = this._getKeyChecked(prevProps);\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked\n        });\n      }\n    }\n  };\n  ChoiceGroupBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      className = _a.className,\n      theme = _a.theme,\n      styles = _a.styles,\n      _b = _a.options,\n      options = _b === void 0 ? [] : _b,\n      label = _a.label,\n      required = _a.required,\n      disabled = _a.disabled,\n      name = _a.name;\n    var _c = this.state,\n      keyChecked = _c.keyChecked,\n      keyFocused = _c.keyFocused;\n    var divProps = getNativeProps(this.props, divProperties, ['onChange', 'className', 'required']);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      optionsContainIconOrImage: options.some(function (option) {\n        return !!(option.iconProps || option.imageSrc);\n      })\n    });\n    var labelId = this._id + '-label';\n    var ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']);\n    // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      React.createElement(\"div\", __assign({\n        className: classNames.applicationRole\n      }, divProps), React.createElement(\"div\", __assign({\n        className: classNames.root,\n        role: \"radiogroup\"\n      }, ariaLabelledBy && {\n        'aria-labelledby': ariaLabelledBy\n      }), label && React.createElement(Label, {\n        className: classNames.label,\n        required: required,\n        id: labelId,\n        disabled: disabled\n      }, label), React.createElement(\"div\", {\n        className: classNames.flexContainer\n      }, options.map(function (option) {\n        var innerOptionProps = __assign(__assign({}, option), {\n          focused: option.key === keyFocused,\n          checked: option.key === keyChecked,\n          disabled: option.disabled || disabled,\n          id: _this._getOptionId(option),\n          labelId: _this._getOptionLabelId(option),\n          name: name || _this._id,\n          required: required\n        });\n        return React.createElement(ChoiceGroupOption, __assign({\n          key: option.key,\n          onBlur: _this._onBlur,\n          onFocus: _this._onFocus(option.key),\n          onChange: _this._onChange(option.key)\n        }, innerOptionProps));\n      }))))\n    );\n  };\n  ChoiceGroupBase.prototype.focus = function () {\n    var _a = this.props.options,\n      options = _a === void 0 ? [] : _a;\n    var optionToFocus = this.checkedOption || options.filter(function (option) {\n      return !option.disabled;\n    })[0];\n    var elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n    if (elementToFocus) {\n      elementToFocus.focus();\n      setFocusVisibility(true, elementToFocus);\n    }\n  };\n  ChoiceGroupBase.prototype._onFocus = function (key) {\n    var _this = this;\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = function (ev, option) {\n        _this.setState({\n          keyFocused: key\n        });\n      };\n    }\n    return this._focusCallbacks[key];\n  };\n  ChoiceGroupBase.prototype._onChange = function (key) {\n    var _this = this;\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = function (evt, option) {\n        // eslint-disable-next-line deprecation/deprecation\n        var _a = _this.props,\n          onChanged = _a.onChanged,\n          onChange = _a.onChange;\n        // Only manage state in uncontrolled scenarios.\n        if (!_isControlled(_this.props)) {\n          _this.setState({\n            keyChecked: key\n          });\n        }\n        // Get the original option without the `key` prop removed\n        var originalOption = find(_this.props.options || [], function (value) {\n          return value.key === key;\n        });\n        // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption, evt);\n        }\n      };\n    }\n    return this._changeCallbacks[key];\n  };\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n  ChoiceGroupBase.prototype._getKeyChecked = function (props) {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n    var _a = props.options,\n      options = _a === void 0 ? [] : _a;\n    // eslint-disable-next-line deprecation/deprecation\n    var optionsChecked = options.filter(function (option) {\n      return option.checked;\n    });\n    return optionsChecked[0] && optionsChecked[0].key;\n  };\n  ChoiceGroupBase.prototype._getOptionId = function (option) {\n    return option.id || this._id + \"-\" + option.key;\n  };\n  ChoiceGroupBase.prototype._getOptionLabelId = function (option) {\n    return option.labelId || this._labelId + \"-\" + option.key;\n  };\n  return ChoiceGroupBase;\n}(React.Component);\nexport { ChoiceGroupBase };\nfunction _isControlled(props) {\n  return isControlled(props, 'selectedKey');\n}","map":{"version":3,"sources":["components/ChoiceGroup/ChoiceGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { Label } from '../../Label';\nimport {\n  initializeComponentRef,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  classNamesFunction,\n  find,\n  getId,\n  isControlled,\n  getNativeProps,\n  divProperties,\n  setFocusVisibility,\n} from '../../Utilities';\nimport {\n  IChoiceGroup,\n  IChoiceGroupOption,\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles,\n} from './ChoiceGroup.types';\nimport { ChoiceGroupOption, IChoiceGroupOptionProps } from './ChoiceGroupOption/index';\n\nconst getClassNames = classNamesFunction<IChoiceGroupStyleProps, IChoiceGroupStyles>();\n\nexport interface IChoiceGroupState {\n  /**\n   * Current selected option, for **internal use only**.\n   * External users should access `IChoiceGroup.checkedOption` instead.\n   */\n  // TODO (Fabric 8?) - once we removed the checked property from individual options,\n  // we can probably store only the uncontrolled value in the state (right now it tracks\n  // the value regardless of controlled/uncontrolled--though if controlled, it only updates\n  // the value in state when the selectedKey prop updates)\n  keyChecked?: string | number;\n\n  /** Is set when the control has focus. */\n  keyFocused?: string | number;\n}\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport class ChoiceGroupBase extends React.Component<IChoiceGroupProps, IChoiceGroupState> implements IChoiceGroup {\n  private _id: string;\n  private _labelId: string;\n  private _focusCallbacks: { [key: string]: IChoiceGroupOptionProps['onFocus'] } = {};\n  private _changeCallbacks: { [key: string]: IChoiceGroupOptionProps['onBlur'] } = {};\n\n  constructor(props: IChoiceGroupProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, { onChanged: 'onChange' });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey',\n      });\n    }\n\n    const { defaultSelectedKey, options = [] } = props;\n    const validDefaultSelectedKey =\n      !_isControlled(props) &&\n      defaultSelectedKey !== undefined &&\n      options.some(option => option.key === defaultSelectedKey);\n\n    this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : this._getKeyChecked(props),\n    };\n\n    this._id = getId('ChoiceGroup');\n    this._labelId = getId('ChoiceGroupLabel');\n  }\n\n  /**\n   * Gets the current checked option.\n   */\n  public get checkedOption(): IChoiceGroupOption | undefined {\n    const { options = [] } = this.props;\n    return find(options, (value: IChoiceGroupOption) => value.key === this.state.keyChecked);\n  }\n\n  public componentDidUpdate(prevProps: IChoiceGroupProps, prevState: IChoiceGroupState): void {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      const newKeyChecked = this._getKeyChecked(this.props);\n      const oldKeyChecked = this._getKeyChecked(prevProps);\n\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked,\n        });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, theme, styles, options = [], label, required, disabled, name } = this.props;\n    const { keyChecked, keyFocused } = this.state;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'onChange',\n      'className',\n      'required',\n    ]);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      optionsContainIconOrImage: options.some(option => !!(option.iconProps || option.imageSrc)),\n    });\n\n    const labelId = this._id + '-label';\n    const ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']);\n\n    // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div className={classNames.applicationRole} {...divProps}>\n        <div\n          className={classNames.root}\n          role=\"radiogroup\"\n          {...(ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy })}\n        >\n          {label && (\n            <Label className={classNames.label} required={required} id={labelId} disabled={disabled}>\n              {label}\n            </Label>\n          )}\n          <div className={classNames.flexContainer}>\n            {options.map((option: IChoiceGroupOption) => {\n              const innerOptionProps = {\n                ...option,\n                focused: option.key === keyFocused,\n                checked: option.key === keyChecked,\n                disabled: option.disabled || disabled,\n                id: this._getOptionId(option),\n                labelId: this._getOptionLabelId(option),\n                name: name || this._id,\n                required,\n              };\n\n              return (\n                <ChoiceGroupOption\n                  key={option.key}\n                  onBlur={this._onBlur}\n                  onFocus={this._onFocus(option.key)}\n                  onChange={this._onChange(option.key)}\n                  {...innerOptionProps}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n    const { options = [] } = this.props;\n    const optionToFocus = this.checkedOption || options.filter(option => !option.disabled)[0];\n    const elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n    if (elementToFocus) {\n      elementToFocus.focus();\n      setFocusVisibility(true, elementToFocus as Element);\n    }\n  }\n\n  private _onFocus(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = (\n        ev: React.FocusEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        this.setState({\n          keyFocused: key,\n        });\n      };\n    }\n    return this._focusCallbacks[key];\n  }\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>, option: IChoiceGroupOption) => {\n    this.setState({\n      keyFocused: undefined,\n    });\n  };\n\n  private _onChange(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = (\n        evt: React.FormEvent<HTMLElement | HTMLInputElement>,\n        option: IChoiceGroupOption,\n      ) => {\n        // eslint-disable-next-line deprecation/deprecation\n        const { onChanged, onChange } = this.props;\n\n        // Only manage state in uncontrolled scenarios.\n        if (!_isControlled(this.props)) {\n          this.setState({\n            keyChecked: key,\n          });\n        }\n\n        // Get the original option without the `key` prop removed\n        const originalOption = find(this.props.options || [], (value: IChoiceGroupOption) => value.key === key);\n\n        // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption!, evt);\n        }\n      };\n    }\n    return this._changeCallbacks[key];\n  }\n\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n  private _getKeyChecked(props: IChoiceGroupProps): string | number | undefined {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    const { options = [] } = props;\n    // eslint-disable-next-line deprecation/deprecation\n    const optionsChecked = options.filter((option: IChoiceGroupOption) => option.checked);\n    return optionsChecked[0] && optionsChecked[0].key;\n  }\n\n  private _getOptionId(option: IChoiceGroupOption): string {\n    return option.id || `${this._id}-${option.key}`;\n  }\n\n  private _getOptionLabelId(option: IChoiceGroupOption): string {\n    return option.labelId || `${this._labelId}-${option.key}`;\n  }\n}\n\nfunction _isControlled(props: IChoiceGroupProps): boolean {\n  return isControlled(props, 'selectedKey');\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}