{"ast":null,"code":"import { memoizeFunction } from '../../Utilities';\nimport { mergeStyleSets } from '../../Styling';\nimport { getGlobalClassNames } from '../../Styling';\nexport var ButtonGlobalClassNames = {\n  msButton: 'ms-Button',\n  msButtonHasMenu: 'ms-Button--hasMenu',\n  msButtonIcon: 'ms-Button-icon',\n  msButtonMenuIcon: 'ms-Button-menuIcon',\n  msButtonLabel: 'ms-Button-label',\n  msButtonDescription: 'ms-Button-description',\n  msButtonScreenReaderText: 'ms-Button-screenReaderText',\n  msButtonFlexContainer: 'ms-Button-flexContainer',\n  msButtonTextContainer: 'ms-Button-textContainer'\n};\nexport var getBaseButtonClassNames = memoizeFunction(function (theme, styles, className, variantClassName, iconClassName, menuIconClassName, disabled, hasMenu, checked, expanded, isSplit) {\n  var _a, _b;\n  var classNames = getGlobalClassNames(ButtonGlobalClassNames, theme || {});\n  var isExpanded = expanded && !isSplit;\n  return mergeStyleSets({\n    root: [classNames.msButton, styles.root, variantClassName, checked && ['is-checked', styles.rootChecked], isExpanded && ['is-expanded', styles.rootExpanded, {\n      selectors: (_a = {}, _a[\":hover .\" + classNames.msButtonIcon] = styles.iconExpandedHovered,\n      // menuIcon falls back to rootExpandedHovered to support original behavior\n      _a[\":hover .\" + classNames.msButtonMenuIcon] = styles.menuIconExpandedHovered || styles.rootExpandedHovered, _a[':hover'] = styles.rootExpandedHovered, _a)\n    }], hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles.rootHasMenu], disabled && ['is-disabled', styles.rootDisabled], !disabled && !isExpanded && !checked && {\n      selectors: (_b = {\n        ':hover': styles.rootHovered\n      }, _b[\":hover .\" + classNames.msButtonLabel] = styles.labelHovered, _b[\":hover .\" + classNames.msButtonIcon] = styles.iconHovered, _b[\":hover .\" + classNames.msButtonDescription] = styles.descriptionHovered, _b[\":hover .\" + classNames.msButtonMenuIcon] = styles.menuIconHovered, _b[':focus'] = styles.rootFocused, _b[':active'] = styles.rootPressed, _b[\":active .\" + classNames.msButtonIcon] = styles.iconPressed, _b[\":active .\" + classNames.msButtonDescription] = styles.descriptionPressed, _b[\":active .\" + classNames.msButtonMenuIcon] = styles.menuIconPressed, _b)\n    }, disabled && checked && [styles.rootCheckedDisabled], !disabled && checked && {\n      selectors: {\n        ':hover': styles.rootCheckedHovered,\n        ':active': styles.rootCheckedPressed\n      }\n    }, className],\n    flexContainer: [classNames.msButtonFlexContainer, styles.flexContainer],\n    textContainer: [classNames.msButtonTextContainer, styles.textContainer],\n    icon: [classNames.msButtonIcon, iconClassName, styles.icon, isExpanded && styles.iconExpanded, checked && styles.iconChecked, disabled && styles.iconDisabled],\n    label: [classNames.msButtonLabel, styles.label, checked && styles.labelChecked, disabled && styles.labelDisabled],\n    menuIcon: [classNames.msButtonMenuIcon, menuIconClassName, styles.menuIcon, checked && styles.menuIconChecked, disabled && !isSplit && styles.menuIconDisabled, !disabled && !isExpanded && !checked && {\n      selectors: {\n        ':hover': styles.menuIconHovered,\n        ':active': styles.menuIconPressed\n      }\n    }, isExpanded && ['is-expanded', styles.menuIconExpanded]],\n    description: [classNames.msButtonDescription, styles.description, checked && styles.descriptionChecked, disabled && styles.descriptionDisabled],\n    screenReaderText: [classNames.msButtonScreenReaderText, styles.screenReaderText]\n  });\n});","map":{"version":3,"sources":["components/Button/BaseButton.classNames.ts"],"names":[],"mappings":"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","sourcesContent":["import { memoizeFunction } from '../../Utilities';\nimport { ITheme, mergeStyleSets } from '../../Styling';\nimport { IButtonStyles } from './Button.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nexport interface IButtonClassNames {\n  root?: string;\n  flexContainer?: string;\n  textContainer?: string;\n  icon?: string;\n  label?: string;\n  menuIcon?: string;\n  description?: string;\n  screenReaderText?: string;\n}\n\nexport const ButtonGlobalClassNames = {\n  msButton: 'ms-Button',\n  msButtonHasMenu: 'ms-Button--hasMenu',\n  msButtonIcon: 'ms-Button-icon',\n  msButtonMenuIcon: 'ms-Button-menuIcon',\n  msButtonLabel: 'ms-Button-label',\n  msButtonDescription: 'ms-Button-description',\n  msButtonScreenReaderText: 'ms-Button-screenReaderText',\n  msButtonFlexContainer: 'ms-Button-flexContainer',\n  msButtonTextContainer: 'ms-Button-textContainer',\n};\n\nexport const getBaseButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    styles: IButtonStyles,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    hasMenu: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined,\n  ): IButtonClassNames => {\n    const classNames = getGlobalClassNames(ButtonGlobalClassNames, theme || {});\n\n    const isExpanded = expanded && !isSplit;\n    return mergeStyleSets({\n      root: [\n        classNames.msButton,\n        styles.root,\n        variantClassName,\n        checked && ['is-checked', styles.rootChecked],\n        isExpanded && [\n          'is-expanded',\n          styles.rootExpanded,\n          {\n            selectors: {\n              [`:hover .${classNames.msButtonIcon}`]: styles.iconExpandedHovered,\n              // menuIcon falls back to rootExpandedHovered to support original behavior\n              [`:hover .${classNames.msButtonMenuIcon}`]: styles.menuIconExpandedHovered || styles.rootExpandedHovered,\n              ':hover': styles.rootExpandedHovered,\n            },\n          },\n        ],\n        hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles.rootHasMenu],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !isExpanded &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              [`:hover .${classNames.msButtonLabel}`]: styles.labelHovered,\n              [`:hover .${classNames.msButtonIcon}`]: styles.iconHovered,\n              [`:hover .${classNames.msButtonDescription}`]: styles.descriptionHovered,\n              [`:hover .${classNames.msButtonMenuIcon}`]: styles.menuIconHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed,\n              [`:active .${classNames.msButtonIcon}`]: styles.iconPressed,\n              [`:active .${classNames.msButtonDescription}`]: styles.descriptionPressed,\n              [`:active .${classNames.msButtonMenuIcon}`]: styles.menuIconPressed,\n            },\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed,\n            },\n          },\n        className,\n      ],\n      flexContainer: [classNames.msButtonFlexContainer, styles.flexContainer],\n      textContainer: [classNames.msButtonTextContainer, styles.textContainer],\n      icon: [\n        classNames.msButtonIcon,\n        iconClassName,\n        styles.icon,\n        isExpanded && styles.iconExpanded,\n        checked && styles.iconChecked,\n        disabled && styles.iconDisabled,\n      ],\n      label: [classNames.msButtonLabel, styles.label, checked && styles.labelChecked, disabled && styles.labelDisabled],\n      menuIcon: [\n        classNames.msButtonMenuIcon,\n        menuIconClassName,\n        styles.menuIcon,\n        checked && styles.menuIconChecked,\n        disabled && !isSplit && styles.menuIconDisabled,\n        !disabled &&\n          !isExpanded &&\n          !checked && {\n            selectors: {\n              ':hover': styles.menuIconHovered,\n              ':active': styles.menuIconPressed,\n            },\n          },\n        isExpanded && ['is-expanded', styles.menuIconExpanded],\n      ],\n      description: [\n        classNames.msButtonDescription,\n        styles.description,\n        checked && styles.descriptionChecked,\n        disabled && styles.descriptionDisabled,\n      ],\n      screenReaderText: [classNames.msButtonScreenReaderText, styles.screenReaderText],\n    });\n  },\n);\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}