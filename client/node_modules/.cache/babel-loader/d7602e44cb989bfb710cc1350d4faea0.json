{"ast":null,"code":"import { warn } from './warn';\n/**\n * Warns when a deprecated props are being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n * either null or a replacement prop name.\n */\nexport function warnDeprecations(componentName, props, deprecationMap) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var propName in deprecationMap) {\n      if (props && propName in props) {\n        var deprecationMessage = componentName + \" property '\" + propName + \"' was used but has been deprecated.\";\n        var replacementPropName = deprecationMap[propName];\n        if (replacementPropName) {\n          deprecationMessage += \" Use '\" + replacementPropName + \"' instead.\";\n        }\n        warn(deprecationMessage);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["warn/warnDeprecations.ts"],"names":[],"mappings":"AAAA,SAAuB,IAAI,QAAQ,QAAQ;AAC3C;;;;;;;;AAQG;AACH,OAAM,SAAU,gBAAgB,CAAI,aAAqB,EAAE,KAAQ,EAAE,cAA+B,EAAA;EAClG,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,KAAK,IAAM,QAAQ,IAAI,cAAc,EAAE;MACrC,IAAI,KAAK,IAAI,QAAQ,IAAI,KAAK,EAAE;QAC9B,IAAI,kBAAkB,GAAM,aAAa,GAAA,aAAA,GAAc,QAAQ,GAAA,qCAAqC;QACpG,IAAM,mBAAmB,GAAG,cAAc,CAAC,QAAQ,CAAC;QACpD,IAAI,mBAAmB,EAAE;UACvB,kBAAkB,IAAI,QAAA,GAAS,mBAAmB,GAAA,YAAY;QAC/D;QACD,IAAI,CAAC,kBAAkB,CAAC;MACzB;IACF;EACF;AACH","sourcesContent":["import { ISettingsMap, warn } from './warn';\n/**\n * Warns when a deprecated props are being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n * either null or a replacement prop name.\n */\nexport function warnDeprecations<P>(componentName: string, props: P, deprecationMap: ISettingsMap<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const propName in deprecationMap) {\n      if (props && propName in props) {\n        let deprecationMessage = `${componentName} property '${propName}' was used but has been deprecated.`;\n        const replacementPropName = deprecationMap[propName];\n        if (replacementPropName) {\n          deprecationMessage += ` Use '${replacementPropName}' instead.`;\n        }\n        warn(deprecationMessage);\n      }\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}