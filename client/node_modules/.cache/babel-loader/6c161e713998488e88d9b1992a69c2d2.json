{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter, __generator } from \"tslib\";\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n */\nvar AccessTokenRefresher = /** @class */function () {\n  function AccessTokenRefresher(credential, scopes, requiredMillisecondsBeforeNewRefresh) {\n    if (requiredMillisecondsBeforeNewRefresh === void 0) {\n      requiredMillisecondsBeforeNewRefresh = 30000;\n    }\n    this.credential = credential;\n    this.scopes = scopes;\n    this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;\n    this.lastCalled = 0;\n  }\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n  AccessTokenRefresher.prototype.isReady = function () {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh;\n  };\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n  AccessTokenRefresher.prototype.getToken = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.lastCalled = Date.now();\n            return [4 /*yield*/, this.credential.getToken(this.scopes, options)];\n          case 1:\n            token = _a.sent();\n            this.promise = undefined;\n            return [2 /*return*/, token || undefined];\n        }\n      });\n    });\n  };\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n  AccessTokenRefresher.prototype.refresh = function (options) {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n    return this.promise;\n  };\n  return AccessTokenRefresher;\n}();\nexport { AccessTokenRefresher };","map":{"version":3,"sources":["../../../src/credentials/accessTokenRefresher.ts"],"names":[],"mappings":"AAAA;AACA;;AAIA;;AAEG;AACH,IAAA,oBAAA,GAAA,aAAA,YAAA;EAIE,SAAA,oBAAA,CACU,UAA2B,EAC3B,MAAyB,EACzB,oCAAoD,EAAA;IAApD,IAAA,oCAAA,KAAA,KAAA,CAAA,EAAA;MAAA,oCAAA,GAAA,KAAoD;IAAA;IAFpD,IAAA,CAAA,UAAU,GAAV,UAAU;IACV,IAAA,CAAA,MAAM,GAAN,MAAM;IACN,IAAA,CAAA,oCAAoC,GAApC,oCAAoC;IALtC,IAAA,CAAA,UAAU,GAAG,CAAC;EAMnB;EAEH;;;AAGG;EACI,oBAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IACE;IACA,OACE,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,GAAG,CAAA,CAAE,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,oCAAoC;EAEhG,CAAC;EAED;;;;;AAKG;EACW,oBAAA,CAAA,SAAA,CAAA,QAAQ,GAAtB,UAAuB,OAAwB,EAAA;;;;;;YAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAA,CAAE;YACd,OAAA,CAAA,CAAA,CAAA,WAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;;YAA5D,KAAK,GAAG,EAAA,CAAA,IAAA,CAAA,CAAoD;YAClE,IAAI,CAAC,OAAO,GAAG,SAAS;YACxB,OAAA,CAAA,CAAA,CAAA,YAAO,KAAK,IAAI,SAAS,CAAA;;;;GAC1B;EAED;;;AAGG;EACI,oBAAA,CAAA,SAAA,CAAA,OAAO,GAAd,UAAe,OAAwB,EAAA;IACrC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;MACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;IACtC;IAED,OAAO,IAAI,CAAC,OAAO;EACrB,CAAC;EACH,OAAA,oBAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential, GetTokenOptions } from \"@azure/core-auth\";\n\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n */\nexport class AccessTokenRefresher {\n  private promise: Promise<AccessToken | undefined> | undefined;\n  private lastCalled = 0;\n\n  constructor(\n    private credential: TokenCredential,\n    private scopes: string | string[],\n    private requiredMillisecondsBeforeNewRefresh: number = 30000\n  ) {}\n\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n  public isReady(): boolean {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return (\n      !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh\n    );\n  }\n\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n  private async getToken(options: GetTokenOptions): Promise<AccessToken | undefined> {\n    this.lastCalled = Date.now();\n    const token = await this.credential.getToken(this.scopes, options);\n    this.promise = undefined;\n    return token || undefined;\n  }\n\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n  public refresh(options: GetTokenOptions): Promise<AccessToken | undefined> {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n\n    return this.promise;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}