{"ast":null,"code":"import React__default, { useMemo, createElement, useEffect } from 'react';\nimport { bG as I18nContext, L as Locale } from './Interfaces-f1972c79.js';\nfunction I18nextProvider(_ref) {\n  var i18n = _ref.i18n,\n    defaultNS = _ref.defaultNS,\n    children = _ref.children;\n  var value = useMemo(function () {\n    return {\n      i18n: i18n,\n      defaultNS: defaultNS\n    };\n  }, [i18n, defaultNS]);\n  return createElement(I18nContext.Provider, {\n    value: value\n  }, children);\n}\nfunction I18nProviderWrapper(_a) {\n  var children = _a.children,\n    locale = _a.locale,\n    _b = _a.localeStrings,\n    localeStrings = _b === void 0 ? undefined : _b,\n    i18n = _a.i18n;\n  useEffect(function () {\n    if (localeStrings) {\n      i18n.addResourceBundle(\n      // keep existing nested translation and overwrite those with the new ones\n      locale || i18n.language || Locale.EN,\n      // assign localeStrings to the provided locale prop, if there is not to the last used detected language; otherwise to default language EN\n      'translation', localeStrings, true, true);\n    }\n    i18n.changeLanguage(locale);\n  }, [i18n, locale, localeStrings]);\n  return React__default.createElement(I18nextProvider, {\n    i18n: i18n\n  }, children);\n}\nexport { I18nProviderWrapper as I };","map":{"version":3,"sources":["../../node_modules/react-i18next/dist/es/I18nextProvider.js","../../src/Models/Classes/I18NProviderWrapper.tsx"],"names":["React"],"mappings":";;AAEO,SAAS,eAAe,CAAC,IAAI,EAAE;EACpC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI;IAChB,SAAS,GAAG,IAAI,CAAC,SAAS;IAC1B,QAAQ,GAAG,IAAI,CAAC,QAAQ;EAC5B,IAAI,KAAK,GAAG,OAAO,CAAC,YAAY;IAC9B,OAAO;MACL,IAAI,EAAE,IAAI;MACV,SAAS,EAAE;IACjB,CAAK;EACL,CAAG,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;EACrB,OAAO,aAAa,CAAC,WAAW,CAAC,QAAQ,EAAE;IACzC,KAAK,EAAE;EACX,CAAG,EAAE,QAAQ,CAAC;AACd;ACXwB,SAAA,mBAAmB,CAAC,EAK3C,EAAA;EAJG,IAAA,QAAQ,GAAA,EAAA,CAAA,QAAA;IACR,MAAM,GAAA,EAAA,CAAA,MAAA;IACN,EAAA,GAAA,EAAA,CAAA,aAAyB;IAAzB,aAAa,GAAG,EAAA,KAAA,KAAA,CAAA,GAAA,SAAS,GAAA,EAAA;IACzB,IAAI,GAAA,EAAA,CAAA,IAAA;EAEJ,SAAS,CAAC,YAAA;IACN,IAAI,aAAa,EAAE;MACf,IAAI,CAAC,iBAAiB;;MAElB,MAAM,IAAI,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,EAAE;MAAA;MACpC,aAAa,EACb,aAAa,EACb,IAAI,EACJ,IAAI,CACP;IACJ;IACD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;GAC9B,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;EAEjC,OAAOA,cAAAA,CAAAA,aAAAA,CAAC,eAAe,EAAC;IAAA,IAAI,EAAE;EAAI,CAAA,EAAG,QAAQ,CAAmB;AACpE","sourcesContent":["import { createElement, useMemo } from 'react';\nimport { I18nContext } from './context';\nexport function I18nextProvider(_ref) {\n  var i18n = _ref.i18n,\n      defaultNS = _ref.defaultNS,\n      children = _ref.children;\n  var value = useMemo(function () {\n    return {\n      i18n: i18n,\n      defaultNS: defaultNS\n    };\n  }, [i18n, defaultNS]);\n  return createElement(I18nContext.Provider, {\n    value: value\n  }, children);\n}","import React, { useEffect } from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { Locale } from '../Constants/Enums';\n\nexport default function I18nProviderWrapper({\n    children,\n    locale,\n    localeStrings = undefined,\n    i18n\n}) {\n    useEffect(() => {\n        if (localeStrings) {\n            i18n.addResourceBundle(\n                // keep existing nested translation and overwrite those with the new ones\n                locale || i18n.language || Locale.EN, // assign localeStrings to the provided locale prop, if there is not to the last used detected language; otherwise to default language EN\n                'translation',\n                localeStrings,\n                true,\n                true\n            );\n        }\n        i18n.changeLanguage(locale);\n    }, [i18n, locale, localeStrings]);\n\n    return <I18nextProvider i18n={i18n}>{children}</I18nextProvider>;\n}\n"]},"metadata":{},"sourceType":"module"}