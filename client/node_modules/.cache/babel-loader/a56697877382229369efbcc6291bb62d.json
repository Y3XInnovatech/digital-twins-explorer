{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, shallowCompare, getNativeProps, divProperties } from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { classNamesFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\nvar NO_COLUMNS = [];\nvar DetailsRowBase = /** @class */function (_super) {\n  __extends(DetailsRowBase, _super);\n  function DetailsRowBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._cellMeasurer = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._onSelectionChanged = function () {\n      var selectionState = getSelectionState(_this.props);\n      if (!shallowCompare(selectionState, _this.state.selectionState)) {\n        _this.setState({\n          selectionState: selectionState\n        });\n      }\n    };\n    /**\n     * update isDropping state based on the input value, which is used to change style during drag and drop\n     *\n     * when change to true, that means drag enter. we will add default dropping class name\n     * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n     *\n     * when change to false, that means drag leave. we will remove the dropping class name from root element.\n     *\n     * @param newValue - New isDropping state value\n     * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n     */\n    _this._updateDroppingState = function (newValue, event) {\n      var isDropping = _this.state.isDropping;\n      var _a = _this.props,\n        dragDropEvents = _a.dragDropEvents,\n        item = _a.item;\n      if (!newValue) {\n        if (dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(item, event);\n        }\n      } else if (dragDropEvents.onDragEnter) {\n        _this._droppingClassNames = dragDropEvents.onDragEnter(item, event);\n      }\n      if (isDropping !== newValue) {\n        _this.setState({\n          isDropping: newValue\n        });\n      }\n    };\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false\n    };\n    _this._droppingClassNames = '';\n    return _this;\n  }\n  DetailsRowBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return __assign(__assign({}, previousState), {\n      selectionState: getSelectionState(nextProps)\n    });\n  };\n  DetailsRowBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n      dragDropHelper = _a.dragDropHelper,\n      selection = _a.selection,\n      item = _a.item,\n      onDidMount = _a.onDidMount;\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n    }\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  };\n  DetailsRowBase.prototype.componentDidUpdate = function (previousProps) {\n    var state = this.state;\n    var _a = this.props,\n      item = _a.item,\n      onDidMount = _a.onDidMount;\n    var columnMeasureInfo = state.columnMeasureInfo;\n    if (this.props.itemIndex !== previousProps.itemIndex || this.props.item !== previousProps.item || this.props.dragDropHelper !== previousProps.dragDropHelper) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n      }\n    }\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      var newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n      columnMeasureInfo.onMeasureDone(newWidth);\n      this.setState({\n        columnMeasureInfo: undefined\n      });\n    }\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  };\n  DetailsRowBase.prototype.componentWillUnmount = function () {\n    var _a = this.props,\n      item = _a.item,\n      onWillUnmount = _a.onWillUnmount;\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._events.dispose();\n  };\n  DetailsRowBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (this.props.useReducedRowRenderer) {\n      var newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  };\n  DetailsRowBase.prototype.render = function () {\n    var _a = this.props,\n      className = _a.className,\n      _b = _a.columns,\n      columns = _b === void 0 ? NO_COLUMNS : _b,\n      dragDropEvents = _a.dragDropEvents,\n      item = _a.item,\n      itemIndex = _a.itemIndex,\n      id = _a.id,\n      _c = _a.onRenderCheck,\n      onRenderCheck = _c === void 0 ? this._onRenderCheck : _c,\n      onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox,\n      onRenderItemColumn = _a.onRenderItemColumn,\n      getCellValueKey = _a.getCellValueKey,\n      selectionMode = _a.selectionMode,\n      _d = _a.rowWidth,\n      rowWidth = _d === void 0 ? 0 : _d,\n      checkboxVisibility = _a.checkboxVisibility,\n      getRowAriaLabel = _a.getRowAriaLabel,\n      getRowAriaDescribedBy = _a.getRowAriaDescribedBy,\n      checkButtonAriaLabel = _a.checkButtonAriaLabel,\n      checkboxCellClassName = _a.checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      _e = _a.rowFieldsAs,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      RowFields = _e === void 0 ? DetailsRowFields : _e,\n      selection = _a.selection,\n      indentWidth = _a.indentWidth,\n      enableUpdateAnimations = _a.enableUpdateAnimations,\n      compact = _a.compact,\n      theme = _a.theme,\n      styles = _a.styles,\n      cellsByColumn = _a.cellsByColumn,\n      groupNestingDepth = _a.groupNestingDepth,\n      _f = _a.useFastIcons,\n      useFastIcons = _f === void 0 ? true : _f,\n      cellStyleProps = _a.cellStyleProps;\n    var _g = this.state,\n      columnMeasureInfo = _g.columnMeasureInfo,\n      isDropping = _g.isDropping;\n    var _h = this.state.selectionState,\n      _j = _h.isSelected,\n      isSelected = _j === void 0 ? false : _j,\n      _k = _h.isSelectionModal,\n      isSelectionModal = _k === void 0 ? false : _k;\n    var isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    var droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    var ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    var ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    var canSelect = !!selection && selection.canSelectItem(item, itemIndex);\n    var isContentUnselectable = selectionMode === SelectionMode.multiple;\n    var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    var ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    this._classNames = __assign(__assign({}, this._classNames), getClassNames(styles, {\n      theme: theme,\n      isSelected: isSelected,\n      canSelect: !isContentUnselectable,\n      anySelected: isSelectionModal,\n      checkboxCellClassName: checkboxCellClassName,\n      droppingClassName: droppingClassName,\n      className: className,\n      compact: compact,\n      enableUpdateAnimations: enableUpdateAnimations,\n      cellStyleProps: cellStyleProps\n    }));\n    var rowClassNames = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields\n    };\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n    var rowFields = React.createElement(RowFields, {\n      rowClassNames: this._rowClassNames,\n      rowHeaderId: id + \"-header\",\n      cellsByColumn: cellsByColumn,\n      columns: columns,\n      item: item,\n      itemIndex: itemIndex,\n      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0),\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey,\n      enableUpdateAnimations: enableUpdateAnimations,\n      cellStyleProps: cellStyleProps\n    });\n    return React.createElement(FocusZone, __assign({\n      \"data-is-focusable\": true\n    }, getNativeProps(this.props, divProperties), typeof isDraggable === 'boolean' ? {\n      'data-is-draggable': isDraggable,\n      draggable: isDraggable\n    } : {}, {\n      direction: FocusZoneDirection.horizontal,\n      elementRef: this._root,\n      componentRef: this._focusZone,\n      role: \"row\",\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescribedBy,\n      className: this._classNames.root,\n      \"data-selection-index\": itemIndex,\n      \"data-selection-touch-invoke\": true,\n      \"data-item-index\": itemIndex,\n      \"aria-rowindex\": groupNestingDepth ? undefined : itemIndex + 1,\n      \"aria-level\": groupNestingDepth && groupNestingDepth + 1 || undefined,\n      \"data-automationid\": \"DetailsRow\",\n      style: {\n        minWidth: rowWidth\n      },\n      \"aria-selected\": ariaSelected,\n      allowFocusRoot: true\n    }), showCheckbox && React.createElement(\"div\", {\n      role: \"gridcell\",\n      \"aria-colindex\": 1,\n      \"data-selection-toggle\": true,\n      className: this._classNames.checkCell\n    }, onRenderCheck({\n      id: id ? id + \"-checkbox\" : undefined,\n      selected: isSelected,\n      anySelected: isSelectionModal,\n      'aria-label': checkButtonAriaLabel,\n      'aria-labelledby': id ? id + \"-checkbox \" + id + \"-header\" : undefined,\n      canSelect: canSelect,\n      compact: compact,\n      className: this._classNames.check,\n      theme: theme,\n      isVisible: checkboxVisibility === CheckboxVisibility.always,\n      onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n      useFastIcons: useFastIcons\n    })), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)\n    }), item && rowFields, columnMeasureInfo && React.createElement(\"span\", {\n      role: \"presentation\",\n      className: css(this._classNames.cellMeasurer, this._classNames.cell),\n      ref: this._cellMeasurer\n    }, React.createElement(RowFields, {\n      rowClassNames: this._rowClassNames,\n      rowHeaderId: id + \"-header\",\n      columns: [columnMeasureInfo.column],\n      item: item,\n      itemIndex: itemIndex,\n      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey\n    })), React.createElement(\"span\", {\n      role: \"checkbox\",\n      className: this._classNames.checkCover,\n      \"aria-checked\": isSelected,\n      \"data-selection-toggle\": true\n    }));\n  };\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  DetailsRowBase.prototype.measureCell = function (index, onMeasureDone) {\n    var _a = this.props.columns,\n      columns = _a === void 0 ? NO_COLUMNS : _a;\n    var column = __assign({}, columns[index]);\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n    delete column.calculatedWidth;\n    this.setState({\n      columnMeasureInfo: {\n        index: index,\n        column: column,\n        onMeasureDone: onMeasureDone\n      }\n    });\n  };\n  DetailsRowBase.prototype.focus = function (forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n    var _a;\n    return !!((_a = this._focusZone.current) === null || _a === void 0 ? void 0 : _a.focus(forceIntoFirstElement));\n  };\n  DetailsRowBase.prototype._onRenderCheck = function (props) {\n    return React.createElement(DetailsRowCheck, __assign({}, props));\n  };\n  DetailsRowBase.prototype._getRowDragDropOptions = function () {\n    var _a = this.props,\n      item = _a.item,\n      itemIndex = _a.itemIndex,\n      dragDropEvents = _a.dragDropEvents,\n      eventsToRegister = _a.eventsToRegister;\n    var options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: {\n        data: item,\n        index: itemIndex\n      },\n      canDrag: dragDropEvents.canDrag,\n      canDrop: dragDropEvents.canDrop,\n      onDragStart: dragDropEvents.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents.onDrop,\n      onDragEnd: dragDropEvents.onDragEnd,\n      onDragOver: dragDropEvents.onDragOver\n    };\n    return options;\n  };\n  return DetailsRowBase;\n}(React.Component);\nexport { DetailsRowBase };\nfunction getSelectionState(props) {\n  var _a, _b, _c, _d;\n  var itemIndex = props.itemIndex,\n    selection = props.selection;\n  return {\n    isSelected: !!((_a = selection) === null || _a === void 0 ? void 0 : _a.isIndexSelected(itemIndex)),\n    isSelectionModal: !!((_d = (_b = selection) === null || _b === void 0 ? void 0 : (_c = _b).isModal) === null || _d === void 0 ? void 0 : _d.call(_c))\n  };\n}","map":{"version":3,"sources":["components/DetailsList/DetailsRow.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  IDisposable,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n} from '../../Utilities';\nimport { IColumn, CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\nimport { IDetailsRowBaseProps } from './DetailsRow.types';\nimport { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport { IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { classNamesFunction } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      id,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs: RowFields = DetailsRowFields,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex);\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        direction={FocusZoneDirection.horizontal}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role=\"row\"\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-item-index={itemIndex}\n        aria-rowindex={groupNestingDepth ? undefined : itemIndex + 1}\n        aria-level={(groupNestingDepth && groupNestingDepth + 1) || undefined}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {showCheckbox && (\n          <div role=\"gridcell\" aria-colindex={1} data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? `${id}-checkbox ${id}-header` : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}