{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { anchorProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nvar ContextualMenuAnchor = /** @class */function (_super) {\n  __extends(ContextualMenuAnchor, _super);\n  function ContextualMenuAnchor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._anchor = React.createRef();\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n    _this._getSubmenuTarget = function () {\n      return _this._anchor.current ? _this._anchor.current : undefined;\n    };\n    _this._onItemClick = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemClick = _a.onItemClick;\n      if (onItemClick) {\n        onItemClick(item, ev);\n      }\n    };\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n    return _this;\n  }\n  ContextualMenuAnchor.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      item = _a.item,\n      classNames = _a.classNames,\n      index = _a.index,\n      focusableElementIndex = _a.focusableElementIndex,\n      totalItemCount = _a.totalItemCount,\n      hasCheckmarks = _a.hasCheckmarks,\n      hasIcons = _a.hasIcons,\n      _b = _a.contextualMenuItemAs,\n      ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n      expandedMenuItemKey = _a.expandedMenuItemKey,\n      onItemClick = _a.onItemClick,\n      openSubMenu = _a.openSubMenu,\n      dismissSubMenu = _a.dismissSubMenu,\n      dismissMenu = _a.dismissMenu;\n    var anchorRel = item.rel;\n    if (item.target && item.target.toLowerCase() === '_blank') {\n      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n    }\n    var subMenuId = this._getSubMenuId(item);\n    var itemHasSubmenu = hasSubmenu(item);\n    var nativeProps = getNativeProps(item, anchorProperties);\n    var disabled = isItemDisabled(item);\n    var itemProps = item.itemProps,\n      ariaDescription = item.ariaDescription;\n    var keytipProps = item.keytipProps;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    return React.createElement(\"div\", null, React.createElement(KeytipData, {\n      keytipProps: item.keytipProps,\n      ariaDescribedBy: nativeProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return React.createElement(\"a\", __assign({}, nativeProps, keytipAttributes, {\n        ref: _this._anchor,\n        href: item.href,\n        target: item.target,\n        rel: anchorRel,\n        className: classNames.root,\n        role: \"menuitem\",\n        \"aria-owns\": item.key === expandedMenuItemKey ? subMenuId : undefined,\n        \"aria-haspopup\": itemHasSubmenu || undefined,\n        \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n        \"aria-posinset\": focusableElementIndex + 1,\n        \"aria-setsize\": totalItemCount,\n        \"aria-disabled\": isItemDisabled(item),\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescription ? _this._ariaDescriptionId : undefined, keytipAttributes ? keytipAttributes['aria-describedby'] : undefined),\n        // eslint-disable-next-line deprecation/deprecation\n        style: item.style,\n        onClick: _this._onItemClick,\n        onMouseEnter: _this._onItemMouseEnter,\n        onMouseLeave: _this._onItemMouseLeave,\n        onMouseMove: _this._onItemMouseMove,\n        onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : undefined\n      }), React.createElement(ChildrenRenderer, __assign({\n        componentRef: item.componentRef,\n        item: item,\n        classNames: classNames,\n        index: index,\n        onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n        hasIcons: hasIcons,\n        openSubMenu: openSubMenu,\n        dismissSubMenu: dismissSubMenu,\n        dismissMenu: dismissMenu,\n        getSubmenuTarget: _this._getSubmenuTarget\n      }, itemProps)), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    }));\n  };\n  return ContextualMenuAnchor;\n}(ContextualMenuItemWrapper);\nexport { ContextualMenuAnchor };","map":{"version":3,"sources":["components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { anchorProperties, getNativeProps, memoizeFunction, getId, mergeAriaAttributeValues } from '../../../Utilities';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { IKeytipProps } from '../../Keytip/Keytip.types';\n\nexport class ContextualMenuAnchor extends ContextualMenuItemWrapper {\n  private _anchor = React.createRef<HTMLAnchorElement>();\n  private _ariaDescriptionId: string;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  public render() {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      expandedMenuItemKey,\n      onItemClick,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    let anchorRel = item.rel;\n    if (item.target && item.target.toLowerCase() === '_blank') {\n      anchorRel = anchorRel ? anchorRel : 'nofollow noopener noreferrer'; // Safe default to prevent tabjacking\n    }\n\n    const subMenuId = this._getSubMenuId(item);\n    const itemHasSubmenu = hasSubmenu(item);\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLAnchorElement>>(item, anchorProperties);\n    const disabled = isItemDisabled(item);\n    const { itemProps, ariaDescription } = item;\n\n    let { keytipProps } = item;\n    if (keytipProps && itemHasSubmenu) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return (\n      <div>\n        <KeytipData\n          keytipProps={item.keytipProps}\n          ariaDescribedBy={nativeProps['aria-describedby']}\n          disabled={disabled}\n        >\n          {(keytipAttributes: any): JSX.Element => (\n            <a\n              {...nativeProps}\n              {...keytipAttributes}\n              ref={this._anchor}\n              href={item.href}\n              target={item.target}\n              rel={anchorRel}\n              className={classNames.root}\n              role=\"menuitem\"\n              aria-owns={item.key === expandedMenuItemKey ? subMenuId : undefined}\n              aria-haspopup={itemHasSubmenu || undefined}\n              aria-expanded={itemHasSubmenu ? item.key === expandedMenuItemKey : undefined}\n              aria-posinset={focusableElementIndex + 1}\n              aria-setsize={totalItemCount}\n              aria-disabled={isItemDisabled(item)}\n              aria-describedby={mergeAriaAttributeValues(\n                ariaDescription ? this._ariaDescriptionId : undefined,\n                keytipAttributes ? keytipAttributes['aria-describedby'] : undefined,\n              )}\n              // eslint-disable-next-line deprecation/deprecation\n              style={item.style}\n              onClick={this._onItemClick}\n              onMouseEnter={this._onItemMouseEnter}\n              onMouseLeave={this._onItemMouseLeave}\n              onMouseMove={this._onItemMouseMove}\n              onKeyDown={itemHasSubmenu ? this._onItemKeyDown : undefined}\n            >\n              <ChildrenRenderer\n                componentRef={item.componentRef}\n                item={item}\n                classNames={classNames}\n                index={index}\n                onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n                hasIcons={hasIcons}\n                openSubMenu={openSubMenu}\n                dismissSubMenu={dismissSubMenu}\n                dismissMenu={dismissMenu}\n                getSubmenuTarget={this._getSubmenuTarget}\n                {...itemProps}\n              />\n              {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n            </a>\n          )}\n        </KeytipData>\n      </div>\n    );\n  }\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._anchor.current ? this._anchor.current : undefined;\n  };\n\n  protected _onItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClick } = this.props;\n    if (onItemClick) {\n      onItemClick(item, ev);\n    }\n  };\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}