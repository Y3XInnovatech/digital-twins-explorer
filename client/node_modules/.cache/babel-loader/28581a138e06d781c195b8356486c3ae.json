{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { Stylesheet } from './Stylesheet';\nimport { kebabRules } from './transforms/kebabRules';\nimport { prefixRules } from './transforms/prefixRules';\nimport { provideUnits } from './transforms/provideUnits';\nimport { rtlifyRules } from './transforms/rtlifyRules';\nvar DISPLAY_NAME = 'displayName';\nfunction getDisplayName(rules) {\n  var rootStyle = rules && rules['&'];\n  return rootStyle ? rootStyle.displayName : undefined;\n}\nvar globalSelectorRegExp = /\\:global\\((.+?)\\)/g;\n/**\n * Finds comma separated selectors in a :global() e.g. \":global(.class1, .class2, .class3)\"\n * and wraps them each in their own global \":global(.class1), :global(.class2), :global(.class3)\"\n *\n * @param selectorWithGlobals The selector to process\n * @returns The updated selector\n */\nfunction expandCommaSeparatedGlobals(selectorWithGlobals) {\n  // We the selector does not have a :global() we can shortcut\n  if (!globalSelectorRegExp.test(selectorWithGlobals)) {\n    return selectorWithGlobals;\n  }\n  var replacementInfo = [];\n  var findGlobal = /\\:global\\((.+?)\\)/g;\n  var match = null;\n  // Create a result list for global selectors so we can replace them.\n  while (match = findGlobal.exec(selectorWithGlobals)) {\n    // Only if the found selector is a comma separated list we'll process it.\n    if (match[1].indexOf(',') > -1) {\n      replacementInfo.push([match.index, match.index + match[0].length,\n      // Wrap each of the found selectors in :global()\n      match[1].split(',').map(function (v) {\n        return \":global(\" + v.trim() + \")\";\n      }).join(', ')]);\n    }\n  }\n  // Replace the found selectors with their wrapped variants in reverse order\n  return replacementInfo.reverse().reduce(function (selector, _a) {\n    var matchIndex = _a[0],\n      matchEndIndex = _a[1],\n      replacement = _a[2];\n    var prefix = selector.slice(0, matchIndex);\n    var suffix = selector.slice(matchEndIndex);\n    return prefix + replacement + suffix;\n  }, selectorWithGlobals);\n}\nfunction expandSelector(newSelector, currentSelector) {\n  if (newSelector.indexOf(':global(') >= 0) {\n    return newSelector.replace(globalSelectorRegExp, '$1');\n  } else if (newSelector.indexOf(':') === 0) {\n    return currentSelector + newSelector;\n  } else if (newSelector.indexOf('&') < 0) {\n    return currentSelector + ' ' + newSelector;\n  }\n  return newSelector;\n}\nfunction extractSelector(currentSelector, rules, selector, value) {\n  if (rules === void 0) {\n    rules = {\n      __order: []\n    };\n  }\n  if (selector.indexOf('@') === 0) {\n    selector = selector + '{' + currentSelector;\n    extractRules([value], rules, selector);\n  } else if (selector.indexOf(',') > -1) {\n    expandCommaSeparatedGlobals(selector).split(',').map(function (s) {\n      return s.trim();\n    }).forEach(function (separatedSelector) {\n      return extractRules([value], rules, expandSelector(separatedSelector, currentSelector));\n    });\n  } else {\n    extractRules([value], rules, expandSelector(selector, currentSelector));\n  }\n}\nfunction extractRules(args, rules, currentSelector) {\n  if (rules === void 0) {\n    rules = {\n      __order: []\n    };\n  }\n  if (currentSelector === void 0) {\n    currentSelector = '&';\n  }\n  var stylesheet = Stylesheet.getInstance();\n  var currentRules = rules[currentSelector];\n  if (!currentRules) {\n    currentRules = {};\n    rules[currentSelector] = currentRules;\n    rules.__order.push(currentSelector);\n  }\n  for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\n    var arg = args_1[_i];\n    // If the arg is a string, we need to look up the class map and merge.\n    if (typeof arg === 'string') {\n      var expandedRules = stylesheet.argsFromClassName(arg);\n      if (expandedRules) {\n        extractRules(expandedRules, rules, currentSelector);\n      }\n      // Else if the arg is an array, we need to recurse in.\n    } else if (Array.isArray(arg)) {\n      extractRules(arg, rules, currentSelector);\n    } else {\n      for (var prop in arg) {\n        if (arg.hasOwnProperty(prop)) {\n          var propValue = arg[prop];\n          if (prop === 'selectors') {\n            // every child is a selector.\n            var selectors = arg.selectors;\n            for (var newSelector in selectors) {\n              if (selectors.hasOwnProperty(newSelector)) {\n                extractSelector(currentSelector, rules, newSelector, selectors[newSelector]);\n              }\n            }\n          } else if (typeof propValue === 'object') {\n            // prop is a selector.\n            if (propValue !== null) {\n              extractSelector(currentSelector, rules, prop, propValue);\n            }\n          } else {\n            if (propValue !== undefined) {\n              // Else, add the rule to the currentSelector.\n              if (prop === 'margin' || prop === 'padding') {\n                expandQuads(currentRules, prop, propValue);\n              } else {\n                currentRules[prop] = propValue;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return rules;\n}\nfunction expandQuads(currentRules, name, value) {\n  var parts = typeof value === 'string' ? value.split(' ') : [value];\n  currentRules[name + 'Top'] = parts[0];\n  currentRules[name + 'Right'] = parts[1] || parts[0];\n  currentRules[name + 'Bottom'] = parts[2] || parts[0];\n  currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];\n}\nfunction getKeyForRules(options, rules) {\n  var serialized = [options.rtl ? 'rtl' : 'ltr'];\n  var hasProps = false;\n  for (var _i = 0, _a = rules.__order; _i < _a.length; _i++) {\n    var selector = _a[_i];\n    serialized.push(selector);\n    var rulesForSelector = rules[selector];\n    for (var propName in rulesForSelector) {\n      if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {\n        hasProps = true;\n        serialized.push(propName, rulesForSelector[propName]);\n      }\n    }\n  }\n  return hasProps ? serialized.join('') : undefined;\n}\nfunction repeatString(target, count) {\n  if (count <= 0) {\n    return '';\n  }\n  if (count === 1) {\n    return target;\n  }\n  return target + repeatString(target, count - 1);\n}\nexport function serializeRuleEntries(options, ruleEntries) {\n  if (!ruleEntries) {\n    return '';\n  }\n  var allEntries = [];\n  for (var entry in ruleEntries) {\n    if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {\n      allEntries.push(entry, ruleEntries[entry]);\n    }\n  }\n  // Apply transforms.\n  for (var i = 0; i < allEntries.length; i += 2) {\n    kebabRules(allEntries, i);\n    provideUnits(allEntries, i);\n    rtlifyRules(options, allEntries, i);\n    prefixRules(allEntries, i);\n  }\n  // Apply punctuation.\n  for (var i = 1; i < allEntries.length; i += 4) {\n    allEntries.splice(i, 1, ':', allEntries[i], ';');\n  }\n  return allEntries.join('');\n}\nexport function styleToRegistration(options) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  var rules = extractRules(args);\n  var key = getKeyForRules(options, rules);\n  if (key) {\n    var stylesheet = Stylesheet.getInstance();\n    var registration = {\n      className: stylesheet.classNameFromKey(key),\n      key: key,\n      args: args\n    };\n    if (!registration.className) {\n      registration.className = stylesheet.getClassName(getDisplayName(rules));\n      var rulesToInsert = [];\n      for (var _a = 0, _b = rules.__order; _a < _b.length; _a++) {\n        var selector = _b[_a];\n        rulesToInsert.push(selector, serializeRuleEntries(options, rules[selector]));\n      }\n      registration.rulesToInsert = rulesToInsert;\n    }\n    return registration;\n  }\n  return undefined;\n}\n/**\n * Insert style to stylesheet.\n * @param registration Style registration.\n * @param specificityMultiplier Number of times classname selector is repeated in the css rule.\n * This is to increase css specificity in case it's needed. Default to 1.\n */\nexport function applyRegistration(registration, specificityMultiplier) {\n  if (specificityMultiplier === void 0) {\n    specificityMultiplier = 1;\n  }\n  var stylesheet = Stylesheet.getInstance();\n  var className = registration.className,\n    key = registration.key,\n    args = registration.args,\n    rulesToInsert = registration.rulesToInsert;\n  if (rulesToInsert) {\n    // rulesToInsert is an ordered array of selector/rule pairs.\n    for (var i = 0; i < rulesToInsert.length; i += 2) {\n      var rules = rulesToInsert[i + 1];\n      if (rules) {\n        var selector = rulesToInsert[i];\n        selector = selector.replace(/&/g, repeatString(\".\" + registration.className, specificityMultiplier));\n        // Insert. Note if a media query, we must close the query with a final bracket.\n        var processedRule = selector + \"{\" + rules + \"}\" + (selector.indexOf('@') === 0 ? '}' : '');\n        stylesheet.insertRule(processedRule);\n      }\n    }\n    stylesheet.cacheClassName(className, key, args, rulesToInsert);\n  }\n}\nexport function styleToClassName(options) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  var registration = styleToRegistration.apply(void 0, __spreadArrays([options], args));\n  if (registration) {\n    applyRegistration(registration, options.specificityMultiplier);\n    return registration.className;\n  }\n  return '';\n}","map":{"version":3,"sources":["styleToClassName.ts"],"names":[],"mappings":"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","sourcesContent":["import { IStyle } from './IStyle';\nimport { IRawStyle } from './IRawStyle';\n\nimport { Stylesheet } from './Stylesheet';\nimport { kebabRules } from './transforms/kebabRules';\nimport { prefixRules } from './transforms/prefixRules';\nimport { provideUnits } from './transforms/provideUnits';\nimport { rtlifyRules } from './transforms/rtlifyRules';\nimport { IStyleOptions } from './IStyleOptions';\n\nconst DISPLAY_NAME = 'displayName';\n\ntype IDictionary = { [key: string]: any };\n\ninterface IRuleSet {\n  __order: string[];\n  [key: string]: IDictionary;\n}\n\nfunction getDisplayName(rules?: { [key: string]: IRawStyle }): string | undefined {\n  const rootStyle: IStyle = rules && rules['&'];\n\n  return rootStyle ? (rootStyle as IRawStyle).displayName : undefined;\n}\n\nconst globalSelectorRegExp = /\\:global\\((.+?)\\)/g;\n\ntype ReplacementInfo = [number, number, string];\n\n/**\n * Finds comma separated selectors in a :global() e.g. \":global(.class1, .class2, .class3)\"\n * and wraps them each in their own global \":global(.class1), :global(.class2), :global(.class3)\"\n *\n * @param selectorWithGlobals The selector to process\n * @returns The updated selector\n */\nfunction expandCommaSeparatedGlobals(selectorWithGlobals: string): string {\n  // We the selector does not have a :global() we can shortcut\n  if (!globalSelectorRegExp.test(selectorWithGlobals)) {\n    return selectorWithGlobals;\n  }\n\n  const replacementInfo: ReplacementInfo[] = [];\n\n  const findGlobal = /\\:global\\((.+?)\\)/g;\n  let match = null;\n  // Create a result list for global selectors so we can replace them.\n  while ((match = findGlobal.exec(selectorWithGlobals))) {\n    // Only if the found selector is a comma separated list we'll process it.\n    if (match[1].indexOf(',') > -1) {\n      replacementInfo.push([\n        match.index,\n        match.index + match[0].length,\n        // Wrap each of the found selectors in :global()\n        match[1]\n          .split(',')\n          .map((v: string) => `:global(${v.trim()})`)\n          .join(', '),\n      ]);\n    }\n  }\n\n  // Replace the found selectors with their wrapped variants in reverse order\n  return replacementInfo\n    .reverse()\n    .reduce((selector: string, [matchIndex, matchEndIndex, replacement]: ReplacementInfo) => {\n      const prefix = selector.slice(0, matchIndex);\n      const suffix = selector.slice(matchEndIndex);\n\n      return prefix + replacement + suffix;\n    }, selectorWithGlobals);\n}\n\nfunction expandSelector(newSelector: string, currentSelector: string): string {\n  if (newSelector.indexOf(':global(') >= 0) {\n    return newSelector.replace(globalSelectorRegExp, '$1');\n  } else if (newSelector.indexOf(':') === 0) {\n    return currentSelector + newSelector;\n  } else if (newSelector.indexOf('&') < 0) {\n    return currentSelector + ' ' + newSelector;\n  }\n\n  return newSelector;\n}\n\nfunction extractSelector(currentSelector: string, rules: IRuleSet = { __order: [] }, selector: string, value: IStyle) {\n  if (selector.indexOf('@') === 0) {\n    selector = selector + '{' + currentSelector;\n    extractRules([value], rules, selector);\n  } else if (selector.indexOf(',') > -1) {\n    expandCommaSeparatedGlobals(selector)\n      .split(',')\n      .map((s: string) => s.trim())\n      .forEach((separatedSelector: string) =>\n        extractRules([value], rules, expandSelector(separatedSelector, currentSelector)),\n      );\n  } else {\n    extractRules([value], rules, expandSelector(selector, currentSelector));\n  }\n}\n\nfunction extractRules(args: IStyle[], rules: IRuleSet = { __order: [] }, currentSelector: string = '&'): IRuleSet {\n  const stylesheet = Stylesheet.getInstance();\n  let currentRules: IDictionary | undefined = rules[currentSelector] as IDictionary;\n\n  if (!currentRules) {\n    currentRules = {};\n    rules[currentSelector] = currentRules;\n    rules.__order.push(currentSelector);\n  }\n\n  for (const arg of args) {\n    // If the arg is a string, we need to look up the class map and merge.\n    if (typeof arg === 'string') {\n      const expandedRules = stylesheet.argsFromClassName(arg);\n\n      if (expandedRules) {\n        extractRules(expandedRules, rules, currentSelector);\n      }\n      // Else if the arg is an array, we need to recurse in.\n    } else if (Array.isArray(arg)) {\n      extractRules(arg, rules, currentSelector);\n    } else {\n      for (const prop in arg as any) {\n        if ((arg as any).hasOwnProperty(prop)) {\n          const propValue = (arg as any)[prop];\n\n          if (prop === 'selectors') {\n            // every child is a selector.\n            const selectors: { [key: string]: IStyle } = (arg as any).selectors;\n\n            for (const newSelector in selectors) {\n              if (selectors.hasOwnProperty(newSelector)) {\n                extractSelector(currentSelector, rules, newSelector, selectors[newSelector]);\n              }\n            }\n          } else if (typeof propValue === 'object') {\n            // prop is a selector.\n            if (propValue !== null) {\n              extractSelector(currentSelector, rules, prop, propValue);\n            }\n          } else {\n            if (propValue !== undefined) {\n              // Else, add the rule to the currentSelector.\n              if (prop === 'margin' || prop === 'padding') {\n                expandQuads(currentRules, prop, propValue);\n              } else {\n                (currentRules as any)[prop] = propValue;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return rules;\n}\n\nfunction expandQuads(currentRules: IDictionary, name: string, value: string): void {\n  const parts = typeof value === 'string' ? value.split(' ') : [value];\n\n  currentRules[name + 'Top'] = parts[0];\n  currentRules[name + 'Right'] = parts[1] || parts[0];\n  currentRules[name + 'Bottom'] = parts[2] || parts[0];\n  currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];\n}\n\nfunction getKeyForRules(options: IStyleOptions, rules: IRuleSet): string | undefined {\n  const serialized: string[] = [options.rtl ? 'rtl' : 'ltr'];\n  let hasProps = false;\n\n  for (const selector of rules.__order) {\n    serialized.push(selector);\n    const rulesForSelector = rules[selector];\n\n    for (const propName in rulesForSelector) {\n      if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {\n        hasProps = true;\n        serialized.push(propName, rulesForSelector[propName]);\n      }\n    }\n  }\n\n  return hasProps ? serialized.join('') : undefined;\n}\n\nfunction repeatString(target: string, count: number): string {\n  if (count <= 0) {\n    return '';\n  }\n\n  if (count === 1) {\n    return target;\n  }\n\n  return target + repeatString(target, count - 1);\n}\n\nexport function serializeRuleEntries(options: IStyleOptions, ruleEntries: { [key: string]: string | number }): string {\n  if (!ruleEntries) {\n    return '';\n  }\n\n  const allEntries: (string | number)[] = [];\n\n  for (const entry in ruleEntries) {\n    if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {\n      allEntries.push(entry, ruleEntries[entry]);\n    }\n  }\n\n  // Apply transforms.\n  for (let i = 0; i < allEntries.length; i += 2) {\n    kebabRules(allEntries, i);\n    provideUnits(allEntries, i);\n    rtlifyRules(options, allEntries, i);\n    prefixRules(allEntries, i);\n  }\n\n  // Apply punctuation.\n  for (let i = 1; i < allEntries.length; i += 4) {\n    allEntries.splice(i, 1, ':', allEntries[i], ';');\n  }\n\n  return allEntries.join('');\n}\n\nexport interface IRegistration {\n  className: string;\n  key: string;\n  args: IStyle[];\n  rulesToInsert: string[];\n}\n\nexport function styleToRegistration(options: IStyleOptions, ...args: IStyle[]): IRegistration | undefined {\n  const rules: IRuleSet = extractRules(args);\n  const key = getKeyForRules(options, rules);\n\n  if (key) {\n    const stylesheet = Stylesheet.getInstance();\n    const registration: Partial<IRegistration> = {\n      className: stylesheet.classNameFromKey(key),\n      key,\n      args,\n    };\n\n    if (!registration.className) {\n      registration.className = stylesheet.getClassName(getDisplayName(rules));\n      const rulesToInsert: string[] = [];\n\n      for (const selector of rules.__order) {\n        rulesToInsert.push(selector, serializeRuleEntries(options, rules[selector]));\n      }\n      registration.rulesToInsert = rulesToInsert;\n    }\n\n    return registration as IRegistration;\n  }\n\n  return undefined;\n}\n\n/**\n * Insert style to stylesheet.\n * @param registration Style registration.\n * @param specificityMultiplier Number of times classname selector is repeated in the css rule.\n * This is to increase css specificity in case it's needed. Default to 1.\n */\nexport function applyRegistration(registration: IRegistration, specificityMultiplier: number = 1): void {\n  const stylesheet = Stylesheet.getInstance();\n  const { className, key, args, rulesToInsert } = registration;\n\n  if (rulesToInsert) {\n    // rulesToInsert is an ordered array of selector/rule pairs.\n    for (let i = 0; i < rulesToInsert.length; i += 2) {\n      const rules = rulesToInsert[i + 1];\n      if (rules) {\n        let selector = rulesToInsert[i];\n        selector = selector.replace(/&/g, repeatString(`.${registration.className}`, specificityMultiplier));\n\n        // Insert. Note if a media query, we must close the query with a final bracket.\n        const processedRule = `${selector}{${rules}}${selector.indexOf('@') === 0 ? '}' : ''}`;\n        stylesheet.insertRule(processedRule);\n      }\n    }\n    stylesheet.cacheClassName(className!, key!, args!, rulesToInsert);\n  }\n}\n\nexport function styleToClassName(options: IStyleOptions, ...args: IStyle[]): string {\n  const registration = styleToRegistration(options, ...args);\n  if (registration) {\n    applyRegistration(registration, options.specificityMultiplier);\n\n    return registration.className;\n  }\n\n  return '';\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}