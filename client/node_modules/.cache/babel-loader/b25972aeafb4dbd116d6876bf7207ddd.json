{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbortSignal, abortSignal } from \"./AbortSignal\";\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n */\nvar AbortError = /** @class */function (_super) {\n  __extends(AbortError, _super);\n  function AbortError(message) {\n    var _this = _super.call(this, message) || this;\n    _this.name = \"AbortError\";\n    return _this;\n  }\n  return AbortError;\n}(Error);\nexport { AbortError };\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * // Abort an operation when another event fires\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n *\n * @example\n * // Share aborter cross multiple operations in 30s\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *\n * @example\n * // Cascaded aborting\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n *\n * @export\n * @class AbortController\n * @implements {AbortSignalLike}\n */\nvar AbortController = /** @class */function () {\n  function AbortController(parentSignals) {\n    var _this = this;\n    this._signal = new AbortSignal();\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      parentSignals = arguments;\n    }\n    for (var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++) {\n      var parentSignal = parentSignals_1[_i];\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", function () {\n          _this.abort();\n        });\n      }\n    }\n  }\n  Object.defineProperty(AbortController.prototype, \"signal\", {\n    /**\n     * The AbortSignal associated with this controller that will signal aborted\n     * when the abort method is called on this controller.\n     *\n     * @readonly\n     * @type {AbortSignal}\n     * @memberof AbortController\n     */\n    get: function () {\n      return this._signal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   *\n   * @memberof AbortController\n   */\n  AbortController.prototype.abort = function () {\n    abortSignal(this._signal);\n  };\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   *\n   * @static\n   * @params {number} ms Elapsed time in milliseconds to trigger an abort.\n   * @returns {AbortSignal}\n   */\n  AbortController.timeout = function (ms) {\n    var signal = new AbortSignal();\n    var timer = setTimeout(abortSignal, ms, signal);\n    // Prevent the active Timer from keeping the Node.js event loop active.\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n    return signal;\n  };\n  return AbortController;\n}();\nexport { AbortController };","map":{"version":3,"sources":["../../src/AbortController.ts"],"names":[],"mappings":";AAAA,SAAS,WAAW,EAAE,WAAW,QAAyB,eAAe;AAEzE;;;;;;;;;;;;;;;AAeG;AACH,IAAA,UAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgC,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;EAC9B,SAAA,UAAA,CAAY,OAAgB,EAAA;IAA5B,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAO,CAAC,IAAA,IAAA;IACd,KAAI,CAAC,IAAI,GAAG,YAAY;;EAC1B;EACF,OAAA,UAAC;AAAD,CAAC,CAL+B,KAAK,CAAA;;AAOrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BG;AACH,IAAA,eAAA,GAAA,aAAA,YAAA;EAaE,SAAA,eAAA,CAAY,aAAmB,EAAA;IAA/B,IAAA,KAAA,GAAA,IAAA;IACE,IAAI,CAAC,OAAO,GAAG,IAAI,WAAW,CAAA,CAAE;IAEhC,IAAI,CAAC,aAAa,EAAE;MAClB;IACD;IACD;IACA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;MACjC,aAAa,GAAG,SAAS;IAC1B;IACD,KAA2B,IAAA,EAAA,GAAA,CAAa,EAAb,eAAA,GAAA,aAAa,EAAb,EAAA,GAAA,eAAA,CAAA,MAAa,EAAb,EAAA,EAAa,EAAE;MAArC,IAAM,YAAY,GAAA,eAAA,CAAA,EAAA,CAAA;MACrB;MACA;MACA,IAAI,YAAY,CAAC,OAAO,EAAE;QACxB,IAAI,CAAC,KAAK,CAAA,CAAE;OACb,MAAM;QACL;QACA,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAA;UACrC,KAAI,CAAC,KAAK,CAAA,CAAE;QACd,CAAC,CAAC;MACH;IACF;EACH;EAUA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAA,EAAA,QAAM,EAAA;IARjB;;;;;;;AAOG;SACH,SAAA,CAAA,EAAA;MACE,OAAO,IAAI,CAAC,OAAO;IACrB,CAAC;;;IAAA;EAED;;;;;AAKG;EACH,eAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IACE,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;EAC3B,CAAC;EAED;;;;;;AAMG;EACW,eAAA,CAAA,OAAO,GAArB,UAAsB,EAAU,EAAA;IAC9B,IAAM,MAAM,GAAG,IAAI,WAAW,CAAA,CAAE;IAChC,IAAM,KAAK,GAAG,UAAU,CAAC,WAAW,EAAE,EAAE,EAAE,MAAM,CAAC;IACjD;IACA,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,UAAU,EAAE;MACrC,KAAK,CAAC,KAAK,CAAA,CAAE;IACd;IACD,OAAO,MAAM;EACf,CAAC;EACH,OAAA,eAAC;AAAD,CAAC,CAAA,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { AbortSignal, abortSignal } from \"./AbortSignal\";\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n */\nvar AbortError = /** @class */ (function (_super) {\n    __extends(AbortError, _super);\n    function AbortError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \"AbortError\";\n        return _this;\n    }\n    return AbortError;\n}(Error));\nexport { AbortError };\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * // Abort an operation when another event fires\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n *\n * @example\n * // Share aborter cross multiple operations in 30s\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *\n * @example\n * // Cascaded aborting\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n *\n * @export\n * @class AbortController\n * @implements {AbortSignalLike}\n */\nvar AbortController = /** @class */ (function () {\n    function AbortController(parentSignals) {\n        var _this = this;\n        this._signal = new AbortSignal();\n        if (!parentSignals) {\n            return;\n        }\n        // coerce parentSignals into an array\n        if (!Array.isArray(parentSignals)) {\n            parentSignals = arguments;\n        }\n        for (var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++) {\n            var parentSignal = parentSignals_1[_i];\n            // if the parent signal has already had abort() called,\n            // then call abort on this signal as well.\n            if (parentSignal.aborted) {\n                this.abort();\n            }\n            else {\n                // when the parent signal aborts, this signal should as well.\n                parentSignal.addEventListener(\"abort\", function () {\n                    _this.abort();\n                });\n            }\n        }\n    }\n    Object.defineProperty(AbortController.prototype, \"signal\", {\n        /**\n         * The AbortSignal associated with this controller that will signal aborted\n         * when the abort method is called on this controller.\n         *\n         * @readonly\n         * @type {AbortSignal}\n         * @memberof AbortController\n         */\n        get: function () {\n            return this._signal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Signal that any operations passed this controller's associated abort signal\n     * to cancel any remaining work and throw an `AbortError`.\n     *\n     * @memberof AbortController\n     */\n    AbortController.prototype.abort = function () {\n        abortSignal(this._signal);\n    };\n    /**\n     * Creates a new AbortSignal instance that will abort after the provided ms.\n     *\n     * @static\n     * @params {number} ms Elapsed time in milliseconds to trigger an abort.\n     * @returns {AbortSignal}\n     */\n    AbortController.timeout = function (ms) {\n        var signal = new AbortSignal();\n        var timer = setTimeout(abortSignal, ms, signal);\n        // Prevent the active Timer from keeping the Node.js event loop active.\n        if (typeof timer.unref === \"function\") {\n            timer.unref();\n        }\n        return signal;\n    };\n    return AbortController;\n}());\nexport { AbortController };\n//# sourceMappingURL=AbortController.js.map"]},"metadata":{},"sourceType":"module"}