{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { divProperties, getNativeProps, getId, KeyCodes, getDocument, classNamesFunction, initializeComponentRef, EventGroup, Async } from '../../Utilities';\nimport { OpenCardMode, HoverCardType } from './HoverCard.types';\nimport { ExpandingCard } from './ExpandingCard';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { PlainCard } from './PlainCard/PlainCard';\nvar getClassNames = classNamesFunction();\nvar HoverCardBase = /** @class */function (_super) {\n  __extends(HoverCardBase, _super);\n  // Constructor\n  function HoverCardBase(props) {\n    var _this = _super.call(this, props) || this;\n    // The wrapping div that gets the hover events\n    _this._hoverCard = React.createRef();\n    _this.dismiss = function (withTimeOut) {\n      _this._async.clearTimeout(_this._openTimerId);\n      _this._async.clearTimeout(_this._dismissTimerId);\n      if (!withTimeOut) {\n        _this._setDismissedState();\n      } else {\n        _this._dismissTimerId = _this._async.setTimeout(function () {\n          _this._setDismissedState();\n        }, _this.props.cardDismissDelay);\n      }\n    };\n    // Show HoverCard\n    _this._cardOpen = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (_this._shouldBlockHoverCard() || ev.type === 'keydown' && !(ev.which === _this.props.openHotKey)) {\n        return;\n      }\n      _this._async.clearTimeout(_this._dismissTimerId);\n      if (ev.type === 'mouseenter') {\n        _this._currentMouseTarget = ev.currentTarget;\n      }\n      _this._executeCardOpen(ev);\n    };\n    _this._executeCardOpen = function (ev) {\n      _this._async.clearTimeout(_this._openTimerId);\n      _this._openTimerId = _this._async.setTimeout(function () {\n        _this.setState(function (prevState) {\n          if (!prevState.isHoverCardVisible) {\n            return {\n              isHoverCardVisible: true,\n              mode: ExpandingCardMode.compact,\n              openMode: ev.type === 'keydown' ? OpenCardMode.hotKey : OpenCardMode.hover\n            };\n          }\n          return prevState;\n        });\n      }, _this.props.cardOpenDelay);\n    };\n    /**\n     * Hide HoverCard\n     * How we dismiss the card depends on where the callback is coming from.\n     * This is provided by the `isNativeEvent` argument.\n     *  true: Event is coming from event listeners set up in componentDidMount.\n     *  false: Event is coming from the `onLeave` prop from the HoverCard component.\n     */\n    _this._cardDismiss = function (isNativeEvent, ev) {\n      if (isNativeEvent) {\n        // We expect these to be MouseEvents, If not, return.\n        if (!(ev instanceof MouseEvent)) {\n          return;\n        }\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.type === 'keydown' && ev.which !== KeyCodes.escape) {\n          return;\n        }\n        // Dismiss if not sticky and currentTarget is the same element that mouse last entered\n        // eslint-disable-next-line deprecation/deprecation\n        if (!_this.props.sticky && (_this._currentMouseTarget === ev.currentTarget || ev.which === KeyCodes.escape)) {\n          _this.dismiss(true);\n        }\n      } else {\n        // If this is a mouseleave event and the component is sticky, do not dismiss.\n        if (_this.props.sticky && !(ev instanceof MouseEvent) && ev.nativeEvent instanceof MouseEvent && ev.type === 'mouseleave') {\n          return;\n        }\n        _this.dismiss(true);\n      }\n    };\n    _this._setDismissedState = function () {\n      _this.setState({\n        isHoverCardVisible: false,\n        mode: ExpandingCardMode.compact,\n        openMode: OpenCardMode.hover\n      });\n    };\n    _this._instantOpenAsExpanded = function (ev) {\n      _this._async.clearTimeout(_this._dismissTimerId);\n      _this.setState(function (prevState) {\n        if (!prevState.isHoverCardVisible) {\n          return {\n            isHoverCardVisible: true,\n            mode: ExpandingCardMode.expanded\n          };\n        }\n        return prevState;\n      });\n    };\n    _this._setEventListeners = function () {\n      var _a = _this.props,\n        trapFocus = _a.trapFocus,\n        instantOpenOnClick = _a.instantOpenOnClick,\n        eventListenerTarget = _a.eventListenerTarget;\n      var target = eventListenerTarget ? _this._getTargetElement(eventListenerTarget) : _this._getTargetElement(_this.props.target);\n      var nativeEventDismiss = _this._nativeDismissEvent;\n      // target can be undefined if ref isn't available, only assign\n      // events when defined to avoid throwing exception.\n      if (target) {\n        _this._events.on(target, 'mouseenter', _this._cardOpen);\n        _this._events.on(target, 'mouseleave', nativeEventDismiss);\n        if (trapFocus) {\n          _this._events.on(target, 'keydown', _this._cardOpen);\n        } else {\n          _this._events.on(target, 'focus', _this._cardOpen);\n          _this._events.on(target, 'blur', nativeEventDismiss);\n        }\n        if (instantOpenOnClick) {\n          _this._events.on(target, 'click', _this._instantOpenAsExpanded);\n        } else {\n          _this._events.on(target, 'mousedown', nativeEventDismiss);\n          _this._events.on(target, 'keydown', nativeEventDismiss);\n        }\n      }\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this._nativeDismissEvent = _this._cardDismiss.bind(_this, true);\n    _this._childDismissEvent = _this._cardDismiss.bind(_this, false);\n    _this.state = {\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover\n    };\n    return _this;\n  }\n  HoverCardBase.prototype.componentDidMount = function () {\n    this._setEventListeners();\n  };\n  HoverCardBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  HoverCardBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n    if (prevProps.target !== this.props.target) {\n      this._events.off();\n      this._setEventListeners();\n    }\n    if (prevState.isHoverCardVisible !== this.state.isHoverCardVisible) {\n      if (this.state.isHoverCardVisible) {\n        this._async.setTimeout(function () {\n          _this.setState({\n            mode: ExpandingCardMode.expanded\n          }, function () {\n            _this.props.onCardExpand && _this.props.onCardExpand();\n          });\n        }, this.props.expandedCardOpenDelay);\n        this.props.onCardVisible && this.props.onCardVisible();\n      } else {\n        this.setState({\n          mode: ExpandingCardMode.compact\n        });\n        this.props.onCardHide && this.props.onCardHide();\n      }\n    }\n  };\n  // Render\n  HoverCardBase.prototype.render = function () {\n    var _a = this.props,\n      expandingCardProps = _a.expandingCardProps,\n      children = _a.children,\n      id = _a.id,\n      _b = _a.setAriaDescribedBy,\n      setAriaDescribedBy = _b === void 0 ? true : _b,\n      customStyles = _a.styles,\n      theme = _a.theme,\n      className = _a.className,\n      type = _a.type,\n      plainCardProps = _a.plainCardProps,\n      trapFocus = _a.trapFocus,\n      setInitialFocus = _a.setInitialFocus;\n    var _c = this.state,\n      isHoverCardVisible = _c.isHoverCardVisible,\n      mode = _c.mode,\n      openMode = _c.openMode;\n    var hoverCardId = id || getId('hoverCard');\n    this._classNames = getClassNames(customStyles, {\n      theme: theme,\n      className: className\n    });\n    // Common props for both card types.\n    var commonCardProps = __assign(__assign({}, getNativeProps(this.props, divProperties)), {\n      id: hoverCardId,\n      trapFocus: !!trapFocus,\n      firstFocus: setInitialFocus || openMode === OpenCardMode.hotKey,\n      targetElement: this._getTargetElement(this.props.target),\n      onEnter: this._cardOpen,\n      onLeave: this._childDismissEvent\n    });\n    var finalExpandedCardProps = __assign(__assign(__assign({}, expandingCardProps), commonCardProps), {\n      mode: mode\n    });\n    var finalPlainCardProps = __assign(__assign({}, plainCardProps), commonCardProps);\n    return React.createElement(\"div\", {\n      className: this._classNames.host,\n      ref: this._hoverCard,\n      \"aria-describedby\": setAriaDescribedBy && isHoverCardVisible ? hoverCardId : undefined,\n      \"data-is-focusable\": !this.props.target\n    }, children, isHoverCardVisible && (type === HoverCardType.expanding ? React.createElement(ExpandingCard, __assign({}, finalExpandedCardProps)) : React.createElement(PlainCard, __assign({}, finalPlainCardProps))));\n  };\n  HoverCardBase.prototype._getTargetElement = function (target) {\n    switch (typeof target) {\n      case 'string':\n        return getDocument().querySelector(target);\n      case 'object':\n        return target;\n      default:\n        return this._hoverCard.current || undefined;\n    }\n  };\n  HoverCardBase.prototype._shouldBlockHoverCard = function () {\n    return !!(this.props.shouldBlockHoverCard && this.props.shouldBlockHoverCard());\n  };\n  HoverCardBase.defaultProps = {\n    cardOpenDelay: 500,\n    cardDismissDelay: 100,\n    expandedCardOpenDelay: 1500,\n    instantOpenOnClick: false,\n    setInitialFocus: false,\n    openHotKey: KeyCodes.c,\n    type: HoverCardType.expanding\n  };\n  return HoverCardBase;\n}(React.Component);\nexport { HoverCardBase };","map":{"version":3,"sources":["components/HoverCard/HoverCard.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  divProperties,\n  getNativeProps,\n  getId,\n  KeyCodes,\n  getDocument,\n  classNamesFunction,\n  initializeComponentRef,\n  EventGroup,\n  Async,\n} from '../../Utilities';\nimport {\n  IHoverCardProps,\n  IHoverCardStyles,\n  IHoverCardStyleProps,\n  OpenCardMode,\n  HoverCardType,\n  IHoverCard,\n} from './HoverCard.types';\nimport { ExpandingCard } from './ExpandingCard';\nimport { ExpandingCardMode, IExpandingCardProps } from './ExpandingCard.types';\nimport { PlainCard } from './PlainCard/PlainCard';\nimport { IPlainCardProps } from './PlainCard/PlainCard.types';\n\nconst getClassNames = classNamesFunction<IHoverCardStyleProps, IHoverCardStyles>();\n\nexport interface IHoverCardState {\n  isHoverCardVisible?: boolean;\n  mode?: ExpandingCardMode;\n  openMode?: OpenCardMode;\n}\n\nexport class HoverCardBase extends React.Component<IHoverCardProps, IHoverCardState> implements IHoverCard {\n  public static defaultProps = {\n    cardOpenDelay: 500,\n    cardDismissDelay: 100,\n    expandedCardOpenDelay: 1500,\n    instantOpenOnClick: false,\n    setInitialFocus: false,\n    openHotKey: KeyCodes.c as KeyCodes,\n    type: HoverCardType.expanding,\n  };\n\n  // The wrapping div that gets the hover events\n  private _hoverCard = React.createRef<HTMLDivElement>();\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _currentMouseTarget: EventTarget | null;\n\n  private _nativeDismissEvent: (ev?: any) => void;\n  private _childDismissEvent: (ev?: any) => void;\n\n  private _classNames: { [key in keyof IHoverCardStyles]: string };\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  // Constructor\n  constructor(props: IHoverCardProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this._nativeDismissEvent = this._cardDismiss.bind(this, true);\n    this._childDismissEvent = this._cardDismiss.bind(this, false);\n\n    this.state = {\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._setEventListeners();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IHoverCardProps, prevState: IHoverCardState) {\n    if (prevProps.target !== this.props.target) {\n      this._events.off();\n      this._setEventListeners();\n    }\n\n    if (prevState.isHoverCardVisible !== this.state.isHoverCardVisible) {\n      if (this.state.isHoverCardVisible) {\n        this._async.setTimeout(() => {\n          this.setState(\n            {\n              mode: ExpandingCardMode.expanded,\n            },\n            () => {\n              this.props.onCardExpand && this.props.onCardExpand();\n            },\n          );\n        }, this.props.expandedCardOpenDelay!);\n        this.props.onCardVisible && this.props.onCardVisible();\n      } else {\n        this.setState({\n          mode: ExpandingCardMode.compact,\n        });\n        this.props.onCardHide && this.props.onCardHide();\n      }\n    }\n  }\n\n  public dismiss = (withTimeOut?: boolean): void => {\n    this._async.clearTimeout(this._openTimerId);\n    this._async.clearTimeout(this._dismissTimerId);\n    if (!withTimeOut) {\n      this._setDismissedState();\n    } else {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._setDismissedState();\n      }, this.props.cardDismissDelay!);\n    }\n  };\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      expandingCardProps,\n      children,\n      id,\n      setAriaDescribedBy = true,\n      styles: customStyles,\n      theme,\n      className,\n      type,\n      plainCardProps,\n      trapFocus,\n      setInitialFocus,\n    } = this.props;\n    const { isHoverCardVisible, mode, openMode } = this.state;\n    const hoverCardId = id || getId('hoverCard');\n\n    this._classNames = getClassNames(customStyles, {\n      theme: theme!,\n      className,\n    });\n\n    // Common props for both card types.\n    const commonCardProps = {\n      ...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties),\n      id: hoverCardId,\n      trapFocus: !!trapFocus,\n      firstFocus: setInitialFocus || openMode === OpenCardMode.hotKey,\n      targetElement: this._getTargetElement(this.props.target),\n      onEnter: this._cardOpen,\n      onLeave: this._childDismissEvent,\n    };\n\n    const finalExpandedCardProps: IExpandingCardProps = { ...expandingCardProps, ...commonCardProps, mode };\n    const finalPlainCardProps: IPlainCardProps = { ...plainCardProps, ...commonCardProps };\n\n    return (\n      <div\n        className={this._classNames.host}\n        ref={this._hoverCard}\n        aria-describedby={setAriaDescribedBy && isHoverCardVisible ? hoverCardId : undefined}\n        data-is-focusable={!this.props.target}\n      >\n        {children}\n        {isHoverCardVisible &&\n          (type === HoverCardType.expanding ? (\n            <ExpandingCard {...finalExpandedCardProps} />\n          ) : (\n            <PlainCard {...finalPlainCardProps} />\n          ))}\n      </div>\n    );\n  }\n\n  private _getTargetElement(target?: HTMLElement | string | null): HTMLElement | undefined {\n    switch (typeof target) {\n      case 'string':\n        return getDocument()!.querySelector(target as string) as HTMLElement;\n\n      case 'object':\n        return target as HTMLElement;\n\n      default:\n        return this._hoverCard.current || undefined;\n    }\n  }\n\n  private _shouldBlockHoverCard(): boolean {\n    return !!(this.props.shouldBlockHoverCard && this.props.shouldBlockHoverCard());\n  }\n\n  // Show HoverCard\n  private _cardOpen = (ev: MouseEvent): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._shouldBlockHoverCard() || (ev.type === 'keydown' && !(ev.which === this.props.openHotKey))) {\n      return;\n    }\n    this._async.clearTimeout(this._dismissTimerId);\n    if (ev.type === 'mouseenter') {\n      this._currentMouseTarget = ev.currentTarget;\n    }\n\n    this._executeCardOpen(ev);\n  };\n\n  private _executeCardOpen = (ev: MouseEvent): void => {\n    this._async.clearTimeout(this._openTimerId);\n    this._openTimerId = this._async.setTimeout(() => {\n      this.setState((prevState: IHoverCardState) => {\n        if (!prevState.isHoverCardVisible) {\n          return {\n            isHoverCardVisible: true,\n            mode: ExpandingCardMode.compact,\n            openMode: ev.type === 'keydown' ? OpenCardMode.hotKey : OpenCardMode.hover,\n          };\n        }\n\n        return prevState;\n      });\n    }, this.props.cardOpenDelay!);\n  };\n\n  /**\n   * Hide HoverCard\n   * How we dismiss the card depends on where the callback is coming from.\n   * This is provided by the `isNativeEvent` argument.\n   *  true: Event is coming from event listeners set up in componentDidMount.\n   *  false: Event is coming from the `onLeave` prop from the HoverCard component.\n   */\n  private _cardDismiss = (\n    isNativeEvent: boolean,\n    ev: MouseEvent | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ) => {\n    if (isNativeEvent) {\n      // We expect these to be MouseEvents, If not, return.\n      if (!(ev instanceof MouseEvent)) {\n        return;\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.type === 'keydown' && ev.which !== KeyCodes.escape) {\n        return;\n      }\n\n      // Dismiss if not sticky and currentTarget is the same element that mouse last entered\n      // eslint-disable-next-line deprecation/deprecation\n      if (!this.props.sticky && (this._currentMouseTarget === ev.currentTarget || ev.which === KeyCodes.escape)) {\n        this.dismiss(true);\n      }\n    } else {\n      // If this is a mouseleave event and the component is sticky, do not dismiss.\n      if (\n        this.props.sticky &&\n        !(ev instanceof MouseEvent) &&\n        ev.nativeEvent instanceof MouseEvent &&\n        ev.type === 'mouseleave'\n      ) {\n        return;\n      }\n\n      this.dismiss(true);\n    }\n  };\n\n  private _setDismissedState = () => {\n    this.setState({\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover,\n    });\n  };\n\n  private _instantOpenAsExpanded = (ev: React.MouseEvent<HTMLDivElement>): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n\n    this.setState((prevState: IHoverCardState) => {\n      if (!prevState.isHoverCardVisible) {\n        return {\n          isHoverCardVisible: true,\n          mode: ExpandingCardMode.expanded,\n        };\n      }\n\n      return prevState;\n    });\n  };\n\n  private _setEventListeners = (): void => {\n    const { trapFocus, instantOpenOnClick, eventListenerTarget } = this.props;\n    const target = eventListenerTarget\n      ? this._getTargetElement(eventListenerTarget)\n      : this._getTargetElement(this.props.target);\n    const nativeEventDismiss = this._nativeDismissEvent;\n\n    // target can be undefined if ref isn't available, only assign\n    // events when defined to avoid throwing exception.\n    if (target) {\n      this._events.on(target, 'mouseenter', this._cardOpen);\n      this._events.on(target, 'mouseleave', nativeEventDismiss);\n      if (trapFocus) {\n        this._events.on(target, 'keydown', this._cardOpen);\n      } else {\n        this._events.on(target, 'focus', this._cardOpen);\n        this._events.on(target, 'blur', nativeEventDismiss);\n      }\n      if (instantOpenOnClick) {\n        this._events.on(target, 'click', this._instantOpenAsExpanded);\n      } else {\n        this._events.on(target, 'mousedown', nativeEventDismiss);\n        this._events.on(target, 'keydown', nativeEventDismiss);\n      }\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}