{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\nvar errorSanitizer = new Sanitizer();\nvar RestError = /** @class */function (_super) {\n  __extends(RestError, _super);\n  function RestError(message, code, statusCode, request, response) {\n    var _this = _super.call(this, message) || this;\n    _this.name = \"RestError\";\n    _this.code = code;\n    _this.statusCode = statusCode;\n    _this.request = request;\n    _this.response = response;\n    Object.setPrototypeOf(_this, RestError.prototype);\n    return _this;\n  }\n  /**\n   * Logging method for util.inspect in Node\n   */\n  RestError.prototype[custom] = function () {\n    return \"RestError: \" + this.message + \" \\n \" + errorSanitizer.sanitize(this);\n  };\n  RestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n  RestError.PARSE_ERROR = \"PARSE_ERROR\";\n  return RestError;\n}(Error);\nexport { RestError };","map":{"version":3,"sources":["../../src/restError.ts"],"names":[],"mappings":"AAAA;AACA;;AAIA,SAAS,MAAM,QAAQ,gBAAgB;AACvC,SAAS,SAAS,QAAQ,kBAAkB;AAE5C,IAAM,cAAc,GAAG,IAAI,SAAS,CAAA,CAAE;AAEtC,IAAA,SAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA+B,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;EAS7B,SAAA,SAAA,CACE,OAAe,EACf,IAAa,EACb,UAAmB,EACnB,OAAyB,EACzB,QAAgC,EAAA;IALlC,IAAA,KAAA,GAOE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAO,CAAC,IAAA,IAAA;IACd,KAAI,CAAC,IAAI,GAAG,WAAW;IACvB,KAAI,CAAC,IAAI,GAAG,IAAI;IAChB,KAAI,CAAC,UAAU,GAAG,UAAU;IAC5B,KAAI,CAAC,OAAO,GAAG,OAAO;IACtB,KAAI,CAAC,QAAQ,GAAG,QAAQ;IAExB,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,SAAS,CAAC,SAAS,CAAC;;EAClD;EAEA;;AAEG;EACH,SAAA,CAAA,SAAA,CAAC,MAAM,CAAC,GAAR,YAAA;IACE,OAAO,aAAA,GAAc,IAAI,CAAC,OAAO,GAAA,MAAA,GAAO,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAG;EACzE,CAAC;EA9Be,SAAA,CAAA,kBAAkB,GAAW,oBAAoB;EACjD,SAAA,CAAA,WAAW,GAAW,aAAa;EA8BrD,OAAA,SAAC;CAAA,CAhC8B,KAAK,CAAA;SAAvB,SAAS","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { WebResourceLike } from \"./webResource\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\n\nconst errorSanitizer = new Sanitizer();\n\nexport class RestError extends Error {\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  code?: string;\n  statusCode?: number;\n  request?: WebResourceLike;\n  response?: HttpOperationResponse;\n  details?: unknown;\n  constructor(\n    message: string,\n    code?: string,\n    statusCode?: number,\n    request?: WebResourceLike,\n    response?: HttpOperationResponse\n  ) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = code;\n    this.statusCode = statusCode;\n    this.request = request;\n    this.response = response;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom](): string {\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}