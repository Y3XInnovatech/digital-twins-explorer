{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport var DefaultKeepAliveOptions = {\n  enable: true\n};\nexport function keepAlivePolicy(keepAliveOptions) {\n  return {\n    create: function (nextPolicy, options) {\n      return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);\n    }\n  };\n}\n/**\n * KeepAlivePolicy is a policy used to control keep alive settings for every request.\n */\nvar KeepAlivePolicy = /** @class */function (_super) {\n  __extends(KeepAlivePolicy, _super);\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param keepAliveOptions -\n   */\n  function KeepAlivePolicy(nextPolicy, options, keepAliveOptions) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n    _this.keepAliveOptions = keepAliveOptions;\n    return _this;\n  }\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   * @returns\n   */\n  KeepAlivePolicy.prototype.sendRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        request.keepAlive = this.keepAliveOptions.enable;\n        return [2 /*return*/, this._nextPolicy.sendRequest(request)];\n      });\n    });\n  };\n  return KeepAlivePolicy;\n}(BaseRequestPolicy);\nexport { KeepAlivePolicy };","map":{"version":3,"sources":["../../../src/policies/keepAlivePolicy.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA,SACE,iBAAiB,QAIZ,iBAAiB;AAgBxB,OAAO,IAAM,uBAAuB,GAAqB;EACvD,MAAM,EAAE;CACT;AAED,OAAM,SAAU,eAAe,CAAC,gBAAmC,EAAA;EACjE,OAAO;IACL,MAAM,EAAE,SAAA,CAAC,UAAyB,EAAE,OAA6B,EAAA;MAC/D,OAAO,IAAI,eAAe,CAAC,UAAU,EAAE,OAAO,EAAE,gBAAgB,IAAI,uBAAuB,CAAC;IAC9F;GACD;AACH;AAEA;;AAEG;AACH,IAAA,eAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAqC,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;EACnC;;;;;;AAMG;EACH,SAAA,eAAA,CACE,UAAyB,EACzB,OAA6B,EACZ,gBAAkC,EAAA;IAHrD,IAAA,KAAA,GAKE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAU,EAAE,OAAO,CAAC,IAAA,IAAA;IAFT,KAAA,CAAA,gBAAgB,GAAhB,gBAAgB;;EAGnC;EAEA;;;;;AAKG;EACU,eAAA,CAAA,SAAA,CAAA,WAAW,GAAxB,UAAyB,OAAwB,EAAA;;;QAC/C,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM;QAChD,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;;;GAC7C;EACH,OAAA,eAAC;AAAD,CAAC,CA1BoC,iBAAiB,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RequestPolicyFactory\n} from \"./requestPolicy\";\nimport { WebResourceLike } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\n\n/**\n * Options for how HTTP connections should be maintained for future\n * requests.\n */\nexport interface KeepAliveOptions {\n  /*\n   * When true, connections will be kept alive for multiple requests.\n   * Defaults to true.\n   */\n  enable: boolean;\n}\n\nexport const DefaultKeepAliveOptions: KeepAliveOptions = {\n  enable: true\n};\n\nexport function keepAlivePolicy(keepAliveOptions?: KeepAliveOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);\n    }\n  };\n}\n\n/**\n * KeepAlivePolicy is a policy used to control keep alive settings for every request.\n */\nexport class KeepAlivePolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param keepAliveOptions -\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private readonly keepAliveOptions: KeepAliveOptions\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   * @returns\n   */\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    request.keepAlive = this.keepAliveOptions.enable;\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}