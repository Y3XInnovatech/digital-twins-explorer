{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nvar DelayedRender = /** @class */function (_super) {\n  __extends(DelayedRender, _super);\n  function DelayedRender(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      isRendered: false\n    };\n    return _this;\n  }\n  DelayedRender.prototype.componentDidMount = function () {\n    var _this = this;\n    var delay = this.props.delay;\n    this._timeoutId = window.setTimeout(function () {\n      _this.setState({\n        isRendered: true\n      });\n    }, delay);\n  };\n  DelayedRender.prototype.componentWillUnmount = function () {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  };\n  DelayedRender.prototype.render = function () {\n    return this.state.isRendered ? React.Children.only(this.props.children) : null;\n  };\n  DelayedRender.defaultProps = {\n    delay: 0\n  };\n  return DelayedRender;\n}(React.Component);\nexport { DelayedRender };","map":{"version":3,"sources":["DelayedRender.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AA2B9B;;;;;;;AAOG;AACH,IAAA,aAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmC,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;EAOjC,SAAA,aAAA,CAAY,KAA0B,EAAA;IAAtC,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAK,CAAC,IAAA,IAAA;IACZ,KAAI,CAAC,KAAK,GAAG;MACX,UAAU,EAAE;KACb;;EACH;EAEO,aAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACQ,IAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,KAAK;IACX,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,YAAA;MAClC,KAAI,CAAC,QAAQ,CAAC;QACZ,UAAU,EAAE;OACb,CAAC;IACJ,CAAC,EAAE,KAAK,CAAC;EACX,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,oBAAoB,GAA3B,YAAA;IACE,IAAI,IAAI,CAAC,UAAU,EAAE;MACnB,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC;IAC9B;EACH,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,GAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAA4B,GAAG,IAAI;EAC5G,CAAC;EA9Ba,aAAA,CAAA,YAAY,GAAG;IAC3B,KAAK,EAAE;GACR;EA6BH,OAAA,aAAC;CAAA,CAhCkC,KAAK,CAAC,SAAS,CAAA;SAArC,aAAa","sourcesContent":["import * as React from 'react';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}