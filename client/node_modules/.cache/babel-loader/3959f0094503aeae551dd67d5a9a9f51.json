{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/**\n * Class representing a DigitalTwinModels.\n */\nvar DigitalTwinModels = /** @class */function () {\n  /**\n   * Initialize a new instance of the class DigitalTwinModels class.\n   * @param client Reference to the service client\n   */\n  function DigitalTwinModels(client) {\n    this.client = client;\n  }\n  /**\n   * Uploads one or more models. When any error occurs, no models are uploaded.\n   * Status codes:\n   * * 201 Created\n   * * 400 Bad Request\n   *   * DTDLParserError - The models provided are not valid DTDL.\n   *   * InvalidArgument - The model id is invalid.\n   *   * LimitExceeded - The maximum number of model ids allowed in 'dependenciesFor' has been reached.\n   *   * ModelVersionNotSupported - The version of DTDL used is not supported.\n   * * 409 Conflict\n   *   * ModelAlreadyExists - The model provided already exists.\n   * @param options The options parameters.\n   */\n  DigitalTwinModels.prototype.add = function (options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      options: operationOptions\n    }, addOperationSpec);\n  };\n  /**\n   * Retrieves model metadata and, optionally, model definitions.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * LimitExceeded - The maximum number of model ids allowed in 'dependenciesFor' has been reached.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * @param options The options parameters.\n   */\n  DigitalTwinModels.prototype.list = function (options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      options: operationOptions\n    }, listOperationSpec);\n  };\n  /**\n   * Retrieves model metadata and optionally the model definition.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param options The options parameters.\n   */\n  DigitalTwinModels.prototype.getById = function (id, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      options: operationOptions\n    }, getByIdOperationSpec);\n  };\n  /**\n   * Updates the metadata for a model.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * * 409 Conflict\n   *   * ModelReferencesNotDecommissioned - The model refers to models that are not decommissioned.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param updateModel An update specification described by JSON Patch. Only the decommissioned property\n   *                    can be replaced.\n   * @param options The options parameters.\n   */\n  DigitalTwinModels.prototype.update = function (id, updateModel, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      updateModel: updateModel,\n      options: operationOptions\n    }, updateOperationSpec);\n  };\n  /**\n   * Deletes a model. A model can only be deleted if no other models reference it.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * * 409 Conflict\n   *   * ModelReferencesNotDeleted - The model refers to models that are not deleted.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param options The options parameters.\n   */\n  DigitalTwinModels.prototype.delete = function (id, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      options: operationOptions\n    }, deleteOperationSpec);\n  };\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  DigitalTwinModels.prototype.listNext = function (nextLink, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      nextLink: nextLink,\n      options: operationOptions\n    }, listNextOperationSpec);\n  };\n  return DigitalTwinModels;\n}();\nexport { DigitalTwinModels };\n// Operation Specifications\nvar serializer = new coreHttp.Serializer(Mappers, /* isXml */false);\nvar addOperationSpec = {\n  path: \"/models\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DigitalTwinsModelData\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.models,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.traceparent, Parameters.tracestate],\n  mediaType: \"json\",\n  serializer: serializer\n};\nvar listOperationSpec = {\n  path: \"/models\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PagedDigitalTwinsModelDataCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.dependenciesFor, Parameters.includeModelDefinition],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate, Parameters.maxItemsPerPage],\n  serializer: serializer\n};\nvar getByIdOperationSpec = {\n  path: \"/models/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DigitalTwinsModelData\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.includeModelDefinition],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};\nvar updateOperationSpec = {\n  path: \"/models/{id}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.updateModel,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer: serializer\n};\nvar deleteOperationSpec = {\n  path: \"/models/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};\nvar listNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PagedDigitalTwinsModelDataCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.dependenciesFor, Parameters.includeModelDefinition],\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate, Parameters.maxItemsPerPage],\n  serializer: serializer\n};","map":{"version":3,"sources":["../../../../src/generated/operations/digitalTwinModels.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;AAEH,OAAO,KAAK,QAAQ,MAAM,kBAAkB;AAC5C,OAAO,KAAK,OAAO,MAAM,mBAAmB;AAC5C,OAAO,KAAK,UAAU,MAAM,sBAAsB;AAelD;;AAEG;AACH,IAAA,iBAAA,GAAA,aAAA,YAAA;EAGE;;;AAGG;EACH,SAAA,iBAAA,CAAY,MAA4B,EAAA;IACtC,IAAI,CAAC,MAAM,GAAG,MAAM;EACtB;EAEA;;;;;;;;;;;;AAYG;EACH,iBAAA,CAAA,SAAA,CAAA,GAAG,GAAH,UACE,OAA4C,EAAA;IAE5C,IAAM,gBAAgB,GAAgC,QAAQ,CAAC,oCAAoC,CACjG,OAAO,IAAI,CAAA,CAAE,CACd;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;MAAE,OAAO,EAAE;IAAgB,CAAE,EAC7B,gBAAgB,CACwB;EAC5C,CAAC;EAED;;;;;;;;;;AAUG;EACH,iBAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,UACE,OAA6C,EAAA;IAE7C,IAAM,gBAAgB,GAAgC,QAAQ,CAAC,oCAAoC,CACjG,OAAO,IAAI,CAAA,CAAE,CACd;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;MAAE,OAAO,EAAE;IAAgB,CAAE,EAC7B,iBAAiB,CACwB;EAC7C,CAAC;EAED;;;;;;;;;;;AAWG;EACH,iBAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UACE,EAAU,EACV,OAAgD,EAAA;IAEhD,IAAM,gBAAgB,GAAgC,QAAQ,CAAC,oCAAoC,CACjG,OAAO,IAAI,CAAA,CAAE,CACd;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;MAAE,EAAE,EAAA,EAAA;MAAE,OAAO,EAAE;IAAgB,CAAE,EACjC,oBAAoB,CACwB;EAChD,CAAC;EAED;;;;;;;;;;;;;;;;AAgBG;EACH,iBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UACE,EAAU,EACV,WAAkB,EAClB,OAA+C,EAAA;IAE/C,IAAM,gBAAgB,GAAgC,QAAQ,CAAC,oCAAoC,CACjG,OAAO,IAAI,CAAA,CAAE,CACd;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;MAAE,EAAE,EAAA,EAAA;MAAE,WAAW,EAAA,WAAA;MAAE,OAAO,EAAE;IAAgB,CAAE,EAC9C,mBAAmB,CACc;EACrC,CAAC;EAED;;;;;;;;;;;;;AAaG;EACH,iBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UACE,EAAU,EACV,OAA+C,EAAA;IAE/C,IAAM,gBAAgB,GAAgC,QAAQ,CAAC,oCAAoC,CACjG,OAAO,IAAI,CAAA,CAAE,CACd;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;MAAE,EAAE,EAAA,EAAA;MAAE,OAAO,EAAE;IAAgB,CAAE,EACjC,mBAAmB,CACc;EACrC,CAAC;EAED;;;;AAIG;EACH,iBAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UACE,QAAgB,EAChB,OAAiD,EAAA;IAEjD,IAAM,gBAAgB,GAAgC,QAAQ,CAAC,oCAAoC,CACjG,OAAO,IAAI,CAAA,CAAE,CACd;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;MAAE,QAAQ,EAAA,QAAA;MAAE,OAAO,EAAE;IAAgB,CAAE,EACvC,qBAAqB,CACwB;EACjD,CAAC;EACH,OAAA,iBAAC;AAAD,CAAC,CAAA,CAAA;;AACD;AAEA,IAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,WAAY,KAAK,CAAC;AAEtE,IAAM,gBAAgB,GAA2B;EAC/C,IAAI,EAAE,SAAS;EACf,UAAU,EAAE,MAAM;EAClB,SAAS,EAAE;IACT,GAAG,EAAE;MACH,UAAU,EAAE;QACV,IAAI,EAAE;UACJ,IAAI,EAAE,UAAU;UAChB,OAAO,EAAE;YACP,IAAI,EAAE;cAAE,IAAI,EAAE,WAAW;cAAE,SAAS,EAAE;YAAuB;UAC9D;QACF;MACF;KACF;IACD,OAAO,EAAE;MACP,UAAU,EAAE,OAAO,CAAC;IACrB;GACF;EACD,WAAW,EAAE,UAAU,CAAC,MAAM;EAC9B,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;EACxC,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC;EACjC,gBAAgB,EAAE,CAChB,UAAU,CAAC,WAAW,EACtB,UAAU,CAAC,WAAW,EACtB,UAAU,CAAC,UAAU,CACtB;EACD,SAAS,EAAE,MAAM;EACjB,UAAU,EAAA;CACX;AACD,IAAM,iBAAiB,GAA2B;EAChD,IAAI,EAAE,SAAS;EACf,UAAU,EAAE,KAAK;EACjB,SAAS,EAAE;IACT,GAAG,EAAE;MACH,UAAU,EAAE,OAAO,CAAC;KACrB;IACD,OAAO,EAAE;MACP,UAAU,EAAE,OAAO,CAAC;IACrB;GACF;EACD,eAAe,EAAE,CACf,UAAU,CAAC,UAAU,EACrB,UAAU,CAAC,eAAe,EAC1B,UAAU,CAAC,sBAAsB,CAClC;EACD,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC;EACjC,gBAAgB,EAAE,CAChB,UAAU,CAAC,WAAW,EACtB,UAAU,CAAC,UAAU,EACrB,UAAU,CAAC,eAAe,CAC3B;EACD,UAAU,EAAA;CACX;AACD,IAAM,oBAAoB,GAA2B;EACnD,IAAI,EAAE,cAAc;EACpB,UAAU,EAAE,KAAK;EACjB,SAAS,EAAE;IACT,GAAG,EAAE;MACH,UAAU,EAAE,OAAO,CAAC;KACrB;IACD,OAAO,EAAE;MACP,UAAU,EAAE,OAAO,CAAC;IACrB;GACF;EACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,sBAAsB,CAAC;EAC3E,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE,CAAC;EAChD,gBAAgB,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,UAAU,CAAC;EACjE,UAAU,EAAA;CACX;AACD,IAAM,mBAAmB,GAA2B;EAClD,IAAI,EAAE,cAAc;EACpB,UAAU,EAAE,OAAO;EACnB,SAAS,EAAE;IACT,GAAG,EAAE,CAAA,CAAE;IACP,OAAO,EAAE;MACP,UAAU,EAAE,OAAO,CAAC;IACrB;GACF;EACD,WAAW,EAAE,UAAU,CAAC,WAAW;EACnC,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;EACxC,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE,CAAC;EAChD,gBAAgB,EAAE,CAChB,UAAU,CAAC,WAAW,EACtB,UAAU,CAAC,UAAU,EACrB,UAAU,CAAC,YAAY,CACxB;EACD,SAAS,EAAE,MAAM;EACjB,UAAU,EAAA;CACX;AACD,IAAM,mBAAmB,GAA2B;EAClD,IAAI,EAAE,cAAc;EACpB,UAAU,EAAE,QAAQ;EACpB,SAAS,EAAE;IACT,GAAG,EAAE,CAAA,CAAE;IACP,OAAO,EAAE;MACP,UAAU,EAAE,OAAO,CAAC;IACrB;GACF;EACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;EACxC,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE,CAAC;EAChD,gBAAgB,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,UAAU,CAAC;EACjE,UAAU,EAAA;CACX;AACD,IAAM,qBAAqB,GAA2B;EACpD,IAAI,EAAE,YAAY;EAClB,UAAU,EAAE,KAAK;EACjB,SAAS,EAAE;IACT,GAAG,EAAE;MACH,UAAU,EAAE,OAAO,CAAC;KACrB;IACD,OAAO,EAAE;MACP,UAAU,EAAE,OAAO,CAAC;IACrB;GACF;EACD,eAAe,EAAE,CACf,UAAU,CAAC,UAAU,EACrB,UAAU,CAAC,eAAe,EAC1B,UAAU,CAAC,sBAAsB,CAClC;EACD,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,QAAQ,CAAC;EACtD,gBAAgB,EAAE,CAChB,UAAU,CAAC,WAAW,EACtB,UAAU,CAAC,UAAU,EACrB,UAAU,CAAC,eAAe,CAC3B;EACD,UAAU,EAAA;CACX","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { AzureDigitalTwinsAPI } from \"../azureDigitalTwinsAPI\";\nimport {\n  DigitalTwinModelsAddOptionalParams,\n  DigitalTwinModelsAddResponse,\n  DigitalTwinModelsListOptionalParams,\n  DigitalTwinModelsListResponse,\n  DigitalTwinModelsGetByIdOptionalParams,\n  DigitalTwinModelsGetByIdResponse,\n  DigitalTwinModelsUpdateOptionalParams,\n  DigitalTwinModelsDeleteOptionalParams,\n  DigitalTwinModelsListNextOptionalParams,\n  DigitalTwinModelsListNextResponse\n} from \"../models\";\n\n/**\n * Class representing a DigitalTwinModels.\n */\nexport class DigitalTwinModels {\n  private readonly client: AzureDigitalTwinsAPI;\n\n  /**\n   * Initialize a new instance of the class DigitalTwinModels class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureDigitalTwinsAPI) {\n    this.client = client;\n  }\n\n  /**\n   * Uploads one or more models. When any error occurs, no models are uploaded.\n   * Status codes:\n   * * 201 Created\n   * * 400 Bad Request\n   *   * DTDLParserError - The models provided are not valid DTDL.\n   *   * InvalidArgument - The model id is invalid.\n   *   * LimitExceeded - The maximum number of model ids allowed in 'dependenciesFor' has been reached.\n   *   * ModelVersionNotSupported - The version of DTDL used is not supported.\n   * * 409 Conflict\n   *   * ModelAlreadyExists - The model provided already exists.\n   * @param options The options parameters.\n   */\n  add(\n    options?: DigitalTwinModelsAddOptionalParams\n  ): Promise<DigitalTwinModelsAddResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { options: operationOptions },\n      addOperationSpec\n    ) as Promise<DigitalTwinModelsAddResponse>;\n  }\n\n  /**\n   * Retrieves model metadata and, optionally, model definitions.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * LimitExceeded - The maximum number of model ids allowed in 'dependenciesFor' has been reached.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * @param options The options parameters.\n   */\n  list(\n    options?: DigitalTwinModelsListOptionalParams\n  ): Promise<DigitalTwinModelsListResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { options: operationOptions },\n      listOperationSpec\n    ) as Promise<DigitalTwinModelsListResponse>;\n  }\n\n  /**\n   * Retrieves model metadata and optionally the model definition.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param options The options parameters.\n   */\n  getById(\n    id: string,\n    options?: DigitalTwinModelsGetByIdOptionalParams\n  ): Promise<DigitalTwinModelsGetByIdResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      getByIdOperationSpec\n    ) as Promise<DigitalTwinModelsGetByIdResponse>;\n  }\n\n  /**\n   * Updates the metadata for a model.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * * 409 Conflict\n   *   * ModelReferencesNotDecommissioned - The model refers to models that are not decommissioned.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param updateModel An update specification described by JSON Patch. Only the decommissioned property\n   *                    can be replaced.\n   * @param options The options parameters.\n   */\n  update(\n    id: string,\n    updateModel: any[],\n    options?: DigitalTwinModelsUpdateOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, updateModel, options: operationOptions },\n      updateOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Deletes a model. A model can only be deleted if no other models reference it.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * * 409 Conflict\n   *   * ModelReferencesNotDeleted - The model refers to models that are not deleted.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param options The options parameters.\n   */\n  delete(\n    id: string,\n    options?: DigitalTwinModelsDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  listNext(\n    nextLink: string,\n    options?: DigitalTwinModelsListNextOptionalParams\n  ): Promise<DigitalTwinModelsListNextResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { nextLink, options: operationOptions },\n      listNextOperationSpec\n    ) as Promise<DigitalTwinModelsListNextResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst addOperationSpec: coreHttp.OperationSpec = {\n  path: \"/models\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"DigitalTwinsModelData\" }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.models,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst listOperationSpec: coreHttp.OperationSpec = {\n  path: \"/models\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PagedDigitalTwinsModelDataCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.dependenciesFor,\n    Parameters.includeModelDefinition\n  ],\n  urlParameters: [Parameters.$host],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.maxItemsPerPage\n  ],\n  serializer\n};\nconst getByIdOperationSpec: coreHttp.OperationSpec = {\n  path: \"/models/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DigitalTwinsModelData\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.includeModelDefinition],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst updateOperationSpec: coreHttp.OperationSpec = {\n  path: \"/models/{id}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.updateModel,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.contentType1\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/models/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst listNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PagedDigitalTwinsModelDataCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.dependenciesFor,\n    Parameters.includeModelDefinition\n  ],\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.maxItemsPerPage\n  ],\n  serializer\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}