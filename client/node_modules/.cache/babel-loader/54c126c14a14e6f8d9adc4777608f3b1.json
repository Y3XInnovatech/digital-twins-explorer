{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Customizations, getWindow } from '@uifabric/utilities';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { createTheme } from '@fluentui/theme/lib/createTheme';\nexport { createTheme } from '@fluentui/theme/lib/createTheme';\nvar _theme = createTheme({});\nvar _onThemeChangeCallbacks = [];\nexport var ThemeSettingName = 'theme';\nexport function initializeThemeInCustomizations() {\n  var _a;\n  var _b, _c;\n  if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var win = getWindow();\n    if ((_c = (_b = win) === null || _b === void 0 ? void 0 : _b.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    }\n    // Set the default theme.\n    Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n  }\n}\ninitializeThemeInCustomizations();\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function getTheme(depComments) {\n  if (depComments === void 0) {\n    depComments = false;\n  }\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n  return _theme;\n}\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nexport function registerOnThemeChangeCallback(callback) {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nexport function removeOnThemeChangeCallback(callback) {\n  var i = _onThemeChangeCallbacks.indexOf(callback);\n  if (i === -1) {\n    return;\n  }\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function loadTheme(theme, depComments) {\n  var _a;\n  if (depComments === void 0) {\n    depComments = false;\n  }\n  _theme = createTheme(theme, depComments);\n  // Invoke the legacy method of theming the page as well.\n  legacyLoadTheme(__assign(__assign(__assign(__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));\n  Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n  _onThemeChangeCallbacks.forEach(function (callback) {\n    try {\n      callback(_theme);\n    } catch (e) {\n      // don't let a bad callback break everything else\n    }\n  });\n  return _theme;\n}\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme) {\n  var lines = {};\n  for (var _i = 0, _a = Object.keys(theme.fonts); _i < _a.length; _i++) {\n    var fontName = _a[_i];\n    var font = theme.fonts[fontName];\n    for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {\n      var propName = _c[_b];\n      var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      var value = font[propName];\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n      lines[name_1] = value;\n    }\n  }\n  return lines;\n}","map":{"version":3,"sources":["styles/theme.ts"],"names":[],"mappings":"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","sourcesContent":["import { Customizations, getWindow } from '@uifabric/utilities';\nimport { ITheme, IPartialTheme, IFontStyles } from '../interfaces/index';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { IRawStyle } from '@uifabric/merge-styles';\nimport { createTheme } from '@fluentui/theme/lib/createTheme';\n\nexport { createTheme } from '@fluentui/theme/lib/createTheme';\n\nlet _theme: ITheme = createTheme({});\nlet _onThemeChangeCallbacks: Array<(theme: ITheme) => void> = [];\n\nexport const ThemeSettingName = 'theme';\n\nexport function initializeThemeInCustomizations(): void {\n  if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const win: any = getWindow();\n\n    if (win?.FabricConfig?.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    }\n\n    // Set the default theme.\n    Customizations.applySettings({ [ThemeSettingName]: _theme });\n  }\n}\n\ninitializeThemeInCustomizations();\n\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function getTheme(depComments: boolean = false): ITheme {\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n  return _theme;\n}\n\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nexport function registerOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nexport function removeOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  const i = _onThemeChangeCallbacks.indexOf(callback);\n  if (i === -1) {\n    return;\n  }\n\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function loadTheme(theme: IPartialTheme, depComments: boolean = false): ITheme {\n  _theme = createTheme(theme, depComments);\n\n  // Invoke the legacy method of theming the page as well.\n  legacyLoadTheme({ ..._theme.palette, ..._theme.semanticColors, ..._theme.effects, ..._loadFonts(_theme) });\n\n  Customizations.applySettings({ [ThemeSettingName]: _theme });\n\n  _onThemeChangeCallbacks.forEach((callback: (theme: ITheme) => void) => {\n    try {\n      callback(_theme);\n    } catch (e) {\n      // don't let a bad callback break everything else\n    }\n  });\n\n  return _theme;\n}\n\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme: ITheme): { [name: string]: string } {\n  const lines: { [key: string]: string } = {};\n\n  for (const fontName of Object.keys(theme.fonts)) {\n    const font: IRawStyle = theme.fonts[fontName as keyof IFontStyles];\n\n    for (const propName of Object.keys(font)) {\n      const name: string = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      let value = font[propName as keyof IRawStyle] as string;\n\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n      lines[name] = value;\n    }\n  }\n  return lines;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}