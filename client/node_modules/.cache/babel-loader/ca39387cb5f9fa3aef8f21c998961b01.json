{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function rpRegistrationPolicy(retryTimeout) {\n  if (retryTimeout === void 0) {\n    retryTimeout = 30;\n  }\n  return {\n    create: function (nextPolicy, options) {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\nvar RPRegistrationPolicy = /** @class */function (_super) {\n  __extends(RPRegistrationPolicy, _super);\n  function RPRegistrationPolicy(nextPolicy, options, _retryTimeout) {\n    if (_retryTimeout === void 0) {\n      _retryTimeout = 30;\n    }\n    var _this = _super.call(this, nextPolicy, options) || this;\n    _this._retryTimeout = _retryTimeout;\n    return _this;\n  }\n  RPRegistrationPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n    return this._nextPolicy.sendRequest(request.clone()).then(function (response) {\n      return registerIfNeeded(_this, request, response);\n    });\n  };\n  return RPRegistrationPolicy;\n}(BaseRequestPolicy);\nexport { RPRegistrationPolicy };\nfunction registerIfNeeded(policy, request, response) {\n  if (response.status === 409) {\n    var rpName = checkRPNotRegisteredError(response.bodyAsText);\n    if (rpName) {\n      var urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request)\n      // Autoregistration of ${provider} failed for some reason. We will not return this error\n      // instead will return the initial response with 409 status code back to the user.\n      // do nothing here as we are returning the original response at the end of this method.\n      .catch(function () {\n        return false;\n      }).then(function (registrationStatus) {\n        if (registrationStatus) {\n          // Retry the original request. We have to change the x-ms-client-request-id\n          // otherwise Azure endpoint will return the initial 409 (cached) response.\n          request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n          return policy._nextPolicy.sendRequest(request.clone());\n        }\n        return response;\n      });\n    }\n  }\n  return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest, reuseUrlToo) {\n  if (reuseUrlToo === void 0) {\n    reuseUrlToo = false;\n  }\n  var reqOptions = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body) {\n  var result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      var matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url) {\n  var result;\n  var matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(\"Unable to extract subscriptionId from the given url - \" + url + \".\");\n  }\n  return result;\n}\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param callback - The callback that handles the RP registration\n */\nfunction registerRP(policy, urlPrefix, provider, originalRequest) {\n  var postUrl = urlPrefix + \"providers/\" + provider + \"/register?api-version=2016-02-01\";\n  var getUrl = urlPrefix + \"providers/\" + provider + \"?api-version=2016-02-01\";\n  var reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n  return policy._nextPolicy.sendRequest(reqOptions).then(function (response) {\n    if (response.status !== 200) {\n      throw new Error(\"Autoregistration of \" + provider + \" failed. Please try registering manually.\");\n    }\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nfunction getRegistrationStatus(policy, url, originalRequest) {\n  var reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n  return policy._nextPolicy.sendRequest(reqOptions).then(function (res) {\n    var obj = res.parsedBody;\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils.delay(policy._retryTimeout * 1000).then(function () {\n        return getRegistrationStatus(policy, url, originalRequest);\n      });\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/policies/rpRegistrationPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    readonly _retryTimeout = 30\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => registerIfNeeded(this, request, response));\n  }\n}\n\nfunction registerIfNeeded(\n  policy: RPRegistrationPolicy,\n  request: WebResourceLike,\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return (\n        registerRP(policy, urlPrefix, rpName, request)\n          // Autoregistration of ${provider} failed for some reason. We will not return this error\n          // instead will return the initial response with 409 status code back to the user.\n          // do nothing here as we are returning the original response at the end of this method.\n          .catch(() => false)\n          .then((registrationStatus) => {\n            if (registrationStatus) {\n              // Retry the original request. We have to change the x-ms-client-request-id\n              // otherwise Azure endpoint will return the initial 409 (cached) response.\n              request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n              return policy._nextPolicy.sendRequest(request.clone());\n            }\n            return response;\n          })\n      );\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(\n  originalRequest: WebResourceLike,\n  reuseUrlToo = false\n): WebResourceLike {\n  const reqOptions: WebResourceLike = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (\n      responseBody &&\n      responseBody.error &&\n      responseBody.error.message &&\n      responseBody.error.code &&\n      responseBody.error.code === \"MissingSubscriptionRegistration\"\n    ) {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param callback - The callback that handles the RP registration\n */\nfunction registerRP(\n  policy: RPRegistrationPolicy,\n  urlPrefix: string,\n  provider: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  return policy._nextPolicy.sendRequest(reqOptions).then((response) => {\n    if (response.status !== 200) {\n      throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n    }\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nfunction getRegistrationStatus(\n  policy: RPRegistrationPolicy,\n  url: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  return policy._nextPolicy.sendRequest(reqOptions).then((res) => {\n    const obj = res.parsedBody as any;\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils\n        .delay(policy._retryTimeout * 1000)\n        .then(() => getRegistrationStatus(policy, url, originalRequest));\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}