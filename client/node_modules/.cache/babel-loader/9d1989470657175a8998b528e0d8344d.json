{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, css } from '../../../Utilities';\nimport { SuggestionsItem } from '../../../Pickers';\nimport * as stylesImport from './SuggestionsCore.scss';\nvar styles = stylesImport;\n/**\n * Class when used with SuggestionsStore, renders a basic suggestions control\n */\nvar SuggestionsCore = /** @class */function (_super) {\n  __extends(SuggestionsCore, _super);\n  function SuggestionsCore(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n    _this._selectedElement = React.createRef();\n    _this.SuggestionsItemOfProperType = SuggestionsItem;\n    _this._onClickTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        _this.props.onSuggestionClick(ev, item, index);\n      };\n    };\n    _this._onRemoveTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        var onSuggestionRemove = _this.props.onSuggestionRemove;\n        onSuggestionRemove(ev, item, index);\n        ev.stopPropagation();\n      };\n    };\n    initializeComponentRef(_this);\n    _this.currentIndex = -1;\n    return _this;\n  }\n  /**\n   * Increments the selected suggestion index\n   */\n  SuggestionsCore.prototype.nextSuggestion = function () {\n    var suggestions = this.props.suggestions;\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      } else if (this.currentIndex < suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Decrements the selected suggestion index\n   */\n  SuggestionsCore.prototype.previousSuggestion = function () {\n    var suggestions = this.props.suggestions;\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      } else if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === 0) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      }\n    }\n    return false;\n  };\n  Object.defineProperty(SuggestionsCore.prototype, \"selectedElement\", {\n    get: function () {\n      return this._selectedElement.current || undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  SuggestionsCore.prototype.getCurrentItem = function () {\n    return this.props.suggestions[this.currentIndex];\n  };\n  SuggestionsCore.prototype.getSuggestionAtIndex = function (index) {\n    return this.props.suggestions[index];\n  };\n  SuggestionsCore.prototype.hasSuggestionSelected = function () {\n    return this.currentIndex !== -1 && this.currentIndex < this.props.suggestions.length;\n  };\n  SuggestionsCore.prototype.removeSuggestion = function (index) {\n    this.props.suggestions.splice(index, 1);\n  };\n  SuggestionsCore.prototype.deselectAllSuggestions = function () {\n    if (this.currentIndex > -1 && this.props.suggestions[this.currentIndex]) {\n      this.props.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n      this.forceUpdate();\n    }\n  };\n  SuggestionsCore.prototype.setSelectedSuggestion = function (index) {\n    var suggestions = this.props.suggestions;\n    if (index > suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion.selected = false;\n      this.currentSuggestion = suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1 && suggestions[this.currentIndex]) {\n        suggestions[this.currentIndex].selected = false;\n      }\n      suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = suggestions[index];\n    }\n    this.forceUpdate();\n  };\n  SuggestionsCore.prototype.componentDidUpdate = function () {\n    this.scrollSelected();\n  };\n  SuggestionsCore.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      onRenderSuggestion = _a.onRenderSuggestion,\n      suggestionsItemClassName = _a.suggestionsItemClassName,\n      resultsMaximumNumber = _a.resultsMaximumNumber,\n      showRemoveButtons = _a.showRemoveButtons,\n      suggestionsContainerAriaLabel = _a.suggestionsContainerAriaLabel;\n    var TypedSuggestionsItem = this.SuggestionsItemOfProperType;\n    var suggestions = this.props.suggestions;\n    if (resultsMaximumNumber) {\n      suggestions = suggestions.slice(0, resultsMaximumNumber);\n    }\n    return React.createElement(\"div\", {\n      className: css('ms-Suggestions-container', styles.suggestionsContainer),\n      id: \"suggestion-list\",\n      role: \"list\",\n      \"aria-label\": suggestionsContainerAriaLabel\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: suggestion.selected || index === _this.currentIndex ? _this._selectedElement : undefined,\n        key: suggestion.item.key ? suggestion.item.key : index,\n        id: 'sug-' + index,\n        role: \"listitem\",\n        \"aria-label\": suggestion.ariaLabel\n      }, React.createElement(TypedSuggestionsItem, {\n        id: 'sug-item' + index,\n        suggestionModel: suggestion,\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index),\n        isSelectedOverride: index === _this.currentIndex\n      }));\n    }));\n  };\n  // TODO get the element to scroll into view properly regardless of direction.\n  SuggestionsCore.prototype.scrollSelected = function () {\n    var _a;\n    if (((_a = this._selectedElement.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView) !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  };\n  return SuggestionsCore;\n}(React.Component);\nexport { SuggestionsCore };","map":{"version":3,"sources":["components/FloatingPicker/Suggestions/SuggestionsCore.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, css } from '../../../Utilities';\nimport { ISuggestionItemProps, SuggestionsItem, ISuggestionModel } from '../../../Pickers';\nimport { ISuggestionsCoreProps } from './Suggestions.types';\nimport * as stylesImport from './SuggestionsCore.scss';\nconst styles: any = stylesImport;\n\n/**\n * Class when used with SuggestionsStore, renders a basic suggestions control\n */\nexport class SuggestionsCore<T> extends React.Component<ISuggestionsCoreProps<T>, {}> {\n  public currentIndex: number;\n  public currentSuggestion: ISuggestionModel<T> | undefined;\n  protected _selectedElement = React.createRef<HTMLDivElement>();\n  private SuggestionsItemOfProperType: new (props: ISuggestionItemProps<T>) => SuggestionsItem<T> = SuggestionsItem;\n\n  constructor(suggestionsProps: ISuggestionsCoreProps<T>) {\n    super(suggestionsProps);\n\n    initializeComponentRef(this);\n    this.currentIndex = -1;\n  }\n\n  /**\n   * Increments the selected suggestion index\n   */\n  public nextSuggestion(): boolean {\n    const { suggestions } = this.props;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      } else if (this.currentIndex < suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrements the selected suggestion index\n   */\n  public previousSuggestion(): boolean {\n    const { suggestions } = this.props;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      } else if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === 0) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public get selectedElement(): HTMLDivElement | undefined {\n    return this._selectedElement.current || undefined;\n  }\n\n  public getCurrentItem(): ISuggestionModel<T> {\n    return this.props.suggestions[this.currentIndex];\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.props.suggestions[index];\n  }\n\n  public hasSuggestionSelected(): boolean {\n    return this.currentIndex !== -1 && this.currentIndex < this.props.suggestions.length;\n  }\n\n  public removeSuggestion(index: number): void {\n    this.props.suggestions.splice(index, 1);\n  }\n\n  public deselectAllSuggestions(): void {\n    if (this.currentIndex > -1 && this.props.suggestions[this.currentIndex]) {\n      this.props.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n      this.forceUpdate();\n    }\n  }\n\n  public setSelectedSuggestion(index: number): void {\n    const { suggestions } = this.props;\n\n    if (index > suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion!.selected = false;\n      this.currentSuggestion = suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1 && suggestions[this.currentIndex]) {\n        suggestions[this.currentIndex].selected = false;\n      }\n      suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = suggestions[index];\n    }\n\n    this.forceUpdate();\n  }\n\n  public componentDidUpdate(): void {\n    this.scrollSelected();\n  }\n\n  public render(): JSX.Element {\n    const {\n      onRenderSuggestion,\n      suggestionsItemClassName,\n      resultsMaximumNumber,\n      showRemoveButtons,\n      suggestionsContainerAriaLabel,\n    } = this.props;\n    const TypedSuggestionsItem = this.SuggestionsItemOfProperType;\n    let { suggestions } = this.props;\n\n    if (resultsMaximumNumber) {\n      suggestions = suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    return (\n      <div\n        className={css('ms-Suggestions-container', styles.suggestionsContainer)}\n        id=\"suggestion-list\"\n        role=\"list\"\n        aria-label={suggestionsContainerAriaLabel}\n      >\n        {suggestions.map((suggestion: ISuggestionModel<T>, index: number) => (\n          <div\n            ref={suggestion.selected || index === this.currentIndex ? this._selectedElement : undefined}\n            key={(suggestion.item as any).key ? (suggestion.item as any).key : index}\n            id={'sug-' + index}\n            role=\"listitem\"\n            aria-label={suggestion.ariaLabel}\n          >\n            <TypedSuggestionsItem\n              id={'sug-item' + index}\n              suggestionModel={suggestion}\n              RenderSuggestion={onRenderSuggestion as any}\n              onClick={this._onClickTypedSuggestionsItem(suggestion.item, index)}\n              className={suggestionsItemClassName}\n              showRemoveButton={showRemoveButtons}\n              onRemoveItem={this._onRemoveTypedSuggestionsItem(suggestion.item, index)}\n              isSelectedOverride={index === this.currentIndex}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  // TODO get the element to scroll into view properly regardless of direction.\n  public scrollSelected(): void {\n    if (this._selectedElement.current?.scrollIntoView !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  }\n\n  private _onClickTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  private _onRemoveTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      const onSuggestionRemove = this.props.onSuggestionRemove!;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}