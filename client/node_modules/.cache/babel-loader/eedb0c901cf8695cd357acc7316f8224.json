{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TraceAPI = void 0;\nvar NoopTracerProvider_1 = require(\"../trace/NoopTracerProvider\");\nvar global_utils_1 = require(\"./global-utils\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function TraceAPI() {}\n  /** Get the singleton instance of the Trace API */\n  TraceAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current global tracer. Returns the initialized global tracer provider\n   */\n  TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n    if (global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY]) {\n      // global tracer provider has already been set\n      return this.getTracerProvider();\n    }\n    global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopTracerProvider_1.NOOP_TRACER_PROVIDER);\n    return this.getTracerProvider();\n  };\n  /**\n   * Returns the global tracer provider.\n   */\n  TraceAPI.prototype.getTracerProvider = function () {\n    var _a, _b;\n    return (_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopTracerProvider_1.NOOP_TRACER_PROVIDER;\n  };\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  TraceAPI.prototype.getTracer = function (name, version) {\n    return this.getTracerProvider().getTracer(name, version);\n  };\n  /** Remove the global tracer provider */\n  TraceAPI.prototype.disable = function () {\n    delete global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY];\n  };\n  return TraceAPI;\n}();\nexports.TraceAPI = TraceAPI;","map":{"version":3,"sources":["../../../src/api/trace.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;;AAEH,IAAA,oBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;AAGA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAOA;;AAEG;AACH,IAAA,QAAA,GAAA,aAAA,YAAA;EAGE;EACA,SAAA,QAAA,CAAA,EAAA,CAAuB;EAEvB;EACc,QAAA,CAAA,WAAW,GAAzB,YAAA;IACE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;MACnB,IAAI,CAAC,SAAS,GAAG,IAAI,QAAQ,CAAA,CAAE;IAChC;IAED,OAAO,IAAI,CAAC,SAAS;EACvB,CAAC;EAED;;AAEG;EACI,QAAA,CAAA,SAAA,CAAA,uBAAuB,GAA9B,UAA+B,QAAwB,EAAA;IACrD,IAAI,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,oBAAoB,CAAC,EAAE;MACjC;MACA,OAAO,IAAI,CAAC,iBAAiB,CAAA,CAAE;IAChC;IAED,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,oBAAoB,CAAC,GAAG,cAAA,CAAA,UAAU,CACxC,cAAA,CAAA,mCAAmC,EACnC,QAAQ,EACR,oBAAA,CAAA,oBAAoB,CACrB;IAED,OAAO,IAAI,CAAC,iBAAiB,CAAA,CAAE;EACjC,CAAC;EAED;;AAEG;EACI,QAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,YAAA;;IACE,OAAO,CAAA,EAAA,GAAA,CAAA,EAAA,GACL,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,oBAAoB,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAA7B,cAAA,CAAA,OAAO,EAAyB,cAAA,CAAA,mCAAmC,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GACnE,oBAAA,CAAA,oBAAoB;EAExB,CAAC;EAED;;AAEG;EACI,QAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UAAiB,IAAY,EAAE,OAAgB,EAAA;IAC7C,OAAO,IAAI,CAAC,iBAAiB,CAAA,CAAE,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC;EAC1D,CAAC;EAED;EACO,QAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IACE,OAAO,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,oBAAoB,CAAC;EACtC,CAAC;EACH,OAAA,QAAC;AAAD,CAAC,CAAA,CAAA;AAtDY,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceAPI = void 0;\nvar NoopTracerProvider_1 = require(\"../trace/NoopTracerProvider\");\nvar global_utils_1 = require(\"./global-utils\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer. Returns the initialized global tracer provider\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        if (global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY]) {\n            // global tracer provider has already been set\n            return this.getTracerProvider();\n        }\n        global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopTracerProvider_1.NOOP_TRACER_PROVIDER);\n        return this.getTracerProvider();\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        var _a, _b;\n        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopTracerProvider_1.NOOP_TRACER_PROVIDER);\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        delete global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY];\n    };\n    return TraceAPI;\n}());\nexports.TraceAPI = TraceAPI;\n//# sourceMappingURL=trace.js.map"]},"metadata":{},"sourceType":"script"}