{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Selection } from '../../Selection';\nimport { initializeComponentRef } from '../../Utilities';\nvar BaseSelectedItemsList = /** @class */function (_super) {\n  __extends(BaseSelectedItemsList, _super);\n  function BaseSelectedItemsList(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n    _this.addItems = function (items) {\n      var processedItems = _this.props.onItemSelected ? _this.props.onItemSelected(items) : items;\n      var processedItemObjects = processedItems;\n      var processedItemPromiseLikes = processedItems;\n      if (processedItemPromiseLikes && processedItemPromiseLikes.then) {\n        processedItemPromiseLikes.then(function (resolvedProcessedItems) {\n          var newItems = _this.state.items.concat(resolvedProcessedItems);\n          _this.updateItems(newItems);\n        });\n      } else {\n        var newItems = _this.state.items.concat(processedItemObjects);\n        _this.updateItems(newItems);\n      }\n    };\n    _this.removeItemAt = function (index) {\n      var items = _this.state.items;\n      if (_this._canRemoveItem(items[index])) {\n        if (index > -1) {\n          if (_this.props.onItemsDeleted) {\n            _this.props.onItemsDeleted([items[index]]);\n          }\n          var newItems = items.slice(0, index).concat(items.slice(index + 1));\n          _this.updateItems(newItems);\n        }\n      }\n    };\n    _this.removeItem = function (item) {\n      var items = _this.state.items;\n      var index = items.indexOf(item);\n      _this.removeItemAt(index);\n    };\n    _this.replaceItem = function (itemToReplace, itemsToReplaceWith) {\n      var items = _this.state.items;\n      var index = items.indexOf(itemToReplace);\n      if (index > -1) {\n        var newItems = items.slice(0, index).concat(itemsToReplaceWith).concat(items.slice(index + 1));\n        _this.updateItems(newItems);\n      }\n    };\n    _this.removeItems = function (itemsToRemove) {\n      var items = _this.state.items;\n      var itemsCanRemove = itemsToRemove.filter(function (item) {\n        return _this._canRemoveItem(item);\n      });\n      var newItems = items.filter(function (item) {\n        return itemsCanRemove.indexOf(item) === -1;\n      });\n      var firstItemToRemove = itemsCanRemove[0];\n      var index = items.indexOf(firstItemToRemove);\n      if (_this.props.onItemsDeleted) {\n        _this.props.onItemsDeleted(itemsCanRemove);\n      }\n      _this.updateItems(newItems, index);\n    };\n    _this.onCopy = function (ev) {\n      if (_this.props.onCopyItems && _this.selection.getSelectedCount() > 0) {\n        var selectedItems = _this.selection.getSelection();\n        _this.copyItems(selectedItems);\n      }\n    };\n    _this.renderItems = function () {\n      var removeButtonAriaLabel = _this.props.removeButtonAriaLabel;\n      var onRenderItem = _this.props.onRenderItem;\n      var items = _this.state.items;\n      return items.map(function (item, index) {\n        return onRenderItem({\n          item: item,\n          index: index,\n          key: item.key ? item.key : index,\n          selected: _this.selection.isIndexSelected(index),\n          onRemoveItem: function () {\n            return _this.removeItem(item);\n          },\n          onItemChange: _this.onItemChange,\n          removeButtonAriaLabel: removeButtonAriaLabel,\n          onCopyItem: function (itemToCopy) {\n            return _this.copyItems([itemToCopy]);\n          }\n        });\n      });\n    };\n    _this.onSelectionChanged = function () {\n      _this.forceUpdate();\n    };\n    _this.onItemChange = function (changedItem, index) {\n      var items = _this.state.items;\n      if (index >= 0) {\n        var newItems = items;\n        newItems[index] = changedItem;\n        _this.updateItems(newItems);\n      }\n    };\n    initializeComponentRef(_this);\n    var items = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    _this.state = {\n      items: items\n    };\n    // Create a new selection if one is not specified\n    _this.selection = _this.props.selection ? _this.props.selection : new Selection({\n      onSelectionChanged: _this.onSelectionChanged\n    });\n    return _this;\n  }\n  Object.defineProperty(BaseSelectedItemsList.prototype, \"items\", {\n    get: function () {\n      return this.state.items;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BaseSelectedItemsList.prototype.removeSelectedItems = function () {\n    if (this.state.items.length && this.selection.getSelectedCount() > 0) {\n      this.removeItems(this.selection.getSelection());\n    }\n  };\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If selectedItems is provided, this will act as a controlled component and will not update its own state.\n   */\n  BaseSelectedItemsList.prototype.updateItems = function (items, focusIndex) {\n    var _this = this;\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to pass the new props\n      this.onChange(items);\n    } else {\n      this.setState({\n        items: items\n      }, function () {\n        _this._onSelectedItemsUpdated(items, focusIndex);\n      });\n    }\n  };\n  BaseSelectedItemsList.prototype.hasSelectedItems = function () {\n    return this.selection.getSelectedCount() > 0;\n  };\n  BaseSelectedItemsList.prototype.unselectAll = function () {\n    this.selection.setAllSelected(false);\n  };\n  BaseSelectedItemsList.prototype.highlightedItems = function () {\n    return this.selection.getSelection();\n  };\n  BaseSelectedItemsList.prototype.UNSAFE_componentWillUpdate = function (newProps, newState) {\n    if (newState.items && newState.items !== this.state.items) {\n      this.selection.setItems(newState.items);\n    }\n  };\n  BaseSelectedItemsList.prototype.componentDidMount = function () {\n    this.selection.setItems(this.state.items);\n  };\n  BaseSelectedItemsList.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    var newItems = newProps.selectedItems;\n    if (newItems) {\n      this.setState({\n        items: newItems\n      });\n    }\n    if (newProps.selection) {\n      this.selection = newProps.selection;\n    }\n  };\n  BaseSelectedItemsList.prototype.render = function () {\n    return this.renderItems();\n  };\n  BaseSelectedItemsList.prototype.onChange = function (items) {\n    if (this.props.onChange) {\n      this.props.onChange(items);\n    }\n  };\n  BaseSelectedItemsList.prototype.copyItems = function (items) {\n    if (this.props.onCopyItems) {\n      var copyText = this.props.onCopyItems(items);\n      var copyInput = document.createElement('input');\n      document.body.appendChild(copyInput);\n      try {\n        // Try to copy the text directly to the clipboard\n        copyInput.value = copyText;\n        copyInput.select();\n        if (!document.execCommand('copy')) {\n          // The command failed. Fallback to the method below.\n          throw new Error();\n        }\n      } catch (err) {\n        // no op\n      } finally {\n        document.body.removeChild(copyInput);\n      }\n    }\n  };\n  BaseSelectedItemsList.prototype._onSelectedItemsUpdated = function (items, focusIndex) {\n    this.onChange(items);\n  };\n  BaseSelectedItemsList.prototype._canRemoveItem = function (item) {\n    return !this.props.canRemoveItem || this.props.canRemoveItem(item);\n  };\n  return BaseSelectedItemsList;\n}(React.Component);\nexport { BaseSelectedItemsList };","map":{"version":3,"sources":["components/SelectedItemsList/BaseSelectedItemsList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Selection } from '../../Selection';\n\nimport { IBaseSelectedItemsList, IBaseSelectedItemsListProps, ISelectedItemProps } from './BaseSelectedItemsList.types';\nimport { initializeComponentRef } from '../../Utilities';\n\nexport interface IBaseSelectedItemsListState<T = any> {\n  items: T[];\n}\n\nexport class BaseSelectedItemsList<T, P extends IBaseSelectedItemsListProps<T>>\n  extends React.Component<P, IBaseSelectedItemsListState<T>>\n  implements IBaseSelectedItemsList<T> {\n  protected root: HTMLElement;\n  protected selection: Selection;\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    const items: T[] = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    this.state = {\n      items: items,\n    };\n\n    // Create a new selection if one is not specified\n    this.selection = this.props.selection\n      ? (this.props.selection as Selection)\n      : new Selection({ onSelectionChanged: this.onSelectionChanged });\n  }\n\n  public get items(): T[] {\n    return this.state.items;\n  }\n\n  public addItems = (items: T[]): void => {\n    const processedItems: T[] | PromiseLike<T[]> = this.props.onItemSelected\n      ? (this.props.onItemSelected as any)(items)\n      : items;\n\n    const processedItemObjects: T[] = processedItems as T[];\n    const processedItemPromiseLikes: PromiseLike<T[]> = processedItems as PromiseLike<T[]>;\n\n    if (processedItemPromiseLikes && processedItemPromiseLikes.then) {\n      processedItemPromiseLikes.then((resolvedProcessedItems: T[]) => {\n        const newItems: T[] = this.state.items.concat(resolvedProcessedItems);\n        this.updateItems(newItems);\n      });\n    } else {\n      const newItems: T[] = this.state.items.concat(processedItemObjects);\n      this.updateItems(newItems);\n    }\n  };\n\n  public removeItemAt = (index: number): void => {\n    const { items } = this.state;\n\n    if (this._canRemoveItem(items[index])) {\n      if (index > -1) {\n        if (this.props.onItemsDeleted) {\n          (this.props.onItemsDeleted as (item: T[]) => void)([items[index]]);\n        }\n\n        const newItems = items.slice(0, index).concat(items.slice(index + 1));\n        this.updateItems(newItems);\n      }\n    }\n  };\n\n  public removeItem = (item: T): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(item);\n\n    this.removeItemAt(index);\n  };\n\n  public replaceItem = (itemToReplace: T, itemsToReplaceWith: T[]): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(itemToReplace);\n    if (index > -1) {\n      const newItems = items\n        .slice(0, index)\n        .concat(itemsToReplaceWith)\n        .concat(items.slice(index + 1));\n      this.updateItems(newItems);\n    }\n  };\n\n  public removeItems = (itemsToRemove: any[]): void => {\n    const { items } = this.state;\n    const itemsCanRemove = itemsToRemove.filter((item: any) => this._canRemoveItem(item));\n    const newItems: T[] = items.filter((item: any) => itemsCanRemove.indexOf(item) === -1);\n    const firstItemToRemove = itemsCanRemove[0];\n    const index: number = items.indexOf(firstItemToRemove);\n\n    if (this.props.onItemsDeleted) {\n      (this.props.onItemsDeleted as (item: T[]) => void)(itemsCanRemove);\n    }\n\n    this.updateItems(newItems, index);\n  };\n\n  public removeSelectedItems(): void {\n    if (this.state.items.length && this.selection.getSelectedCount() > 0) {\n      this.removeItems(this.selection.getSelection());\n    }\n  }\n\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If selectedItems is provided, this will act as a controlled component and will not update its own state.\n   */\n  public updateItems(items: T[], focusIndex?: number): void {\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to pass the new props\n      this.onChange(items);\n    } else {\n      this.setState({ items: items }, () => {\n        this._onSelectedItemsUpdated(items, focusIndex);\n      });\n    }\n  }\n\n  public onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\n    if (this.props.onCopyItems && this.selection.getSelectedCount() > 0) {\n      const selectedItems: T[] = this.selection.getSelection() as T[];\n      this.copyItems(selectedItems);\n    }\n  };\n\n  public hasSelectedItems(): boolean {\n    return this.selection.getSelectedCount() > 0;\n  }\n\n  public unselectAll(): void {\n    this.selection.setAllSelected(false);\n  }\n\n  public highlightedItems(): T[] {\n    return this.selection.getSelection() as T[];\n  }\n\n  public UNSAFE_componentWillUpdate(newProps: P, newState: IBaseSelectedItemsListState): void {\n    if (newState.items && newState.items !== this.state.items) {\n      this.selection.setItems(newState.items);\n    }\n  }\n\n  public componentDidMount(): void {\n    this.selection.setItems(this.state.items);\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: P): void {\n    const newItems = newProps.selectedItems;\n\n    if (newItems) {\n      this.setState({ items: newItems });\n    }\n\n    if (newProps.selection) {\n      this.selection = newProps.selection;\n    }\n  }\n\n  public render(): any {\n    return this.renderItems();\n  }\n\n  protected renderItems = (): JSX.Element[] => {\n    const { removeButtonAriaLabel } = this.props;\n    const onRenderItem = this.props.onRenderItem as (props: ISelectedItemProps<T>) => JSX.Element;\n\n    const { items } = this.state;\n    return items.map((item: any, index: number) =>\n      onRenderItem({\n        item,\n        index,\n        key: item.key ? item.key : index,\n        selected: this.selection.isIndexSelected(index),\n        onRemoveItem: () => this.removeItem(item),\n        onItemChange: this.onItemChange,\n        removeButtonAriaLabel: removeButtonAriaLabel,\n        onCopyItem: (itemToCopy: T) => this.copyItems([itemToCopy]),\n      }),\n    );\n  };\n\n  protected onSelectionChanged = (): void => {\n    this.forceUpdate();\n  };\n\n  protected onChange(items?: T[]): void {\n    if (this.props.onChange) {\n      (this.props.onChange as (items?: T[]) => void)(items);\n    }\n  }\n\n  protected onItemChange = (changedItem: T, index: number): void => {\n    const { items } = this.state;\n\n    if (index >= 0) {\n      const newItems: T[] = items;\n      newItems[index] = changedItem;\n\n      this.updateItems(newItems);\n    }\n  };\n\n  protected copyItems(items: T[]): void {\n    if (this.props.onCopyItems) {\n      const copyText = (this.props.onCopyItems as any)(items);\n\n      const copyInput = document.createElement('input') as HTMLInputElement;\n      document.body.appendChild(copyInput);\n\n      try {\n        // Try to copy the text directly to the clipboard\n        copyInput.value = copyText;\n        copyInput.select();\n        if (!document.execCommand('copy')) {\n          // The command failed. Fallback to the method below.\n          throw new Error();\n        }\n      } catch (err) {\n        // no op\n      } finally {\n        document.body.removeChild(copyInput);\n      }\n    }\n  }\n\n  private _onSelectedItemsUpdated(items?: T[], focusIndex?: number): void {\n    this.onChange(items);\n  }\n\n  private _canRemoveItem(item: T): boolean {\n    return !this.props.canRemoveItem || this.props.canRemoveItem(item);\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}