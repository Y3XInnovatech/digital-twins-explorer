{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { cssColor } from './cssColor';\nimport { getColorFromRGBA } from './getColorFromRGBA';\n/**\n * Converts a CSS color string to a color object.\n * Note that hex colors *must* be prefixed with # to be considered valid.\n *\n * `inputColor` will be used unmodified as the `str` property of the returned object.\n * Alpha defaults to 100 if not specified in `inputColor`.\n * Returns undefined if the color string is invalid/not recognized.\n */\nexport function getColorFromString(inputColor) {\n  var color = cssColor(inputColor);\n  if (!color) {\n    return;\n  }\n  return __assign(__assign({}, getColorFromRGBA(color)), {\n    str: inputColor\n  });\n}","map":{"version":3,"sources":["utilities/color/getColorFromString.ts"],"names":[],"mappings":";AACA,SAAS,QAAQ,QAAQ,YAAY;AACrC,SAAS,gBAAgB,QAAQ,oBAAoB;AAErD;;;;;;;AAOG;AACH,OAAM,SAAU,kBAAkB,CAAC,UAAkB,EAAA;EACnD,IAAM,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC;EAElC,IAAI,CAAC,KAAK,EAAE;IACV;EACD;EAED,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,gBAAgB,CAAC,KAAM,CAAC,CAAA,EAAA;IAC3B,GAAG,EAAE;EAAU,CAAA,CAAA;AAEnB","sourcesContent":["import { IColor } from './interfaces';\nimport { cssColor } from './cssColor';\nimport { getColorFromRGBA } from './getColorFromRGBA';\n\n/**\n * Converts a CSS color string to a color object.\n * Note that hex colors *must* be prefixed with # to be considered valid.\n *\n * `inputColor` will be used unmodified as the `str` property of the returned object.\n * Alpha defaults to 100 if not specified in `inputColor`.\n * Returns undefined if the color string is invalid/not recognized.\n */\nexport function getColorFromString(inputColor: string): IColor | undefined {\n  const color = cssColor(inputColor);\n\n  if (!color) {\n    return;\n  }\n\n  return {\n    ...getColorFromRGBA(color!),\n    str: inputColor,\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}