{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { DelayedRender, getId, classNamesFunction, getNativeProps, htmlElementProperties, css, initializeComponentRef } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nvar getClassNames = classNamesFunction();\nvar MessageBarBase = /** @class */function (_super) {\n  __extends(MessageBarBase, _super);\n  function MessageBarBase(props) {\n    var _a;\n    var _this = _super.call(this, props) || this;\n    _this.ICON_MAP = (_a = {}, _a[MessageBarType.info] = 'Info', _a[MessageBarType.warning] = 'Info', _a[MessageBarType.error] = 'ErrorBadge', _a[MessageBarType.blocked] = 'Blocked2', _a[MessageBarType.severeWarning] = 'Warning', _a[MessageBarType.success] = 'Completed', _a);\n    _this._getRegionProps = function () {\n      var hasActions = !!_this._getActionsDiv() || !!_this._getDismissDiv();\n      var regionProps = {\n        'aria-describedby': _this.state.labelId,\n        role: 'region'\n      };\n      return hasActions ? regionProps : {};\n    };\n    _this._onClick = function (ev) {\n      _this.setState({\n        expandSingleLine: !_this.state.expandSingleLine\n      });\n    };\n    initializeComponentRef(_this);\n    _this.state = {\n      labelId: getId('MessageBar'),\n      // eslint-disable-next-line react/no-unused-state\n      showContent: false,\n      expandSingleLine: false\n    };\n    return _this;\n  }\n  MessageBarBase.prototype.render = function () {\n    var isMultiline = this.props.isMultiline;\n    this._classNames = this._getClassNames();\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n  };\n  MessageBarBase.prototype._getActionsDiv = function () {\n    if (this.props.actions) {\n      return React.createElement(\"div\", {\n        className: this._classNames.actions\n      }, this.props.actions);\n    }\n    return null;\n  };\n  MessageBarBase.prototype._getDismissDiv = function () {\n    var _a = this.props,\n      onDismiss = _a.onDismiss,\n      dismissIconProps = _a.dismissIconProps;\n    if (onDismiss) {\n      return React.createElement(IconButton, {\n        disabled: false,\n        className: this._classNames.dismissal,\n        onClick: onDismiss,\n        iconProps: dismissIconProps ? dismissIconProps : {\n          iconName: 'Clear'\n        },\n        title: this.props.dismissButtonAriaLabel,\n        ariaLabel: this.props.dismissButtonAriaLabel\n      });\n    }\n    return null;\n  };\n  MessageBarBase.prototype._getDismissSingleLine = function () {\n    if (this.props.onDismiss) {\n      return React.createElement(\"div\", {\n        className: this._classNames.dismissSingleLine\n      }, this._getDismissDiv());\n    }\n    return null;\n  };\n  MessageBarBase.prototype._getExpandSingleLine = function () {\n    if (!this.props.actions && this.props.truncated) {\n      return React.createElement(\"div\", {\n        className: this._classNames.expandSingleLine\n      }, React.createElement(IconButton, {\n        disabled: false,\n        className: this._classNames.expand,\n        onClick: this._onClick,\n        iconProps: {\n          iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown'\n        },\n        ariaLabel: this.props.overflowButtonAriaLabel,\n        \"aria-expanded\": this.state.expandSingleLine\n      }));\n    }\n    return null;\n  };\n  MessageBarBase.prototype._getIconSpan = function () {\n    var messageBarIconProps = this.props.messageBarIconProps;\n    return React.createElement(\"div\", {\n      className: this._classNames.iconContainer,\n      \"aria-hidden\": true\n    }, messageBarIconProps ? React.createElement(Icon, __assign({}, messageBarIconProps, {\n      className: css(this._classNames.icon, messageBarIconProps.className)\n    })) : React.createElement(Icon, {\n      iconName: this.ICON_MAP[this.props.messageBarType],\n      className: this._classNames.icon\n    }));\n  };\n  MessageBarBase.prototype._renderMultiLine = function () {\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, this._getRegionProps()), React.createElement(\"div\", {\n      className: this._classNames.content\n    }, this._getIconSpan(), this._renderInnerText(), this._getDismissDiv()), this._getActionsDiv());\n  };\n  MessageBarBase.prototype._renderSingleLine = function () {\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, this._getRegionProps()), React.createElement(\"div\", {\n      className: this._classNames.content\n    }, this._getIconSpan(), this._renderInnerText(), this._getExpandSingleLine(), this._getActionsDiv(), this._getDismissSingleLine()));\n  };\n  MessageBarBase.prototype._renderInnerText = function () {\n    var nativeProps = getNativeProps(this.props, htmlElementProperties, ['className']);\n    return React.createElement(\"div\", {\n      className: this._classNames.text,\n      id: this.state.labelId,\n      role: \"status\",\n      \"aria-live\": this._getAnnouncementPriority()\n    }, React.createElement(\"span\", __assign({\n      className: this._classNames.innerText\n    }, nativeProps), React.createElement(DelayedRender, null, React.createElement(\"span\", null, this.props.children))));\n  };\n  MessageBarBase.prototype._getClassNames = function () {\n    var _a = this.props,\n      theme = _a.theme,\n      className = _a.className,\n      messageBarType = _a.messageBarType,\n      onDismiss = _a.onDismiss,\n      actions = _a.actions,\n      truncated = _a.truncated,\n      isMultiline = _a.isMultiline;\n    var expandSingleLine = this.state.expandSingleLine;\n    return getClassNames(this.props.styles, {\n      theme: theme,\n      messageBarType: messageBarType || MessageBarType.info,\n      onDismiss: onDismiss !== undefined,\n      actions: actions !== undefined,\n      truncated: truncated,\n      isMultiline: isMultiline,\n      expandSingleLine: expandSingleLine,\n      className: className\n    });\n  };\n  MessageBarBase.prototype._getAnnouncementPriority = function () {\n    switch (this.props.messageBarType) {\n      case MessageBarType.blocked:\n      case MessageBarType.error:\n      case MessageBarType.severeWarning:\n        return 'assertive';\n    }\n    return 'polite';\n  };\n  MessageBarBase.defaultProps = {\n    messageBarType: MessageBarType.info,\n    onDismiss: undefined,\n    isMultiline: true\n  };\n  return MessageBarBase;\n}(React.Component);\nexport { MessageBarBase };","map":{"version":3,"sources":["components/MessageBar/MessageBar.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  DelayedRender,\n  getId,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n  css,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nexport interface IMessageBarState {\n  labelId?: string;\n  showContent?: boolean;\n  expandSingleLine?: boolean;\n}\n\nexport class MessageBarBase extends React.Component<IMessageBarProps, IMessageBarState> {\n  public static defaultProps: IMessageBarProps = {\n    messageBarType: MessageBarType.info,\n    onDismiss: undefined,\n    isMultiline: true,\n  };\n\n  private ICON_MAP = {\n    [MessageBarType.info]: 'Info',\n    [MessageBarType.warning]: 'Info',\n    [MessageBarType.error]: 'ErrorBadge',\n    [MessageBarType.blocked]: 'Blocked2',\n    [MessageBarType.severeWarning]: 'Warning',\n    [MessageBarType.success]: 'Completed',\n  };\n\n  private _classNames: { [key in keyof IMessageBarStyles]: string };\n\n  constructor(props: IMessageBarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = {\n      labelId: getId('MessageBar'),\n      // eslint-disable-next-line react/no-unused-state\n      showContent: false,\n      expandSingleLine: false,\n    };\n  }\n\n  public render(): JSX.Element {\n    const { isMultiline } = this.props;\n\n    this._classNames = this._getClassNames();\n\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n  }\n\n  private _getActionsDiv(): JSX.Element | null {\n    if (this.props.actions) {\n      return <div className={this._classNames.actions}>{this.props.actions}</div>;\n    }\n    return null;\n  }\n\n  private _getDismissDiv(): JSX.Element | null {\n    const { onDismiss, dismissIconProps } = this.props;\n    if (onDismiss) {\n      return (\n        <IconButton\n          disabled={false}\n          className={this._classNames.dismissal}\n          onClick={onDismiss}\n          iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n          title={this.props.dismissButtonAriaLabel}\n          ariaLabel={this.props.dismissButtonAriaLabel}\n        />\n      );\n    }\n    return null;\n  }\n\n  private _getDismissSingleLine(): JSX.Element | null {\n    if (this.props.onDismiss) {\n      return <div className={this._classNames.dismissSingleLine}>{this._getDismissDiv()}</div>;\n    }\n    return null;\n  }\n\n  private _getExpandSingleLine(): JSX.Element | null {\n    if (!this.props.actions && this.props.truncated) {\n      return (\n        <div className={this._classNames.expandSingleLine}>\n          <IconButton\n            disabled={false}\n            className={this._classNames.expand}\n            onClick={this._onClick}\n            iconProps={{ iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' }}\n            ariaLabel={this.props.overflowButtonAriaLabel}\n            aria-expanded={this.state.expandSingleLine}\n          />\n        </div>\n      );\n    }\n    return null;\n  }\n\n  private _getIconSpan(): JSX.Element {\n    const { messageBarIconProps } = this.props;\n    return (\n      <div className={this._classNames.iconContainer} aria-hidden>\n        {messageBarIconProps ? (\n          <Icon {...messageBarIconProps} className={css(this._classNames.icon, messageBarIconProps.className)} />\n        ) : (\n          <Icon iconName={this.ICON_MAP[this.props.messageBarType!]} className={this._classNames.icon} />\n        )}\n      </div>\n    );\n  }\n\n  private _renderMultiLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={this._classNames.root} {...this._getRegionProps()}>\n        <div className={this._classNames.content}>\n          {this._getIconSpan()}\n          {this._renderInnerText()}\n          {this._getDismissDiv()}\n        </div>\n        {this._getActionsDiv()}\n      </div>\n    );\n  }\n\n  private _renderSingleLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={this._classNames.root} {...this._getRegionProps()}>\n        <div className={this._classNames.content}>\n          {this._getIconSpan()}\n          {this._renderInnerText()}\n          {this._getExpandSingleLine()}\n          {this._getActionsDiv()}\n          {this._getDismissSingleLine()}\n        </div>\n      </div>\n    );\n  }\n\n  private _renderInnerText(): JSX.Element {\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div\n        className={this._classNames.text}\n        id={this.state.labelId}\n        role=\"status\"\n        aria-live={this._getAnnouncementPriority()}\n      >\n        <span className={this._classNames.innerText} {...nativeProps}>\n          <DelayedRender>\n            <span>{this.props.children}</span>\n          </DelayedRender>\n        </span>\n      </div>\n    );\n  }\n\n  private _getRegionProps = () => {\n    const hasActions = !!this._getActionsDiv() || !!this._getDismissDiv();\n    const regionProps = {\n      'aria-describedby': this.state.labelId,\n      role: 'region',\n    };\n\n    return hasActions ? regionProps : {};\n  };\n\n  private _getClassNames(): { [key in keyof IMessageBarStyles]: string } {\n    const { theme, className, messageBarType, onDismiss, actions, truncated, isMultiline } = this.props;\n    const { expandSingleLine } = this.state;\n\n    return getClassNames(this.props.styles!, {\n      theme: theme!,\n      messageBarType: messageBarType || MessageBarType.info,\n      onDismiss: onDismiss !== undefined,\n      actions: actions !== undefined,\n      truncated: truncated,\n      isMultiline: isMultiline,\n      expandSingleLine: expandSingleLine,\n      className,\n    });\n  }\n\n  private _getAnnouncementPriority(): 'assertive' | 'polite' {\n    switch (this.props.messageBarType) {\n      case MessageBarType.blocked:\n      case MessageBarType.error:\n      case MessageBarType.severeWarning:\n        return 'assertive';\n    }\n    return 'polite';\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    this.setState({ expandSingleLine: !this.state.expandSingleLine });\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}