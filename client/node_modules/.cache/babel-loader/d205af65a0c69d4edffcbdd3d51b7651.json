{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NOOP_BATCH_OBSERVER_METRIC = exports.NOOP_SUM_OBSERVER_METRIC = exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = exports.NOOP_VALUE_OBSERVER_METRIC = exports.NOOP_BOUND_BASE_OBSERVER = exports.NOOP_VALUE_RECORDER_METRIC = exports.NOOP_BOUND_VALUE_RECORDER = exports.NOOP_COUNTER_METRIC = exports.NOOP_BOUND_COUNTER = exports.NOOP_METER = exports.NoopBoundBaseObserver = exports.NoopBoundValueRecorder = exports.NoopBoundCounter = exports.NoopBatchObserverMetric = exports.NoopBaseObserverMetric = exports.NoopValueRecorderMetric = exports.NoopCounterMetric = exports.NoopMetric = exports.NoopMeter = void 0;\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */function () {\n  function NoopMeter() {}\n  /**\n   * Returns constant noop value recorder.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  NoopMeter.prototype.createValueRecorder = function (name, options) {\n    return exports.NOOP_VALUE_RECORDER_METRIC;\n  };\n  /**\n   * Returns a constant noop counter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  NoopMeter.prototype.createCounter = function (name, options) {\n    return exports.NOOP_COUNTER_METRIC;\n  };\n  /**\n   * Returns a constant noop UpDownCounter.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   */\n  NoopMeter.prototype.createUpDownCounter = function (name, options) {\n    return exports.NOOP_COUNTER_METRIC;\n  };\n  /**\n   * Returns constant noop value observer.\n   * @param name the name of the metric.\n   * @param [options] the metric options.\n   * @param [callback] the value observer callback\n   */\n  NoopMeter.prototype.createValueObserver = function (name, options, callback) {\n    return exports.NOOP_VALUE_OBSERVER_METRIC;\n  };\n  /**\n   * Returns constant noop batch observer.\n   * @param name the name of the metric.\n   * @param callback the batch observer callback\n   */\n  NoopMeter.prototype.createBatchObserver = function (name, callback) {\n    return exports.NOOP_BATCH_OBSERVER_METRIC;\n  };\n  return NoopMeter;\n}();\nexports.NoopMeter = NoopMeter;\nvar NoopMetric = /** @class */function () {\n  function NoopMetric(instrument) {\n    this._instrument = instrument;\n  }\n  /**\n   * Returns a Bound Instrument associated with specified Labels.\n   * It is recommended to keep a reference to the Bound Instrument instead of\n   * always calling this method for every operations.\n   * @param labels key-values pairs that are associated with a specific metric\n   *     that you want to record.\n   */\n  NoopMetric.prototype.bind = function (labels) {\n    return this._instrument;\n  };\n  /**\n   * Removes the Binding from the metric, if it is present.\n   * @param labels key-values pairs that are associated with a specific metric.\n   */\n  NoopMetric.prototype.unbind = function (labels) {\n    return;\n  };\n  /**\n   * Clears all timeseries from the Metric.\n   */\n  NoopMetric.prototype.clear = function () {\n    return;\n  };\n  return NoopMetric;\n}();\nexports.NoopMetric = NoopMetric;\nvar NoopCounterMetric = /** @class */function (_super) {\n  __extends(NoopCounterMetric, _super);\n  function NoopCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopCounterMetric.prototype.add = function (value, labels) {\n    this.bind(labels).add(value);\n  };\n  return NoopCounterMetric;\n}(NoopMetric);\nexports.NoopCounterMetric = NoopCounterMetric;\nvar NoopValueRecorderMetric = /** @class */function (_super) {\n  __extends(NoopValueRecorderMetric, _super);\n  function NoopValueRecorderMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopValueRecorderMetric.prototype.record = function (value, labels, correlationContext, spanContext) {\n    if (typeof correlationContext === 'undefined') {\n      this.bind(labels).record(value);\n    } else if (typeof spanContext === 'undefined') {\n      this.bind(labels).record(value, correlationContext);\n    } else {\n      this.bind(labels).record(value, correlationContext, spanContext);\n    }\n  };\n  return NoopValueRecorderMetric;\n}(NoopMetric);\nexports.NoopValueRecorderMetric = NoopValueRecorderMetric;\nvar NoopBaseObserverMetric = /** @class */function (_super) {\n  __extends(NoopBaseObserverMetric, _super);\n  function NoopBaseObserverMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopBaseObserverMetric.prototype.observation = function () {\n    return {\n      observer: this,\n      value: 0\n    };\n  };\n  return NoopBaseObserverMetric;\n}(NoopMetric);\nexports.NoopBaseObserverMetric = NoopBaseObserverMetric;\nvar NoopBatchObserverMetric = /** @class */function (_super) {\n  __extends(NoopBatchObserverMetric, _super);\n  function NoopBatchObserverMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return NoopBatchObserverMetric;\n}(NoopMetric);\nexports.NoopBatchObserverMetric = NoopBatchObserverMetric;\nvar NoopBoundCounter = /** @class */function () {\n  function NoopBoundCounter() {}\n  NoopBoundCounter.prototype.add = function (value) {\n    return;\n  };\n  return NoopBoundCounter;\n}();\nexports.NoopBoundCounter = NoopBoundCounter;\nvar NoopBoundValueRecorder = /** @class */function () {\n  function NoopBoundValueRecorder() {}\n  NoopBoundValueRecorder.prototype.record = function (value, correlationContext, spanContext) {\n    return;\n  };\n  return NoopBoundValueRecorder;\n}();\nexports.NoopBoundValueRecorder = NoopBoundValueRecorder;\nvar NoopBoundBaseObserver = /** @class */function () {\n  function NoopBoundBaseObserver() {}\n  NoopBoundBaseObserver.prototype.update = function (value) {};\n  return NoopBoundBaseObserver;\n}();\nexports.NoopBoundBaseObserver = NoopBoundBaseObserver;\nexports.NOOP_METER = new NoopMeter();\nexports.NOOP_BOUND_COUNTER = new NoopBoundCounter();\nexports.NOOP_COUNTER_METRIC = new NoopCounterMetric(exports.NOOP_BOUND_COUNTER);\nexports.NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();\nexports.NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(exports.NOOP_BOUND_VALUE_RECORDER);\nexports.NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();\nexports.NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);\nexports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);\nexports.NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);\nexports.NOOP_BATCH_OBSERVER_METRIC = new NoopBatchObserverMetric();","map":{"version":3,"sources":["../../../src/metrics/NoopMeter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_BATCH_OBSERVER_METRIC = exports.NOOP_SUM_OBSERVER_METRIC = exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = exports.NOOP_VALUE_OBSERVER_METRIC = exports.NOOP_BOUND_BASE_OBSERVER = exports.NOOP_VALUE_RECORDER_METRIC = exports.NOOP_BOUND_VALUE_RECORDER = exports.NOOP_COUNTER_METRIC = exports.NOOP_BOUND_COUNTER = exports.NOOP_METER = exports.NoopBoundBaseObserver = exports.NoopBoundValueRecorder = exports.NoopBoundCounter = exports.NoopBatchObserverMetric = exports.NoopBaseObserverMetric = exports.NoopValueRecorderMetric = exports.NoopCounterMetric = exports.NoopMetric = exports.NoopMeter = void 0;\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */ (function () {\n    function NoopMeter() {\n    }\n    /**\n     * Returns constant noop value recorder.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createValueRecorder = function (name, options) {\n        return exports.NOOP_VALUE_RECORDER_METRIC;\n    };\n    /**\n     * Returns a constant noop counter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createCounter = function (name, options) {\n        return exports.NOOP_COUNTER_METRIC;\n    };\n    /**\n     * Returns a constant noop UpDownCounter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createUpDownCounter = function (name, options) {\n        return exports.NOOP_COUNTER_METRIC;\n    };\n    /**\n     * Returns constant noop value observer.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the value observer callback\n     */\n    NoopMeter.prototype.createValueObserver = function (name, options, callback) {\n        return exports.NOOP_VALUE_OBSERVER_METRIC;\n    };\n    /**\n     * Returns constant noop batch observer.\n     * @param name the name of the metric.\n     * @param callback the batch observer callback\n     */\n    NoopMeter.prototype.createBatchObserver = function (name, callback) {\n        return exports.NOOP_BATCH_OBSERVER_METRIC;\n    };\n    return NoopMeter;\n}());\nexports.NoopMeter = NoopMeter;\nvar NoopMetric = /** @class */ (function () {\n    function NoopMetric(instrument) {\n        this._instrument = instrument;\n    }\n    /**\n     * Returns a Bound Instrument associated with specified Labels.\n     * It is recommended to keep a reference to the Bound Instrument instead of\n     * always calling this method for every operations.\n     * @param labels key-values pairs that are associated with a specific metric\n     *     that you want to record.\n     */\n    NoopMetric.prototype.bind = function (labels) {\n        return this._instrument;\n    };\n    /**\n     * Removes the Binding from the metric, if it is present.\n     * @param labels key-values pairs that are associated with a specific metric.\n     */\n    NoopMetric.prototype.unbind = function (labels) {\n        return;\n    };\n    /**\n     * Clears all timeseries from the Metric.\n     */\n    NoopMetric.prototype.clear = function () {\n        return;\n    };\n    return NoopMetric;\n}());\nexports.NoopMetric = NoopMetric;\nvar NoopCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopCounterMetric, _super);\n    function NoopCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopCounterMetric.prototype.add = function (value, labels) {\n        this.bind(labels).add(value);\n    };\n    return NoopCounterMetric;\n}(NoopMetric));\nexports.NoopCounterMetric = NoopCounterMetric;\nvar NoopValueRecorderMetric = /** @class */ (function (_super) {\n    __extends(NoopValueRecorderMetric, _super);\n    function NoopValueRecorderMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopValueRecorderMetric.prototype.record = function (value, labels, correlationContext, spanContext) {\n        if (typeof correlationContext === 'undefined') {\n            this.bind(labels).record(value);\n        }\n        else if (typeof spanContext === 'undefined') {\n            this.bind(labels).record(value, correlationContext);\n        }\n        else {\n            this.bind(labels).record(value, correlationContext, spanContext);\n        }\n    };\n    return NoopValueRecorderMetric;\n}(NoopMetric));\nexports.NoopValueRecorderMetric = NoopValueRecorderMetric;\nvar NoopBaseObserverMetric = /** @class */ (function (_super) {\n    __extends(NoopBaseObserverMetric, _super);\n    function NoopBaseObserverMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopBaseObserverMetric.prototype.observation = function () {\n        return {\n            observer: this,\n            value: 0,\n        };\n    };\n    return NoopBaseObserverMetric;\n}(NoopMetric));\nexports.NoopBaseObserverMetric = NoopBaseObserverMetric;\nvar NoopBatchObserverMetric = /** @class */ (function (_super) {\n    __extends(NoopBatchObserverMetric, _super);\n    function NoopBatchObserverMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopBatchObserverMetric;\n}(NoopMetric));\nexports.NoopBatchObserverMetric = NoopBatchObserverMetric;\nvar NoopBoundCounter = /** @class */ (function () {\n    function NoopBoundCounter() {\n    }\n    NoopBoundCounter.prototype.add = function (value) {\n        return;\n    };\n    return NoopBoundCounter;\n}());\nexports.NoopBoundCounter = NoopBoundCounter;\nvar NoopBoundValueRecorder = /** @class */ (function () {\n    function NoopBoundValueRecorder() {\n    }\n    NoopBoundValueRecorder.prototype.record = function (value, correlationContext, spanContext) {\n        return;\n    };\n    return NoopBoundValueRecorder;\n}());\nexports.NoopBoundValueRecorder = NoopBoundValueRecorder;\nvar NoopBoundBaseObserver = /** @class */ (function () {\n    function NoopBoundBaseObserver() {\n    }\n    NoopBoundBaseObserver.prototype.update = function (value) { };\n    return NoopBoundBaseObserver;\n}());\nexports.NoopBoundBaseObserver = NoopBoundBaseObserver;\nexports.NOOP_METER = new NoopMeter();\nexports.NOOP_BOUND_COUNTER = new NoopBoundCounter();\nexports.NOOP_COUNTER_METRIC = new NoopCounterMetric(exports.NOOP_BOUND_COUNTER);\nexports.NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();\nexports.NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(exports.NOOP_BOUND_VALUE_RECORDER);\nexports.NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();\nexports.NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);\nexports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);\nexports.NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);\nexports.NOOP_BATCH_OBSERVER_METRIC = new NoopBatchObserverMetric();\n//# sourceMappingURL=NoopMeter.js.map"]},"metadata":{},"sourceType":"script"}