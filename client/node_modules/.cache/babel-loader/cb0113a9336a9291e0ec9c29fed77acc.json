{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { memoizeFunction } from '../../Utilities';\nvar COMMAND_BAR_HEIGHT = 44;\nexport var getStyles = function (props) {\n  var className = props.className,\n    theme = props.theme;\n  var semanticColors = theme.semanticColors;\n  return {\n    root: [theme.fonts.medium, 'ms-CommandBar', {\n      display: 'flex',\n      backgroundColor: semanticColors.bodyBackground,\n      padding: '0 14px 0 24px',\n      height: COMMAND_BAR_HEIGHT\n    }, className],\n    primarySet: ['ms-CommandBar-primaryCommand', {\n      flexGrow: '1',\n      display: 'flex',\n      alignItems: 'stretch'\n    }],\n    secondarySet: ['ms-CommandBar-secondaryCommand', {\n      flexShrink: '0',\n      display: 'flex',\n      alignItems: 'stretch'\n    }]\n  };\n};\nexport var getCommandButtonStyles = memoizeFunction(function (customStyles) {\n  var rootStyles = {\n    height: '100%'\n  };\n  var labelStyles = {\n    whiteSpace: 'nowrap'\n  };\n  var _a = customStyles || {},\n    root = _a.root,\n    label = _a.label,\n    restCustomStyles = __rest(_a, [\"root\", \"label\"]);\n  return __assign(__assign({}, restCustomStyles), {\n    root: root ? [rootStyles, root] : rootStyles,\n    label: label ? [labelStyles, label] : labelStyles\n  });\n});","map":{"version":3,"sources":["components/CommandBar/CommandBar.styles.ts"],"names":[],"mappings":";AAEA,SAAS,eAAe,QAAQ,iBAAiB;AAGjD,IAAM,kBAAkB,GAAG,EAAE;AAE7B,OAAO,IAAM,SAAS,GAAG,SAAA,CAAC,KAA4B,EAAA;EAC5C,IAAA,SAAA,GAAA,KAAA,CAAA,SAAS;IAAE,KAAA,GAAA,KAAA,CAAA,KAAK;EAChB,IAAA,cAAA,GAAA,KAAA,CAAA,cAAc;EAEtB,OAAO;IACL,IAAI,EAAE,CACJ,KAAK,CAAC,KAAK,CAAC,MAAM,EAClB,eAAe,EACf;MACE,OAAO,EAAE,MAAM;MACf,eAAe,EAAE,cAAc,CAAC,cAAc;MAC9C,OAAO,EAAE,eAAe;MACxB,MAAM,EAAE;KACT,EACD,SAAS,CACV;IACD,UAAU,EAAE,CACV,8BAA8B,EAC9B;MACE,QAAQ,EAAE,GAAG;MACb,OAAO,EAAE,MAAM;MACf,UAAU,EAAE;KACb,CACF;IACD,YAAY,EAAE,CACZ,gCAAgC,EAChC;MACE,UAAU,EAAE,GAAG;MACf,OAAO,EAAE,MAAM;MACf,UAAU,EAAE;KACb;GAEJ;AACH,CAAC;AAED,OAAO,IAAM,sBAAsB,GAAG,eAAe,CACnD,UAAC,YAAuC,EAAA;EACtC,IAAM,UAAU,GAAW;IACzB,MAAM,EAAE;GACT;EACD,IAAM,WAAW,GAAW;IAC1B,UAAU,EAAE;GACb;EAED,IAAM,EAAA,GAAA,YAAA,IAAA,CAAA,CAAyD;IAAvD,IAAA,GAAA,EAAA,CAAA,IAAI;IAAE,KAAA,GAAA,EAAA,CAAA,KAAK;IAAE,gBAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,MAAA,EAAA,OAAA,CAAA,CAA0C;EAE/D,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,gBAAgB,CAAA,EAAA;IACnB,IAAI,EAAE,IAAI,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,UAAU;IAC5C,KAAK,EAAE,KAAK,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC,GAAG;EAAW,CAAA,CAAA;AAErD,CAAC,CACF","sourcesContent":["import { ICommandBarStyleProps, ICommandBarStyles } from './CommandBar.types';\nimport { IButtonStyles } from '../Button/Button.types';\nimport { memoizeFunction } from '../../Utilities';\nimport { IStyle } from '../../Styling';\n\nconst COMMAND_BAR_HEIGHT = 44;\n\nexport const getStyles = (props: ICommandBarStyleProps): ICommandBarStyles => {\n  const { className, theme } = props;\n  const { semanticColors } = theme;\n\n  return {\n    root: [\n      theme.fonts.medium,\n      'ms-CommandBar',\n      {\n        display: 'flex',\n        backgroundColor: semanticColors.bodyBackground,\n        padding: '0 14px 0 24px',\n        height: COMMAND_BAR_HEIGHT,\n      },\n      className,\n    ],\n    primarySet: [\n      'ms-CommandBar-primaryCommand',\n      {\n        flexGrow: '1',\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n    secondarySet: [\n      'ms-CommandBar-secondaryCommand',\n      {\n        flexShrink: '0',\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n  };\n};\n\nexport const getCommandButtonStyles = memoizeFunction(\n  (customStyles: IButtonStyles | undefined): IButtonStyles => {\n    const rootStyles: IStyle = {\n      height: '100%',\n    };\n    const labelStyles: IStyle = {\n      whiteSpace: 'nowrap',\n    };\n\n    const { root, label, ...restCustomStyles } = customStyles || {};\n\n    return {\n      ...restCustomStyles,\n      root: root ? [rootStyles, root] : rootStyles,\n      label: label ? [labelStyles, label] : labelStyles,\n    };\n  },\n);\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}