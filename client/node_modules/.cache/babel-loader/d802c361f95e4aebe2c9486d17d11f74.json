{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/**\n * Class representing a Query.\n */\nvar Query = /** @class */function () {\n  /**\n   * Initialize a new instance of the class Query class.\n   * @param client Reference to the service client\n   */\n  function Query(client) {\n    this.client = client;\n  }\n  /**\n   * Executes a query that allows traversing relationships and filtering by property values.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * BadRequest - The continuation token is invalid.\n   *   * SqlQueryError - The query contains some errors.\n   * * 429 Too Many Requests\n   *   * QuotaReachedError - The maximum query rate limit has been reached.\n   * @param querySpecification The query specification to execute.\n   * @param options The options parameters.\n   */\n  Query.prototype.queryTwins = function (querySpecification, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      querySpecification: querySpecification,\n      options: operationOptions\n    }, queryTwinsOperationSpec);\n  };\n  return Query;\n}();\nexport { Query };\n// Operation Specifications\nvar serializer = new coreHttp.Serializer(Mappers, /* isXml */false);\nvar queryTwinsOperationSpec = {\n  path: \"/query\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.QueryResult,\n      headersMapper: Mappers.QueryQueryTwinsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.querySpecification,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.contentType, Parameters.traceparent, Parameters.tracestate, Parameters.maxItemsPerPage],\n  mediaType: \"json\",\n  serializer: serializer\n};","map":{"version":3,"sources":["../../../../src/generated/operations/query.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;AAEH,OAAO,KAAK,QAAQ,MAAM,kBAAkB;AAC5C,OAAO,KAAK,OAAO,MAAM,mBAAmB;AAC5C,OAAO,KAAK,UAAU,MAAM,sBAAsB;AAQlD;;AAEG;AACH,IAAA,KAAA,GAAA,aAAA,YAAA;EAGE;;;AAGG;EACH,SAAA,KAAA,CAAY,MAA4B,EAAA;IACtC,IAAI,CAAC,MAAM,GAAG,MAAM;EACtB;EAEA;;;;;;;;;;;AAWG;EACH,KAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UACE,kBAAsC,EACtC,OAAuC,EAAA;IAEvC,IAAM,gBAAgB,GAAgC,QAAQ,CAAC,oCAAoC,CACjG,OAAO,IAAI,CAAA,CAAE,CACd;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;MAAE,kBAAkB,EAAA,kBAAA;MAAE,OAAO,EAAE;IAAgB,CAAE,EACjD,uBAAuB,CACY;EACvC,CAAC;EACH,OAAA,KAAC;AAAD,CAAC,CAAA,CAAA;;AACD;AAEA,IAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,WAAY,KAAK,CAAC;AAEtE,IAAM,uBAAuB,GAA2B;EACtD,IAAI,EAAE,QAAQ;EACd,UAAU,EAAE,MAAM;EAClB,SAAS,EAAE;IACT,GAAG,EAAE;MACH,UAAU,EAAE,OAAO,CAAC,WAAW;MAC/B,aAAa,EAAE,OAAO,CAAC;KACxB;IACD,OAAO,EAAE;MACP,UAAU,EAAE,OAAO,CAAC;IACrB;GACF;EACD,WAAW,EAAE,UAAU,CAAC,kBAAkB;EAC1C,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;EACxC,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC;EACjC,gBAAgB,EAAE,CAChB,UAAU,CAAC,WAAW,EACtB,UAAU,CAAC,WAAW,EACtB,UAAU,CAAC,UAAU,EACrB,UAAU,CAAC,eAAe,CAC3B;EACD,SAAS,EAAE,MAAM;EACjB,UAAU,EAAA;CACX","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { AzureDigitalTwinsAPI } from \"../azureDigitalTwinsAPI\";\nimport {\n  QuerySpecification,\n  QueryQueryTwinsOptionalParams,\n  QueryQueryTwinsResponse\n} from \"../models\";\n\n/**\n * Class representing a Query.\n */\nexport class Query {\n  private readonly client: AzureDigitalTwinsAPI;\n\n  /**\n   * Initialize a new instance of the class Query class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureDigitalTwinsAPI) {\n    this.client = client;\n  }\n\n  /**\n   * Executes a query that allows traversing relationships and filtering by property values.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * BadRequest - The continuation token is invalid.\n   *   * SqlQueryError - The query contains some errors.\n   * * 429 Too Many Requests\n   *   * QuotaReachedError - The maximum query rate limit has been reached.\n   * @param querySpecification The query specification to execute.\n   * @param options The options parameters.\n   */\n  queryTwins(\n    querySpecification: QuerySpecification,\n    options?: QueryQueryTwinsOptionalParams\n  ): Promise<QueryQueryTwinsResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { querySpecification, options: operationOptions },\n      queryTwinsOperationSpec\n    ) as Promise<QueryQueryTwinsResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst queryTwinsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/query\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.QueryResult,\n      headersMapper: Mappers.QueryQueryTwinsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.querySpecification,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.maxItemsPerPage\n  ],\n  mediaType: \"json\",\n  serializer\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}