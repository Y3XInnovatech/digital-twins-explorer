{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  isKeyword\n} = require('./context');\nconst graphTypes = require('./graphTypes');\nconst types = require('./types');\nconst util = require('./util');\nconst JsonLdError = require('./JsonLdError');\nconst {\n  createNodeMap: _createNodeMap,\n  mergeNodeMapGraphs: _mergeNodeMapGraphs\n} = require('./nodeMap');\nconst api = {};\nmodule.exports = api;\n\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\napi.frameMergedOrDefault = (input, frame, options) => {\n  // create framing state\n  const state = {\n    options,\n    graph: '@default',\n    graphMap: {\n      '@default': {}\n    },\n    graphStack: [],\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  };\n\n  // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n  const issuer = new util.IdentifierIssuer('_:b');\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n  if (options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n  state.subjects = state.graphMap[state.graph];\n\n  // frame the subjects\n  const framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);\n\n  // If pruning blank nodes, find those to prune\n  if (options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear = Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);\n  }\n  return framed;\n};\n\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\napi.frame = (state, subjects, frame, parent, property = null) => {\n  // validate the frame\n  _validateFrame(frame);\n  frame = frame[0];\n\n  // get flags for current frame\n  const options = state.options;\n  const flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  };\n\n  // filter out subjects that match the frame\n  const matches = _filterSubjects(state, subjects, frame, flags);\n\n  // add matches to output\n  const ids = Object.keys(matches).sort();\n  for (const id of ids) {\n    const subject = matches[id];\n    if (flags.embed === '@link' && id in state.link) {\n      // TODO: may want to also match an existing linked subject against\n      // the current frame ... so different frames could produce different\n      // subjects that are only shared in-memory when the frames are the same\n\n      // add existing linked subject\n      _addFrameOutput(parent, property, state.link[id]);\n      continue;\n    }\n\n    /* Note: In order to treat each top-level match as a compartmentalized\n    result, clear the unique embedded subjects map when the property is null,\n    which only occurs at the top-level. */\n    if (property === null) {\n      state.uniqueEmbeds = {\n        [state.graph]: {}\n      };\n    } else {\n      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n    }\n\n    // start output for subject\n    const output = {};\n    output['@id'] = id;\n    if (id.indexOf('_:') === 0) {\n      util.addValue(state.bnodeMap, id, output, {\n        propertyIsArray: true\n      });\n    }\n    state.link[id] = output;\n\n    // if embed is @never or if a circular reference would be created by an\n    // embed, the subject cannot be embedded, just add the reference;\n    // note that a circular reference won't occur when the embed flag is\n    // `@link` as the above check will short-circuit before reaching this point\n    if (flags.embed === '@never' || _createsCircularReference(subject, state.graph, state.subjectStack)) {\n      _addFrameOutput(parent, property, output);\n      continue;\n    }\n\n    // if only the last match should be embedded\n    if (flags.embed === '@last') {\n      // remove any existing embed\n      if (id in state.uniqueEmbeds[state.graph]) {\n        _removeEmbed(state, id);\n      }\n      state.uniqueEmbeds[state.graph][id] = {\n        parent,\n        property\n      };\n    }\n\n    // push matching subject onto stack to enable circular embed checks\n    state.subjectStack.push({\n      subject,\n      graph: state.graph\n    });\n\n    // subject is also the name of a graph\n    if (id in state.graphMap) {\n      let recurse = false;\n      let subframe = null;\n      if (!('@graph' in frame)) {\n        recurse = state.graph !== '@merged';\n        subframe = {};\n      } else {\n        subframe = frame['@graph'][0];\n        if (!types.isObject(subframe)) {\n          subframe = {};\n        }\n        recurse = !(id === '@merged' || id === '@default');\n      }\n      if (recurse) {\n        state.graphStack.push(state.graph);\n        state.graph = id;\n        // recurse into graph\n        api.frame(state, Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n        state.graph = state.graphStack.pop;\n      }\n    }\n\n    // iterate over subject properties\n    for (const prop of Object.keys(subject).sort()) {\n      // copy keywords to output\n      if (isKeyword(prop)) {\n        output[prop] = util.clone(subject[prop]);\n        if (prop === '@type') {\n          // count bnode values of @type\n          for (const type of subject['@type']) {\n            if (type.indexOf('_:') === 0) {\n              util.addValue(state.bnodeMap, type, output, {\n                propertyIsArray: true\n              });\n            }\n          }\n        }\n        continue;\n      }\n\n      // explicit is on and property isn't in the frame, skip processing\n      if (flags.explicit && !(prop in frame)) {\n        continue;\n      }\n\n      // add objects\n      for (let o of subject[prop]) {\n        const subframe = prop in frame ? frame[prop] : _createImplicitFrame(flags);\n\n        // recurse into list\n        if (graphTypes.isList(o)) {\n          // add empty list\n          const list = {\n            '@list': []\n          };\n          _addFrameOutput(output, prop, list);\n\n          // add list objects\n          const src = o['@list'];\n          for (const n in src) {\n            o = src[n];\n            if (graphTypes.isSubjectReference(o)) {\n              const subframe = prop in frame ? frame[prop][0]['@list'] : _createImplicitFrame(flags);\n              // recurse into subject reference\n              api.frame(state, [o['@id']], subframe, list, '@list');\n            } else {\n              // include other values automatically\n              _addFrameOutput(list, '@list', util.clone(o));\n            }\n          }\n          continue;\n        }\n        if (graphTypes.isSubjectReference(o)) {\n          // recurse into subject reference\n          api.frame(state, [o['@id']], subframe, output, prop);\n        } else if (_valueMatch(subframe[0], o)) {\n          // include other values, if they match\n          _addFrameOutput(output, prop, util.clone(o));\n        }\n      }\n    }\n\n    // handle defaults\n    for (const prop of Object.keys(frame).sort()) {\n      // skip keywords\n      if (isKeyword(prop)) {\n        continue;\n      }\n\n      // if omit default is off, then include default values for properties\n      // that appear in the next frame but are not in the matching subject\n      const next = frame[prop][0] || {};\n      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n      if (!omitDefaultOn && !(prop in output)) {\n        let preserve = '@null';\n        if ('@default' in next) {\n          preserve = util.clone(next['@default']);\n        }\n        if (!types.isArray(preserve)) {\n          preserve = [preserve];\n        }\n        output[prop] = [{\n          '@preserve': preserve\n        }];\n      }\n    }\n\n    // if embed reverse values by finding nodes having this subject as a value\n    // of the associated property\n    if ('@reverse' in frame) {\n      for (const reverseProp of Object.keys(frame['@reverse']).sort()) {\n        const subframe = frame['@reverse'][reverseProp];\n        for (const subject of Object.keys(state.subjects)) {\n          const nodeValues = util.getValues(state.subjects[subject], reverseProp);\n          if (nodeValues.some(v => v['@id'] === id)) {\n            // node has property referencing this subject, recurse\n            output['@reverse'] = output['@reverse'] || {};\n            util.addValue(output['@reverse'], reverseProp, [], {\n              propertyIsArray: true\n            });\n            api.frame(state, [subject], subframe, output['@reverse'][reverseProp], property);\n          }\n        }\n      }\n    }\n\n    // add output to parent\n    _addFrameOutput(parent, property, output);\n\n    // pop matching subject from circular ref-checking stack\n    state.subjectStack.pop();\n  }\n};\n\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\nfunction _createImplicitFrame(flags) {\n  const frame = {};\n  for (const key in flags) {\n    if (flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n  return [frame];\n}\n\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for (let i = subjectStack.length - 1; i >= 0; --i) {\n    const subject = subjectStack[i];\n    if (subject.graph === graph && subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\nfunction _getFrameFlag(frame, options, name) {\n  const flag = '@' + name;\n  let rval = flag in frame ? frame[flag][0] : options[name];\n  if (name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if (rval === true) {\n      rval = '@last';\n    } else if (rval === false) {\n      rval = '@never';\n    } else if (rval !== '@always' && rval !== '@never' && rval !== '@link') {\n      rval = '@last';\n    }\n  }\n  return rval;\n}\n\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\nfunction _validateFrame(frame) {\n  if (!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError('Invalid JSON-LD syntax; a JSON-LD frame must be a single object.', 'jsonld.SyntaxError', {\n      frame\n    });\n  }\n}\n\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  const rval = {};\n  for (const id of subjects) {\n    const subject = state.graphMap[state.graph][id];\n    if (_filterSubject(state, subject, frame, flags)) {\n      rval[id] = subject;\n    }\n  }\n  return rval;\n}\n\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  let wildcard = true;\n  let matchesSome = false;\n  for (const key in frame) {\n    let matchThis = false;\n    const nodeValues = util.getValues(subject, key);\n    const isEmpty = util.getValues(frame, key).length === 0;\n    if (isKeyword(key)) {\n      // skip non-@id and non-@type\n      if (key !== '@id' && key !== '@type') {\n        continue;\n      }\n      wildcard = false;\n\n      // check @id for a specific @id value\n      if (key === '@id') {\n        // if @id is not a wildcard and is not empty, then match or not on\n        // specific value\n        if (frame['@id'].length >= 0 && !types.isEmptyObject(frame['@id'][0])) {\n          return frame['@id'].includes(nodeValues[0]);\n        }\n        matchThis = true;\n        continue;\n      }\n\n      // check @type (object value means 'any' type, fall through to ducktyping)\n      if ('@type' in frame) {\n        if (isEmpty) {\n          if (nodeValues.length > 0) {\n            // don't match on no @type\n            return false;\n          }\n          matchThis = true;\n        } else if (frame['@type'].length === 1 && types.isEmptyObject(frame['@type'][0])) {\n          // match on wildcard @type\n          matchThis = nodeValues.length > 0;\n        } else {\n          // match on a specific @type\n          for (const type of frame['@type']) {\n            if (nodeValues.some(tt => tt === type)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n    }\n\n    // Forc a copy of this frame entry so it can be manipulated\n    const thisFrame = util.getValues(frame, key)[0];\n    let hasDefault = false;\n    if (thisFrame) {\n      _validateFrame([thisFrame]);\n      hasDefault = '@default' in thisFrame;\n    }\n\n    // no longer a wildcard pattern if frame has any non-keyword properties\n    wildcard = false;\n\n    // skip, but allow match if node has no value for property, and frame has a\n    // default value\n    if (nodeValues.length === 0 && hasDefault) {\n      continue;\n    }\n\n    // if frame value is empty, don't match if subject has any value\n    if (nodeValues.length > 0 && isEmpty) {\n      return false;\n    }\n    if (thisFrame === undefined) {\n      // node does not match if values is not empty and the value of property\n      // in frame is match none.\n      if (nodeValues.length > 0) {\n        return false;\n      }\n      matchThis = true;\n    } else if (types.isObject(thisFrame)) {\n      // node matches if values is not empty and the value of property in frame\n      // is wildcard\n      matchThis = nodeValues.length > 0;\n    } else {\n      if (graphTypes.isValue(thisFrame)) {\n        // match on any matching value\n        matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));\n      } else if (graphTypes.isSubject(thisFrame) || graphTypes.isSubjectReference(thisFrame)) {\n        matchThis = nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));\n      } else if (graphTypes.isList(thisFrame)) {\n        const listValue = thisFrame['@list'][0];\n        if (graphTypes.isList(nodeValues[0])) {\n          const nodeListValues = nodeValues[0]['@list'];\n          if (graphTypes.isValue(listValue)) {\n            // match on any matching value\n            matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));\n          } else if (graphTypes.isSubject(listValue) || graphTypes.isSubjectReference(listValue)) {\n            matchThis = nodeListValues.some(lv => _nodeMatch(state, listValue, lv, flags));\n          }\n        } else {\n          // value must be a list to match\n          matchThis = false;\n        }\n      }\n    }\n\n    // all non-defaulted values must match if requireAll is set\n    if (!matchThis && flags.requireAll) {\n      return false;\n    }\n    matchesSome = matchesSome || matchThis;\n  }\n\n  // return true if wildcard or subject matches some properties\n  return wildcard || matchesSome;\n}\n\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  const embeds = state.uniqueEmbeds[state.graph];\n  const embed = embeds[id];\n  const parent = embed.parent;\n  const property = embed.property;\n\n  // create reference to replace embed\n  const subject = {\n    '@id': id\n  };\n\n  // remove existing embed\n  if (types.isArray(parent)) {\n    // replace subject with reference\n    for (let i = 0; i < parent.length; ++i) {\n      if (util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    const useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n    util.addValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n  }\n\n  // recursively remove dependent dangling embeds\n  const removeDependents = id => {\n    // get embed keys as a separate array to enable deleting keys in map\n    const ids = Object.keys(embeds);\n    for (const next of ids) {\n      if (next in embeds && types.isObject(embeds[next].parent) && embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n  removeDependents(id);\n}\n\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\nfunction _addFrameOutput(parent, property, output) {\n  if (types.isObject(parent)) {\n    util.addValue(parent, property, output, {\n      propertyIsArray: true\n    });\n  } else {\n    parent.push(output);\n  }\n}\n\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\nfunction _nodeMatch(state, pattern, value, flags) {\n  if (!('@id' in value)) {\n    return false;\n  }\n  const nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\nfunction _valueMatch(pattern, value) {\n  const v1 = value['@value'];\n  const t1 = value['@type'];\n  const l1 = value['@language'];\n  const v2 = pattern['@value'] ? types.isArray(pattern['@value']) ? pattern['@value'] : [pattern['@value']] : [];\n  const t2 = pattern['@type'] ? types.isArray(pattern['@type']) ? pattern['@type'] : [pattern['@type']] : [];\n  const l2 = pattern['@language'] ? types.isArray(pattern['@language']) ? pattern['@language'] : [pattern['@language']] : [];\n  if (v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n  if (!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n  if (!(!t1 && t2.length === 0 || t2.includes(t1) || t1 && types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n  if (!(!l1 && l2.length === 0 || l2.includes(l1) || l1 && types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["isKeyword","require","graphTypes","types","util","JsonLdError","createNodeMap","_createNodeMap","mergeNodeMapGraphs","_mergeNodeMapGraphs","api","module","exports","frameMergedOrDefault","input","frame","options","state","graph","graphMap","graphStack","subjectStack","link","bnodeMap","issuer","IdentifierIssuer","merged","subjects","framed","Object","keys","sort","pruneBlankNodeIdentifiers","bnodesToClear","filter","id","length","parent","property","_validateFrame","flags","embed","_getFrameFlag","explicit","requireAll","matches","_filterSubjects","ids","subject","_addFrameOutput","uniqueEmbeds","output","indexOf","addValue","propertyIsArray","_createsCircularReference","_removeEmbed","push","recurse","subframe","isObject","pop","prop","clone","type","o","_createImplicitFrame","isList","list","src","n","isSubjectReference","_valueMatch","next","omitDefaultOn","preserve","isArray","reverseProp","nodeValues","getValues","some","v","key","undefined","subjectToEmbed","i","name","flag","rval","_filterSubject","wildcard","matchesSome","matchThis","isEmpty","isEmptyObject","includes","tt","thisFrame","hasDefault","isValue","nv","isSubject","_nodeMatch","listValue","nodeListValues","lv","embeds","compareValues","useArray","removeValue","removeDependents","pattern","value","nodeObject","v1","t1","l1","v2","t2","l2"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/jsonld/lib/frame.js"],"sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {isKeyword} = require('./context');\nconst graphTypes = require('./graphTypes');\nconst types = require('./types');\nconst util = require('./util');\nconst JsonLdError = require('./JsonLdError');\nconst {\n  createNodeMap: _createNodeMap,\n  mergeNodeMapGraphs: _mergeNodeMapGraphs\n} = require('./nodeMap');\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\napi.frameMergedOrDefault = (input, frame, options) => {\n  // create framing state\n  const state = {\n    options,\n    graph: '@default',\n    graphMap: {'@default': {}},\n    graphStack: [],\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  };\n\n  // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n  const issuer = new util.IdentifierIssuer('_:b');\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n  if(options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n  state.subjects = state.graphMap[state.graph];\n\n  // frame the subjects\n  const framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);\n\n  // If pruning blank nodes, find those to prune\n  if(options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear =\n      Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);\n  }\n\n  return framed;\n};\n\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\napi.frame = (state, subjects, frame, parent, property = null) => {\n  // validate the frame\n  _validateFrame(frame);\n  frame = frame[0];\n\n  // get flags for current frame\n  const options = state.options;\n  const flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  };\n\n  // filter out subjects that match the frame\n  const matches = _filterSubjects(state, subjects, frame, flags);\n\n  // add matches to output\n  const ids = Object.keys(matches).sort();\n  for(const id of ids) {\n    const subject = matches[id];\n\n    if(flags.embed === '@link' && id in state.link) {\n      // TODO: may want to also match an existing linked subject against\n      // the current frame ... so different frames could produce different\n      // subjects that are only shared in-memory when the frames are the same\n\n      // add existing linked subject\n      _addFrameOutput(parent, property, state.link[id]);\n      continue;\n    }\n\n    /* Note: In order to treat each top-level match as a compartmentalized\n    result, clear the unique embedded subjects map when the property is null,\n    which only occurs at the top-level. */\n    if(property === null) {\n      state.uniqueEmbeds = {[state.graph]: {}};\n    } else {\n      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n    }\n\n    // start output for subject\n    const output = {};\n    output['@id'] = id;\n    if(id.indexOf('_:') === 0) {\n      util.addValue(state.bnodeMap, id, output, {propertyIsArray: true});\n    }\n    state.link[id] = output;\n\n    // if embed is @never or if a circular reference would be created by an\n    // embed, the subject cannot be embedded, just add the reference;\n    // note that a circular reference won't occur when the embed flag is\n    // `@link` as the above check will short-circuit before reaching this point\n    if(flags.embed === '@never' ||\n      _createsCircularReference(subject, state.graph, state.subjectStack)) {\n      _addFrameOutput(parent, property, output);\n      continue;\n    }\n\n    // if only the last match should be embedded\n    if(flags.embed === '@last') {\n      // remove any existing embed\n      if(id in state.uniqueEmbeds[state.graph]) {\n        _removeEmbed(state, id);\n      }\n      state.uniqueEmbeds[state.graph][id] =\n        {parent, property};\n    }\n\n    // push matching subject onto stack to enable circular embed checks\n    state.subjectStack.push({subject, graph: state.graph});\n\n    // subject is also the name of a graph\n    if(id in state.graphMap) {\n      let recurse = false;\n      let subframe = null;\n      if(!('@graph' in frame)) {\n        recurse = state.graph !== '@merged';\n        subframe = {};\n      } else {\n        subframe = frame['@graph'][0];\n        if(!types.isObject(subframe)) {\n          subframe = {};\n        }\n        recurse = !(id === '@merged' || id === '@default');\n      }\n\n      if(recurse) {\n        state.graphStack.push(state.graph);\n        state.graph = id;\n        // recurse into graph\n        api.frame(\n          state,\n          Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n        state.graph = state.graphStack.pop;\n      }\n    }\n\n    // iterate over subject properties\n    for(const prop of Object.keys(subject).sort()) {\n      // copy keywords to output\n      if(isKeyword(prop)) {\n        output[prop] = util.clone(subject[prop]);\n\n        if(prop === '@type') {\n          // count bnode values of @type\n          for(const type of subject['@type']) {\n            if(type.indexOf('_:') === 0) {\n              util.addValue(\n                state.bnodeMap, type, output, {propertyIsArray: true});\n            }\n          }\n        }\n        continue;\n      }\n\n      // explicit is on and property isn't in the frame, skip processing\n      if(flags.explicit && !(prop in frame)) {\n        continue;\n      }\n\n      // add objects\n      for(let o of subject[prop]) {\n        const subframe = (prop in frame ?\n          frame[prop] : _createImplicitFrame(flags));\n\n        // recurse into list\n        if(graphTypes.isList(o)) {\n          // add empty list\n          const list = {'@list': []};\n          _addFrameOutput(output, prop, list);\n\n          // add list objects\n          const src = o['@list'];\n          for(const n in src) {\n            o = src[n];\n            if(graphTypes.isSubjectReference(o)) {\n              const subframe = (prop in frame ?\n                frame[prop][0]['@list'] : _createImplicitFrame(flags));\n              // recurse into subject reference\n              api.frame(state, [o['@id']], subframe, list, '@list');\n            } else {\n              // include other values automatically\n              _addFrameOutput(list, '@list', util.clone(o));\n            }\n          }\n          continue;\n        }\n\n        if(graphTypes.isSubjectReference(o)) {\n          // recurse into subject reference\n          api.frame(state, [o['@id']], subframe, output, prop);\n        } else if(_valueMatch(subframe[0], o)) {\n          // include other values, if they match\n          _addFrameOutput(output, prop, util.clone(o));\n        }\n      }\n    }\n\n    // handle defaults\n    for(const prop of Object.keys(frame).sort()) {\n      // skip keywords\n      if(isKeyword(prop)) {\n        continue;\n      }\n\n      // if omit default is off, then include default values for properties\n      // that appear in the next frame but are not in the matching subject\n      const next = frame[prop][0] || {};\n      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n      if(!omitDefaultOn && !(prop in output)) {\n        let preserve = '@null';\n        if('@default' in next) {\n          preserve = util.clone(next['@default']);\n        }\n        if(!types.isArray(preserve)) {\n          preserve = [preserve];\n        }\n        output[prop] = [{'@preserve': preserve}];\n      }\n    }\n\n    // if embed reverse values by finding nodes having this subject as a value\n    // of the associated property\n    if('@reverse' in frame) {\n      for(const reverseProp of Object.keys(frame['@reverse']).sort()) {\n        const subframe = frame['@reverse'][reverseProp];\n        for(const subject of Object.keys(state.subjects)) {\n          const nodeValues =\n            util.getValues(state.subjects[subject], reverseProp);\n          if(nodeValues.some(v => v['@id'] === id)) {\n            // node has property referencing this subject, recurse\n            output['@reverse'] = output['@reverse'] || {};\n            util.addValue(\n              output['@reverse'], reverseProp, [], {propertyIsArray: true});\n            api.frame(\n              state, [subject], subframe, output['@reverse'][reverseProp],\n              property);\n          }\n        }\n      }\n    }\n\n    // add output to parent\n    _addFrameOutput(parent, property, output);\n\n    // pop matching subject from circular ref-checking stack\n    state.subjectStack.pop();\n  }\n};\n\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\nfunction _createImplicitFrame(flags) {\n  const frame = {};\n  for(const key in flags) {\n    if(flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n  return [frame];\n}\n\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for(let i = subjectStack.length - 1; i >= 0; --i) {\n    const subject = subjectStack[i];\n    if(subject.graph === graph &&\n      subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\nfunction _getFrameFlag(frame, options, name) {\n  const flag = '@' + name;\n  let rval = (flag in frame ? frame[flag][0] : options[name]);\n  if(name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if(rval === true) {\n      rval = '@last';\n    } else if(rval === false) {\n      rval = '@never';\n    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link') {\n      rval = '@last';\n    }\n  }\n  return rval;\n}\n\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\nfunction _validateFrame(frame) {\n  if(!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',\n      'jsonld.SyntaxError', {frame});\n  }\n}\n\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  const rval = {};\n  for(const id of subjects) {\n    const subject = state.graphMap[state.graph][id];\n    if(_filterSubject(state, subject, frame, flags)) {\n      rval[id] = subject;\n    }\n  }\n  return rval;\n}\n\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  let wildcard = true;\n  let matchesSome = false;\n\n  for(const key in frame) {\n    let matchThis = false;\n    const nodeValues = util.getValues(subject, key);\n    const isEmpty = util.getValues(frame, key).length === 0;\n\n    if(isKeyword(key)) {\n      // skip non-@id and non-@type\n      if(key !== '@id' && key !== '@type') {\n        continue;\n      }\n      wildcard = false;\n\n      // check @id for a specific @id value\n      if(key === '@id') {\n        // if @id is not a wildcard and is not empty, then match or not on\n        // specific value\n        if(frame['@id'].length >= 0 && !types.isEmptyObject(frame['@id'][0])) {\n          return frame['@id'].includes(nodeValues[0]);\n        }\n        matchThis = true;\n        continue;\n      }\n\n      // check @type (object value means 'any' type, fall through to ducktyping)\n      if('@type' in frame) {\n        if(isEmpty) {\n          if(nodeValues.length > 0) {\n            // don't match on no @type\n            return false;\n          }\n          matchThis = true;\n        } else if(frame['@type'].length === 1 &&\n          types.isEmptyObject(frame['@type'][0])) {\n          // match on wildcard @type\n          matchThis = nodeValues.length > 0;\n        } else {\n          // match on a specific @type\n          for(const type of frame['@type']) {\n            if(nodeValues.some(tt => tt === type)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n    }\n\n    // Forc a copy of this frame entry so it can be manipulated\n    const thisFrame = util.getValues(frame, key)[0];\n    let hasDefault = false;\n    if(thisFrame) {\n      _validateFrame([thisFrame]);\n      hasDefault = '@default' in thisFrame;\n    }\n\n    // no longer a wildcard pattern if frame has any non-keyword properties\n    wildcard = false;\n\n    // skip, but allow match if node has no value for property, and frame has a\n    // default value\n    if(nodeValues.length === 0 && hasDefault) {\n      continue;\n    }\n\n    // if frame value is empty, don't match if subject has any value\n    if(nodeValues.length > 0 && isEmpty) {\n      return false;\n    }\n\n    if(thisFrame === undefined) {\n      // node does not match if values is not empty and the value of property\n      // in frame is match none.\n      if(nodeValues.length > 0) {\n        return false;\n      }\n      matchThis = true;\n    } else if(types.isObject(thisFrame)) {\n      // node matches if values is not empty and the value of property in frame\n      // is wildcard\n      matchThis = nodeValues.length > 0;\n    } else {\n      if(graphTypes.isValue(thisFrame)) {\n        // match on any matching value\n        matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));\n      } else if(graphTypes.isSubject(thisFrame) ||\n        graphTypes.isSubjectReference(thisFrame)) {\n        matchThis =\n          nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));\n      } else if(graphTypes.isList(thisFrame)) {\n        const listValue = thisFrame['@list'][0];\n        if(graphTypes.isList(nodeValues[0])) {\n          const nodeListValues = nodeValues[0]['@list'];\n\n          if(graphTypes.isValue(listValue)) {\n            // match on any matching value\n            matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));\n          } else if(graphTypes.isSubject(listValue) ||\n            graphTypes.isSubjectReference(listValue)) {\n            matchThis = nodeListValues.some(lv => _nodeMatch(\n              state, listValue, lv, flags));\n          }\n        } else {\n          // value must be a list to match\n          matchThis = false;\n        }\n      }\n    }\n\n    // all non-defaulted values must match if requireAll is set\n    if(!matchThis && flags.requireAll) {\n      return false;\n    }\n\n    matchesSome = matchesSome || matchThis;\n  }\n\n  // return true if wildcard or subject matches some properties\n  return wildcard || matchesSome;\n}\n\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  const embeds = state.uniqueEmbeds[state.graph];\n  const embed = embeds[id];\n  const parent = embed.parent;\n  const property = embed.property;\n\n  // create reference to replace embed\n  const subject = {'@id': id};\n\n  // remove existing embed\n  if(types.isArray(parent)) {\n    // replace subject with reference\n    for(let i = 0; i < parent.length; ++i) {\n      if(util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    const useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {propertyIsArray: useArray});\n    util.addValue(parent, property, subject, {propertyIsArray: useArray});\n  }\n\n  // recursively remove dependent dangling embeds\n  const removeDependents = id => {\n    // get embed keys as a separate array to enable deleting keys in map\n    const ids = Object.keys(embeds);\n    for(const next of ids) {\n      if(next in embeds && types.isObject(embeds[next].parent) &&\n        embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n  removeDependents(id);\n}\n\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\nfunction _addFrameOutput(parent, property, output) {\n  if(types.isObject(parent)) {\n    util.addValue(parent, property, output, {propertyIsArray: true});\n  } else {\n    parent.push(output);\n  }\n}\n\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\nfunction _nodeMatch(state, pattern, value, flags) {\n  if(!('@id' in value)) {\n    return false;\n  }\n  const nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\nfunction _valueMatch(pattern, value) {\n  const v1 = value['@value'];\n  const t1 = value['@type'];\n  const l1 = value['@language'];\n  const v2 = pattern['@value'] ?\n    (types.isArray(pattern['@value']) ?\n      pattern['@value'] : [pattern['@value']]) :\n    [];\n  const t2 = pattern['@type'] ?\n    (types.isArray(pattern['@type']) ?\n      pattern['@type'] : [pattern['@type']]) :\n    [];\n  const l2 = pattern['@language'] ?\n    (types.isArray(pattern['@language']) ?\n      pattern['@language'] : [pattern['@language']]) :\n    [];\n\n  if(v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n  if(!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n  if(!(!t1 && t2.length === 0 || t2.includes(t1) || t1 &&\n    types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n  if(!(!l1 && l2.length === 0 || l2.includes(l1) || l1 &&\n    types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n  return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}