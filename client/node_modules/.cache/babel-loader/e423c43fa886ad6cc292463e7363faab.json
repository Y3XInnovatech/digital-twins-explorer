{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/interfaces';\nimport { DetailsList } from './DetailsList';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType } from '../../Shimmer';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nvar getClassNames = classNamesFunction();\nvar SHIMMER_INITIAL_ITEMS = 10;\nvar DEFAULT_SHIMMER_HEIGHT = 7;\nvar SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\nvar ShimmeredDetailsListBase = /** @class */function (_super) {\n  __extends(ShimmeredDetailsListBase, _super);\n  function ShimmeredDetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._onRenderShimmerPlaceholder = function (index, rowProps) {\n      var onRenderCustomPlaceholder = _this.props.onRenderCustomPlaceholder;\n      var placeholderElements = onRenderCustomPlaceholder ? onRenderCustomPlaceholder(rowProps, index, _this._renderDefaultShimmerPlaceholder) : _this._renderDefaultShimmerPlaceholder(rowProps);\n      return React.createElement(Shimmer, {\n        customElementsGroup: placeholderElements\n      });\n    };\n    _this._renderDefaultShimmerPlaceholder = function (rowProps) {\n      var columns = rowProps.columns,\n        compact = rowProps.compact,\n        selectionMode = rowProps.selectionMode,\n        checkboxVisibility = rowProps.checkboxVisibility,\n        _a = rowProps.cellStyleProps,\n        cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n      var rowHeight = DEFAULT_ROW_HEIGHTS.rowHeight,\n        compactRowHeight = DEFAULT_ROW_HEIGHTS.compactRowHeight;\n      // 1px to take into account the border-bottom of DetailsRow.\n      var gapHeight = compact ? compactRowHeight : rowHeight + 1;\n      var shimmerElementsRow = [];\n      var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n      if (showCheckbox) {\n        shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n          key: 'checkboxGap',\n          shimmerElements: [{\n            type: ShimmerElementType.gap,\n            width: '40px',\n            height: gapHeight\n          }]\n        }));\n      }\n      columns.forEach(function (column, columnIdx) {\n        var shimmerElements = [];\n        var groupWidth = cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + column.calculatedWidth + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellLeftPadding,\n          height: gapHeight\n        });\n        if (column.isIconOnly) {\n          shimmerElements.push({\n            type: ShimmerElementType.line,\n            width: column.calculatedWidth,\n            height: column.calculatedWidth\n          });\n          shimmerElements.push({\n            type: ShimmerElementType.gap,\n            width: cellStyleProps.cellRightPadding,\n            height: gapHeight\n          });\n        } else {\n          shimmerElements.push({\n            type: ShimmerElementType.line,\n            width: column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n            height: DEFAULT_SHIMMER_HEIGHT\n          });\n          shimmerElements.push({\n            type: ShimmerElementType.gap,\n            width: cellStyleProps.cellRightPadding + (column.calculatedWidth - column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n            height: gapHeight\n          });\n        }\n        shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n          key: columnIdx,\n          width: groupWidth + \"px\",\n          shimmerElements: shimmerElements\n        }));\n      });\n      // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n      // until the column resizing logic is done.\n      shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n        key: 'endGap',\n        width: '100%',\n        shimmerElements: [{\n          type: ShimmerElementType.gap,\n          width: '100%',\n          height: gapHeight\n        }]\n      }));\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        }\n      }, shimmerElementsRow);\n    };\n    _this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n    return _this;\n  }\n  ShimmeredDetailsListBase.prototype.render = function () {\n    var _a = this.props,\n      detailsListStyles = _a.detailsListStyles,\n      enableShimmer = _a.enableShimmer,\n      items = _a.items,\n      listProps = _a.listProps,\n      onRenderCustomPlaceholder = _a.onRenderCustomPlaceholder,\n      removeFadingOverlay = _a.removeFadingOverlay,\n      shimmerLines = _a.shimmerLines,\n      styles = _a.styles,\n      theme = _a.theme,\n      ariaLabelForGrid = _a.ariaLabelForGrid,\n      ariaLabelForShimmer = _a.ariaLabelForShimmer,\n      restProps = __rest(_a, [\"detailsListStyles\", \"enableShimmer\", \"items\", \"listProps\", \"onRenderCustomPlaceholder\", \"removeFadingOverlay\", \"shimmerLines\", \"styles\", \"theme\", \"ariaLabelForGrid\", \"ariaLabelForShimmer\"]);\n    var listClassName = listProps && listProps.className;\n    this._classNames = getClassNames(styles, {\n      theme: theme\n    });\n    var newListProps = __assign(__assign({}, listProps), {\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName\n    });\n    return React.createElement(DetailsList, __assign({}, restProps, {\n      styles: detailsListStyles,\n      items: enableShimmer ? this._shimmerItems : items,\n      isPlaceholderData: enableShimmer,\n      ariaLabelForGrid: enableShimmer && ariaLabelForShimmer || ariaLabelForGrid,\n      onRenderMissingItem: this._onRenderShimmerPlaceholder,\n      listProps: newListProps\n    }));\n  };\n  return ShimmeredDetailsListBase;\n}(React.Component);\nexport { ShimmeredDetailsListBase };","map":{"version":3,"sources":["components/DetailsList/ShimmeredDetailsList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { SelectionMode } from '../../utilities/selection/interfaces';\nimport { DetailsList } from './DetailsList';\nimport { IDetailsRowProps } from './DetailsRow.types';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType, IShimmerElement } from '../../Shimmer';\nimport {\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles,\n} from './ShimmeredDetailsList.types';\nimport { CheckboxVisibility } from './DetailsList.types';\n\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\n\nconst getClassNames = classNamesFunction<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>();\n\nconst SHIMMER_INITIAL_ITEMS = 10;\nconst DEFAULT_SHIMMER_HEIGHT = 7;\nconst SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\nexport class ShimmeredDetailsListBase extends React.Component<IShimmeredDetailsListProps, {}> {\n  private _shimmerItems: null[];\n  private _classNames: IProcessedStyleSet<IShimmeredDetailsListStyles>;\n\n  constructor(props: IShimmeredDetailsListProps) {\n    super(props);\n\n    this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n  }\n\n  public render(): JSX.Element {\n    const {\n      detailsListStyles,\n      enableShimmer,\n      items,\n      listProps,\n      onRenderCustomPlaceholder,\n      removeFadingOverlay,\n      shimmerLines,\n      styles,\n      theme,\n      ariaLabelForGrid,\n      ariaLabelForShimmer,\n      ...restProps\n    } = this.props;\n\n    const listClassName = listProps && listProps.className;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n    });\n\n    const newListProps = {\n      ...listProps,\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName,\n    };\n\n    return (\n      <DetailsList\n        {...restProps}\n        styles={detailsListStyles}\n        items={enableShimmer ? this._shimmerItems : items}\n        isPlaceholderData={enableShimmer}\n        ariaLabelForGrid={(enableShimmer && ariaLabelForShimmer) || ariaLabelForGrid}\n        onRenderMissingItem={this._onRenderShimmerPlaceholder}\n        listProps={newListProps}\n      />\n    );\n  }\n\n  private _onRenderShimmerPlaceholder = (index: number, rowProps: IDetailsRowProps): React.ReactNode => {\n    const { onRenderCustomPlaceholder } = this.props;\n\n    const placeholderElements: React.ReactNode = onRenderCustomPlaceholder\n      ? onRenderCustomPlaceholder(rowProps, index, this._renderDefaultShimmerPlaceholder)\n      : this._renderDefaultShimmerPlaceholder(rowProps);\n\n    return <Shimmer customElementsGroup={placeholderElements} />;\n  };\n\n  private _renderDefaultShimmerPlaceholder = (rowProps: IDetailsRowProps): React.ReactNode => {\n    const { columns, compact, selectionMode, checkboxVisibility, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = rowProps;\n\n    const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n    // 1px to take into account the border-bottom of DetailsRow.\n    const gapHeight: number = compact ? compactRowHeight : rowHeight + 1;\n\n    const shimmerElementsRow: JSX.Element[] = [];\n\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n    if (showCheckbox) {\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup\n          key={'checkboxGap'}\n          shimmerElements={[{ type: ShimmerElementType.gap, width: '40px', height: gapHeight }]}\n        />,\n      );\n    }\n\n    columns.forEach((column, columnIdx) => {\n      const shimmerElements: IShimmerElement[] = [];\n      const groupWidth: number =\n        cellStyleProps.cellLeftPadding +\n        cellStyleProps.cellRightPadding +\n        column.calculatedWidth! +\n        (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      shimmerElements.push({\n        type: ShimmerElementType.gap,\n        width: cellStyleProps.cellLeftPadding,\n        height: gapHeight,\n      });\n\n      if (column.isIconOnly) {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth!,\n          height: column.calculatedWidth!,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellRightPadding,\n          height: gapHeight,\n        });\n      } else {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n          height: DEFAULT_SHIMMER_HEIGHT,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width:\n            cellStyleProps.cellRightPadding +\n            (column.calculatedWidth! - column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          height: gapHeight,\n        });\n      }\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup key={columnIdx} width={`${groupWidth}px`} shimmerElements={shimmerElements} />,\n      );\n    });\n    // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n    // until the column resizing logic is done.\n    shimmerElementsRow.push(\n      <ShimmerElementsGroup\n        key={'endGap'}\n        width={'100%'}\n        shimmerElements={[{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }]}\n      />,\n    );\n    return <div style={{ display: 'flex' }}>{shimmerElementsRow}</div>;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}