{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { Component } from \"react\";\nimport { TextField, DefaultButton, PrimaryButton, FocusZone, FocusZoneTabbableElements, Dropdown } from \"office-ui-fabric-react\";\nimport ModalComponent from \"../ModalComponent/ModalComponent\";\nimport { eventService } from \"../../services/EventService\";\nimport { settingsService } from \"../../services/SettingsService\";\nimport { configService } from \"../../services/ConfigService\";\nimport \"./ConfigurationFormComponent.scss\";\nconst USE_LOCAL_MODELS = process.env.USE_LOCAL_MODELS === \"true\";\nexport class ConfigurationFormComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.loadConfigurationSettings = evt => {\n      if (!USE_LOCAL_MODELS && evt.type === \"start\") {\n        this.setState({\n          showModal: true,\n          appAdtUrl: evt.appAdtUrl\n        });\n      }\n    };\n    this.saveConfigurationsSettings = e => {\n      e.preventDefault();\n      if (USE_LOCAL_MODELS) {\n        // eslint-disable-next-line no-console\n        console.log(\"Local models mode enabled. Skipping saving configuration.\");\n        this.resetModalState();\n        return;\n      }\n      const config = {\n        appAdtUrl: this.state.appAdtUrl\n      };\n      if (this.validateConfig(config)) {\n        this.saveEnvironment(config);\n        configService.setConfig(config);\n        eventService.publishConfigure({\n          type: \"end\",\n          config\n        });\n        this.resetModalState();\n      }\n    };\n    this.validateConfig = config => {\n      if (USE_LOCAL_MODELS) {\n        return true;\n      }\n      if (!config.appAdtUrl) {\n        eventService.publishError({\n          customMessage: \"All fields are required.\"\n        });\n        return false;\n      }\n      if (!config.appAdtUrl.startsWith(\"https\")) {\n        eventService.publishError({\n          customMessage: \"Azure Digital Twins URL must start with ‘https’.\"\n        });\n        return false;\n      }\n      const regexp = /^(https):\\/\\/[\\w-]+.api.[\\w-.]+.[\\w-.]+digitaltwins[\\w-.]+/gm;\n      if (!regexp.test(config.appAdtUrl)) {\n        eventService.publishError({\n          customMessage: \"Azure Digital Twins URL must match the format 'https://<name>.api.<dc>.<domain>'.\"\n        });\n        return false;\n      }\n      return true;\n    };\n    this.resetModalState = () => {\n      this.setState({\n        showModal: false,\n        appAdtUrl: \"\"\n      });\n    };\n    this.state = {\n      showModal: false,\n      appAdtUrl: \"\",\n      environmentOptions: [],\n      isEnvironmentSelected: false\n    };\n    this.environments = settingsService.environments;\n  }\n  async componentDidMount() {\n    if (USE_LOCAL_MODELS) {\n      // eslint-disable-next-line no-console\n      console.log(\"Local models mode enabled. Skipping Azure Digital Twins URL configuration.\");\n      return;\n    }\n    eventService.subscribeConfigure(evt => {\n      this.loadConfigurationSettings(evt);\n    });\n    if (this.environments) {\n      this.setState({\n        environmentOptions: this.environments.map(env => env.name)\n      });\n    }\n    let config = {};\n    try {\n      config = await configService.getConfig();\n    } catch (exc) {\n      config = {};\n    }\n    if (config.appAdtUrl) {\n      this.setState({\n        isEnvironmentSelected: true\n      });\n    }\n  }\n}","map":{"version":3,"names":["React","Component","TextField","DefaultButton","PrimaryButton","FocusZone","FocusZoneTabbableElements","Dropdown","ModalComponent","eventService","settingsService","configService","USE_LOCAL_MODELS","process","env","ConfigurationFormComponent","constructor","props","loadConfigurationSettings","evt","type","setState","showModal","appAdtUrl","saveConfigurationsSettings","e","preventDefault","console","log","resetModalState","config","state","validateConfig","saveEnvironment","setConfig","publishConfigure","publishError","customMessage","startsWith","regexp","test","environmentOptions","isEnvironmentSelected","environments","componentDidMount","subscribeConfigure","map","name","getConfig","exc"],"sources":["/home/saharsh/digital-twins-explorer/client/src/components/ConfigurationFormComponent/ConfigurationFormComponent.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { Component } from \"react\";\nimport {\n  TextField,\n  DefaultButton,\n  PrimaryButton,\n  FocusZone,\n  FocusZoneTabbableElements,\n  Dropdown\n} from \"office-ui-fabric-react\";\nimport ModalComponent from \"../ModalComponent/ModalComponent\";\nimport { eventService } from \"../../services/EventService\";\nimport { settingsService } from \"../../services/SettingsService\";\nimport { configService } from \"../../services/ConfigService\";\n\nimport \"./ConfigurationFormComponent.scss\";\n\nconst USE_LOCAL_MODELS = process.env.USE_LOCAL_MODELS === \"true\";\n\nexport class ConfigurationFormComponent extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false,\n      appAdtUrl: \"\",\n      environmentOptions: [],\n      isEnvironmentSelected: false\n    };\n    this.environments = settingsService.environments;\n  }\n\n  async componentDidMount() {\n    if (USE_LOCAL_MODELS) {\n      // eslint-disable-next-line no-console\n      console.log(\n        \"Local models mode enabled. Skipping Azure Digital Twins URL configuration.\"\n      );\n      return;\n    }\n\n    eventService.subscribeConfigure(evt => {\n      this.loadConfigurationSettings(evt);\n    });\n\n    if (this.environments) {\n      this.setState({\n        environmentOptions: this.environments.map(env => env.name)\n      });\n    }\n\n    let config = {};\n    try {\n      config = await configService.getConfig();\n    } catch (exc) {\n      config = {};\n    }\n\n    if (config.appAdtUrl) {\n      this.setState({ isEnvironmentSelected: true });\n    }\n  }\n\n  loadConfigurationSettings = evt => {\n    if (!USE_LOCAL_MODELS && evt.type === \"start\") {\n      this.setState({ showModal: true, appAdtUrl: evt.appAdtUrl });\n    }\n  };\n\n  saveConfigurationsSettings = e => {\n    e.preventDefault();\n    if (USE_LOCAL_MODELS) {\n      // eslint-disable-next-line no-console\n      console.log(\"Local models mode enabled. Skipping saving configuration.\");\n      this.resetModalState();\n      return;\n    }\n\n    const config = {\n      appAdtUrl: this.state.appAdtUrl\n    };\n\n    if (this.validateConfig(config)) {\n      this.saveEnvironment(config);\n      configService.setConfig(config);\n      eventService.publishConfigure({ type: \"end\", config });\n      this.resetModalState();\n    }\n  };\n\n  validateConfig = config => {\n    if (USE_LOCAL_MODELS) {\n      return true;\n    }\n\n    if (!config.appAdtUrl) {\n      eventService.publishError({\n        customMessage: \"All fields are required.\"\n      });\n      return false;\n    }\n\n    if (!config.appAdtUrl.startsWith(\"https\")) {\n      eventService.publishError({\n        customMessage: \"Azure Digital Twins URL must start with ‘https’.\"\n      });\n      return false;\n    }\n\n    const regexp\n      = /^(https):\\/\\/[\\w-]+.api.[\\w-.]+.[\\w-.]+digitaltwins[\\w-.]+/gm;\n    if (!regexp.test(config.appAdtUrl)) {\n      eventService.publishError({\n        customMessage:\n          \"Azure Digital Twins URL must match the format 'https://<name>.api.<dc>.<domain>'.\"\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  resetModalState = () => {\n    this.setState({\n      showModal: false,\n      appAdtUrl: \"\"\n    });\n  };\n\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}