{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpHeaders } from \"../httpHeaders\";\n/**\n * Authenticates to a service using an API key.\n */\nvar ApiKeyCredentials = /** @class */function () {\n  /**\n   * @param options - Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  function ApiKeyCredentials(options) {\n    if (!options || options && !options.inHeader && !options.inQuery) {\n      throw new Error(\"options cannot be null or undefined. Either \\\"inHeader\\\" or \\\"inQuery\\\" property of the options object needs to be provided.\");\n    }\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  ApiKeyCredentials.prototype.signRequest = function (webResource) {\n    if (!webResource) {\n      return Promise.reject(new Error(\"webResource cannot be null or undefined and must be of type \\\"object\\\".\"));\n    }\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n      for (var headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(\"url cannot be null in the request object.\"));\n      }\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n      for (var key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n        webResource.url += key + \"=\" + this.inQuery[key];\n      }\n    }\n    return Promise.resolve(webResource);\n  };\n  return ApiKeyCredentials;\n}();\nexport { ApiKeyCredentials };","map":{"version":3,"sources":["../../../src/credentials/apiKeyCredentials.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,WAAW,QAAQ,gBAAgB;AAkB5C;;AAEG;AACH,IAAA,iBAAA,GAAA,aAAA,YAAA;EAUE;;AAEG;EACH,SAAA,iBAAA,CAAY,OAAgC,EAAA;IAC1C,IAAI,CAAC,OAAO,IAAK,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,CAAC,OAAQ,EAAE;MAClE,MAAM,IAAI,KAAK,CACb,8HAA0H,CAC3H;IACF;IACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ;IAChC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO;EAChC;EAEA;;;;;AAKG;EACH,iBAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,WAA4B,EAAA;IACtC,IAAI,CAAC,WAAW,EAAE;MAChB,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CAAC,yEAAuE,CAAC,CACnF;IACF;IAED,IAAI,IAAI,CAAC,QAAQ,EAAE;MACjB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;QACxB,WAAW,CAAC,OAAO,GAAG,IAAI,WAAW,CAAA,CAAE;MACxC;MACD,KAAK,IAAM,UAAU,IAAI,IAAI,CAAC,QAAQ,EAAE;QACtC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;MAC/D;IACF;IAED,IAAI,IAAI,CAAC,OAAO,EAAE;MAChB,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;QACpB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;MAC9E;MACD,IAAI,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACpC,WAAW,CAAC,GAAG,IAAI,GAAG;MACvB;MACD,KAAK,IAAM,GAAG,IAAI,IAAI,CAAC,OAAO,EAAE;QAC9B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;UAClC,WAAW,CAAC,GAAG,IAAI,GAAG;QACvB;QACD,WAAW,CAAC,GAAG,IAAO,GAAG,GAAA,GAAA,GAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAG;MACjD;IACF;IAED,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;EACrC,CAAC;EACH,OAAA,iBAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { WebResourceLike } from \"../webResource\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\n\n/**\n * Describes the options to be provided while creating an instance of ApiKeyCredentials\n */\nexport interface ApiKeyCredentialOptions {\n  /**\n   * A key value pair of the header parameters that need to be applied to the request.\n   */\n  inHeader?: { [x: string]: any };\n  /**\n   * A key value pair of the query parameters that need to be applied to the request.\n   */\n  inQuery?: { [x: string]: any };\n}\n\n/**\n * Authenticates to a service using an API key.\n */\nexport class ApiKeyCredentials implements ServiceClientCredentials {\n  /**\n   * A key value pair of the header parameters that need to be applied to the request.\n   */\n  private readonly inHeader?: { [x: string]: any };\n  /**\n   * A key value pair of the query parameters that need to be applied to the request.\n   */\n  private readonly inQuery?: { [x: string]: any };\n\n  /**\n   * @param options - Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  constructor(options: ApiKeyCredentialOptions) {\n    if (!options || (options && !options.inHeader && !options.inQuery)) {\n      throw new Error(\n        `options cannot be null or undefined. Either \"inHeader\" or \"inQuery\" property of the options object needs to be provided.`\n      );\n    }\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  signRequest(webResource: WebResourceLike): Promise<WebResourceLike> {\n    if (!webResource) {\n      return Promise.reject(\n        new Error(`webResource cannot be null or undefined and must be of type \"object\".`)\n      );\n    }\n\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n      for (const headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(`url cannot be null in the request object.`));\n      }\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n      for (const key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n        webResource.url += `${key}=${this.inQuery[key]}`;\n      }\n    }\n\n    return Promise.resolve(webResource);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}