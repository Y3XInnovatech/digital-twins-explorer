{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DigitalTwinsClient } from \"@azure/digital-twins-core\";\nimport { DefaultHttpClient } from \"@azure/core-http\";\nimport { BatchService } from \"./BatchService\";\nimport { configService } from \"./ConfigService\";\nimport { REL_TYPE_ALL, REL_TYPE_INCOMING, REL_TYPE_OUTGOING, API_VERSION } from \"./Constants\";\nimport { print } from \"./LoggingService\";\nimport { settingsService } from \"./SettingsService\";\nimport { eventService } from \"./EventService\";\nconst getAllTwinsQuery = \"SELECT * FROM digitaltwins\";\nconst getDataFromQueryResponse = response => {\n  const list = [...response];\n  const data = {\n    twins: [],\n    relationships: [],\n    other: []\n  };\n  for (let i = 0; i < list.length; i++) {\n    const current = list[i];\n    if (current.$dtId && current.$metadata && current.$metadata.$model && !data.twins.some(t => t.$dtId === current.$dtId)) {\n      data.twins.push(current);\n      continue;\n    } else if (current.$relationshipId) {\n      data.relationships.push(current);\n      continue;\n    }\n    for (const k of Object.keys(current)) {\n      const v = current[k];\n      if (typeof v === \"object\") {\n        list.push(v);\n      } else if (Array.isArray(v)) {\n        v.forEach(x => list.push(x));\n      } else {\n        data.other.push(v);\n      }\n    }\n  }\n  return data;\n};\nclass CustomHttpClient {\n  constructor() {\n    this.client = new DefaultHttpClient();\n  }\n  sendRequest(httpRequest) {\n    const url = new URL(httpRequest.url);\n    url.searchParams.set(\"api-version\", API_VERSION);\n    httpRequest.headers.set(\"x-adt-host\", url.hostname);\n    const baseUrl = new URL(window.location.origin);\n    url.host = baseUrl.host;\n    url.pathname = `/api/proxy${url.pathname}`;\n    url.protocol = baseUrl.protocol;\n    httpRequest.url = url.toString();\n    return this.client.sendRequest(httpRequest);\n  }\n}\nclass ApiService {\n  constructor() {\n    this.client = null;\n  }\n  async initialize() {\n    const {\n      appAdtUrl\n    } = await configService.getConfig();\n    const nullTokenCredentials = {\n      getToken: () => null\n    };\n    const httpClient = new CustomHttpClient();\n    this.client = new DigitalTwinsClient(appAdtUrl, nullTokenCredentials, {\n      httpClient\n    });\n  }\n  async query(query, callback) {\n    await this.initialize();\n    let count = 1;\n    for await (const page of this.client.queryTwins(query).byPage()) {\n      print(`Ran query for twins, page ${count++}:`, \"info\");\n      print(JSON.stringify(page, null, 2), \"info\");\n      await callback(getDataFromQueryResponse(page.value));\n    }\n  }\n  async queryTwins(query) {\n    const list = [];\n    await this.query(query, ({\n      twins\n    }) => twins.forEach(x => list.push(x)));\n    return list;\n  }\n  async getAllTwins() {\n    return await this.queryTwins(getAllTwinsQuery);\n  }\n  async getTwinById(twinId) {\n    await this.initialize();\n    const response = await this.client.getDigitalTwin(twinId);\n    return response.body;\n  }\n  async addTwin(twinId, payload) {\n    await this.initialize();\n    return await this.client.upsertDigitalTwin(twinId, JSON.stringify(payload));\n  }\n  async updateTwin(twinId, patch) {\n    await this.initialize();\n    return await this.client.updateDigitalTwin(twinId, patch);\n  }\n  async updateRelationship(twinId, relationshipId, patch) {\n    await this.initialize();\n    return await this.client.updateRelationship(twinId, relationshipId, patch);\n  }\n  async queryRelationshipsPaged(twinIds, callback, type = REL_TYPE_OUTGOING) {\n    await this.initialize();\n    const operations = type === REL_TYPE_ALL ? [REL_TYPE_OUTGOING, REL_TYPE_INCOMING] : [type];\n    for (let i = 0; i < operations.length; i++) {\n      const op = operations[i];\n      const isFinalOp = i === operations.length - 1;\n      const basePropertyName = op === REL_TYPE_INCOMING ? \"$targetId\" : \"$sourceId\";\n      let count = 1;\n      const twinIdsList = twinIds.map(twinId => `'${twinId.replaceAll(\"'\", \"\\\\'\")}'`);\n      const query = `SELECT * FROM RELATIONSHIPS r WHERE r.${basePropertyName} IN [${twinIdsList.join(\",\")}]`;\n      for await (const page of this.client.queryTwins(query).byPage()) {\n        print(`Ran query for relationships for twins ${twinIds}, page ${count++}:`, \"info\");\n        print(JSON.stringify(page, null, 2), \"info\");\n\n        // Indicate to the caller that we're not done in the case where we are calling multiple operations\n        const callbackResponse = [...page.value];\n        if (page.continuationToken || !isFinalOp) {\n          callbackResponse.nextLink = true;\n        }\n        await callback(callbackResponse);\n      }\n    }\n  }\n  async queryRelationships(twinIds, type = REL_TYPE_OUTGOING) {\n    const list = [];\n    await this.queryRelationshipsPaged(twinIds, items => items.forEach(x => list.push(x)), type);\n    return list;\n  }\n  async addRelationship(sourceId, targetId, relationshipType, relationshipId, properties) {\n    await this.initialize();\n    return await this.client.upsertRelationship(sourceId, relationshipId, {\n      ...properties,\n      $relationshipName: relationshipType,\n      $targetId: targetId\n    });\n  }\n  async queryModels() {\n    await this.initialize();\n    const list = [];\n    const models = this.client.listModels([], true);\n    for await (const model of models) {\n      list.push(model);\n    }\n    return list;\n  }\n  async getModelById(modelId) {\n    await this.initialize();\n    return await this.client.getModel(modelId, true);\n  }\n  async addModels(models) {\n    await this.initialize();\n    return await this.client.createModels(models);\n  }\n  async deleteRelationship(twinId, relationshipId) {\n    await this.initialize();\n    print(`Deleting relationship ${relationshipId} for twin ${twinId}`, \"warning\");\n    await this.client.deleteRelationship(twinId, relationshipId);\n  }\n  async deleteTwin(twinId, skipRelationships = false) {\n    if (!skipRelationships) {\n      await this.deleteTwinRelationships(twinId);\n    }\n    print(`Deleting twin ${twinId}`, \"warning\");\n    await this.client.deleteDigitalTwin(twinId);\n  }\n  async deleteTwinRelationships(twinId, skipIncoming = false) {\n    await this.initialize();\n    const rels = await this.queryRelationships([twinId], REL_TYPE_OUTGOING);\n    for (const r of rels) {\n      await this.deleteRelationship(twinId, r.$relationshipId);\n    }\n    if (!skipIncoming) {\n      const incRels = await this.queryRelationships([twinId], REL_TYPE_INCOMING);\n      for (const r of incRels) {\n        await this.deleteRelationship(r.$sourceId, r.$relationshipId);\n      }\n    }\n  }\n  async deleteAllTwins(ids) {\n    await this.initialize();\n    const relsBs = new BatchService({\n      items: ids,\n      action: (item, resolve, reject) => {\n        this.deleteTwinRelationships(item, true).then(resolve, reject);\n      }\n    });\n    await relsBs.run();\n    const twinsBs = new BatchService({\n      items: ids,\n      action: (item, resolve, reject) => {\n        this.deleteTwin(item, true).then(resolve, reject);\n      }\n    });\n    await twinsBs.run();\n    print(\"*** Delete complete\", \"warning\");\n  }\n  async deleteModel(id) {\n    await this.initialize();\n    await this.client.deleteModel(id);\n    print(`*** Delete complete for model with ID: ${id}`, \"warning\");\n  }\n  async getRelationship(sourceTwinId, relationshipId) {\n    print(`Get relationship with id ${relationshipId} for source twin ${sourceTwinId}`, \"info\");\n    await this.initialize();\n    return await this.client.getRelationship(sourceTwinId, relationshipId);\n  }\n  async getEventRoutes() {\n    print(`Get event routes`, \"info\");\n    await this.initialize();\n    const list = [];\n    const eventRoutes = this.client.listEventRoutes();\n    for await (const eventRoute of eventRoutes) {\n      list.push(eventRoute);\n    }\n    return list;\n  }\n  async getEventRoute(routeId) {\n    print(`Get event route with id ${routeId}`, \"info\");\n    await this.initialize();\n    return await this.client.getEventRoute(routeId);\n  }\n  async addEventRoute(routeId, endpointId, filter) {\n    print(`Adding event route with id ${routeId}`, \"info\");\n    await this.initialize();\n    const eventRoute = {\n      id: routeId,\n      endpointId,\n      filter\n    };\n    return await this.client.upsertEventRoute(routeId, {\n      options: eventRoute\n    });\n  }\n  async deleteEventRoute(routeId) {\n    print(`Deleting event route with id ${routeId}`, \"warning\");\n    await this.initialize();\n    await this.client.deleteEventRoute(routeId);\n    print(`*** Delete complete for event route with ID: ${routeId}`, \"warning\");\n  }\n  async decommissionModel(modelId) {\n    print(`Decommission model with ID: ${modelId}`, \"info\");\n    await this.initialize();\n    await this.client.decomissionModel(modelId);\n  }\n}\nclass CachedApiService extends ApiService {\n  constructor() {\n    super();\n    this.cache = {\n      relationships: {},\n      models: []\n    };\n    eventService.subscribeClearCache(() => {\n      this.clearCache();\n    });\n  }\n  async addModels(models) {\n    this.cache.models = [];\n    return await super.addModels(models);\n  }\n  async deleteModel(id) {\n    this.cache.models = [];\n    return await super.deleteModel(id);\n  }\n  async getModelById(id) {\n    if (!settingsService.caching) {\n      this.clearCache();\n      return await super.getModelById(id);\n    }\n    if (this.cache.models.length <= 0) {\n      await this.updateModelCache();\n    }\n    return this.cache.models.find(m => m.id === id);\n  }\n  async queryModels(bypassCache = false) {\n    if (!settingsService.caching || bypassCache) {\n      this.clearCache();\n      return await super.queryModels();\n    }\n    if (this.cache.models.length <= 0) {\n      await this.updateModelCache();\n    }\n    return this.cache.models;\n  }\n  async deleteAllTwins(ids) {\n    this.cache.relationships = {};\n    return await super.deleteAllTwins(ids);\n  }\n  async updateModelCache() {\n    const models = await super.queryModels();\n    this.cache.models = models;\n  }\n  async addRelationship(sourceId, targetId, relationshipType, relationshipId, properties) {\n    for (const id of [sourceId, targetId]) {\n      if (this.cache.relationships[id]) {\n        delete this.cache.relationships[id];\n      }\n    }\n    return await super.addRelationship(sourceId, targetId, relationshipType, relationshipId, properties);\n  }\n  async deleteRelationship(twinId, relationshipId) {\n    if (this.cache.relationships[twinId]) {\n      delete this.cache.relationships[twinId];\n    }\n    return await super.deleteRelationship(twinId, relationshipId);\n  }\n  async queryRelationshipsPaged(twinIds, callback, type = REL_TYPE_OUTGOING) {\n    if (!settingsService.caching) {\n      this.clearCache();\n      await super.queryRelationshipsPaged(twinIds, callback, type);\n      return;\n    }\n    const pendingTwins = [];\n    let relationshipsResult = [];\n    twinIds.forEach(twinId => {\n      const results = this.cache.relationships[twinId];\n      if (results && results[type]) {\n        relationshipsResult = relationshipsResult.concat(results[type]);\n      } else {\n        pendingTwins.push(twinId);\n      }\n      if (!results) {\n        this.cache.relationships[twinId] = {};\n      }\n    });\n    if (pendingTwins.length > 0) {\n      await super.queryRelationshipsPaged(pendingTwins, items => {\n        items.forEach(x => relationshipsResult.push(x));\n        pendingTwins.forEach(twinId => {\n          this.cache.relationships[twinId][type] = items.filter(item => item.$sourceId === twinId);\n        });\n      }, type);\n    }\n    await callback(relationshipsResult);\n  }\n  clearCache() {\n    this.cache.relationships = {};\n    this.cache.models = [];\n  }\n}\nexport const apiService = new CachedApiService();","map":{"version":3,"names":["DigitalTwinsClient","DefaultHttpClient","BatchService","configService","REL_TYPE_ALL","REL_TYPE_INCOMING","REL_TYPE_OUTGOING","API_VERSION","print","settingsService","eventService","getAllTwinsQuery","getDataFromQueryResponse","response","list","data","twins","relationships","other","i","length","current","$dtId","$metadata","$model","some","t","push","$relationshipId","k","Object","keys","v","Array","isArray","forEach","x","CustomHttpClient","constructor","client","sendRequest","httpRequest","url","URL","searchParams","set","headers","hostname","baseUrl","window","location","origin","host","pathname","protocol","toString","ApiService","initialize","appAdtUrl","getConfig","nullTokenCredentials","getToken","httpClient","query","callback","count","page","queryTwins","byPage","JSON","stringify","value","getAllTwins","getTwinById","twinId","getDigitalTwin","body","addTwin","payload","upsertDigitalTwin","updateTwin","patch","updateDigitalTwin","updateRelationship","relationshipId","queryRelationshipsPaged","twinIds","type","operations","op","isFinalOp","basePropertyName","twinIdsList","map","replaceAll","join","callbackResponse","continuationToken","nextLink","queryRelationships","items","addRelationship","sourceId","targetId","relationshipType","properties","upsertRelationship","$relationshipName","$targetId","queryModels","models","listModels","model","getModelById","modelId","getModel","addModels","createModels","deleteRelationship","deleteTwin","skipRelationships","deleteTwinRelationships","deleteDigitalTwin","skipIncoming","rels","r","incRels","$sourceId","deleteAllTwins","ids","relsBs","action","item","resolve","reject","then","run","twinsBs","deleteModel","id","getRelationship","sourceTwinId","getEventRoutes","eventRoutes","listEventRoutes","eventRoute","getEventRoute","routeId","addEventRoute","endpointId","filter","upsertEventRoute","options","deleteEventRoute","decommissionModel","decomissionModel","CachedApiService","cache","subscribeClearCache","clearCache","caching","updateModelCache","find","m","bypassCache","pendingTwins","relationshipsResult","results","concat","apiService"],"sources":["/home/saharsh/digital-twins-explorer/client/src/services/ApiService.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DigitalTwinsClient } from \"@azure/digital-twins-core\";\nimport { DefaultHttpClient } from \"@azure/core-http\";\nimport { BatchService } from \"./BatchService\";\nimport { configService } from \"./ConfigService\";\nimport { REL_TYPE_ALL, REL_TYPE_INCOMING, REL_TYPE_OUTGOING, API_VERSION } from \"./Constants\";\nimport { print } from \"./LoggingService\";\nimport { settingsService } from \"./SettingsService\";\nimport { eventService } from \"./EventService\";\n\n\nconst getAllTwinsQuery = \"SELECT * FROM digitaltwins\";\n\nconst getDataFromQueryResponse = response => {\n  const list = [ ...response ];\n  const data = {\n    twins: [],\n    relationships: [],\n    other: []\n  };\n  for (let i = 0; i < list.length; i++) {\n    const current = list[i];\n    if (current.$dtId && current.$metadata && current.$metadata.$model && !data.twins.some(t => t.$dtId === current.$dtId)) {\n      data.twins.push(current);\n      continue;\n    } else if (current.$relationshipId) {\n      data.relationships.push(current);\n      continue;\n    }\n\n    for (const k of Object.keys(current)) {\n      const v = current[k];\n      if (typeof v === \"object\") {\n        list.push(v);\n      } else if (Array.isArray(v)) {\n        v.forEach(x => list.push(x));\n      } else {\n        data.other.push(v);\n      }\n    }\n  }\n  return data;\n};\nclass CustomHttpClient {\n\n  constructor() {\n    this.client = new DefaultHttpClient();\n  }\n\n  sendRequest(httpRequest) {\n    const url = new URL(httpRequest.url);\n    url.searchParams.set(\"api-version\", API_VERSION);\n    httpRequest.headers.set(\"x-adt-host\", url.hostname);\n\n    const baseUrl = new URL(window.location.origin);\n    url.host = baseUrl.host;\n    url.pathname = `/api/proxy${url.pathname}`;\n    url.protocol = baseUrl.protocol;\n    httpRequest.url = url.toString();\n\n    return this.client.sendRequest(httpRequest);\n  }\n\n}\n\nclass ApiService {\n\n  constructor() {\n    this.client = null;\n  }\n\n  async initialize() {\n    const { appAdtUrl } = await configService.getConfig();\n\n    const nullTokenCredentials = {\n      getToken: () => null\n    };\n    const httpClient = new CustomHttpClient();\n    this.client = new DigitalTwinsClient(appAdtUrl, nullTokenCredentials, { httpClient });\n  }\n\n  async query(query, callback) {\n    await this.initialize();\n\n    let count = 1;\n    for await (const page of this.client.queryTwins(query).byPage()) {\n      print(`Ran query for twins, page ${count++}:`, \"info\");\n      print(JSON.stringify(page, null, 2), \"info\");\n      await callback(getDataFromQueryResponse(page.value));\n    }\n  }\n\n  async queryTwins(query) {\n    const list = [];\n    await this.query(query, ({ twins }) => twins.forEach(x => list.push(x)));\n\n    return list;\n  }\n\n  async getAllTwins() {\n    return await this.queryTwins(getAllTwinsQuery);\n  }\n\n  async getTwinById(twinId) {\n    await this.initialize();\n\n    const response = await this.client.getDigitalTwin(twinId);\n    return response.body;\n  }\n\n  async addTwin(twinId, payload) {\n    await this.initialize();\n    return await this.client.upsertDigitalTwin(twinId, JSON.stringify(payload));\n  }\n\n  async updateTwin(twinId, patch) {\n    await this.initialize();\n\n    return await this.client.updateDigitalTwin(twinId, patch);\n  }\n\n  async updateRelationship(twinId, relationshipId, patch) {\n    await this.initialize();\n\n    return await this.client.updateRelationship(twinId, relationshipId, patch);\n  }\n\n  async queryRelationshipsPaged(twinIds, callback, type = REL_TYPE_OUTGOING) {\n    await this.initialize();\n\n    const operations = type === REL_TYPE_ALL ? [ REL_TYPE_OUTGOING, REL_TYPE_INCOMING ] : [ type ];\n    for (let i = 0; i < operations.length; i++) {\n      const op = operations[i];\n      const isFinalOp = i === operations.length - 1;\n      const basePropertyName = op === REL_TYPE_INCOMING ? \"$targetId\" : \"$sourceId\";\n      let count = 1;\n      const twinIdsList = twinIds.map(twinId => `'${twinId.replaceAll(\"'\", \"\\\\'\")}'`);\n      const query = `SELECT * FROM RELATIONSHIPS r WHERE r.${basePropertyName} IN [${twinIdsList.join(\",\")}]`;\n      for await (const page of this.client.queryTwins(query).byPage()) {\n        print(`Ran query for relationships for twins ${twinIds}, page ${count++}:`, \"info\");\n        print(JSON.stringify(page, null, 2), \"info\");\n\n        // Indicate to the caller that we're not done in the case where we are calling multiple operations\n        const callbackResponse = [ ...page.value ];\n        if (page.continuationToken || !isFinalOp) {\n          callbackResponse.nextLink = true;\n        }\n\n        await callback(callbackResponse);\n      }\n    }\n  }\n\n  async queryRelationships(twinIds, type = REL_TYPE_OUTGOING) {\n    const list = [];\n    await this.queryRelationshipsPaged(twinIds, items => items.forEach(x => list.push(x)), type);\n\n    return list;\n  }\n\n  async addRelationship(sourceId, targetId, relationshipType, relationshipId, properties) {\n    await this.initialize();\n\n    return await this.client.upsertRelationship(sourceId, relationshipId,\n      { ...properties, $relationshipName: relationshipType, $targetId: targetId });\n  }\n\n  async queryModels() {\n    await this.initialize();\n\n    const list = [];\n    const models = this.client.listModels([], true);\n    for await (const model of models) {\n      list.push(model);\n    }\n\n    return list;\n  }\n\n  async getModelById(modelId) {\n    await this.initialize();\n\n    return await this.client.getModel(modelId, true);\n  }\n\n  async addModels(models) {\n    await this.initialize();\n\n    return await this.client.createModels(models);\n  }\n\n  async deleteRelationship(twinId, relationshipId) {\n    await this.initialize();\n\n    print(`Deleting relationship ${relationshipId} for twin ${twinId}`, \"warning\");\n    await this.client.deleteRelationship(twinId, relationshipId);\n  }\n\n  async deleteTwin(twinId, skipRelationships = false) {\n    if (!skipRelationships) {\n      await this.deleteTwinRelationships(twinId);\n    }\n\n    print(`Deleting twin ${twinId}`, \"warning\");\n    await this.client.deleteDigitalTwin(twinId);\n  }\n\n  async deleteTwinRelationships(twinId, skipIncoming = false) {\n    await this.initialize();\n\n    const rels = await this.queryRelationships([ twinId ], REL_TYPE_OUTGOING);\n    for (const r of rels) {\n      await this.deleteRelationship(twinId, r.$relationshipId);\n    }\n\n    if (!skipIncoming) {\n      const incRels = await this.queryRelationships([ twinId ], REL_TYPE_INCOMING);\n      for (const r of incRels) {\n        await this.deleteRelationship(r.$sourceId, r.$relationshipId);\n      }\n    }\n  }\n\n  async deleteAllTwins(ids) {\n    await this.initialize();\n\n    const relsBs = new BatchService({\n      items: ids,\n      action: (item, resolve, reject) => {\n        this.deleteTwinRelationships(item, true)\n          .then(resolve, reject);\n      }\n    });\n    await relsBs.run();\n\n    const twinsBs = new BatchService({\n      items: ids,\n      action: (item, resolve, reject) => {\n        this.deleteTwin(item, true)\n          .then(resolve, reject);\n      }\n    });\n    await twinsBs.run();\n\n    print(\"*** Delete complete\", \"warning\");\n  }\n\n  async deleteModel(id) {\n    await this.initialize();\n    await this.client.deleteModel(id);\n    print(`*** Delete complete for model with ID: ${id}`, \"warning\");\n  }\n\n  async getRelationship(sourceTwinId, relationshipId) {\n    print(`Get relationship with id ${relationshipId} for source twin ${sourceTwinId}`, \"info\");\n    await this.initialize();\n    return await this.client.getRelationship(sourceTwinId, relationshipId);\n  }\n\n  async getEventRoutes() {\n    print(`Get event routes`, \"info\");\n    await this.initialize();\n\n    const list = [];\n    const eventRoutes = this.client.listEventRoutes();\n    for await (const eventRoute of eventRoutes) {\n      list.push(eventRoute);\n    }\n    return list;\n  }\n\n  async getEventRoute(routeId) {\n    print(`Get event route with id ${routeId}`, \"info\");\n    await this.initialize();\n    return await this.client.getEventRoute(routeId);\n  }\n\n  async addEventRoute(routeId, endpointId, filter) {\n    print(`Adding event route with id ${routeId}`, \"info\");\n    await this.initialize();\n    const eventRoute = { id: routeId, endpointId, filter };\n    return await this.client.upsertEventRoute(routeId, { options: eventRoute });\n  }\n\n  async deleteEventRoute(routeId) {\n    print(`Deleting event route with id ${routeId}`, \"warning\");\n    await this.initialize();\n    await this.client.deleteEventRoute(routeId);\n    print(`*** Delete complete for event route with ID: ${routeId}`, \"warning\");\n  }\n\n  async decommissionModel(modelId) {\n    print(`Decommission model with ID: ${modelId}`, \"info\");\n    await this.initialize();\n    await this.client.decomissionModel(modelId);\n  }\n\n}\n\nclass CachedApiService extends ApiService {\n\n  constructor() {\n    super();\n    this.cache = { relationships: {}, models: [] };\n    eventService.subscribeClearCache(() => {\n      this.clearCache();\n    });\n  }\n\n  async addModels(models) {\n    this.cache.models = [];\n    return await super.addModels(models);\n  }\n\n  async deleteModel(id) {\n    this.cache.models = [];\n    return await super.deleteModel(id);\n  }\n\n  async getModelById(id) {\n    if (!settingsService.caching) {\n      this.clearCache();\n      return await super.getModelById(id);\n    }\n\n    if (this.cache.models.length <= 0) {\n      await this.updateModelCache();\n    }\n    return this.cache.models.find(m => m.id === id);\n  }\n\n  async queryModels(bypassCache = false) {\n    if (!settingsService.caching || bypassCache) {\n      this.clearCache();\n      return await super.queryModels();\n    }\n\n    if (this.cache.models.length <= 0) {\n      await this.updateModelCache();\n    }\n    return this.cache.models;\n  }\n\n  async deleteAllTwins(ids) {\n    this.cache.relationships = {};\n    return await super.deleteAllTwins(ids);\n  }\n\n  async updateModelCache() {\n    const models = await super.queryModels();\n    this.cache.models = models;\n  }\n\n  async addRelationship(sourceId, targetId, relationshipType, relationshipId, properties) {\n    for (const id of [ sourceId, targetId ]) {\n      if (this.cache.relationships[id]) {\n        delete this.cache.relationships[id];\n      }\n    }\n    return await super.addRelationship(sourceId, targetId, relationshipType, relationshipId, properties);\n  }\n\n  async deleteRelationship(twinId, relationshipId) {\n    if (this.cache.relationships[twinId]) {\n      delete this.cache.relationships[twinId];\n    }\n    return await super.deleteRelationship(twinId, relationshipId);\n  }\n\n  async queryRelationshipsPaged(twinIds, callback, type = REL_TYPE_OUTGOING) {\n    if (!settingsService.caching) {\n      this.clearCache();\n      await super.queryRelationshipsPaged(twinIds, callback, type);\n      return;\n    }\n\n    const pendingTwins = [];\n    let relationshipsResult = [];\n    twinIds.forEach(twinId => {\n      const results = this.cache.relationships[twinId];\n      if (results && results[type]) {\n        relationshipsResult = relationshipsResult.concat(results[type]);\n      } else {\n        pendingTwins.push(twinId);\n      }\n\n      if (!results) {\n        this.cache.relationships[twinId] = {};\n      }\n    });\n\n    if (pendingTwins.length > 0) {\n      await super.queryRelationshipsPaged(pendingTwins, items => {\n        items.forEach(x => relationshipsResult.push(x));\n        pendingTwins.forEach(twinId => {\n          this.cache.relationships[twinId][type] = items.filter(item => item.$sourceId === twinId);\n        });\n      }, type);\n    }\n    await callback(relationshipsResult);\n  }\n\n  clearCache() {\n    this.cache.relationships = {};\n    this.cache.models = [];\n  }\n\n}\n\nexport const apiService = new CachedApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}