{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '../../Utilities';\nimport { CommandButton } from '../../Button';\nvar ButtonGridCell = /** @class */function (_super) {\n  __extends(ButtonGridCell, _super);\n  function ButtonGridCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._onClick = function () {\n      var _a = _this.props,\n        onClick = _a.onClick,\n        disabled = _a.disabled,\n        item = _a.item;\n      if (onClick && !disabled) {\n        onClick(item);\n      }\n    };\n    _this._onMouseEnter = function (ev) {\n      var _a = _this.props,\n        onHover = _a.onHover,\n        disabled = _a.disabled,\n        item = _a.item,\n        onMouseEnter = _a.onMouseEnter;\n      var didUpdateOnEnter = onMouseEnter && onMouseEnter(ev);\n      if (!didUpdateOnEnter && onHover && !disabled) {\n        onHover(item);\n      }\n    };\n    _this._onMouseMove = function (ev) {\n      var _a = _this.props,\n        onHover = _a.onHover,\n        disabled = _a.disabled,\n        item = _a.item,\n        onMouseMove = _a.onMouseMove;\n      var didUpdateOnMove = onMouseMove && onMouseMove(ev);\n      if (!didUpdateOnMove && onHover && !disabled) {\n        onHover(item);\n      }\n    };\n    _this._onMouseLeave = function (ev) {\n      var _a = _this.props,\n        onHover = _a.onHover,\n        disabled = _a.disabled,\n        onMouseLeave = _a.onMouseLeave;\n      var didUpdateOnLeave = onMouseLeave && onMouseLeave(ev);\n      if (!didUpdateOnLeave && onHover && !disabled) {\n        onHover();\n      }\n    };\n    _this._onFocus = function () {\n      var _a = _this.props,\n        onFocus = _a.onFocus,\n        disabled = _a.disabled,\n        item = _a.item;\n      if (onFocus && !disabled) {\n        onFocus(item);\n      }\n    };\n    return _this;\n  }\n  ButtonGridCell.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      item = _b.item,\n      id = _b.id,\n      className = _b.className,\n      role = _b.role,\n      selected = _b.selected,\n      disabled = _b.disabled,\n      onRenderItem = _b.onRenderItem,\n      cellDisabledStyle = _b.cellDisabledStyle,\n      cellIsSelectedStyle = _b.cellIsSelectedStyle,\n      index = _b.index,\n      label = _b.label,\n      getClassNames = _b.getClassNames;\n    return React.createElement(CommandButton, {\n      id: id,\n      \"data-index\": index,\n      \"data-is-focusable\": true,\n      disabled: disabled,\n      className: css(className, (_a = {}, _a['' + cellIsSelectedStyle] = selected, _a['' + cellDisabledStyle] = disabled, _a)),\n      onClick: this._onClick,\n      onMouseEnter: this._onMouseEnter,\n      onMouseMove: this._onMouseMove,\n      onMouseLeave: this._onMouseLeave,\n      onFocus: this._onFocus,\n      role: role,\n      \"aria-selected\": selected,\n      ariaLabel: label,\n      title: label,\n      getClassNames: getClassNames\n    }, onRenderItem(item));\n  };\n  ButtonGridCell.defaultProps = {\n    disabled: false\n  };\n  return ButtonGridCell;\n}(React.Component);\nexport { ButtonGridCell };\n/**\n * @deprecated - use ButtonGridCell instead\n */\nexport var GridCell = ButtonGridCell;","map":{"version":3,"sources":["utilities/ButtonGrid/ButtonGridCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '../../Utilities';\nimport { IButtonGridCellProps } from './ButtonGridCell.types';\nimport { CommandButton } from '../../Button';\n\nexport class ButtonGridCell<T, P extends IButtonGridCellProps<T>> extends React.Component<P, {}> {\n  public static defaultProps = {\n    disabled: false,\n  };\n\n  public render(): JSX.Element {\n    const {\n      item,\n      id,\n      className,\n      role,\n      selected,\n      disabled,\n      onRenderItem,\n      cellDisabledStyle,\n      cellIsSelectedStyle,\n      index,\n      label,\n      getClassNames,\n    } = this.props;\n\n    return (\n      <CommandButton\n        id={id}\n        data-index={index}\n        data-is-focusable={true}\n        disabled={disabled}\n        className={css(className, {\n          ['' + cellIsSelectedStyle]: selected,\n          ['' + cellDisabledStyle]: disabled,\n        })}\n        onClick={this._onClick}\n        onMouseEnter={this._onMouseEnter}\n        onMouseMove={this._onMouseMove}\n        onMouseLeave={this._onMouseLeave}\n        onFocus={this._onFocus}\n        role={role}\n        aria-selected={selected}\n        ariaLabel={label}\n        title={label}\n        getClassNames={getClassNames}\n      >\n        {onRenderItem(item)}\n      </CommandButton>\n    );\n  }\n\n  private _onClick = (): void => {\n    const { onClick, disabled, item } = this.props as P;\n\n    if (onClick && !disabled) {\n      onClick(item);\n    }\n  };\n\n  private _onMouseEnter = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, item, onMouseEnter } = this.props as P;\n\n    const didUpdateOnEnter = onMouseEnter && onMouseEnter(ev);\n\n    if (!didUpdateOnEnter && onHover && !disabled) {\n      onHover(item);\n    }\n  };\n\n  private _onMouseMove = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, item, onMouseMove } = this.props as P;\n\n    const didUpdateOnMove = onMouseMove && onMouseMove(ev);\n\n    if (!didUpdateOnMove && onHover && !disabled) {\n      onHover(item);\n    }\n  };\n\n  private _onMouseLeave = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, onMouseLeave } = this.props as P;\n\n    const didUpdateOnLeave = onMouseLeave && onMouseLeave(ev);\n\n    if (!didUpdateOnLeave && onHover && !disabled) {\n      onHover();\n    }\n  };\n\n  private _onFocus = (): void => {\n    const { onFocus, disabled, item } = this.props as P;\n\n    if (onFocus && !disabled) {\n      onFocus(item);\n    }\n  };\n}\n\n/**\n * @deprecated - use ButtonGridCell instead\n */\nexport const GridCell = ButtonGridCell;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}