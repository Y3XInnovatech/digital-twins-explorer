{"ast":null,"code":"import React__default, { useCallback, useState, useRef, useEffect } from 'react';\nimport { w as withErrorBoundary, S as SceneView } from './SceneView-26dd62bf.js';\nimport { u as useAdapter } from './StableGuidRngProvider-bd327dc7.js';\nimport { cx as memoizeFunction, bX as mergeStyleSets, cd as useTheme, cJ as ActionButton, G as GlobeTheme, e4 as hexToColor4, e5 as rgb2hsv, e6 as rgb2hex, e7 as hsv2rgb } from './Interfaces-f1972c79.js';\nimport { s as styleInject, B as BaseComponent } from './BaseComponent-0082350c.js';\nvar css_248z = \".cb-adt-3dglobe-wrapper {\\n  height: 100%;\\n  width: 100%; }\\n\";\nstyleInject(css_248z);\nvar ModelLabelClassPrefix = 'cb-model-label';\nvar classNames = {\n  badge: ModelLabelClassPrefix + \"-badge\"\n};\nvar getStyles = memoizeFunction(function (theme) {\n  return mergeStyleSets({\n    badge: [classNames.badge, {\n      borderRadius: 25,\n      background: theme.semanticColors.buttonBackground,\n      padding: '8px 16px',\n      border: \"1px solid \" + theme.palette.neutralLight,\n      color: theme.semanticColors.bodyText,\n      width: 'fit-content'\n    }]\n  });\n});\nvar ModelLabel = function (_a) {\n  var label = _a.label,\n    id = _a.id,\n    onLabelClick = _a.onLabelClick;\n  var theme = useTheme();\n  var styles = getStyles(theme);\n  var onClick = useCallback(function () {\n    if (onLabelClick && id) {\n      onLabelClick(id);\n    }\n  }, [onLabelClick]);\n  return React__default.createElement(ActionButton, {\n    onClick: onClick,\n    className: styles.badge\n  }, label);\n};\nvar blues = ['#174576', '#276EB5']; // Sea and darkest color - rest are interpolated\nvar yellows = ['#8C7E25', '#C0A03D'];\nvar greys = ['#464241', '#6E6E6E']; // greys are calculated in code\nvar ADT3DGlobe = function (_a) {\n  var adapter = _a.adapter,\n    onSceneClick = _a.onSceneClick,\n    _b = _a.globeTheme,\n    globeTheme = _b === void 0 ? GlobeTheme.Blue : _b;\n  var _c = useState([]),\n    markers = _c[0],\n    setMarkers = _c[1];\n  var _d = useState([]),\n    coloredMeshes = _d[0],\n    setColoredMeshes = _d[1];\n  var sceneRef = useRef(null);\n  var config = useAdapter({\n    adapterMethod: function () {\n      return adapter.getScenesConfig();\n    },\n    refetchDependencies: [adapter]\n  });\n  var onLabelClick = useCallback(function (id) {\n    var _a, _b, _c, _d;\n    if (id) {\n      var scene = (_d = (_c = (_b = (_a = config.adapterResult.result) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.scenes) === null || _d === void 0 ? void 0 : _d.find(function (scene) {\n        return (scene === null || scene === void 0 ? void 0 : scene.id) === id;\n      });\n      if (scene) {\n        onSceneClick(scene);\n      }\n    }\n  }, [config.adapterResult.result]);\n  useEffect(function () {\n    var _a, _b, _c;\n    var markers = [];\n    var scenes = (_c = (_b = (_a = config.adapterResult.result) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.scenes;\n    if (scenes) {\n      for (var _i = 0, scenes_1 = scenes; _i < scenes_1.length; _i++) {\n        var scene = scenes_1[_i];\n        if (scene.latitude && scene.longitude) {\n          markers.push(createMarker(scene));\n        }\n      }\n      setMarkers(markers);\n    }\n  }, [config.adapterResult.result]);\n  var createMarker = function (scene) {\n    var id = 'cb-label-' + scene.id;\n    var marker = {\n      scene: scene,\n      id: id,\n      latitude: scene.latitude || 0,\n      longitude: scene.longitude || 0,\n      name: scene.displayName || 'Unknown',\n      allowGrouping: true,\n      UIElement: React__default.createElement(ModelLabel, {\n        id: scene.id,\n        label: scene.displayName,\n        onLabelClick: function (id) {\n          return onLabelClick(id);\n        }\n      })\n    };\n    return marker;\n  };\n  var updateTheme = function (scene) {\n    var _a;\n    sceneRef.current = sceneRef.current || scene;\n    if (sceneRef.current) {\n      var mi = [];\n      var colors = blues;\n      switch (globeTheme) {\n        case GlobeTheme.Blue:\n          colors = blues;\n          break;\n        case GlobeTheme.Yellow:\n          colors = yellows;\n          break;\n        case GlobeTheme.Grey:\n          colors = greys;\n          break;\n      }\n      var ct = -2;\n      var baseColor = hexToColor4(colors[1]);\n      var baseHSV = rgb2hsv(baseColor.r, baseColor.g, baseColor.b);\n      for (var _i = 0, _b = sceneRef.current.meshes; _i < _b.length; _i++) {\n        var mesh = _b[_i];\n        if ((_a = mesh === null || mesh === void 0 ? void 0 : mesh.name) === null || _a === void 0 ? void 0 : _a.startsWith('Region')) {\n          ct += 2;\n          if (ct >= 14) {\n            ct = 1;\n          }\n          if (globeTheme === GlobeTheme.Grey) {\n            var n = Math.floor(ct / 13 * 100 + 100);\n            var color = rgb2hex(n, n, n);\n            mi.push({\n              meshId: mesh.id,\n              color: '#' + color\n            });\n          } else {\n            var s = ct / 13 * 62 + 12;\n            var col = hsv2rgb(baseHSV.h, s, 100);\n            var color = rgb2hex(col.r, col.g, col.b);\n            mi.push({\n              meshId: mesh.id,\n              color: '#' + color\n            });\n          }\n        } else if (mesh.name.startsWith('Sea')) {\n          mi.push({\n            meshId: mesh.id,\n            color: colors[0]\n          });\n        }\n      }\n      setColoredMeshes(mi);\n    }\n  };\n  useEffect(function () {\n    updateTheme(null);\n  }, [globeTheme]);\n  return React__default.createElement(BaseComponent, {\n    isLoading: config.isLoading && config.adapterResult.hasNoData(),\n    adapterResults: [config.adapterResult]\n  }, React__default.createElement(\"div\", {\n    className: \"cb-adt-3dglobe-wrapper\"\n  }, React__default.createElement(SceneView, {\n    modelUrl: \"Globe\",\n    markers: markers,\n    onSceneLoaded: updateTheme,\n    coloredMeshItems: coloredMeshes\n  })));\n};\nvar ADT3DGlobe$1 = withErrorBoundary(ADT3DGlobe);\nexport { ADT3DGlobe$1 as A };","map":{"version":3,"sources":["../../src/Components/ModelLabel/ModelLabel.styles.ts","../../src/Components/ModelLabel/ModelLabel.tsx","../../src/Components/ADT3DGlobe/ADT3DGlobe.tsx"],"names":["React"],"mappings":"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","sourcesContent":["import {\n    memoizeFunction,\n    mergeStyleSets,\n    IStyle,\n    Theme\n} from '@fluentui/react';\n\nexport const ModelLabelClassPrefix = 'cb-model-label';\n\nconst classNames = {\n    badge: `${ModelLabelClassPrefix}-badge`\n};\n\nexport const getStyles = memoizeFunction((theme: Theme) => {\n    return mergeStyleSets({\n        badge: [\n            classNames.badge,\n            {\n                borderRadius: 25,\n                background: theme.semanticColors.buttonBackground,\n                padding: '8px 16px',\n                border: `1px solid ${theme.palette.neutralLight}`,\n                color: theme.semanticColors.bodyText,\n                width: 'fit-content'\n            } as IStyle\n        ]\n    });\n});\n","import { ActionButton, useTheme } from '@fluentui/react';\nimport React, { useCallback } from 'react';\nimport { getStyles } from './ModelLabel.styles';\n\ninterface ModelLabelProps {\n    label: string;\n    id?: string;\n    onLabelClick?: (id: string) => void;\n}\n\nexport const ModelLabel: React.FC<ModelLabelProps> = ({\n    label,\n    id,\n    onLabelClick\n}) => {\n    const theme = useTheme();\n    const styles = getStyles(theme);\n\n    const onClick = useCallback(() => {\n        if (onLabelClick && id) {\n            onLabelClick(id);\n        }\n    }, [onLabelClick]);\n\n    return (\n        <ActionButton onClick={onClick} className={styles.badge}>\n            {label}\n        </ActionButton>\n    );\n};\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport SceneView from '../3DV/SceneView';\nimport { useAdapter } from '../../Models/Hooks';\nimport './ADT3DGlobe.scss';\nimport { withErrorBoundary } from '../../Models/Context/ErrorBoundary';\nimport { CustomMeshItem, Marker } from '../../Models/Classes/SceneView.types';\nimport BaseComponent from '../BaseComponent/BaseComponent';\nimport { ModelLabel } from '../ModelLabel/ModelLabel';\nimport { Scene } from '@babylonjs/core';\nimport { IADT3DGlobeProps } from '../../Models/Constants/Interfaces';\nimport { GlobeTheme } from '../../Models/Constants';\nimport { hexToColor4 } from '../../Models/Services/Utils';\nimport { hsv2rgb, rgb2hex, rgb2hsv } from '@fluentui/react';\nimport { IScene } from '../../Models/Types/Generated/3DScenesConfiguration-v1.0.0';\n\nconst blues = ['#174576', '#276EB5']; // Sea and darkest color - rest are interpolated\nconst yellows = ['#8C7E25', '#C0A03D'];\nconst greys = ['#464241', '#6E6E6E']; // greys are calculated in code\n\nconst ADT3DGlobe: React.FC<IADT3DGlobeProps> = ({\n    adapter,\n    onSceneClick,\n    globeTheme = GlobeTheme.Blue\n}) => {\n    const [markers, setMarkers] = useState<Marker[]>([]);\n    const [coloredMeshes, setColoredMeshes] = useState<CustomMeshItem[]>([]);\n    const sceneRef = useRef(null);\n\n    const config = useAdapter({\n        adapterMethod: () => adapter.getScenesConfig(),\n        refetchDependencies: [adapter]\n    });\n\n    const onLabelClick = useCallback(\n        (id: string) => {\n            if (id) {\n                const scene = config.adapterResult.result?.data?.configuration?.scenes?.find(\n                    (scene) => scene?.id === id\n                );\n                if (scene) {\n                    onSceneClick(scene);\n                }\n            }\n        },\n        [config.adapterResult.result]\n    );\n\n    useEffect(() => {\n        const markers: Marker[] = [];\n        const scenes = config.adapterResult.result?.data?.configuration?.scenes;\n        if (scenes) {\n            for (const scene of scenes) {\n                if (scene.latitude && scene.longitude) {\n                    markers.push(createMarker(scene));\n                }\n            }\n\n            setMarkers(markers);\n        }\n    }, [config.adapterResult.result]);\n\n    const createMarker = (scene: IScene) => {\n        const id = 'cb-label-' + scene.id;\n        const marker: Marker = {\n            scene: scene,\n            id: id,\n            latitude: scene.latitude || 0,\n            longitude: scene.longitude || 0,\n            name: scene.displayName || 'Unknown',\n            allowGrouping: true,\n            UIElement: (\n                <ModelLabel\n                    id={scene.id}\n                    label={scene.displayName}\n                    onLabelClick={(id: string) => onLabelClick(id)}\n                />\n            )\n        };\n\n        return marker;\n    };\n\n    const updateTheme = (scene: Scene) => {\n        sceneRef.current = sceneRef.current || scene;\n        if (sceneRef.current) {\n            const mi: CustomMeshItem[] = [];\n            let colors = blues;\n            switch (globeTheme) {\n                case GlobeTheme.Blue:\n                    colors = blues;\n                    break;\n                case GlobeTheme.Yellow:\n                    colors = yellows;\n                    break;\n                case GlobeTheme.Grey:\n                    colors = greys;\n                    break;\n            }\n\n            let ct = -2;\n            const baseColor = hexToColor4(colors[1]);\n            const baseHSV = rgb2hsv(baseColor.r, baseColor.g, baseColor.b);\n            for (const mesh of sceneRef.current.meshes) {\n                if (mesh?.name?.startsWith('Region')) {\n                    ct += 2;\n                    if (ct >= 14) {\n                        ct = 1;\n                    }\n\n                    if (globeTheme === GlobeTheme.Grey) {\n                        const n = Math.floor((ct / 13) * 100 + 100);\n                        const color = rgb2hex(n, n, n);\n                        mi.push({ meshId: mesh.id, color: '#' + color });\n                    } else {\n                        const s = (ct / 13) * 62 + 12;\n                        const col = hsv2rgb(baseHSV.h, s, 100);\n                        const color = rgb2hex(col.r, col.g, col.b);\n                        mi.push({ meshId: mesh.id, color: '#' + color });\n                    }\n                } else if (mesh.name.startsWith('Sea')) {\n                    mi.push({ meshId: mesh.id, color: colors[0] });\n                }\n            }\n\n            setColoredMeshes(mi);\n        }\n    };\n\n    useEffect(() => {\n        updateTheme(null);\n    }, [globeTheme]);\n\n    return (\n        <BaseComponent\n            isLoading={config.isLoading && config.adapterResult.hasNoData()}\n            adapterResults={[config.adapterResult]}\n        >\n            <div className=\"cb-adt-3dglobe-wrapper\">\n                <SceneView\n                    modelUrl=\"Globe\"\n                    markers={markers}\n                    onSceneLoaded={updateTheme}\n                    coloredMeshItems={coloredMeshes}\n                />\n            </div>\n        </BaseComponent>\n    );\n};\n\nexport default withErrorBoundary(ADT3DGlobe);\n"]},"metadata":{},"sourceType":"module"}