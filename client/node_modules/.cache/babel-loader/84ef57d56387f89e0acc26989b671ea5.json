{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { ActionButton } from '../../Button';\nimport { buttonStyles } from './Nav.styles';\nimport { classNamesFunction, divProperties, getNativeProps, getWindow, initializeComponentRef } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport { composeComponentAs, composeRenderFunction } from '@uifabric/utilities';\n// The number pixels per indentation level for Nav links.\nvar _indentationSize = 14;\n// The number of pixels of left margin\nvar _baseIndent = 3;\n// global var used in _isLinkSelectedKey\nvar _urlResolver;\nexport function isRelativeUrl(url) {\n  // A URL is relative if it has no protocol.\n  return !!url && !/^[a-z0-9+-.]+:\\/\\//i.test(url);\n}\nvar getClassNames = classNamesFunction();\nvar NavBase = /** @class */function (_super) {\n  __extends(NavBase, _super);\n  function NavBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._focusZone = React.createRef();\n    _this._onRenderLink = function (link) {\n      var _a = _this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        groups: groups\n      });\n      return React.createElement(\"div\", {\n        className: classNames.linkText\n      }, link.name);\n    };\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme,\n        _b = _a.onRenderGroupHeader,\n        onRenderGroupHeader = _b === void 0 ? _this._renderGroupHeader : _b;\n      var isExpanded = _this._isGroupExpanded(group);\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        isGroup: true,\n        isExpanded: isExpanded,\n        groups: groups\n      });\n      var finalOnHeaderClick = function (ev, isCollapsing) {\n        _this._onGroupHeaderClicked(group, ev);\n      };\n      var groupProps = __assign(__assign({}, group), {\n        isExpanded: isExpanded,\n        onHeaderClick: finalOnHeaderClick\n      });\n      return React.createElement(\"div\", {\n        key: groupIndex,\n        className: classNames.group\n      }, groupProps.name ? onRenderGroupHeader(groupProps, _this._renderGroupHeader) : null, React.createElement(\"div\", {\n        className: classNames.groupContent\n      }, _this._renderLinks(groupProps.links, 0 /* nestingLevel */)));\n    };\n    _this._renderGroupHeader = function (group) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme,\n        expandButtonAriaLabel = _a.expandButtonAriaLabel;\n      var isExpanded = group.isExpanded;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        isGroup: true,\n        isExpanded: isExpanded,\n        groups: groups\n      });\n      var label = (isExpanded ? group.collapseAriaLabel : group.expandAriaLabel) || expandButtonAriaLabel;\n      var onHeaderClick = group.onHeaderClick;\n      var onClick = onHeaderClick ? function (ev) {\n        onHeaderClick(ev, isExpanded);\n      } : undefined;\n      return React.createElement(\"button\", {\n        className: classNames.chevronButton,\n        onClick: onClick,\n        \"aria-label\": label,\n        \"aria-expanded\": isExpanded\n      }, React.createElement(Icon, {\n        className: classNames.chevronIcon,\n        iconName: \"ChevronDown\"\n      }), group.name);\n    };\n    initializeComponentRef(_this);\n    _this.state = {\n      isGroupCollapsed: {},\n      // TODO: consider removing\n      // eslint-disable-next-line react/no-unused-state\n      isLinkExpandStateChanged: false,\n      selectedKey: props.initialSelectedKey || props.selectedKey\n    };\n    return _this;\n  }\n  NavBase.prototype.render = function () {\n    var _a = this.props,\n      styles = _a.styles,\n      groups = _a.groups,\n      className = _a.className,\n      isOnTop = _a.isOnTop,\n      theme = _a.theme;\n    if (!groups) {\n      return null;\n    }\n    var groupElements = groups.map(this._renderGroup);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isOnTop: isOnTop,\n      groups: groups\n    });\n    return React.createElement(FocusZone, {\n      direction: FocusZoneDirection.vertical,\n      componentRef: this._focusZone\n    }, React.createElement(\"nav\", {\n      role: \"navigation\",\n      className: classNames.root,\n      \"aria-label\": this.props.ariaLabel\n    }, groupElements));\n  };\n  Object.defineProperty(NavBase.prototype, \"selectedKey\", {\n    get: function () {\n      return this.state.selectedKey;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  NavBase.prototype.focus = function (forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n    if (this._focusZone && this._focusZone.current) {\n      return this._focusZone.current.focus(forceIntoFirstElement);\n    }\n    return false;\n  };\n  NavBase.prototype._renderNavLink = function (link, linkIndex, nestingLevel) {\n    var _a = this.props,\n      styles = _a.styles,\n      groups = _a.groups,\n      theme = _a.theme;\n    var isLinkWithIcon = link.icon || link.iconProps;\n    var isSelectedLink = this._isLinkSelected(link);\n    var _b = link.ariaCurrent,\n      ariaCurrent = _b === void 0 ? 'page' : _b;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      isSelected: isSelectedLink,\n      isDisabled: link.disabled,\n      isButtonEntry: link.onClick && !link.forceAnchor,\n      leftPadding: _indentationSize * nestingLevel + _baseIndent + (isLinkWithIcon ? 0 : 24),\n      groups: groups\n    });\n    // Prevent hijacking of the parent window if link.target is defined\n    var rel = link.url && link.target && !isRelativeUrl(link.url) ? 'noopener noreferrer' : undefined;\n    var LinkAs = this.props.linkAs ? composeComponentAs(this.props.linkAs, ActionButton) : ActionButton;\n    var onRenderLink = this.props.onRenderLink ? composeRenderFunction(this.props.onRenderLink, this._onRenderLink) : this._onRenderLink;\n    return React.createElement(LinkAs, {\n      className: classNames.link,\n      styles: buttonStyles,\n      href: link.url || (link.forceAnchor ? '#' : undefined),\n      iconProps: link.iconProps || {\n        iconName: link.icon\n      },\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick: link.onClick ? this._onNavButtonLinkClicked.bind(this, link) : this._onNavAnchorLinkClicked.bind(this, link),\n      title: link.title !== undefined ? link.title : link.name,\n      target: link.target,\n      rel: rel,\n      disabled: link.disabled,\n      \"aria-current\": isSelectedLink ? ariaCurrent : undefined,\n      \"aria-label\": link.ariaLabel ? link.ariaLabel : undefined,\n      link: link\n    }, onRenderLink(link));\n  };\n  NavBase.prototype._renderCompositeLink = function (link, linkIndex, nestingLevel) {\n    var divProps = __assign({}, getNativeProps(link, divProperties, ['onClick']));\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n      expandButtonAriaLabel = _a.expandButtonAriaLabel,\n      styles = _a.styles,\n      groups = _a.groups,\n      theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      isExpanded: !!link.isExpanded,\n      isSelected: this._isLinkSelected(link),\n      isLink: true,\n      isDisabled: link.disabled,\n      position: _indentationSize * nestingLevel + 1,\n      groups: groups\n    });\n    var finalExpandBtnAriaLabel = '';\n    if (link.links && link.links.length > 0) {\n      if (link.collapseAriaLabel || link.expandAriaLabel) {\n        finalExpandBtnAriaLabel = link.isExpanded ? link.collapseAriaLabel : link.expandAriaLabel;\n      } else {\n        // TODO remove when `expandButtonAriaLabel` is removed. This is not an ideal concatenation for localization.\n        finalExpandBtnAriaLabel = expandButtonAriaLabel ? link.name + \" \" + expandButtonAriaLabel : link.name;\n      }\n    }\n    return React.createElement(\"div\", __assign({}, divProps, {\n      key: link.key || linkIndex,\n      className: classNames.compositeLink\n    }), link.links && link.links.length > 0 ? React.createElement(\"button\", {\n      className: classNames.chevronButton,\n      onClick: this._onLinkExpandClicked.bind(this, link),\n      \"aria-label\": finalExpandBtnAriaLabel,\n      \"aria-expanded\": link.isExpanded ? 'true' : 'false'\n    }, React.createElement(Icon, {\n      className: classNames.chevronIcon,\n      iconName: \"ChevronDown\"\n    })) : null, this._renderNavLink(link, linkIndex, nestingLevel));\n  };\n  NavBase.prototype._renderLink = function (link, linkIndex, nestingLevel) {\n    var _a = this.props,\n      styles = _a.styles,\n      groups = _a.groups,\n      theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      groups: groups\n    });\n    return React.createElement(\"li\", {\n      key: link.key || linkIndex,\n      role: \"listitem\",\n      className: classNames.navItem\n    }, this._renderCompositeLink(link, linkIndex, nestingLevel), link.isExpanded ? this._renderLinks(link.links, ++nestingLevel) : null);\n  };\n  NavBase.prototype._renderLinks = function (links, nestingLevel) {\n    var _this = this;\n    if (!links || !links.length) {\n      return null;\n    }\n    var linkElements = links.map(function (link, linkIndex) {\n      return _this._renderLink(link, linkIndex, nestingLevel);\n    });\n    var _a = this.props,\n      styles = _a.styles,\n      groups = _a.groups,\n      theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      groups: groups\n    });\n    return React.createElement(\"ul\", {\n      role: \"list\",\n      className: classNames.navItems\n    }, linkElements);\n  };\n  NavBase.prototype._onGroupHeaderClicked = function (group, ev) {\n    if (group.onHeaderClick) {\n      group.onHeaderClick(ev, this._isGroupExpanded(group));\n    }\n    this._toggleCollapsed(group);\n    if (ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n  NavBase.prototype._onLinkExpandClicked = function (link, ev) {\n    var onLinkExpandClick = this.props.onLinkExpandClick;\n    if (onLinkExpandClick) {\n      onLinkExpandClick(ev, link);\n    }\n    if (!ev.defaultPrevented) {\n      link.isExpanded = !link.isExpanded;\n      // eslint-disable-next-line react/no-unused-state\n      this.setState({\n        isLinkExpandStateChanged: true\n      });\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n  NavBase.prototype._preventBounce = function (link, ev) {\n    if (!link.url && link.forceAnchor) {\n      ev.preventDefault();\n    }\n  };\n  NavBase.prototype._onNavAnchorLinkClicked = function (link, ev) {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n    if (this.props.onLinkClick) {\n      this.props.onLinkClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n    this.setState({\n      selectedKey: link.key\n    });\n  };\n  NavBase.prototype._onNavButtonLinkClicked = function (link, ev) {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n    if (link.onClick) {\n      link.onClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n    this.setState({\n      selectedKey: link.key\n    });\n  };\n  NavBase.prototype._isLinkSelected = function (link) {\n    // if caller passes in selectedKey, use it as first choice or\n    // if current state.selectedKey (from addressbar) is match to the link or\n    // check if URL is matching location.href (if link.url exists)\n    if (this.props.selectedKey !== undefined) {\n      return link.key === this.props.selectedKey;\n    } else if (this.state.selectedKey !== undefined) {\n      return link.key === this.state.selectedKey;\n    } else if (typeof getWindow() === 'undefined' || !link.url) {\n      // resolve is not supported for ssr\n      return false;\n    } else {\n      // If selectedKey is undefined in props and state, then check URL\n      _urlResolver = _urlResolver || document.createElement('a');\n      _urlResolver.href = link.url || '';\n      var target = _urlResolver.href;\n      if (location.href === target) {\n        return true;\n      }\n      // If selectedKey is not defined in state, then check URL to determine link selected status\n      if (location.protocol + '//' + location.host + location.pathname === target) {\n        return true;\n      }\n      if (location.hash) {\n        // Match the hash to the url.\n        if (location.hash === link.url) {\n          return true;\n        }\n        // Match a rebased url. (e.g. #foo becomes http://hostname/foo)\n        _urlResolver.href = location.hash.substring(1);\n        return _urlResolver.href === target;\n      }\n    }\n    return false;\n  };\n  NavBase.prototype._isGroupExpanded = function (group) {\n    if (group.name && this.state.isGroupCollapsed.hasOwnProperty(group.name)) {\n      return !this.state.isGroupCollapsed[group.name];\n    }\n    if (group.collapseByDefault !== undefined) {\n      return !group.collapseByDefault;\n    }\n    return true;\n  };\n  NavBase.prototype._toggleCollapsed = function (group) {\n    var _a;\n    if (group.name) {\n      var newGroupCollapsed = __assign(__assign({}, this.state.isGroupCollapsed), (_a = {}, _a[group.name] = this._isGroupExpanded(group), _a));\n      this.setState({\n        isGroupCollapsed: newGroupCollapsed\n      });\n    }\n  };\n  NavBase.defaultProps = {\n    groups: null\n  };\n  return NavBase;\n}(React.Component);\nexport { NavBase };","map":{"version":3,"sources":["components/Nav/Nav.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ActionButton } from '../../Button';\nimport { buttonStyles } from './Nav.styles';\nimport { classNamesFunction, divProperties, getNativeProps, getWindow, initializeComponentRef } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport {\n  INav,\n  INavLink,\n  INavLinkGroup,\n  INavProps,\n  INavStyleProps,\n  INavStyles,\n  IRenderGroupHeaderProps,\n} from './Nav.types';\nimport { composeComponentAs, composeRenderFunction } from '@uifabric/utilities';\n\n// The number pixels per indentation level for Nav links.\nconst _indentationSize = 14;\n\n// The number of pixels of left margin\nconst _baseIndent = 3;\n\n// global var used in _isLinkSelectedKey\nlet _urlResolver: HTMLAnchorElement | undefined;\n\nexport function isRelativeUrl(url: string): boolean {\n  // A URL is relative if it has no protocol.\n  return !!url && !/^[a-z0-9+-.]+:\\/\\//i.test(url);\n}\n\nconst getClassNames = classNamesFunction<INavStyleProps, INavStyles>();\n\nexport interface INavState {\n  isGroupCollapsed: { [key: string]: boolean };\n  isLinkExpandStateChanged?: boolean;\n  selectedKey?: string;\n}\n\nexport class NavBase extends React.Component<INavProps, INavState> implements INav {\n  public static defaultProps: INavProps = {\n    groups: null,\n  };\n\n  private _focusZone = React.createRef<IFocusZone>();\n  constructor(props: INavProps) {\n    super(props);\n    initializeComponentRef(this);\n    this.state = {\n      isGroupCollapsed: {},\n      // TODO: consider removing\n      // eslint-disable-next-line react/no-unused-state\n      isLinkExpandStateChanged: false,\n      selectedKey: props.initialSelectedKey || props.selectedKey,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const { styles, groups, className, isOnTop, theme } = this.props;\n\n    if (!groups) {\n      return null;\n    }\n\n    const groupElements: React.ReactElement<{}>[] = groups.map(this._renderGroup);\n\n    const classNames = getClassNames(styles!, { theme: theme!, className, isOnTop, groups });\n\n    return (\n      <FocusZone direction={FocusZoneDirection.vertical} componentRef={this._focusZone}>\n        <nav role=\"navigation\" className={classNames.root} aria-label={this.props.ariaLabel}>\n          {groupElements}\n        </nav>\n      </FocusZone>\n    );\n  }\n\n  public get selectedKey(): string | undefined {\n    return this.state.selectedKey;\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    if (this._focusZone && this._focusZone.current) {\n      return this._focusZone.current.focus(forceIntoFirstElement);\n    }\n    return false;\n  }\n\n  private _onRenderLink = (link: INavLink): JSX.Element => {\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n    return <div className={classNames.linkText}>{link.name}</div>;\n  };\n\n  private _renderNavLink(link: INavLink, linkIndex: number, nestingLevel: number): JSX.Element {\n    const { styles, groups, theme } = this.props;\n    const isLinkWithIcon = link.icon || link.iconProps;\n    const isSelectedLink = this._isLinkSelected(link);\n    const { ariaCurrent = 'page' } = link;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isSelected: isSelectedLink,\n      isDisabled: link.disabled,\n      isButtonEntry: link.onClick && !link.forceAnchor,\n      leftPadding: _indentationSize * nestingLevel + _baseIndent + (isLinkWithIcon ? 0 : 24),\n      groups,\n    });\n\n    // Prevent hijacking of the parent window if link.target is defined\n    const rel = link.url && link.target && !isRelativeUrl(link.url) ? 'noopener noreferrer' : undefined;\n\n    const LinkAs = this.props.linkAs ? composeComponentAs(this.props.linkAs, ActionButton) : ActionButton;\n    const onRenderLink = this.props.onRenderLink\n      ? composeRenderFunction(this.props.onRenderLink, this._onRenderLink)\n      : this._onRenderLink;\n\n    return (\n      <LinkAs\n        className={classNames.link}\n        styles={buttonStyles}\n        href={link.url || (link.forceAnchor ? '#' : undefined)}\n        iconProps={link.iconProps || { iconName: link.icon }}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={\n          link.onClick ? this._onNavButtonLinkClicked.bind(this, link) : this._onNavAnchorLinkClicked.bind(this, link)\n        }\n        title={link.title !== undefined ? link.title : link.name}\n        target={link.target}\n        rel={rel}\n        disabled={link.disabled}\n        aria-current={isSelectedLink ? ariaCurrent : undefined}\n        aria-label={link.ariaLabel ? link.ariaLabel : undefined}\n        link={link}\n      >\n        {onRenderLink(link)}\n      </LinkAs>\n    );\n  }\n\n  private _renderCompositeLink(link: INavLink, linkIndex: number, nestingLevel: number): React.ReactElement<{}> {\n    const divProps: React.HTMLProps<HTMLDivElement> = { ...getNativeProps(link, divProperties, ['onClick']) };\n    // eslint-disable-next-line deprecation/deprecation\n    const { expandButtonAriaLabel, styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isExpanded: !!link.isExpanded,\n      isSelected: this._isLinkSelected(link),\n      isLink: true,\n      isDisabled: link.disabled,\n      position: _indentationSize * nestingLevel + 1,\n      groups,\n    });\n\n    let finalExpandBtnAriaLabel = '';\n    if (link.links && link.links.length > 0) {\n      if (link.collapseAriaLabel || link.expandAriaLabel) {\n        finalExpandBtnAriaLabel = link.isExpanded ? link.collapseAriaLabel! : link.expandAriaLabel!;\n      } else {\n        // TODO remove when `expandButtonAriaLabel` is removed. This is not an ideal concatenation for localization.\n        finalExpandBtnAriaLabel = expandButtonAriaLabel ? `${link.name} ${expandButtonAriaLabel}` : link.name;\n      }\n    }\n\n    return (\n      <div {...divProps} key={link.key || linkIndex} className={classNames.compositeLink}>\n        {link.links && link.links.length > 0 ? (\n          <button\n            className={classNames.chevronButton}\n            onClick={this._onLinkExpandClicked.bind(this, link)}\n            aria-label={finalExpandBtnAriaLabel}\n            aria-expanded={link.isExpanded ? 'true' : 'false'}\n          >\n            <Icon className={classNames.chevronIcon} iconName=\"ChevronDown\" />\n          </button>\n        ) : null}\n        {this._renderNavLink(link, linkIndex, nestingLevel)}\n      </div>\n    );\n  }\n\n  private _renderLink(link: INavLink, linkIndex: number, nestingLevel: number): React.ReactElement<{}> {\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n\n    return (\n      <li key={link.key || linkIndex} role=\"listitem\" className={classNames.navItem}>\n        {this._renderCompositeLink(link, linkIndex, nestingLevel)}\n        {link.isExpanded ? this._renderLinks(link.links, ++nestingLevel) : null}\n      </li>\n    );\n  }\n\n  private _renderLinks(links: INavLink[] | undefined, nestingLevel: number): React.ReactElement<{}> | null {\n    if (!links || !links.length) {\n      return null;\n    }\n    const linkElements: React.ReactElement<{}>[] = links.map((link: INavLink, linkIndex: number) =>\n      this._renderLink(link, linkIndex, nestingLevel),\n    );\n\n    const { styles, groups, theme } = this.props;\n    const classNames = getClassNames(styles!, { theme: theme!, groups });\n\n    return (\n      <ul role=\"list\" className={classNames.navItems}>\n        {linkElements}\n      </ul>\n    );\n  }\n\n  private _renderGroup = (group: INavLinkGroup, groupIndex: number): React.ReactElement<{}> => {\n    const { styles, groups, theme, onRenderGroupHeader = this._renderGroupHeader } = this.props;\n\n    const isExpanded = this._isGroupExpanded(group);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isGroup: true,\n      isExpanded,\n      groups,\n    });\n\n    const finalOnHeaderClick = (\n      ev?: React.MouseEvent<HTMLElement, MouseEvent> | undefined,\n      isCollapsing?: boolean | undefined,\n    ) => {\n      this._onGroupHeaderClicked(group, ev);\n    };\n\n    const groupProps: IRenderGroupHeaderProps = {\n      ...group,\n      isExpanded,\n      onHeaderClick: finalOnHeaderClick,\n    };\n\n    return (\n      <div key={groupIndex} className={classNames.group}>\n        {groupProps.name ? onRenderGroupHeader(groupProps, this._renderGroupHeader) : null}\n        <div className={classNames.groupContent}>{this._renderLinks(groupProps.links, 0 /* nestingLevel */)}</div>\n      </div>\n    );\n  };\n\n  private _renderGroupHeader = (group: IRenderGroupHeaderProps): React.ReactElement<{}> => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { styles, groups, theme, expandButtonAriaLabel } = this.props;\n\n    const { isExpanded } = group;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      isGroup: true,\n      isExpanded,\n      groups,\n    });\n\n    const label = (isExpanded ? group.collapseAriaLabel : group.expandAriaLabel) || expandButtonAriaLabel;\n\n    const { onHeaderClick } = group;\n\n    const onClick = onHeaderClick\n      ? (ev?: React.MouseEvent<HTMLElement, MouseEvent> | undefined) => {\n          onHeaderClick(ev, isExpanded);\n        }\n      : undefined;\n\n    return (\n      <button className={classNames.chevronButton} onClick={onClick} aria-label={label} aria-expanded={isExpanded}>\n        <Icon className={classNames.chevronIcon} iconName=\"ChevronDown\" />\n        {group.name}\n      </button>\n    );\n  };\n\n  private _onGroupHeaderClicked(group: INavLinkGroup, ev?: React.MouseEvent<HTMLElement>): void {\n    if (group.onHeaderClick) {\n      group.onHeaderClick(ev, this._isGroupExpanded(group));\n    }\n\n    this._toggleCollapsed(group);\n\n    if (ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onLinkExpandClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    const { onLinkExpandClick } = this.props;\n\n    if (onLinkExpandClick) {\n      onLinkExpandClick(ev, link);\n    }\n\n    if (!ev.defaultPrevented) {\n      link.isExpanded = !link.isExpanded;\n      // eslint-disable-next-line react/no-unused-state\n      this.setState({ isLinkExpandStateChanged: true });\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  private _preventBounce(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    if (!link.url && link.forceAnchor) {\n      ev.preventDefault();\n    }\n  }\n\n  private _onNavAnchorLinkClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (this.props.onLinkClick) {\n      this.props.onLinkClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({ selectedKey: link.key });\n  }\n\n  private _onNavButtonLinkClicked(link: INavLink, ev: React.MouseEvent<HTMLElement>): void {\n    // If the href is \"#\" we should call preventDefault to prevent scrolling to the top of the page\n    this._preventBounce(link, ev);\n\n    if (link.onClick) {\n      link.onClick(ev, link);\n    }\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({ selectedKey: link.key });\n  }\n\n  private _isLinkSelected(link: INavLink): boolean {\n    // if caller passes in selectedKey, use it as first choice or\n    // if current state.selectedKey (from addressbar) is match to the link or\n    // check if URL is matching location.href (if link.url exists)\n    if (this.props.selectedKey !== undefined) {\n      return link.key === this.props.selectedKey;\n    } else if (this.state.selectedKey !== undefined) {\n      return link.key === this.state.selectedKey;\n    } else if (typeof getWindow() === 'undefined' || !link.url) {\n      // resolve is not supported for ssr\n      return false;\n    } else {\n      // If selectedKey is undefined in props and state, then check URL\n      _urlResolver = _urlResolver || document.createElement('a');\n\n      _urlResolver.href = link.url || '';\n      const target: string = _urlResolver.href;\n\n      if (location.href === target) {\n        return true;\n      }\n\n      // If selectedKey is not defined in state, then check URL to determine link selected status\n      if (location.protocol + '//' + location.host + location.pathname === target) {\n        return true;\n      }\n\n      if (location.hash) {\n        // Match the hash to the url.\n        if (location.hash === link.url) {\n          return true;\n        }\n\n        // Match a rebased url. (e.g. #foo becomes http://hostname/foo)\n        _urlResolver.href = location.hash.substring(1);\n\n        return _urlResolver.href === target;\n      }\n    }\n\n    return false;\n  }\n\n  private _isGroupExpanded(group: INavLinkGroup): boolean {\n    if (group.name && this.state.isGroupCollapsed.hasOwnProperty(group.name)) {\n      return !this.state.isGroupCollapsed[group.name];\n    }\n    if (group.collapseByDefault !== undefined) {\n      return !group.collapseByDefault;\n    }\n    return true;\n  }\n\n  private _toggleCollapsed(group: INavLinkGroup): void {\n    if (group.name) {\n      const newGroupCollapsed = {\n        ...this.state.isGroupCollapsed, // Make a copy in order to not modify state\n        [group.name]: this._isGroupExpanded(group), // sic - presently open will be collapsed after setState\n      };\n      this.setState({ isGroupCollapsed: newGroupCollapsed });\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}