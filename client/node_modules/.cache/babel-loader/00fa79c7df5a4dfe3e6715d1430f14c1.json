{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List } from '../../List';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\nvar ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.rowHeight,\n  COMPACT_ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.compactRowHeight;\nvar GroupedListBase = /** @class */function (_super) {\n  __extends(GroupedListBase, _super);\n  function GroupedListBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._list = React.createRef();\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n        dragDropEvents = _a.dragDropEvents,\n        dragDropHelper = _a.dragDropHelper,\n        eventsToRegister = _a.eventsToRegister,\n        groupProps = _a.groupProps,\n        items = _a.items,\n        listProps = _a.listProps,\n        onRenderCell = _a.onRenderCell,\n        selectionMode = _a.selectionMode,\n        selection = _a.selection,\n        viewport = _a.viewport,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        groups = _a.groups,\n        compact = _a.compact;\n      // override group header/footer props as needed\n      var dividerProps = {\n        onToggleSelectGroup: _this._onToggleSelectGroup,\n        onToggleCollapse: _this._onToggleCollapse,\n        onToggleSummarize: _this._onToggleSummarize\n      };\n      var headerProps = __assign(__assign({}, groupProps.headerProps), dividerProps);\n      var showAllProps = __assign(__assign({}, groupProps.showAllProps), dividerProps);\n      var footerProps = __assign(__assign({}, groupProps.footerProps), dividerProps);\n      var groupNestingDepth = _this._getGroupNestingDepth();\n      if (!groupProps.showEmptyGroups && group && group.count === 0) {\n        return null;\n      }\n      var finalListProps = __assign(__assign({}, listProps || {}), {\n        version: _this.state.version\n      });\n      return React.createElement(GroupedListSection, {\n        key: _this._getGroupKey(group, groupIndex),\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        eventsToRegister: eventsToRegister,\n        footerProps: footerProps,\n        getGroupItemLimit: groupProps && groupProps.getGroupItemLimit,\n        group: group,\n        groupIndex: groupIndex,\n        groupNestingDepth: groupNestingDepth,\n        groupProps: groupProps,\n        headerProps: headerProps,\n        listProps: finalListProps,\n        items: items,\n        onRenderCell: onRenderCell,\n        onRenderGroupHeader: groupProps.onRenderHeader,\n        onRenderGroupShowAll: groupProps.onRenderShowAll,\n        onRenderGroupFooter: groupProps.onRenderFooter,\n        selectionMode: selectionMode,\n        selection: selection,\n        showAllProps: showAllProps,\n        viewport: viewport,\n        onShouldVirtualize: onShouldVirtualize,\n        groupedListClassNames: _this._classNames,\n        groups: groups,\n        compact: compact\n      });\n    };\n    _this._getDefaultGroupItemLimit = function (group) {\n      return group.count;\n    };\n    _this._getGroupItemLimit = function (group) {\n      var groupProps = _this.props.groupProps;\n      var getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : _this._getDefaultGroupItemLimit;\n      return getGroupItemLimit(group);\n    };\n    _this._getGroupHeight = function (group) {\n      var rowHeight = _this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n      return rowHeight + (group.isCollapsed ? 0 : rowHeight * _this._getGroupItemLimit(group));\n    };\n    _this._getPageHeight = function (itemIndex) {\n      var groups = _this.state.groups;\n      var _a = _this.props.getGroupHeight,\n        getGroupHeight = _a === void 0 ? _this._getGroupHeight : _a;\n      var pageGroup = groups && groups[itemIndex];\n      if (pageGroup) {\n        return getGroupHeight(pageGroup, itemIndex);\n      } else {\n        return 0;\n      }\n    };\n    _this._onToggleCollapse = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n      if (group) {\n        if (onToggleCollapse) {\n          onToggleCollapse(group);\n        }\n        group.isCollapsed = !group.isCollapsed;\n        _this._updateIsSomeGroupExpanded();\n        _this.forceUpdate();\n      }\n    };\n    _this._onToggleSelectGroup = function (group) {\n      var _a = _this.props,\n        selection = _a.selection,\n        selectionMode = _a.selectionMode;\n      if (group && selection && selectionMode === SelectionMode.multiple) {\n        selection.toggleRangeSelected(group.startIndex, group.count);\n      }\n    };\n    _this._isInnerZoneKeystroke = function (ev) {\n      return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n    };\n    _this._onToggleSummarize = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n      if (onToggleSummarize) {\n        onToggleSummarize(group);\n      } else {\n        if (group) {\n          group.isShowingAll = !group.isShowingAll;\n        }\n        _this.forceUpdate();\n      }\n    };\n    _this._getPageSpecification = function (itemIndex) {\n      var groups = _this.state.groups;\n      var pageGroup = groups && groups[itemIndex];\n      return {\n        key: pageGroup && pageGroup.key\n      };\n    };\n    initializeComponentRef(_this);\n    _this._isSomeGroupExpanded = _this._computeIsSomeGroupExpanded(props.groups);\n    var _a = props.listProps,\n      _b = (_a === void 0 ? {} : _a).version,\n      version = _b === void 0 ? {} : _b;\n    _this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version: version\n    };\n    return _this;\n  }\n  GroupedListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    var groups = nextProps.groups,\n      selectionMode = nextProps.selectionMode,\n      compact = nextProps.compact,\n      items = nextProps.items,\n      listProps = nextProps.listProps;\n    var listVersion = listProps && listProps.version;\n    var nextState = __assign(__assign({}, previousState), {\n      selectionMode: selectionMode,\n      compact: compact,\n      groups: groups,\n      listProps: listProps\n    });\n    var shouldForceUpdates = false;\n    var previousListVersion = previousState.listProps && previousState.listProps.version;\n    if (listVersion !== previousListVersion || items !== previousState.items || groups !== previousState.groups || selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n    if (shouldForceUpdates) {\n      nextState = __assign(__assign({}, nextState), {\n        version: {}\n      });\n    }\n    return nextState;\n  };\n  GroupedListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  };\n  GroupedListBase.prototype.getStartItemIndexInView = function () {\n    return this._list.current.getStartItemIndexInView() || 0;\n  };\n  GroupedListBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n      groupProps = _a.groupProps,\n      _b = _a.groups,\n      groups = _b === void 0 ? [] : _b;\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  };\n  GroupedListBase.prototype.render = function () {\n    var _a = this.props,\n      className = _a.className,\n      usePageCache = _a.usePageCache,\n      onShouldVirtualize = _a.onShouldVirtualize,\n      theme = _a.theme,\n      _b = _a.role,\n      role = _b === void 0 ? 'treegrid' : _b,\n      styles = _a.styles,\n      compact = _a.compact,\n      _c = _a.focusZoneProps,\n      focusZoneProps = _c === void 0 ? {} : _c,\n      _d = _a.rootListProps,\n      rootListProps = _d === void 0 ? {} : _d;\n    var _e = this.state,\n      groups = _e.groups,\n      version = _e.version;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      compact: compact\n    });\n    var _f = focusZoneProps.shouldEnterInnerZone,\n      shouldEnterInnerZone = _f === void 0 ? this._isInnerZoneKeystroke : _f;\n    return React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.vertical,\n      \"data-automationid\": \"GroupedList\",\n      \"data-is-scrollable\": \"false\",\n      role: \"presentation\"\n    }, focusZoneProps, {\n      shouldEnterInnerZone: shouldEnterInnerZone,\n      className: css(this._classNames.root, focusZoneProps.className)\n    }), !groups ? this._renderGroup(undefined, 0) : React.createElement(List, __assign({\n      ref: this._list,\n      role: role,\n      items: groups,\n      onRenderCell: this._renderGroup,\n      getItemCountForPage: this._returnOne,\n      getPageHeight: this._getPageHeight,\n      getPageSpecification: this._getPageSpecification,\n      usePageCache: usePageCache,\n      onShouldVirtualize: onShouldVirtualize,\n      version: version\n    }, rootListProps)));\n  };\n  GroupedListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n    this._forceListUpdates();\n  };\n  GroupedListBase.prototype.toggleCollapseAll = function (allCollapsed) {\n    var _a = this.state.groups,\n      groups = _a === void 0 ? [] : _a;\n    var groupProps = this.props.groupProps;\n    var onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n      this._setGroupsCollapsedState(groups, allCollapsed);\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n  GroupedListBase.prototype._setGroupsCollapsedState = function (groups, isCollapsed) {\n    for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  };\n  GroupedListBase.prototype._returnOne = function () {\n    return 1;\n  };\n  GroupedListBase.prototype._getGroupKey = function (group, index) {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  };\n  GroupedListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.state.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n    return level;\n  };\n  GroupedListBase.prototype._forceListUpdates = function (groups) {\n    this.setState({\n      version: {}\n    });\n  };\n  GroupedListBase.prototype._computeIsSomeGroupExpanded = function (groups) {\n    var _this = this;\n    return !!(groups && groups.some(function (group) {\n      return group.children ? _this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed;\n    }));\n  };\n  GroupedListBase.prototype._updateIsSomeGroupExpanded = function () {\n    var groups = this.state.groups;\n    var onGroupExpandStateChanged = this.props.onGroupExpandStateChanged;\n    var newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  };\n  GroupedListBase.defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false\n  };\n  return GroupedListBase;\n}(React.Component);\nexport { GroupedListBase };","map":{"version":3,"sources":["components/GroupedList/GroupedList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode, IListProps } from '../../List';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { IGroupHeaderProps } from './GroupHeader';\nimport { IGroupShowAllProps } from './GroupShowAll.styles';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}