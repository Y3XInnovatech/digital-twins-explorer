{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { buttonProperties, getNativeProps, KeyCodes, mergeAriaAttributeValues, memoizeFunction, Async, EventGroup, getId } from '../../../Utilities';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { getSplitButtonVerticalDividerClassNames } from '../ContextualMenu.classNames';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { VerticalDivider } from '../../../Divider';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nvar TouchIdleDelay = 500; /* ms */\nvar ContextualMenuSplitButton = /** @class */function (_super) {\n  __extends(ContextualMenuSplitButton, _super);\n  function ContextualMenuSplitButton(props) {\n    var _this = _super.call(this, props) || this;\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n    _this._renderAriaDescription = function (ariaDescription, className) {\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n      return ariaDescription ? React.createElement(\"span\", {\n        id: _this._ariaDescriptionId,\n        className: className\n      }, ariaDescription) : null;\n    };\n    _this._onItemKeyDown = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemKeyDown = _a.onItemKeyDown;\n      if (ev.which === KeyCodes.enter) {\n        _this._executeItemClick(ev);\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (onItemKeyDown) {\n        onItemKeyDown(item, ev);\n      }\n    };\n    _this._getSubmenuTarget = function () {\n      return _this._splitButton;\n    };\n    _this._onItemMouseEnterPrimary = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemMouseEnter = _a.onItemMouseEnter;\n      if (onItemMouseEnter) {\n        onItemMouseEnter(__assign(__assign({}, item), {\n          subMenuProps: undefined,\n          items: undefined\n        }), ev, _this._splitButton);\n      }\n    };\n    _this._onItemMouseEnterIcon = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemMouseEnter = _a.onItemMouseEnter;\n      if (onItemMouseEnter) {\n        onItemMouseEnter(item, ev, _this._splitButton);\n      }\n    };\n    _this._onItemMouseMovePrimary = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemMouseMove = _a.onItemMouseMove;\n      if (onItemMouseMove) {\n        onItemMouseMove(__assign(__assign({}, item), {\n          subMenuProps: undefined,\n          items: undefined\n        }), ev, _this._splitButton);\n      }\n    };\n    _this._onItemMouseMoveIcon = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemMouseMove = _a.onItemMouseMove;\n      if (onItemMouseMove) {\n        onItemMouseMove(item, ev, _this._splitButton);\n      }\n    };\n    _this._onIconItemClick = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        onItemClickBase = _a.onItemClickBase;\n      if (onItemClickBase) {\n        onItemClickBase(item, ev, _this._splitButton ? _this._splitButton : ev.currentTarget);\n      }\n    };\n    _this._executeItemClick = function (ev) {\n      var _a = _this.props,\n        item = _a.item,\n        executeItemClick = _a.executeItemClick,\n        onItemClick = _a.onItemClick;\n      if (item.disabled || item.isDisabled) {\n        return;\n      }\n      if (_this._processingTouch && onItemClick) {\n        return onItemClick(item, ev);\n      }\n      if (executeItemClick) {\n        executeItemClick(item, ev);\n      }\n    };\n    _this._onTouchStart = function (ev) {\n      if (_this._splitButton && !('onpointerdown' in _this._splitButton)) {\n        _this._handleTouchAndPointerEvent(ev);\n      }\n    };\n    _this._onPointerDown = function (ev) {\n      if (ev.pointerType === 'touch') {\n        _this._handleTouchAndPointerEvent(ev);\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n      }\n    };\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    return _this;\n  }\n  ContextualMenuSplitButton.prototype.componentDidMount = function () {\n    if (this._splitButton && 'onpointerdown' in this._splitButton) {\n      this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);\n    }\n  };\n  ContextualMenuSplitButton.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  ContextualMenuSplitButton.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      item = _a.item,\n      classNames = _a.classNames,\n      index = _a.index,\n      focusableElementIndex = _a.focusableElementIndex,\n      totalItemCount = _a.totalItemCount,\n      hasCheckmarks = _a.hasCheckmarks,\n      hasIcons = _a.hasIcons,\n      onItemMouseLeave = _a.onItemMouseLeave,\n      expandedMenuItemKey = _a.expandedMenuItemKey;\n    var itemHasSubmenu = hasSubmenu(item);\n    var keytipProps = item.keytipProps;\n    if (keytipProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    var ariaDescription = item.ariaDescription;\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n    return React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      disabled: isItemDisabled(item)\n    }, function (keytipAttributes) {\n      return React.createElement(\"div\", {\n        \"data-ktp-target\": keytipAttributes['data-ktp-target'],\n        ref: function (splitButton) {\n          return _this._splitButton = splitButton;\n        },\n        role: getMenuItemAriaRole(item),\n        \"aria-label\": item.ariaLabel,\n        className: classNames.splitContainer,\n        \"aria-disabled\": isItemDisabled(item),\n        \"aria-expanded\": itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\n        \"aria-haspopup\": true,\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescription ? _this._ariaDescriptionId : undefined, keytipAttributes['aria-describedby']),\n        \"aria-checked\": item.isChecked || item.checked,\n        \"aria-posinset\": focusableElementIndex + 1,\n        \"aria-setsize\": totalItemCount,\n        onMouseEnter: _this._onItemMouseEnterPrimary,\n        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, __assign(__assign({}, item), {\n          subMenuProps: null,\n          items: null\n        })) : undefined,\n        onMouseMove: _this._onItemMouseMovePrimary,\n        onKeyDown: _this._onItemKeyDown,\n        onClick: _this._executeItemClick,\n        onTouchStart: _this._onTouchStart,\n        tabIndex: 0,\n        \"data-is-focusable\": true,\n        \"aria-roledescription\": item['aria-roledescription']\n      }, _this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks, hasIcons), _this._renderSplitDivider(item), _this._renderSplitIconButton(item, classNames, index, keytipAttributes), _this._renderAriaDescription(ariaDescription, classNames.screenReaderText));\n    });\n  };\n  ContextualMenuSplitButton.prototype._renderSplitPrimaryButton = function (item,\n  // eslint-disable-next-line deprecation/deprecation\n  classNames, index, hasCheckmarks, hasIcons) {\n    var _a = this.props,\n      _b = _a.contextualMenuItemAs,\n      ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n      onItemClick = _a.onItemClick;\n    var itemProps = {\n      key: item.key,\n      disabled: isItemDisabled(item) || item.primaryDisabled,\n      /* eslint-disable deprecation/deprecation */\n      name: item.name,\n      text: item.text || item.name,\n      secondaryText: item.secondaryText,\n      /* eslint-enable deprecation/deprecation */\n      className: classNames.splitPrimary,\n      canCheck: item.canCheck,\n      isChecked: item.isChecked,\n      checked: item.checked,\n      iconProps: item.iconProps,\n      onRenderIcon: item.onRenderIcon,\n      data: item.data,\n      'data-is-focusable': false\n    };\n    var itemComponentProps = item.itemProps;\n    return React.createElement(\"button\", __assign({}, getNativeProps(itemProps, buttonProperties)), React.createElement(ChildrenRenderer, __assign({\n      \"data-is-focusable\": false,\n      item: itemProps,\n      classNames: classNames,\n      index: index,\n      onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : undefined,\n      hasIcons: hasIcons\n    }, itemComponentProps)));\n  };\n  ContextualMenuSplitButton.prototype._renderSplitDivider = function (item) {\n    var getDividerClassNames = item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;\n    return React.createElement(VerticalDivider, {\n      getClassNames: getDividerClassNames\n    });\n  };\n  ContextualMenuSplitButton.prototype._renderSplitIconButton = function (item, classNames,\n  // eslint-disable-line deprecation/deprecation\n  index, keytipAttributes) {\n    var _a = this.props,\n      _b = _a.contextualMenuItemAs,\n      ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b,\n      onItemMouseLeave = _a.onItemMouseLeave,\n      onItemMouseDown = _a.onItemMouseDown,\n      openSubMenu = _a.openSubMenu,\n      dismissSubMenu = _a.dismissSubMenu,\n      dismissMenu = _a.dismissMenu;\n    var itemProps = {\n      onClick: this._onIconItemClick,\n      disabled: isItemDisabled(item),\n      className: classNames.splitMenu,\n      subMenuProps: item.subMenuProps,\n      submenuIconProps: item.submenuIconProps,\n      split: true,\n      key: item.key\n    };\n    var buttonProps = __assign(__assign({}, getNativeProps(itemProps, buttonProperties)), {\n      onMouseEnter: this._onItemMouseEnterIcon,\n      onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,\n      onMouseDown: function (ev) {\n        return onItemMouseDown ? onItemMouseDown(item, ev) : undefined;\n      },\n      onMouseMove: this._onItemMouseMoveIcon,\n      'data-is-focusable': false,\n      'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],\n      'aria-hidden': true\n    });\n    var itemComponentProps = item.itemProps;\n    return React.createElement(\"button\", __assign({}, buttonProps), React.createElement(ChildrenRenderer, __assign({\n      componentRef: item.componentRef,\n      item: itemProps,\n      classNames: classNames,\n      index: index,\n      hasIcons: false,\n      openSubMenu: openSubMenu,\n      dismissSubMenu: dismissSubMenu,\n      dismissMenu: dismissMenu,\n      getSubmenuTarget: this._getSubmenuTarget\n    }, itemComponentProps)));\n  };\n  ContextualMenuSplitButton.prototype._handleTouchAndPointerEvent = function (ev) {\n    var _this = this;\n    var onTap = this.props.onTap;\n    if (onTap) {\n      onTap(ev);\n    }\n    // If we already have an existing timeout from a previous touch/pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(function () {\n      _this._processingTouch = false;\n      _this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  };\n  return ContextualMenuSplitButton;\n}(ContextualMenuItemWrapper);\nexport { ContextualMenuSplitButton };","map":{"version":3,"sources":["components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  buttonProperties,\n  getNativeProps,\n  KeyCodes,\n  mergeAriaAttributeValues,\n  memoizeFunction,\n  Async,\n  EventGroup,\n  getId,\n} from '../../../Utilities';\nimport { ContextualMenuItem } from '../ContextualMenuItem';\nimport { IContextualMenuItem } from '../ContextualMenu.types';\nimport { IMenuItemClassNames, getSplitButtonVerticalDividerClassNames } from '../ContextualMenu.classNames';\nimport { KeytipData } from '../../../KeytipData';\nimport { isItemDisabled, hasSubmenu, getMenuItemAriaRole } from '../../../utilities/contextualMenu/index';\nimport { VerticalDivider } from '../../../Divider';\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\nimport { IKeytipProps } from '../../Keytip/Keytip.types';\nimport { IContextualMenuItemWrapperProps } from './ContextualMenuItemWrapper.types';\n\nexport interface IContextualMenuSplitButtonState {}\n\nconst TouchIdleDelay = 500; /* ms */\n\nexport class ContextualMenuSplitButton extends ContextualMenuItemWrapper {\n  private _splitButton: HTMLDivElement;\n  private _lastTouchTimeoutId: number | undefined;\n  private _processingTouch: boolean;\n  private _ariaDescriptionId: string;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  constructor(props: IContextualMenuItemWrapperProps) {\n    super(props);\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount() {\n    if (this._splitButton && 'onpointerdown' in this._splitButton) {\n      this._events.on(this._splitButton, 'pointerdown', this._onPointerDown, true);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      item,\n      classNames,\n      index,\n      focusableElementIndex,\n      totalItemCount,\n      hasCheckmarks,\n      hasIcons,\n      onItemMouseLeave,\n      expandedMenuItemKey,\n    } = this.props;\n\n    const itemHasSubmenu = hasSubmenu(item);\n\n    let { keytipProps } = item;\n    if (keytipProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    // Check for ariaDescription to set the _ariaDescriptionId and render a hidden span with\n    // the description in it to be added to ariaDescribedBy\n    const { ariaDescription } = item;\n    if (ariaDescription) {\n      this._ariaDescriptionId = getId();\n    }\n\n    return (\n      <KeytipData keytipProps={keytipProps} disabled={isItemDisabled(item)}>\n        {(keytipAttributes: any): JSX.Element => (\n          <div\n            data-ktp-target={keytipAttributes['data-ktp-target']}\n            ref={(splitButton: HTMLDivElement) => (this._splitButton = splitButton)}\n            role={getMenuItemAriaRole(item)}\n            aria-label={item.ariaLabel}\n            className={classNames.splitContainer}\n            aria-disabled={isItemDisabled(item)}\n            aria-expanded={itemHasSubmenu ? item.key === expandedMenuItemKey : undefined}\n            aria-haspopup={true}\n            aria-describedby={mergeAriaAttributeValues(\n              ariaDescription ? this._ariaDescriptionId : undefined,\n              keytipAttributes['aria-describedby'],\n            )}\n            aria-checked={item.isChecked || item.checked}\n            aria-posinset={focusableElementIndex + 1}\n            aria-setsize={totalItemCount}\n            onMouseEnter={this._onItemMouseEnterPrimary}\n            onMouseLeave={\n              onItemMouseLeave ? onItemMouseLeave.bind(this, { ...item, subMenuProps: null, items: null }) : undefined\n            }\n            onMouseMove={this._onItemMouseMovePrimary}\n            onKeyDown={this._onItemKeyDown}\n            onClick={this._executeItemClick}\n            onTouchStart={this._onTouchStart}\n            tabIndex={0}\n            data-is-focusable={true}\n            aria-roledescription={item['aria-roledescription']}\n          >\n            {this._renderSplitPrimaryButton(item, classNames, index, hasCheckmarks!, hasIcons!)}\n            {this._renderSplitDivider(item)}\n            {this._renderSplitIconButton(item, classNames, index, keytipAttributes)}\n            {this._renderAriaDescription(ariaDescription, classNames.screenReaderText)}\n          </div>\n        )}\n      </KeytipData>\n    );\n  }\n\n  protected _renderAriaDescription = (ariaDescription?: string, className?: string) => {\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan\n    return ariaDescription ? (\n      <span id={this._ariaDescriptionId} className={className}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  protected _onItemKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { item, onItemKeyDown } = this.props;\n    if (ev.which === KeyCodes.enter) {\n      this._executeItemClick(ev);\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if (onItemKeyDown) {\n      onItemKeyDown(item, ev);\n    }\n  };\n\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\n    return this._splitButton;\n  };\n\n  private _renderSplitPrimaryButton(\n    item: IContextualMenuItem,\n    // eslint-disable-next-line deprecation/deprecation\n    classNames: IMenuItemClassNames,\n    index: number,\n    hasCheckmarks: boolean,\n    hasIcons: boolean,\n  ) {\n    const { contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem, onItemClick } = this.props;\n\n    const itemProps: IContextualMenuItem = {\n      key: item.key,\n      disabled: isItemDisabled(item) || item.primaryDisabled,\n      /* eslint-disable deprecation/deprecation */\n      name: item.name,\n      text: item.text || item.name,\n      secondaryText: item.secondaryText,\n      /* eslint-enable deprecation/deprecation */\n      className: classNames.splitPrimary,\n      canCheck: item.canCheck,\n      isChecked: item.isChecked,\n      checked: item.checked,\n      iconProps: item.iconProps,\n      onRenderIcon: item.onRenderIcon,\n      data: item.data,\n      'data-is-focusable': false,\n    };\n\n    const { itemProps: itemComponentProps } = item;\n\n    return (\n      <button {...getNativeProps(itemProps, buttonProperties)}>\n        <ChildrenRenderer\n          data-is-focusable={false}\n          item={itemProps}\n          classNames={classNames}\n          index={index}\n          onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\n          hasIcons={hasIcons}\n          {...itemComponentProps}\n        />\n      </button>\n    );\n  }\n\n  private _renderSplitDivider(item: IContextualMenuItem) {\n    const getDividerClassNames =\n      item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;\n    return <VerticalDivider getClassNames={getDividerClassNames} />;\n  }\n\n  private _renderSplitIconButton(\n    item: IContextualMenuItem,\n    classNames: IMenuItemClassNames, // eslint-disable-line deprecation/deprecation\n    index: number,\n    keytipAttributes: any,\n  ) {\n    const {\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\n      onItemMouseLeave,\n      onItemMouseDown,\n      openSubMenu,\n      dismissSubMenu,\n      dismissMenu,\n    } = this.props;\n\n    const itemProps: IContextualMenuItem = {\n      onClick: this._onIconItemClick,\n      disabled: isItemDisabled(item),\n      className: classNames.splitMenu,\n      subMenuProps: item.subMenuProps,\n      submenuIconProps: item.submenuIconProps,\n      split: true,\n      key: item.key,\n    };\n\n    const buttonProps = {\n      ...getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(itemProps, buttonProperties),\n      ...{\n        onMouseEnter: this._onItemMouseEnterIcon,\n        onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : undefined,\n        onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) =>\n          onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\n        onMouseMove: this._onItemMouseMoveIcon,\n        'data-is-focusable': false,\n        'data-ktp-execute-target': keytipAttributes['data-ktp-execute-target'],\n        'aria-hidden': true,\n      },\n    };\n\n    const { itemProps: itemComponentProps } = item;\n\n    return (\n      <button {...buttonProps}>\n        <ChildrenRenderer\n          componentRef={item.componentRef}\n          item={itemProps}\n          classNames={classNames}\n          index={index}\n          hasIcons={false}\n          openSubMenu={openSubMenu}\n          dismissSubMenu={dismissSubMenu}\n          dismissMenu={dismissMenu}\n          getSubmenuTarget={this._getSubmenuTarget}\n          {...itemComponentProps}\n        />\n      </button>\n    );\n  }\n\n  private _onItemMouseEnterPrimary = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter({ ...item, subMenuProps: undefined, items: undefined }, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseEnterIcon = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseEnter } = this.props;\n    if (onItemMouseEnter) {\n      onItemMouseEnter(item, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseMovePrimary = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove({ ...item, subMenuProps: undefined, items: undefined }, ev, this._splitButton);\n    }\n  };\n\n  private _onItemMouseMoveIcon = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemMouseMove } = this.props;\n    if (onItemMouseMove) {\n      onItemMouseMove(item, ev, this._splitButton);\n    }\n  };\n\n  private _onIconItemClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { item, onItemClickBase } = this.props;\n    if (onItemClickBase) {\n      onItemClickBase(item, ev, (this._splitButton ? this._splitButton : ev.currentTarget) as HTMLElement);\n    }\n  };\n\n  private _executeItemClick = (ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>): void => {\n    const { item, executeItemClick, onItemClick } = this.props;\n\n    if (item.disabled || item.isDisabled) {\n      return;\n    }\n\n    if (this._processingTouch && onItemClick) {\n      return onItemClick(item, ev);\n    }\n\n    if (executeItemClick) {\n      executeItemClick(item, ev);\n    }\n  };\n\n  private _onTouchStart = (ev: React.TouchEvent<HTMLElement>): void => {\n    if (this._splitButton && !('onpointerdown' in this._splitButton)) {\n      this._handleTouchAndPointerEvent(ev);\n    }\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent(ev);\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n\n  private _handleTouchAndPointerEvent(ev: React.TouchEvent<HTMLElement> | PointerEvent) {\n    const { onTap } = this.props;\n\n    if (onTap) {\n      onTap(ev);\n    }\n    // If we already have an existing timeout from a previous touch/pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}