{"ast":null,"code":"import { warn } from './warn';\n/**\n * Warns when two props which are mutually exclusive are both being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\n */\nexport function warnMutuallyExclusive(componentName, props, exclusiveMap) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var propName in exclusiveMap) {\n      if (props && props[propName] !== undefined) {\n        var propInExclusiveMapValue = exclusiveMap[propName];\n        if (propInExclusiveMapValue && props[propInExclusiveMapValue] !== undefined) {\n          warn(componentName + \" property '\" + propName + \"' is mutually exclusive with '\" + exclusiveMap[propName] + \"'. \" + \"Use one or the other.\");\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["warn/warnMutuallyExclusive.ts"],"names":[],"mappings":"AAAA,SAAuB,IAAI,QAAQ,QAAQ;AAC3C;;;;;;;AAOG;AACH,OAAM,SAAU,qBAAqB,CAAI,aAAqB,EAAE,KAAQ,EAAE,YAA6B,EAAA;EACrG,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,KAAK,IAAM,QAAQ,IAAI,YAAY,EAAE;MACnC,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;QAC1C,IAAI,uBAAuB,GAAG,YAAY,CAAC,QAAQ,CAAC;QACpD,IAAI,uBAAuB,IAAI,KAAK,CAAC,uBAAkC,CAAC,KAAK,SAAS,EAAE;UACtF,IAAI,CACC,aAAa,GAAA,aAAA,GAAc,QAAQ,GAAA,gCAAA,GAAiC,YAAY,CAAC,QAAQ,CAAC,GAAA,KAAK,GAChG,uBAAuB,CAC1B;QACF;MACF;IACF;EACF;AACH","sourcesContent":["import { ISettingsMap, warn } from './warn';\n/**\n * Warns when two props which are mutually exclusive are both being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\n */\nexport function warnMutuallyExclusive<P>(componentName: string, props: P, exclusiveMap: ISettingsMap<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const propName in exclusiveMap) {\n      if (props && props[propName] !== undefined) {\n        let propInExclusiveMapValue = exclusiveMap[propName];\n        if (propInExclusiveMapValue && props[propInExclusiveMapValue as keyof P] !== undefined) {\n          warn(\n            `${componentName} property '${propName}' is mutually exclusive with '${exclusiveMap[propName]}'. ` +\n              `Use one or the other.`,\n          );\n        }\n      }\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}