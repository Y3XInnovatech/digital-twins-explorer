{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { keyframes, getGlobalClassNames, hiddenContentStyle, HighContrastSelector, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-Shimmer-container',\n  shimmerWrapper: 'ms-Shimmer-shimmerWrapper',\n  shimmerGradient: 'ms-Shimmer-shimmerGradient',\n  dataWrapper: 'ms-Shimmer-dataWrapper'\n};\nvar BACKGROUND_OFF_SCREEN_POSITION = '100%';\nvar shimmerAnimation = memoizeFunction(function () {\n  return keyframes({\n    '0%': {\n      transform: \"translateX(-\" + BACKGROUND_OFF_SCREEN_POSITION + \")\"\n    },\n    '100%': {\n      transform: \"translateX(\" + BACKGROUND_OFF_SCREEN_POSITION + \")\"\n    }\n  });\n});\nvar shimmerAnimationRTL = memoizeFunction(function () {\n  return keyframes({\n    '100%': {\n      transform: \"translateX(-\" + BACKGROUND_OFF_SCREEN_POSITION + \")\"\n    },\n    '0%': {\n      transform: \"translateX(\" + BACKGROUND_OFF_SCREEN_POSITION + \")\"\n    }\n  });\n});\nexport function getStyles(props) {\n  var _a;\n  var isDataLoaded = props.isDataLoaded,\n    className = props.className,\n    theme = props.theme,\n    transitionAnimationInterval = props.transitionAnimationInterval,\n    shimmerColor = props.shimmerColor,\n    shimmerWaveColor = props.shimmerWaveColor;\n  var semanticColors = theme.semanticColors;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var isRTL = getRTL(theme);\n  return {\n    root: [classNames.root, theme.fonts.medium, {\n      position: 'relative',\n      height: 'auto'\n    }, className],\n    shimmerWrapper: [classNames.shimmerWrapper, {\n      position: 'relative',\n      overflow: 'hidden',\n      transform: 'translateZ(0)',\n      backgroundColor: shimmerColor || semanticColors.disabledBackground,\n      transition: \"opacity \" + transitionAnimationInterval + \"ms\",\n      selectors: (_a = {\n        '> *': {\n          transform: 'translateZ(0)'\n        }\n      }, _a[HighContrastSelector] = __assign({\n        background: \"WindowText\\n                        linear-gradient(\\n                          to right,\\n                          transparent 0%,\\n                          Window 50%,\\n                          transparent 100%)\\n                        0 0 / 90% 100%\\n                        no-repeat\"\n      }, getHighContrastNoAdjustStyle()), _a)\n    }, isDataLoaded && {\n      opacity: '0',\n      position: 'absolute',\n      top: '0',\n      bottom: '0',\n      left: '0',\n      right: '0'\n    }],\n    shimmerGradient: [classNames.shimmerGradient, {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      background: (shimmerColor || semanticColors.disabledBackground) + \"\\n                      linear-gradient(\\n                        to right,\\n                        \" + (shimmerColor || semanticColors.disabledBackground) + \" 0%,\\n                        \" + (shimmerWaveColor || semanticColors.bodyDivider) + \" 50%,\\n                        \" + (shimmerColor || semanticColors.disabledBackground) + \" 100%)\\n                      0 0 / 90% 100%\\n                      no-repeat\",\n      transform: \"translateX(-\" + BACKGROUND_OFF_SCREEN_POSITION + \")\",\n      animationDuration: '2s',\n      animationTimingFunction: 'ease-in-out',\n      animationDirection: 'normal',\n      animationIterationCount: 'infinite',\n      animationName: isRTL ? shimmerAnimationRTL() : shimmerAnimation()\n    }],\n    dataWrapper: [classNames.dataWrapper, {\n      position: 'absolute',\n      top: '0',\n      bottom: '0',\n      left: '0',\n      right: '0',\n      opacity: '0',\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      transition: \"opacity \" + transitionAnimationInterval + \"ms\"\n    }, isDataLoaded && {\n      opacity: '1',\n      position: 'static'\n    }],\n    screenReaderText: hiddenContentStyle\n  };\n}","map":{"version":3,"sources":["components/Shimmer/Shimmer.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\nimport {\n  keyframes,\n  getGlobalClassNames,\n  hiddenContentStyle,\n  HighContrastSelector,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\n\nconst GlobalClassNames = {\n  root: 'ms-Shimmer-container',\n  shimmerWrapper: 'ms-Shimmer-shimmerWrapper',\n  shimmerGradient: 'ms-Shimmer-shimmerGradient',\n  dataWrapper: 'ms-Shimmer-dataWrapper',\n};\n\nconst BACKGROUND_OFF_SCREEN_POSITION = '100%';\n\nconst shimmerAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n    '100%': {\n      transform: `translateX(${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n  }),\n);\n\nconst shimmerAnimationRTL = memoizeFunction(() =>\n  keyframes({\n    '100%': {\n      transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n    '0%': {\n      transform: `translateX(${BACKGROUND_OFF_SCREEN_POSITION})`,\n    },\n  }),\n);\n\nexport function getStyles(props: IShimmerStyleProps): IShimmerStyles {\n  const { isDataLoaded, className, theme, transitionAnimationInterval, shimmerColor, shimmerWaveColor } = props;\n\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const isRTL = getRTL(theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        position: 'relative',\n        height: 'auto',\n      },\n      className,\n    ],\n    shimmerWrapper: [\n      classNames.shimmerWrapper,\n      {\n        position: 'relative',\n        overflow: 'hidden',\n        transform: 'translateZ(0)',\n        backgroundColor: shimmerColor || semanticColors.disabledBackground,\n        transition: `opacity ${transitionAnimationInterval}ms`,\n        selectors: {\n          '> *': {\n            transform: 'translateZ(0)',\n          },\n          [HighContrastSelector]: {\n            background: `WindowText\n                        linear-gradient(\n                          to right,\n                          transparent 0%,\n                          Window 50%,\n                          transparent 100%)\n                        0 0 / 90% 100%\n                        no-repeat`,\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      isDataLoaded && {\n        opacity: '0',\n        position: 'absolute',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n      },\n    ],\n    shimmerGradient: [\n      classNames.shimmerGradient,\n      {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        background: `${shimmerColor || semanticColors.disabledBackground}\n                      linear-gradient(\n                        to right,\n                        ${shimmerColor || semanticColors.disabledBackground} 0%,\n                        ${shimmerWaveColor || semanticColors.bodyDivider} 50%,\n                        ${shimmerColor || semanticColors.disabledBackground} 100%)\n                      0 0 / 90% 100%\n                      no-repeat`,\n        transform: `translateX(-${BACKGROUND_OFF_SCREEN_POSITION})`,\n        animationDuration: '2s',\n        animationTimingFunction: 'ease-in-out',\n        animationDirection: 'normal',\n        animationIterationCount: 'infinite',\n        animationName: isRTL ? shimmerAnimationRTL() : shimmerAnimation(),\n      },\n    ],\n    dataWrapper: [\n      classNames.dataWrapper,\n      {\n        position: 'absolute',\n        top: '0',\n        bottom: '0',\n        left: '0',\n        right: '0',\n        opacity: '0',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        transition: `opacity ${transitionAnimationInterval}ms`,\n      },\n      isDataLoaded && {\n        opacity: '1',\n        position: 'static',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}