{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { print } from \"./LoggingService\";\nimport { configService } from \"./ConfigService\";\nimport { TWIN_DATA_OWNER_RBAC_ID } from \"./Constants\";\nclass RBACService {\n  uuidv4() {\n    // Function to generate a random GUID\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n      /* eslint no-bitwise: [2, { allow: [\"|\"] }] */\n      const r = Math.random() * 16 | 0;\n      const v = c === \"x\" ? r : r | 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n  async getIdentity(path) {\n    const userOptions = {\n      method: \"GET\",\n      headers: {\n        \"x-adt-host\": \"graph.microsoft.com\"\n      }\n    };\n    const results = await fetch(`/api/proxy/Graph/${path}`, userOptions);\n    return await results.json();\n  }\n  async getRBAC(path) {\n    const userOptions = {\n      method: \"GET\",\n      headers: {\n        \"x-adt-host\": \"management.azure.com\"\n      }\n    };\n    const results = await fetch(`/api/proxy/RBAC/${path}`, userOptions);\n    return await results.json();\n  }\n  async postRBACRole(userPrincipalId, twinARMId) {\n    const userOptions = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-adt-host\": \"management.azure.com\"\n      },\n      body: JSON.stringify({\n        \"properties\": {\n          \"principalId\": `${userPrincipalId}`,\n          \"roleDefinitionId\": `${twinARMId}/providers/Microsoft.Authorization/roleDefinitions/${TWIN_DATA_OWNER_RBAC_ID}`\n        }\n      })\n    };\n    return await fetch(`/api/proxy/RBAC${twinARMId}/providers/Microsoft.Authorization/roleAssignments/${this.uuidv4()}?api-version=2020-04-01-preview`, userOptions);\n  }\n  async postTwinsAccess(appName, subId, userPrincipalId) {\n    // Get the twins from a given subscription\n    const result = await this.getRBAC(`${subId}/providers/Microsoft.DigitalTwins/digitalTwinsInstances?api-version=2020-10-31`);\n\n    // Check if our twin is in the list of all twins in that subscription\n    let ARMId = null;\n    if (\"value\" in result && result.value !== false) {\n      for (const value of result.value) {\n        if (value.name.toLowerCase() === appName.toLowerCase()) {\n          ARMId = value.id;\n        }\n      }\n    }\n    if (ARMId === null) {\n      return false;\n    }\n    return await this.postRBACRole(userPrincipalId, ARMId);\n  }\n  async addReaderRBAC() {\n    try {\n      // Get our current twins instance from settings\n      const {\n        appAdtUrl\n      } = await configService.getConfig();\n      const requestParams = {\n        \"appName\": new URL(appAdtUrl).host.split(\".\")[0]\n      };\n\n      // Get the user's principal ID\n      const me = await this.getIdentity(\"v1.0/me\");\n      requestParams.userId = me.id;\n\n      // Get the user's logged in subscriptions\n      const subscriptions = await this.getRBAC(\"subscriptions?api-version=2020-01-01\");\n      requestParams.subscriptions = subscriptions;\n\n      // Loop through our subscriptions to get the twins instance\n      const subscriptionRequests = [];\n      for (const x of requestParams.subscriptions.value) {\n        subscriptionRequests.push(this.postTwinsAccess(requestParams.appName, x.id, requestParams.userId));\n      }\n      return Promise.all(subscriptionRequests);\n    } catch (e) {\n      print(e, \"error\");\n      return false;\n    }\n  }\n}\nexport const rbacService = new RBACService();","map":{"version":3,"names":["print","configService","TWIN_DATA_OWNER_RBAC_ID","RBACService","uuidv4","replace","c","r","Math","random","v","toString","getIdentity","path","userOptions","method","headers","results","fetch","json","getRBAC","postRBACRole","userPrincipalId","twinARMId","body","JSON","stringify","postTwinsAccess","appName","subId","result","ARMId","value","name","toLowerCase","id","addReaderRBAC","appAdtUrl","getConfig","requestParams","URL","host","split","me","userId","subscriptions","subscriptionRequests","x","push","Promise","all","e","rbacService"],"sources":["/home/saharsh/digital-twins-explorer/client/src/services/RBACService.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { print } from \"./LoggingService\";\nimport { configService } from \"./ConfigService\";\nimport { TWIN_DATA_OWNER_RBAC_ID } from \"./Constants\";\n\nclass RBACService {\n\n  uuidv4() {\n    // Function to generate a random GUID\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n      /* eslint no-bitwise: [2, { allow: [\"|\"] }] */\n      const r = Math.random() * 16 | 0;\n      const v = c === \"x\" ? r : (r | 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  async getIdentity(path) {\n    const userOptions = {\n      method: \"GET\",\n      headers: {\n        \"x-adt-host\": \"graph.microsoft.com\"\n      }\n    };\n    const results = await fetch(`/api/proxy/Graph/${path}`, userOptions);\n    return await results.json();\n  }\n\n  async getRBAC(path) {\n    const userOptions = {\n      method: \"GET\",\n      headers: {\n        \"x-adt-host\": \"management.azure.com\"\n      }\n    };\n    const results = await fetch(`/api/proxy/RBAC/${path}`, userOptions);\n    return await results.json();\n  }\n\n  async postRBACRole(userPrincipalId, twinARMId) {\n    const userOptions = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-adt-host\": \"management.azure.com\"\n      },\n      body: JSON.stringify({\n        \"properties\": {\n          \"principalId\": `${userPrincipalId}`,\n          \"roleDefinitionId\": `${twinARMId}/providers/Microsoft.Authorization/roleDefinitions/${TWIN_DATA_OWNER_RBAC_ID}`\n        }\n      })\n    };\n    return await fetch(`/api/proxy/RBAC${twinARMId}/providers/Microsoft.Authorization/roleAssignments/${this.uuidv4()}?api-version=2020-04-01-preview`, userOptions);\n  }\n\n  async postTwinsAccess(appName, subId, userPrincipalId) {\n    // Get the twins from a given subscription\n    const result = await this.getRBAC(`${subId}/providers/Microsoft.DigitalTwins/digitalTwinsInstances?api-version=2020-10-31`);\n\n    // Check if our twin is in the list of all twins in that subscription\n    let ARMId = null;\n    if (\"value\" in result && result.value !== false) {\n      for (const value of result.value) {\n        if (value.name.toLowerCase() === appName.toLowerCase()) {\n          ARMId = value.id;\n        }\n      }\n    }\n    if (ARMId === null) {\n      return false;\n    }\n    return await this.postRBACRole(userPrincipalId, ARMId);\n  }\n\n  async addReaderRBAC() {\n    try {\n      // Get our current twins instance from settings\n      const { appAdtUrl } = await configService.getConfig();\n      const requestParams = {\n        \"appName\": new URL(appAdtUrl).host.split(\".\")[0]\n      };\n\n      // Get the user's principal ID\n      const me = await this.getIdentity(\"v1.0/me\");\n      requestParams.userId = me.id;\n\n      // Get the user's logged in subscriptions\n      const subscriptions = await this.getRBAC(\"subscriptions?api-version=2020-01-01\");\n      requestParams.subscriptions = subscriptions;\n\n      // Loop through our subscriptions to get the twins instance\n      const subscriptionRequests = [];\n      for (const x of requestParams.subscriptions.value) {\n        subscriptionRequests.push(this.postTwinsAccess(requestParams.appName, x.id, requestParams.userId));\n      }\n      return Promise.all(subscriptionRequests);\n    } catch (e) {\n      print(e, \"error\");\n      return false;\n    }\n  }\n\n}\n\nexport const rbacService = new RBACService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}