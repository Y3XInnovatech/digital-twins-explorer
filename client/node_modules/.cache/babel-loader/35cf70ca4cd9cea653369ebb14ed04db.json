{"ast":null,"code":"/**\n * Functions used by Stack components to simplify style-related computations\n */\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nvar _getThemedSpacing = function (space, theme) {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space];\n  }\n  return space;\n};\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nvar _getValueUnitGap = function (gap) {\n  var numericalPart = parseFloat(gap);\n  var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  var numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n  var unitPart = gap.substring(numericalString.toString().length);\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px'\n  };\n};\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport var parseGap = function (gap, theme) {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px'\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n  }\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px'\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px'\n      }\n    };\n  }\n  var splitGap = gap.split(' ');\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px'\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n  }\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme))\n    };\n  }\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap\n  };\n};\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport var parsePadding = function (padding, theme) {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n  var paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n  return paddingValues.reduce(function (padding1, padding2) {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};","map":{"version":3,"sources":["components/Stack/StackUtils.ts"],"names":[],"mappings":"AAAA;;AAEG;AAKH;AACA,IAAM,iBAAiB,GAAG,SAAA,CAAC,KAAa,EAAE,KAAa,EAAA;EACrD,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;IACvC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAmC,CAAC;EAC1D;EACD,OAAO,KAAK;AACd,CAAC;AAED;AACA,IAAM,gBAAgB,GAAG,SAAA,CAAC,GAAW,EAAA;EACnC,IAAM,aAAa,GAAG,UAAU,CAAC,GAAG,CAAC;EACrC,IAAM,cAAc,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,aAAa;EAC/D,IAAM,eAAe,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,aAAa,CAAC,QAAQ,CAAA,CAAE;EAE5E,IAAM,QAAQ,GAAG,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,QAAQ,CAAA,CAAE,CAAC,MAAM,CAAC;EAEjE,OAAO;IACL,KAAK,EAAE,cAAc;IACrB,IAAI,EAAE,QAAQ,IAAI;GACnB;AACH,CAAC;AAED;;;;;AAKG;AACH,OAAO,IAAM,QAAQ,GAAG,SAAA,CACtB,GAAuB,EACvB,KAAa,EAAA;EAEb,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,EAAE,EAAE;IACnC,OAAO;MACL,MAAM,EAAE;QACN,KAAK,EAAE,CAAC;QACR,IAAI,EAAE;OACP;MACD,SAAS,EAAE;QACT,KAAK,EAAE,CAAC;QACR,IAAI,EAAE;MACP;KACF;EACF;EAED,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAO;MACL,MAAM,EAAE;QACN,KAAK,EAAE,GAAG;QACV,IAAI,EAAE;OACP;MACD,SAAS,EAAE;QACT,KAAK,EAAE,GAAG;QACV,IAAI,EAAE;MACP;KACF;EACF;EAED,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;EAE/B;EACA,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;IACvB,OAAO;MACL,MAAM,EAAE;QACN,KAAK,EAAE,CAAC;QACR,IAAI,EAAE;OACP;MACD,SAAS,EAAE;QACT,KAAK,EAAE,CAAC;QACR,IAAI,EAAE;MACP;KACF;EACF;EAED;EACA,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO;MACL,MAAM,EAAE,gBAAgB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;MAC/D,SAAS,EAAE,gBAAgB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;KAClE;EACF;EAED;EACA,IAAM,aAAa,GAAG,gBAAgB,CAAC,iBAAiB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;EAErE,OAAO;IACL,MAAM,EAAE,aAAa;IACrB,SAAS,EAAE;GACZ;AACH,CAAC;AAED;;;;;AAKG;AACH,OAAO,IAAM,YAAY,GAAG,SAAA,CAAC,OAAoC,EAAE,KAAa,EAAA;EAC9E,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,EAAE,EAAE;IAC1E,OAAO,OAAO;EACf;EAED,IAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;EACxC,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;IAC5B,OAAO,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC;EACzC;EAED,OAAO,aAAa,CAAC,MAAM,CAAC,UAAC,QAAgB,EAAE,QAAgB,EAAA;IAC7D,OAAO,iBAAiB,CAAC,QAAQ,EAAE,KAAK,CAAC,GAAG,GAAG,GAAG,iBAAiB,CAAC,QAAQ,EAAE,KAAK,CAAC;EACtF,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/**\n * Functions used by Stack components to simplify style-related computations\n */\n\nimport { ITheme } from '../../Styling';\nimport { IStackProps } from './Stack.types';\n\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nconst _getThemedSpacing = (space: string, theme: ITheme): string => {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space as keyof typeof theme.spacing];\n  }\n  return space;\n};\n\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nconst _getValueUnitGap = (gap: string): { value: number; unit: string } => {\n  const numericalPart = parseFloat(gap);\n  const numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  const numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n\n  const unitPart = gap.substring(numericalString.toString().length);\n\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px',\n  };\n};\n\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport const parseGap = (\n  gap: IStackProps['gap'],\n  theme: ITheme,\n): { rowGap: { value: number; unit: string }; columnGap: { value: number; unit: string } } => {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px',\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px',\n      },\n    };\n  }\n\n  const splitGap = gap.split(' ');\n\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme)),\n    };\n  }\n\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  const calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap,\n  };\n};\n\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport const parsePadding = (padding: number | string | undefined, theme: ITheme): number | string | undefined => {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  const paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce((padding1: string, padding2: string) => {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}