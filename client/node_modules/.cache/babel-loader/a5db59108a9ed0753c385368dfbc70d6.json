{"ast":null,"code":"import { EventGroup } from './EventGroup';\nimport { findScrollableParent } from './scroll';\nimport { getRect } from './dom/getRect';\nvar SCROLL_ITERATION_DELAY = 16;\nvar SCROLL_GUTTER = 100;\nvar MAX_SCROLL_VELOCITY = 15;\n/**\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\n * up/down depending on how close the mouse is to the top/bottom of the container.\n *\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\n *\n * @public\n * {@docCategory AutoScroll}\n */\nvar AutoScroll = /** @class */function () {\n  function AutoScroll(element) {\n    this._events = new EventGroup(this);\n    this._scrollableParent = findScrollableParent(element);\n    this._incrementScroll = this._incrementScroll.bind(this);\n    this._scrollRect = getRect(this._scrollableParent);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this._scrollableParent === window) {\n      this._scrollableParent = document.body;\n    }\n    if (this._scrollableParent) {\n      this._events.on(window, 'mousemove', this._onMouseMove, true);\n      this._events.on(window, 'touchmove', this._onTouchMove, true);\n    }\n  }\n  AutoScroll.prototype.dispose = function () {\n    this._events.dispose();\n    this._stopScroll();\n  };\n  AutoScroll.prototype._onMouseMove = function (ev) {\n    this._computeScrollVelocity(ev);\n  };\n  AutoScroll.prototype._onTouchMove = function (ev) {\n    if (ev.touches.length > 0) {\n      this._computeScrollVelocity(ev);\n    }\n  };\n  AutoScroll.prototype._computeScrollVelocity = function (ev) {\n    if (!this._scrollRect) {\n      return;\n    }\n    var clientX;\n    var clientY;\n    if ('clientX' in ev) {\n      clientX = ev.clientX;\n      clientY = ev.clientY;\n    } else {\n      clientX = ev.touches[0].clientX;\n      clientY = ev.touches[0].clientY;\n    }\n    var scrollRectTop = this._scrollRect.top;\n    var scrollRectLeft = this._scrollRect.left;\n    var scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER;\n    var scrollClientRight = scrollRectLeft + this._scrollRect.width - SCROLL_GUTTER;\n    // variables to use for alternating scroll direction\n    var scrollRect;\n    var clientDirection;\n    var scrollClient;\n    // if either of these conditions are met we are scrolling vertically else horizontally\n    if (clientY < scrollRectTop + SCROLL_GUTTER || clientY > scrollClientBottom) {\n      clientDirection = clientY;\n      scrollRect = scrollRectTop;\n      scrollClient = scrollClientBottom;\n      this._isVerticalScroll = true;\n    } else {\n      clientDirection = clientX;\n      scrollRect = scrollRectLeft;\n      scrollClient = scrollClientRight;\n      this._isVerticalScroll = false;\n    }\n    // calculate scroll velocity and direction\n    if (clientDirection < scrollRect + SCROLL_GUTTER) {\n      this._scrollVelocity = Math.max(-MAX_SCROLL_VELOCITY, -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER - (clientDirection - scrollRect)) / SCROLL_GUTTER));\n    } else if (clientDirection > scrollClient) {\n      this._scrollVelocity = Math.min(MAX_SCROLL_VELOCITY, MAX_SCROLL_VELOCITY * ((clientDirection - scrollClient) / SCROLL_GUTTER));\n    } else {\n      this._scrollVelocity = 0;\n    }\n    if (this._scrollVelocity) {\n      this._startScroll();\n    } else {\n      this._stopScroll();\n    }\n  };\n  AutoScroll.prototype._startScroll = function () {\n    if (!this._timeoutId) {\n      this._incrementScroll();\n    }\n  };\n  AutoScroll.prototype._incrementScroll = function () {\n    if (this._scrollableParent) {\n      if (this._isVerticalScroll) {\n        this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);\n      } else {\n        this._scrollableParent.scrollLeft += Math.round(this._scrollVelocity);\n      }\n    }\n    this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);\n  };\n  AutoScroll.prototype._stopScroll = function () {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      delete this._timeoutId;\n    }\n  };\n  return AutoScroll;\n}();\nexport { AutoScroll };","map":{"version":3,"sources":["AutoScroll.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventGroup } from './EventGroup';\nimport { findScrollableParent } from './scroll';\nimport { getRect } from './dom/getRect';\nimport { IRectangle } from './IRectangle';\n\ndeclare function setTimeout(cb: Function, delay: number): number;\n\nconst SCROLL_ITERATION_DELAY = 16;\nconst SCROLL_GUTTER = 100;\nconst MAX_SCROLL_VELOCITY = 15;\n\n/**\n * AutoScroll simply hooks up mouse events given a parent element, and scrolls the container\n * up/down depending on how close the mouse is to the top/bottom of the container.\n *\n * Once you don't want autoscroll any more, just dispose the helper and it will unhook events.\n *\n * @public\n * {@docCategory AutoScroll}\n */\nexport class AutoScroll {\n  private _events: EventGroup;\n  private _scrollableParent: HTMLElement | null;\n  private _scrollRect: IRectangle | undefined;\n  private _scrollVelocity: number;\n  private _isVerticalScroll: boolean;\n  private _timeoutId: number;\n\n  constructor(element: HTMLElement) {\n    this._events = new EventGroup(this);\n    this._scrollableParent = findScrollableParent(element) as HTMLElement;\n\n    this._incrementScroll = this._incrementScroll.bind(this);\n    this._scrollRect = getRect(this._scrollableParent);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this._scrollableParent === (window as any)) {\n      this._scrollableParent = document.body;\n    }\n\n    if (this._scrollableParent) {\n      this._events.on(window, 'mousemove', this._onMouseMove, true);\n      this._events.on(window, 'touchmove', this._onTouchMove, true);\n    }\n  }\n\n  public dispose(): void {\n    this._events.dispose();\n    this._stopScroll();\n  }\n\n  private _onMouseMove(ev: MouseEvent): void {\n    this._computeScrollVelocity(ev);\n  }\n\n  private _onTouchMove(ev: TouchEvent): void {\n    if (ev.touches.length > 0) {\n      this._computeScrollVelocity(ev);\n    }\n  }\n\n  private _computeScrollVelocity(ev: MouseEvent | TouchEvent): void {\n    if (!this._scrollRect) {\n      return;\n    }\n\n    let clientX: number;\n    let clientY: number;\n    if ('clientX' in ev) {\n      clientX = ev.clientX;\n      clientY = ev.clientY;\n    } else {\n      clientX = ev.touches[0].clientX;\n      clientY = ev.touches[0].clientY;\n    }\n\n    let scrollRectTop = this._scrollRect.top;\n    let scrollRectLeft = this._scrollRect.left;\n    let scrollClientBottom = scrollRectTop + this._scrollRect.height - SCROLL_GUTTER;\n    let scrollClientRight = scrollRectLeft + this._scrollRect.width - SCROLL_GUTTER;\n\n    // variables to use for alternating scroll direction\n    let scrollRect;\n    let clientDirection;\n    let scrollClient;\n\n    // if either of these conditions are met we are scrolling vertically else horizontally\n    if (clientY < scrollRectTop + SCROLL_GUTTER || clientY > scrollClientBottom) {\n      clientDirection = clientY;\n      scrollRect = scrollRectTop;\n      scrollClient = scrollClientBottom;\n      this._isVerticalScroll = true;\n    } else {\n      clientDirection = clientX;\n      scrollRect = scrollRectLeft;\n      scrollClient = scrollClientRight;\n      this._isVerticalScroll = false;\n    }\n\n    // calculate scroll velocity and direction\n    if (clientDirection! < scrollRect + SCROLL_GUTTER) {\n      this._scrollVelocity = Math.max(\n        -MAX_SCROLL_VELOCITY,\n        -MAX_SCROLL_VELOCITY * ((SCROLL_GUTTER - (clientDirection - scrollRect)) / SCROLL_GUTTER),\n      );\n    } else if (clientDirection > scrollClient) {\n      this._scrollVelocity = Math.min(\n        MAX_SCROLL_VELOCITY,\n        MAX_SCROLL_VELOCITY * ((clientDirection - scrollClient) / SCROLL_GUTTER),\n      );\n    } else {\n      this._scrollVelocity = 0;\n    }\n\n    if (this._scrollVelocity) {\n      this._startScroll();\n    } else {\n      this._stopScroll();\n    }\n  }\n\n  private _startScroll(): void {\n    if (!this._timeoutId) {\n      this._incrementScroll();\n    }\n  }\n\n  private _incrementScroll(): void {\n    if (this._scrollableParent) {\n      if (this._isVerticalScroll) {\n        this._scrollableParent.scrollTop += Math.round(this._scrollVelocity);\n      } else {\n        this._scrollableParent.scrollLeft += Math.round(this._scrollVelocity);\n      }\n    }\n\n    this._timeoutId = setTimeout(this._incrementScroll, SCROLL_ITERATION_DELAY);\n  }\n\n  private _stopScroll(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      delete this._timeoutId;\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}