{"ast":null,"code":"import { findElementRecursive } from './findElementRecursive';\n/**\n * Determines if an element, or any of its ancestors, contain the given attribute\n * @param element - element to start searching at\n * @param attribute - the attribute to search for\n * @returns the value of the first instance found\n */\nexport function elementContainsAttribute(element, attribute) {\n  var elementMatch = findElementRecursive(element, function (testElement) {\n    return testElement.hasAttribute(attribute);\n  });\n  return elementMatch && elementMatch.getAttribute(attribute);\n}","map":{"version":3,"sources":["elementContainsAttribute.ts"],"names":[],"mappings":"AAAA,SAAS,oBAAoB,QAAQ,wBAAwB;AAE7D;;;;;AAKG;AACH,OAAM,SAAU,wBAAwB,CAAC,OAAoB,EAAE,SAAiB,EAAA;EAC9E,IAAM,YAAY,GAAG,oBAAoB,CAAC,OAAO,EAAE,UAAC,WAAwB,EAAA;IAAK,OAAA,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC;EAAnC,CAAmC,CAAC;EAErH,OAAO,YAAY,IAAI,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC;AAC7D","sourcesContent":["import { findElementRecursive } from './findElementRecursive';\n\n/**\n * Determines if an element, or any of its ancestors, contain the given attribute\n * @param element - element to start searching at\n * @param attribute - the attribute to search for\n * @returns the value of the first instance found\n */\nexport function elementContainsAttribute(element: HTMLElement, attribute: string): string | null {\n  const elementMatch = findElementRecursive(element, (testElement: HTMLElement) => testElement.hasAttribute(attribute));\n\n  return elementMatch && elementMatch.getAttribute(attribute);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}