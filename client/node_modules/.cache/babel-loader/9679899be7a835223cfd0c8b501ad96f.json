{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, classNamesFunction } from '../../Utilities';\nimport { initializeComponentRef } from '@uifabric/utilities';\nvar getClassNames = classNamesFunction();\nvar TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD = 5;\n/**\n * {@docCategory DocumentCard}\n */\nvar DocumentCardTitleBase = /** @class */function (_super) {\n  __extends(DocumentCardTitleBase, _super);\n  function DocumentCardTitleBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._titleElement = React.createRef();\n    _this._measureTitleElement = React.createRef();\n    // Truncate logic here way can't handle the case that chars with different widths are mixed very well.\n    // Let _shrinkTitle take care of that.\n    _this._truncateTitle = function () {\n      if (!_this.state.needMeasurement) {\n        return;\n      }\n      _this._async.requestAnimationFrame(_this._truncateWhenInAnimation);\n    };\n    _this._truncateWhenInAnimation = function () {\n      var originalTitle = _this.props.title;\n      var element = _this._measureTitleElement.current;\n      if (element) {\n        var style = getComputedStyle(element);\n        if (style.width && style.lineHeight && style.height) {\n          var clientWidth = element.clientWidth,\n            scrollWidth = element.scrollWidth;\n          var lines = Math.floor((parseInt(style.height, 10) + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD) / parseInt(style.lineHeight, 10));\n          // Use overflow to predict truncated length.\n          // Take an example.The text is: A text with A very long text that need to be truncated.ppt\n          // if container is like\n          // |A text with A very| long text that need to be truncated.ppt\n          // The scroll width is 58, (take two | out of length)\n          // The client width is 18\n          // the overflow rate is scrollWidth/clientWidth which should be close to length(overflowText)/length(visualText)\n          // And the length of remaining text should be truncated is (original Length)/(58/18) -3 = 15.\n          // So that the logic can predict truncated text well.\n          // first piece will be `A text `, * second piece will be `ated.ppt`\n          // |A text ...ated.ppt|\n          var overFlowRate = scrollWidth / (parseInt(style.width, 10) * lines);\n          if (overFlowRate > 1) {\n            var truncatedLength = originalTitle.length / overFlowRate - 3 /** Saved for separator */;\n            return _this.setState({\n              truncatedTitleFirstPiece: originalTitle.slice(0, truncatedLength / 2),\n              truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - truncatedLength / 2),\n              clientWidth: clientWidth,\n              needMeasurement: false\n            });\n          }\n        }\n      }\n      return _this.setState({\n        needMeasurement: false\n      });\n    };\n    _this._shrinkTitle = function () {\n      var _a = _this.state,\n        truncatedTitleFirstPiece = _a.truncatedTitleFirstPiece,\n        truncatedTitleSecondPiece = _a.truncatedTitleSecondPiece;\n      if (truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n        var titleElement = _this._titleElement.current;\n        if (!titleElement) {\n          return;\n        }\n        if (titleElement.scrollHeight > titleElement.clientHeight + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD || titleElement.scrollWidth > titleElement.clientWidth) {\n          _this.setState({\n            truncatedTitleFirstPiece: truncatedTitleFirstPiece.slice(0, truncatedTitleFirstPiece.length - 1),\n            truncatedTitleSecondPiece: truncatedTitleSecondPiece.slice(1)\n          });\n        }\n      }\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      truncatedTitleFirstPiece: '',\n      truncatedTitleSecondPiece: '',\n      previousTitle: props.title,\n      needMeasurement: !!props.shouldTruncate\n    };\n    return _this;\n  }\n  DocumentCardTitleBase.prototype.componentDidUpdate = function () {\n    if (this.props.title !== this.state.previousTitle) {\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined,\n        clientWidth: undefined,\n        previousTitle: this.props.title,\n        needMeasurement: !!this.props.shouldTruncate\n      });\n    }\n    this._events.off(window, 'resize', this._updateTruncation);\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n      requestAnimationFrame(this._shrinkTitle);\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  };\n  DocumentCardTitleBase.prototype.componentDidMount = function () {\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  };\n  DocumentCardTitleBase.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n    this._async.dispose();\n  };\n  DocumentCardTitleBase.prototype.render = function () {\n    var _a = this.props,\n      title = _a.title,\n      shouldTruncate = _a.shouldTruncate,\n      showAsSecondaryTitle = _a.showAsSecondaryTitle,\n      styles = _a.styles,\n      theme = _a.theme,\n      className = _a.className;\n    var _b = this.state,\n      truncatedTitleFirstPiece = _b.truncatedTitleFirstPiece,\n      truncatedTitleSecondPiece = _b.truncatedTitleSecondPiece,\n      needMeasurement = _b.needMeasurement;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      showAsSecondaryTitle: showAsSecondaryTitle\n    });\n    var documentCardTitle;\n    if (needMeasurement) {\n      documentCardTitle = React.createElement(\"div\", {\n        className: this._classNames.root,\n        ref: this._measureTitleElement,\n        title: title,\n        style: {\n          whiteSpace: 'nowrap'\n        }\n      }, title);\n    } else if (shouldTruncate && truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      documentCardTitle = React.createElement(\"div\", {\n        className: this._classNames.root,\n        ref: this._titleElement,\n        title: title\n      }, truncatedTitleFirstPiece, \"\\u2026\", truncatedTitleSecondPiece);\n    } else {\n      documentCardTitle = React.createElement(\"div\", {\n        className: this._classNames.root,\n        ref: this._titleElement,\n        title: title\n      }, title);\n    }\n    return documentCardTitle;\n  };\n  DocumentCardTitleBase.prototype._updateTruncation = function () {\n    var _this = this;\n    this._async.requestAnimationFrame(function () {\n      // Only update truncation if the title's size has changed since the last time we truncated\n      if (_this._titleElement.current) {\n        var clientWidth = _this._titleElement.current.clientWidth;\n        // Throttle truncation so that it doesn't happen during a window resize\n        clearTimeout(_this._titleTruncationTimer);\n        if (_this.state.clientWidth !== clientWidth) {\n          _this._titleTruncationTimer = _this._async.setTimeout(function () {\n            return _this.setState({\n              truncatedTitleFirstPiece: undefined,\n              truncatedTitleSecondPiece: undefined,\n              needMeasurement: true\n            });\n          }, 250);\n        }\n      }\n    });\n  };\n  return DocumentCardTitleBase;\n}(React.Component);\nexport { DocumentCardTitleBase };","map":{"version":3,"sources":["components/DocumentCard/DocumentCardTitle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { Async, EventGroup, classNamesFunction } from '../../Utilities';\nimport {\n  IDocumentCardTitleProps,\n  IDocumentCardTitleStyleProps,\n  IDocumentCardTitleStyles,\n} from './DocumentCardTitle.types';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef } from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IDocumentCardTitleStyleProps, IDocumentCardTitleStyles>();\n\nexport interface IDocumentCardTitleState {\n  truncatedTitleFirstPiece?: string;\n  truncatedTitleSecondPiece?: string;\n  clientWidth?: number;\n  previousTitle: string;\n\n  /**\n   * In measuring, it will render a same style text with whiteSpace: 'nowrap', to get overflow rate.\n   * So that the logic can predict truncated text well.\n   */\n  needMeasurement: boolean;\n}\n\nconst TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD = 5;\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardTitleBase extends React.Component<IDocumentCardTitleProps, IDocumentCardTitleState> {\n  private _titleElement = React.createRef<HTMLDivElement>();\n  private _measureTitleElement = React.createRef<HTMLDivElement>();\n\n  private _titleTruncationTimer: number;\n  private _classNames: IProcessedStyleSet<IDocumentCardTitleStyles>;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  constructor(props: IDocumentCardTitleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      truncatedTitleFirstPiece: '',\n      truncatedTitleSecondPiece: '',\n      previousTitle: props.title,\n      needMeasurement: !!props.shouldTruncate,\n    };\n  }\n\n  public componentDidUpdate(): void {\n    if (this.props.title !== this.state.previousTitle) {\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined,\n        clientWidth: undefined,\n        previousTitle: this.props.title,\n        needMeasurement: !!this.props.shouldTruncate,\n      });\n    }\n\n    this._events.off(window, 'resize', this._updateTruncation);\n\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n      requestAnimationFrame(this._shrinkTitle);\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  }\n\n  public componentDidMount(): void {\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { title, shouldTruncate, showAsSecondaryTitle, styles, theme, className } = this.props;\n    const { truncatedTitleFirstPiece, truncatedTitleSecondPiece, needMeasurement } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      showAsSecondaryTitle,\n    });\n\n    let documentCardTitle;\n    if (needMeasurement) {\n      documentCardTitle = (\n        <div\n          className={this._classNames.root}\n          ref={this._measureTitleElement}\n          title={title}\n          style={{ whiteSpace: 'nowrap' }}\n        >\n          {title}\n        </div>\n      );\n    } else if (shouldTruncate && truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      documentCardTitle = (\n        <div className={this._classNames.root} ref={this._titleElement} title={title}>\n          {truncatedTitleFirstPiece}\n          &hellip;\n          {truncatedTitleSecondPiece}\n        </div>\n      );\n    } else {\n      documentCardTitle = (\n        <div className={this._classNames.root} ref={this._titleElement} title={title}>\n          {title}\n        </div>\n      );\n    }\n    return documentCardTitle;\n  }\n\n  // Truncate logic here way can't handle the case that chars with different widths are mixed very well.\n  // Let _shrinkTitle take care of that.\n  private _truncateTitle = (): void => {\n    if (!this.state.needMeasurement) {\n      return;\n    }\n\n    this._async.requestAnimationFrame(this._truncateWhenInAnimation);\n  };\n\n  private _truncateWhenInAnimation: () => void = () => {\n    const originalTitle = this.props.title;\n    const element: HTMLDivElement | null = this._measureTitleElement.current;\n\n    if (element) {\n      const style: CSSStyleDeclaration = getComputedStyle(element);\n      if (style.width && style.lineHeight && style.height) {\n        const { clientWidth, scrollWidth } = element;\n        const lines: number = Math.floor(\n          (parseInt(style.height, 10) + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD) / parseInt(style.lineHeight, 10),\n        );\n\n        // Use overflow to predict truncated length.\n        // Take an example.The text is: A text with A very long text that need to be truncated.ppt\n        // if container is like\n        // |A text with A very| long text that need to be truncated.ppt\n        // The scroll width is 58, (take two | out of length)\n        // The client width is 18\n        // the overflow rate is scrollWidth/clientWidth which should be close to length(overflowText)/length(visualText)\n        // And the length of remaining text should be truncated is (original Length)/(58/18) -3 = 15.\n        // So that the logic can predict truncated text well.\n        // first piece will be `A text `, * second piece will be `ated.ppt`\n        // |A text ...ated.ppt|\n        const overFlowRate: number = scrollWidth / (parseInt(style.width, 10) * lines);\n\n        if (overFlowRate > 1) {\n          const truncatedLength: number = originalTitle.length / overFlowRate - 3 /** Saved for separator */;\n          return this.setState({\n            truncatedTitleFirstPiece: originalTitle.slice(0, truncatedLength / 2),\n            truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - truncatedLength / 2),\n            clientWidth,\n            needMeasurement: false,\n          });\n        }\n      }\n    }\n\n    return this.setState({ needMeasurement: false });\n  };\n\n  private _shrinkTitle: () => void = () => {\n    const { truncatedTitleFirstPiece, truncatedTitleSecondPiece } = this.state;\n    if (truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      const titleElement = this._titleElement.current;\n\n      if (!titleElement) {\n        return;\n      }\n\n      if (\n        titleElement.scrollHeight > titleElement.clientHeight + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD ||\n        titleElement.scrollWidth > titleElement.clientWidth\n      ) {\n        this.setState({\n          truncatedTitleFirstPiece: truncatedTitleFirstPiece.slice(0, truncatedTitleFirstPiece.length - 1),\n          truncatedTitleSecondPiece: truncatedTitleSecondPiece.slice(1),\n        });\n      }\n    }\n  };\n\n  private _updateTruncation(): void {\n    this._async.requestAnimationFrame(() => {\n      // Only update truncation if the title's size has changed since the last time we truncated\n      if (this._titleElement.current) {\n        const clientWidth: number = this._titleElement.current.clientWidth;\n        // Throttle truncation so that it doesn't happen during a window resize\n        clearTimeout(this._titleTruncationTimer);\n        if (this.state.clientWidth !== clientWidth) {\n          this._titleTruncationTimer = this._async.setTimeout(\n            () =>\n              this.setState({\n                truncatedTitleFirstPiece: undefined,\n                truncatedTitleSecondPiece: undefined,\n                needMeasurement: true,\n              }),\n            250,\n          );\n        }\n      }\n    });\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}