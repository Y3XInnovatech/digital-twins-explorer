{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, getId, inputProperties, getNativeProps, warnDeprecations, warnMutuallyExclusive, FocusRects } from '../../Utilities';\nimport { Label } from '../../Label';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Toggle';\nvar ToggleBase = /** @class */function (_super) {\n  __extends(ToggleBase, _super);\n  function ToggleBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._toggleButton = React.createRef();\n    _this._onClick = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n        disabled = _a.disabled,\n        checkedProp = _a.checked,\n        onChange = _a.onChange,\n        onChanged = _a.onChanged,\n        onClick = _a.onClick;\n      var checked = _this.state.checked;\n      if (!disabled) {\n        // Only update the state if the user hasn't provided it.\n        if (checkedProp === undefined) {\n          _this.setState({\n            checked: !checked\n          });\n        }\n        if (onChange) {\n          onChange(ev, !checked);\n        }\n        if (onChanged) {\n          onChanged(!checked);\n        }\n        if (onClick) {\n          onClick(ev);\n        }\n      }\n    };\n    initializeComponentRef(_this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      checked: 'defaultChecked'\n    });\n    warnDeprecations(COMPONENT_NAME, props, {\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange'\n    });\n    _this.state = {\n      checked: !!(props.checked || props.defaultChecked)\n    };\n    _this._id = props.id || getId('Toggle');\n    return _this;\n  }\n  ToggleBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    if (nextProps.checked === undefined) {\n      return null;\n    }\n    return {\n      checked: !!nextProps.checked\n    };\n  };\n  Object.defineProperty(ToggleBase.prototype, \"checked\", {\n    /**\n     * Gets the current checked state of the toggle.\n     */\n    get: function () {\n      return this.state.checked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ToggleBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      _b = _a.as,\n      RootType = _b === void 0 ? 'div' : _b,\n      className = _a.className,\n      theme = _a.theme,\n      disabled = _a.disabled,\n      keytipProps = _a.keytipProps,\n      label = _a.label,\n      ariaLabel = _a.ariaLabel,\n      /* eslint-disable deprecation/deprecation */\n      onAriaLabel = _a.onAriaLabel,\n      offAriaLabel = _a.offAriaLabel,\n      /* eslint-enable deprecation/deprecation */\n      offText = _a.offText,\n      onText = _a.onText,\n      styles = _a.styles,\n      inlineLabel = _a.inlineLabel;\n    var checked = this.state.checked;\n    var stateText = checked ? onText : offText;\n    var badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    var toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      checked: checked,\n      inlineLabel: inlineLabel,\n      onOffMissing: !onText && !offText\n    });\n    var labelId = this._id + \"-label\";\n    var stateTextId = this._id + \"-stateText\";\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label AND stateText, if existent\n    var labelledById = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText) {\n        labelledById = labelledById ? labelledById + \" \" + stateTextId : stateTextId;\n      }\n    }\n    var ariaRole = this.props.role ? this.props.role : 'switch';\n    var renderPill = function (keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n      return React.createElement(\"button\", __assign({}, toggleNativeProps, keytipAttributes, {\n        className: classNames.pill,\n        disabled: disabled,\n        id: _this._id,\n        type: \"button\",\n        role: ariaRole,\n        ref: _this._toggleButton,\n        \"aria-disabled\": disabled,\n        \"aria-checked\": checked,\n        \"aria-label\": ariaLabel ? ariaLabel : badAriaLabel,\n        \"data-is-focusable\": true,\n        onChange: _this._noop,\n        onClick: _this._onClick,\n        \"aria-labelledby\": labelledById\n      }), React.createElement(\"span\", {\n        className: classNames.thumb\n      }));\n    };\n    var pillContent = keytipProps ? React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      ariaDescribedBy: toggleNativeProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return renderPill(keytipAttributes);\n    }) : renderPill();\n    return React.createElement(RootType, {\n      className: classNames.root,\n      hidden: toggleNativeProps.hidden\n    }, label && React.createElement(Label, {\n      htmlFor: this._id,\n      className: classNames.label,\n      id: labelId\n    }, label), React.createElement(\"div\", {\n      className: classNames.container\n    }, pillContent, stateText &&\n    // This second \"htmlFor\" property is needed to allow the\n    // toggle's stateText to also trigger a state change when clicked.\n    React.createElement(Label, {\n      htmlFor: this._id,\n      className: classNames.text,\n      id: stateTextId\n    }, stateText)), React.createElement(FocusRects, null));\n  };\n  ToggleBase.prototype.focus = function () {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  };\n  ToggleBase.prototype._noop = function () {\n    /* no-op */\n  };\n  return ToggleBase;\n}(React.Component);\nexport { ToggleBase };","map":{"version":3,"sources":["components/Toggle/Toggle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  classNamesFunction,\n  getId,\n  inputProperties,\n  getNativeProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  FocusRects,\n} from '../../Utilities';\nimport { IToggleProps, IToggle, IToggleStyleProps, IToggleStyles } from './Toggle.types';\nimport { Label } from '../../Label';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface IToggleState {\n  checked: boolean;\n}\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\nconst COMPONENT_NAME = 'Toggle';\n\nexport class ToggleBase extends React.Component<IToggleProps, IToggleState> implements IToggle {\n  private _id: string;\n  private _toggleButton = React.createRef<HTMLButtonElement>();\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IToggleProps>,\n    prevState: Readonly<IToggleState>,\n  ): Partial<IToggleState> | null {\n    if (nextProps.checked === undefined) {\n      return null;\n    }\n\n    return {\n      checked: !!nextProps.checked,\n    };\n  }\n\n  constructor(props: IToggleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      checked: 'defaultChecked',\n    });\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange',\n    });\n\n    this.state = {\n      checked: !!(props.checked || props.defaultChecked),\n    };\n    this._id = props.id || getId('Toggle');\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.checked;\n  }\n\n  public render(): JSX.Element {\n    const {\n      as: RootType = 'div',\n      className,\n      theme,\n      disabled,\n      keytipProps,\n      label,\n      ariaLabel,\n      /* eslint-disable deprecation/deprecation */\n      onAriaLabel,\n      offAriaLabel,\n      /* eslint-enable deprecation/deprecation */\n      offText,\n      onText,\n      styles,\n      inlineLabel,\n    } = this.props;\n    const { checked } = this.state;\n    const stateText = checked ? onText : offText;\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n\n    const labelId = `${this._id}-label`;\n    const stateTextId = `${this._id}-stateText`;\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label AND stateText, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText) {\n        labelledById = labelledById ? `${labelledById} ${stateTextId}` : stateTextId;\n      }\n    }\n\n    const ariaRole = this.props.role ? this.props.role : 'switch';\n\n    const renderPill = (keytipAttributes: any = {}) => (\n      <button\n        {...toggleNativeProps}\n        {...keytipAttributes}\n        className={classNames.pill}\n        disabled={disabled}\n        id={this._id}\n        type=\"button\"\n        role={ariaRole}\n        ref={this._toggleButton}\n        aria-disabled={disabled}\n        aria-checked={checked}\n        aria-label={ariaLabel ? ariaLabel : badAriaLabel}\n        data-is-focusable={true}\n        onChange={this._noop}\n        onClick={this._onClick}\n        aria-labelledby={labelledById}\n      >\n        <span className={classNames.thumb} />\n      </button>\n    );\n\n    const pillContent = keytipProps ? (\n      <KeytipData\n        keytipProps={keytipProps}\n        ariaDescribedBy={(toggleNativeProps as any)['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => renderPill(keytipAttributes)}\n      </KeytipData>\n    ) : (\n      renderPill()\n    );\n\n    return (\n      <RootType className={classNames.root} hidden={(toggleNativeProps as any).hidden}>\n        {label && (\n          <Label htmlFor={this._id} className={classNames.label} id={labelId}>\n            {label}\n          </Label>\n        )}\n\n        <div className={classNames.container}>\n          {pillContent}\n          {stateText && (\n            // This second \"htmlFor\" property is needed to allow the\n            // toggle's stateText to also trigger a state change when clicked.\n            <Label htmlFor={this._id} className={classNames.text} id={stateTextId}>\n              {stateText}\n            </Label>\n          )}\n        </div>\n        <FocusRects />\n      </RootType>\n    );\n  }\n\n  public focus() {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { disabled, checked: checkedProp, onChange, onChanged, onClick } = this.props;\n    const { checked } = this.state;\n\n    if (!disabled) {\n      // Only update the state if the user hasn't provided it.\n      if (checkedProp === undefined) {\n        this.setState({\n          checked: !checked,\n        });\n      }\n\n      if (onChange) {\n        onChange(ev, !checked);\n      }\n\n      if (onChanged) {\n        onChanged(!checked);\n      }\n\n      if (onClick) {\n        onClick(ev);\n      }\n    }\n  };\n\n  private _noop(): void {\n    /* no-op */\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}