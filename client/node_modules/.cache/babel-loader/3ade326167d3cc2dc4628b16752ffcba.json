{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/**\n * Converts an OperationOptions to a RequestOptionsBase\n *\n * @param opts - OperationOptions object to convert to RequestOptionsBase\n */\nexport function operationOptionsToRequestOptionsBase(opts) {\n  var requestOptions = opts.requestOptions,\n    tracingOptions = opts.tracingOptions,\n    additionalOptions = __rest(opts, [\"requestOptions\", \"tracingOptions\"]);\n  var result = additionalOptions;\n  if (requestOptions) {\n    result = __assign(__assign({}, result), requestOptions);\n  }\n  if (tracingOptions) {\n    result.spanOptions = tracingOptions.spanOptions;\n  }\n  return result;\n}","map":{"version":3,"sources":["../../src/operationOptions.ts"],"names":[],"mappings":";AAoDA;;;;AAIG;AACH,OAAM,SAAU,oCAAoC,CAClD,IAAO,EAAA;EAEC,IAAA,cAAc,GAA2C,IAAI,CAAA,cAA/C;IAAE,cAAc,GAA2B,IAAI,CAAA,cAA/B;IAAK,iBAAiB,GAAA,MAAA,CAAK,IAAI,EAA/D,CAAA,gBAAA,EAAA,gBAAA,CAAwD,CAAF;EAE5D,IAAI,MAAM,GAAuB,iBAAiB;EAElD,IAAI,cAAc,EAAE;IAClB,MAAM,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAQ,MAAM,CAAA,EAAK,cAAc,CAAE;EAC1C;EAED,IAAI,cAAc,EAAE;IAClB,MAAM,CAAC,WAAW,GAAG,cAAc,CAAC,WAAW;EAChD;EAED,OAAO,MAAM;AACf","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\nimport { TransferProgressEvent, RequestOptionsBase } from \"./webResource\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\n\n/**\n * The base options type for all operations.\n */\nexport interface OperationOptions {\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Options used when creating and sending HTTP requests for this operation.\n   */\n  requestOptions?: OperationRequestOptions;\n  /**\n   * Options used when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\nexport interface OperationRequestOptions {\n  /**\n   * User defined custom request headers that will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n}\n\n/**\n * Converts an OperationOptions to a RequestOptionsBase\n *\n * @param opts - OperationOptions object to convert to RequestOptionsBase\n */\nexport function operationOptionsToRequestOptionsBase<T extends OperationOptions>(\n  opts: T\n): RequestOptionsBase {\n  const { requestOptions, tracingOptions, ...additionalOptions } = opts;\n\n  let result: RequestOptionsBase = additionalOptions;\n\n  if (requestOptions) {\n    result = { ...result, ...requestOptions };\n  }\n\n  if (tracingOptions) {\n    result.spanOptions = tracingOptions.spanOptions;\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}