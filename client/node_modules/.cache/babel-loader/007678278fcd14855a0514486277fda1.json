{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { getLayerStyles } from './KeytipLayer.styles';\nimport { Keytip } from '../../Keytip';\nimport { Layer } from '../../Layer';\nimport { classNamesFunction, getDocument, arraysEqual, warn, isMac, EventGroup, Async, initializeComponentRef, KeyCodes } from '../../Utilities';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { KeytipTree } from './KeytipTree';\nimport { ktpTargetFromId, ktpTargetFromSequences, sequencesToID, mergeOverflows } from '../../utilities/keytips/KeytipUtils';\nimport { transitionKeysContain } from '../../utilities/keytips/IKeytipTransitionKey';\nimport { KeytipEvents, KTP_LAYER_ID, KTP_ARIA_SEPARATOR } from '../../utilities/keytips/KeytipConstants';\n// Default sequence is Alt-Windows (Alt-Meta) in Windows, Option-Control (Alt-Control) in Mac\nvar defaultStartSequence = {\n  key: isMac() ? 'Control' : 'Meta',\n  modifierKeys: [KeyCodes.alt]\n};\n// Default exit sequence is the same as the start sequence\nvar defaultExitSequence = defaultStartSequence;\n// Default return sequence is Escape\nvar defaultReturnSequence = {\n  key: 'Escape'\n};\nvar getClassNames = classNamesFunction();\n/**\n * A layer that holds all keytip items\n * {@docCategory Keytips}\n */\nvar KeytipLayerBase = /** @class */function (_super) {\n  __extends(KeytipLayerBase, _super);\n  function KeytipLayerBase(props, context) {\n    var _this = _super.call(this, props, context) || this;\n    _this._keytipManager = KeytipManager.getInstance();\n    _this._delayedKeytipQueue = [];\n    _this._keyHandled = false;\n    _this._onDismiss = function (ev) {\n      // if we are in keytip mode, then exit keytip mode\n      if (_this.state.inKeytipMode) {\n        _this._exitKeytipMode(ev);\n      }\n    };\n    _this._onKeyDown = function (ev) {\n      _this._keyHandled = false;\n      // using key since which has been deprecated and key is now widely suporrted.\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\n      var key = ev.key;\n      switch (key) {\n        case 'Tab':\n        case 'Enter':\n        case 'Spacebar':\n        case ' ':\n        case 'ArrowUp':\n        case 'Up':\n        case 'ArrowDown':\n        case 'Down':\n        case 'ArrowLeft':\n        case 'Left':\n        case 'ArrowRight':\n        case 'Right':\n          if (_this.state.inKeytipMode) {\n            _this._keyHandled = true;\n            _this._exitKeytipMode(ev);\n          }\n          break;\n        default:\n          // Special cases for browser-specific keys that are not at standard\n          // (according to http://www.w3.org/TR/uievents-key/#keys-navigation)\n          if (key === 'Esc') {\n            // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\n            key = 'Escape';\n          } else if (key === 'OS' || key === 'Win') {\n            // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1232918\n            // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n            // and https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/16424492/\n            key = 'Meta';\n          }\n          var transitionKey = {\n            key: key\n          };\n          transitionKey.modifierKeys = _this._getModifierKey(key, ev);\n          _this.processTransitionInput(transitionKey, ev);\n          break;\n      }\n    };\n    _this._onKeyPress = function (ev) {\n      if (_this.state.inKeytipMode && !_this._keyHandled) {\n        // Call processInput\n        _this.processInput(ev.key.toLocaleLowerCase(), ev);\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    };\n    _this._onKeytipAdded = function (eventArgs) {\n      var _a;\n      var keytipProps = eventArgs.keytip;\n      var uniqueID = eventArgs.uniqueID;\n      _this._keytipTree.addNode(keytipProps, uniqueID);\n      _this._setKeytips();\n      // Add the keytip to the queue to show later\n      if (_this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n        // Ensure existing children are still shown.\n        _this._delayedKeytipQueue = _this._delayedKeytipQueue.concat(((_a = _this._keytipTree.currentKeytip) === null || _a === void 0 ? void 0 : _a.children) || []);\n        _this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n        // Ensure the child of currentKeytip is successfully added to currentKeytip's children and update it if not.\n        // Note: Added this condition because KeytipTree.addNode was not always reflecting updates made to a parent node\n        // in currentKeytip when that parent is the currentKeytip.\n        if (_this._keytipTree.currentKeytip && _this._keytipTree.currentKeytip.hasDynamicChildren && _this._keytipTree.currentKeytip.children.indexOf(keytipProps.id) < 0) {\n          var currNode = _this._keytipTree.getNode(_this._keytipTree.currentKeytip.id);\n          if (currNode) {\n            _this._keytipTree.currentKeytip = currNode;\n          }\n        }\n      }\n      _this._persistedKeytipChecks(keytipProps);\n    };\n    _this._onKeytipUpdated = function (eventArgs) {\n      var _a;\n      var keytipProps = eventArgs.keytip;\n      var uniqueID = eventArgs.uniqueID;\n      _this._keytipTree.updateNode(keytipProps, uniqueID);\n      _this._setKeytips();\n      if (_this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n        // Ensure existing children are still shown.\n        _this._delayedKeytipQueue = _this._delayedKeytipQueue.concat(((_a = _this._keytipTree.currentKeytip) === null || _a === void 0 ? void 0 : _a.children) || []);\n        _this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n      }\n      _this._persistedKeytipChecks(keytipProps);\n    };\n    /**\n     * Helper function to do checks related to persisted/overflow keytips\n     * Done on keytip added and keytip updated\n     *\n     * @param keytipProps - Keytip props\n     */\n    _this._persistedKeytipChecks = function (keytipProps) {\n      if (_this._newCurrentKeytipSequences && arraysEqual(keytipProps.keySequences, _this._newCurrentKeytipSequences)) {\n        _this._triggerKeytipImmediately(keytipProps);\n      }\n      if (_this._isCurrentKeytipAnAlias(keytipProps)) {\n        var keytipSequence = keytipProps.keySequences;\n        if (keytipProps.overflowSetSequence) {\n          keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n        }\n        _this._keytipTree.currentKeytip = _this._keytipTree.getNode(sequencesToID(keytipSequence));\n      }\n    };\n    _this._onKeytipRemoved = function (eventArgs) {\n      var keytipProps = eventArgs.keytip;\n      var uniqueID = eventArgs.uniqueID;\n      // Remove keytip from the delayed queue\n      _this._removeKeytipFromQueue(sequencesToID(keytipProps.keySequences));\n      // Remove the node from the Tree\n      _this._keytipTree.removeNode(keytipProps, uniqueID);\n      _this._setKeytips();\n    };\n    _this._onPersistedKeytipAdded = function (eventArgs) {\n      var keytipProps = eventArgs.keytip;\n      var uniqueID = eventArgs.uniqueID;\n      _this._keytipTree.addNode(keytipProps, uniqueID, true);\n    };\n    _this._onPersistedKeytipRemoved = function (eventArgs) {\n      var keytipProps = eventArgs.keytip;\n      var uniqueID = eventArgs.uniqueID;\n      _this._keytipTree.removeNode(keytipProps, uniqueID);\n    };\n    _this._onPersistedKeytipExecute = function (eventArgs) {\n      _this._persistedKeytipExecute(eventArgs.overflowButtonSequences, eventArgs.keytipSequences);\n    };\n    /**\n     * Sets if we are in keytip mode.\n     * Note, this sets both the state for the layer as well as\n     * the value that the manager will expose externally.\n     * @param inKeytipMode - Boolean so set whether we are in keytip mode or not\n     */\n    _this._setInKeytipMode = function (inKeytipMode) {\n      _this.setState({\n        inKeytipMode: inKeytipMode\n      });\n      _this._keytipManager.inKeytipMode = inKeytipMode;\n    };\n    /**\n     * Emits a warning if duplicate keytips are found for the children of the current keytip\n     */\n    _this._warnIfDuplicateKeytips = function () {\n      var duplicateKeytips = _this._getDuplicateIds(_this._keytipTree.getChildren());\n      if (duplicateKeytips.length) {\n        warn('Duplicate keytips found for ' + duplicateKeytips.join(', '));\n      }\n    };\n    /**\n     * Returns duplicates among keytip IDs.\n     * If the returned array is empty, no duplicates were found.\n     *\n     * @param keytipIds - Array of keytip IDs to find duplicates for\n     * @returns - Array of duplicates that were found. Each duplicate will only be added once to this array.\n     */\n    _this._getDuplicateIds = function (keytipIds) {\n      var seenIds = {};\n      return keytipIds.filter(function (keytipId) {\n        seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n        // Only add the first duplicate keytip seen\n        return seenIds[keytipId] === 2;\n      });\n    };\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this._async = new Async(_this);\n    var managerKeytips = __spreadArrays(_this._keytipManager.getKeytips());\n    _this.state = {\n      inKeytipMode: false,\n      // Get the initial set of keytips\n      keytips: managerKeytips,\n      visibleKeytips: _this._getVisibleKeytips(managerKeytips)\n    };\n    _this._buildTree();\n    _this._currentSequence = '';\n    // Add keytip listeners\n    _this._events.on(_this._keytipManager, KeytipEvents.KEYTIP_ADDED, _this._onKeytipAdded);\n    _this._events.on(_this._keytipManager, KeytipEvents.KEYTIP_UPDATED, _this._onKeytipUpdated);\n    _this._events.on(_this._keytipManager, KeytipEvents.KEYTIP_REMOVED, _this._onKeytipRemoved);\n    _this._events.on(_this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_ADDED, _this._onPersistedKeytipAdded);\n    _this._events.on(_this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_REMOVED, _this._onPersistedKeytipRemoved);\n    _this._events.on(_this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, _this._onPersistedKeytipExecute);\n    return _this;\n  }\n  KeytipLayerBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      content = _a.content,\n      styles = _a.styles;\n    var _b = this.state,\n      keytips = _b.keytips,\n      visibleKeytips = _b.visibleKeytips;\n    this._classNames = getClassNames(styles, {});\n    return React.createElement(Layer, {\n      styles: getLayerStyles\n    }, React.createElement(\"span\", {\n      id: KTP_LAYER_ID,\n      className: this._classNames.innerContent\n    }, \"\" + content + KTP_ARIA_SEPARATOR), keytips && keytips.map(function (keytipProps, index) {\n      return React.createElement(\"span\", {\n        key: index,\n        id: sequencesToID(keytipProps.keySequences),\n        className: _this._classNames.innerContent\n      }, keytipProps.keySequences.join(KTP_ARIA_SEPARATOR));\n    }), visibleKeytips && visibleKeytips.map(function (visibleKeytipProps) {\n      return React.createElement(Keytip, __assign({\n        key: sequencesToID(visibleKeytipProps.keySequences)\n      }, visibleKeytipProps));\n    }));\n  };\n  KeytipLayerBase.prototype.componentDidMount = function () {\n    // Add window listeners\n    this._events.on(window, 'mouseup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'pointerup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'resize', this._onDismiss);\n    this._events.on(window, 'keydown', this._onKeyDown, true /* useCapture */);\n    this._events.on(window, 'keypress', this._onKeyPress, true /* useCapture */);\n    this._events.on(window, 'scroll', this._onDismiss, true /* useCapture */);\n    // Add keytip listeners\n    this._events.on(this._keytipManager, KeytipEvents.ENTER_KEYTIP_MODE, this._enterKeytipMode);\n    this._events.on(this._keytipManager, KeytipEvents.EXIT_KEYTIP_MODE, this._exitKeytipMode);\n  };\n  KeytipLayerBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  // The below public functions are only public for testing purposes\n  // They are not intended to be used in app code by using a KeytipLayer reference\n  KeytipLayerBase.prototype.getCurrentSequence = function () {\n    return this._currentSequence;\n  };\n  KeytipLayerBase.prototype.getKeytipTree = function () {\n    return this._keytipTree;\n  };\n  /**\n   * Processes an IKeytipTransitionKey entered by the user\n   *\n   * @param transitionKey - IKeytipTransitionKey received by the layer to process\n   */\n  KeytipLayerBase.prototype.processTransitionInput = function (transitionKey, ev) {\n    var currKtp = this._keytipTree.currentKeytip;\n    if (transitionKeysContain(this.props.keytipExitSequences, transitionKey) && currKtp) {\n      // If key sequence is in 'exit sequences', exit keytip mode\n      this._keyHandled = true;\n      this._exitKeytipMode(ev);\n    } else if (transitionKeysContain(this.props.keytipReturnSequences, transitionKey)) {\n      // If key sequence is in return sequences, move currentKeytip to parent (or if currentKeytip is the root, exit)\n      if (currKtp) {\n        this._keyHandled = true;\n        if (currKtp.id === this._keytipTree.root.id) {\n          // We are at the root, exit keytip mode\n          this._exitKeytipMode(ev);\n        } else {\n          // If this keytip has a onReturn prop, we execute the func.\n          if (currKtp.onReturn) {\n            currKtp.onReturn(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          }\n          // Reset currentSequence\n          this._currentSequence = '';\n          // Return pointer to its parent\n          this._keytipTree.currentKeytip = this._keytipTree.getNode(currKtp.parent);\n          // Show children keytips of the new currentKeytip\n          this.showKeytips(this._keytipTree.getChildren());\n          this._warnIfDuplicateKeytips();\n        }\n      }\n    } else if (transitionKeysContain(this.props.keytipStartSequences, transitionKey) && !currKtp) {\n      // If key sequence is in 'entry sequences' and currentKeytip is null, we enter keytip mode\n      this._keyHandled = true;\n      this._enterKeytipMode();\n      this._warnIfDuplicateKeytips();\n    }\n  };\n  /**\n   * Processes inputs from the document listener and traverse the keytip tree\n   *\n   * @param key - Key pressed by the user\n   */\n  KeytipLayerBase.prototype.processInput = function (key, ev) {\n    // Concat the input key with the current sequence\n    var currSequence = this._currentSequence + key;\n    var currKtp = this._keytipTree.currentKeytip;\n    // currentKeytip must be defined, otherwise we haven't entered keytip mode yet\n    if (currKtp) {\n      var node = this._keytipTree.getExactMatchedNode(currSequence, currKtp);\n      if (node) {\n        this._keytipTree.currentKeytip = currKtp = node;\n        var currKtpChildren = this._keytipTree.getChildren();\n        // Execute this node's onExecute if defined\n        if (currKtp.onExecute) {\n          currKtp.onExecute(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          // Reset currKtp, this might have changed from the onExecute\n          currKtp = this._keytipTree.currentKeytip;\n        }\n        // To exit keytipMode after executing the keytip it must not have a menu or have dynamic children\n        if (currKtpChildren.length === 0 && !(currKtp.hasDynamicChildren || currKtp.hasMenu)) {\n          this._exitKeytipMode(ev);\n        } else {\n          // Show all children keytips\n          this.showKeytips(currKtpChildren);\n          this._warnIfDuplicateKeytips();\n        }\n        // Clear currentSequence\n        this._currentSequence = '';\n        return;\n      }\n      var partialNodes = this._keytipTree.getPartiallyMatchedNodes(currSequence, currKtp);\n      if (partialNodes.length > 0) {\n        // We found nodes that partially match the sequence, so we show only those\n        // Omit showing persisted nodes here\n        var ids = partialNodes.filter(function (partialNode) {\n          return !partialNode.persisted;\n        }).map(function (partialNode) {\n          return partialNode.id;\n        });\n        this.showKeytips(ids);\n        // Save currentSequence\n        this._currentSequence = currSequence;\n      }\n    }\n  };\n  /**\n   * Show the given keytips and hide all others\n   *\n   * @param ids - Keytip IDs to show\n   */\n  KeytipLayerBase.prototype.showKeytips = function (ids) {\n    // Update the visible prop in the manager\n    for (var _i = 0, _a = this._keytipManager.getKeytips(); _i < _a.length; _i++) {\n      var keytip = _a[_i];\n      var keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Check if the ID with the overflow is the keytip we're looking for\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      if (ids.indexOf(keytipId) >= 0) {\n        keytip.visible = true;\n      } else {\n        keytip.visible = false;\n      }\n    }\n    // Apply the manager changes to the Layer state\n    this._setKeytips();\n  };\n  /**\n   * Enters keytip mode for this layer\n   */\n  KeytipLayerBase.prototype._enterKeytipMode = function () {\n    if (this._keytipManager.shouldEnterKeytipMode) {\n      if (this._keytipManager.delayUpdatingKeytipChange) {\n        this._buildTree();\n        this._setKeytips();\n      }\n      this._keytipTree.currentKeytip = this._keytipTree.root;\n      // Show children of root\n      this.showKeytips(this._keytipTree.getChildren());\n      this._setInKeytipMode(true /* inKeytipMode */);\n      if (this.props.onEnterKeytipMode) {\n        this.props.onEnterKeytipMode();\n      }\n    }\n  };\n  KeytipLayerBase.prototype._buildTree = function () {\n    this._keytipTree = new KeytipTree();\n    // Add regular and persisted keytips to the tree\n    for (var _i = 0, _a = Object.keys(this._keytipManager.keytips); _i < _a.length; _i++) {\n      var id = _a[_i];\n      var uniqueKeytip = this._keytipManager.keytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n    for (var _b = 0, _c = Object.keys(this._keytipManager.persistedKeytips); _b < _c.length; _b++) {\n      var id = _c[_b];\n      var uniqueKeytip = this._keytipManager.persistedKeytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n  };\n  /**\n   * Exits keytip mode for this layer\n   */\n  KeytipLayerBase.prototype._exitKeytipMode = function (ev) {\n    this._keytipTree.currentKeytip = undefined;\n    this._currentSequence = '';\n    // Hide all keytips\n    this.showKeytips([]);\n    // Reset the delayed keytips if any\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    this._delayedKeytipQueue = [];\n    this._setInKeytipMode(false /* inKeytipMode */);\n    if (this.props.onExitKeytipMode) {\n      this.props.onExitKeytipMode(ev);\n    }\n  };\n  /**\n   * Sets the keytips state property\n   *\n   * @param keytipProps - Keytips to set in this layer\n   */\n  KeytipLayerBase.prototype._setKeytips = function (keytipProps) {\n    if (keytipProps === void 0) {\n      keytipProps = this._keytipManager.getKeytips();\n    }\n    this.setState({\n      keytips: keytipProps,\n      visibleKeytips: this._getVisibleKeytips(keytipProps)\n    });\n  };\n  /**\n   * Callback function to use for persisted keytips\n   *\n   * @param overflowButtonSequences - The overflow button sequence to execute\n   * @param keytipSequences - The keytip that should become the 'currentKeytip' when it is registered\n   */\n  KeytipLayerBase.prototype._persistedKeytipExecute = function (overflowButtonSequences, keytipSequences) {\n    // Save newCurrentKeytip for later\n    this._newCurrentKeytipSequences = keytipSequences;\n    // Execute the overflow button's onExecute\n    var overflowKeytipNode = this._keytipTree.getNode(sequencesToID(overflowButtonSequences));\n    if (overflowKeytipNode && overflowKeytipNode.onExecute) {\n      overflowKeytipNode.onExecute(this._getKtpExecuteTarget(overflowKeytipNode), this._getKtpTarget(overflowKeytipNode));\n    }\n  };\n  KeytipLayerBase.prototype._getVisibleKeytips = function (keytips) {\n    // Filter out non-visible keytips and duplicates\n    var seenIds = {};\n    return keytips.filter(function (keytip) {\n      var keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Account for overflow set sequences when checking for duplicates\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n      return keytip.visible && seenIds[keytipId] === 1;\n    });\n  };\n  /**\n   * Gets the ModifierKeyCodes based on the keyboard event\n   *\n   * @param ev - React.KeyboardEvent\n   * @returns List of ModifierKeyCodes that were pressed\n   */\n  KeytipLayerBase.prototype._getModifierKey = function (key, ev) {\n    var modifierKeys = [];\n    if (ev.altKey && key !== 'Alt') {\n      modifierKeys.push(KeyCodes.alt);\n    }\n    if (ev.ctrlKey && key !== 'Control') {\n      modifierKeys.push(KeyCodes.ctrl);\n    }\n    if (ev.shiftKey && key !== 'Shift') {\n      modifierKeys.push(KeyCodes.shift);\n    }\n    if (ev.metaKey && key !== 'Meta') {\n      modifierKeys.push(KeyCodes.leftWindow);\n    }\n    return modifierKeys.length ? modifierKeys : undefined;\n  };\n  /**\n   * Trigger a keytip immediately and set it as the current keytip\n   *\n   * @param keytipProps - Keytip to trigger immediately\n   */\n  KeytipLayerBase.prototype._triggerKeytipImmediately = function (keytipProps) {\n    // This keytip should become the currentKeytip and should execute right away\n    var keytipSequence = __spreadArrays(keytipProps.keySequences);\n    if (keytipProps.overflowSetSequence) {\n      keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n    }\n    // Set currentKeytip\n    this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\n    if (this._keytipTree.currentKeytip) {\n      // Show all children keytips if any\n      var children = this._keytipTree.getChildren();\n      if (children.length) {\n        this.showKeytips(children);\n      }\n      if (this._keytipTree.currentKeytip.onExecute) {\n        this._keytipTree.currentKeytip.onExecute(this._getKtpExecuteTarget(this._keytipTree.currentKeytip), this._getKtpTarget(this._keytipTree.currentKeytip));\n      }\n    }\n    // Unset _newCurrKtpSequences\n    this._newCurrentKeytipSequences = undefined;\n  };\n  KeytipLayerBase.prototype._addKeytipToQueue = function (keytipID) {\n    var _this = this;\n    // Add keytip\n    this._delayedKeytipQueue.push(keytipID);\n    // Clear timeout\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    // Reset timeout\n    this._delayedQueueTimeout = this._async.setTimeout(function () {\n      if (_this._delayedKeytipQueue.length) {\n        _this.showKeytips(_this._delayedKeytipQueue);\n        _this._delayedKeytipQueue = [];\n      }\n    }, 300);\n  };\n  KeytipLayerBase.prototype._removeKeytipFromQueue = function (keytipID) {\n    var _this = this;\n    var index = this._delayedKeytipQueue.indexOf(keytipID);\n    if (index >= 0) {\n      // Remove keytip\n      this._delayedKeytipQueue.splice(index, 1);\n      // Clear timeout\n      this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n      // Reset timeout\n      this._delayedQueueTimeout = this._async.setTimeout(function () {\n        if (_this._delayedKeytipQueue.length) {\n          _this.showKeytips(_this._delayedKeytipQueue);\n          _this._delayedKeytipQueue = [];\n        }\n      }, 300);\n    }\n  };\n  KeytipLayerBase.prototype._getKtpExecuteTarget = function (currKtp) {\n    return getDocument().querySelector(ktpTargetFromId(currKtp.id));\n  };\n  KeytipLayerBase.prototype._getKtpTarget = function (currKtp) {\n    return getDocument().querySelector(ktpTargetFromSequences(currKtp.keySequences));\n  };\n  /**\n   * Returns T/F if the keytipProps keySequences match the currentKeytip, and the currentKeytip is in an overflow well\n   * This will make 'keytipProps' the new currentKeytip\n   *\n   * @param keytipProps - Keytip props to check\n   * @returns - T/F if this keytip should become the currentKeytip\n   */\n  KeytipLayerBase.prototype._isCurrentKeytipAnAlias = function (keytipProps) {\n    var currKtp = this._keytipTree.currentKeytip;\n    if (currKtp && (currKtp.overflowSetSequence || currKtp.persisted) && arraysEqual(keytipProps.keySequences, currKtp.keySequences)) {\n      return true;\n    }\n    return false;\n  };\n  KeytipLayerBase.defaultProps = {\n    keytipStartSequences: [defaultStartSequence],\n    keytipExitSequences: [defaultExitSequence],\n    keytipReturnSequences: [defaultReturnSequence],\n    content: ''\n  };\n  return KeytipLayerBase;\n}(React.Component);\nexport { KeytipLayerBase };","map":{"version":3,"sources":["components/KeytipLayer/KeytipLayer.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IKeytipLayerProps, IKeytipLayerStyles, IKeytipLayerStyleProps } from './KeytipLayer.types';\nimport { getLayerStyles } from './KeytipLayer.styles';\nimport { Keytip, IKeytipProps } from '../../Keytip';\nimport { Layer } from '../../Layer';\nimport {\n  classNamesFunction,\n  getDocument,\n  arraysEqual,\n  warn,\n  isMac,\n  EventGroup,\n  Async,\n  initializeComponentRef,\n  KeyCodes,\n} from '../../Utilities';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { KeytipTree } from './KeytipTree';\nimport { IKeytipTreeNode } from './IKeytipTreeNode';\nimport {\n  ktpTargetFromId,\n  ktpTargetFromSequences,\n  sequencesToID,\n  mergeOverflows,\n} from '../../utilities/keytips/KeytipUtils';\nimport {\n  transitionKeysContain,\n  KeytipTransitionModifier,\n  IKeytipTransitionKey,\n} from '../../utilities/keytips/IKeytipTransitionKey';\nimport { KeytipEvents, KTP_LAYER_ID, KTP_ARIA_SEPARATOR } from '../../utilities/keytips/KeytipConstants';\n\nexport interface IKeytipLayerState {\n  inKeytipMode: boolean;\n  keytips: IKeytipProps[];\n  visibleKeytips: IKeytipProps[];\n}\n\n// Default sequence is Alt-Windows (Alt-Meta) in Windows, Option-Control (Alt-Control) in Mac\nconst defaultStartSequence: IKeytipTransitionKey = {\n  key: isMac() ? 'Control' : 'Meta',\n  modifierKeys: [KeyCodes.alt],\n};\n\n// Default exit sequence is the same as the start sequence\nconst defaultExitSequence: IKeytipTransitionKey = defaultStartSequence;\n\n// Default return sequence is Escape\nconst defaultReturnSequence: IKeytipTransitionKey = {\n  key: 'Escape',\n};\n\nconst getClassNames = classNamesFunction<IKeytipLayerStyleProps, IKeytipLayerStyles>();\n\n/**\n * A layer that holds all keytip items\n * {@docCategory Keytips}\n */\nexport class KeytipLayerBase extends React.Component<IKeytipLayerProps, IKeytipLayerState> {\n  public static defaultProps: IKeytipLayerProps = {\n    keytipStartSequences: [defaultStartSequence],\n    keytipExitSequences: [defaultExitSequence],\n    keytipReturnSequences: [defaultReturnSequence],\n    content: '',\n  };\n\n  private _events: EventGroup;\n  private _async: Async;\n\n  private _keytipTree: KeytipTree;\n\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\n  private _classNames: { [key in keyof IKeytipLayerStyles]: string };\n  private _currentSequence: string;\n  private _newCurrentKeytipSequences?: string[];\n\n  private _delayedKeytipQueue: string[] = [];\n  private _delayedQueueTimeout: number;\n\n  private _keyHandled = false;\n\n  constructor(props: IKeytipLayerProps, context: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n\n    const managerKeytips = [...this._keytipManager.getKeytips()];\n    this.state = {\n      inKeytipMode: false,\n      // Get the initial set of keytips\n      keytips: managerKeytips,\n      visibleKeytips: this._getVisibleKeytips(managerKeytips),\n    };\n\n    this._buildTree();\n\n    this._currentSequence = '';\n\n    // Add keytip listeners\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_ADDED, this._onKeytipAdded);\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_UPDATED, this._onKeytipUpdated);\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_REMOVED, this._onKeytipRemoved);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_ADDED, this._onPersistedKeytipAdded);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_REMOVED, this._onPersistedKeytipRemoved);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, this._onPersistedKeytipExecute);\n  }\n\n  public render(): JSX.Element {\n    const { content, styles } = this.props;\n\n    const { keytips, visibleKeytips } = this.state;\n\n    this._classNames = getClassNames(styles, {});\n\n    return (\n      <Layer styles={getLayerStyles}>\n        <span id={KTP_LAYER_ID} className={this._classNames.innerContent}>{`${content}${KTP_ARIA_SEPARATOR}`}</span>\n        {keytips &&\n          keytips.map((keytipProps: IKeytipProps, index: number) => {\n            return (\n              <span key={index} id={sequencesToID(keytipProps.keySequences)} className={this._classNames.innerContent}>\n                {keytipProps.keySequences.join(KTP_ARIA_SEPARATOR)}\n              </span>\n            );\n          })}\n        {visibleKeytips &&\n          visibleKeytips.map((visibleKeytipProps: IKeytipProps) => {\n            return <Keytip key={sequencesToID(visibleKeytipProps.keySequences)} {...visibleKeytipProps} />;\n          })}\n      </Layer>\n    );\n  }\n\n  public componentDidMount(): void {\n    // Add window listeners\n    this._events.on(window, 'mouseup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'pointerup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'resize', this._onDismiss);\n    this._events.on(window, 'keydown', this._onKeyDown, true /* useCapture */);\n    this._events.on(window, 'keypress', this._onKeyPress, true /* useCapture */);\n    this._events.on(window, 'scroll', this._onDismiss, true /* useCapture */);\n\n    // Add keytip listeners\n    this._events.on(this._keytipManager, KeytipEvents.ENTER_KEYTIP_MODE, this._enterKeytipMode);\n    this._events.on(this._keytipManager, KeytipEvents.EXIT_KEYTIP_MODE, this._exitKeytipMode);\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  // The below public functions are only public for testing purposes\n  // They are not intended to be used in app code by using a KeytipLayer reference\n\n  public getCurrentSequence(): string {\n    return this._currentSequence;\n  }\n\n  public getKeytipTree(): KeytipTree {\n    return this._keytipTree;\n  }\n\n  /**\n   * Processes an IKeytipTransitionKey entered by the user\n   *\n   * @param transitionKey - IKeytipTransitionKey received by the layer to process\n   */\n  public processTransitionInput(transitionKey: IKeytipTransitionKey, ev?: React.KeyboardEvent<HTMLElement>): void {\n    const currKtp = this._keytipTree.currentKeytip;\n    if (transitionKeysContain(this.props.keytipExitSequences!, transitionKey) && currKtp) {\n      // If key sequence is in 'exit sequences', exit keytip mode\n      this._keyHandled = true;\n      this._exitKeytipMode(ev);\n    } else if (transitionKeysContain(this.props.keytipReturnSequences!, transitionKey)) {\n      // If key sequence is in return sequences, move currentKeytip to parent (or if currentKeytip is the root, exit)\n      if (currKtp) {\n        this._keyHandled = true;\n        if (currKtp.id === this._keytipTree.root.id) {\n          // We are at the root, exit keytip mode\n          this._exitKeytipMode(ev);\n        } else {\n          // If this keytip has a onReturn prop, we execute the func.\n          if (currKtp.onReturn) {\n            currKtp.onReturn(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          }\n\n          // Reset currentSequence\n          this._currentSequence = '';\n          // Return pointer to its parent\n          this._keytipTree.currentKeytip = this._keytipTree.getNode(currKtp.parent);\n          // Show children keytips of the new currentKeytip\n          this.showKeytips(this._keytipTree.getChildren());\n          this._warnIfDuplicateKeytips();\n        }\n      }\n    } else if (transitionKeysContain(this.props.keytipStartSequences!, transitionKey) && !currKtp) {\n      // If key sequence is in 'entry sequences' and currentKeytip is null, we enter keytip mode\n      this._keyHandled = true;\n      this._enterKeytipMode();\n      this._warnIfDuplicateKeytips();\n    }\n  }\n\n  /**\n   * Processes inputs from the document listener and traverse the keytip tree\n   *\n   * @param key - Key pressed by the user\n   */\n  public processInput(key: string, ev?: React.KeyboardEvent<HTMLElement>): void {\n    // Concat the input key with the current sequence\n    const currSequence: string = this._currentSequence + key;\n    let currKtp = this._keytipTree.currentKeytip;\n\n    // currentKeytip must be defined, otherwise we haven't entered keytip mode yet\n    if (currKtp) {\n      const node = this._keytipTree.getExactMatchedNode(currSequence, currKtp);\n      if (node) {\n        this._keytipTree.currentKeytip = currKtp = node;\n        const currKtpChildren = this._keytipTree.getChildren();\n\n        // Execute this node's onExecute if defined\n        if (currKtp.onExecute) {\n          currKtp.onExecute(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          // Reset currKtp, this might have changed from the onExecute\n          currKtp = this._keytipTree.currentKeytip;\n        }\n\n        // To exit keytipMode after executing the keytip it must not have a menu or have dynamic children\n        if (currKtpChildren.length === 0 && !(currKtp.hasDynamicChildren || currKtp.hasMenu)) {\n          this._exitKeytipMode(ev);\n        } else {\n          // Show all children keytips\n          this.showKeytips(currKtpChildren);\n          this._warnIfDuplicateKeytips();\n        }\n\n        // Clear currentSequence\n        this._currentSequence = '';\n        return;\n      }\n\n      const partialNodes = this._keytipTree.getPartiallyMatchedNodes(currSequence, currKtp);\n      if (partialNodes.length > 0) {\n        // We found nodes that partially match the sequence, so we show only those\n        // Omit showing persisted nodes here\n        const ids = partialNodes\n          .filter((partialNode: IKeytipTreeNode) => {\n            return !partialNode.persisted;\n          })\n          .map((partialNode: IKeytipTreeNode) => {\n            return partialNode.id;\n          });\n        this.showKeytips(ids);\n\n        // Save currentSequence\n        this._currentSequence = currSequence;\n      }\n    }\n  }\n\n  /**\n   * Show the given keytips and hide all others\n   *\n   * @param ids - Keytip IDs to show\n   */\n  public showKeytips(ids: string[]): void {\n    // Update the visible prop in the manager\n    for (const keytip of this._keytipManager.getKeytips()) {\n      let keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Check if the ID with the overflow is the keytip we're looking for\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      if (ids.indexOf(keytipId) >= 0) {\n        keytip.visible = true;\n      } else {\n        keytip.visible = false;\n      }\n    }\n    // Apply the manager changes to the Layer state\n    this._setKeytips();\n  }\n\n  /**\n   * Enters keytip mode for this layer\n   */\n  private _enterKeytipMode(): void {\n    if (this._keytipManager.shouldEnterKeytipMode) {\n      if (this._keytipManager.delayUpdatingKeytipChange) {\n        this._buildTree();\n        this._setKeytips();\n      }\n      this._keytipTree.currentKeytip = this._keytipTree.root;\n      // Show children of root\n      this.showKeytips(this._keytipTree.getChildren());\n\n      this._setInKeytipMode(true /* inKeytipMode */);\n\n      if (this.props.onEnterKeytipMode) {\n        this.props.onEnterKeytipMode();\n      }\n    }\n  }\n\n  private _buildTree(): void {\n    this._keytipTree = new KeytipTree();\n    // Add regular and persisted keytips to the tree\n    for (const id of Object.keys(this._keytipManager.keytips)) {\n      const uniqueKeytip = this._keytipManager.keytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n\n    for (const id of Object.keys(this._keytipManager.persistedKeytips)) {\n      const uniqueKeytip = this._keytipManager.persistedKeytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n  }\n\n  /**\n   * Exits keytip mode for this layer\n   */\n  private _exitKeytipMode(ev?: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._keytipTree.currentKeytip = undefined;\n    this._currentSequence = '';\n    // Hide all keytips\n    this.showKeytips([]);\n\n    // Reset the delayed keytips if any\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    this._delayedKeytipQueue = [];\n\n    this._setInKeytipMode(false /* inKeytipMode */);\n\n    if (this.props.onExitKeytipMode) {\n      this.props.onExitKeytipMode(ev);\n    }\n  }\n\n  /**\n   * Sets the keytips state property\n   *\n   * @param keytipProps - Keytips to set in this layer\n   */\n  private _setKeytips(keytipProps: IKeytipProps[] = this._keytipManager.getKeytips()) {\n    this.setState({ keytips: keytipProps, visibleKeytips: this._getVisibleKeytips(keytipProps) });\n  }\n\n  /**\n   * Callback function to use for persisted keytips\n   *\n   * @param overflowButtonSequences - The overflow button sequence to execute\n   * @param keytipSequences - The keytip that should become the 'currentKeytip' when it is registered\n   */\n  private _persistedKeytipExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\n    // Save newCurrentKeytip for later\n    this._newCurrentKeytipSequences = keytipSequences;\n\n    // Execute the overflow button's onExecute\n    const overflowKeytipNode = this._keytipTree.getNode(sequencesToID(overflowButtonSequences));\n    if (overflowKeytipNode && overflowKeytipNode.onExecute) {\n      overflowKeytipNode.onExecute(\n        this._getKtpExecuteTarget(overflowKeytipNode),\n        this._getKtpTarget(overflowKeytipNode),\n      );\n    }\n  }\n\n  private _getVisibleKeytips(keytips: IKeytipProps[]): IKeytipProps[] {\n    // Filter out non-visible keytips and duplicates\n    const seenIds: { [childSequence: string]: number } = {};\n    return keytips.filter(keytip => {\n      let keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Account for overflow set sequences when checking for duplicates\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n      return keytip.visible && seenIds[keytipId] === 1;\n    });\n  }\n\n  private _onDismiss = (ev?: React.MouseEvent<HTMLElement>): void => {\n    // if we are in keytip mode, then exit keytip mode\n    if (this.state.inKeytipMode) {\n      this._exitKeytipMode(ev);\n    }\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._keyHandled = false;\n    // using key since which has been deprecated and key is now widely suporrted.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\n    let key = ev.key;\n    switch (key) {\n      case 'Tab':\n      case 'Enter':\n      case 'Spacebar':\n      case ' ':\n      case 'ArrowUp':\n      case 'Up':\n      case 'ArrowDown':\n      case 'Down':\n      case 'ArrowLeft':\n      case 'Left':\n      case 'ArrowRight':\n      case 'Right':\n        if (this.state.inKeytipMode) {\n          this._keyHandled = true;\n          this._exitKeytipMode(ev);\n        }\n        break;\n      default:\n        // Special cases for browser-specific keys that are not at standard\n        // (according to http://www.w3.org/TR/uievents-key/#keys-navigation)\n        if (key === 'Esc') {\n          // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\n          key = 'Escape';\n        } else if (key === 'OS' || key === 'Win') {\n          // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1232918\n          // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n          // and https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/16424492/\n          key = 'Meta';\n        }\n        const transitionKey: IKeytipTransitionKey = { key };\n        transitionKey.modifierKeys = this._getModifierKey(key, ev);\n        this.processTransitionInput(transitionKey, ev);\n        break;\n    }\n  };\n\n  /**\n   * Gets the ModifierKeyCodes based on the keyboard event\n   *\n   * @param ev - React.KeyboardEvent\n   * @returns List of ModifierKeyCodes that were pressed\n   */\n  private _getModifierKey(key: string, ev: React.KeyboardEvent<HTMLElement>): KeytipTransitionModifier[] | undefined {\n    const modifierKeys: KeytipTransitionModifier[] = [];\n    if (ev.altKey && key !== 'Alt') {\n      modifierKeys.push(KeyCodes.alt);\n    }\n    if (ev.ctrlKey && key !== 'Control') {\n      modifierKeys.push(KeyCodes.ctrl);\n    }\n    if (ev.shiftKey && key !== 'Shift') {\n      modifierKeys.push(KeyCodes.shift);\n    }\n    if (ev.metaKey && key !== 'Meta') {\n      modifierKeys.push(KeyCodes.leftWindow);\n    }\n    return modifierKeys.length ? modifierKeys : undefined;\n  }\n\n  private _onKeyPress = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this.state.inKeytipMode && !this._keyHandled) {\n      // Call processInput\n      this.processInput(ev.key.toLocaleLowerCase(), ev);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n\n  private _onKeytipAdded = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n\n    this._keytipTree.addNode(keytipProps, uniqueID);\n    this._setKeytips();\n\n    // Add the keytip to the queue to show later\n    if (this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n      // Ensure existing children are still shown.\n      this._delayedKeytipQueue = this._delayedKeytipQueue.concat(this._keytipTree.currentKeytip?.children || []);\n\n      this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n\n      // Ensure the child of currentKeytip is successfully added to currentKeytip's children and update it if not.\n      // Note: Added this condition because KeytipTree.addNode was not always reflecting updates made to a parent node\n      // in currentKeytip when that parent is the currentKeytip.\n      if (\n        this._keytipTree.currentKeytip &&\n        this._keytipTree.currentKeytip.hasDynamicChildren &&\n        this._keytipTree.currentKeytip.children.indexOf(keytipProps.id) < 0\n      ) {\n        const currNode = this._keytipTree.getNode(this._keytipTree.currentKeytip.id);\n        if (currNode) {\n          this._keytipTree.currentKeytip = currNode;\n        }\n      }\n    }\n\n    this._persistedKeytipChecks(keytipProps);\n  };\n\n  private _onKeytipUpdated = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.updateNode(keytipProps, uniqueID);\n    this._setKeytips();\n    if (this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n      // Ensure existing children are still shown.\n      this._delayedKeytipQueue = this._delayedKeytipQueue.concat(this._keytipTree.currentKeytip?.children || []);\n      this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n    }\n\n    this._persistedKeytipChecks(keytipProps);\n  };\n\n  /**\n   * Helper function to do checks related to persisted/overflow keytips\n   * Done on keytip added and keytip updated\n   *\n   * @param keytipProps - Keytip props\n   */\n  private _persistedKeytipChecks = (keytipProps: IKeytipProps) => {\n    if (this._newCurrentKeytipSequences && arraysEqual(keytipProps.keySequences, this._newCurrentKeytipSequences)) {\n      this._triggerKeytipImmediately(keytipProps);\n    }\n\n    if (this._isCurrentKeytipAnAlias(keytipProps)) {\n      let keytipSequence = keytipProps.keySequences;\n      if (keytipProps.overflowSetSequence) {\n        keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n      }\n      this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\n    }\n  };\n\n  private _onKeytipRemoved = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n\n    // Remove keytip from the delayed queue\n    this._removeKeytipFromQueue(sequencesToID(keytipProps.keySequences));\n\n    // Remove the node from the Tree\n    this._keytipTree.removeNode(keytipProps, uniqueID);\n    this._setKeytips();\n  };\n\n  private _onPersistedKeytipAdded = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.addNode(keytipProps, uniqueID, true);\n  };\n\n  private _onPersistedKeytipRemoved = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.removeNode(keytipProps, uniqueID);\n  };\n\n  private _onPersistedKeytipExecute = (eventArgs: any) => {\n    this._persistedKeytipExecute(eventArgs.overflowButtonSequences, eventArgs.keytipSequences);\n  };\n\n  /**\n   * Trigger a keytip immediately and set it as the current keytip\n   *\n   * @param keytipProps - Keytip to trigger immediately\n   */\n  private _triggerKeytipImmediately(keytipProps: IKeytipProps) {\n    // This keytip should become the currentKeytip and should execute right away\n    let keytipSequence = [...keytipProps.keySequences];\n    if (keytipProps.overflowSetSequence) {\n      keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n    }\n\n    // Set currentKeytip\n    this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\n    if (this._keytipTree.currentKeytip) {\n      // Show all children keytips if any\n      const children = this._keytipTree.getChildren();\n      if (children.length) {\n        this.showKeytips(children);\n      }\n\n      if (this._keytipTree.currentKeytip.onExecute) {\n        this._keytipTree.currentKeytip.onExecute(\n          this._getKtpExecuteTarget(this._keytipTree.currentKeytip),\n          this._getKtpTarget(this._keytipTree.currentKeytip),\n        );\n      }\n    }\n\n    // Unset _newCurrKtpSequences\n    this._newCurrentKeytipSequences = undefined;\n  }\n\n  private _addKeytipToQueue(keytipID: string) {\n    // Add keytip\n    this._delayedKeytipQueue.push(keytipID);\n    // Clear timeout\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    // Reset timeout\n    this._delayedQueueTimeout = this._async.setTimeout(() => {\n      if (this._delayedKeytipQueue.length) {\n        this.showKeytips(this._delayedKeytipQueue);\n        this._delayedKeytipQueue = [];\n      }\n    }, 300);\n  }\n\n  private _removeKeytipFromQueue(keytipID: string) {\n    const index = this._delayedKeytipQueue.indexOf(keytipID);\n    if (index >= 0) {\n      // Remove keytip\n      this._delayedKeytipQueue.splice(index, 1);\n      // Clear timeout\n      this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n      // Reset timeout\n      this._delayedQueueTimeout = this._async.setTimeout(() => {\n        if (this._delayedKeytipQueue.length) {\n          this.showKeytips(this._delayedKeytipQueue);\n          this._delayedKeytipQueue = [];\n        }\n      }, 300);\n    }\n  }\n\n  private _getKtpExecuteTarget(currKtp: IKeytipTreeNode): HTMLElement | null {\n    return getDocument()!.querySelector(ktpTargetFromId(currKtp.id));\n  }\n\n  private _getKtpTarget(currKtp: IKeytipTreeNode): HTMLElement | null {\n    return getDocument()!.querySelector(ktpTargetFromSequences(currKtp.keySequences));\n  }\n\n  /**\n   * Returns T/F if the keytipProps keySequences match the currentKeytip, and the currentKeytip is in an overflow well\n   * This will make 'keytipProps' the new currentKeytip\n   *\n   * @param keytipProps - Keytip props to check\n   * @returns - T/F if this keytip should become the currentKeytip\n   */\n  private _isCurrentKeytipAnAlias(keytipProps: IKeytipProps): boolean {\n    const currKtp = this._keytipTree.currentKeytip;\n    if (\n      currKtp &&\n      (currKtp.overflowSetSequence || currKtp.persisted) &&\n      arraysEqual(keytipProps.keySequences, currKtp.keySequences)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets if we are in keytip mode.\n   * Note, this sets both the state for the layer as well as\n   * the value that the manager will expose externally.\n   * @param inKeytipMode - Boolean so set whether we are in keytip mode or not\n   */\n  private _setInKeytipMode = (inKeytipMode: boolean): void => {\n    this.setState({ inKeytipMode: inKeytipMode });\n    this._keytipManager.inKeytipMode = inKeytipMode;\n  };\n\n  /**\n   * Emits a warning if duplicate keytips are found for the children of the current keytip\n   */\n  private _warnIfDuplicateKeytips = (): void => {\n    const duplicateKeytips = this._getDuplicateIds(this._keytipTree.getChildren());\n    if (duplicateKeytips.length) {\n      warn('Duplicate keytips found for ' + duplicateKeytips.join(', '));\n    }\n  };\n\n  /**\n   * Returns duplicates among keytip IDs.\n   * If the returned array is empty, no duplicates were found.\n   *\n   * @param keytipIds - Array of keytip IDs to find duplicates for\n   * @returns - Array of duplicates that were found. Each duplicate will only be added once to this array.\n   */\n  private _getDuplicateIds = (keytipIds: string[]): string[] => {\n    const seenIds: { [id: string]: number } = {};\n    return keytipIds.filter(keytipId => {\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n      // Only add the first duplicate keytip seen\n      return seenIds[keytipId] === 2;\n    });\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}