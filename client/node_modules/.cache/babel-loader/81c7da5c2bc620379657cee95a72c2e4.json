{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __assign } from \"tslib\";\nimport { SpanKind } from \"@opentelemetry/api\";\nimport { getTracer } from \"@azure/core-tracing\";\n/**\n * Creates a function called createSpan to create spans using the global tracer.\n * @hidden\n * @param spanConfig - The name of the operation being performed.\n * @param tracingOptions - The options for the underlying http request.\n */\nexport function createSpanFunction(_a) {\n  var packagePrefix = _a.packagePrefix,\n    namespace = _a.namespace;\n  return function (operationName, operationOptions) {\n    var tracer = getTracer();\n    var tracingOptions = operationOptions.tracingOptions || {};\n    var spanOptions = __assign(__assign({}, tracingOptions.spanOptions), {\n      kind: SpanKind.INTERNAL\n    });\n    var span = tracer.startSpan(packagePrefix + \".\" + operationName, spanOptions);\n    span.setAttribute(\"az.namespace\", namespace);\n    var newSpanOptions = tracingOptions.spanOptions || {};\n    if (span.isRecording()) {\n      newSpanOptions = __assign(__assign({}, tracingOptions.spanOptions), {\n        parent: span.context(),\n        attributes: __assign(__assign({}, spanOptions.attributes), {\n          \"az.namespace\": namespace\n        })\n      });\n    }\n    var newTracingOptions = __assign(__assign({}, tracingOptions), {\n      spanOptions: newSpanOptions\n    });\n    var newOperationOptions = __assign(__assign({}, operationOptions), {\n      tracingOptions: newTracingOptions\n    });\n    return {\n      span: span,\n      updatedOptions: newOperationOptions\n    };\n  };\n}","map":{"version":3,"sources":["../../src/createSpan.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA,SAA4B,QAAQ,QAAQ,oBAAoB;AAChE,SAAS,SAAS,QAAQ,qBAAqB;AAmB/C;;;;;AAKG;AACH,OAAM,SAAU,kBAAkB,CAAC,EAAwC,EAAA;MAAtC,aAAa,GAAA,EAAA,CAAA,aAAA;IAAE,SAAS,GAAA,EAAA,CAAA,SAAA;EAC3D,OAAO,UACL,aAAqB,EACrB,gBAAmB,EAAA;IAEnB,IAAM,MAAM,GAAG,SAAS,CAAA,CAAE;IAC1B,IAAM,cAAc,GAAG,gBAAgB,CAAC,cAAc,IAAI,CAAA,CAAE;IAC5D,IAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACZ,cAAc,CAAC,WAAW,CAAA,EAAA;MAC7B,IAAI,EAAE,QAAQ,CAAC;IAAQ,CAAA,CACxB;IAED,IAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAI,aAAa,GAAA,GAAA,GAAI,aAAe,EAAE,WAAW,CAAC;IAE/E,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,SAAS,CAAC;IAE5C,IAAI,cAAc,GAAG,cAAc,CAAC,WAAW,IAAI,CAAA,CAAE;IACrD,IAAI,IAAI,CAAC,WAAW,CAAA,CAAE,EAAE;MACtB,cAAc,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACT,cAAc,CAAC,WAAW,CAAA,EAAA;QAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,CAAA,CAAE;QACtB,UAAU,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACL,WAAW,CAAC,UAAU,CAAA,EAAA;UACzB,cAAc,EAAE;QAAS,CAAA;MAAA,CAAA,CAE5B;IACF;IAED,IAAM,iBAAiB,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAClB,cAAc,CAAA,EAAA;MACjB,WAAW,EAAE;IAAc,CAAA,CAC5B;IAED,IAAM,mBAAmB,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACpB,gBAAgB,CAAA,EAAA;MACnB,cAAc,EAAE;IAAiB,CAAA,CAClC;IAED,OAAO;MACL,IAAI,EAAA,IAAA;MACJ,cAAc,EAAE;KACjB;EACH,CAAC;AACH","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Span, SpanOptions, SpanKind } from \"@opentelemetry/api\";\nimport { getTracer } from \"@azure/core-tracing\";\nimport { OperationOptions } from \"./coreHttp\";\n\ntype OperationTracingOptions = OperationOptions[\"tracingOptions\"];\n\n/**\n * Configuration for creating a new Tracing Span\n */\nexport interface SpanConfig {\n  /**\n   * Package name prefix\n   */\n  packagePrefix: string;\n  /**\n   * Service namespace\n   */\n  namespace: string;\n}\n\n/**\n * Creates a function called createSpan to create spans using the global tracer.\n * @hidden\n * @param spanConfig - The name of the operation being performed.\n * @param tracingOptions - The options for the underlying http request.\n */\nexport function createSpanFunction({ packagePrefix, namespace }: SpanConfig) {\n  return function<T extends OperationOptions>(\n    operationName: string,\n    operationOptions: T\n  ): { span: Span; updatedOptions: T } {\n    const tracer = getTracer();\n    const tracingOptions = operationOptions.tracingOptions || {};\n    const spanOptions: SpanOptions = {\n      ...tracingOptions.spanOptions,\n      kind: SpanKind.INTERNAL\n    };\n\n    const span = tracer.startSpan(`${packagePrefix}.${operationName}`, spanOptions);\n\n    span.setAttribute(\"az.namespace\", namespace);\n\n    let newSpanOptions = tracingOptions.spanOptions || {};\n    if (span.isRecording()) {\n      newSpanOptions = {\n        ...tracingOptions.spanOptions,\n        parent: span.context(),\n        attributes: {\n          ...spanOptions.attributes,\n          \"az.namespace\": namespace\n        }\n      };\n    }\n\n    const newTracingOptions: OperationTracingOptions = {\n      ...tracingOptions,\n      spanOptions: newSpanOptions\n    };\n\n    const newOperationOptions: T = {\n      ...operationOptions,\n      tracingOptions: newTracingOptions\n    };\n\n    return {\n      span,\n      updatedOptions: newOperationOptions\n    };\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}