{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContextAPI = void 0;\nvar context_base_1 = require(\"@opentelemetry/context-base\");\nvar global_utils_1 = require(\"./global-utils\");\nvar NOOP_CONTEXT_MANAGER = new context_base_1.NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function ContextAPI() {}\n  /** Get the singleton instance of the Context API */\n  ContextAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current context manager. Returns the initialized context manager\n   */\n  ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n    if (global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY]) {\n      // global context manager has already been set\n      return this._getContextManager();\n    }\n    global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, contextManager, NOOP_CONTEXT_MANAGER);\n    return contextManager;\n  };\n  /**\n   * Get the currently active context\n   */\n  ContextAPI.prototype.active = function () {\n    return this._getContextManager().active();\n  };\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   */\n  ContextAPI.prototype.with = function (context, fn) {\n    return this._getContextManager().with(context, fn);\n  };\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param target function or event emitter to bind\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   */\n  ContextAPI.prototype.bind = function (target, context) {\n    if (context === void 0) {\n      context = this.active();\n    }\n    return this._getContextManager().bind(target, context);\n  };\n  ContextAPI.prototype._getContextManager = function () {\n    var _a, _b;\n    return (_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_CONTEXT_MANAGER;\n  };\n  /** Disable and remove the global context manager */\n  ContextAPI.prototype.disable = function () {\n    this._getContextManager().disable();\n    delete global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY];\n  };\n  return ContextAPI;\n}();\nexports.ContextAPI = ContextAPI;","map":{"version":3,"sources":["../../../src/api/context.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;;AAEH,IAAA,cAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;AAKA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAOA,IAAM,oBAAoB,GAAG,IAAI,cAAA,CAAA,kBAAkB,CAAA,CAAE;AAErD;;AAEG;AACH,IAAA,UAAA,GAAA,aAAA,YAAA;EAGE;EACA,SAAA,UAAA,CAAA,EAAA,CAAuB;EAEvB;EACc,UAAA,CAAA,WAAW,GAAzB,YAAA;IACE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;MACnB,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,CAAA,CAAE;IAClC;IAED,OAAO,IAAI,CAAC,SAAS;EACvB,CAAC;EAED;;AAEG;EACI,UAAA,CAAA,SAAA,CAAA,uBAAuB,GAA9B,UACE,cAA8B,EAAA;IAE9B,IAAI,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,8BAA8B,CAAC,EAAE;MAC3C;MACA,OAAO,IAAI,CAAC,kBAAkB,CAAA,CAAE;IACjC;IAED,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,8BAA8B,CAAC,GAAG,cAAA,CAAA,UAAU,CAClD,cAAA,CAAA,mCAAmC,EACnC,cAAc,EACd,oBAAoB,CACrB;IAED,OAAO,cAAc;EACvB,CAAC;EAED;;AAEG;EACI,UAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,OAAO,IAAI,CAAC,kBAAkB,CAAA,CAAE,CAAC,MAAM,CAAA,CAAE;EAC3C,CAAC;EAED;;;;;AAKG;EACI,UAAA,CAAA,SAAA,CAAA,IAAI,GAAX,UACE,OAAgB,EAChB,EAAK,EAAA;IAEL,OAAO,IAAI,CAAC,kBAAkB,CAAA,CAAE,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;EACpD,CAAC;EAED;;;;;AAKG;EACI,UAAA,CAAA,SAAA,CAAA,IAAI,GAAX,UAAe,MAAS,EAAE,OAAgC,EAAA;IAAhC,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAmB,IAAI,CAAC,MAAM,CAAA,CAAE;IAAA;IACxD,OAAO,IAAI,CAAC,kBAAkB,CAAA,CAAE,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;EACxD,CAAC;EAEO,UAAA,CAAA,SAAA,CAAA,kBAAkB,GAA1B,YAAA;;IACE,OAAO,CAAA,EAAA,GAAA,CAAA,EAAA,GACL,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,8BAA8B,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAvC,cAAA,CAAA,OAAO,EACL,cAAA,CAAA,mCAAmC,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAChC,oBAAoB;EAE7B,CAAC;EAED;EACO,UAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IACE,IAAI,CAAC,kBAAkB,CAAA,CAAE,CAAC,OAAO,CAAA,CAAE;IACnC,OAAO,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,8BAA8B,CAAC;EAChD,CAAC;EACH,OAAA,UAAC;AAAD,CAAC,CAAA,CAAA;AA9EY,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextAPI = void 0;\nvar context_base_1 = require(\"@opentelemetry/context-base\");\nvar global_utils_1 = require(\"./global-utils\");\nvar NOOP_CONTEXT_MANAGER = new context_base_1.NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager. Returns the initialized context manager\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        if (global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY]) {\n            // global context manager has already been set\n            return this._getContextManager();\n        }\n        global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, contextManager, NOOP_CONTEXT_MANAGER);\n        return contextManager;\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     */\n    ContextAPI.prototype.with = function (context, fn) {\n        return this._getContextManager().with(context, fn);\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param target function or event emitter to bind\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     */\n    ContextAPI.prototype.bind = function (target, context) {\n        if (context === void 0) { context = this.active(); }\n        return this._getContextManager().bind(target, context);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        var _a, _b;\n        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_CONTEXT_MANAGER);\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        delete global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY];\n    };\n    return ContextAPI;\n}());\nexports.ContextAPI = ContextAPI;\n//# sourceMappingURL=context.js.map"]},"metadata":{},"sourceType":"script"}