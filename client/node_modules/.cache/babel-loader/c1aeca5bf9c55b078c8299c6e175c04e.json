{"ast":null,"code":"import { getDocument } from './dom/getDocument';\nimport * as localStorage from './localStorage';\nimport * as sessionStorage from './sessionStorage';\n// Default to undefined so that we initialize on first read.\nvar _language;\nvar STORAGE_KEY = 'language';\n/**\n * Gets the language set for the page.\n * @param persistenceType - Where to persist the value. Default is `localStorage` if available.\n * (In version 8, the default will be `sessionStorage`.)\n */\nexport function getLanguage(persistenceType) {\n  if (persistenceType === void 0) {\n    persistenceType = 'localStorage';\n  }\n  if (_language === undefined) {\n    var doc = getDocument();\n    var savedLanguage = persistenceType === 'localStorage' ? localStorage.getItem(STORAGE_KEY) : persistenceType === 'sessionStorage' ? sessionStorage.getItem(STORAGE_KEY) : undefined;\n    if (savedLanguage) {\n      _language = savedLanguage;\n    }\n    if (_language === undefined && doc) {\n      _language = doc.documentElement.getAttribute('lang');\n    }\n    if (_language === undefined) {\n      _language = 'en';\n    }\n  }\n  return _language;\n}\nexport function setLanguage(language, persistenceParam) {\n  var doc = getDocument();\n  if (doc) {\n    doc.documentElement.setAttribute('lang', language);\n  }\n  var persistenceType = persistenceParam === true ? 'none' : !persistenceParam ? 'localStorage' : persistenceParam;\n  if (persistenceType === 'localStorage') {\n    localStorage.setItem(STORAGE_KEY, language);\n  } else if (persistenceType === 'sessionStorage') {\n    sessionStorage.setItem(STORAGE_KEY, language);\n  }\n  _language = language;\n}","map":{"version":3,"sources":["language.ts"],"names":[],"mappings":"AAAA,SAAS,WAAW,QAAQ,mBAAmB;AAC/C,OAAO,KAAK,YAAY,MAAM,gBAAgB;AAC9C,OAAO,KAAK,cAAc,MAAM,kBAAkB;AAElD;AACA,IAAI,SAAwB;AAE5B,IAAM,WAAW,GAAG,UAAU;AAE9B;;;;AAIG;AACH,OAAM,SAAU,WAAW,CACzB,eAA4E,EAAA;EAA5E,IAAA,eAAA,KAAA,KAAA,CAAA,EAAA;IAAA,eAAA,GAAA,cAA4E;EAAA;EAE5E,IAAI,SAAS,KAAK,SAAS,EAAE;IAC3B,IAAI,GAAG,GAAG,WAAW,CAAA,CAAE;IACvB,IAAM,aAAa,GACjB,eAAe,KAAK,cAAc,GAC9B,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,GACjC,eAAe,KAAK,gBAAgB,GACpC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,GACnC,SAAS;IAEf,IAAI,aAAa,EAAE;MACjB,SAAS,GAAG,aAAa;IAC1B;IAED,IAAI,SAAS,KAAK,SAAS,IAAI,GAAG,EAAE;MAClC,SAAS,GAAG,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC;IACrD;IAED,IAAI,SAAS,KAAK,SAAS,EAAE;MAC3B,SAAS,GAAG,IAAI;IACjB;EACF;EAED,OAAO,SAAS;AAClB;AAgBA,OAAM,SAAU,WAAW,CACzB,QAAgB,EAChB,gBAAuE,EAAA;EAEvE,IAAI,GAAG,GAAG,WAAW,CAAA,CAAE;EAEvB,IAAI,GAAG,EAAE;IACP,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;EACnD;EAED,IAAM,eAAe,GAAG,gBAAgB,KAAK,IAAI,GAAG,MAAM,GAAG,CAAC,gBAAgB,GAAG,cAAc,GAAG,gBAAgB;EAClH,IAAI,eAAe,KAAK,cAAc,EAAE;IACtC,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC;GAC5C,MAAM,IAAI,eAAe,KAAK,gBAAgB,EAAE;IAC/C,cAAc,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC;EAC9C;EAED,SAAS,GAAG,QAAQ;AACtB","sourcesContent":["import { getDocument } from './dom/getDocument';\nimport * as localStorage from './localStorage';\nimport * as sessionStorage from './sessionStorage';\n\n// Default to undefined so that we initialize on first read.\nlet _language: string | null;\n\nconst STORAGE_KEY = 'language';\n\n/**\n * Gets the language set for the page.\n * @param persistenceType - Where to persist the value. Default is `localStorage` if available.\n * (In version 8, the default will be `sessionStorage`.)\n */\nexport function getLanguage(\n  persistenceType: 'localStorage' | 'sessionStorage' | 'none' = 'localStorage',\n): string | null {\n  if (_language === undefined) {\n    let doc = getDocument();\n    const savedLanguage =\n      persistenceType === 'localStorage'\n        ? localStorage.getItem(STORAGE_KEY)\n        : persistenceType === 'sessionStorage'\n        ? sessionStorage.getItem(STORAGE_KEY)\n        : undefined;\n\n    if (savedLanguage) {\n      _language = savedLanguage;\n    }\n\n    if (_language === undefined && doc) {\n      _language = doc.documentElement.getAttribute('lang');\n    }\n\n    if (_language === undefined) {\n      _language = 'en';\n    }\n  }\n\n  return _language;\n}\n\n/**\n * Sets the language for the page (by adjusting the lang attribute of the html element).\n * @param language - Language to set.\n * @param persistenceType - Where to persist the value. Default is `localStorage` if available.\n * (In version 8, the default will be `sessionStorage`.)\n */\nexport function setLanguage(language: string, persistenceType?: 'localStorage' | 'sessionStorage' | 'none'): void;\n/**\n * Sets the language for the page (by adjusting the lang attribute of the html element).\n * @deprecated Use string parameter version.\n * @param language - Language to set.\n * @param avoidPersisting - If true, don't store the value.\n */\nexport function setLanguage(language: string, avoidPersisting?: boolean): void;\nexport function setLanguage(\n  language: string,\n  persistenceParam?: 'localStorage' | 'sessionStorage' | 'none' | boolean,\n): void {\n  let doc = getDocument();\n\n  if (doc) {\n    doc.documentElement.setAttribute('lang', language);\n  }\n\n  const persistenceType = persistenceParam === true ? 'none' : !persistenceParam ? 'localStorage' : persistenceParam;\n  if (persistenceType === 'localStorage') {\n    localStorage.setItem(STORAGE_KEY, language);\n  } else if (persistenceType === 'sessionStorage') {\n    sessionStorage.setItem(STORAGE_KEY, language);\n  }\n\n  _language = language;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}