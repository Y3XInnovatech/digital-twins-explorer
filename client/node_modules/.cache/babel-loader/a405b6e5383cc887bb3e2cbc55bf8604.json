{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport * as React from 'react';\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\nexport function useMergedRefs() {\n  var refs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n  var mergedCallback = React.useCallback(function (value) {\n    // Update the \"current\" prop hanging on the function.\n    mergedCallback.current = value;\n    for (var _i = 0, refs_1 = refs; _i < refs_1.length; _i++) {\n      var ref = refs_1[_i];\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ref.current = value;\n      }\n    }\n  }, __spreadArrays(refs));\n  return mergedCallback;\n}","map":{"version":3,"sources":["useMergedRefs.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAQ9B;;;;;AAKG;AACH,OAAM,SAAU,aAAa,CAAA,EAAA;EAAI,IAAA,IAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAqC,EAArC,EAAA,GAAA,SAAA,CAAA,MAAqC,EAArC,EAAA,EAAqC,EAAA;IAArC,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAC/B,IAAM,cAAc,GAA0B,KAAK,CAAC,WAAW,CAC7D,UAAC,KAAQ,EAAA;IACP;IACE,cAAwD,CAAC,OAAO,GAAG,KAAK;IAE1E,KAAkB,IAAA,EAAA,GAAA,CAAI,EAAJ,MAAA,GAAA,IAAI,EAAJ,EAAA,GAAA,MAAA,CAAA,MAAI,EAAJ,EAAA,EAAI,EAAE;MAAnB,IAAM,GAAG,GAAA,MAAA,CAAA,EAAA,CAAA;MACZ,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;QAC7B,GAAG,CAAC,KAAK,CAAC;OACX,MAAM,IAAI,GAAG,EAAE;QACd;QACE,GAA6C,CAAC,OAAO,GAAG,KAAK;MAChE;IACF;EACH,CAAC,EAAA,cAAA,CAEG,IAAI,CAAA,CAC2B;EAErC,OAAO,cAAc;AACvB","sourcesContent":["import * as React from 'react';\n\n/**\n * A Ref function which can be treated like a ref object in that it has an attached\n * current property, which will be updated as the ref is evaluated.\n */\nexport type RefObjectFunction<T> = React.RefObject<T> & ((value: T) => void);\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\nexport function useMergedRefs<T>(...refs: (React.Ref<T> | undefined)[]): RefObjectFunction<T> {\n  const mergedCallback: RefObjectFunction<T> = (React.useCallback(\n    (value: T) => {\n      // Update the \"current\" prop hanging on the function.\n      ((mergedCallback as unknown) as React.MutableRefObject<T>).current = value;\n\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref) {\n          // work around the immutability of the React.Ref type\n          ((ref as unknown) as React.MutableRefObject<T>).current = value;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n    [...refs],\n  ) as unknown) as RefObjectFunction<T>;\n\n  return mergedCallback;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}