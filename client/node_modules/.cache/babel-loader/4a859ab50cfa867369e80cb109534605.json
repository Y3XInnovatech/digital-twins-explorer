{"ast":null,"code":"import { extractStyleParts } from './extractStyleParts';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { styleToClassName } from './styleToClassName';\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nexport function mergeStyles() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  return mergeCss(args, getStyleOptions());\n}\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n * Accepts a set of options that will be used when calculating styles.\n *\n * @public\n */\nexport function mergeCss(args, options) {\n  var styleArgs = args instanceof Array ? args : [args];\n  var _a = extractStyleParts(styleArgs),\n    classes = _a.classes,\n    objects = _a.objects;\n  if (objects.length) {\n    classes.push(styleToClassName(options || {}, objects));\n  }\n  return classes.join(' ');\n}","map":{"version":3,"sources":["mergeStyles.ts"],"names":[],"mappings":"AAAA,SAAS,iBAAiB,QAAQ,qBAAqB;AAGvD,SAAS,eAAe,QAAQ,qBAAqB;AACrD,SAAS,gBAAgB,QAAQ,oBAAoB;AAErD;;;;AAIG;AACH,OAAM,SAAU,WAAW,CAAA,EAAA;EAAC,IAAA,IAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAgE,EAAhE,EAAA,GAAA,SAAA,CAAA,MAAgE,EAAhE,EAAA,EAAgE,EAAA;IAAhE,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAC1B,OAAO,QAAQ,CAAC,IAAI,EAAE,eAAe,CAAA,CAAE,CAAC;AAC1C;AAEA;;;;;AAKG;AACH,OAAM,SAAU,QAAQ,CACtB,IAAqH,EACrH,OAAuB,EAAA;EAEvB,IAAM,SAAS,GAAG,IAAI,YAAY,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC;EACjD,IAAA,EAAA,GAAA,iBAAA,CAAA,SAAA,CAAmD;IAAjD,OAAA,GAAA,EAAA,CAAA,OAAO;IAAE,OAAA,GAAA,EAAA,CAAA,OAAwC;EAEzD,IAAI,OAAO,CAAC,MAAM,EAAE;IAClB,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,IAAI,CAAA,CAAE,EAAE,OAAO,CAAC,CAAC;EACvD;EAED,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;AAC1B","sourcesContent":["import { extractStyleParts } from './extractStyleParts';\nimport { IStyle, IStyleBaseArray } from './IStyle';\nimport { IStyleOptions } from './IStyleOptions';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { styleToClassName } from './styleToClassName';\n\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n *\n * @public\n */\nexport function mergeStyles(...args: (IStyle | IStyleBaseArray | false | null | undefined)[]): string {\n  return mergeCss(args, getStyleOptions());\n}\n\n/**\n * Concatenation helper, which can merge class names together. Skips over falsey values.\n * Accepts a set of options that will be used when calculating styles.\n *\n * @public\n */\nexport function mergeCss(\n  args: (IStyle | IStyleBaseArray | false | null | undefined) | (IStyle | IStyleBaseArray | false | null | undefined)[],\n  options?: IStyleOptions,\n): string {\n  const styleArgs = args instanceof Array ? args : [args];\n  const { classes, objects } = extractStyleParts(styleArgs);\n\n  if (objects.length) {\n    classes.push(styleToClassName(options || {}, objects));\n  }\n\n  return classes.join(' ');\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}