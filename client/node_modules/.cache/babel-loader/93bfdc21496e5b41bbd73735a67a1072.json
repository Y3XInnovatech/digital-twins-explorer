{"ast":null,"code":"import { mergeCssSets, Stylesheet } from '@uifabric/merge-styles';\nimport { getRTL } from './rtl';\nimport { getWindow } from './dom';\nvar MAX_CACHE_COUNT = 50;\nvar DEFAULT_SPECIFICITY_MULTIPLIER = 5;\nvar _memoizedClassNames = 0;\nvar stylesheet = Stylesheet.getInstance();\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(function () {\n    return _memoizedClassNames++;\n  });\n}\n// Note that because of the caching nature within the classNames memoization,\n// I've disabled this rule to simply be able to work with any types.\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// This represents a prop we attach to each Map to indicate the cached return value\n// associated with the graph node.\nvar retVal = '__retval__';\n/**\n * Creates a getClassNames function which calls getStyles given the props, and injects them\n * into mergeStyleSets.\n *\n * Note that the props you pass in on every render should be in the same order and\n * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating\n * these will cause extra recalcs to occur.\n */\nexport function classNamesFunction(options) {\n  // We build a trie where each node is a Map. The map entry key represents an argument\n  // value, and the entry value is another node (Map). Each node has a `__retval__`\n  // property which is used to hold the cached response.\n  if (options === void 0) {\n    options = {};\n  }\n  // To derive the response, we can simply ensure the arguments are added or already\n  // exist in the trie. At the last node, if there is a `__retval__` we return that. Otherwise\n  // we call the `getStyles` api to evaluate, cache on the property, and return that.\n  var map = new Map();\n  var styleCalcCount = 0;\n  var getClassNamesCount = 0;\n  var currentMemoizedClassNames = _memoizedClassNames;\n  var getClassNames = function (styleFunctionOrObject, styleProps) {\n    if (styleProps === void 0) {\n      styleProps = {};\n    }\n    var _a, _b;\n    // If useStaticStyles is true, styleFunctionOrObject returns slot to classname mappings.\n    // If there is also no style overrides, we can skip merge styles completely and\n    // simply return the result from the style funcion.\n    if (options.useStaticStyles && typeof styleFunctionOrObject === 'function' && styleFunctionOrObject.__noStyleOverride__) {\n      return styleFunctionOrObject(styleProps);\n    }\n    getClassNamesCount++;\n    var current = map;\n    var theme = styleProps.theme;\n    var rtl = theme && theme.rtl !== undefined ? theme.rtl : getRTL();\n    var disableCaching = options.disableCaching;\n    // On reset of our stylesheet, reset memoized cache.\n    if (currentMemoizedClassNames !== _memoizedClassNames) {\n      currentMemoizedClassNames = _memoizedClassNames;\n      map = new Map();\n      styleCalcCount = 0;\n    }\n    if (!options.disableCaching) {\n      current = _traverseMap(map, styleFunctionOrObject);\n      current = _traverseMap(current, styleProps);\n    }\n    if (disableCaching || !current[retVal]) {\n      if (styleFunctionOrObject === undefined) {\n        current[retVal] = {};\n      } else {\n        current[retVal] = mergeCssSets([typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject], {\n          rtl: !!rtl,\n          specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : undefined\n        });\n      }\n      if (!disableCaching) {\n        styleCalcCount++;\n      }\n    }\n    if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {\n      var win = getWindow();\n      if ((_b = (_a = win) === null || _a === void 0 ? void 0 : _a.FabricConfig) === null || _b === void 0 ? void 0 : _b.enableClassNameCacheFullWarning) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Styles are being recalculated too frequently. Cache miss rate is \" + styleCalcCount + \"/\" + getClassNamesCount + \".\");\n        // eslint-disable-next-line no-console\n        console.trace();\n      }\n      map.clear();\n      styleCalcCount = 0;\n      // Mutate the options passed in, that's all we can do.\n      options.disableCaching = true;\n    }\n    // Note: the retVal is an attached property on the Map; not a key in the Map. We use this attached property to\n    // cache the return value for this branch of the graph.\n    return current[retVal];\n  };\n  return getClassNames;\n}\nfunction _traverseEdge(current, value) {\n  value = _normalizeValue(value);\n  if (!current.has(value)) {\n    current.set(value, new Map());\n  }\n  return current.get(value);\n}\nfunction _traverseMap(current, inputs) {\n  if (typeof inputs === 'function') {\n    var cachedInputsFromStyled = inputs.__cachedInputs__;\n    if (cachedInputsFromStyled) {\n      // The styled helper will generate the styles function and will attach the cached\n      // inputs (consisting of the default styles, customzied styles, and user provided styles.)\n      // These should be used as cache keys for deriving the memoized value.\n      for (var _i = 0, _a = inputs.__cachedInputs__; _i < _a.length; _i++) {\n        var input = _a[_i];\n        current = _traverseEdge(current, input);\n      }\n    } else {\n      current = _traverseEdge(current, inputs);\n    }\n  } else if (typeof inputs === 'object') {\n    for (var propName in inputs) {\n      if (inputs.hasOwnProperty(propName)) {\n        current = _traverseEdge(current, inputs[propName]);\n      }\n    }\n  }\n  return current;\n}\nfunction _normalizeValue(value) {\n  switch (value) {\n    case undefined:\n      return '__undefined__';\n    case null:\n      return '__null__';\n    default:\n      return value;\n  }\n}","map":{"version":3,"sources":["classNamesFunction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  mergeCssSets,\n  IStyleSet,\n  IProcessedStyleSet,\n  Stylesheet,\n  IStyleFunctionOrObject,\n} from '@uifabric/merge-styles';\nimport { getRTL } from './rtl';\nimport { getWindow } from './dom';\nimport { StyleFunction } from './styled';\n\nconst MAX_CACHE_COUNT = 50;\nconst DEFAULT_SPECIFICITY_MULTIPLIER = 5;\n\nlet _memoizedClassNames = 0;\n\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(() => _memoizedClassNames++);\n}\n\n// Note that because of the caching nature within the classNames memoization,\n// I've disabled this rule to simply be able to work with any types.\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// This represents a prop we attach to each Map to indicate the cached return value\n// associated with the graph node.\nconst retVal = '__retval__';\n\ninterface IRecursiveMemoNode extends Map<any, IRecursiveMemoNode> {\n  [retVal]?: string;\n}\n\ntype AppWindow = (Window & { FabricConfig?: { enableClassNameCacheFullWarning?: boolean } }) | undefined;\n\nexport interface IClassNamesFunctionOptions {\n  /**\n   * Disables class caching for scenarios where styleProp parts mutate frequently.\n   */\n  disableCaching?: boolean;\n\n  /**\n   * Size of the cache. It overwrites default cache size when defined.\n   */\n  cacheSize?: number;\n\n  /**\n   * Set to true if component base styles are implemented in scss instead of css-in-js.\n   */\n  useStaticStyles?: boolean;\n}\n\n/**\n * Creates a getClassNames function which calls getStyles given the props, and injects them\n * into mergeStyleSets.\n *\n * Note that the props you pass in on every render should be in the same order and\n * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating\n * these will cause extra recalcs to occur.\n */\nexport function classNamesFunction<TStyleProps extends {}, TStyleSet extends IStyleSet<TStyleSet>>(\n  options: IClassNamesFunctionOptions = {},\n): (\n  getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined,\n  styleProps?: TStyleProps,\n) => IProcessedStyleSet<TStyleSet> {\n  // We build a trie where each node is a Map. The map entry key represents an argument\n  // value, and the entry value is another node (Map). Each node has a `__retval__`\n  // property which is used to hold the cached response.\n\n  // To derive the response, we can simply ensure the arguments are added or already\n  // exist in the trie. At the last node, if there is a `__retval__` we return that. Otherwise\n  // we call the `getStyles` api to evaluate, cache on the property, and return that.\n  let map: IRecursiveMemoNode = new Map();\n  let styleCalcCount = 0;\n  let getClassNamesCount = 0;\n  let currentMemoizedClassNames = _memoizedClassNames;\n\n  const getClassNames = (\n    styleFunctionOrObject: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined,\n    styleProps: TStyleProps = {} as TStyleProps,\n  ): IProcessedStyleSet<TStyleSet> => {\n    // If useStaticStyles is true, styleFunctionOrObject returns slot to classname mappings.\n    // If there is also no style overrides, we can skip merge styles completely and\n    // simply return the result from the style funcion.\n    if (\n      options.useStaticStyles &&\n      typeof styleFunctionOrObject === 'function' &&\n      (styleFunctionOrObject as StyleFunction<TStyleProps, TStyleSet>).__noStyleOverride__\n    ) {\n      return styleFunctionOrObject(styleProps) as IProcessedStyleSet<TStyleSet>;\n    }\n\n    getClassNamesCount++;\n    let current: Map<any, any> = map;\n    const { theme } = styleProps as any;\n    const rtl = theme && theme.rtl !== undefined ? theme.rtl : getRTL();\n\n    const disableCaching = options.disableCaching;\n\n    // On reset of our stylesheet, reset memoized cache.\n    if (currentMemoizedClassNames !== _memoizedClassNames) {\n      currentMemoizedClassNames = _memoizedClassNames;\n      map = new Map();\n      styleCalcCount = 0;\n    }\n\n    if (!options.disableCaching) {\n      current = _traverseMap(map, styleFunctionOrObject as any);\n      current = _traverseMap(current, styleProps);\n    }\n\n    if (disableCaching || !(current as any)[retVal]) {\n      if (styleFunctionOrObject === undefined) {\n        (current as any)[retVal] = {} as IProcessedStyleSet<TStyleSet>;\n      } else {\n        (current as any)[retVal] = mergeCssSets(\n          [\n            (typeof styleFunctionOrObject === 'function'\n              ? styleFunctionOrObject(styleProps)\n              : styleFunctionOrObject) as IStyleSet<TStyleSet>,\n          ],\n          { rtl: !!rtl, specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : undefined },\n        );\n      }\n\n      if (!disableCaching) {\n        styleCalcCount++;\n      }\n    }\n\n    if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {\n      const win = getWindow() as AppWindow;\n      if (win?.FabricConfig?.enableClassNameCacheFullWarning) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Styles are being recalculated too frequently. Cache miss rate is ${styleCalcCount}/${getClassNamesCount}.`,\n        );\n        // eslint-disable-next-line no-console\n        console.trace();\n      }\n\n      map.clear();\n      styleCalcCount = 0;\n\n      // Mutate the options passed in, that's all we can do.\n      options.disableCaching = true;\n    }\n\n    // Note: the retVal is an attached property on the Map; not a key in the Map. We use this attached property to\n    // cache the return value for this branch of the graph.\n    return (current as any)[retVal];\n  };\n\n  return getClassNames;\n}\n\nfunction _traverseEdge(current: Map<any, any>, value: any): Map<any, any> {\n  value = _normalizeValue(value);\n\n  if (!current.has(value)) {\n    current.set(value, new Map<any, any>());\n  }\n\n  return current.get(value);\n}\n\nfunction _traverseMap(current: Map<any, any>, inputs: any[] | Object): Map<any, any> {\n  if (typeof inputs === 'function') {\n    const cachedInputsFromStyled = (inputs as StyleFunction<any, any>).__cachedInputs__;\n    if (cachedInputsFromStyled) {\n      // The styled helper will generate the styles function and will attach the cached\n      // inputs (consisting of the default styles, customzied styles, and user provided styles.)\n      // These should be used as cache keys for deriving the memoized value.\n      for (const input of (inputs as any).__cachedInputs__) {\n        current = _traverseEdge(current, input);\n      }\n    } else {\n      current = _traverseEdge(current, inputs);\n    }\n  } else if (typeof inputs === 'object') {\n    for (const propName in inputs) {\n      if (inputs.hasOwnProperty(propName)) {\n        current = _traverseEdge(current, (inputs as any)[propName]);\n      }\n    }\n  }\n\n  return current;\n}\n\nfunction _normalizeValue(value: any): string {\n  switch (value) {\n    case undefined:\n      return '__undefined__';\n    case null:\n      return '__null__';\n    default:\n      return value;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}