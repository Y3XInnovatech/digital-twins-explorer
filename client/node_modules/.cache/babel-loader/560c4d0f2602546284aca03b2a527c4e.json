{"ast":null,"code":"/**\n * Helper to find the index of an item within an array, using a callback to\n * determine the match.\n *\n * @public\n * @param array - Array to search.\n * @param cb - Callback which returns true on matches.\n * @param fromIndex - Optional index to start from (defaults to 0)\n */\nexport function findIndex(array, cb, fromIndex) {\n  if (fromIndex === void 0) {\n    fromIndex = 0;\n  }\n  var index = -1;\n  for (var i = fromIndex; array && i < array.length; i++) {\n    if (cb(array[i], i)) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n/**\n * Helper to find the first item within an array that satisfies the callback.\n * @param array - Array to search\n * @param cb - Callback which returns true on matches\n */\nexport function find(array, cb) {\n  var index = findIndex(array, cb);\n  if (index < 0) {\n    return undefined;\n  }\n  return array[index];\n}\n/**\n * Creates an array of a given size and helper method to populate.\n *\n * @public\n * @param size - Size of array.\n * @param getItem - Callback to populate given cell index.\n */\nexport function createArray(size, getItem) {\n  var array = [];\n  for (var i = 0; i < size; i++) {\n    array.push(getItem(i));\n  }\n  return array;\n}\n/**\n * Convert the given array to a matrix with columnCount number\n * of columns.\n *\n * @public\n * @param items - The array to convert\n * @param columnCount - The number of columns for the resulting matrix\n * @returns A matrix of items\n */\nexport function toMatrix(items, columnCount) {\n  return items.reduce(function (rows, currentValue, index) {\n    if (index % columnCount === 0) {\n      rows.push([currentValue]);\n    } else {\n      rows[rows.length - 1].push(currentValue);\n    }\n    return rows;\n  }, []);\n}\n/**\n * Given an array, it returns a new array that does not contain the item at the given index.\n * @param array - The array to operate on\n * @param index - The index of the element to remove\n */\nexport function removeIndex(array, index) {\n  return array.filter(function (_, i) {\n    return index !== i;\n  });\n}\n/**\n * Given an array, this function returns a new array where the element at a given index has been replaced.\n * @param array - The array to operate on\n * @param newElement - The element that will be placed in the new array\n * @param index - The index of the element that should be replaced\n */\nexport function replaceElement(array, newElement, index) {\n  var copy = array.slice();\n  copy[index] = newElement;\n  return copy;\n}\n/**\n * Given an array, this function returns a new array where an element has been inserted at the given index.\n * @param array - The array to operate on\n * @param index - The index where an element should be inserted\n * @param itemToAdd - The element to insert\n */\nexport function addElementAtIndex(array, index, itemToAdd) {\n  var copy = array.slice();\n  copy.splice(index, 0, itemToAdd);\n  return copy;\n}\n/**\n * Given an array where each element is of type T or T[], flatten it into an array of T\n * @param array - The array where each element can optionally also be an array\n */\nexport function flatten(array) {\n  var result = [];\n  array.forEach(function (item) {\n    return result = result.concat(item);\n  });\n  return result;\n}\n/**\n * Returns a boolean indicating if the two given arrays are equal in length and values.\n *\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\n */\nexport function arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (var i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"sources":["array.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Helper to find the index of an item within an array, using a callback to\n * determine the match.\n *\n * @public\n * @param array - Array to search.\n * @param cb - Callback which returns true on matches.\n * @param fromIndex - Optional index to start from (defaults to 0)\n */\nexport function findIndex<T>(array: T[], cb: (item: T, index: number) => boolean, fromIndex: number = 0): number {\n  let index = -1;\n\n  for (let i = fromIndex; array && i < array.length; i++) {\n    if (cb(array[i], i)) {\n      index = i;\n      break;\n    }\n  }\n\n  return index;\n}\n\n/**\n * Helper to find the first item within an array that satisfies the callback.\n * @param array - Array to search\n * @param cb - Callback which returns true on matches\n */\nexport function find<T>(array: T[], cb: (item: T, index: number) => boolean): T | undefined {\n  let index = findIndex(array, cb);\n\n  if (index < 0) {\n    return undefined;\n  }\n\n  return array[index];\n}\n\n/**\n * Creates an array of a given size and helper method to populate.\n *\n * @public\n * @param size - Size of array.\n * @param getItem - Callback to populate given cell index.\n */\nexport function createArray<T>(size: number, getItem: (index: number) => T): T[] {\n  let array: T[] = [];\n\n  for (let i = 0; i < size; i++) {\n    array.push(getItem(i));\n  }\n\n  return array;\n}\n\n/**\n * Convert the given array to a matrix with columnCount number\n * of columns.\n *\n * @public\n * @param items - The array to convert\n * @param columnCount - The number of columns for the resulting matrix\n * @returns A matrix of items\n */\nexport function toMatrix<T>(items: T[], columnCount: number): T[][] {\n  return items.reduce((rows: T[][], currentValue: T, index: number) => {\n    if (index % columnCount === 0) {\n      rows.push([currentValue]);\n    } else {\n      rows[rows.length - 1].push(currentValue);\n    }\n    return rows;\n  }, [] as T[][]);\n}\n\n/**\n * Given an array, it returns a new array that does not contain the item at the given index.\n * @param array - The array to operate on\n * @param index - The index of the element to remove\n */\nexport function removeIndex<T>(array: T[], index: number): T[] {\n  return array.filter((_: T, i: number) => index !== i);\n}\n\n/**\n * Given an array, this function returns a new array where the element at a given index has been replaced.\n * @param array - The array to operate on\n * @param newElement - The element that will be placed in the new array\n * @param index - The index of the element that should be replaced\n */\nexport function replaceElement<T>(array: T[], newElement: T, index: number): T[] {\n  const copy = array.slice();\n  copy[index] = newElement;\n  return copy;\n}\n\n/**\n * Given an array, this function returns a new array where an element has been inserted at the given index.\n * @param array - The array to operate on\n * @param index - The index where an element should be inserted\n * @param itemToAdd - The element to insert\n */\nexport function addElementAtIndex<T>(array: T[], index: number, itemToAdd: T): T[] {\n  const copy = array.slice();\n  copy.splice(index, 0, itemToAdd);\n  return copy;\n}\n\n/**\n * Given an array where each element is of type T or T[], flatten it into an array of T\n * @param array - The array where each element can optionally also be an array\n */\nexport function flatten<T>(array: (T | T[])[]): T[] {\n  let result: T[] = [];\n  array.forEach((item: T | T[]): T[] => (result = result.concat(item)));\n  return result;\n}\n\n/**\n * Returns a boolean indicating if the two given arrays are equal in length and values.\n *\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\n */\nexport function arraysEqual<T>(array1: T[], array2: T[]): boolean {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}