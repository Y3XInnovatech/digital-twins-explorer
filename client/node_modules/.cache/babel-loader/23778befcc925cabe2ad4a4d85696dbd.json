{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { NoOpSpan } from \"../noop/noOpSpan\";\n/**\n * A mock span useful for testing.\n */\nvar TestSpan = /** @class */function (_super) {\n  __extends(TestSpan, _super);\n  /**\n   * Starts a new Span.\n   * @param parentTracer The tracer that created this Span\n   * @param name The name of the span.\n   * @param context The SpanContext this span belongs to\n   * @param kind The SpanKind of this Span\n   * @param parentSpanId The identifier of the parent Span\n   * @param startTime The startTime of the event (defaults to now)\n   */\n  function TestSpan(parentTracer, name, context, kind, parentSpanId, startTime) {\n    if (startTime === void 0) {\n      startTime = Date.now();\n    }\n    var _this = _super.call(this) || this;\n    _this._tracer = parentTracer;\n    _this.name = name;\n    _this.kind = kind;\n    _this.startTime = startTime;\n    _this.parentSpanId = parentSpanId;\n    _this.status = {\n      code: CanonicalCode.OK\n    };\n    _this.endCalled = false;\n    _this._context = context;\n    _this.attributes = {};\n    return _this;\n  }\n  /**\n   * Returns the Tracer that created this Span\n   */\n  TestSpan.prototype.tracer = function () {\n    return this._tracer;\n  };\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  TestSpan.prototype.context = function () {\n    return this._context;\n  };\n  /**\n   * Marks the end of Span execution.\n   * @param _endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  TestSpan.prototype.end = function (_endTime) {\n    this.endCalled = true;\n  };\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param status The status to set.\n   */\n  TestSpan.prototype.setStatus = function (status) {\n    this.status = status;\n    return this;\n  };\n  /**\n   * Returns whether this span will be recorded\n   */\n  TestSpan.prototype.isRecording = function () {\n    return true;\n  };\n  /**\n   * Sets an attribute on the Span\n   * @param key the attribute key\n   * @param value the attribute value\n   */\n  TestSpan.prototype.setAttribute = function (key, value) {\n    this.attributes[key] = value;\n    return this;\n  };\n  /**\n   * Sets attributes on the Span\n   * @param attributes the attributes to add\n   */\n  TestSpan.prototype.setAttributes = function (attributes) {\n    for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {\n      var key = _a[_i];\n      this.attributes[key] = attributes[key];\n    }\n    return this;\n  };\n  return TestSpan;\n}(NoOpSpan);\nexport { TestSpan };","map":{"version":3,"sources":["../../../../src/tracers/test/testSpan.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA,SAME,aAAa,QAER,oBAAoB;AAC3B,SAAS,QAAQ,QAAQ,kBAAkB;AAE3C;;AAEG;AACH,IAAA,QAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8B,SAAA,CAAA,QAAA,EAAA,MAAA,CAAA;EAuC5B;;;;;;;;AAQG;EACH,SAAA,QAAA,CACE,YAAoB,EACpB,IAAY,EACZ,OAAoB,EACpB,IAAc,EACd,YAAqB,EACrB,SAAiC,EAAA;IAAjC,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA;MAAA,SAAA,GAAuB,IAAI,CAAC,GAAG,CAAA,CAAE;IAAA;IANnC,IAAA,KAAA,GAQE,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IACP,KAAI,CAAC,OAAO,GAAG,YAAY;IAC3B,KAAI,CAAC,IAAI,GAAG,IAAI;IAChB,KAAI,CAAC,IAAI,GAAG,IAAI;IAChB,KAAI,CAAC,SAAS,GAAG,SAAS;IAC1B,KAAI,CAAC,YAAY,GAAG,YAAY;IAChC,KAAI,CAAC,MAAM,GAAG;MACZ,IAAI,EAAE,aAAa,CAAC;KACrB;IACD,KAAI,CAAC,SAAS,GAAG,KAAK;IACtB,KAAI,CAAC,QAAQ,GAAG,OAAO;IACvB,KAAI,CAAC,UAAU,GAAG,CAAA,CAAE;;EACtB;EAEA;;AAEG;EACH,QAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,OAAO,IAAI,CAAC,OAAO;EACrB,CAAC;EAED;;AAEG;EACH,QAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,OAAO,IAAI,CAAC,QAAQ;EACtB,CAAC;EAED;;;;AAIG;EACH,QAAA,CAAA,SAAA,CAAA,GAAG,GAAH,UAAI,QAAiB,EAAA;IACnB,IAAI,CAAC,SAAS,GAAG,IAAI;EACvB,CAAC;EAED;;;AAGG;EACH,QAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,MAAc,EAAA;IACtB,IAAI,CAAC,MAAM,GAAG,MAAM;IACpB,OAAO,IAAI;EACb,CAAC;EAED;;AAEG;EACH,QAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,OAAO,IAAI;EACb,CAAC;EAED;;;;AAIG;EACH,QAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,GAAW,EAAE,KAAc,EAAA;IACtC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK;IAC5B,OAAO,IAAI;EACb,CAAC;EAED;;;AAGG;EACH,QAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,UAAsB,EAAA;IAClC,KAAkB,IAAA,EAAA,GAAA,CAAuB,EAAvB,EAAA,GAAA,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAvB,EAAA,GAAA,EAAA,CAAA,MAAuB,EAAvB,EAAA,EAAuB,EAAE;MAAtC,IAAM,GAAG,GAAA,EAAA,CAAA,EAAA,CAAA;MACZ,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC;IACvC;IACD,OAAO,IAAI;EACb,CAAC;EACH,OAAA,QAAC;AAAD,CAAC,CAjI6B,QAAQ,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TimeInput,\n  Tracer,\n  SpanKind,\n  Status,\n  SpanContext,\n  CanonicalCode,\n  Attributes\n} from \"@opentelemetry/api\";\nimport { NoOpSpan } from \"../noop/noOpSpan\";\n\n/**\n * A mock span useful for testing.\n */\nexport class TestSpan extends NoOpSpan {\n  /**\n   * The Span's current name\n   */\n  name: string;\n\n  /**\n   * The Span's current status\n   */\n  status: Status;\n\n  /**\n   * The Span's kind\n   */\n  kind: SpanKind;\n\n  /**\n   * True if end() has been called on the Span\n   */\n  endCalled: boolean;\n\n  /**\n   * The start time of the Span\n   */\n  readonly startTime: TimeInput;\n\n  /**\n   * The id of the parent Span, if any.\n   */\n  readonly parentSpanId?: string;\n\n  /**\n   * Known attributes, if any.\n   */\n  readonly attributes: Attributes;\n\n  private _context: SpanContext;\n  private readonly _tracer: Tracer;\n\n  /**\n   * Starts a new Span.\n   * @param parentTracer The tracer that created this Span\n   * @param name The name of the span.\n   * @param context The SpanContext this span belongs to\n   * @param kind The SpanKind of this Span\n   * @param parentSpanId The identifier of the parent Span\n   * @param startTime The startTime of the event (defaults to now)\n   */\n  constructor(\n    parentTracer: Tracer,\n    name: string,\n    context: SpanContext,\n    kind: SpanKind,\n    parentSpanId?: string,\n    startTime: TimeInput = Date.now()\n  ) {\n    super();\n    this._tracer = parentTracer;\n    this.name = name;\n    this.kind = kind;\n    this.startTime = startTime;\n    this.parentSpanId = parentSpanId;\n    this.status = {\n      code: CanonicalCode.OK\n    };\n    this.endCalled = false;\n    this._context = context;\n    this.attributes = {};\n  }\n\n  /**\n   * Returns the Tracer that created this Span\n   */\n  tracer(): Tracer {\n    return this._tracer;\n  }\n\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  context(): SpanContext {\n    return this._context;\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param _endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    this.endCalled = true;\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param status The status to set.\n   */\n  setStatus(status: Status): this {\n    this.status = status;\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecording(): boolean {\n    return true;\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param key the attribute key\n   * @param value the attribute value\n   */\n  setAttribute(key: string, value: unknown): this {\n    this.attributes[key] = value;\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param attributes the attributes to add\n   */\n  setAttributes(attributes: Attributes): this {\n    for (const key of Object.keys(attributes)) {\n      this.attributes[key] = attributes[key];\n    }\n    return this;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}