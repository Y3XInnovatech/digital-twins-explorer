{"ast":null,"code":"import { DefaultPalette } from './colors/index';\nimport { DefaultEffects } from './effects/index';\nimport { DefaultFontStyles } from './fonts/index';\nimport { mergeThemes } from './mergeThemes';\nimport { DefaultSpacing } from './spacing/index';\nimport { makeSemanticColors } from './utilities/makeSemanticColors';\n/**\n * Creates a custom theme definition.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function createTheme(theme, depComments) {\n  if (theme === void 0) {\n    theme = {};\n  }\n  if (depComments === void 0) {\n    depComments = false;\n  }\n  var isInverted = !!theme.isInverted;\n  var baseTheme = {\n    palette: DefaultPalette,\n    effects: DefaultEffects,\n    fonts: DefaultFontStyles,\n    spacing: DefaultSpacing,\n    isInverted: isInverted,\n    disableGlobalClassNames: false,\n    semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, undefined, isInverted, depComments),\n    rtl: undefined\n  };\n  return mergeThemes(baseTheme, theme);\n}","map":{"version":3,"sources":["createTheme.ts"],"names":[],"mappings":"AAAA,SAAS,cAAc,QAAQ,gBAAgB;AAC/C,SAAS,cAAc,QAAQ,iBAAiB;AAChD,SAAS,iBAAiB,QAAQ,eAAe;AACjD,SAAS,WAAW,QAAQ,eAAe;AAC3C,SAAS,cAAc,QAAQ,iBAAiB;AAEhD,SAAS,kBAAkB,QAAQ,gCAAgC;AAEnE;;;;AAIG;AACH,OAAM,SAAU,WAAW,CAAC,KAAwB,EAAE,WAA4B,EAAA;EAAtD,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;IAAA,KAAA,GAAA,CAAA,CAAwB;EAAA;EAAE,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;IAAA,WAAA,GAAA,KAA4B;EAAA;EAChF,IAAM,UAAU,GAAG,CAAC,CAAC,KAAK,CAAC,UAAU;EACrC,IAAM,SAAS,GAAU;IACvB,OAAO,EAAE,cAAc;IACvB,OAAO,EAAE,cAAc;IACvB,KAAK,EAAE,iBAAiB;IACxB,OAAO,EAAE,cAAc;IACvB,UAAU,EAAA,UAAA;IACV,uBAAuB,EAAE,KAAK;IAC9B,cAAc,EAAE,kBAAkB,CAAC,cAAc,EAAE,cAAc,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,CAAC;IACtG,GAAG,EAAE;GACN;EAED,OAAO,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC;AACtC","sourcesContent":["import { DefaultPalette } from './colors/index';\nimport { DefaultEffects } from './effects/index';\nimport { DefaultFontStyles } from './fonts/index';\nimport { mergeThemes } from './mergeThemes';\nimport { DefaultSpacing } from './spacing/index';\nimport { PartialTheme, Theme } from './types/index';\nimport { makeSemanticColors } from './utilities/makeSemanticColors';\n\n/**\n * Creates a custom theme definition.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function createTheme(theme: PartialTheme = {}, depComments: boolean = false): Theme {\n  const isInverted = !!theme.isInverted;\n  const baseTheme: Theme = {\n    palette: DefaultPalette,\n    effects: DefaultEffects,\n    fonts: DefaultFontStyles,\n    spacing: DefaultSpacing,\n    isInverted,\n    disableGlobalClassNames: false,\n    semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, undefined, isInverted, depComments),\n    rtl: undefined,\n  };\n\n  return mergeThemes(baseTheme, theme);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}