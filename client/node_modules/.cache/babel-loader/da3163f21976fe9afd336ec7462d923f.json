{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nvar getClassNames = classNamesFunction();\nimport { DialogContent } from './DialogContent';\nvar DefaultModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false\n};\nvar DefaultDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: []\n};\nvar DialogBase = /** @class */function (_super) {\n  __extends(DialogBase, _super);\n  function DialogBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._getSubTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n        ariaDescribedById = _a.ariaDescribedById,\n        modalProps = _a.modalProps,\n        dialogContentProps = _a.dialogContentProps,\n        subText = _a.subText;\n      var id = modalProps && modalProps.subtitleAriaId || ariaDescribedById;\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.subText || subText) && _this._defaultSubTextId;\n      }\n      return id;\n    };\n    _this._getTitleTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n        ariaLabelledById = _a.ariaLabelledById,\n        modalProps = _a.modalProps,\n        dialogContentProps = _a.dialogContentProps,\n        title = _a.title;\n      var id = modalProps && modalProps.titleAriaId || ariaLabelledById;\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.title || title) && _this._defaultTitleTextId;\n      }\n      return id;\n    };\n    _this._id = getId('Dialog');\n    _this._defaultTitleTextId = _this._id + '-title';\n    _this._defaultSubTextId = _this._id + '-subText';\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId'\n      });\n    }\n    return _this;\n  }\n  DialogBase.prototype.render = function () {\n    var _a, _b;\n    var _c = this.props,\n      /* eslint-disable deprecation/deprecation */\n      className = _c.className,\n      containerClassName = _c.containerClassName,\n      contentClassName = _c.contentClassName,\n      elementToFocusOnDismiss = _c.elementToFocusOnDismiss,\n      firstFocusableSelector = _c.firstFocusableSelector,\n      forceFocusInsideTrap = _c.forceFocusInsideTrap,\n      styles = _c.styles,\n      hidden = _c.hidden,\n      ignoreExternalFocusing = _c.ignoreExternalFocusing,\n      isBlocking = _c.isBlocking,\n      isClickableOutsideFocusTrap = _c.isClickableOutsideFocusTrap,\n      isDarkOverlay = _c.isDarkOverlay,\n      isOpen = _c.isOpen,\n      onDismiss = _c.onDismiss,\n      onDismissed = _c.onDismissed,\n      onLayerDidMount = _c.onLayerDidMount,\n      responsiveMode = _c.responsiveMode,\n      subText = _c.subText,\n      theme = _c.theme,\n      title = _c.title,\n      topButtonsProps = _c.topButtonsProps,\n      type = _c.type,\n      /* eslint-enable deprecation/deprecation */\n      minWidth = _c.minWidth,\n      maxWidth = _c.maxWidth,\n      modalProps = _c.modalProps;\n    var mergedLayerProps = __assign({}, modalProps ? modalProps.layerProps : {\n      onLayerDidMount: onLayerDidMount\n    });\n    if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n      mergedLayerProps.onLayerDidMount = onLayerDidMount;\n    }\n    var dialogDraggableClassName;\n    var dragOptions;\n    // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n    if (modalProps && modalProps.dragOptions && !modalProps.dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions = __assign(__assign({}, modalProps.dragOptions), {\n        dragHandleSelector: \".\" + dialogDraggableClassName\n      });\n    } else {\n      dragOptions = modalProps && modalProps.dragOptions;\n    }\n    var mergedModalProps = __assign(__assign(__assign(__assign({}, DefaultModalProps), {\n      className: className,\n      containerClassName: containerClassName,\n      isBlocking: isBlocking,\n      isDarkOverlay: isDarkOverlay,\n      onDismissed: onDismissed\n    }), modalProps), {\n      layerProps: mergedLayerProps,\n      dragOptions: dragOptions\n    });\n    var dialogContentProps = __assign(__assign(__assign({\n      className: contentClassName,\n      subText: subText,\n      title: title,\n      topButtonsProps: topButtonsProps,\n      type: type\n    }, DefaultDialogContentProps), this.props.dialogContentProps), {\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: __assign({\n        // eslint-disable-next-line deprecation/deprecation\n        id: ((_a = this.props.dialogContentProps) === null || _a === void 0 ? void 0 : _a.titleId) || this._defaultTitleTextId\n      }, (_b = this.props.dialogContentProps) === null || _b === void 0 ? void 0 : _b.titleProps)\n    });\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden: hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth\n    });\n    return React.createElement(Modal, __assign({\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      firstFocusableSelector: firstFocusableSelector,\n      forceFocusInsideTrap: forceFocusInsideTrap,\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      isClickableOutsideFocusTrap: isClickableOutsideFocusTrap,\n      onDismissed: mergedModalProps.onDismissed,\n      responsiveMode: responsiveMode\n    }, mergedModalProps, {\n      isDarkOverlay: mergedModalProps.isDarkOverlay,\n      isBlocking: mergedModalProps.isBlocking,\n      isOpen: isOpen !== undefined ? isOpen : !hidden,\n      className: classNames.root,\n      containerClassName: classNames.main,\n      onDismiss: onDismiss ? onDismiss : mergedModalProps.onDismiss,\n      subtitleAriaId: this._getSubTextId(),\n      titleAriaId: this._getTitleTextId()\n    }), React.createElement(DialogContent, __assign({\n      subTextId: this._defaultSubTextId,\n      title: dialogContentProps.title,\n      subText: dialogContentProps.subText,\n      showCloseButton: mergedModalProps.isBlocking,\n      topButtonsProps: dialogContentProps.topButtonsProps,\n      type: dialogContentProps.type,\n      onDismiss: onDismiss ? onDismiss : dialogContentProps.onDismiss,\n      className: dialogContentProps.className\n    }, dialogContentProps), this.props.children));\n  };\n  DialogBase.defaultProps = {\n    hidden: true\n  };\n  DialogBase = __decorate([withResponsiveMode], DialogBase);\n  return DialogBase;\n}(React.Component);\nexport { DialogBase };","map":{"version":3,"sources":["components/Dialog/Dialog.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { IDialogProps, IDialogStyleProps, IDialogStyles } from './Dialog.types';\nimport { DialogType, IDialogContentProps } from './DialogContent.types';\nimport { Modal, IModalProps, IDragOptions } from '../../Modal';\nimport { ILayerProps } from '../../Layer';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\n\nimport { DialogContent } from './DialogContent';\n\nconst DefaultModalProps: IModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n};\n\nconst DefaultDialogContentProps: IDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: [],\n};\n\n@withResponsiveMode\nexport class DialogBase extends React.Component<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    hidden: true,\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId',\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      /* eslint-disable deprecation/deprecation */\n      className,\n      containerClassName,\n      contentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      styles,\n      hidden,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      responsiveMode,\n      subText,\n      theme,\n      title,\n      topButtonsProps,\n      type,\n      /* eslint-enable deprecation/deprecation */\n      minWidth,\n      maxWidth,\n      modalProps,\n    } = this.props;\n\n    const mergedLayerProps: ILayerProps = {\n      ...(modalProps ? modalProps.layerProps : { onLayerDidMount }),\n    };\n    if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n      mergedLayerProps.onLayerDidMount = onLayerDidMount;\n    }\n\n    let dialogDraggableClassName: string | undefined;\n    let dragOptions: IDragOptions | undefined;\n\n    // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n    if (modalProps && modalProps.dragOptions && !modalProps.dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions = {\n        ...modalProps.dragOptions,\n        dragHandleSelector: `.${dialogDraggableClassName}`,\n      };\n    } else {\n      dragOptions = modalProps && modalProps.dragOptions;\n    }\n\n    const mergedModalProps = {\n      ...DefaultModalProps,\n      className,\n      containerClassName,\n      isBlocking,\n      isDarkOverlay,\n      onDismissed,\n      ...modalProps,\n      layerProps: mergedLayerProps,\n      dragOptions,\n    };\n\n    const dialogContentProps: IDialogContentProps = {\n      className: contentClassName,\n      subText,\n      title,\n      topButtonsProps,\n      type,\n      ...DefaultDialogContentProps,\n      ...this.props.dialogContentProps,\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: {\n        // eslint-disable-next-line deprecation/deprecation\n        id: this.props.dialogContentProps?.titleId || this._defaultTitleTextId,\n        ...this.props.dialogContentProps?.titleProps,\n      },\n    };\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth,\n    });\n\n    return (\n      <Modal\n        elementToFocusOnDismiss={elementToFocusOnDismiss}\n        firstFocusableSelector={firstFocusableSelector}\n        forceFocusInsideTrap={forceFocusInsideTrap}\n        ignoreExternalFocusing={ignoreExternalFocusing}\n        isClickableOutsideFocusTrap={isClickableOutsideFocusTrap}\n        onDismissed={mergedModalProps.onDismissed}\n        responsiveMode={responsiveMode}\n        {...mergedModalProps}\n        isDarkOverlay={mergedModalProps.isDarkOverlay}\n        isBlocking={mergedModalProps.isBlocking}\n        isOpen={isOpen !== undefined ? isOpen : !hidden}\n        className={classNames.root}\n        containerClassName={classNames.main}\n        onDismiss={onDismiss ? onDismiss : mergedModalProps.onDismiss}\n        subtitleAriaId={this._getSubTextId()}\n        titleAriaId={this._getTitleTextId()}\n      >\n        <DialogContent\n          subTextId={this._defaultSubTextId}\n          title={dialogContentProps.title}\n          subText={dialogContentProps.subText}\n          showCloseButton={mergedModalProps.isBlocking}\n          topButtonsProps={dialogContentProps.topButtonsProps}\n          type={dialogContentProps.type}\n          onDismiss={onDismiss ? onDismiss : dialogContentProps.onDismiss}\n          className={dialogContentProps.className}\n          {...dialogContentProps}\n        >\n          {this.props.children}\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = (modalProps && modalProps.subtitleAriaId) || ariaDescribedById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.subText) || subText) && this._defaultSubTextId;\n    }\n\n    return id;\n  };\n\n  private _getTitleTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = (modalProps && modalProps.titleAriaId) || ariaLabelledById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.title) || title) && this._defaultTitleTextId;\n    }\n\n    return id;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}