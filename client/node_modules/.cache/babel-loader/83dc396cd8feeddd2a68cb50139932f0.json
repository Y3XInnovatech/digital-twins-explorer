{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizer, getNativeProps, divProperties, classNamesFunction, getDocument, memoizeFunction, getRTL, FocusRects } from '../../Utilities';\nimport { createTheme } from '../../Styling';\nvar getClassNames = classNamesFunction();\nvar getFabricTheme = memoizeFunction(function (theme, isRTL) {\n  return createTheme(__assign(__assign({}, theme), {\n    rtl: isRTL\n  }));\n});\nvar getDir = function (theme, dir) {\n  var contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  var pageDir = getRTL() ? 'rtl' : 'ltr';\n  var componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir\n  };\n};\nvar FabricBase = /** @class */function (_super) {\n  __extends(FabricBase, _super);\n  function FabricBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._rootElement = React.createRef();\n    _this._removeClassNameFromBody = undefined;\n    return _this;\n  }\n  FabricBase.prototype.render = function () {\n    var _a = this.props,\n      _b = _a.as,\n      Root = _b === void 0 ? 'div' : _b,\n      theme = _a.theme,\n      dir = _a.dir;\n    var classNames = this._getClassNames();\n    var divProps = getNativeProps(this.props, divProperties, ['dir']);\n    var _c = getDir(theme, dir),\n      rootDir = _c.rootDir,\n      needsTheme = _c.needsTheme;\n    var renderedContent = React.createElement(Root, __assign({\n      dir: rootDir\n    }, divProps, {\n      className: classNames.root,\n      ref: this._rootElement\n    }));\n    if (needsTheme) {\n      renderedContent = React.createElement(Customizer, {\n        settings: {\n          theme: getFabricTheme(theme, dir === 'rtl')\n        }\n      }, renderedContent);\n    }\n    return React.createElement(React.Fragment, null, renderedContent, React.createElement(FocusRects, {\n      rootRef: this._rootElement\n    }));\n  };\n  FabricBase.prototype.componentDidMount = function () {\n    this._addClassNameToBody();\n  };\n  FabricBase.prototype.componentWillUnmount = function () {\n    if (this._removeClassNameFromBody) {\n      this._removeClassNameFromBody();\n    }\n  };\n  FabricBase.prototype._getClassNames = function () {\n    var _a = this.props,\n      className = _a.className,\n      theme = _a.theme,\n      applyTheme = _a.applyTheme,\n      styles = _a.styles;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      applyTheme: applyTheme,\n      className: className\n    });\n    return classNames;\n  };\n  FabricBase.prototype._addClassNameToBody = function () {\n    if (this.props.applyThemeToBody) {\n      var classNames_1 = this._getClassNames();\n      var currentDoc_1 = getDocument(this._rootElement.current);\n      if (currentDoc_1) {\n        currentDoc_1.body.classList.add(classNames_1.bodyThemed);\n        this._removeClassNameFromBody = function () {\n          currentDoc_1.body.classList.remove(classNames_1.bodyThemed);\n        };\n      }\n    }\n  };\n  return FabricBase;\n}(React.Component);\nexport { FabricBase };","map":{"version":3,"sources":["components/Fabric/Fabric.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Customizer,\n  getNativeProps,\n  divProperties,\n  classNamesFunction,\n  getDocument,\n  memoizeFunction,\n  getRTL,\n  FocusRects,\n} from '../../Utilities';\nimport { IFabricProps, IFabricStyleProps, IFabricStyles } from './Fabric.types';\nimport { IProcessedStyleSet } from '@uifabric/merge-styles';\nimport { ITheme, createTheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IFabricStyleProps, IFabricStyles>();\nconst getFabricTheme = memoizeFunction((theme?: ITheme, isRTL?: boolean) => createTheme({ ...theme, rtl: isRTL }));\n\nconst getDir = (theme?: ITheme, dir?: IFabricProps['dir']) => {\n  const contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  const pageDir = getRTL() ? 'rtl' : 'ltr';\n  const componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir,\n  };\n};\n\nexport class FabricBase extends React.Component<IFabricProps> {\n  private _rootElement = React.createRef<HTMLDivElement>();\n  private _removeClassNameFromBody?: () => void = undefined;\n\n  public render() {\n    const { as: Root = 'div', theme, dir } = this.props;\n    const classNames = this._getClassNames();\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['dir']);\n    const { rootDir, needsTheme } = getDir(theme, dir);\n\n    let renderedContent = <Root dir={rootDir} {...divProps} className={classNames.root} ref={this._rootElement} />;\n\n    if (needsTheme) {\n      renderedContent = (\n        <Customizer settings={{ theme: getFabricTheme(theme, dir === 'rtl') }}>{renderedContent}</Customizer>\n      );\n    }\n\n    return (\n      <>\n        {renderedContent}\n        <FocusRects rootRef={this._rootElement} />\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    this._addClassNameToBody();\n  }\n\n  public componentWillUnmount(): void {\n    if (this._removeClassNameFromBody) {\n      this._removeClassNameFromBody();\n    }\n  }\n\n  private _getClassNames(): IProcessedStyleSet<IFabricStyles> {\n    const { className, theme, applyTheme, styles } = this.props;\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      applyTheme: applyTheme,\n      className,\n    });\n    return classNames;\n  }\n\n  private _addClassNameToBody(): void {\n    if (this.props.applyThemeToBody) {\n      const classNames = this._getClassNames();\n      const currentDoc = getDocument(this._rootElement.current);\n      if (currentDoc) {\n        currentDoc.body.classList.add(classNames.bodyThemed);\n        this._removeClassNameFromBody = () => {\n          currentDoc.body.classList.remove(classNames.bodyThemed);\n        };\n      }\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}