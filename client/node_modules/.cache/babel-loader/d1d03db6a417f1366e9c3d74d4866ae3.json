{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { URLBuilder } from \"../url\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nvar allowedRedirect = [\"GET\", \"HEAD\"];\nexport var DefaultRedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n};\nexport function redirectPolicy(maximumRetries) {\n  if (maximumRetries === void 0) {\n    maximumRetries = 20;\n  }\n  return {\n    create: function (nextPolicy, options) {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\nvar RedirectPolicy = /** @class */function (_super) {\n  __extends(RedirectPolicy, _super);\n  function RedirectPolicy(nextPolicy, options, maxRetries) {\n    if (maxRetries === void 0) {\n      maxRetries = 20;\n    }\n    var _this = _super.call(this, nextPolicy, options) || this;\n    _this.maxRetries = maxRetries;\n    return _this;\n  }\n  RedirectPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n    return this._nextPolicy.sendRequest(request).then(function (response) {\n      return handleRedirect(_this, response, 0);\n    });\n  };\n  return RedirectPolicy;\n}(BaseRequestPolicy);\nexport { RedirectPolicy };\nfunction handleRedirect(policy, response, currentRetries) {\n  var request = response.request,\n    status = response.status;\n  var locationHeader = response.headers.get(\"location\");\n  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === \"POST\" || status === 307) && (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n    var builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n    return policy._nextPolicy.sendRequest(request).then(function (res) {\n      return handleRedirect(policy, res, currentRetries + 1);\n    });\n  }\n  return Promise.resolve(response);\n}","map":{"version":3,"sources":["../../../src/policies/redirectPolicy.ts"],"names":[],"mappings":"AAAA;AACA;;AAGA,SAAS,UAAU,QAAQ,QAAQ;AAEnC,SACE,iBAAiB,QAIZ,iBAAiB;AAExB;;AAEG;AACH,IAAM,eAAe,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;AAkBvC,OAAO,IAAM,sBAAsB,GAAoB;EACrD,eAAe,EAAE,IAAI;EACrB,UAAU,EAAE;CACb;AAED,OAAM,SAAU,cAAc,CAAC,cAAmB,EAAA;EAAnB,IAAA,cAAA,KAAA,KAAA,CAAA,EAAA;IAAA,cAAA,GAAA,EAAmB;EAAA;EAChD,OAAO;IACL,MAAM,EAAE,SAAA,CAAC,UAAyB,EAAE,OAA6B,EAAA;MAC/D,OAAO,IAAI,cAAc,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,CAAC;IAChE;GACD;AACH;AAEA,IAAA,cAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoC,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;EAClC,SAAA,cAAA,CAAY,UAAyB,EAAE,OAA6B,EAAW,UAAe,EAAA;IAAf,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA;MAAA,UAAA,GAAA,EAAe;IAAA;IAA9F,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAU,EAAE,OAAO,CAAC,IAAA,IAAA;IADmD,KAAA,CAAA,UAAU,GAAV,UAAU;;EAEzF;EAEO,cAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,UAAmB,OAAwB,EAAA;IAA3C,IAAA,KAAA,GAAA,IAAA;IACE,OAAO,IAAI,CAAC,WAAW,CACpB,WAAW,CAAC,OAAO,CAAC,CACpB,IAAI,CAAC,UAAC,QAAQ,EAAA;MAAK,OAAA,cAAc,CAAC,KAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;IAAjC,CAAiC,CAAC;EAC1D,CAAC;EACH,OAAA,cAAC;AAAD,CAAC,CAVmC,iBAAiB,CAAA;;AAYrD,SAAS,cAAc,CACrB,MAAsB,EACtB,QAA+B,EAC/B,cAAsB,EAAA;EAEd,IAAA,OAAO,GAAa,QAAQ,CAAA,OAArB;IAAE,MAAM,GAAK,QAAQ,CAAA,MAAb;EACvB,IAAM,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;EACvD,IACE,cAAc,KACb,MAAM,KAAK,GAAG,IACZ,MAAM,KAAK,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAE,IAC3D,MAAM,KAAK,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAE,IAC3D,MAAM,KAAK,GAAG,IAAI,OAAO,CAAC,MAAM,KAAK,MAAO,IAC7C,MAAM,KAAK,GAAG,CAAC,KAChB,CAAC,MAAM,CAAC,UAAU,IAAI,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,EAC1D;IACA,IAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;IAC7C,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC;IAC/B,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAA,CAAE;IAEhC;IACA;IACA,IAAI,MAAM,KAAK,GAAG,EAAE;MAClB,OAAO,CAAC,MAAM,GAAG,KAAK;MACtB,OAAO,OAAO,CAAC,IAAI;IACpB;IAED,OAAO,MAAM,CAAC,WAAW,CACtB,WAAW,CAAC,OAAO,CAAC,CACpB,IAAI,CAAC,UAAC,GAAG,EAAA;MAAK,OAAA,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,cAAc,GAAG,CAAC,CAAC;IAA/C,CAA+C,CAAC;EAClE;EAED,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;AAClC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectOptions {\n  /*\n   * When true, redirect responses are followed.  Defaults to true.\n   */\n  handleRedirects: boolean;\n\n  /*\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\nexport const DefaultRedirectOptions: RedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n};\n\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response) => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(\n  policy: RedirectPolicy,\n  response: HttpOperationResponse,\n  currentRetries: number\n): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && allowedRedirect.includes(request.method)) ||\n      (status === 302 && allowedRedirect.includes(request.method)) ||\n      (status === 303 && request.method === \"POST\") ||\n      status === 307) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)\n  ) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy\n      .sendRequest(request)\n      .then((res) => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}