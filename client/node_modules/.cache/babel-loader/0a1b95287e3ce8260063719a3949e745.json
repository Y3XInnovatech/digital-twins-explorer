{"ast":null,"code":"import * as React from 'react';\nimport { getId } from '@uifabric/utilities/lib/getId';\n/**\n * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).\n *\n * @param prefix - Optional prefix for the ID\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\nexport function useId(prefix, providedId) {\n  // getId should only be called once since it updates the global constant for the next ID value.\n  // (While an extra update isn't likely to cause problems in practice, it's better to avoid it.)\n  var ref = React.useRef(providedId);\n  if (!ref.current) {\n    ref.current = getId(prefix);\n  }\n  return ref.current;\n}","map":{"version":3,"sources":["useId.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,KAAK,QAAQ,+BAA+B;AAErD;;;;;;;AAOG;AACH,OAAM,SAAU,KAAK,CAAC,MAAe,EAAE,UAAmB,EAAA;EACxD;EACA;EACA,IAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAqB,UAAU,CAAC;EACxD,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;IAChB,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC;EAC5B;EACD,OAAO,GAAG,CAAC,OAAO;AACpB","sourcesContent":["import * as React from 'react';\nimport { getId } from '@uifabric/utilities/lib/getId';\n\n/**\n * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).\n *\n * @param prefix - Optional prefix for the ID\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\nexport function useId(prefix?: string, providedId?: string): string {\n  // getId should only be called once since it updates the global constant for the next ID value.\n  // (While an extra update isn't likely to cause problems in practice, it's better to avoid it.)\n  const ref = React.useRef<string | undefined>(providedId);\n  if (!ref.current) {\n    ref.current = getId(prefix);\n  }\n  return ref.current;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}