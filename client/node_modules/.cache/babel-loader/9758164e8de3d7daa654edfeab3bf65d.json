{"ast":null,"code":"/**\n * An implementation of the RDF Dataset Normalization specification.\n * This library works in the browser and node.js.\n *\n * BSD 3-Clause License\n * Copyright (c) 2016-2017 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\n\nconst util = require('./util');\nconst URDNA2015 = require('./URDNA2015');\nconst URGNA2012 = require('./URGNA2012');\nconst URDNA2015Sync = require('./URDNA2015Sync');\nconst URGNA2012Sync = require('./URGNA2012Sync');\n\n// optional native support\nlet rdfCanonizeNative;\ntry {\n  rdfCanonizeNative = require('rdf-canonize-native');\n} catch (e) {}\nconst api = {};\nmodule.exports = api;\n\n// expose helpers\napi.NQuads = require('./NQuads');\napi.IdentifierIssuer = require('./IdentifierIssuer');\n\n/**\n * Get or set native API.\n *\n * @param api the native API.\n *\n * @return the currently set native API.\n */\napi._rdfCanonizeNative = function (api) {\n  if (api) {\n    rdfCanonizeNative = api;\n  }\n  return rdfCanonizeNative;\n};\n\n/**\n * Asynchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n * @param [callback(err, canonical)] called once the operation completes.\n *\n * @return a Promise that resolves to the canonicalized RDF Dataset.\n */\napi.canonize = util.callbackify(async function (dataset, options) {\n  let callback;\n  const promise = new Promise((resolve, reject) => {\n    callback = (err, canonical) => {\n      if (err) {\n        return reject(err);\n      }\n\n      /*if(options.format === 'application/n-quads') {\n        canonical = canonical.join('');\n      }\n      canonical = _parseNQuads(canonical.join(''));*/\n\n      resolve(canonical);\n    };\n  });\n\n  // back-compat with legacy dataset\n  if (!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  // TODO: convert algorithms to Promise-based async\n  if (options.useNative) {\n    if (rdfCanonizeNative) {\n      rdfCanonizeNative.canonize(dataset, options, callback);\n    } else {\n      throw new Error('rdf-canonize-native not available');\n    }\n  } else {\n    if (options.algorithm === 'URDNA2015') {\n      new URDNA2015(options).main(dataset, callback);\n    } else if (options.algorithm === 'URGNA2012') {\n      new URGNA2012(options).main(dataset, callback);\n    } else if (!('algorithm' in options)) {\n      throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n    } else {\n      throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n    }\n  }\n  return promise;\n});\n\n/**\n * Synchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return the RDF dataset in canonical form.\n */\napi.canonizeSync = function (dataset, options) {\n  // back-compat with legacy dataset\n  if (!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n  if (options.useNative) {\n    if (rdfCanonizeNative) {\n      return rdfCanonizeNative.canonizeSync(dataset, options);\n    }\n    throw new Error('rdf-canonize-native not available');\n  }\n  if (options.algorithm === 'URDNA2015') {\n    return new URDNA2015Sync(options).main(dataset);\n  } else if (options.algorithm === 'URGNA2012') {\n    return new URGNA2012Sync(options).main(dataset);\n  }\n  if (!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};","map":{"version":3,"names":["util","require","URDNA2015","URGNA2012","URDNA2015Sync","URGNA2012Sync","rdfCanonizeNative","e","api","module","exports","NQuads","IdentifierIssuer","_rdfCanonizeNative","canonize","callbackify","dataset","options","callback","promise","Promise","resolve","reject","err","canonical","Array","isArray","legacyDatasetToQuads","useNative","Error","algorithm","main","canonizeSync"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/rdf-canonize/lib/index.js"],"sourcesContent":["/**\n * An implementation of the RDF Dataset Normalization specification.\n * This library works in the browser and node.js.\n *\n * BSD 3-Clause License\n * Copyright (c) 2016-2017 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\n\nconst util = require('./util');\nconst URDNA2015 = require('./URDNA2015');\nconst URGNA2012 = require('./URGNA2012');\nconst URDNA2015Sync = require('./URDNA2015Sync');\nconst URGNA2012Sync = require('./URGNA2012Sync');\n\n// optional native support\nlet rdfCanonizeNative;\ntry {\n  rdfCanonizeNative = require('rdf-canonize-native');\n} catch(e) {}\n\nconst api = {};\nmodule.exports = api;\n\n// expose helpers\napi.NQuads = require('./NQuads');\napi.IdentifierIssuer = require('./IdentifierIssuer');\n\n/**\n * Get or set native API.\n *\n * @param api the native API.\n *\n * @return the currently set native API.\n */\napi._rdfCanonizeNative = function(api) {\n  if(api) {\n    rdfCanonizeNative = api;\n  }\n  return rdfCanonizeNative;\n};\n\n/**\n * Asynchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n * @param [callback(err, canonical)] called once the operation completes.\n *\n * @return a Promise that resolves to the canonicalized RDF Dataset.\n */\napi.canonize = util.callbackify(async function(dataset, options) {\n  let callback;\n  const promise = new Promise((resolve, reject) => {\n    callback = (err, canonical) => {\n      if(err) {\n        return reject(err);\n      }\n\n      /*if(options.format === 'application/n-quads') {\n        canonical = canonical.join('');\n      }\n      canonical = _parseNQuads(canonical.join(''));*/\n\n      resolve(canonical);\n    };\n  });\n\n  // back-compat with legacy dataset\n  if(!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  // TODO: convert algorithms to Promise-based async\n  if(options.useNative) {\n    if(rdfCanonizeNative) {\n      rdfCanonizeNative.canonize(dataset, options, callback);\n    } else {\n      throw new Error('rdf-canonize-native not available');\n    }\n  } else {\n    if(options.algorithm === 'URDNA2015') {\n      new URDNA2015(options).main(dataset, callback);\n    } else if(options.algorithm === 'URGNA2012') {\n      new URGNA2012(options).main(dataset, callback);\n    } else if(!('algorithm' in options)) {\n      throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n    } else {\n      throw new Error(\n        'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n    }\n  }\n\n  return promise;\n});\n\n/**\n * Synchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return the RDF dataset in canonical form.\n */\napi.canonizeSync = function(dataset, options) {\n  // back-compat with legacy dataset\n  if(!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  if(options.useNative) {\n    if(rdfCanonizeNative) {\n      return rdfCanonizeNative.canonizeSync(dataset, options);\n    }\n    throw new Error('rdf-canonize-native not available');\n  }\n  if(options.algorithm === 'URDNA2015') {\n    return new URDNA2015Sync(options).main(dataset);\n  } else if(options.algorithm === 'URGNA2012') {\n    return new URGNA2012Sync(options).main(dataset);\n  }\n  if(!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  throw new Error(\n    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}