{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/**\n * Class representing a DigitalTwins.\n */\nvar DigitalTwins = /** @class */function () {\n  /**\n   * Initialize a new instance of the class DigitalTwins class.\n   * @param client Reference to the service client\n   */\n  function DigitalTwins(client) {\n    this.client = client;\n  }\n  /**\n   * Retrieves a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.getById = function (id, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      options: operationOptions\n    }, getByIdOperationSpec);\n  };\n  /**\n   * Adds or replaces a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or payload is invalid.\n   *   * ModelDecommissioned - The model for the digital twin is decommissioned.\n   *   * TwinLimitReached - The maximum number of digital twins allowed has been reached.\n   *   * ValidationFailed - The digital twin payload is not valid.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.add = function (id, twin, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      twin: twin,\n      options: operationOptions\n    }, addOperationSpec);\n  };\n  /**\n   * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   *   * RelationshipsNotDeleted - The digital twin contains relationships.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.delete = function (id, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      options: operationOptions\n    }, deleteOperationSpec);\n  };\n  /**\n   * Updates a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or payload is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - Applying the patch results in an invalid digital twin.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param patchDocument An update specification described by JSON Patch. Updates to property values and\n   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.update = function (id, patchDocument, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      patchDocument: patchDocument,\n      options: operationOptions\n    }, updateOperationSpec);\n  };\n  /**\n   * Retrieves a relationship between two digital twins.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.getRelationshipById = function (id, relationshipId, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      relationshipId: relationshipId,\n      options: operationOptions\n    }, getRelationshipByIdOperationSpec);\n  };\n  /**\n   * Adds a relationship between two digital twins.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, relationship id, or payload is invalid.\n   *   * InvalidRelationship - The relationship is invalid.\n   *   * OperationNotAllowed - The relationship cannot connect to the same digital twin.\n   *   * ValidationFailed - The relationship content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * TargetTwinNotFound - The digital twin target of the relationship was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param relationship The data for the relationship.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.addRelationship = function (id, relationshipId, relationship, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      relationshipId: relationshipId,\n      relationship: relationship,\n      options: operationOptions\n    }, addRelationshipOperationSpec);\n  };\n  /**\n   * Deletes a relationship between two digital twins.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.deleteRelationship = function (id, relationshipId, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      relationshipId: relationshipId,\n      options: operationOptions\n    }, deleteRelationshipOperationSpec);\n  };\n  /**\n   * Updates the properties on a relationship between two digital twins.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   *   * InvalidRelationship - The relationship is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - The relationship content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * * 409 Conflict\n   *   * RelationshipAlreadyExists - The relationship already exists.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param patchDocument JSON Patch description of the update to the relationship properties.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.updateRelationship = function (id, relationshipId, patchDocument, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      relationshipId: relationshipId,\n      patchDocument: patchDocument,\n      options: operationOptions\n    }, updateRelationshipOperationSpec);\n  };\n  /**\n   * Retrieves the relationships from a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.listRelationships = function (id, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      options: operationOptions\n    }, listRelationshipsOperationSpec);\n  };\n  /**\n   * Retrieves all incoming relationship for a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.listIncomingRelationships = function (id, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      options: operationOptions\n    }, listIncomingRelationshipsOperationSpec);\n  };\n  /**\n   * Sends telemetry on behalf of a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or message id is invalid.\n   *   * ValidationFailed - The telemetry content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param messageId A unique message identifier (in the scope of the digital twin id) that is commonly\n   *                  used for de-duplicating messages.\n   * @param telemetry The telemetry measurements to send from the digital twin.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.sendTelemetry = function (id, messageId, telemetry, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      messageId: messageId,\n      telemetry: telemetry,\n      options: operationOptions\n    }, sendTelemetryOperationSpec);\n  };\n  /**\n   * Sends telemetry on behalf of a component in a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, message id, or component path is invalid.\n   *   * ValidationFailed - The telemetry content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * ComponentNotFound - The component path was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param messageId A unique message identifier (in the scope of the digital twin id) that is commonly\n   *                  used for de-duplicating messages.\n   * @param telemetry The telemetry measurements to send from the digital twin's component.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.sendComponentTelemetry = function (id, componentPath, messageId, telemetry, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      componentPath: componentPath,\n      messageId: messageId,\n      telemetry: telemetry,\n      options: operationOptions\n    }, sendComponentTelemetryOperationSpec);\n  };\n  /**\n   * Retrieves a component from a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or component path is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * ComponentNotFound - The component path was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.getComponent = function (id, componentPath, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      componentPath: componentPath,\n      options: operationOptions\n    }, getComponentOperationSpec);\n  };\n  /**\n   * Updates a component on a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, component path, or payload is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - Applying the patch results in an invalid digital twin.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param patchDocument An update specification described by JSON Patch. Updates to property values and\n   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.updateComponent = function (id, componentPath, patchDocument, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      componentPath: componentPath,\n      patchDocument: patchDocument,\n      options: operationOptions\n    }, updateComponentOperationSpec);\n  };\n  /**\n   * ListRelationshipsNext\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListRelationships method.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.listRelationshipsNext = function (id, nextLink, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      nextLink: nextLink,\n      options: operationOptions\n    }, listRelationshipsNextOperationSpec);\n  };\n  /**\n   * ListIncomingRelationshipsNext\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListIncomingRelationships\n   *                 method.\n   * @param options The options parameters.\n   */\n  DigitalTwins.prototype.listIncomingRelationshipsNext = function (id, nextLink, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      nextLink: nextLink,\n      options: operationOptions\n    }, listIncomingRelationshipsNextOperationSpec);\n  };\n  return DigitalTwins;\n}();\nexport { DigitalTwins };\n// Operation Specifications\nvar serializer = new coreHttp.Serializer(Mappers, /* isXml */false);\nvar getByIdOperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"any\"\n        }\n      },\n      headersMapper: Mappers.DigitalTwinsGetByIdHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};\nvar addOperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"any\"\n        }\n      },\n      headersMapper: Mappers.DigitalTwinsAddHeaders\n    },\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.twin,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.contentType, Parameters.traceparent, Parameters.tracestate, Parameters.ifNoneMatch],\n  mediaType: \"json\",\n  serializer: serializer\n};\nvar deleteOperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate, Parameters.ifMatch],\n  serializer: serializer\n};\nvar updateOperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    202: {},\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate, Parameters.contentType1, Parameters.ifMatch],\n  mediaType: \"json\",\n  serializer: serializer\n};\nvar getRelationshipByIdOperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"any\"\n        }\n      },\n      headersMapper: Mappers.DigitalTwinsGetRelationshipByIdHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};\nvar addRelationshipOperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"any\"\n        }\n      },\n      headersMapper: Mappers.DigitalTwinsAddRelationshipHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.relationship,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [Parameters.contentType, Parameters.traceparent, Parameters.tracestate, Parameters.ifNoneMatch],\n  mediaType: \"json\",\n  serializer: serializer\n};\nvar deleteRelationshipOperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate, Parameters.ifMatch],\n  serializer: serializer\n};\nvar updateRelationshipOperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateRelationshipHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate, Parameters.contentType1, Parameters.ifMatch],\n  mediaType: \"json\",\n  serializer: serializer\n};\nvar listRelationshipsOperationSpec = {\n  path: \"/digitaltwins/{id}/relationships\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.relationshipName],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};\nvar listIncomingRelationshipsOperationSpec = {\n  path: \"/digitaltwins/{id}/incomingrelationships\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IncomingRelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};\nvar sendTelemetryOperationSpec = {\n  path: \"/digitaltwins/{id}/telemetry\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.telemetry,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.contentType, Parameters.traceparent, Parameters.tracestate, Parameters.messageId, Parameters.telemetrySourceTime],\n  mediaType: \"json\",\n  serializer: serializer\n};\nvar sendComponentTelemetryOperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}/telemetry\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.telemetry,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [Parameters.contentType, Parameters.traceparent, Parameters.tracestate, Parameters.messageId, Parameters.telemetrySourceTime],\n  mediaType: \"json\",\n  serializer: serializer\n};\nvar getComponentOperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"any\"\n        }\n      },\n      headersMapper: Mappers.DigitalTwinsGetComponentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};\nvar updateComponentOperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    202: {},\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateComponentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate, Parameters.contentType1, Parameters.ifMatch],\n  mediaType: \"json\",\n  serializer: serializer\n};\nvar listRelationshipsNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.relationshipName],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};\nvar listIncomingRelationshipsNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IncomingRelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};","map":{"version":3,"sources":["../../../../src/generated/operations/digitalTwins.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { AzureDigitalTwinsAPI } from \"../azureDigitalTwinsAPI\";\nimport {\n  DigitalTwinsGetByIdOptionalParams,\n  DigitalTwinsGetByIdResponse,\n  DigitalTwinsAddOptionalParams,\n  DigitalTwinsAddResponse,\n  DigitalTwinsDeleteOptionalParams,\n  DigitalTwinsUpdateOptionalParams,\n  DigitalTwinsUpdateResponse,\n  DigitalTwinsGetRelationshipByIdOptionalParams,\n  DigitalTwinsGetRelationshipByIdResponse,\n  DigitalTwinsAddRelationshipOptionalParams,\n  DigitalTwinsAddRelationshipResponse,\n  DigitalTwinsDeleteRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipResponse,\n  DigitalTwinsListRelationshipsOptionalParams,\n  DigitalTwinsListRelationshipsResponse,\n  DigitalTwinsListIncomingRelationshipsOptionalParams,\n  DigitalTwinsListIncomingRelationshipsResponse,\n  DigitalTwinsSendTelemetryOptionalParams,\n  DigitalTwinsSendComponentTelemetryOptionalParams,\n  DigitalTwinsGetComponentOptionalParams,\n  DigitalTwinsGetComponentResponse,\n  DigitalTwinsUpdateComponentOptionalParams,\n  DigitalTwinsUpdateComponentResponse,\n  DigitalTwinsListRelationshipsNextOptionalParams,\n  DigitalTwinsListRelationshipsNextResponse,\n  DigitalTwinsListIncomingRelationshipsNextOptionalParams,\n  DigitalTwinsListIncomingRelationshipsNextResponse\n} from \"../models\";\n\n/**\n * Class representing a DigitalTwins.\n */\nexport class DigitalTwins {\n  private readonly client: AzureDigitalTwinsAPI;\n\n  /**\n   * Initialize a new instance of the class DigitalTwins class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureDigitalTwinsAPI) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  getById(\n    id: string,\n    options?: DigitalTwinsGetByIdOptionalParams\n  ): Promise<DigitalTwinsGetByIdResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      getByIdOperationSpec\n    ) as Promise<DigitalTwinsGetByIdResponse>;\n  }\n\n  /**\n   * Adds or replaces a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or payload is invalid.\n   *   * ModelDecommissioned - The model for the digital twin is decommissioned.\n   *   * TwinLimitReached - The maximum number of digital twins allowed has been reached.\n   *   * ValidationFailed - The digital twin payload is not valid.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.\n   * @param options The options parameters.\n   */\n  add(\n    id: string,\n    twin: any,\n    options?: DigitalTwinsAddOptionalParams\n  ): Promise<DigitalTwinsAddResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, twin, options: operationOptions },\n      addOperationSpec\n    ) as Promise<DigitalTwinsAddResponse>;\n  }\n\n  /**\n   * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   *   * RelationshipsNotDeleted - The digital twin contains relationships.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  delete(\n    id: string,\n    options?: DigitalTwinsDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Updates a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or payload is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - Applying the patch results in an invalid digital twin.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param patchDocument An update specification described by JSON Patch. Updates to property values and\n   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.\n   * @param options The options parameters.\n   */\n  update(\n    id: string,\n    patchDocument: any[],\n    options?: DigitalTwinsUpdateOptionalParams\n  ): Promise<DigitalTwinsUpdateResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, patchDocument, options: operationOptions },\n      updateOperationSpec\n    ) as Promise<DigitalTwinsUpdateResponse>;\n  }\n\n  /**\n   * Retrieves a relationship between two digital twins.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param options The options parameters.\n   */\n  getRelationshipById(\n    id: string,\n    relationshipId: string,\n    options?: DigitalTwinsGetRelationshipByIdOptionalParams\n  ): Promise<DigitalTwinsGetRelationshipByIdResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, relationshipId, options: operationOptions },\n      getRelationshipByIdOperationSpec\n    ) as Promise<DigitalTwinsGetRelationshipByIdResponse>;\n  }\n\n  /**\n   * Adds a relationship between two digital twins.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, relationship id, or payload is invalid.\n   *   * InvalidRelationship - The relationship is invalid.\n   *   * OperationNotAllowed - The relationship cannot connect to the same digital twin.\n   *   * ValidationFailed - The relationship content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * TargetTwinNotFound - The digital twin target of the relationship was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param relationship The data for the relationship.\n   * @param options The options parameters.\n   */\n  addRelationship(\n    id: string,\n    relationshipId: string,\n    relationship: any,\n    options?: DigitalTwinsAddRelationshipOptionalParams\n  ): Promise<DigitalTwinsAddRelationshipResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, relationshipId, relationship, options: operationOptions },\n      addRelationshipOperationSpec\n    ) as Promise<DigitalTwinsAddRelationshipResponse>;\n  }\n\n  /**\n   * Deletes a relationship between two digital twins.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param options The options parameters.\n   */\n  deleteRelationship(\n    id: string,\n    relationshipId: string,\n    options?: DigitalTwinsDeleteRelationshipOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, relationshipId, options: operationOptions },\n      deleteRelationshipOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Updates the properties on a relationship between two digital twins.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   *   * InvalidRelationship - The relationship is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - The relationship content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * * 409 Conflict\n   *   * RelationshipAlreadyExists - The relationship already exists.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param patchDocument JSON Patch description of the update to the relationship properties.\n   * @param options The options parameters.\n   */\n  updateRelationship(\n    id: string,\n    relationshipId: string,\n    patchDocument: any[],\n    options?: DigitalTwinsUpdateRelationshipOptionalParams\n  ): Promise<DigitalTwinsUpdateRelationshipResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, relationshipId, patchDocument, options: operationOptions },\n      updateRelationshipOperationSpec\n    ) as Promise<DigitalTwinsUpdateRelationshipResponse>;\n  }\n\n  /**\n   * Retrieves the relationships from a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  listRelationships(\n    id: string,\n    options?: DigitalTwinsListRelationshipsOptionalParams\n  ): Promise<DigitalTwinsListRelationshipsResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      listRelationshipsOperationSpec\n    ) as Promise<DigitalTwinsListRelationshipsResponse>;\n  }\n\n  /**\n   * Retrieves all incoming relationship for a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  listIncomingRelationships(\n    id: string,\n    options?: DigitalTwinsListIncomingRelationshipsOptionalParams\n  ): Promise<DigitalTwinsListIncomingRelationshipsResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      listIncomingRelationshipsOperationSpec\n    ) as Promise<DigitalTwinsListIncomingRelationshipsResponse>;\n  }\n\n  /**\n   * Sends telemetry on behalf of a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or message id is invalid.\n   *   * ValidationFailed - The telemetry content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param messageId A unique message identifier (in the scope of the digital twin id) that is commonly\n   *                  used for de-duplicating messages.\n   * @param telemetry The telemetry measurements to send from the digital twin.\n   * @param options The options parameters.\n   */\n  sendTelemetry(\n    id: string,\n    messageId: string,\n    telemetry: any,\n    options?: DigitalTwinsSendTelemetryOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, messageId, telemetry, options: operationOptions },\n      sendTelemetryOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Sends telemetry on behalf of a component in a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, message id, or component path is invalid.\n   *   * ValidationFailed - The telemetry content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * ComponentNotFound - The component path was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param messageId A unique message identifier (in the scope of the digital twin id) that is commonly\n   *                  used for de-duplicating messages.\n   * @param telemetry The telemetry measurements to send from the digital twin's component.\n   * @param options The options parameters.\n   */\n  sendComponentTelemetry(\n    id: string,\n    componentPath: string,\n    messageId: string,\n    telemetry: any,\n    options?: DigitalTwinsSendComponentTelemetryOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, componentPath, messageId, telemetry, options: operationOptions },\n      sendComponentTelemetryOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Retrieves a component from a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or component path is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * ComponentNotFound - The component path was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param options The options parameters.\n   */\n  getComponent(\n    id: string,\n    componentPath: string,\n    options?: DigitalTwinsGetComponentOptionalParams\n  ): Promise<DigitalTwinsGetComponentResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, componentPath, options: operationOptions },\n      getComponentOperationSpec\n    ) as Promise<DigitalTwinsGetComponentResponse>;\n  }\n\n  /**\n   * Updates a component on a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, component path, or payload is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - Applying the patch results in an invalid digital twin.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param patchDocument An update specification described by JSON Patch. Updates to property values and\n   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.\n   * @param options The options parameters.\n   */\n  updateComponent(\n    id: string,\n    componentPath: string,\n    patchDocument: any[],\n    options?: DigitalTwinsUpdateComponentOptionalParams\n  ): Promise<DigitalTwinsUpdateComponentResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, componentPath, patchDocument, options: operationOptions },\n      updateComponentOperationSpec\n    ) as Promise<DigitalTwinsUpdateComponentResponse>;\n  }\n\n  /**\n   * ListRelationshipsNext\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListRelationships method.\n   * @param options The options parameters.\n   */\n  listRelationshipsNext(\n    id: string,\n    nextLink: string,\n    options?: DigitalTwinsListRelationshipsNextOptionalParams\n  ): Promise<DigitalTwinsListRelationshipsNextResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, nextLink, options: operationOptions },\n      listRelationshipsNextOperationSpec\n    ) as Promise<DigitalTwinsListRelationshipsNextResponse>;\n  }\n\n  /**\n   * ListIncomingRelationshipsNext\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListIncomingRelationships\n   *                 method.\n   * @param options The options parameters.\n   */\n  listIncomingRelationshipsNext(\n    id: string,\n    nextLink: string,\n    options?: DigitalTwinsListIncomingRelationshipsNextOptionalParams\n  ): Promise<DigitalTwinsListIncomingRelationshipsNextResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, nextLink, options: operationOptions },\n      listIncomingRelationshipsNextOperationSpec\n    ) as Promise<DigitalTwinsListIncomingRelationshipsNextResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst getByIdOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n      headersMapper: Mappers.DigitalTwinsGetByIdHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst addOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n      headersMapper: Mappers.DigitalTwinsAddHeaders\n    },\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.twin,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.ifNoneMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.ifMatch\n  ],\n  serializer\n};\nconst updateOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    202: {},\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.contentType1,\n    Parameters.ifMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst getRelationshipByIdOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n      headersMapper: Mappers.DigitalTwinsGetRelationshipByIdHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst addRelationshipOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n      headersMapper: Mappers.DigitalTwinsAddRelationshipHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.relationship,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.ifNoneMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteRelationshipOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.ifMatch\n  ],\n  serializer\n};\nconst updateRelationshipOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateRelationshipHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.contentType1,\n    Parameters.ifMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst listRelationshipsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.relationshipName],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst listIncomingRelationshipsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/incomingrelationships\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IncomingRelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst sendTelemetryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/telemetry\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.telemetry,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.messageId,\n    Parameters.telemetrySourceTime\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst sendComponentTelemetryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}/telemetry\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.telemetry,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.messageId,\n    Parameters.telemetrySourceTime\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst getComponentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"any\" } },\n      headersMapper: Mappers.DigitalTwinsGetComponentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst updateComponentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    202: {},\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateComponentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.contentType1,\n    Parameters.ifMatch\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst listRelationshipsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.relationshipName],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst listIncomingRelationshipsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IncomingRelationshipCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}