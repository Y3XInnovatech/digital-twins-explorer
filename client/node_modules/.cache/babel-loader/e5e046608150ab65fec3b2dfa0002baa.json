{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, KeyCodes, elementContains, findScrollableParent, getParent, getDocument, getWindow, isElementTabbable, css, initializeComponentRef, FocusRects } from '../../Utilities';\nimport { SelectionMode } from './interfaces';\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\nvar SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nvar SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nvar SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nvar SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nvar SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nvar SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nvar SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n/**\n * {@docCategory Selection}\n */\nvar SelectionZone = /** @class */function (_super) {\n  __extends(SelectionZone, _super);\n  function SelectionZone(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    /**\n     * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n     * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n     * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n     * focus event that occurs. This method does that.\n     */\n    _this.ignoreNextFocus = function () {\n      _this._handleNextFocus(false);\n    };\n    _this._onSelectionChange = function () {\n      var selection = _this.props.selection;\n      var isModal = selection.isModal && selection.isModal();\n      _this.setState({\n        isModal: isModal\n      });\n    };\n    _this._onMouseDownCapture = function (ev) {\n      var target = ev.target;\n      if (document.activeElement !== target && !elementContains(document.activeElement, target)) {\n        _this.ignoreNextFocus();\n        return;\n      }\n      if (!elementContains(target, _this._root.current)) {\n        return;\n      }\n      while (target !== _this._root.current) {\n        if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          _this.ignoreNextFocus();\n          break;\n        }\n        target = getParent(target);\n      }\n    };\n    /**\n     * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n     * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n     * specially.\n     */\n    _this._onFocus = function (ev) {\n      var target = ev.target;\n      var selection = _this.props.selection;\n      var isToggleModifierPressed = _this._isCtrlPressed || _this._isMetaPressed;\n      var selectionMode = _this._getSelectionMode();\n      if (_this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n        var isToggle = _this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n        var itemRoot = _this._findItemRoot(target);\n        if (!isToggle && itemRoot) {\n          var index = _this._getItemIndex(itemRoot);\n          if (isToggleModifierPressed) {\n            // set anchor only.\n            selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n            if (_this.props.enterModalOnTouch && _this._isTouch && selection.setModal) {\n              selection.setModal(true);\n              _this._setIsTouch(false);\n            }\n          } else {\n            if (_this.props.isSelectedOnFocus) {\n              _this._onItemSurfaceClick(ev, index);\n            }\n          }\n        }\n      }\n      _this._handleNextFocus(false);\n    };\n    _this._onMouseDown = function (ev) {\n      _this._updateModifiers(ev);\n      var target = ev.target;\n      var itemRoot = _this._findItemRoot(target);\n      // No-op if selection is disabled\n      if (_this._isSelectionDisabled(target)) {\n        return;\n      }\n      while (target !== _this._root.current) {\n        if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n          break;\n        } else if (itemRoot) {\n          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n            break;\n          } else if (_this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n            break;\n          } else if ((target === itemRoot || _this._shouldAutoSelect(target)) && !_this._isShiftPressed && !_this._isCtrlPressed && !_this._isMetaPressed) {\n            _this._onInvokeMouseDown(ev, _this._getItemIndex(itemRoot));\n            break;\n          } else if (_this.props.disableAutoSelectOnInputElements && (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')) {\n            return;\n          }\n        }\n        target = getParent(target);\n      }\n    };\n    _this._onTouchStartCapture = function (ev) {\n      _this._setIsTouch(true);\n    };\n    _this._onClick = function (ev) {\n      var _a = _this.props.enableTouchInvocationTarget,\n        enableTouchInvocationTarget = _a === void 0 ? false : _a;\n      _this._updateModifiers(ev);\n      var target = ev.target;\n      var itemRoot = _this._findItemRoot(target);\n      var isSelectionDisabled = _this._isSelectionDisabled(target);\n      while (target !== _this._root.current) {\n        if (_this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            _this._onToggleAllClick(ev);\n          }\n          break;\n        } else if (itemRoot) {\n          var index = _this._getItemIndex(itemRoot);\n          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n            if (!isSelectionDisabled) {\n              if (_this._isShiftPressed) {\n                _this._onItemSurfaceClick(ev, index);\n              } else {\n                _this._onToggleClick(ev, index);\n              }\n            }\n            break;\n          } else if (_this._isTouch && enableTouchInvocationTarget && _this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME) || _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n            // Items should be invokable even if selection is disabled.\n            _this._onInvokeClick(ev, index);\n            break;\n          } else if (target === itemRoot) {\n            if (!isSelectionDisabled) {\n              _this._onItemSurfaceClick(ev, index);\n            }\n            break;\n          } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n            return;\n          }\n        }\n        target = getParent(target);\n      }\n    };\n    _this._onContextMenu = function (ev) {\n      var target = ev.target;\n      var _a = _this.props,\n        onItemContextMenu = _a.onItemContextMenu,\n        selection = _a.selection;\n      if (onItemContextMenu) {\n        var itemRoot = _this._findItemRoot(target);\n        if (itemRoot) {\n          var index = _this._getItemIndex(itemRoot);\n          _this._onInvokeMouseDown(ev, index);\n          var skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n          // In order to keep back compat, if the value here is undefined, then we should still\n          // call preventDefault(). Only in the case where true is explicitly returned should\n          // the call be skipped.\n          if (!skipPreventDefault) {\n            ev.preventDefault();\n          }\n        }\n      }\n    };\n    /**\n     * In multi selection, if you double click within an item's root (but not within the invoke element or\n     * input elements), we should execute the invoke handler.\n     */\n    _this._onDoubleClick = function (ev) {\n      var target = ev.target;\n      var onItemInvoked = _this.props.onItemInvoked;\n      var itemRoot = _this._findItemRoot(target);\n      if (itemRoot && onItemInvoked && !_this._isInputElement(target)) {\n        var index = _this._getItemIndex(itemRoot);\n        while (target !== _this._root.current) {\n          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) || _this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n            break;\n          } else if (target === itemRoot) {\n            _this._onInvokeClick(ev, index);\n            break;\n          }\n          target = getParent(target);\n        }\n        target = getParent(target);\n      }\n    };\n    _this._onKeyDownCapture = function (ev) {\n      _this._updateModifiers(ev);\n      _this._handleNextFocus(true);\n    };\n    _this._onKeyDown = function (ev) {\n      _this._updateModifiers(ev);\n      var target = ev.target;\n      var isSelectionDisabled = _this._isSelectionDisabled(target);\n      var selection = _this.props.selection;\n      var isSelectAllKey = ev.which === KeyCodes.a && (_this._isCtrlPressed || _this._isMetaPressed);\n      var isClearSelectionKey = ev.which === KeyCodes.escape;\n      // Ignore key downs from input elements.\n      if (_this._isInputElement(target)) {\n        // A key was pressed while an item in this zone was focused.\n        return;\n      }\n      var selectionMode = _this._getSelectionMode();\n      // If ctrl-a is pressed, select all (if all are not already selected.)\n      if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n        if (!isSelectionDisabled) {\n          selection.setAllSelected(true);\n        }\n        ev.stopPropagation();\n        ev.preventDefault();\n        return;\n      }\n      // If escape is pressed, clear selection (if any are selected.)\n      if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n        if (!isSelectionDisabled) {\n          selection.setAllSelected(false);\n        }\n        ev.stopPropagation();\n        ev.preventDefault();\n        return;\n      }\n      var itemRoot = _this._findItemRoot(target);\n      // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n      if (itemRoot) {\n        var index = _this._getItemIndex(itemRoot);\n        while (target !== _this._root.current) {\n          if (_this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n            // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n            // so we can no-op for any keydowns in this case.\n            break;\n          } else if (_this._shouldAutoSelect(target)) {\n            if (!isSelectionDisabled) {\n              // If the event went to an element which should trigger auto-select, select it and then let\n              // the default behavior kick in.\n              _this._onInvokeMouseDown(ev, index);\n            }\n            break;\n          } else if ((ev.which === KeyCodes.enter || ev.which === KeyCodes.space) && (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')) {\n            return false;\n          } else if (target === itemRoot) {\n            if (ev.which === KeyCodes.enter) {\n              // Items should be invokable even if selection is disabled.\n              _this._onInvokeClick(ev, index);\n              ev.preventDefault();\n              return;\n            } else if (ev.which === KeyCodes.space) {\n              if (!isSelectionDisabled) {\n                _this._onToggleClick(ev, index);\n              }\n              ev.preventDefault();\n              return;\n            }\n            break;\n          }\n          target = getParent(target);\n        }\n      }\n    };\n    _this._events = new EventGroup(_this);\n    _this._async = new Async(_this);\n    initializeComponentRef(_this);\n    var selection = _this.props.selection;\n    // Reflect the initial modal state of selection into the state.\n    var isModal = selection.isModal && selection.isModal();\n    _this.state = {\n      isModal: isModal\n    };\n    return _this;\n  }\n  SelectionZone.getDerivedStateFromProps = function (nextProps, prevState) {\n    var isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n    return __assign(__assign({}, prevState), {\n      isModal: isModal\n    });\n  };\n  SelectionZone.prototype.componentDidMount = function () {\n    var win = getWindow(this._root.current);\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  };\n  SelectionZone.prototype.render = function () {\n    var isModal = this.state.isModal;\n    return React.createElement(\"div\", {\n      className: css('ms-SelectionZone', this.props.className, {\n        'ms-SelectionZone--modal': !!isModal\n      }),\n      ref: this._root,\n      onKeyDown: this._onKeyDown,\n      onMouseDown: this._onMouseDown,\n      onKeyDownCapture: this._onKeyDownCapture,\n      onClick: this._onClick,\n      role: \"presentation\",\n      onDoubleClick: this._onDoubleClick,\n      onContextMenu: this._onContextMenu,\n      onMouseDownCapture: this._onMouseDownCapture,\n      onFocusCapture: this._onFocus,\n      \"data-selection-is-modal\": isModal ? true : undefined\n    }, this.props.children, React.createElement(FocusRects, null));\n  };\n  SelectionZone.prototype.componentDidUpdate = function (previousProps) {\n    var selection = this.props.selection;\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  };\n  SelectionZone.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n    this._async.dispose();\n  };\n  SelectionZone.prototype._isSelectionDisabled = function (target) {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target);\n    }\n    return false;\n  };\n  SelectionZone.prototype._onToggleAllClick = function (ev) {\n    var selection = this.props.selection;\n    var selectionMode = this._getSelectionMode();\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  };\n  SelectionZone.prototype._onToggleClick = function (ev, index) {\n    var selection = this.props.selection;\n    var selectionMode = this._getSelectionMode();\n    selection.setChangeEvents(false);\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      var isSelected = selection.isIndexSelected(index);\n      var isModal = selection.isModal && selection.isModal();\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      if (isModal && selection.setModal) {\n        // Since the above call to setAllSelected(false) clears modal state,\n        // restore it. This occurs because the SelectionMode of the Selection\n        // may differ from the SelectionZone.\n        selection.setModal(true);\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n    selection.setChangeEvents(true);\n    ev.stopPropagation();\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  };\n  SelectionZone.prototype._onInvokeClick = function (ev, index) {\n    var _a = this.props,\n      selection = _a.selection,\n      onItemInvoked = _a.onItemInvoked;\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n  SelectionZone.prototype._onItemSurfaceClick = function (ev, index) {\n    var selection = this.props.selection;\n    var isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n    var selectionMode = this._getSelectionMode();\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  };\n  SelectionZone.prototype._onInvokeMouseDown = function (ev, index) {\n    var selection = this.props.selection;\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n    this._clearAndSelectIndex(index);\n  };\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  SelectionZone.prototype._findScrollParentAndTryClearOnEmptyClick = function (ev) {\n    var scrollParent = findScrollableParent(this._root.current);\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if (scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  };\n  SelectionZone.prototype._tryClearOnEmptyClick = function (ev) {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target)) {\n      this.props.selection.setAllSelected(false);\n    }\n  };\n  SelectionZone.prototype._clearAndSelectIndex = function (index) {\n    var selection = this.props.selection;\n    var isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n    if (!isAlreadySingleSelected) {\n      var isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      if (isModal || this.props.enterModalOnTouch && this._isTouch) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  };\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  SelectionZone.prototype._updateModifiers = function (ev) {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n    var keyCode = ev.keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  };\n  SelectionZone.prototype._findItemRoot = function (target) {\n    var selection = this.props.selection;\n    while (target !== this._root.current) {\n      var indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      var index = Number(indexValue);\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n      target = getParent(target);\n    }\n    if (target === this._root.current) {\n      return undefined;\n    }\n    return target;\n  };\n  SelectionZone.prototype._getItemIndex = function (itemRoot) {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  };\n  SelectionZone.prototype._shouldAutoSelect = function (element) {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  };\n  SelectionZone.prototype._hasAttribute = function (element, attributeName) {\n    var isToggle = false;\n    while (!isToggle && element !== this._root.current) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element);\n    }\n    return isToggle;\n  };\n  SelectionZone.prototype._isInputElement = function (element) {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  };\n  SelectionZone.prototype._isNonHandledClick = function (element) {\n    var doc = getDocument();\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n        element = getParent(element);\n      }\n    }\n    return true;\n  };\n  SelectionZone.prototype._handleNextFocus = function (handleFocus) {\n    var _this = this;\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n    this._shouldHandleFocus = handleFocus;\n    if (handleFocus) {\n      this._async.setTimeout(function () {\n        _this._shouldHandleFocus = false;\n      }, 100);\n    }\n  };\n  SelectionZone.prototype._setIsTouch = function (isTouch) {\n    var _this = this;\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n    this._isTouch = true;\n    if (isTouch) {\n      this._async.setTimeout(function () {\n        _this._isTouch = false;\n      }, 300);\n    }\n  };\n  SelectionZone.prototype._getSelectionMode = function () {\n    var selection = this.props.selection;\n    var _a = this.props.selectionMode,\n      selectionMode = _a === void 0 ? selection ? selection.mode : SelectionMode.none : _a;\n    return selectionMode;\n  };\n  SelectionZone.defaultProps = {\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple\n  };\n  return SelectionZone;\n}(React.Component);\nexport { SelectionZone };","map":{"version":3,"sources":["utilities/selection/SelectionZone.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  KeyCodes,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable,\n  css,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport { ISelection, SelectionMode, IObjectWithKey } from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZone {\n  /**\n   * Method to ignore subsequent focus.\n   */\n  ignoreNextFocus: () => void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\n  /**\n   * Reference to the component interface.\n   */\n  componentRef?: () => void;\n  /**\n   * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n   */\n  selection: ISelection;\n  /**\n   * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\n   */\n  layout?: {};\n  /**\n   * The mode of Selection, where the value is one of\n   * 'none', 'single', or 'multiple'.\n   *\n   * @defaultvalue {@link SelectionMode.multiple}\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * If true, selection is preserved on outer click.\n   */\n  selectionPreservedOnEmptyClick?: boolean;\n  /**\n   * If true, disables automatic selection on input elements.\n   */\n  disableAutoSelectOnInputElements?: boolean;\n  /**\n   * If true, modal selection is enabled on touch event.\n   */\n  enterModalOnTouch?: boolean;\n  /**\n   * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets\n   * for an item if the user is using touch.\n   *\n   * @defaultvalue false\n   */\n  enableTouchInvocationTarget?: boolean;\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n  /**\n   * Optional callback for when an item is\n   * invoked via ENTER or double-click.\n   */\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n  /**\n   * Optional callback for when an\n   * item's contextual menu action occurs.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n  /**\n   * Additional CSS class(es) to apply to the SelectionZone.\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneState {\n  isModal: boolean | undefined;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\n  public static defaultProps = {\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _isTabPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n  private _isTouch: boolean;\n  private _isTouchTimeoutId: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: ISelectionZoneProps,\n    prevState: ISelectionZoneState,\n  ): ISelectionZoneState {\n    const isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n\n    return {\n      ...prevState,\n      isModal,\n    };\n  }\n\n  constructor(props: ISelectionZoneProps) {\n    super(props);\n\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    const { selection } = this.props;\n\n    // Reflect the initial modal state of selection into the state.\n    const isModal = selection.isModal && selection.isModal();\n\n    this.state = {\n      isModal,\n    };\n  }\n\n  public componentDidMount(): void {\n    const win = getWindow(this._root.current);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  }\n\n  public render(): JSX.Element {\n    const { isModal } = this.state;\n\n    return (\n      <div\n        className={css('ms-SelectionZone', this.props.className, {\n          'ms-SelectionZone--modal': !!isModal,\n        })}\n        ref={this._root}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        onKeyDownCapture={this._onKeyDownCapture}\n        onClick={this._onClick}\n        role=\"presentation\"\n        onDoubleClick={this._onDoubleClick}\n        onContextMenu={this._onContextMenu}\n        onMouseDownCapture={this._onMouseDownCapture}\n        onFocusCapture={this._onFocus}\n        data-selection-is-modal={isModal ? true : undefined}\n      >\n        {this.props.children}\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(previousProps: ISelectionZoneProps): void {\n    const { selection } = this.props;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  public ignoreNextFocus = (): void => {\n    this._handleNextFocus(false);\n  };\n\n  private _onSelectionChange = (): void => {\n    const { selection } = this.props;\n\n    const isModal = selection.isModal && selection.isModal();\n\n    this.setState({\n      isModal,\n    });\n  };\n\n  private _onMouseDownCapture = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    if (document.activeElement !== target && !elementContains(document.activeElement as HTMLElement, target)) {\n      this.ignoreNextFocus();\n      return;\n    }\n\n    if (!elementContains(target, this._root.current)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n        this.ignoreNextFocus();\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      const itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (isToggleModifierPressed) {\n          // set anchor only.\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n          if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\n            selection.setModal(true);\n            this._setIsTouch(false);\n          }\n        } else {\n          if (this.props.isSelectedOnFocus) {\n            this._onItemSurfaceClick(ev, index);\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\n          !this._isShiftPressed &&\n          !this._isCtrlPressed &&\n          !this._isMetaPressed\n        ) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\n          break;\n        } else if (\n          this.props.disableAutoSelectOnInputElements &&\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\n        ) {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\n    this._setIsTouch(true);\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { enableTouchInvocationTarget = false } = this.props;\n\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        if (!isSelectionDisabled) {\n          this._onToggleAllClick(ev);\n        }\n        break;\n      } else if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            if (this._isShiftPressed) {\n              this._onItemSurfaceClick(ev, index);\n            } else {\n              this._onToggleClick(ev, index);\n            }\n          }\n          break;\n        } else if (\n          (this._isTouch &&\n            enableTouchInvocationTarget &&\n            this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          // Items should be invokable even if selection is disabled.\n          this._onInvokeClick(ev, index);\n          break;\n        } else if (target === itemRoot) {\n          if (!isSelectionDisabled) {\n            this._onItemSurfaceClick(ev, index);\n          }\n          break;\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        this._onInvokeMouseDown(ev, index);\n\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n\n        // In order to keep back compat, if the value here is undefined, then we should still\n        // call preventDefault(). Only in the case where true is explicitly returned should\n        // the call be skipped.\n        if (!skipPreventDefault) {\n          ev.preventDefault();\n        }\n      }\n    }\n  };\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or\n   * input elements), we should execute the invoke handler.\n   */\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    const { onItemInvoked } = this.props;\n    const itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && !this._isInputElement(target)) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    const { selection } = this.props;\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(true);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed, clear selection (if any are selected.)\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(false);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    const itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (this._shouldAutoSelect(target)) {\n          if (!isSelectionDisabled) {\n            // If the event went to an element which should trigger auto-select, select it and then let\n            // the default behavior kick in.\n            this._onInvokeMouseDown(ev, index);\n          }\n          break;\n        } else if (\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')\n        ) {\n          return false;\n        } else if (target === itemRoot) {\n          if (ev.which === KeyCodes.enter) {\n            // Items should be invokable even if selection is disabled.\n            this._onInvokeClick(ev, index);\n            ev.preventDefault();\n            return;\n          } else if (ev.which === KeyCodes.space) {\n            if (!isSelectionDisabled) {\n              this._onToggleClick(ev, index);\n            }\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  };\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      const isSelected = selection.isIndexSelected(index);\n      const isModal = selection.isModal && selection.isModal();\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      if (isModal && selection.setModal) {\n        // Since the above call to setAllSelected(false) clears modal state,\n        // restore it. This occurs because the SelectionMode of the Selection\n        // may differ from the SelectionZone.\n        selection.setModal(true);\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  }\n\n  private _onInvokeMouseDown(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n  ): void {\n    const { selection } = this.props;\n\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  }\n\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\n    const scrollParent = findScrollableParent(this._root.current) as HTMLElement;\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number): void {\n    const { selection } = this.props;\n    const isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected) {\n      const isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    const { selection } = this.props;\n\n    while (target !== this._root.current) {\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      const index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  }\n\n  private _shouldAutoSelect(element: HTMLElement): boolean {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    const doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean): void {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _setIsTouch(isTouch: boolean): void {\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 300);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const { selection } = this.props;\n\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\n\n    return selectionMode;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}