{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { DayOfWeek, FirstWeekOfYear, DateRangeType } from '../../utilities/dateValues/DateValues';\nimport { CalendarDay } from './CalendarDay';\nimport { CalendarMonth } from './CalendarMonth';\nimport { compareDates, getDateRangeArray } from '../../utilities/dateMath/DateMath';\nimport { css, elementContains, KeyCodes, getNativeProps, divProperties, initializeComponentRef, FocusRects } from '../../Utilities';\nimport * as stylesImport from './Calendar.scss';\nvar styles = stylesImport;\nvar leftArrow = 'Up';\nvar rightArrow = 'Down';\nvar closeIcon = 'CalculatorMultiply';\nvar iconStrings = {\n  leftNavigation: leftArrow,\n  rightNavigation: rightArrow,\n  closeIcon: closeIcon\n};\nvar defaultWorkWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\nvar dateTimeFormatterCallbacks = {\n  formatMonthDayYear: function (date, strings) {\n    return strings.months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();\n  },\n  formatMonthYear: function (date, strings) {\n    return strings.months[date.getMonth()] + ' ' + date.getFullYear();\n  },\n  formatDay: function (date) {\n    return date.getDate().toString();\n  },\n  formatYear: function (date) {\n    return date.getFullYear().toString();\n  }\n};\nvar Calendar = /** @class */function (_super) {\n  __extends(Calendar, _super);\n  function Calendar(props) {\n    var _this = _super.call(this, props) || this;\n    _this._dayPicker = React.createRef();\n    _this._monthPicker = React.createRef();\n    _this._hasFocus = false;\n    _this._onBlur = function (event) {\n      if (!elementContains(event.currentTarget, event.relatedTarget)) {\n        _this._hasFocus = false;\n        _this.props.onBlur && _this.props.onBlur(event);\n      }\n    };\n    _this._onFocus = function (event) {\n      if (!_this._hasFocus) {\n        _this._hasFocus = true;\n        _this.props.onFocus && _this.props.onFocus(event);\n      }\n    };\n    _this._navigateDayPickerDay = function (date) {\n      _this.setState({\n        navigatedDayDate: date,\n        navigatedMonthDate: date\n      });\n    };\n    _this._navigateMonthPickerDay = function (date) {\n      _this.setState({\n        navigatedMonthDate: date\n      });\n    };\n    _this._onNavigateDayDate = function (date, focusOnNavigatedDay) {\n      _this._navigateDayPickerDay(date);\n      _this._focusOnUpdate = focusOnNavigatedDay;\n    };\n    _this._onNavigateMonthDate = function (date, focusOnNavigatedDay) {\n      if (!focusOnNavigatedDay) {\n        _this._navigateMonthPickerDay(date);\n        _this._focusOnUpdate = focusOnNavigatedDay;\n        return;\n      }\n      var monthPickerOnly = !_this.props.showMonthPickerAsOverlay && !_this.props.isDayPickerVisible;\n      if (monthPickerOnly) {\n        _this._onSelectDate(date);\n      }\n      _this._navigateDayPickerDay(date);\n    };\n    _this._onSelectDate = function (date, selectedDateRangeArray) {\n      var onSelectDate = _this.props.onSelectDate;\n      _this.setState({\n        selectedDate: date\n      });\n      if (onSelectDate) {\n        onSelectDate(date, selectedDateRangeArray);\n      }\n    };\n    _this._onHeaderSelect = function (focus) {\n      _this.setState({\n        isDayPickerVisible: !_this.state.isDayPickerVisible,\n        isMonthPickerVisible: !_this.state.isMonthPickerVisible\n      });\n      if (focus) {\n        _this._focusOnUpdate = true;\n      }\n    };\n    _this._onGotoToday = function () {\n      var _a = _this.props,\n        dateRangeType = _a.dateRangeType,\n        firstDayOfWeek = _a.firstDayOfWeek,\n        today = _a.today,\n        workWeekDays = _a.workWeekDays,\n        selectDateOnClick = _a.selectDateOnClick;\n      if (selectDateOnClick) {\n        // When using Defaultprops, TypeScript doesn't know that React is going to inject defaults\n        // so we use exclamation mark as a hint to the type checker (see link below)\n        // https://decembersoft.com/posts/error-ts2532-optional-react-component-props-in-typescript/\n        var dates = getDateRangeArray(today, dateRangeType, firstDayOfWeek, workWeekDays);\n        _this._onSelectDate(today, dates);\n      }\n      _this._navigateDayPickerDay(today);\n      _this._focusOnUpdate = true;\n    };\n    _this._onGotoTodayClick = function (ev) {\n      _this._onGotoToday();\n    };\n    _this._onGotoTodayKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        ev.preventDefault();\n        _this._onGotoToday();\n      }\n    };\n    _this._onDatePickerPopupKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          break;\n        case KeyCodes.backspace:\n          ev.preventDefault();\n          break;\n        case KeyCodes.escape:\n          _this._handleEscKey(ev);\n          break;\n        default:\n          break;\n      }\n    };\n    _this._handleEscKey = function (ev) {\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss();\n      }\n    };\n    initializeComponentRef(_this);\n    var currentDate = props.value && !isNaN(props.value.getTime()) ? props.value : props.today || new Date();\n    _this.state = {\n      selectedDate: currentDate,\n      navigatedDayDate: currentDate,\n      navigatedMonthDate: currentDate,\n      /** When showMonthPickerAsOverlay is active it overrides isMonthPickerVisible/isDayPickerVisible props\n       (These props permanently set the visibility of their respective calendars). */\n      isMonthPickerVisible: _this.props.showMonthPickerAsOverlay ? false : _this.props.isMonthPickerVisible,\n      isDayPickerVisible: _this.props.showMonthPickerAsOverlay ? true : _this.props.isDayPickerVisible\n    };\n    _this._focusOnUpdate = false;\n    return _this;\n  }\n  Calendar.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    var autoNavigateOnSelection = nextProps.autoNavigateOnSelection,\n      value = nextProps.value,\n      _a = nextProps.today,\n      today = _a === void 0 ? new Date() : _a;\n    // Make sure auto-navigation is supported for programmatic changes to selected date, i.e.,\n    // if selected date is updated via props, we may need to modify the navigated date\n    var overrideNavigatedDate = autoNavigateOnSelection && !compareDates(value, this.props.value);\n    if (overrideNavigatedDate) {\n      this.setState({\n        navigatedMonthDate: value,\n        navigatedDayDate: value\n      });\n    }\n    this.setState({\n      selectedDate: value || today\n    });\n  };\n  Calendar.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n  Calendar.prototype.render = function () {\n    var _a;\n    var rootClass = 'ms-DatePicker';\n    var _b = this.props,\n      firstDayOfWeek = _b.firstDayOfWeek,\n      dateRangeType = _b.dateRangeType,\n      strings = _b.strings,\n      showMonthPickerAsOverlay = _b.showMonthPickerAsOverlay,\n      autoNavigateOnSelection = _b.autoNavigateOnSelection,\n      showGoToToday = _b.showGoToToday,\n      highlightCurrentMonth = _b.highlightCurrentMonth,\n      highlightSelectedMonth = _b.highlightSelectedMonth,\n      navigationIcons = _b.navigationIcons,\n      minDate = _b.minDate,\n      maxDate = _b.maxDate,\n      restrictedDates = _b.restrictedDates,\n      className = _b.className,\n      showCloseButton = _b.showCloseButton,\n      allFocusable = _b.allFocusable,\n      yearPickerHidden = _b.yearPickerHidden,\n      today = _b.today;\n    var nativeProps = getNativeProps(this.props, divProperties, ['value']);\n    var _c = this.state,\n      selectedDate = _c.selectedDate,\n      navigatedDayDate = _c.navigatedDayDate,\n      navigatedMonthDate = _c.navigatedMonthDate,\n      isMonthPickerVisible = _c.isMonthPickerVisible,\n      isDayPickerVisible = _c.isDayPickerVisible;\n    var onHeaderSelect = showMonthPickerAsOverlay ? this._onHeaderSelect : undefined;\n    var monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n    var overlayedWithButton = showMonthPickerAsOverlay && showGoToToday;\n    var goTodayEnabled = showGoToToday;\n    if (goTodayEnabled && navigatedDayDate && navigatedMonthDate && today) {\n      goTodayEnabled = navigatedDayDate.getFullYear() !== today.getFullYear() || navigatedDayDate.getMonth() !== today.getMonth() || navigatedMonthDate.getFullYear() !== today.getFullYear() || navigatedMonthDate.getMonth() !== today.getMonth();\n    }\n    return React.createElement(\"div\", {\n      className: css(rootClass, styles.root, className),\n      role: \"application\"\n    }, React.createElement(\"div\", __assign({}, nativeProps, {\n      onBlur: this._onBlur,\n      onFocus: this._onFocus,\n      className: css('ms-DatePicker-picker ms-DatePicker-picker--opened ms-DatePicker-picker--focused', styles.picker, styles.pickerIsOpened, styles.pickerIsFocused, isMonthPickerVisible && 'ms-DatePicker-monthPickerVisible ' + styles.monthPickerVisible, isMonthPickerVisible && isDayPickerVisible && 'ms-DatePicker-calendarsInline ' + styles.calendarsInline, monthPickerOnly && 'ms-DatePicker-monthPickerOnly ' + styles.monthPickerOnly, showMonthPickerAsOverlay && 'ms-DatePicker-monthPickerAsOverlay ' + styles.monthPickerAsOverlay)\n    }), React.createElement(\"div\", {\n      className: css('ms-DatePicker-holder ms-slideDownIn10', styles.holder, overlayedWithButton && styles.holderWithButton),\n      onKeyDown: this._onDatePickerPopupKeyDown\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-frame', styles.frame)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-wrap', styles.wrap, showGoToToday && styles.goTodaySpacing)\n    }, isDayPickerVisible && React.createElement(CalendarDay, {\n      selectedDate: selectedDate,\n      navigatedDate: navigatedDayDate,\n      today: this.props.today,\n      onSelectDate: this._onSelectDate,\n      onNavigateDate: this._onNavigateDayDate,\n      onDismiss: this.props.onDismiss,\n      firstDayOfWeek: firstDayOfWeek,\n      dateRangeType: dateRangeType,\n      autoNavigateOnSelection: autoNavigateOnSelection,\n      strings: strings,\n      onHeaderSelect: onHeaderSelect,\n      navigationIcons: navigationIcons,\n      showWeekNumbers: this.props.showWeekNumbers,\n      firstWeekOfYear: this.props.firstWeekOfYear,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      showSixWeeksByDefault: this.props.showSixWeeksByDefault,\n      minDate: minDate,\n      maxDate: maxDate,\n      restrictedDates: restrictedDates,\n      workWeekDays: this.props.workWeekDays,\n      componentRef: this._dayPicker,\n      showCloseButton: showCloseButton,\n      allFocusable: allFocusable\n    }), isDayPickerVisible && isMonthPickerVisible && React.createElement(\"div\", {\n      className: styles.divider\n    }), isMonthPickerVisible && React.createElement(CalendarMonth, {\n      navigatedDate: navigatedMonthDate,\n      selectedDate: navigatedDayDate,\n      strings: strings,\n      onNavigateDate: this._onNavigateMonthDate,\n      today: this.props.today,\n      highlightCurrentMonth: highlightCurrentMonth,\n      highlightSelectedMonth: highlightSelectedMonth,\n      onHeaderSelect: onHeaderSelect,\n      navigationIcons: navigationIcons,\n      dateTimeFormatter: this.props.dateTimeFormatter,\n      minDate: minDate,\n      maxDate: maxDate,\n      componentRef: this._monthPicker,\n      yearPickerHidden: yearPickerHidden || showMonthPickerAsOverlay\n    }), showGoToToday && React.createElement(\"button\", {\n      role: \"button\",\n      className: css('ms-DatePicker-goToday js-goToday', styles.goToday, (_a = {}, _a[styles.goTodayInlineMonth] = isMonthPickerVisible, _a[styles.goToTodayIsDisabled] = !goTodayEnabled, _a)),\n      onClick: this._onGotoTodayClick,\n      onKeyDown: this._onGotoTodayKeyDown,\n      tabIndex: 0,\n      disabled: !goTodayEnabled,\n      type: \"button\"\n    }, strings.goToToday))))), React.createElement(FocusRects, null));\n  };\n  Calendar.prototype.focus = function () {\n    if (this.state.isDayPickerVisible && this._dayPicker.current) {\n      this._dayPicker.current.focus();\n    } else if (this.state.isMonthPickerVisible && this._monthPicker.current) {\n      this._monthPicker.current.focus();\n    }\n  };\n  Calendar.defaultProps = {\n    onSelectDate: undefined,\n    onDismiss: undefined,\n    isMonthPickerVisible: true,\n    isDayPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    value: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    dateRangeType: DateRangeType.Day,\n    autoNavigateOnSelection: false,\n    showGoToToday: true,\n    strings: null,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    navigationIcons: iconStrings,\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateTimeFormatter: dateTimeFormatterCallbacks,\n    showSixWeeksByDefault: false,\n    workWeekDays: defaultWorkWeekDays,\n    showCloseButton: false,\n    allFocusable: false\n  };\n  return Calendar;\n}(React.Component);\nexport { Calendar };","map":{"version":3,"sources":["components/Calendar/Calendar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ICalendar,\n  ICalendarProps,\n  ICalendarStrings,\n  ICalendarIconStrings,\n  ICalendarFormatDateCallbacks,\n} from './Calendar.types';\nimport { DayOfWeek, FirstWeekOfYear, DateRangeType } from '../../utilities/dateValues/DateValues';\nimport { CalendarDay, ICalendarDay } from './CalendarDay';\nimport { CalendarMonth, ICalendarMonth } from './CalendarMonth';\nimport { compareDates, getDateRangeArray } from '../../utilities/dateMath/DateMath';\nimport {\n  css,\n  elementContains,\n  KeyCodes,\n  getNativeProps,\n  divProperties,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport * as stylesImport from './Calendar.scss';\nconst styles: any = stylesImport;\n\nconst leftArrow = 'Up';\nconst rightArrow = 'Down';\nconst closeIcon = 'CalculatorMultiply';\nconst iconStrings: ICalendarIconStrings = {\n  leftNavigation: leftArrow,\n  rightNavigation: rightArrow,\n  closeIcon: closeIcon,\n};\nconst defaultWorkWeekDays: DayOfWeek[] = [\n  DayOfWeek.Monday,\n  DayOfWeek.Tuesday,\n  DayOfWeek.Wednesday,\n  DayOfWeek.Thursday,\n  DayOfWeek.Friday,\n];\n\nconst dateTimeFormatterCallbacks: ICalendarFormatDateCallbacks = {\n  formatMonthDayYear: (date: Date, strings: ICalendarStrings) =>\n    strings.months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear(),\n  formatMonthYear: (date: Date, strings: ICalendarStrings) =>\n    strings.months[date.getMonth()] + ' ' + date.getFullYear(),\n  formatDay: (date: Date) => date.getDate().toString(),\n  formatYear: (date: Date) => date.getFullYear().toString(),\n};\n\nexport interface ICalendarState {\n  /** The currently focused date in the day picker, but not necessarily selected */\n  navigatedDayDate?: Date;\n\n  /** The currently focused date in the month picker, but not necessarily selected */\n  navigatedMonthDate?: Date;\n\n  /** The currently selected date in the calendar */\n  selectedDate?: Date;\n\n  /** State used to show/hide month picker */\n  isMonthPickerVisible?: boolean;\n\n  /** State used to show/hide day picker */\n  isDayPickerVisible?: boolean;\n}\n\nexport class Calendar extends React.Component<ICalendarProps, ICalendarState> implements ICalendar {\n  public static defaultProps: ICalendarProps = {\n    onSelectDate: undefined,\n    onDismiss: undefined,\n    isMonthPickerVisible: true,\n    isDayPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    value: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    dateRangeType: DateRangeType.Day,\n    autoNavigateOnSelection: false,\n    showGoToToday: true,\n    strings: null,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    navigationIcons: iconStrings,\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateTimeFormatter: dateTimeFormatterCallbacks,\n    showSixWeeksByDefault: false,\n    workWeekDays: defaultWorkWeekDays,\n    showCloseButton: false,\n    allFocusable: false,\n  };\n\n  private _dayPicker = React.createRef<ICalendarDay>();\n  private _monthPicker = React.createRef<ICalendarMonth>();\n  private _hasFocus = false;\n\n  private _focusOnUpdate: boolean;\n\n  constructor(props: ICalendarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const currentDate = props.value && !isNaN(props.value.getTime()) ? props.value : props.today || new Date();\n\n    this.state = {\n      selectedDate: currentDate,\n      navigatedDayDate: currentDate,\n      navigatedMonthDate: currentDate,\n\n      /** When showMonthPickerAsOverlay is active it overrides isMonthPickerVisible/isDayPickerVisible props\n       (These props permanently set the visibility of their respective calendars). */\n      isMonthPickerVisible: this.props.showMonthPickerAsOverlay ? false : this.props.isMonthPickerVisible,\n      isDayPickerVisible: this.props.showMonthPickerAsOverlay ? true : this.props.isDayPickerVisible,\n    };\n\n    this._focusOnUpdate = false;\n  }\n\n  public UNSAFE_componentWillReceiveProps(nextProps: ICalendarProps): void {\n    const { autoNavigateOnSelection, value, today = new Date() } = nextProps;\n\n    // Make sure auto-navigation is supported for programmatic changes to selected date, i.e.,\n    // if selected date is updated via props, we may need to modify the navigated date\n    const overrideNavigatedDate = autoNavigateOnSelection && !compareDates(value!, this.props.value!);\n    if (overrideNavigatedDate) {\n      this.setState({\n        navigatedMonthDate: value,\n        navigatedDayDate: value,\n      });\n    }\n\n    this.setState({\n      selectedDate: value || today,\n    });\n  }\n\n  public componentDidUpdate(): void {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  }\n\n  public render(): JSX.Element {\n    const rootClass = 'ms-DatePicker';\n    const {\n      firstDayOfWeek,\n      dateRangeType,\n      strings,\n      showMonthPickerAsOverlay,\n      autoNavigateOnSelection,\n      showGoToToday,\n      highlightCurrentMonth,\n      highlightSelectedMonth,\n      navigationIcons,\n      minDate,\n      maxDate,\n      restrictedDates,\n      className,\n      showCloseButton,\n      allFocusable,\n      yearPickerHidden,\n      today,\n    } = this.props;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['value']);\n    const { selectedDate, navigatedDayDate, navigatedMonthDate, isMonthPickerVisible, isDayPickerVisible } = this.state;\n    const onHeaderSelect = showMonthPickerAsOverlay ? this._onHeaderSelect : undefined;\n    const monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n    const overlayedWithButton = showMonthPickerAsOverlay && showGoToToday;\n\n    let goTodayEnabled = showGoToToday;\n\n    if (goTodayEnabled && navigatedDayDate && navigatedMonthDate && today) {\n      goTodayEnabled =\n        navigatedDayDate.getFullYear() !== today.getFullYear() ||\n        navigatedDayDate.getMonth() !== today.getMonth() ||\n        navigatedMonthDate.getFullYear() !== today.getFullYear() ||\n        navigatedMonthDate.getMonth() !== today.getMonth();\n    }\n\n    return (\n      <div className={css(rootClass, styles.root, className)} role=\"application\">\n        <div\n          {...nativeProps}\n          onBlur={this._onBlur}\n          onFocus={this._onFocus}\n          className={css(\n            'ms-DatePicker-picker ms-DatePicker-picker--opened ms-DatePicker-picker--focused',\n            styles.picker,\n            styles.pickerIsOpened,\n            styles.pickerIsFocused,\n            isMonthPickerVisible && 'ms-DatePicker-monthPickerVisible ' + styles.monthPickerVisible,\n            isMonthPickerVisible && isDayPickerVisible && 'ms-DatePicker-calendarsInline ' + styles.calendarsInline,\n            monthPickerOnly && 'ms-DatePicker-monthPickerOnly ' + styles.monthPickerOnly,\n            showMonthPickerAsOverlay && 'ms-DatePicker-monthPickerAsOverlay ' + styles.monthPickerAsOverlay,\n          )}\n        >\n          <div\n            className={css(\n              'ms-DatePicker-holder ms-slideDownIn10',\n              styles.holder,\n              overlayedWithButton && styles.holderWithButton,\n            )}\n            onKeyDown={this._onDatePickerPopupKeyDown}\n          >\n            <div className={css('ms-DatePicker-frame', styles.frame)}>\n              <div className={css('ms-DatePicker-wrap', styles.wrap, showGoToToday && styles.goTodaySpacing)}>\n                {isDayPickerVisible && (\n                  <CalendarDay\n                    selectedDate={selectedDate!}\n                    navigatedDate={navigatedDayDate!}\n                    today={this.props.today}\n                    onSelectDate={this._onSelectDate}\n                    onNavigateDate={this._onNavigateDayDate}\n                    onDismiss={this.props.onDismiss}\n                    firstDayOfWeek={firstDayOfWeek!}\n                    dateRangeType={dateRangeType!}\n                    autoNavigateOnSelection={autoNavigateOnSelection!}\n                    strings={strings!}\n                    onHeaderSelect={onHeaderSelect}\n                    navigationIcons={navigationIcons!}\n                    showWeekNumbers={this.props.showWeekNumbers}\n                    firstWeekOfYear={this.props.firstWeekOfYear!}\n                    dateTimeFormatter={this.props.dateTimeFormatter!}\n                    showSixWeeksByDefault={this.props.showSixWeeksByDefault}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    restrictedDates={restrictedDates}\n                    workWeekDays={this.props.workWeekDays}\n                    componentRef={this._dayPicker}\n                    showCloseButton={showCloseButton}\n                    allFocusable={allFocusable}\n                  />\n                )}\n                {isDayPickerVisible && isMonthPickerVisible && <div className={styles.divider} />}\n                {isMonthPickerVisible && (\n                  <CalendarMonth\n                    navigatedDate={navigatedMonthDate!}\n                    selectedDate={navigatedDayDate!}\n                    strings={strings!}\n                    onNavigateDate={this._onNavigateMonthDate}\n                    today={this.props.today}\n                    highlightCurrentMonth={highlightCurrentMonth!}\n                    highlightSelectedMonth={highlightSelectedMonth!}\n                    onHeaderSelect={onHeaderSelect}\n                    navigationIcons={navigationIcons!}\n                    dateTimeFormatter={this.props.dateTimeFormatter!}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    componentRef={this._monthPicker}\n                    yearPickerHidden={yearPickerHidden || showMonthPickerAsOverlay}\n                  />\n                )}\n\n                {showGoToToday && (\n                  <button\n                    role=\"button\"\n                    className={css('ms-DatePicker-goToday js-goToday', styles.goToday, {\n                      [styles.goTodayInlineMonth]: isMonthPickerVisible,\n                      [styles.goToTodayIsDisabled]: !goTodayEnabled,\n                    })}\n                    onClick={this._onGotoTodayClick}\n                    onKeyDown={this._onGotoTodayKeyDown}\n                    tabIndex={0}\n                    disabled={!goTodayEnabled}\n                    type=\"button\"\n                  >\n                    {strings!.goToToday}\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public focus() {\n    if (this.state.isDayPickerVisible && this._dayPicker.current) {\n      this._dayPicker.current.focus();\n    } else if (this.state.isMonthPickerVisible && this._monthPicker.current) {\n      this._monthPicker.current.focus();\n    }\n  }\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>) => {\n    if (!elementContains(event.currentTarget, event.relatedTarget as HTMLElement)) {\n      this._hasFocus = false;\n      this.props.onBlur && this.props.onBlur(event);\n    }\n  };\n\n  private _onFocus = (event: React.FocusEvent<HTMLElement>) => {\n    if (!this._hasFocus) {\n      this._hasFocus = true;\n      this.props.onFocus && this.props.onFocus(event);\n    }\n  };\n\n  private _navigateDayPickerDay = (date: Date): void => {\n    this.setState({\n      navigatedDayDate: date,\n      navigatedMonthDate: date,\n    });\n  };\n\n  private _navigateMonthPickerDay = (date: Date): void => {\n    this.setState({\n      navigatedMonthDate: date,\n    });\n  };\n\n  private _onNavigateDayDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n    this._navigateDayPickerDay(date);\n    this._focusOnUpdate = focusOnNavigatedDay;\n  };\n\n  private _onNavigateMonthDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n    if (!focusOnNavigatedDay) {\n      this._navigateMonthPickerDay(date);\n      this._focusOnUpdate = focusOnNavigatedDay;\n      return;\n    }\n\n    const monthPickerOnly = !this.props.showMonthPickerAsOverlay && !this.props.isDayPickerVisible;\n\n    if (monthPickerOnly) {\n      this._onSelectDate(date);\n    }\n\n    this._navigateDayPickerDay(date);\n  };\n\n  private _onSelectDate = (date: Date, selectedDateRangeArray?: Date[]): void => {\n    const { onSelectDate } = this.props;\n\n    this.setState({\n      selectedDate: date,\n    });\n\n    if (onSelectDate) {\n      onSelectDate(date, selectedDateRangeArray);\n    }\n  };\n\n  private _onHeaderSelect = (focus: boolean): void => {\n    this.setState({\n      isDayPickerVisible: !this.state.isDayPickerVisible,\n      isMonthPickerVisible: !this.state.isMonthPickerVisible,\n    });\n\n    if (focus) {\n      this._focusOnUpdate = true;\n    }\n  };\n\n  private _onGotoToday = (): void => {\n    const { dateRangeType, firstDayOfWeek, today, workWeekDays, selectDateOnClick } = this.props;\n\n    if (selectDateOnClick) {\n      // When using Defaultprops, TypeScript doesn't know that React is going to inject defaults\n      // so we use exclamation mark as a hint to the type checker (see link below)\n      // https://decembersoft.com/posts/error-ts2532-optional-react-component-props-in-typescript/\n      const dates = getDateRangeArray(today!, dateRangeType!, firstDayOfWeek!, workWeekDays!);\n      this._onSelectDate(today!, dates);\n    }\n\n    this._navigateDayPickerDay(today!);\n    this._focusOnUpdate = true;\n  };\n\n  private _onGotoTodayClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._onGotoToday();\n  };\n\n  private _onGotoTodayKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      this._onGotoToday();\n    }\n  };\n\n  private _onDatePickerPopupKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.backspace:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.escape:\n        this._handleEscKey(ev);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  private _handleEscKey = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this.props.onDismiss) {\n      this.props.onDismiss();\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}