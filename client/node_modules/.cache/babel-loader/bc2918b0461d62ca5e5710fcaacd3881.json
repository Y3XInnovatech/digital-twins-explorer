{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nexport var TextView = function (props) {\n  if (React.Children.count(props.children) === 0) {\n    return null;\n  }\n  var block = props.block,\n    className = props.className,\n    _a = props.as,\n    RootType = _a === void 0 ? 'span' : _a,\n    variant = props.variant,\n    nowrap = props.nowrap,\n    rest = __rest(props, [\"block\", \"className\", \"as\", \"variant\", \"nowrap\"]);\n  var Slots = getSlots(props, {\n    root: RootType\n  });\n  return withSlots(Slots.root, __assign({}, getNativeProps(rest, htmlElementProperties)));\n};","map":{"version":3,"sources":["components/Text/Text.view.tsx"],"names":[],"mappings":";AAAA;AACA;AACA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,SAAS,EAAE,QAAQ,QAAQ,kBAAkB;AACtD,SAAS,cAAc,EAAE,qBAAqB,QAAQ,iBAAiB;AAGvE,OAAO,IAAM,QAAQ,GAA2B,SAAA,CAAA,KAAK,EAAA;EACnD,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;IAC9C,OAAO,IAAI;EACZ;EAEO,IAAA,KAAA,GAAA,KAAA,CAAA,KAAK;IAAE,SAAA,GAAA,KAAA,CAAA,SAAS;IAAE,EAAA,GAAA,KAAA,CAAA,EAAqB;IAArB,QAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,MAAA,GAAA,EAAqB;IAAE,OAAA,GAAA,KAAA,CAAA,OAAO;IAAE,MAAA,GAAA,KAAA,CAAA,MAAM;IAAE,IAAA,GAAA,MAAA,CAAA,KAAA,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,IAAA,EAAA,SAAA,EAAA,QAAA,CAAA,CAAO;EAEzE,IAAM,KAAK,GAAG,QAAQ,CAAyB,KAAK,EAAE;IACpD,IAAI,EAAE;GACP,CAAC;EAEF,OAAO,SAAA,CAAC,KAAK,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,cAAc,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAA,CAAI;AACxE,CAAC","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { ITextComponent, ITextProps, ITextSlots } from './Text.types';\n\nexport const TextView: ITextComponent['view'] = props => {\n  if (React.Children.count(props.children) === 0) {\n    return null;\n  }\n\n  const { block, className, as: RootType = 'span', variant, nowrap, ...rest } = props;\n\n  const Slots = getSlots<ITextProps, ITextSlots>(props, {\n    root: RootType,\n  });\n\n  return <Slots.root {...getNativeProps(rest, htmlElementProperties)} />;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}