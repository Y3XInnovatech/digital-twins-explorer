{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\nexport function logPolicy(loggingOptions) {\n  if (loggingOptions === void 0) {\n    loggingOptions = {};\n  }\n  return {\n    create: function (nextPolicy, options) {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    }\n  };\n}\nvar LogPolicy = /** @class */function (_super) {\n  __extends(LogPolicy, _super);\n  function LogPolicy(nextPolicy, options, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.logger,\n      logger = _c === void 0 ? coreLogger.info : _c,\n      _d = _b.allowedHeaderNames,\n      allowedHeaderNames = _d === void 0 ? [] : _d,\n      _e = _b.allowedQueryParameters,\n      allowedQueryParameters = _e === void 0 ? [] : _e;\n    var _this = _super.call(this, nextPolicy, options) || this;\n    _this.logger = logger;\n    _this.sanitizer = new Sanitizer({\n      allowedHeaderNames: allowedHeaderNames,\n      allowedQueryParameters: allowedQueryParameters\n    });\n    return _this;\n  }\n  Object.defineProperty(LogPolicy.prototype, \"allowedHeaderNames\", {\n    /**\n     * Header names whose values will be logged when logging is enabled. Defaults to\n     * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n     * specified in this field will be added to that list.  Any other values will\n     * be written to logs as \"REDACTED\".\n     * @deprecated Pass these into the constructor instead.\n     */\n    get: function () {\n      return this.sanitizer.allowedHeaderNames;\n    },\n    /**\n     * Header names whose values will be logged when logging is enabled. Defaults to\n     * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n     * specified in this field will be added to that list.  Any other values will\n     * be written to logs as \"REDACTED\".\n     * @deprecated Pass these into the constructor instead.\n     */\n    set: function (allowedHeaderNames) {\n      this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LogPolicy.prototype, \"allowedQueryParameters\", {\n    /**\n     * Query string names whose values will be logged when logging is enabled. By default no\n     * query string values are logged.\n     * @deprecated Pass these into the constructor instead.\n     */\n    get: function () {\n      return this.sanitizer.allowedQueryParameters;\n    },\n    /**\n     * Query string names whose values will be logged when logging is enabled. By default no\n     * query string values are logged.\n     * @deprecated Pass these into the constructor instead.\n     */\n    set: function (allowedQueryParameters) {\n      this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  LogPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then(function (response) {\n      return _this.logResponse(response);\n    });\n  };\n  LogPolicy.prototype.logRequest = function (request) {\n    this.logger(\"Request: \" + this.sanitizer.sanitize(request));\n  };\n  LogPolicy.prototype.logResponse = function (response) {\n    this.logger(\"Response status code: \" + response.status);\n    this.logger(\"Headers: \" + this.sanitizer.sanitize(response.headers));\n    return response;\n  };\n  return LogPolicy;\n}(BaseRequestPolicy);\nexport { LogPolicy };","map":{"version":3,"sources":["../../../src/policies/logPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\nimport { Debugger } from \"@azure/logger\";\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n\n  /**\n   * The Debugger (logger) instance to use for writing pipeline logs.\n   */\n  logger?: Debugger;\n}\n\nexport function logPolicy(loggingOptions: LogPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    }\n  };\n}\n\nexport class LogPolicy extends BaseRequestPolicy {\n  logger: Debugger;\n  sanitizer: Sanitizer;\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedHeaderNames(): Set<string> {\n    return this.sanitizer.allowedHeaderNames;\n  }\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedHeaderNames(allowedHeaderNames: Set<string>) {\n    this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedQueryParameters(): Set<string> {\n    return this.sanitizer.allowedQueryParameters;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedQueryParameters(allowedQueryParameters: Set<string>) {\n    this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n  }\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    {\n      logger = coreLogger.info,\n      allowedHeaderNames = [],\n      allowedQueryParameters = []\n    }: LogPolicyOptions = {}\n  ) {\n    super(nextPolicy, options);\n    this.logger = logger;\n    this.sanitizer = new Sanitizer({ allowedHeaderNames, allowedQueryParameters });\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then((response) => this.logResponse(response));\n  }\n\n  private logRequest(request: WebResourceLike): void {\n    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);\n  }\n\n  private logResponse(response: HttpOperationResponse): HttpOperationResponse {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);\n    return response;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}