{"ast":null,"code":"import { HighContrastSelector } from './CommonStyles';\nimport { IsFocusVisibleClassName } from '@uifabric/utilities';\nimport { ZIndexes } from './zIndexes';\nexport function getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly) {\n  if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n    return _getFocusStyleInternal(theme, {\n      inset: insetOrOptions,\n      position: position,\n      highContrastStyle: highContrastStyle,\n      borderColor: borderColor,\n      outlineColor: outlineColor,\n      isFocusedOnly: isFocusedOnly\n    });\n  } else {\n    return _getFocusStyleInternal(theme, insetOrOptions);\n  }\n}\nfunction _getFocusStyleInternal(theme, options) {\n  var _a, _b;\n  if (options === void 0) {\n    options = {};\n  }\n  var _c = options.inset,\n    inset = _c === void 0 ? 0 : _c,\n    _d = options.width,\n    width = _d === void 0 ? 1 : _d,\n    _e = options.position,\n    position = _e === void 0 ? 'relative' : _e,\n    highContrastStyle = options.highContrastStyle,\n    _f = options.borderColor,\n    borderColor = _f === void 0 ? theme.palette.white : _f,\n    _g = options.outlineColor,\n    outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g,\n    _h = options.isFocusedOnly,\n    isFocusedOnly = _h === void 0 ? true : _h;\n  return {\n    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n    outline: 'transparent',\n    // Requirement because pseudo-element is absolutely positioned.\n    position: position,\n    selectors: (_a = {\n      // Clear the focus border in Firefox.\n      // Reference: http://stackoverflow.com/a/199319/1436671\n      '::-moz-focus-inner': {\n        border: '0'\n      }\n    },\n    // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n    // create a border.\n    _a[\".\" + IsFocusVisibleClassName + \" &\" + (isFocusedOnly ? ':focus' : '') + \":after\"] = {\n      content: '\"\"',\n      position: 'absolute',\n      left: inset + 1,\n      top: inset + 1,\n      bottom: inset + 1,\n      right: inset + 1,\n      border: width + \"px solid \" + borderColor,\n      outline: width + \"px solid \" + outlineColor,\n      zIndex: ZIndexes.FocusStyle,\n      selectors: (_b = {}, _b[HighContrastSelector] = highContrastStyle, _b)\n    }, _a)\n  };\n}\n/**\n * Generates style to clear browser specific focus styles.\n */\nexport function focusClear() {\n  return {\n    selectors: {\n      '&::-moz-focus-inner': {\n        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n        border: 0\n      },\n      '&': {\n        // Clear browser specific focus styles and use transparent as placeholder for focus style\n        outline: 'transparent'\n      }\n    }\n  };\n}\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\nexport function getFocusOutlineStyle(theme, inset, width, color) {\n  var _a;\n  if (inset === void 0) {\n    inset = 0;\n  }\n  if (width === void 0) {\n    width = 1;\n  }\n  return {\n    selectors: (_a = {}, _a[\":global(\" + IsFocusVisibleClassName + \") &:focus\"] = {\n      outline: width + \" solid \" + (color || theme.palette.neutralSecondary),\n      outlineOffset: -inset + \"px\"\n    }, _a)\n  };\n}\n/**\n * Generates text input border styles on focus.\n *\n * @param borderColor - Color of the border.\n * @param borderRadius - Radius of the border.\n * @param borderType - Type of the border.\n * @param borderPosition - Position of the border relative to the input element (default to -1\n * as it's the most common border width of the input element)\n * @returns The style object.\n */\nexport var getInputFocusStyle = function (borderColor, borderRadius, borderType, borderPosition) {\n  var _a, _b, _c;\n  if (borderType === void 0) {\n    borderType = 'border';\n  }\n  if (borderPosition === void 0) {\n    borderPosition = -1;\n  }\n  var isBorderBottom = borderType === 'borderBottom';\n  return {\n    borderColor: borderColor,\n    selectors: {\n      ':after': (_a = {\n        pointerEvents: 'none',\n        content: \"''\",\n        position: 'absolute',\n        left: isBorderBottom ? 0 : borderPosition,\n        top: borderPosition,\n        bottom: borderPosition,\n        right: isBorderBottom ? 0 : borderPosition\n      }, _a[borderType] = \"2px solid \" + borderColor, _a.borderRadius = borderRadius, _a.width = borderType === 'borderBottom' ? '100%' : undefined, _a.selectors = (_b = {}, _b[HighContrastSelector] = (_c = {}, _c[borderType === 'border' ? 'borderColor' : 'borderBottomColor'] = 'Highlight', _c), _b), _a)\n    }\n  };\n};","map":{"version":3,"sources":["styles/getFocusStyle.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRawStyle } from '@uifabric/merge-styles';\nimport { IGetFocusStylesOptions, ITheme } from '../interfaces/index';\nimport { HighContrastSelector } from './CommonStyles';\nimport { IsFocusVisibleClassName } from '@uifabric/utilities';\nimport { ZIndexes } from './zIndexes';\n\n/**\n * Generates a focus style which can be used to define an :after focus border.\n *\n * @param theme - The theme object to use.\n * @param options - Options to customize the focus border.\n * @returns The style object.\n */\nexport function getFocusStyle(theme: ITheme, options?: IGetFocusStylesOptions): IRawStyle;\n/**\n * Generates a focus style which can be used to define an :after focus border.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border.\n * @param position - The positioning applied to the container. Must\n * be 'relative' or 'absolute' so that the focus border can live around it.\n * @param highContrastStyle - Style for high contrast mode.\n * @param borderColor - Color of the border.\n * @param outlineColor - Color of the outline.\n * @param isFocusedOnly - If the styles should apply on focus or not.\n * @returns The style object.\n * @deprecated Use the object parameter version instead.\n */\nexport function getFocusStyle(\n  theme: ITheme,\n  inset?: number,\n  position?: 'relative' | 'absolute',\n  highContrastStyle?: IRawStyle | undefined,\n  borderColor?: string,\n  outlineColor?: string,\n  isFocusedOnly?: boolean,\n): IRawStyle;\nexport function getFocusStyle(\n  theme: ITheme,\n  insetOrOptions?: number | IGetFocusStylesOptions,\n  position?: 'relative' | 'absolute',\n  highContrastStyle?: IRawStyle,\n  borderColor?: string,\n  outlineColor?: string,\n  isFocusedOnly?: boolean,\n): IRawStyle {\n  if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n    return _getFocusStyleInternal(theme, {\n      inset: insetOrOptions,\n      position,\n      highContrastStyle,\n      borderColor,\n      outlineColor,\n      isFocusedOnly,\n    });\n  } else {\n    return _getFocusStyleInternal(theme, insetOrOptions);\n  }\n}\n\nfunction _getFocusStyleInternal(theme: ITheme, options: IGetFocusStylesOptions = {}): IRawStyle {\n  const {\n    inset = 0,\n    width = 1,\n    position = 'relative',\n    highContrastStyle,\n    borderColor = theme.palette.white,\n    outlineColor = theme.palette.neutralSecondary,\n    isFocusedOnly = true,\n  } = options;\n\n  return {\n    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n    outline: 'transparent',\n    // Requirement because pseudo-element is absolutely positioned.\n    position,\n\n    selectors: {\n      // Clear the focus border in Firefox.\n      // Reference: http://stackoverflow.com/a/199319/1436671\n      '::-moz-focus-inner': {\n        border: '0',\n      },\n\n      // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n      // create a border.\n      [`.${IsFocusVisibleClassName} &${isFocusedOnly ? ':focus' : ''}:after`]: {\n        content: '\"\"',\n        position: 'absolute',\n        left: inset + 1,\n        top: inset + 1,\n        bottom: inset + 1,\n        right: inset + 1,\n        border: `${width}px solid ${borderColor}`,\n        outline: `${width}px solid ${outlineColor}`,\n        zIndex: ZIndexes.FocusStyle,\n        selectors: {\n          [HighContrastSelector]: highContrastStyle,\n        },\n      },\n    },\n  };\n}\n\n/**\n * Generates style to clear browser specific focus styles.\n */\nexport function focusClear(): IRawStyle {\n  return {\n    selectors: {\n      '&::-moz-focus-inner': {\n        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n        border: 0,\n      },\n      '&': {\n        // Clear browser specific focus styles and use transparent as placeholder for focus style\n        outline: 'transparent',\n      },\n    },\n  };\n}\n\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\nexport function getFocusOutlineStyle(theme: ITheme, inset: number = 0, width: number = 1, color?: string): IRawStyle {\n  return {\n    selectors: {\n      [`:global(${IsFocusVisibleClassName}) &:focus`]: {\n        outline: `${width} solid ${color || theme.palette.neutralSecondary}`,\n        outlineOffset: `${-inset}px`,\n      },\n    },\n  };\n}\n\n/**\n * Generates text input border styles on focus.\n *\n * @param borderColor - Color of the border.\n * @param borderRadius - Radius of the border.\n * @param borderType - Type of the border.\n * @param borderPosition - Position of the border relative to the input element (default to -1\n * as it's the most common border width of the input element)\n * @returns The style object.\n */\nexport const getInputFocusStyle = (\n  borderColor: string,\n  borderRadius: string | number,\n  borderType: 'border' | 'borderBottom' = 'border',\n  borderPosition: number = -1,\n): IRawStyle => {\n  const isBorderBottom = borderType === 'borderBottom';\n\n  return {\n    borderColor,\n    selectors: {\n      ':after': {\n        pointerEvents: 'none',\n        content: \"''\",\n        position: 'absolute',\n        left: isBorderBottom ? 0 : borderPosition,\n        top: borderPosition,\n        bottom: borderPosition,\n        right: isBorderBottom ? 0 : borderPosition,\n        [borderType]: `2px solid ${borderColor}`,\n        borderRadius,\n        width: borderType === 'borderBottom' ? '100%' : undefined,\n        selectors: {\n          [HighContrastSelector]: {\n            [borderType === 'border' ? 'borderColor' : 'borderBottomColor']: 'Highlight',\n          },\n        },\n      },\n    },\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}