{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, initializeComponentRef } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nvar styles = stylesImport;\nvar BaseExtendedPicker = /** @class */function (_super) {\n  __extends(BaseExtendedPicker, _super);\n  function BaseExtendedPicker(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n    _this.floatingPicker = React.createRef();\n    _this.selectedItemsList = React.createRef();\n    _this.root = React.createRef();\n    _this.input = React.createRef();\n    _this.onSelectionChange = function () {\n      _this.forceUpdate();\n    };\n    _this.onInputChange = function (value, composing) {\n      // We don't want to update the picker's suggestions when the input is still being composed\n      if (!composing) {\n        _this.setState({\n          queryString: value\n        });\n        if (_this.floatingPicker.current) {\n          _this.floatingPicker.current.onQueryStringChanged(value);\n        }\n      }\n    };\n    _this.onInputFocus = function (ev) {\n      if (_this.selectedItemsList.current) {\n        _this.selectedItemsList.current.unselectAll();\n      }\n      if (_this.props.inputProps && _this.props.inputProps.onFocus) {\n        _this.props.inputProps.onFocus(ev);\n      }\n    };\n    _this.onInputClick = function (ev) {\n      if (_this.selectedItemsList.current) {\n        _this.selectedItemsList.current.unselectAll();\n      }\n      if (_this.floatingPicker.current && _this.inputElement) {\n        // Update the value if the input value is empty or is different than the current inputText from the floatingPicker\n        var shoudUpdateValue = _this.inputElement.value === '' || _this.inputElement.value !== _this.floatingPicker.current.inputText;\n        _this.floatingPicker.current.showPicker(shoudUpdateValue);\n      }\n    };\n    // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n    // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n    _this.onBackspace = function (ev) {\n      if (ev.which !== KeyCodes.backspace) {\n        return;\n      }\n      if (_this.selectedItemsList.current && _this.items.length) {\n        if (_this.input.current && !_this.input.current.isValueSelected && _this.input.current.inputElement === document.activeElement && _this.input.current.cursorLocation === 0) {\n          if (_this.floatingPicker.current) {\n            _this.floatingPicker.current.hidePicker();\n          }\n          ev.preventDefault();\n          _this.selectedItemsList.current.removeItemAt(_this.items.length - 1);\n          _this._onSelectedItemsChanged();\n        } else if (_this.selectedItemsList.current.hasSelectedItems()) {\n          if (_this.floatingPicker.current) {\n            _this.floatingPicker.current.hidePicker();\n          }\n          ev.preventDefault();\n          _this.selectedItemsList.current.removeSelectedItems();\n          _this._onSelectedItemsChanged();\n        }\n      }\n    };\n    _this.onCopy = function (ev) {\n      if (_this.selectedItemsList.current) {\n        // Pass it down into the selected items list\n        _this.selectedItemsList.current.onCopy(ev);\n      }\n    };\n    _this.onPaste = function (ev) {\n      if (_this.props.onPaste) {\n        var inputText = ev.clipboardData.getData('Text');\n        ev.preventDefault();\n        _this.props.onPaste(inputText);\n      }\n    };\n    _this._onSuggestionSelected = function (item) {\n      var currentRenderedQueryString = _this.props.currentRenderedQueryString;\n      var queryString = _this.state.queryString;\n      if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n        var processedItem = _this.props.onItemSelected ? _this.props.onItemSelected(item) : item;\n        if (processedItem === null) {\n          return;\n        }\n        var processedItemObject = processedItem;\n        var processedItemPromiseLike = processedItem;\n        var newItem_1;\n        if (processedItemPromiseLike && processedItemPromiseLike.then) {\n          processedItemPromiseLike.then(function (resolvedProcessedItem) {\n            newItem_1 = resolvedProcessedItem;\n            _this._addProcessedItem(newItem_1);\n          });\n        } else {\n          newItem_1 = processedItemObject;\n          _this._addProcessedItem(newItem_1);\n        }\n      }\n    };\n    _this._onSelectedItemsChanged = function () {\n      _this.focus();\n    };\n    /**\n     * The floating picker is the source of truth for if the menu has been opened or not.\n     *\n     * Because this isn't tracked inside the state of this component, we need to\n     * force an update here to keep the rendered output that depends on the picker being open\n     * in sync with the state\n     *\n     * Called when the suggestions is shown or closed\n     */\n    _this._onSuggestionsShownOrHidden = function () {\n      _this.forceUpdate();\n    };\n    initializeComponentRef(_this);\n    _this.selection = new Selection({\n      onSelectionChanged: function () {\n        return _this.onSelectionChange();\n      }\n    });\n    _this.state = {\n      queryString: '',\n      // TODO: determine whether this can be removed\n      // eslint-disable-next-line react/no-unused-state\n      suggestionItems: _this.props.suggestionItems ? _this.props.suggestionItems : null,\n      selectedItems: _this.props.defaultSelectedItems ? _this.props.defaultSelectedItems : _this.props.selectedItems ? _this.props.selectedItems : null\n    };\n    _this.floatingPickerProps = _this.props.floatingPickerProps;\n    _this.selectedItemsListProps = _this.props.selectedItemsListProps;\n    return _this;\n  }\n  Object.defineProperty(BaseExtendedPicker.prototype, \"items\", {\n    get: function () {\n      var _a, _b, _c;\n      return _c = (_a = this.state.selectedItems, _a !== null && _a !== void 0 ? _a : (_b = this.selectedItemsList.current) === null || _b === void 0 ? void 0 : _b.items), _c !== null && _c !== void 0 ? _c : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BaseExtendedPicker.prototype.componentDidMount = function () {\n    this.forceUpdate();\n  };\n  BaseExtendedPicker.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.floatingPickerProps) {\n      this.floatingPickerProps = newProps.floatingPickerProps;\n    }\n    if (newProps.selectedItemsListProps) {\n      this.selectedItemsListProps = newProps.selectedItemsListProps;\n    }\n    if (newProps.selectedItems) {\n      this.setState({\n        selectedItems: newProps.selectedItems\n      });\n    }\n  };\n  BaseExtendedPicker.prototype.focus = function () {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  };\n  BaseExtendedPicker.prototype.clearInput = function () {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  };\n  Object.defineProperty(BaseExtendedPicker.prototype, \"inputElement\", {\n    get: function () {\n      return this.input.current && this.input.current.inputElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseExtendedPicker.prototype, \"highlightedItems\", {\n    get: function () {\n      return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BaseExtendedPicker.prototype.render = function () {\n    var _a = this.props,\n      className = _a.className,\n      inputProps = _a.inputProps,\n      disabled = _a.disabled,\n      focusZoneProps = _a.focusZoneProps;\n    var activeDescendant = this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1 ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex : undefined;\n    var isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n    return React.createElement(\"div\", {\n      ref: this.root,\n      className: css('ms-BasePicker ms-BaseExtendedPicker', className ? className : ''),\n      onKeyDown: this.onBackspace,\n      onCopy: this.onCopy\n    }, React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.bidirectional\n    }, focusZoneProps), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.multiple\n    }, React.createElement(\"div\", {\n      className: css('ms-BasePicker-text', styles.pickerText),\n      role: 'list'\n    }, this.props.headerComponent, this.renderSelectedItemsList(), this.canAddItems() && React.createElement(Autofill, __assign({}, inputProps, {\n      className: css('ms-BasePicker-input', styles.pickerInput),\n      ref: this.input,\n      onFocus: this.onInputFocus,\n      onClick: this.onInputClick,\n      onInputValueChange: this.onInputChange,\n      \"aria-activedescendant\": activeDescendant,\n      \"aria-owns\": isExpanded ? 'suggestion-list' : undefined,\n      \"aria-expanded\": isExpanded,\n      \"aria-haspopup\": \"true\",\n      role: \"combobox\",\n      disabled: disabled,\n      onPaste: this.onPaste\n    }))))), this.renderFloatingPicker());\n  };\n  BaseExtendedPicker.prototype.canAddItems = function () {\n    var itemLimit = this.props.itemLimit;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  };\n  BaseExtendedPicker.prototype.renderFloatingPicker = function () {\n    var FloatingPicker = this.props.onRenderFloatingPicker;\n    return React.createElement(FloatingPicker, __assign({\n      componentRef: this.floatingPicker,\n      onChange: this._onSuggestionSelected,\n      onSuggestionsHidden: this._onSuggestionsShownOrHidden,\n      onSuggestionsShown: this._onSuggestionsShownOrHidden,\n      inputElement: this.input.current ? this.input.current.inputElement : undefined,\n      selectedItems: this.items,\n      suggestionItems: this.props.suggestionItems ? this.props.suggestionItems : undefined\n    }, this.floatingPickerProps));\n  };\n  BaseExtendedPicker.prototype.renderSelectedItemsList = function () {\n    var SelectedItems = this.props.onRenderSelectedItems;\n    return React.createElement(SelectedItems, __assign({\n      componentRef: this.selectedItemsList,\n      selection: this.selection,\n      selectedItems: this.props.selectedItems ? this.props.selectedItems : undefined,\n      onItemsDeleted: this.props.selectedItems ? this.props.onItemsRemoved : undefined\n    }, this.selectedItemsListProps));\n  };\n  BaseExtendedPicker.prototype._addProcessedItem = function (newItem) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n    this.focus();\n  };\n  return BaseExtendedPicker;\n}(React.Component);\nexport { BaseExtendedPicker };","map":{"version":3,"sources":["components/ExtendedPicker/BaseExtendedPicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, initializeComponentRef } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport { IInputProps } from '../../Pickers';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { IBaseExtendedPickerProps, IBaseExtendedPicker } from './BaseExtendedPicker.types';\nimport { IBaseFloatingPickerProps, BaseFloatingPicker } from '../../FloatingPicker';\nimport { BaseSelectedItemsList, IBaseSelectedItemsListProps } from '../../SelectedItemsList';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nconst styles: any = stylesImport;\n\nexport interface IBaseExtendedPickerState<T> {\n  queryString: string | null;\n  selectedItems: T[] | null;\n  suggestionItems: T[] | null;\n}\n\nexport class BaseExtendedPicker<T, P extends IBaseExtendedPickerProps<T>>\n  extends React.Component<P, IBaseExtendedPickerState<T>>\n  implements IBaseExtendedPicker<T> {\n  public floatingPicker = React.createRef<BaseFloatingPicker<T, IBaseFloatingPickerProps<T>>>();\n  public selectedItemsList = React.createRef<BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>>>();\n\n  protected root = React.createRef<HTMLDivElement>();\n  protected input = React.createRef<Autofill>();\n  protected selection: Selection;\n  protected floatingPickerProps: IBaseFloatingPickerProps<T>;\n  protected selectedItemsListProps: IBaseSelectedItemsListProps<T>;\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    this.selection = new Selection({ onSelectionChanged: () => this.onSelectionChange() });\n\n    this.state = {\n      queryString: '',\n      // TODO: determine whether this can be removed\n      // eslint-disable-next-line react/no-unused-state\n      suggestionItems: this.props.suggestionItems ? (this.props.suggestionItems as T[]) : null,\n      selectedItems: this.props.defaultSelectedItems\n        ? (this.props.defaultSelectedItems as T[])\n        : this.props.selectedItems\n        ? (this.props.selectedItems as T[])\n        : null,\n    };\n\n    this.floatingPickerProps = this.props.floatingPickerProps;\n    this.selectedItemsListProps = this.props.selectedItemsListProps;\n  }\n\n  public get items(): any {\n    return this.state.selectedItems ?? this.selectedItemsList.current?.items ?? null;\n  }\n\n  public componentDidMount(): void {\n    this.forceUpdate();\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: P): void {\n    if (newProps.floatingPickerProps) {\n      this.floatingPickerProps = newProps.floatingPickerProps;\n    }\n\n    if (newProps.selectedItemsListProps) {\n      this.selectedItemsListProps = newProps.selectedItemsListProps;\n    }\n\n    if (newProps.selectedItems) {\n      this.setState({ selectedItems: newProps.selectedItems });\n    }\n  }\n\n  public focus(): void {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public clearInput(): void {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  }\n\n  public get inputElement(): HTMLInputElement | null {\n    return this.input.current && this.input.current.inputElement;\n  }\n\n  public get highlightedItems(): T[] {\n    return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n  }\n\n  public render(): JSX.Element {\n    const { className, inputProps, disabled, focusZoneProps } = this.props;\n    const activeDescendant =\n      this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1\n        ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex\n        : undefined;\n    const isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n\n    return (\n      <div\n        ref={this.root}\n        className={css('ms-BasePicker ms-BaseExtendedPicker', className ? className : '')}\n        onKeyDown={this.onBackspace}\n        onCopy={this.onCopy}\n      >\n        <FocusZone direction={FocusZoneDirection.bidirectional} {...focusZoneProps}>\n          <SelectionZone selection={this.selection} selectionMode={SelectionMode.multiple}>\n            <div className={css('ms-BasePicker-text', styles.pickerText)} role={'list'}>\n              {this.props.headerComponent}\n              {this.renderSelectedItemsList()}\n              {this.canAddItems() && (\n                <Autofill\n                  {...(inputProps as IInputProps)}\n                  className={css('ms-BasePicker-input', styles.pickerInput)}\n                  ref={this.input}\n                  onFocus={this.onInputFocus}\n                  onClick={this.onInputClick}\n                  onInputValueChange={this.onInputChange}\n                  aria-activedescendant={activeDescendant}\n                  aria-owns={isExpanded ? 'suggestion-list' : undefined}\n                  aria-expanded={isExpanded}\n                  aria-haspopup=\"true\"\n                  role=\"combobox\"\n                  disabled={disabled}\n                  onPaste={this.onPaste}\n                />\n              )}\n            </div>\n          </SelectionZone>\n        </FocusZone>\n        {this.renderFloatingPicker()}\n      </div>\n    );\n  }\n\n  protected onSelectionChange = (): void => {\n    this.forceUpdate();\n  };\n\n  protected canAddItems(): boolean {\n    const { itemLimit } = this.props;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  }\n\n  protected renderFloatingPicker(): JSX.Element {\n    const FloatingPicker: React.ComponentType<IBaseFloatingPickerProps<T>> = this.props.onRenderFloatingPicker;\n    return (\n      <FloatingPicker\n        componentRef={this.floatingPicker}\n        onChange={this._onSuggestionSelected}\n        onSuggestionsHidden={this._onSuggestionsShownOrHidden}\n        onSuggestionsShown={this._onSuggestionsShownOrHidden}\n        inputElement={this.input.current ? this.input.current.inputElement : undefined}\n        selectedItems={this.items}\n        suggestionItems={this.props.suggestionItems ? this.props.suggestionItems : undefined}\n        {...this.floatingPickerProps}\n      />\n    );\n  }\n\n  protected renderSelectedItemsList(): JSX.Element {\n    const SelectedItems: React.ComponentType<IBaseSelectedItemsListProps<T>> = this.props.onRenderSelectedItems;\n    return (\n      <SelectedItems\n        componentRef={this.selectedItemsList}\n        selection={this.selection}\n        selectedItems={this.props.selectedItems ? this.props.selectedItems : undefined}\n        onItemsDeleted={this.props.selectedItems ? this.props.onItemsRemoved : undefined}\n        {...this.selectedItemsListProps}\n      />\n    );\n  }\n\n  protected onInputChange = (value: string, composing?: boolean): void => {\n    // We don't want to update the picker's suggestions when the input is still being composed\n    if (!composing) {\n      this.setState({ queryString: value });\n      if (this.floatingPicker.current) {\n        this.floatingPicker.current.onQueryStringChanged(value);\n      }\n    }\n  };\n\n  protected onInputFocus = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.props.inputProps && this.props.inputProps.onFocus) {\n      this.props.inputProps.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  protected onInputClick = (ev: React.MouseEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.floatingPicker.current && this.inputElement) {\n      // Update the value if the input value is empty or is different than the current inputText from the floatingPicker\n      const shoudUpdateValue =\n        this.inputElement.value === '' || this.inputElement.value !== this.floatingPicker.current.inputText;\n      this.floatingPicker.current.showPicker(shoudUpdateValue);\n    }\n  };\n\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n  protected onBackspace = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which !== KeyCodes.backspace) {\n      return;\n    }\n\n    if (this.selectedItemsList.current && this.items.length) {\n      if (\n        this.input.current &&\n        !this.input.current.isValueSelected &&\n        this.input.current.inputElement === document.activeElement &&\n        (this.input.current as Autofill).cursorLocation === 0\n      ) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeItemAt(this.items.length - 1);\n        this._onSelectedItemsChanged();\n      } else if (this.selectedItemsList.current.hasSelectedItems()) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeSelectedItems();\n        this._onSelectedItemsChanged();\n      }\n    }\n  };\n\n  protected onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\n    if (this.selectedItemsList.current) {\n      // Pass it down into the selected items list\n      this.selectedItemsList.current.onCopy(ev);\n    }\n  };\n\n  protected onPaste = (ev: React.ClipboardEvent<Autofill | HTMLInputElement>): void => {\n    if (this.props.onPaste) {\n      const inputText = ev.clipboardData.getData('Text');\n      ev.preventDefault();\n      this.props.onPaste(inputText);\n    }\n  };\n\n  protected _onSuggestionSelected = (item: T): void => {\n    const currentRenderedQueryString = this.props.currentRenderedQueryString;\n    const queryString = this.state.queryString;\n    if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n      const processedItem: T | PromiseLike<T> | null = this.props.onItemSelected\n        ? (this.props.onItemSelected as any)(item)\n        : item;\n\n      if (processedItem === null) {\n        return;\n      }\n\n      const processedItemObject: T = processedItem as T;\n      const processedItemPromiseLike: PromiseLike<T> = processedItem as PromiseLike<T>;\n\n      let newItem: T;\n      if (processedItemPromiseLike && processedItemPromiseLike.then) {\n        processedItemPromiseLike.then((resolvedProcessedItem: T) => {\n          newItem = resolvedProcessedItem;\n          this._addProcessedItem(newItem);\n        });\n      } else {\n        newItem = processedItemObject;\n        this._addProcessedItem(newItem);\n      }\n    }\n  };\n\n  protected _onSelectedItemsChanged = (): void => {\n    this.focus();\n  };\n\n  /**\n   * The floating picker is the source of truth for if the menu has been opened or not.\n   *\n   * Because this isn't tracked inside the state of this component, we need to\n   * force an update here to keep the rendered output that depends on the picker being open\n   * in sync with the state\n   *\n   * Called when the suggestions is shown or closed\n   */\n  private _onSuggestionsShownOrHidden = () => {\n    this.forceUpdate();\n  };\n\n  private _addProcessedItem(newItem: T) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n\n    this.focus();\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}