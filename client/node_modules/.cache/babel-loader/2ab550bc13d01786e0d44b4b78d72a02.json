{"ast":null,"code":"import { __assign, __decorate, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, FocusRects, Async, KeyCodes, elementContains, getRTLSafeKeyCode, classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { CheckboxVisibility, ColumnActionsMode, ConstrainMode, DetailsListLayoutMode, ColumnDragEndLocation } from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { GroupedList } from '../../GroupedList';\nimport { List } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@uifabric/utilities';\nimport { useConst } from '@uifabric/react-hooks';\nvar getClassNames = classNamesFunction();\nvar MIN_COLUMN_WIDTH = 100; // this is the global min width\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nvar DetailsListInner = function (props) {\n  var selection = props.selection;\n  var ariaLabelForListHeader = props.ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn,\n    className = props.className,\n    checkboxVisibility = props.checkboxVisibility,\n    compact = props.compact,\n    constrainMode = props.constrainMode,\n    dragDropEvents = props.dragDropEvents,\n    groups = props.groups,\n    groupProps = props.groupProps,\n    indentWidth = props.indentWidth,\n    items = props.items,\n    isPlaceholderData = props.isPlaceholderData,\n    isHeaderVisible = props.isHeaderVisible,\n    layoutMode = props.layoutMode,\n    onItemInvoked = props.onItemInvoked,\n    onItemContextMenu = props.onItemContextMenu,\n    onColumnHeaderClick = props.onColumnHeaderClick,\n    onColumnHeaderContextMenu = props.onColumnHeaderContextMenu,\n    _a = props.selectionMode,\n    selectionMode = _a === void 0 ? selection.mode : _a,\n    selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick,\n    selectionZoneProps = props.selectionZoneProps,\n    ariaLabel = props.ariaLabel,\n    ariaLabelForGrid = props.ariaLabelForGrid,\n    rowElementEventMap = props.rowElementEventMap,\n    _b = props.shouldApplyApplicationRole,\n    shouldApplyApplicationRole = _b === void 0 ? false : _b,\n    getKey = props.getKey,\n    listProps = props.listProps,\n    usePageCache = props.usePageCache,\n    onShouldVirtualize = props.onShouldVirtualize,\n    viewport = props.viewport,\n    minimumPixelsForDrag = props.minimumPixelsForDrag,\n    getGroupHeight = props.getGroupHeight,\n    styles = props.styles,\n    theme = props.theme,\n    _c = props.cellStyleProps,\n    cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c,\n    onRenderCheckbox = props.onRenderCheckbox,\n    useFastIcons = props.useFastIcons,\n    dragDropHelper = props.dragDropHelper,\n    adjustedColumns = props.adjustedColumns,\n    isCollapsed = props.isCollapsed,\n    isSizing = props.isSizing,\n    isSomeGroupExpanded = props.isSomeGroupExpanded,\n    version = props.version,\n    rootRef = props.rootRef,\n    listRef = props.listRef,\n    focusZoneRef = props.focusZoneRef,\n    columnReorderOptions = props.columnReorderOptions,\n    groupedListRef = props.groupedListRef,\n    headerRef = props.headerRef,\n    onGroupExpandStateChanged = props.onGroupExpandStateChanged,\n    onColumnIsSizingChanged = props.onColumnIsSizingChanged,\n    onRowDidMount = props.onRowDidMount,\n    onRowWillUnmount = props.onRowWillUnmount,\n    disableSelectionZone = props.disableSelectionZone,\n    onColumnResized = props.onColumnResized,\n    onColumnAutoResized = props.onColumnAutoResized,\n    onToggleCollapse = props.onToggleCollapse,\n    onActiveRowChanged = props.onActiveRowChanged,\n    onBlur = props.onBlur,\n    eventsToRegister = props.rowElementEventMap,\n    onRenderMissingItem = props.onRenderMissingItem,\n    onRenderItemColumn = props.onRenderItemColumn,\n    getCellValueKey = props.getCellValueKey,\n    getRowAriaLabel = props.getRowAriaLabel,\n    getRowAriaDescribedBy = props.getRowAriaDescribedBy,\n    checkButtonAriaLabel = props.checkButtonAriaLabel,\n    checkboxCellClassName = props.checkboxCellClassName,\n    useReducedRowRenderer = props.useReducedRowRenderer,\n    enableUpdateAnimations = props.enableUpdateAnimations,\n    enterModalSelectionOnTouch = props.enterModalSelectionOnTouch,\n    onRenderDefaultRow = props.onRenderDefaultRow,\n    selectionZoneRef = props.selectionZoneRef;\n  var rowId = getId('row');\n  var groupNestingDepth = getGroupNestingDepth(groups);\n  var additionalListProps = React.useMemo(function () {\n    return __assign({\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey: getKey,\n      version: version\n    }, listProps);\n  }, [isSizing, getKey, version, listProps]);\n  var selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n  var defaultOnRenderDetailsHeader = React.useCallback(function (detailsHeaderProps) {\n    return React.createElement(DetailsHeader, __assign({}, detailsHeaderProps));\n  }, []);\n  var defaultOnRenderDetailsFooter = React.useCallback(function () {\n    return null;\n  }, []);\n  var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n  var onRenderDetailsHeader = React.useMemo(function () {\n    return propsOnRenderDetailsHeader ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader) : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n  var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n  var onRenderDetailsFooter = React.useMemo(function () {\n    return propsOnRenderDetailsFooter ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter) : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n  var detailsFooterProps = React.useMemo(function () {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth: groupNestingDepth,\n      selection: selection,\n      selectionMode: selectionMode,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps\n    };\n  }, [adjustedColumns, groupNestingDepth, selection, selectionMode, viewport, checkboxVisibility, indentWidth, cellStyleProps]);\n  var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n  var onColumnDragEnd = React.useCallback(function (_a, event) {\n    var dropLocation = _a.dropLocation;\n    var finalDropLocation = ColumnDragEndLocation.outside;\n    if (columnReorderOnDragEnd) {\n      if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n        finalDropLocation = dropLocation;\n      } else if (rootRef.current) {\n        var clientRect = rootRef.current.getBoundingClientRect();\n        if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n          finalDropLocation = ColumnDragEndLocation.surface;\n        }\n      }\n      columnReorderOnDragEnd(finalDropLocation);\n    }\n  }, [columnReorderOnDragEnd, rootRef]);\n  var columnReorderProps = React.useMemo(function () {\n    if (columnReorderOptions) {\n      return __assign(__assign({}, columnReorderOptions), {\n        onColumnDragEnd: onColumnDragEnd\n      });\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n  var rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  var colCount = (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0) + (groups ? 1 : 0);\n  var classNames = React.useMemo(function () {\n    return getClassNames(styles, {\n      theme: theme,\n      compact: compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className: className\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n  var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n  var finalOnRenderDetailsGroupFooter = React.useMemo(function () {\n    return onRenderDetailsGroupFooter ? function (groupFooterProps, defaultRender) {\n      return onRenderDetailsGroupFooter(__assign(__assign({}, groupFooterProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps\n      }), defaultRender);\n    } : undefined;\n  }, [onRenderDetailsGroupFooter, adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);\n  var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n  var finalOnRenderDetailsGroupHeader = React.useMemo(function () {\n    return onRenderDetailsGroupHeader ? function (groupHeaderProps, defaultRender) {\n      var ariaPosInSet = groupHeaderProps.ariaPosInSet,\n        ariaSetSize = groupHeaderProps.ariaSetSize;\n      return onRenderDetailsGroupHeader(__assign(__assign({}, groupHeaderProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps,\n        ariaColSpan: adjustedColumns.length,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n        ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined\n      }), defaultRender);\n    } : function (groupHeaderProps, defaultRender) {\n      var ariaPosInSet = groupHeaderProps.ariaPosInSet,\n        ariaSetSize = groupHeaderProps.ariaSetSize;\n      return defaultRender(__assign(__assign({}, groupHeaderProps), {\n        ariaColSpan: adjustedColumns.length,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n        ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined\n      }));\n    };\n  }, [onRenderDetailsGroupHeader, adjustedColumns, groupNestingDepth, indentWidth, isHeaderVisible, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);\n  var finalGroupProps = React.useMemo(function () {\n    return __assign(__assign({}, groupProps), {\n      role: 'rowgroup',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader\n    });\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader]);\n  var sumColumnWidths = useConst(function () {\n    return memoizeFunction(function (columns) {\n      var totalWidth = 0;\n      columns.forEach(function (column) {\n        return totalWidth += column.calculatedWidth || column.minWidth;\n      });\n      return totalWidth;\n    });\n  });\n  var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n  var rowWidth = React.useMemo(function () {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n  var onRenderCell = React.useCallback(function (nestingDepth, item, index) {\n    var finalOnRenderRow = props.onRenderRow ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow) : onRenderDefaultRow;\n    var rowProps = {\n      item: item,\n      itemIndex: index,\n      compact: compact,\n      columns: adjustedColumns,\n      groupNestingDepth: nestingDepth,\n      id: rowId + \"-\" + index,\n      selectionMode: selectionMode,\n      selection: selection,\n      onDidMount: onRowDidMount,\n      onWillUnmount: onRowWillUnmount,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey,\n      eventsToRegister: eventsToRegister,\n      dragDropEvents: dragDropEvents,\n      dragDropHelper: dragDropHelper,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      collapseAllVisibility: collapseAllVisibility,\n      getRowAriaLabel: getRowAriaLabel,\n      getRowAriaDescribedBy: getRowAriaDescribedBy,\n      checkButtonAriaLabel: checkButtonAriaLabel,\n      checkboxCellClassName: checkboxCellClassName,\n      useReducedRowRenderer: useReducedRowRenderer,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      enableUpdateAnimations: enableUpdateAnimations,\n      rowWidth: rowWidth,\n      useFastIcons: useFastIcons\n    };\n    if (!item) {\n      if (onRenderMissingItem) {\n        return onRenderMissingItem(index, rowProps);\n      }\n      return null;\n    }\n    return finalOnRenderRow(rowProps);\n  }, [compact, adjustedColumns, selectionMode, selection, rowId, onRowDidMount, onRowWillUnmount, onRenderItemColumn, getCellValueKey, eventsToRegister, dragDropEvents, dragDropHelper, viewport, checkboxVisibility, collapseAllVisibility, getRowAriaLabel, getRowAriaDescribedBy, checkButtonAriaLabel, checkboxCellClassName, useReducedRowRenderer, indentWidth, cellStyleProps, onRenderCheckbox, enableUpdateAnimations, useFastIcons, onRenderDefaultRow, onRenderMissingItem, props.onRenderRow, rowWidth]);\n  var onRenderListCell = React.useCallback(function (nestingDepth) {\n    return function (item, itemIndex) {\n      return onRenderCell(nestingDepth, item, itemIndex);\n    };\n  }, [onRenderCell]);\n  var isRightArrow = React.useCallback(function (event) {\n    return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n  }, [theme]);\n  var focusZoneProps = {\n    componentRef: focusZoneRef,\n    className: classNames.focusZone,\n    direction: FocusZoneDirection.vertical,\n    shouldEnterInnerZone: isRightArrow,\n    onActiveElementChanged: onActiveRowChanged,\n    shouldRaiseClicks: false,\n    onBlur: onBlur\n  };\n  var list = groups ? React.createElement(GroupedList, {\n    focusZoneProps: focusZoneProps,\n    componentRef: groupedListRef,\n    groups: groups,\n    groupProps: finalGroupProps,\n    items: items,\n    onRenderCell: onRenderCell,\n    role: \"presentation\",\n    selection: selection,\n    selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n    dragDropEvents: dragDropEvents,\n    dragDropHelper: dragDropHelper,\n    eventsToRegister: rowElementEventMap,\n    listProps: additionalListProps,\n    onGroupExpandStateChanged: onGroupExpandStateChanged,\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize,\n    getGroupHeight: getGroupHeight,\n    compact: compact\n  }) : React.createElement(FocusZone, __assign({}, focusZoneProps), React.createElement(List, __assign({\n    ref: listRef,\n    role: \"presentation\",\n    items: items,\n    onRenderCell: onRenderListCell(0),\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize\n  }, additionalListProps)));\n  var onHeaderKeyDown = React.useCallback(function (ev) {\n    if (ev.which === KeyCodes.down) {\n      if (focusZoneRef.current && focusZoneRef.current.focus()) {\n        // select the first item in list after down arrow key event\n        // only if nothing was selected; otherwise start with the already-selected item\n        if (selection.getSelectedIndices().length === 0) {\n          selection.setIndexSelected(0, true, false);\n        }\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [selection, focusZoneRef]);\n  var onContentKeyDown = React.useCallback(function (ev) {\n    if (ev.which === KeyCodes.up && !ev.altKey) {\n      if (headerRef.current && headerRef.current.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [headerRef]);\n  return (\n    // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    React.createElement(\"div\", __assign({\n      ref: rootRef,\n      className: classNames.root,\n      \"data-automationid\": \"DetailsList\",\n      \"data-is-scrollable\": \"false\",\n      \"aria-label\": ariaLabel\n    }, shouldApplyApplicationRole ? {\n      role: 'application'\n    } : {}), React.createElement(FocusRects, null), React.createElement(\"div\", {\n      role: \"grid\",\n      \"aria-label\": ariaLabelForGrid,\n      \"aria-rowcount\": isPlaceholderData ? -1 : rowCount,\n      \"aria-colcount\": colCount,\n      \"aria-readonly\": \"true\",\n      \"aria-busy\": isPlaceholderData\n    }, React.createElement(\"div\", {\n      onKeyDown: onHeaderKeyDown,\n      role: \"presentation\",\n      className: classNames.headerWrapper\n    }, isHeaderVisible && onRenderDetailsHeader({\n      componentRef: headerRef,\n      selectionMode: selectionMode,\n      layoutMode: layoutMode,\n      selection: selection,\n      columns: adjustedColumns,\n      onColumnClick: onColumnHeaderClick,\n      onColumnContextMenu: onColumnHeaderContextMenu,\n      onColumnResized: onColumnResized,\n      onColumnIsSizingChanged: onColumnIsSizingChanged,\n      onColumnAutoResized: onColumnAutoResized,\n      groupNestingDepth: groupNestingDepth,\n      isAllCollapsed: isCollapsed,\n      onToggleCollapseAll: onToggleCollapse,\n      ariaLabel: ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n      selectAllVisibility: selectAllVisibility,\n      collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n      viewport: viewport,\n      columnReorderProps: columnReorderProps,\n      minimumPixelsForDrag: minimumPixelsForDrag,\n      cellStyleProps: cellStyleProps,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      rowWidth: sumColumnWidths(adjustedColumns),\n      useFastIcons: useFastIcons\n    }, onRenderDetailsHeader)), React.createElement(\"div\", {\n      onKeyDown: onContentKeyDown,\n      role: \"presentation\",\n      className: classNames.contentWrapper\n    }, !disableSelectionZone ? React.createElement(SelectionZone, __assign({\n      ref: selectionZoneRef,\n      selection: selection,\n      selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick,\n      selectionMode: selectionMode,\n      onItemInvoked: onItemInvoked,\n      onItemContextMenu: onItemContextMenu,\n      enterModalOnTouch: enterModalSelectionOnTouch\n    }, selectionZoneProps || {}), list) : list), onRenderDetailsFooter(__assign({}, detailsFooterProps))))\n  );\n};\nvar DetailsListBase = /** @class */function (_super) {\n  __extends(DetailsListBase, _super);\n  function DetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._header = React.createRef();\n    _this._groupedList = React.createRef();\n    _this._list = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._selectionZone = React.createRef();\n    _this._onRenderRow = function (props, defaultRender) {\n      return React.createElement(DetailsRow, __assign({}, props));\n    };\n    _this._getDerivedStateFromProps = function (nextProps, previousState) {\n      var _a = _this.props,\n        checkboxVisibility = _a.checkboxVisibility,\n        items = _a.items,\n        setKey = _a.setKey,\n        _b = _a.selectionMode,\n        selectionMode = _b === void 0 ? _this._selection.mode : _b,\n        columns = _a.columns,\n        viewport = _a.viewport,\n        compact = _a.compact,\n        dragDropEvents = _a.dragDropEvents;\n      var _c = (_this.props.groupProps || {}).isAllGroupsCollapsed,\n        isAllGroupsCollapsed = _c === void 0 ? undefined : _c;\n      var newViewportWidth = nextProps.viewport && nextProps.viewport.width || 0;\n      var oldViewportWidth = viewport && viewport.width || 0;\n      var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n      var shouldForceUpdates = false;\n      if (nextProps.layoutMode !== _this.props.layoutMode) {\n        shouldForceUpdates = true;\n      }\n      var nextState = previousState;\n      if (shouldResetSelection) {\n        _this._initialFocusedIndex = nextProps.initialFocusedIndex;\n        // reset focusedItemIndex when setKey changes\n        nextState = __assign(__assign({}, nextState), {\n          focusedItemIndex: _this._initialFocusedIndex !== undefined ? _this._initialFocusedIndex : -1\n        });\n      }\n      if (!_this.props.disableSelectionZone && nextProps.items !== items) {\n        _this._selection.setItems(nextProps.items, shouldResetSelection);\n      }\n      if (nextProps.checkboxVisibility !== checkboxVisibility || nextProps.columns !== columns || newViewportWidth !== oldViewportWidth || nextProps.compact !== compact) {\n        shouldForceUpdates = true;\n      }\n      nextState = __assign(__assign({}, nextState), _this._adjustColumns(nextProps, nextState, true));\n      if (nextProps.selectionMode !== selectionMode) {\n        shouldForceUpdates = true;\n      }\n      if (isAllGroupsCollapsed === undefined && nextProps.groupProps && nextProps.groupProps.isAllGroupsCollapsed !== undefined) {\n        nextState = __assign(__assign({}, nextState), {\n          isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n          isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed\n        });\n      }\n      if (nextProps.dragDropEvents !== dragDropEvents) {\n        _this._dragDropHelper && _this._dragDropHelper.dispose();\n        _this._dragDropHelper = nextProps.dragDropEvents ? new DragDropHelper({\n          selection: _this._selection,\n          minimumPixelsForDrag: nextProps.minimumPixelsForDrag\n        }) : undefined;\n        shouldForceUpdates = true;\n      }\n      if (shouldForceUpdates) {\n        nextState = __assign(__assign({}, nextState), {\n          version: {}\n        });\n      }\n      return nextState;\n    };\n    _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {\n      _this.setState({\n        isSomeGroupExpanded: isSomeGroupExpanded\n      });\n    };\n    _this._onColumnIsSizingChanged = function (column, isSizing) {\n      _this.setState({\n        isSizing: isSizing\n      });\n    };\n    _this._onRowDidMount = function (row) {\n      var _a = row.props,\n        item = _a.item,\n        itemIndex = _a.itemIndex;\n      var itemKey = _this._getItemKey(item, itemIndex);\n      _this._activeRows[itemKey] = row; // this is used for column auto resize\n      _this._setFocusToRowIfPending(row);\n      var onRowDidMount = _this.props.onRowDidMount;\n      if (onRowDidMount) {\n        onRowDidMount(item, itemIndex);\n      }\n    };\n    _this._onRowWillUnmount = function (row) {\n      var onRowWillUnmount = _this.props.onRowWillUnmount;\n      var _a = row.props,\n        item = _a.item,\n        itemIndex = _a.itemIndex;\n      var itemKey = _this._getItemKey(item, itemIndex);\n      delete _this._activeRows[itemKey];\n      if (onRowWillUnmount) {\n        onRowWillUnmount(item, itemIndex);\n      }\n    };\n    _this._onToggleCollapse = function (collapsed) {\n      _this.setState({\n        isCollapsed: collapsed\n      });\n      if (_this._groupedList.current) {\n        _this._groupedList.current.toggleCollapseAll(collapsed);\n      }\n    };\n    _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {\n      var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n      if (_this.props.onColumnResize) {\n        _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n      }\n      _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n      _this.setState(__assign(__assign({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), {\n        version: {}\n      }));\n    };\n    /**\n     * Callback function when double clicked on the details header column resizer\n     * which will measure the column cells of all the active rows and resize the\n     * column to the max cell width.\n     *\n     * @param column - double clicked column definition\n     * @param columnIndex - double clicked column index\n     * TODO: min width 100 should be changed to const value and should be consistent with the\n     * value used on _onSizerMove method in DetailsHeader\n     */\n    _this._onColumnAutoResized = function (column, columnIndex) {\n      var max = 0;\n      var count = 0;\n      var totalCount = Object.keys(_this._activeRows).length;\n      for (var key in _this._activeRows) {\n        if (_this._activeRows.hasOwnProperty(key)) {\n          var currentRow = _this._activeRows[key];\n          currentRow.measureCell(columnIndex, function (width) {\n            max = Math.max(max, width);\n            count++;\n            if (count === totalCount) {\n              _this._onColumnResized(column, max, columnIndex);\n            }\n          });\n        }\n      }\n    };\n    /**\n     * Call back function when an element in FocusZone becomes active. It will translate it into item\n     * and call onActiveItemChanged callback if specified.\n     *\n     * @param row - element that became active in Focus Zone\n     * @param focus - event from Focus Zone\n     */\n    _this._onActiveRowChanged = function (el, ev) {\n      var _a = _this.props,\n        items = _a.items,\n        onActiveItemChanged = _a.onActiveItemChanged;\n      if (!el) {\n        return;\n      }\n      // Check and assign index only if the event was raised from any DetailsRow element\n      if (el.getAttribute('data-item-index')) {\n        var index = Number(el.getAttribute('data-item-index'));\n        if (index >= 0) {\n          if (onActiveItemChanged) {\n            onActiveItemChanged(items[index], index, ev);\n          }\n          _this.setState({\n            focusedItemIndex: index\n          });\n        }\n      }\n    };\n    _this._onBlur = function (event) {\n      _this.setState({\n        focusedItemIndex: -1\n      });\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._activeRows = {};\n    _this._columnOverrides = {};\n    _this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: _this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: _this._getDerivedStateFromProps\n    };\n    _this._selection = props.selection || new Selection({\n      onSelectionChanged: undefined,\n      getKey: props.getKey,\n      selectionMode: props.selectionMode\n    });\n    if (!_this.props.disableSelectionZone) {\n      _this._selection.setItems(props.items, false);\n    }\n    _this._dragDropHelper = props.dragDropEvents ? new DragDropHelper({\n      selection: _this._selection,\n      minimumPixelsForDrag: props.minimumPixelsForDrag\n    }) : undefined;\n    _this._initialFocusedIndex = props.initialFocusedIndex;\n    return _this;\n  }\n  DetailsListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  };\n  DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  };\n  DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n    var item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n      var itemKey = this._getItemKey(item, index);\n      var row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  };\n  DetailsListBase.prototype.getStartItemIndexInView = function () {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  };\n  DetailsListBase.prototype.componentWillUnmount = function () {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  };\n  DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    this._notifyColumnsResized();\n    if (this._initialFocusedIndex !== undefined) {\n      var item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        var itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        var row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n    if (this.props.items !== prevProps.items && this.props.items.length > 0 && this.state.focusedItemIndex !== -1 && !elementContains(this._root.current, document.activeElement, false)) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      var index = this.state.focusedItemIndex < this.props.items.length ? this.state.focusedItemIndex : this.props.items.length - 1;\n      var item = this.props.items[index];\n      var itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      var row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  };\n  DetailsListBase.prototype.render = function () {\n    return React.createElement(DetailsListInner, __assign({}, this.props, this.state, {\n      selection: this._selection,\n      dragDropHelper: this._dragDropHelper,\n      rootRef: this._root,\n      listRef: this._list,\n      groupedListRef: this._groupedList,\n      focusZoneRef: this._focusZone,\n      headerRef: this._header,\n      selectionZoneRef: this._selectionZone,\n      onGroupExpandStateChanged: this._onGroupExpandStateChanged,\n      onColumnIsSizingChanged: this._onColumnIsSizingChanged,\n      onRowDidMount: this._onRowDidMount,\n      onRowWillUnmount: this._onRowWillUnmount,\n      onColumnResized: this._onColumnResized,\n      onColumnAutoResized: this._onColumnAutoResized,\n      onToggleCollapse: this._onToggleCollapse,\n      onActiveRowChanged: this._onActiveRowChanged,\n      onBlur: this._onBlur,\n      onRenderDefaultRow: this._onRenderRow\n    }));\n  };\n  DetailsListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n    this._forceListUpdates();\n  };\n  DetailsListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.props.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n    return level;\n  };\n  DetailsListBase.prototype._setFocusToRowIfPending = function (row) {\n    var itemIndex = row.props.itemIndex;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  };\n  DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout(function () {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  };\n  DetailsListBase.prototype._forceListUpdates = function () {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  };\n  DetailsListBase.prototype._notifyColumnsResized = function () {\n    this.state.adjustedColumns.forEach(function (column) {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  };\n  DetailsListBase.prototype._adjustColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    var viewport = this.props.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    return __assign(__assign({}, previousState), {\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth\n    });\n  };\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  DetailsListBase.prototype._getAdjustedColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var _this = this;\n    var newItems = newProps.items,\n      layoutMode = newProps.layoutMode,\n      selectionMode = newProps.selectionMode,\n      viewport = newProps.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    var newColumns = newProps.columns;\n    var columns = this.props ? this.props.columns : [];\n    var lastWidth = previousState ? previousState.lastWidth : -1;\n    var lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n    if (!forceUpdate && lastWidth === viewportWidth && lastSelectionMode === selectionMode && (!columns || newColumns === columns)) {\n      return newColumns || [];\n    }\n    newColumns = newColumns || buildColumns(newItems, true);\n    var adjustedColumns;\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns);\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(function (column) {\n        _this._rememberCalculatedWidth(column, column.calculatedWidth);\n      });\n    } else {\n      if (resizingColumnIndex !== undefined) {\n        adjustedColumns = this._getJustifiedColumnsAfterResize(newColumns, viewportWidth, newProps, resizingColumnIndex);\n      } else {\n        adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps, 0);\n      }\n      adjustedColumns.forEach(function (column) {\n        _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n    return adjustedColumns;\n  };\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  DetailsListBase.prototype._getFixedColumns = function (newColumns) {\n    var _this = this;\n    return newColumns.map(function (column) {\n      var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);\n      if (!newColumn.calculatedWidth) {\n        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n      }\n      return newColumn;\n    });\n  };\n  DetailsListBase.prototype._getJustifiedColumnsAfterResize = function (newColumns, viewportWidth, props, resizingColumnIndex) {\n    var _this = this;\n    var fixedColumns = newColumns.slice(0, resizingColumnIndex);\n    fixedColumns.forEach(function (column) {\n      return column.calculatedWidth = _this._getColumnOverride(column.key).currentWidth;\n    });\n    var fixedWidth = fixedColumns.reduce(function (total, column, i) {\n      return total + getPaddedWidth(column, i === 0, props);\n    }, 0);\n    var remainingColumns = newColumns.slice(resizingColumnIndex);\n    var remainingWidth = viewportWidth - fixedWidth;\n    return __spreadArrays(fixedColumns, this._getJustifiedColumns(remainingColumns, remainingWidth, props, resizingColumnIndex));\n  };\n  /** Builds a set of columns to fix within the viewport width. */\n  DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props, firstIndex) {\n    var _this = this;\n    var _a = props.selectionMode,\n      selectionMode = _a === void 0 ? this._selection.mode : _a,\n      checkboxVisibility = props.checkboxVisibility;\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    var totalWidth = 0; // offset because we have one less inner padding.\n    var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    var adjustedColumns = newColumns.map(function (column, i) {\n      var newColumn = __assign(__assign(__assign({}, column), {\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH\n      }), _this._columnOverrides[column.key]);\n      var isFirst = i + firstIndex === 0;\n      totalWidth += getPaddedWidth(newColumn, isFirst, props);\n      return newColumn;\n    });\n    var lastIndex = adjustedColumns.length - 1;\n    // Shrink or remove collapsable columns.\n    while (lastIndex > 0 && totalWidth > availableWidth) {\n      var column = adjustedColumns[lastIndex];\n      var minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      var overflowWidth = totalWidth - availableWidth;\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        var originalWidth = column.calculatedWidth;\n        column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, false, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      var column = adjustedColumns[i];\n      var isLast = i === adjustedColumns.length - 1;\n      var overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n      var spaceLeft = availableWidth - totalWidth;\n      var increment = void 0;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        var maxWidth = column.maxWidth;\n        var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n      column.calculatedWidth = column.calculatedWidth + increment;\n      totalWidth += increment;\n    }\n    return adjustedColumns;\n  };\n  DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {\n    var overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  };\n  DetailsListBase.prototype._getColumnOverride = function (key) {\n    return this._columnOverrides[key] = this._columnOverrides[key] || {};\n  };\n  DetailsListBase.prototype._getItemKey = function (item, itemIndex) {\n    var getKey = this.props.getKey;\n    var itemKey = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n    return itemKey;\n  };\n  DetailsListBase.defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true\n  };\n  DetailsListBase = __decorate([withViewport], DetailsListBase);\n  return DetailsListBase;\n}(React.Component);\nexport { DetailsListBase };\nexport function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline) {\n  var columns = [];\n  if (items && items.length) {\n    var firstItem = items[0];\n    for (var propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName\n        });\n      }\n    }\n  }\n  return columns;\n}\nfunction getPaddedWidth(column, isFirst, props) {\n  var _a = props.cellStyleProps,\n    cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n  return column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n}\nfunction getGroupNestingDepth(groups) {\n  var level = 0;\n  var groupsInLevel = groups;\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n  return level;\n}","map":{"version":3,"sources":["components/DetailsList/DetailsList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  IRenderFunction,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n  ColumnDragEndLocation,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport {\n  IDetailsHeader,\n  SelectAllVisibility,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport { IFocusZone, FocusZone, FocusZoneDirection, IFocusZoneProps } from '../../FocusZone';\nimport { IObjectWithKey, ISelection, Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\n\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { IGroupedList, GroupedList, IGroupDividerProps, IGroupRenderProps } from '../../GroupedList';\nimport { List, IListProps, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@uifabric/utilities';\nimport { useConst } from '@uifabric/react-hooks';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n  } = props;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { ariaPosInSet, ariaSetSize } = groupHeaderProps;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n              ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { ariaPosInSet, ariaSetSize } = groupHeaderProps;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: ariaSetSize ? ariaSetSize + (isHeaderVisible ? 1 : 0) : undefined,\n            ariaRowIndex: ariaPosInSet ? ariaPosInSet + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: 'rowgroup',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneProps: IFocusZoneProps = {\n    componentRef: focusZoneRef,\n    className: classNames.focusZone,\n    direction: FocusZoneDirection.vertical,\n    shouldEnterInnerZone: isRightArrow,\n    onActiveElementChanged: onActiveRowChanged,\n    shouldRaiseClicks: false,\n    onBlur: onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      aria-label={ariaLabel}\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role=\"grid\"\n        aria-label={ariaLabelForGrid}\n        aria-rowcount={isPlaceholderData ? -1 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      if (resizingColumnIndex !== undefined) {\n        adjustedColumns = this._getJustifiedColumnsAfterResize(\n          newColumns,\n          viewportWidth,\n          newProps,\n          resizingColumnIndex,\n        );\n      } else {\n        adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps, 0);\n      }\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[]): IColumn[] {\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      if (!newColumn.calculatedWidth) {\n        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n      }\n\n      return newColumn;\n    });\n  }\n\n  private _getJustifiedColumnsAfterResize(\n    newColumns: IColumn[],\n    viewportWidth: number,\n    props: IDetailsListProps,\n    resizingColumnIndex: number,\n  ): IColumn[] {\n    const fixedColumns = newColumns.slice(0, resizingColumnIndex);\n    fixedColumns.forEach(column => (column.calculatedWidth = this._getColumnOverride(column.key).currentWidth));\n\n    const fixedWidth = fixedColumns.reduce((total, column, i) => total + getPaddedWidth(column, i === 0, props), 0);\n\n    const remainingColumns = newColumns.slice(resizingColumnIndex);\n    const remainingWidth = viewportWidth - fixedWidth;\n\n    return [\n      ...fixedColumns,\n      ...this._getJustifiedColumns(remainingColumns, remainingWidth, props, resizingColumnIndex),\n    ];\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(\n    newColumns: IColumn[],\n    viewportWidth: number,\n    props: IDetailsListProps,\n    firstIndex: number,\n  ): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const newColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n        ...this._columnOverrides[column.key],\n      };\n\n      const isFirst = i + firstIndex === 0;\n      totalWidth += getPaddedWidth(newColumn, isFirst, props);\n\n      return newColumn;\n    });\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex > 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, false, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, isFirst: boolean, props: IDetailsListProps): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    column.calculatedWidth! +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}