{"ast":null,"code":"import { Stylesheet } from '@uifabric/merge-styles';\nimport { memoizeFunction } from '@uifabric/utilities';\n/**\n * Internal memoized function which simply takes in the class map and the\n * disable boolean. These immutable values can be memoized.\n */\nvar _getGlobalClassNames = memoizeFunction(function (classNames, disableGlobalClassNames) {\n  var styleSheet = Stylesheet.getInstance();\n  if (disableGlobalClassNames) {\n    // disable global classnames\n    return Object.keys(classNames).reduce(function (acc, className) {\n      acc[className] = styleSheet.getClassName(classNames[className]);\n      return acc;\n    }, {});\n  }\n  // use global classnames\n  return classNames;\n});\n/**\n * Checks for the `disableGlobalClassNames` property on the `theme` to determine if it should return `classNames`\n * Note that calls to this function are memoized.\n *\n * @param classNames - The collection of global class names that apply when the flag is false. Make sure to pass in\n * the same instance on each call to benefit from memoization.\n * @param theme - The theme to check the flag on\n * @param disableGlobalClassNames - Optional. Explicitly opt in/out of disabling global classnames. Defaults to false.\n */\nexport function getGlobalClassNames(classNames, theme, disableGlobalClassNames) {\n  return _getGlobalClassNames(classNames, disableGlobalClassNames !== undefined ? disableGlobalClassNames : theme.disableGlobalClassNames);\n}","map":{"version":3,"sources":["styles/getGlobalClassNames.ts"],"names":[],"mappings":"AACA,SAAS,UAAU,QAAQ,wBAAwB;AACnD,SAAS,eAAe,QAAQ,qBAAqB;AAIrD;;;AAGG;AACH,IAAM,oBAAoB,GAAG,eAAe,CAC1C,UAAI,UAA+B,EAAE,uBAAiC,EAAA;EACpE,IAAM,UAAU,GAAG,UAAU,CAAC,WAAW,CAAA,CAAE;EAE3C,IAAI,uBAAuB,EAAE;IAC3B;IACA,OAAQ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAiB,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,SAAS,EAAA;MACpE,GAAG,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;MAC/D,OAAO,GAAG;IACZ,CAAC,EAAE,CAAA,CAAyB,CAAC;EAC9B;EAED;EACA,OAAO,UAAU;AACnB,CAAC,CACF;AAED;;;;;;;;AAQG;AACH,OAAM,SAAU,mBAAmB,CACjC,UAA+B,EAC/B,KAAa,EACb,uBAAiC,EAAA;EAEjC,OAAO,oBAAoB,CACzB,UAAU,EACV,uBAAuB,KAAK,SAAS,GAAG,uBAAuB,GAAG,KAAK,CAAC,uBAAuB,CAChG;AACH","sourcesContent":["import { ITheme } from '../interfaces/index';\nimport { Stylesheet } from '@uifabric/merge-styles';\nimport { memoizeFunction } from '@uifabric/utilities';\n\nexport type GlobalClassNames<IStyles> = Record<keyof IStyles, string>;\n\n/**\n * Internal memoized function which simply takes in the class map and the\n * disable boolean. These immutable values can be memoized.\n */\nconst _getGlobalClassNames = memoizeFunction(\n  <T>(classNames: GlobalClassNames<T>, disableGlobalClassNames?: boolean): GlobalClassNames<T> => {\n    const styleSheet = Stylesheet.getInstance();\n\n    if (disableGlobalClassNames) {\n      // disable global classnames\n      return (Object.keys(classNames) as (keyof T)[]).reduce((acc, className) => {\n        acc[className] = styleSheet.getClassName(classNames[className]);\n        return acc;\n      }, {} as GlobalClassNames<T>);\n    }\n\n    // use global classnames\n    return classNames;\n  },\n);\n\n/**\n * Checks for the `disableGlobalClassNames` property on the `theme` to determine if it should return `classNames`\n * Note that calls to this function are memoized.\n *\n * @param classNames - The collection of global class names that apply when the flag is false. Make sure to pass in\n * the same instance on each call to benefit from memoization.\n * @param theme - The theme to check the flag on\n * @param disableGlobalClassNames - Optional. Explicitly opt in/out of disabling global classnames. Defaults to false.\n */\nexport function getGlobalClassNames<T>(\n  classNames: GlobalClassNames<T>,\n  theme: ITheme,\n  disableGlobalClassNames?: boolean,\n): GlobalClassNames<T> {\n  return _getGlobalClassNames(\n    classNames,\n    disableGlobalClassNames !== undefined ? disableGlobalClassNames : theme.disableGlobalClassNames,\n  );\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}