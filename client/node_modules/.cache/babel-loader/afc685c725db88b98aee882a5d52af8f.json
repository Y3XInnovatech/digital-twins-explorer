{"ast":null,"code":"import * as React from 'react';\n/**\n * Controlled state helper that gives priority to props value. Useful for components that have props with both\n * controlled and uncontrolled modes. Any props values will override state, but will not update internal state.\n * If prop is defined and then later undefined, state will revert to its previous value.\n *\n * @param props - The props object containing controlled prop values.\n * @param propName - The controlled prop name.\n * @param options - Options. defaultPropValue is only used if defaultPropName (or its value) is undefined.\n */\nexport function useControlledState(props, propName, options) {\n  var defaultValue;\n  if (options) {\n    if (options.defaultPropName && props[options.defaultPropName] !== undefined) {\n      // No easy way to coerce TProps[TDefaultProp] to match TProps[TProp] in generic typings, so cast it here.\n      defaultValue = props[options.defaultPropName];\n    } else {\n      defaultValue = options && options.defaultPropValue;\n    }\n  }\n  var _a = React.useState(defaultValue),\n    state = _a[0],\n    setState = _a[1];\n  if (props[propName] !== undefined) {\n    return [props[propName], setState];\n  } else {\n    return [state, setState];\n  }\n}\n/**\n * Simple controlled helper that gives priority to props value and falls back to derived value.\n *\n * @param props - The props object containing controlled prop values.\n * @param propName - The controlled prop name.\n * @param derivedValue - Derived value. Returned when controlled value is not present.\n */\nexport function getControlledDerivedProps(props, propName, derivedValue) {\n  if (props[propName] !== undefined) {\n    return props[propName];\n  } else {\n    return derivedValue;\n  }\n}","map":{"version":3,"sources":["hooks/controlled.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAO9B;;;;;;;;AAQG;AACH,OAAM,SAAU,kBAAkB,CAChC,KAAuB,EACvB,QAAe,EACf,OAA8D,EAAA;EAE9D,IAAI,YAAuC;EAC3C,IAAI,OAAO,EAAE;IACX,IAAI,OAAO,CAAC,eAAe,IAAI,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,SAAS,EAAE;MAC3E;MACA,YAAY,GAAI,KAAK,CAAC,OAAO,CAAC,eAAe,CAA8B;KAC5E,MAAM;MACL,YAAY,GAAG,OAAO,IAAI,OAAO,CAAC,gBAAgB;IACnD;EACF;EAEK,IAAA,EAAA,GAAA,KAAA,CAAA,QAAA,CAAA,YAAA,CAAgD;IAA/C,KAAA,GAAA,EAAA,CAAA,CAAA,CAAK;IAAE,QAAA,GAAA,EAAA,CAAA,CAAA,CAAwC;EAEtD,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;IACjC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC;GACnC,MAAM;IACL,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC;EACzB;AACH;AAEA;;;;;;AAMG;AACH,OAAM,SAAU,yBAAyB,CACvC,KAAuB,EACvB,QAAe,EACf,YAA2B,EAAA;EAE3B,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;IACjC,OAAO,KAAK,CAAC,QAAQ,CAAC;GACvB,MAAM;IACL,OAAO,YAAY;EACpB;AACH","sourcesContent":["import * as React from 'react';\n\nexport interface IControlledStateOptions<TProps, TProp extends keyof TProps, TDefaultProp extends keyof TProps> {\n  defaultPropValue?: TProps[TProp];\n  defaultPropName?: TDefaultProp;\n}\n\n/**\n * Controlled state helper that gives priority to props value. Useful for components that have props with both\n * controlled and uncontrolled modes. Any props values will override state, but will not update internal state.\n * If prop is defined and then later undefined, state will revert to its previous value.\n *\n * @param props - The props object containing controlled prop values.\n * @param propName - The controlled prop name.\n * @param options - Options. defaultPropValue is only used if defaultPropName (or its value) is undefined.\n */\nexport function useControlledState<TProps, TProp extends keyof TProps, TDefaultProp extends keyof TProps>(\n  props: Readonly<TProps>,\n  propName: TProp,\n  options?: IControlledStateOptions<TProps, TProp, TDefaultProp>,\n): [TProps[TProp] | undefined, React.Dispatch<React.SetStateAction<TProps[TProp]>>] {\n  let defaultValue: TProps[TProp] | undefined;\n  if (options) {\n    if (options.defaultPropName && props[options.defaultPropName] !== undefined) {\n      // No easy way to coerce TProps[TDefaultProp] to match TProps[TProp] in generic typings, so cast it here.\n      defaultValue = (props[options.defaultPropName] as unknown) as TProps[TProp];\n    } else {\n      defaultValue = options && options.defaultPropValue;\n    }\n  }\n\n  const [state, setState] = React.useState(defaultValue);\n\n  if (props[propName] !== undefined) {\n    return [props[propName], setState];\n  } else {\n    return [state, setState];\n  }\n}\n\n/**\n * Simple controlled helper that gives priority to props value and falls back to derived value.\n *\n * @param props - The props object containing controlled prop values.\n * @param propName - The controlled prop name.\n * @param derivedValue - Derived value. Returned when controlled value is not present.\n */\nexport function getControlledDerivedProps<TProps, TProp extends keyof TProps>(\n  props: Readonly<TProps>,\n  propName: TProp,\n  derivedValue: TProps[TProp],\n): TProps[TProp] {\n  if (props[propName] !== undefined) {\n    return props[propName];\n  } else {\n    return derivedValue;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}