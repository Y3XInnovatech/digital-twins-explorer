{"ast":null,"code":"// A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -\n// this cache is local to the module closure inside this bundle\nvar packagesCache = {};\n// Cache access to window to avoid IE11 memory leak.\nvar _win = undefined;\ntry {\n  _win = window;\n} catch (e) {\n  /* no-op */\n}\nexport function setVersion(packageName, packageVersion) {\n  if (typeof _win !== 'undefined') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var packages = _win.__packages__ = _win.__packages__ || {};\n    // We allow either the global packages or local packages caches to invalidate so testing can\n    // just clear the global to set this state\n    if (!packages[packageName] || !packagesCache[packageName]) {\n      packagesCache[packageName] = packageVersion;\n      var versions = packages[packageName] = packages[packageName] || [];\n      versions.push(packageVersion);\n    }\n  }\n}","map":{"version":3,"sources":["setVersion.ts"],"names":[],"mappings":"AAAA;AACA;AACA,IAAM,aAAa,GAA+B,CAAA,CAAE;AAEpD;AACA,IAAI,IAAI,GAAuB,SAAS;AAExC,IAAI;EACF,IAAI,GAAG,MAAM;CACd,CAAC,OAAO,CAAC,EAAE;EACV;AAAA;AAGF,OAAM,SAAU,UAAU,CAAC,WAAmB,EAAE,cAAsB,EAAA;EACpE,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;IAC/B;IACA,IAAM,QAAQ,GAAK,IAAY,CAAC,YAAY,GAAI,IAAY,CAAC,YAAY,IAAI,CAAA,CAAG;IAEhF;IACA;IACA,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE;MACzD,aAAa,CAAC,WAAW,CAAC,GAAG,cAAc;MAC3C,IAAM,QAAQ,GAAI,QAAQ,CAAC,WAAW,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAG;MACtE,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC;IAC9B;EACF;AACH","sourcesContent":["// A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -\n// this cache is local to the module closure inside this bundle\nconst packagesCache: { [name: string]: string } = {};\n\n// Cache access to window to avoid IE11 memory leak.\nlet _win: Window | undefined = undefined;\n\ntry {\n  _win = window;\n} catch (e) {\n  /* no-op */\n}\n\nexport function setVersion(packageName: string, packageVersion: string): void {\n  if (typeof _win !== 'undefined') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const packages = ((_win as any).__packages__ = (_win as any).__packages__ || {});\n\n    // We allow either the global packages or local packages caches to invalidate so testing can\n    // just clear the global to set this state\n    if (!packages[packageName] || !packagesCache[packageName]) {\n      packagesCache[packageName] = packageVersion;\n      const versions = (packages[packageName] = packages[packageName] || []);\n      versions.push(packageVersion);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}