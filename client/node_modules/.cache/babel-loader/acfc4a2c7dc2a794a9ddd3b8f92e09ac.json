{"ast":null,"code":"import { getDocument } from '@uifabric/utilities';\nimport * as React from 'react';\nimport { useWindow } from '@fluentui/react-window-provider';\n/**\n * Hook to calculate and cache the target element specified by the given target attribute,\n * as well as the target element's (or host element's) parent window\n * @param target- Target selector passed to the component as a property, describing the element that\n * the callout should target\n * @param hostElement- The callout's host element, used for determining the parent window.\n */\nexport function useTarget(target, hostElement) {\n  var _a;\n  var previousTargetProp = React.useRef();\n  var targetRef = React.useRef(null);\n  /**\n   * Stores an instance of Window, used to check\n   * for server side rendering and if focus was lost.\n   */\n  var targetWindow = useWindow();\n  // If the target element changed, find the new one. If we are tracking\n  // target with class name, always find element because we do not know if\n  // fabric has rendered a new element and disposed the old element.\n  if (!target || target !== previousTargetProp.current || typeof target === 'string') {\n    var currentElement = (_a = hostElement) === null || _a === void 0 ? void 0 : _a.current;\n    if (target) {\n      if (typeof target === 'string') {\n        var currentDoc = getDocument(currentElement);\n        targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;\n      } else if ('stopPropagation' in target) {\n        targetRef.current = target;\n      } else if ('getBoundingClientRect' in target) {\n        targetRef.current = target;\n      } else if ('current' in target) {\n        targetRef.current = target.current;\n      } else {\n        targetRef.current = target;\n      }\n    }\n    previousTargetProp.current = target;\n  }\n  return [targetRef, targetWindow];\n}","map":{"version":3,"sources":["useTarget.ts"],"names":[],"mappings":"AAAA,SAAS,WAAW,QAA0B,qBAAqB;AACnE,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,SAAS,QAAQ,iCAAiC;AAI3D;;;;;;AAMG;AACH,OAAM,SAAU,SAAS,CACvB,MAA0B,EAC1B,WAA8C,EAAA;;EAE9C,IAAM,kBAAkB,GAAG,KAAK,CAAC,MAAM,CAAA,CAEpC;EAEH,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAkD,IAAI,CAAC;EACrF;;;AAGG;EACH,IAAM,YAAY,GAAG,SAAS,CAAA,CAAE;EAEhC;EACA;EACA;EACA,IAAI,CAAC,MAAM,IAAI,MAAM,KAAK,kBAAkB,CAAC,OAAO,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;IAClF,IAAM,cAAc,GAAA,CAAA,EAAA,GAAG,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO;IAC3C,IAAI,MAAM,EAAE;MACV,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,IAAM,UAAU,GAAa,WAAW,CAAC,cAAc,CAAE;QACzD,SAAS,CAAC,OAAO,GAAG,UAAU,GAAG,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,IAAI;OACzE,MAAM,IAAI,iBAAiB,IAAI,MAAM,EAAE;QACtC,SAAS,CAAC,OAAO,GAAG,MAAM;OAC3B,MAAM,IAAI,uBAAuB,IAAI,MAAM,EAAE;QAC5C,SAAS,CAAC,OAAO,GAAG,MAAM;OAC3B,MAAM,IAAI,SAAS,IAAI,MAAM,EAAE;QAC9B,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;OACnC,MAAM;QACL,SAAS,CAAC,OAAO,GAAG,MAAM;MAC3B;IACF;IACD,kBAAkB,CAAC,OAAO,GAAG,MAAM;EACpC;EAED,OAAO,CAAC,SAAS,EAAE,YAAY,CAAU;AAC3C","sourcesContent":["import { getDocument, Point, Rectangle } from '@uifabric/utilities';\nimport * as React from 'react';\nimport { useWindow } from '@fluentui/react-window-provider';\n\nexport type Target = Element | string | MouseEvent | Point | Rectangle | null | React.RefObject<Element>;\n\n/**\n * Hook to calculate and cache the target element specified by the given target attribute,\n * as well as the target element's (or host element's) parent window\n * @param target- Target selector passed to the component as a property, describing the element that\n * the callout should target\n * @param hostElement- The callout's host element, used for determining the parent window.\n */\nexport function useTarget<TElement extends HTMLElement = HTMLElement>(\n  target: Target | undefined,\n  hostElement?: React.RefObject<TElement | null>,\n): Readonly<[React.RefObject<Element | MouseEvent | Point | Rectangle | null>, Window | undefined]> {\n  const previousTargetProp = React.useRef<\n    Element | string | MouseEvent | Point | Rectangle | React.RefObject<Element> | null | undefined\n  >();\n\n  const targetRef = React.useRef<Element | MouseEvent | Point | Rectangle | null>(null);\n  /**\n   * Stores an instance of Window, used to check\n   * for server side rendering and if focus was lost.\n   */\n  const targetWindow = useWindow();\n\n  // If the target element changed, find the new one. If we are tracking\n  // target with class name, always find element because we do not know if\n  // fabric has rendered a new element and disposed the old element.\n  if (!target || target !== previousTargetProp.current || typeof target === 'string') {\n    const currentElement = hostElement?.current;\n    if (target) {\n      if (typeof target === 'string') {\n        const currentDoc: Document = getDocument(currentElement)!;\n        targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;\n      } else if ('stopPropagation' in target) {\n        targetRef.current = target;\n      } else if ('getBoundingClientRect' in target) {\n        targetRef.current = target;\n      } else if ('current' in target) {\n        targetRef.current = target.current;\n      } else {\n        targetRef.current = target;\n      }\n    }\n    previousTargetProp.current = target;\n  }\n\n  return [targetRef, targetWindow] as const;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}