{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { useConst, usePrevious } from '@uifabric/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\nexport function useKeytipData(options) {\n  var uniqueId = React.useRef();\n  var keytipProps = options.keytipProps ? __assign({\n    disabled: options.disabled\n  }, options.keytipProps) : undefined;\n  var keytipManager = useConst(KeytipManager.getInstance());\n  var prevOptions = usePrevious(options);\n  // useLayoutEffect used to strictly emulate didUpdate/didMount behavior\n  React.useLayoutEffect(function () {\n    var _a, _b;\n    if (uniqueId.current && keytipProps && (((_a = prevOptions) === null || _a === void 0 ? void 0 : _a.keytipProps) !== options.keytipProps || ((_b = prevOptions) === null || _b === void 0 ? void 0 : _b.disabled) !== options.disabled)) {\n      keytipManager.update(keytipProps, uniqueId.current);\n    }\n  });\n  React.useLayoutEffect(function () {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n    return function () {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);\n    };\n    // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var nativeKeytipProps = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined\n  };\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n  return nativeKeytipProps;\n}\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\nfunction getKeytipData(keytipManager, keytipProps, describedByPrepend) {\n  // Add the parent overflow sequence if necessary\n  var newKeytipProps = keytipManager.addParentOverflow(keytipProps);\n  // Construct aria-describedby and data-ktp-id attributes\n  var ariaDescribedBy = mergeAriaAttributeValues(describedByPrepend, getAriaDescribedBy(newKeytipProps.keySequences));\n  var keySequences = __spreadArrays(newKeytipProps.keySequences);\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n  var keytipId = sequencesToID(keySequences);\n  return {\n    ariaDescribedBy: ariaDescribedBy,\n    keytipId: keytipId\n  };\n}","map":{"version":3,"sources":["components/KeytipData/useKeytipData.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,QAAQ,EAAE,WAAW,QAAQ,uBAAuB;AAC7D,SAAS,wBAAwB,QAAQ,iBAAiB;AAG1D,SAAS,aAAa,EAAE,cAAc,EAAE,aAAa,EAAE,kBAAkB,QAAQ,+BAA+B;AAOhH;;AAEG;AACH,OAAM,SAAU,aAAa,CAAC,OAA0B,EAAA;EACtD,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAA,CAAU;EACvC,IAAM,WAAW,GAA6B,OAAO,CAAC,WAAW,GAC9D,QAAA,CAAA;IACG,QAAQ,EAAE,OAAO,CAAC;EAAQ,CAAA,EACvB,OAAO,CAAC,WAAW,CAAA,GAExB,SAAS;EAEb,IAAM,aAAa,GAAG,QAAQ,CAAgB,aAAa,CAAC,WAAW,CAAA,CAAE,CAAC;EAC1E,IAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC;EAExC;EACA,KAAK,CAAC,eAAe,CAAC,YAAA;;IACpB,IACE,QAAQ,CAAC,OAAO,IAChB,WAAW,KACV,CAAA,CAAA,EAAA,GAAA,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,MAAK,OAAO,CAAC,WAAW,IAAI,CAAA,CAAA,EAAA,GAAA,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,MAAK,OAAO,CAAC,QAAQ,CAAC,EAChG;MACA,aAAa,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC;IACpD;EACH,CAAC,CAAC;EAEF,KAAK,CAAC,eAAe,CAAC,YAAA;IACpB;IACA,IAAI,WAAW,EAAE;MACf,QAAQ,CAAC,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC;IACvD;IAED,OAAO,YAAA;MACL;MACA,WAAW,IAAI,aAAa,CAAC,UAAU,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAQ,CAAC;IACzE,CAAC;IACD;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,iBAAiB,GAAgB;IACnC,eAAe,EAAE,SAAS;IAC1B,QAAQ,EAAE;GACX;EAED,IAAI,WAAW,EAAE;IACf,iBAAiB,GAAG,aAAa,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,CAAC,eAAe,CAAC;EACvF;EAED,OAAO,iBAAiB;AAC1B;AAEA;;;;AAIG;AACH,SAAS,aAAa,CACpB,aAA4B,EAC5B,WAAyB,EACzB,kBAA2B,EAAA;EAE3B;EACA,IAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,WAAW,CAAC;EAEnE;EACA,IAAM,eAAe,GAAG,wBAAwB,CAC9C,kBAAkB,EAClB,kBAAkB,CAAC,cAAc,CAAC,YAAY,CAAC,CAC/C;EAEF,IAAI,YAAY,GAAA,cAAA,CAAO,cAAc,CAAC,YAAY,CAAC;EACnD,IAAI,cAAc,CAAC,mBAAmB,EAAE;IACtC,YAAY,GAAG,cAAc,CAAC,YAAY,EAAE,cAAc,CAAC,mBAAmB,CAAC;EAChF;EACD,IAAM,QAAQ,GAAG,aAAa,CAAC,YAAY,CAAC;EAE5C,OAAO;IACL,eAAe,EAAA,eAAA;IACf,QAAQ,EAAA;GACT;AACH","sourcesContent":["import * as React from 'react';\nimport { useConst, usePrevious } from '@uifabric/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipDataOptions } from './KeytipData.types';\nimport { IKeytipProps } from '../../Keytip';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\n\nexport interface IKeytipData {\n  ariaDescribedBy: string | undefined;\n  keytipId: string | undefined;\n}\n\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\nexport function useKeytipData(options: KeytipDataOptions): IKeytipData {\n  const uniqueId = React.useRef<string>();\n  const keytipProps: IKeytipProps | undefined = options.keytipProps\n    ? {\n        disabled: options.disabled,\n        ...options.keytipProps,\n      }\n    : undefined;\n\n  const keytipManager = useConst<KeytipManager>(KeytipManager.getInstance());\n  const prevOptions = usePrevious(options);\n\n  // useLayoutEffect used to strictly emulate didUpdate/didMount behavior\n  React.useLayoutEffect(() => {\n    if (\n      uniqueId.current &&\n      keytipProps &&\n      (prevOptions?.keytipProps !== options.keytipProps || prevOptions?.disabled !== options.disabled)\n    ) {\n      keytipManager.update(keytipProps, uniqueId.current);\n    }\n  });\n\n  React.useLayoutEffect(() => {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n\n    return () => {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current!);\n    };\n    // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let nativeKeytipProps: IKeytipData = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined,\n  };\n\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n\n  return nativeKeytipProps;\n}\n\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\nfunction getKeytipData(\n  keytipManager: KeytipManager,\n  keytipProps: IKeytipProps,\n  describedByPrepend?: string,\n): IKeytipData {\n  // Add the parent overflow sequence if necessary\n  const newKeytipProps = keytipManager.addParentOverflow(keytipProps);\n\n  // Construct aria-describedby and data-ktp-id attributes\n  const ariaDescribedBy = mergeAriaAttributeValues(\n    describedByPrepend,\n    getAriaDescribedBy(newKeytipProps.keySequences),\n  )!;\n\n  let keySequences = [...newKeytipProps.keySequences];\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n  const keytipId = sequencesToID(keySequences);\n\n  return {\n    ariaDescribedBy,\n    keytipId,\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}