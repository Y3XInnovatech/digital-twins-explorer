{"ast":null,"code":"var _jsxFileName = \"/home/saharsh/digital-twins-explorer/client/src/components/ModelViewerComponent/ModelViewerComponent.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { Component } from \"react\";\nimport { TextField, Selection, SelectionMode, SelectionZone } from \"office-ui-fabric-react\";\nimport { withTranslation } from \"react-i18next\";\nimport ModelViewerCommandBarComponent from \"./ModelViewerCommandBarComponent/ModelViewerCommandBarComponent\";\nimport { ModelViewerViewComponent } from \"./ModelViewerViewComponent/ModelViewerViewComponent\";\nimport { ModelViewerCreateComponent } from \"./ModelViewerCreateComponent/ModelViewerCreateComponent\";\nimport { ModelViewerDeleteComponent } from \"./ModelViewerDeleteComponent/ModelViewerDeleteComponent\";\nimport { ModelViewerUpdateModelImageComponent } from \"./ModelViewerUpdateModelImageComponent/ModelViewerUpdateModelImageComponent\";\nimport LoaderComponent from \"../LoaderComponent/LoaderComponent\";\nimport { readFile, sortArray } from \"../../utils/utilities\";\nimport { print } from \"../../services/LoggingService\";\nimport ModelViewerItem from \"./ModelViewerItem/ModelViewerItem\";\nimport { apiService } from \"../../services/ApiService\";\nimport { eventService } from \"../../services/EventService\";\nimport { ModelService } from \"../../services/ModelService\";\nimport { settingsService } from \"../../services/SettingsService\";\nimport { configService } from \"../../services/ConfigService\";\nimport \"./ModelViewerComponent.scss\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass ModelViewerComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.onFilterChanged = (_, text) => {\n      this.setState({\n        filterText: text,\n        items: text ? this.originalItems.filter(item => item.key.toLowerCase().indexOf(text.toLowerCase()) >= 0) : this.originalItems\n      });\n    };\n    this.handleUpload = async evt => {\n      const files = evt.target.files;\n      this.setState({\n        isLoading: true,\n        isUploadingModels: true\n      });\n      print(\"*** Uploading selected models\", \"info\");\n      const list = [];\n      try {\n        for (const file of files) {\n          if (file.type === \"application/json\") {\n            print(`- working on ${file.name}`);\n            const dtdl = await readFile(file);\n            if (dtdl.length) {\n              dtdl.forEach(model => list.push(model));\n            } else {\n              list.push(dtdl);\n            }\n          }\n        }\n      } catch (exc) {\n        exc.customMessage = \"Parsing error\";\n        eventService.publishError(exc);\n      }\n      if (list.length > 0) {\n        await this.addModels(list);\n      }\n      this.setState({\n        isLoading: false,\n        isUploadingModels: false\n      });\n      await this.retrieveModels();\n      if (this.uploadModelRef.current) {\n        this.uploadModelRef.current.value = \"\";\n      }\n      if (this.uploadModelFolderRef.current) {\n        this.uploadModelFolderRef.current.value = \"\";\n      }\n    };\n    this.addModels = async list => {\n      let sortedModels = [];\n      try {\n        const {\n          items\n        } = this.state;\n        const modelService = new ModelService();\n        const sortedModelsId = await modelService.getModelIdsForUpload(list);\n        sortedModels = sortedModelsId.map(id => list.find(model => model[\"@id\"] === id)).filter(m => !!m);\n        sortedModels = sortedModels.filter(model => !items.some(item => item.key === model[\"@id\"]));\n        let uploadResults = [];\n        if (sortedModels && sortedModels.length > 0) {\n          const chunks = modelService.chunkModelsList(sortedModels, 50);\n          for (const chunk of chunks) {\n            const res = await this.createModels(chunk);\n            if (Array.isArray(res)) {\n              uploadResults = [...uploadResults, ...res];\n            }\n          }\n        }\n        if (typeof this.props.onModelUploadSuccess === \"function\" && uploadResults.length > 0) {\n          this.props.onModelUploadSuccess(uploadResults);\n        }\n      } catch (exc) {\n        exc.customMessage = \"Upload error\";\n        eventService.publishError(exc);\n      }\n    };\n    this.handleUploadOfModelImages = async evt => {\n      const files = evt.target.files;\n      this.setState({\n        isLoading: true\n      });\n      print(\"*** Uploading model images\", \"info\");\n      try {\n        // Get updated list of models\n        const models = await apiService.queryModels();\n        for (const file of files) {\n          print(`- checking image: ${file.name}`);\n          const fileNameWithoutExtension = file.name.split(\".\").slice(0, -1).join(\".\").toLowerCase();\n          const matchedModels = models.filter(model => {\n            const formattedModelName = model.id.toLowerCase().replace(/:/g, \"_\").replace(/;/g, \"-\");\n            return formattedModelName === fileNameWithoutExtension;\n          });\n          if (matchedModels.length > 0) {\n            const id = matchedModels[0].id;\n            print(`*** Uploading model image for ${id}`, \"info\");\n            await new Promise(resolve => {\n              const fileReader = new FileReader();\n              fileReader.onload = () => {\n                settingsService.setModelImage(id, fileReader.result);\n                eventService.publishModelIconUpdate(id);\n                print(`*** Model image uploaded for ${id}`, \"info\");\n                resolve();\n              };\n              fileReader.readAsDataURL(file);\n            });\n          }\n        }\n      } catch (exc) {\n        exc.customMessage = \"Error fetching models\";\n        eventService.publishError(exc);\n      }\n      this.setState({\n        isLoading: false\n      });\n      this.uploadModelImagesRef.current.value = \"\";\n    };\n    this.onSetModelImage = (evt, item, ref) => {\n      const imageFile = evt.target.files[0];\n      const fileReader = new FileReader();\n      fileReader.addEventListener(\"load\", () => {\n        settingsService.setModelImage(item.key, fileReader.result);\n        eventService.publishModelIconUpdate(item.key);\n        ref.current.value = \"\";\n        this.setState({\n          isLoading: false\n        });\n      });\n      if (imageFile) {\n        fileReader.readAsDataURL(imageFile);\n      }\n    };\n    this.onUpdateModelImage = (item, inputFileRef) => {\n      this.updateModelImageRef.current.open(item);\n      this.inputFileRef = inputFileRef.current;\n    };\n    this.onDeleteModelImage = modelId => {\n      this.setState({\n        isLoading: true\n      });\n      print(`*** Removing model image for ${modelId}`, \"info\");\n      settingsService.deleteModelImage(modelId);\n      eventService.publishModelIconUpdate(modelId);\n      this.setState({\n        isLoading: false\n      });\n    };\n    this.onReplaceModelImage = modelId => {\n      print(`*** Replacing model image for ${modelId}`, \"info\");\n      this.inputFileRef.click();\n    };\n    this.onView = item => this.viewRef.current.open(item);\n    this.onCreate = item => this.createRef.current.open(item);\n    this.onDelete = item => this.deleteRef.current.open(item);\n    this.onSelect = clickedItem => {\n      const {\n        items\n      } = this.state;\n      let currentSelectedItem = null;\n      const updatedItems = items.map(item => {\n        item.selected = item.key === clickedItem.key ? !clickedItem.selected : false;\n        if (item.selected) {\n          currentSelectedItem = item;\n        }\n        return item;\n      });\n      this.setState({\n        items: updatedItems\n      });\n      eventService.publishSelectModel(currentSelectedItem);\n    };\n    this.onFocus = item => {\n      eventService.publishFocusModel(item.key);\n    };\n    this.onBlur = item => eventService.publishBlurModel(item.key);\n    this.onTab = (itemIndex, e) => {\n      this.lastFocusedItemIndex = itemIndex;\n      eventService.publishFocusRelationshipsToggle(e);\n    };\n    this.onArrowUp = itemIndex => {\n      const prevItemToFocus = this.modelViewerItems[itemIndex - 1];\n      if (prevItemToFocus) {\n        prevItemToFocus.focus();\n      }\n    };\n    this.onArrowDown = itemIndex => {\n      const nextItemToFocus = this.modelViewerItems[itemIndex + 1];\n      if (nextItemToFocus) {\n        nextItemToFocus.focus();\n      }\n    };\n    this.setModelViewerItemRef = (itemRef, index) => {\n      this.modelViewerItems[index] = itemRef;\n    };\n    this.state = {\n      items: [],\n      filterText: \"\",\n      isLoading: false,\n      isUploadingModels: false\n    };\n    this.originalItems = [];\n    this.uploadModelRef = /*#__PURE__*/React.createRef();\n    this.uploadModelFolderRef = /*#__PURE__*/React.createRef();\n    this.uploadModelImagesRef = /*#__PURE__*/React.createRef();\n    this.createRef = /*#__PURE__*/React.createRef();\n    this.viewRef = /*#__PURE__*/React.createRef();\n    this.deleteRef = /*#__PURE__*/React.createRef();\n    this.selectRef = /*#__PURE__*/React.createRef();\n    this.updateModelImageRef = /*#__PURE__*/React.createRef();\n    this.modelViewerItems = [];\n    this.inputFileRef = null;\n    this.lastFocusedItemIndex = null;\n  }\n  async componentDidMount() {\n    eventService.subscribeDeleteModel(id => {\n      if (id) {\n        this.originalItems.splice(this.originalItems.findIndex(i => i.key === id), 1);\n        const items = this.originalItems;\n        this.setState({\n          items,\n          filterText: \"\"\n        });\n      }\n    });\n    eventService.subscribeCreateModel(() => {\n      const {\n        isUploadingModels\n      } = this.state;\n      if (!isUploadingModels) {\n        this.retrieveModels();\n      }\n    });\n    let config = {};\n    try {\n      config = await configService.getConfig();\n    } catch (exc) {\n      config = {};\n    }\n    if (config.appAdtUrl) {\n      await this.retrieveModels();\n    }\n    eventService.subscribeConfigure(evt => {\n      if (evt.type === \"end\" && evt.config) {\n        this.retrieveModels();\n      }\n    });\n    eventService.subscribeClearModelsData(() => {\n      this.setState({\n        items: [],\n        isLoading: false\n      });\n    });\n    eventService.subscribeModelSelectionUpdatedInGraph(modelId => {\n      this.updateModelItemSelection(modelId);\n    });\n    eventService.subscribeFocusModelViewer(() => {\n      this.modelViewerItems[this.lastFocusedItemIndex ? this.lastFocusedItemIndex : 0].focus();\n    });\n    eventService.subscribeModelsUpdate(() => {\n      this.retrieveModels();\n    });\n  }\n  updateModelItemSelection(modelId) {\n    const {\n      items\n    } = this.state;\n    const updatedItems = items.map(item => {\n      item.selected = modelId && item.key === modelId;\n      return item;\n    });\n    this.setState({\n      items: updatedItems\n    });\n  }\n  async retrieveModels() {\n    this.setState({\n      isLoading: true,\n      filterText: \"\"\n    });\n    let list = [];\n    try {\n      list = await apiService.queryModels(true);\n    } catch (exc) {\n      exc.customMessage = \"Error fetching models\";\n      eventService.publishError(exc);\n    }\n    const items = list.map(m => ({\n      displayName: m.displayName && m.displayName.en || m.id,\n      key: m.id,\n      selected: false\n    }));\n    sortArray(items, \"displayName\", \"key\");\n    this.originalItems = items.slice(0, items.length);\n    settingsService.setModelColors(items.map(item => item.key));\n    this.setState({\n      items,\n      isLoading: false\n    });\n  }\n  createModels(models) {\n    return apiService.addModels(models).then(res => {\n      print(\"*** Upload result:\", \"info\");\n      print(JSON.stringify(res, null, 2), \"info\");\n      eventService.publishCreateModel(models);\n      return res;\n    }).catch(exc => {\n      exc.customMessage = \"Error adding models\";\n      eventService.publishError(exc);\n      throw exc;\n    });\n  }\n  render() {\n    const {\n      items,\n      isLoading,\n      filterText\n    } = this.state;\n    const {\n      showItemMenu\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mv-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mv-toolbar\",\n          children: [/*#__PURE__*/_jsxDEV(ModelViewerCommandBarComponent, {\n            className: \"mv-commandbar\",\n            buttonClass: \"mv-toolbarButtons\",\n            onDownloadModelsClicked: () => this.retrieveModels(),\n            onUploadModelClicked: () => this.uploadModelRef.current.click(),\n            onUploadModelsFolderClicked: () => this.uploadModelFolderRef.current.click(),\n            onUploadModelImagesClicked: () => this.uploadModelImagesRef.current.click()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"json-file-input\",\n            type: \"file\",\n            name: \"name\",\n            className: \"mv-fileInput\",\n            multiple: true,\n            accept: \".json\",\n            ref: this.uploadModelRef,\n            onChange: this.handleUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"directory-input\",\n            type: \"file\",\n            name: \"name\",\n            className: \"mv-fileInput\",\n            webkitdirectory: \"\",\n            mozdirectory: \"true\",\n            directory: \"\",\n            ref: this.uploadModelFolderRef,\n            onChange: this.handleUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"image-file-input\",\n            type: \"file\",\n            name: \"name\",\n            className: \"mv-fileInput\",\n            multiple: true,\n            accept: \"image/png, image/jpeg\",\n            ref: this.uploadModelImagesRef,\n            onChange: this.handleUploadOfModelImages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            className: \"mv-filter\",\n            onChange: this.onFilterChanged,\n            styles: this.getStyles,\n            placeholder: this.props.t(\"modelViewerCommandBarComponent.searchPlaceholder\"),\n            value: filterText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          \"data-is-scrollable\": \"true\",\n          className: \"mv-modelListWrapper\",\n          children: /*#__PURE__*/_jsxDEV(SelectionZone, {\n            selection: new Selection({\n              selectionMode: SelectionMode.single\n            }),\n            children: items.map((item, index) => {\n              const modelImage = settingsService.getModelImage(item.key);\n              return /*#__PURE__*/_jsxDEV(ModelViewerItem, {\n                item: item,\n                itemIndex: index,\n                isSelected: item.selected,\n                showItemMenu: showItemMenu,\n                modelImage: modelImage,\n                onUpdateModelImage: this.onUpdateModelImage,\n                onSetModelImage: this.onSetModelImage,\n                setRef: ref => this.setModelViewerItemRef(ref, index),\n                onView: () => this.onView(item),\n                onCreate: () => this.onCreate(item),\n                onDelete: () => this.onDelete(item),\n                onSelect: () => this.onSelect(item),\n                onFocus: () => this.onFocus(item),\n                onBlur: () => this.onBlur(item),\n                onTab: e => this.onTab(index, e),\n                onArrowUp: () => this.onArrowUp(index),\n                onArrowDown: () => this.onArrowDown(index)\n              }, item.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(LoaderComponent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModelViewerViewComponent, {\n        ref: this.viewRef,\n        t: this.props.t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModelViewerCreateComponent, {\n        ref: this.createRef,\n        t: this.props.t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModelViewerDeleteComponent, {\n        ref: this.deleteRef,\n        t: this.props.t\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModelViewerUpdateModelImageComponent, {\n        ref: this.updateModelImageRef,\n        onDelete: this.onDeleteModelImage,\n        onReplace: this.onReplaceModelImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}\nexport default withTranslation()(ModelViewerComponent);","map":{"version":3,"names":["React","Component","TextField","Selection","SelectionMode","SelectionZone","withTranslation","ModelViewerCommandBarComponent","ModelViewerViewComponent","ModelViewerCreateComponent","ModelViewerDeleteComponent","ModelViewerUpdateModelImageComponent","LoaderComponent","readFile","sortArray","print","ModelViewerItem","apiService","eventService","ModelService","settingsService","configService","jsxDEV","_jsxDEV","Fragment","_Fragment","ModelViewerComponent","constructor","props","onFilterChanged","_","text","setState","filterText","items","originalItems","filter","item","key","toLowerCase","indexOf","handleUpload","evt","files","target","isLoading","isUploadingModels","list","file","type","name","dtdl","length","forEach","model","push","exc","customMessage","publishError","addModels","retrieveModels","uploadModelRef","current","value","uploadModelFolderRef","sortedModels","state","modelService","sortedModelsId","getModelIdsForUpload","map","id","find","m","some","uploadResults","chunks","chunkModelsList","chunk","res","createModels","Array","isArray","onModelUploadSuccess","handleUploadOfModelImages","models","queryModels","fileNameWithoutExtension","split","slice","join","matchedModels","formattedModelName","replace","Promise","resolve","fileReader","FileReader","onload","setModelImage","result","publishModelIconUpdate","readAsDataURL","uploadModelImagesRef","onSetModelImage","ref","imageFile","addEventListener","onUpdateModelImage","inputFileRef","updateModelImageRef","open","onDeleteModelImage","modelId","deleteModelImage","onReplaceModelImage","click","onView","viewRef","onCreate","createRef","onDelete","deleteRef","onSelect","clickedItem","currentSelectedItem","updatedItems","selected","publishSelectModel","onFocus","publishFocusModel","onBlur","publishBlurModel","onTab","itemIndex","e","lastFocusedItemIndex","publishFocusRelationshipsToggle","onArrowUp","prevItemToFocus","modelViewerItems","focus","onArrowDown","nextItemToFocus","setModelViewerItemRef","itemRef","index","selectRef","componentDidMount","subscribeDeleteModel","splice","findIndex","i","subscribeCreateModel","config","getConfig","appAdtUrl","subscribeConfigure","subscribeClearModelsData","subscribeModelSelectionUpdatedInGraph","updateModelItemSelection","subscribeFocusModelViewer","subscribeModelsUpdate","displayName","en","setModelColors","then","JSON","stringify","publishCreateModel","catch","render","showItemMenu","children","className","buttonClass","onDownloadModelsClicked","onUploadModelClicked","onUploadModelsFolderClicked","onUploadModelImagesClicked","fileName","_jsxFileName","lineNumber","columnNumber","multiple","accept","onChange","webkitdirectory","mozdirectory","directory","styles","getStyles","placeholder","t","selection","selectionMode","single","modelImage","getModelImage","isSelected","setRef","onReplace"],"sources":["/home/saharsh/digital-twins-explorer/client/src/components/ModelViewerComponent/ModelViewerComponent.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { Component } from \"react\";\nimport { TextField, Selection, SelectionMode, SelectionZone } from \"office-ui-fabric-react\";\nimport { withTranslation } from \"react-i18next\";\n\nimport ModelViewerCommandBarComponent from \"./ModelViewerCommandBarComponent/ModelViewerCommandBarComponent\";\nimport { ModelViewerViewComponent } from \"./ModelViewerViewComponent/ModelViewerViewComponent\";\nimport { ModelViewerCreateComponent } from \"./ModelViewerCreateComponent/ModelViewerCreateComponent\";\nimport { ModelViewerDeleteComponent } from \"./ModelViewerDeleteComponent/ModelViewerDeleteComponent\";\nimport { ModelViewerUpdateModelImageComponent } from \"./ModelViewerUpdateModelImageComponent/ModelViewerUpdateModelImageComponent\";\nimport LoaderComponent from \"../LoaderComponent/LoaderComponent\";\nimport { readFile, sortArray } from \"../../utils/utilities\";\nimport { print } from \"../../services/LoggingService\";\nimport ModelViewerItem from \"./ModelViewerItem/ModelViewerItem\";\nimport { apiService } from \"../../services/ApiService\";\nimport { eventService } from \"../../services/EventService\";\nimport { ModelService } from \"../../services/ModelService\";\nimport { settingsService } from \"../../services/SettingsService\";\nimport { configService } from \"../../services/ConfigService\";\n\nimport \"./ModelViewerComponent.scss\";\n\nclass ModelViewerComponent extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      filterText: \"\",\n      isLoading: false,\n      isUploadingModels: false\n    };\n\n    this.originalItems = [];\n    this.uploadModelRef = React.createRef();\n    this.uploadModelFolderRef = React.createRef();\n    this.uploadModelImagesRef = React.createRef();\n    this.createRef = React.createRef();\n    this.viewRef = React.createRef();\n    this.deleteRef = React.createRef();\n    this.selectRef = React.createRef();\n    this.updateModelImageRef = React.createRef();\n    this.modelViewerItems = [];\n    this.inputFileRef = null;\n    this.lastFocusedItemIndex = null;\n  }\n\n  async componentDidMount() {\n    eventService.subscribeDeleteModel(id => {\n      if (id) {\n        this.originalItems.splice(this.originalItems.findIndex(i => i.key === id), 1);\n        const items = this.originalItems;\n        this.setState({ items, filterText: \"\" });\n      }\n    });\n\n    eventService.subscribeCreateModel(() => {\n      const { isUploadingModels } = this.state;\n      if (!isUploadingModels) {\n        this.retrieveModels();\n      }\n    });\n\n    let config = {};\n    try {\n      config = await configService.getConfig();\n    } catch (exc) {\n      config = {};\n    }\n\n    if (config.appAdtUrl) {\n      await this.retrieveModels();\n    }\n\n    eventService.subscribeConfigure(evt => {\n      if (evt.type === \"end\" && evt.config) {\n        this.retrieveModels();\n      }\n    });\n\n    eventService.subscribeClearModelsData(() => {\n      this.setState({ items: [], isLoading: false });\n    });\n\n    eventService.subscribeModelSelectionUpdatedInGraph(modelId => {\n      this.updateModelItemSelection(modelId);\n    });\n\n    eventService.subscribeFocusModelViewer(() => {\n      this.modelViewerItems[this.lastFocusedItemIndex ? this.lastFocusedItemIndex : 0].focus();\n    });\n\n    eventService.subscribeModelsUpdate(() => {\n      this.retrieveModels();\n    });\n  }\n\n  updateModelItemSelection(modelId) {\n    const { items } = this.state;\n    const updatedItems = items.map(item => {\n      item.selected = modelId && item.key === modelId;\n      return item;\n    });\n    this.setState({ items: updatedItems });\n  }\n\n  async retrieveModels() {\n    this.setState({ isLoading: true, filterText: \"\" });\n\n    let list = [];\n    try {\n      list = await apiService.queryModels(true);\n    } catch (exc) {\n      exc.customMessage = \"Error fetching models\";\n      eventService.publishError(exc);\n    }\n\n    const items = list.map(m => ({\n      displayName: (m.displayName && m.displayName.en) || m.id,\n      key: m.id,\n      selected: false\n    }));\n    sortArray(items, \"displayName\", \"key\");\n\n    this.originalItems = items.slice(0, items.length);\n    settingsService.setModelColors(items.map(item => item.key));\n    this.setState({ items, isLoading: false });\n  }\n\n  onFilterChanged = (_, text) => {\n    this.setState({\n      filterText: text,\n      items: text ? this.originalItems.filter(item => item.key.toLowerCase().indexOf(text.toLowerCase()) >= 0) : this.originalItems\n    });\n  }\n\n  handleUpload = async evt => {\n    const files = evt.target.files;\n    this.setState({ isLoading: true, isUploadingModels: true });\n    print(\"*** Uploading selected models\", \"info\");\n    const list = [];\n    try {\n      for (const file of files) {\n        if (file.type === \"application/json\") {\n          print(`- working on ${file.name}`);\n          const dtdl = await readFile(file);\n          if (dtdl.length) {\n            dtdl.forEach(model => list.push(model));\n          } else {\n            list.push(dtdl);\n          }\n        }\n      }\n    } catch (exc) {\n      exc.customMessage = \"Parsing error\";\n      eventService.publishError(exc);\n    }\n\n    if (list.length > 0) {\n      await this.addModels(list);\n    }\n\n    this.setState({ isLoading: false, isUploadingModels: false });\n    await this.retrieveModels();\n    if (this.uploadModelRef.current) {\n      this.uploadModelRef.current.value = \"\";\n    }\n    if (this.uploadModelFolderRef.current) {\n      this.uploadModelFolderRef.current.value = \"\";\n    }\n  }\n\n  addModels = async list => {\n    let sortedModels = [];\n    try {\n      const { items } = this.state;\n      const modelService = new ModelService();\n      const sortedModelsId = await modelService.getModelIdsForUpload(list);\n      sortedModels = sortedModelsId.map(id => list.find(model => model[\"@id\"] === id)).filter(m => !!m);\n      sortedModels = sortedModels.filter(model => !items.some(item => item.key === model[\"@id\"]));\n      let uploadResults = [];\n      if (sortedModels && sortedModels.length > 0) {\n        const chunks = modelService.chunkModelsList(sortedModels, 50);\n        for (const chunk of chunks) {\n          const res = await this.createModels(chunk);\n          if (Array.isArray(res)) {\n            uploadResults = [ ...uploadResults, ...res ];\n          }\n        }\n      }\n\n      if (typeof this.props.onModelUploadSuccess === \"function\" && uploadResults.length > 0) {\n        this.props.onModelUploadSuccess(uploadResults);\n      }\n    } catch (exc) {\n      exc.customMessage = \"Upload error\";\n      eventService.publishError(exc);\n    }\n  }\n\n  createModels(models) {\n    return apiService.addModels(models)\n      .then(res => {\n        print(\"*** Upload result:\", \"info\");\n        print(JSON.stringify(res, null, 2), \"info\");\n        eventService.publishCreateModel(models);\n        return res;\n      })\n      .catch(exc => {\n        exc.customMessage = \"Error adding models\";\n        eventService.publishError(exc);\n        throw exc;\n      });\n  }\n\n  handleUploadOfModelImages = async evt => {\n    const files = evt.target.files;\n    this.setState({ isLoading: true });\n    print(\"*** Uploading model images\", \"info\");\n    try {\n      // Get updated list of models\n      const models = await apiService.queryModels();\n      for (const file of files) {\n        print(`- checking image: ${file.name}`);\n        const fileNameWithoutExtension = file.name.split(\".\")\n          .slice(0, -1)\n          .join(\".\")\n          .toLowerCase();\n        const matchedModels = models.filter(model => {\n          const formattedModelName = model.id.toLowerCase().replace(/:/g, \"_\")\n            .replace(/;/g, \"-\");\n          return formattedModelName === fileNameWithoutExtension;\n        });\n        if (matchedModels.length > 0) {\n          const id = matchedModels[0].id;\n          print(`*** Uploading model image for ${id}`, \"info\");\n          await new Promise(resolve => {\n            const fileReader = new FileReader();\n            fileReader.onload = () => {\n              settingsService.setModelImage(id, fileReader.result);\n              eventService.publishModelIconUpdate(id);\n              print(`*** Model image uploaded for ${id}`, \"info\");\n              resolve();\n            };\n            fileReader.readAsDataURL(file);\n          });\n        }\n      }\n    } catch (exc) {\n      exc.customMessage = \"Error fetching models\";\n      eventService.publishError(exc);\n    }\n\n    this.setState({ isLoading: false });\n    this.uploadModelImagesRef.current.value = \"\";\n  }\n\n  onSetModelImage = (evt, item, ref) => {\n    const imageFile = evt.target.files[0];\n    const fileReader = new FileReader();\n\n    fileReader.addEventListener(\"load\", () => {\n      settingsService.setModelImage(item.key, fileReader.result);\n      eventService.publishModelIconUpdate(item.key);\n      ref.current.value = \"\";\n      this.setState({ isLoading: false });\n    });\n\n    if (imageFile) {\n      fileReader.readAsDataURL(imageFile);\n    }\n  }\n\n  onUpdateModelImage = (item, inputFileRef) => {\n    this.updateModelImageRef.current.open(item);\n    this.inputFileRef = inputFileRef.current;\n  }\n\n  onDeleteModelImage = modelId => {\n    this.setState({ isLoading: true });\n    print(`*** Removing model image for ${modelId}`, \"info\");\n    settingsService.deleteModelImage(modelId);\n    eventService.publishModelIconUpdate(modelId);\n    this.setState({ isLoading: false });\n  }\n\n  onReplaceModelImage = modelId => {\n    print(`*** Replacing model image for ${modelId}`, \"info\");\n    this.inputFileRef.click();\n  }\n\n  onView = item => this.viewRef.current.open(item)\n\n  onCreate = item => this.createRef.current.open(item)\n\n  onDelete = item => this.deleteRef.current.open(item)\n\n  onSelect = clickedItem => {\n    const { items } = this.state;\n    let currentSelectedItem = null;\n    const updatedItems = items.map(item => {\n      item.selected = item.key === clickedItem.key ? !clickedItem.selected : false;\n      if (item.selected) {\n        currentSelectedItem = item;\n      }\n      return item;\n    });\n    this.setState({ items: updatedItems });\n    eventService.publishSelectModel(currentSelectedItem);\n  }\n\n  onFocus = item => {\n    eventService.publishFocusModel(item.key);\n  }\n\n  onBlur = item => eventService.publishBlurModel(item.key);\n\n  onTab = (itemIndex, e) => {\n    this.lastFocusedItemIndex = itemIndex;\n    eventService.publishFocusRelationshipsToggle(e);\n  }\n\n  onArrowUp = itemIndex => {\n    const prevItemToFocus = this.modelViewerItems[itemIndex - 1];\n    if (prevItemToFocus) {\n      prevItemToFocus.focus();\n    }\n  }\n\n  onArrowDown = itemIndex => {\n    const nextItemToFocus = this.modelViewerItems[itemIndex + 1];\n    if (nextItemToFocus) {\n      nextItemToFocus.focus();\n    }\n  }\n\n  setModelViewerItemRef = (itemRef, index) => {\n    this.modelViewerItems[index] = itemRef;\n  }\n\n  render() {\n    const { items, isLoading, filterText } = this.state;\n    const { showItemMenu } = this.props;\n    return (\n      <>\n        <div className=\"mv-grid\">\n          <div className=\"mv-toolbar\">\n            <ModelViewerCommandBarComponent\n              className=\"mv-commandbar\"\n              buttonClass=\"mv-toolbarButtons\"\n              onDownloadModelsClicked={() => this.retrieveModels()}\n              onUploadModelClicked={() => this.uploadModelRef.current.click()}\n              onUploadModelsFolderClicked={() => this.uploadModelFolderRef.current.click()}\n              onUploadModelImagesClicked={() => this.uploadModelImagesRef.current.click()} />\n            <input id=\"json-file-input\" type=\"file\" name=\"name\" className=\"mv-fileInput\" multiple accept=\".json\"\n              ref={this.uploadModelRef} onChange={this.handleUpload} />\n            <input id=\"directory-input\" type=\"file\" name=\"name\" className=\"mv-fileInput\"\n              webkitdirectory=\"\" mozdirectory=\"true\" directory=\"\"\n              ref={this.uploadModelFolderRef} onChange={this.handleUpload} />\n            <input id=\"image-file-input\" type=\"file\" name=\"name\" className=\"mv-fileInput\" multiple accept=\"image/png, image/jpeg\"\n              ref={this.uploadModelImagesRef} onChange={this.handleUploadOfModelImages} />\n          </div>\n          <div>\n            <TextField className=\"mv-filter\" onChange={this.onFilterChanged} styles={this.getStyles}\n              placeholder={this.props.t(\"modelViewerCommandBarComponent.searchPlaceholder\")} value={filterText} />\n          </div>\n          <div data-is-scrollable=\"true\" className=\"mv-modelListWrapper\">\n            <SelectionZone selection={new Selection({ selectionMode: SelectionMode.single })}>\n              {items.map((item, index) => {\n                const modelImage = settingsService.getModelImage(item.key);\n                return (\n                  <ModelViewerItem\n                    key={item.key}\n                    item={item}\n                    itemIndex={index}\n                    isSelected={item.selected}\n                    showItemMenu={showItemMenu}\n                    modelImage={modelImage}\n                    onUpdateModelImage={this.onUpdateModelImage}\n                    onSetModelImage={this.onSetModelImage}\n                    setRef={ref => this.setModelViewerItemRef(ref, index)}\n                    onView={() => this.onView(item)}\n                    onCreate={() => this.onCreate(item)}\n                    onDelete={() => this.onDelete(item)}\n                    onSelect={() => this.onSelect(item)}\n                    onFocus={() => this.onFocus(item)}\n                    onBlur={() => this.onBlur(item)}\n                    onTab={e => this.onTab(index, e)}\n                    onArrowUp={() => this.onArrowUp(index)}\n                    onArrowDown={() => this.onArrowDown(index)} />\n                );\n              })}\n            </SelectionZone>\n          </div>\n          {isLoading && <LoaderComponent />}\n        </div>\n        <ModelViewerViewComponent ref={this.viewRef} t={this.props.t} />\n        <ModelViewerCreateComponent ref={this.createRef} t={this.props.t} />\n        <ModelViewerDeleteComponent ref={this.deleteRef} t={this.props.t} />\n        <ModelViewerUpdateModelImageComponent\n          ref={this.updateModelImageRef}\n          onDelete={this.onDeleteModelImage}\n          onReplace={this.onReplaceModelImage} />\n      </>\n    );\n  }\n\n}\n\nexport default withTranslation()(ModelViewerComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}