{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OpenCensusTraceStateWrapper } from \"./openCensusTraceStateWrapper\";\nfunction isWrappedSpan(span) {\n  return !!span && span.getWrappedSpan !== undefined;\n}\nfunction isTracer(tracerOrSpan) {\n  return tracerOrSpan.getWrappedTracer !== undefined;\n}\n/**\n * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.\n */\nvar OpenCensusSpanWrapper = /** @class */function () {\n  function OpenCensusSpanWrapper(tracerOrSpan, name, options) {\n    if (name === void 0) {\n      name = \"\";\n    }\n    if (options === void 0) {\n      options = {};\n    }\n    if (isTracer(tracerOrSpan)) {\n      var parent = isWrappedSpan(options.parent) ? options.parent.getWrappedSpan() : undefined;\n      this._span = tracerOrSpan.getWrappedTracer().startChildSpan({\n        name: name,\n        childOf: parent\n      });\n      this._span.start();\n      if (options.links) {\n        for (var _i = 0, _a = options.links; _i < _a.length; _i++) {\n          var link = _a[_i];\n          // Since there is no way to set the link relationship, leave it as Unspecified.\n          this._span.addLink(link.context.traceId, link.context.spanId, 0 /* LinkType.UNSPECIFIED */, link.attributes);\n        }\n      }\n    } else {\n      this._span = tracerOrSpan;\n    }\n  }\n  /**\n   * The underlying OpenCensus Span\n   */\n  OpenCensusSpanWrapper.prototype.getWrappedSpan = function () {\n    return this._span;\n  };\n  /**\n   * Marks the end of Span execution.\n   * @param endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  OpenCensusSpanWrapper.prototype.end = function (_endTime) {\n    this._span.end();\n  };\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  OpenCensusSpanWrapper.prototype.context = function () {\n    var openCensusSpanContext = this._span.spanContext;\n    return {\n      spanId: openCensusSpanContext.spanId,\n      traceId: openCensusSpanContext.traceId,\n      traceFlags: openCensusSpanContext.options,\n      traceState: new OpenCensusTraceStateWrapper(openCensusSpanContext.traceState)\n    };\n  };\n  /**\n   * Sets an attribute on the Span\n   * @param key the attribute key\n   * @param value the attribute value\n   */\n  OpenCensusSpanWrapper.prototype.setAttribute = function (key, value) {\n    this._span.addAttribute(key, value);\n    return this;\n  };\n  /**\n   * Sets attributes on the Span\n   * @param attributes the attributes to add\n   */\n  OpenCensusSpanWrapper.prototype.setAttributes = function (attributes) {\n    this._span.attributes = attributes;\n    return this;\n  };\n  /**\n   * Adds an event to the Span\n   * @param name The name of the event\n   * @param attributes The associated attributes to add for this event\n   */\n  OpenCensusSpanWrapper.prototype.addEvent = function (_name, _attributes) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param status The status to set.\n   */\n  OpenCensusSpanWrapper.prototype.setStatus = function (status) {\n    this._span.setStatus(status.code, status.message);\n    return this;\n  };\n  /**\n   * Updates the name of the Span\n   * @param name the new Span name\n   */\n  OpenCensusSpanWrapper.prototype.updateName = function (name) {\n    this._span.name = name;\n    return this;\n  };\n  /**\n   * Returns whether this span will be recorded\n   */\n  OpenCensusSpanWrapper.prototype.isRecording = function () {\n    // NoRecordSpans have an empty traceId\n    return !!this._span.traceId;\n  };\n  return OpenCensusSpanWrapper;\n}();\nexport { OpenCensusSpanWrapper };","map":{"version":3,"sources":["../../../../src/tracers/opencensus/openCensusSpanWrapper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SpanContext, Span, SpanOptions, Attributes, Status, TraceFlags } from \"@opentelemetry/api\";\nimport { OpenCensusTraceStateWrapper } from \"./openCensusTraceStateWrapper\";\nimport { OpenCensusTracerWrapper } from \"./openCensusTracerWrapper\";\nimport { Attributes as OpenCensusAttributes, Span as OpenCensusSpan } from \"@opencensus/web-types\";\n\nfunction isWrappedSpan(span?: Span | SpanContext | null): span is OpenCensusSpanWrapper {\n  return !!span && (span as OpenCensusSpanWrapper).getWrappedSpan !== undefined;\n}\n\nfunction isTracer(\n  tracerOrSpan: OpenCensusTracerWrapper | OpenCensusSpan\n): tracerOrSpan is OpenCensusTracerWrapper {\n  return (tracerOrSpan as OpenCensusTracerWrapper).getWrappedTracer !== undefined;\n}\n\n/**\n * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.\n */\nexport class OpenCensusSpanWrapper implements Span {\n  private _span: OpenCensusSpan;\n\n  /**\n   * The underlying OpenCensus Span\n   */\n  public getWrappedSpan(): OpenCensusSpan {\n    return this._span;\n  }\n\n  /**\n   * Wraps an existing OpenCensus Span\n   * @param span A Span or RootSpan from OpenCensus\n   */\n  constructor(span: OpenCensusSpan);\n  /**\n   * Create a new OpenCensus Span and wrap it.\n   * @param tracer The OpenCensus tracer that has been wrapped in OpenCensusTracerWrapper\n   * @param name The name of the Span\n   * @param options Options for the Span\n   */\n  constructor(tracer: OpenCensusTracerWrapper, name: string, options?: SpanOptions);\n  constructor(\n    tracerOrSpan: OpenCensusTracerWrapper | OpenCensusSpan,\n    name: string = \"\",\n    options: SpanOptions = {}\n  ) {\n    if (isTracer(tracerOrSpan)) {\n      const parent = isWrappedSpan(options.parent) ? options.parent.getWrappedSpan() : undefined;\n      this._span = tracerOrSpan.getWrappedTracer().startChildSpan({\n        name,\n        childOf: parent\n      });\n      this._span.start();\n      if (options.links) {\n        for (const link of options.links) {\n          // Since there is no way to set the link relationship, leave it as Unspecified.\n          this._span.addLink(\n            link.context.traceId,\n            link.context.spanId,\n            0 /* LinkType.UNSPECIFIED */,\n            link.attributes as OpenCensusAttributes\n          );\n        }\n      }\n    } else {\n      this._span = tracerOrSpan;\n    }\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    this._span.end();\n  }\n\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  context(): SpanContext {\n    const openCensusSpanContext = this._span.spanContext;\n\n    return {\n      spanId: openCensusSpanContext.spanId,\n      traceId: openCensusSpanContext.traceId,\n      traceFlags: openCensusSpanContext.options as TraceFlags,\n      traceState: new OpenCensusTraceStateWrapper(openCensusSpanContext.traceState)\n    };\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param key the attribute key\n   * @param value the attribute value\n   */\n  setAttribute(key: string, value: unknown): this {\n    this._span.addAttribute(key, value as any);\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param attributes the attributes to add\n   */\n  setAttributes(attributes: Attributes): this {\n    this._span.attributes = attributes as OpenCensusAttributes;\n    return this;\n  }\n\n  /**\n   * Adds an event to the Span\n   * @param name The name of the event\n   * @param attributes The associated attributes to add for this event\n   */\n  addEvent(_name: string, _attributes?: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param status The status to set.\n   */\n  setStatus(status: Status): this {\n    this._span.setStatus(status.code, status.message);\n    return this;\n  }\n\n  /**\n   * Updates the name of the Span\n   * @param name the new Span name\n   */\n  updateName(name: string): this {\n    this._span.name = name;\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecording(): boolean {\n    // NoRecordSpans have an empty traceId\n    return !!this._span.traceId;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}