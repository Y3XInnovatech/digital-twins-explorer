{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst shortid_1 = __importDefault(require(\"shortid\"));\nconst constants_1 = require(\"./constants\");\n/**\n * @description Node identity map that keeps a map of blank node ids to unique node ids.\n * @export\n * @class IdentityMap\n */\nclass IdentityMap {\n  constructor() {\n    this._map = new Map();\n  }\n  /**\n   * @description Gets the mapped id for a node.\n   * @param {*} node\n   * @returns {string}\n   * @memberof IdentityMap\n   */\n  get(node) {\n    if (!node) {\n      return null;\n    }\n    const nodeId = node[constants_1.JsonldKeywords.id];\n    if (!nodeId || !nodeId.startsWith(constants_1.BlankNodePrefix)) {\n      return nodeId;\n    }\n    if (this._map.has(nodeId)) {\n      return this._map.get(nodeId);\n    }\n    const newNodeId = `${constants_1.BlankNodePrefix}-${shortid_1.default()}`;\n    this._map.set(nodeId, newNodeId);\n    return newNodeId;\n  }\n}\nexports.IdentityMap = IdentityMap;\nexports.default = IdentityMap;","map":{"version":3,"sources":["../src/identityMap.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,MAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;AAIG;AACH,MAAa,WAAW,CAAA;EAAxB,WAAA,CAAA,EAAA;IACqB,IAAA,CAAA,IAAI,GAAG,IAAI,GAAG,CAAA,CAAkB;EA0BrD;EAxBI;;;;;AAKG;EACH,GAAG,CAAC,IAAS,EAAA;IACT,IAAI,CAAC,IAAI,EAAE;MACP,OAAO,IAAI;IACd;IAED,MAAM,MAAM,GAAW,IAAI,CAAC,WAAA,CAAA,cAAc,CAAC,EAAE,CAAC;IAC9C,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,WAAA,CAAA,eAAe,CAAC,EAAE;MAChD,OAAO,MAAM;IAChB;IAED,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;MACvB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;IAC/B;IAED,MAAM,SAAS,GAAG,GAAG,WAAA,CAAA,eAAe,IAAI,SAAA,CAAA,OAAO,CAAA,CAAE,EAAE;IACnD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC;IAChC,OAAO,SAAS;EACpB;AACH;AA3BD,OAAA,CAAA,WAAA,GAAA,WAAA;AA6BA,OAAA,CAAA,OAAA,GAAe,WAAW","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst shortid_1 = __importDefault(require(\"shortid\"));\nconst constants_1 = require(\"./constants\");\n/**\n * @description Node identity map that keeps a map of blank node ids to unique node ids.\n * @export\n * @class IdentityMap\n */\nclass IdentityMap {\n    constructor() {\n        this._map = new Map();\n    }\n    /**\n     * @description Gets the mapped id for a node.\n     * @param {*} node\n     * @returns {string}\n     * @memberof IdentityMap\n     */\n    get(node) {\n        if (!node) {\n            return null;\n        }\n        const nodeId = node[constants_1.JsonldKeywords.id];\n        if (!nodeId || !nodeId.startsWith(constants_1.BlankNodePrefix)) {\n            return nodeId;\n        }\n        if (this._map.has(nodeId)) {\n            return this._map.get(nodeId);\n        }\n        const newNodeId = `${constants_1.BlankNodePrefix}-${shortid_1.default()}`;\n        this._map.set(nodeId, newNodeId);\n        return newNodeId;\n    }\n}\nexports.IdentityMap = IdentityMap;\nexports.default = IdentityMap;\n//# sourceMappingURL=identityMap.js.map"]},"metadata":{},"sourceType":"script"}