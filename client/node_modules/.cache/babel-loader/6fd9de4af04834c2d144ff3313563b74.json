{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { replaceAll } from \"./util/utils\";\nexport { URL } from \"./util/url\";\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nvar URLQuery = /** @class */function () {\n  function URLQuery() {\n    this._rawQuery = {};\n  }\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  URLQuery.prototype.any = function () {\n    return Object.keys(this._rawQuery).length > 0;\n  };\n  /**\n   * Get the keys of the query string.\n   */\n  URLQuery.prototype.keys = function () {\n    return Object.keys(this._rawQuery);\n  };\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  URLQuery.prototype.set = function (parameterName, parameterValue) {\n    var caseParameterValue = parameterValue;\n    if (parameterName) {\n      if (caseParameterValue !== undefined && caseParameterValue !== null) {\n        var newValue = Array.isArray(caseParameterValue) ? caseParameterValue : caseParameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  };\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  URLQuery.prototype.get = function (parameterName) {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  };\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  URLQuery.prototype.toString = function () {\n    var result = \"\";\n    for (var parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      var parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        var parameterStrings = [];\n        for (var _i = 0, parameterValue_1 = parameterValue; _i < parameterValue_1.length; _i++) {\n          var parameterValueElement = parameterValue_1[_i];\n          parameterStrings.push(parameterName + \"=\" + parameterValueElement);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += parameterName + \"=\" + parameterValue;\n      }\n    }\n    return result;\n  };\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  URLQuery.parse = function (text) {\n    var result = new URLQuery();\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n      var currentState = \"ParameterName\";\n      var parameterName = \"\";\n      var parameterValue = \"\";\n      for (var i = 0; i < text.length; ++i) {\n        var currentCharacter = text[i];\n        switch (currentState) {\n          case \"ParameterName\":\n            switch (currentCharacter) {\n              case \"=\":\n                currentState = \"ParameterValue\";\n                break;\n              case \"&\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                break;\n              default:\n                parameterName += currentCharacter;\n                break;\n            }\n            break;\n          case \"ParameterValue\":\n            switch (currentCharacter) {\n              case \"&\":\n                result.set(parameterName, parameterValue);\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"ParameterName\";\n                break;\n              default:\n                parameterValue += currentCharacter;\n                break;\n            }\n            break;\n          default:\n            throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n    return result;\n  };\n  return URLQuery;\n}();\nexport { URLQuery };\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nvar URLBuilder = /** @class */function () {\n  function URLBuilder() {}\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  URLBuilder.prototype.setScheme = function (scheme) {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  };\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  URLBuilder.prototype.getScheme = function () {\n    return this._scheme;\n  };\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  URLBuilder.prototype.setHost = function (host) {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  };\n  /**\n   * Get the host that has been set in this URL.\n   */\n  URLBuilder.prototype.getHost = function () {\n    return this._host;\n  };\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  URLBuilder.prototype.setPort = function (port) {\n    if (port === undefined || port === null || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  };\n  /**\n   * Get the port that has been set in this URL.\n   */\n  URLBuilder.prototype.getPort = function () {\n    return this._port;\n  };\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  URLBuilder.prototype.setPath = function (path) {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      var schemeIndex = path.indexOf(\"://\");\n      if (schemeIndex !== -1) {\n        var schemeStart = path.lastIndexOf(\"/\", schemeIndex);\n        // Make sure to only grab the URL part of the path before setting the state back to SCHEME\n        // this will handle cases such as \"/a/b/c/https://microsoft.com\" => \"https://microsoft.com\"\n        this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  };\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  URLBuilder.prototype.appendPath = function (path) {\n    if (path) {\n      var currentPath = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  };\n  /**\n   * Get the path that has been set in this URL.\n   */\n  URLBuilder.prototype.getPath = function () {\n    return this._path;\n  };\n  /**\n   * Set the query in this URL.\n   */\n  URLBuilder.prototype.setQuery = function (query) {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  };\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  URLBuilder.prototype.setQueryParameter = function (queryParameterName, queryParameterValue) {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  };\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  URLBuilder.prototype.getQueryParameterValue = function (queryParameterName) {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  };\n  /**\n   * Get the query in this URL.\n   */\n  URLBuilder.prototype.getQuery = function () {\n    return this._query ? this._query.toString() : undefined;\n  };\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  URLBuilder.prototype.set = function (text, startState) {\n    var tokenizer = new URLTokenizer(text, startState);\n    while (tokenizer.next()) {\n      var token = tokenizer.current();\n      var tokenPath = void 0;\n      if (token) {\n        switch (token.type) {\n          case \"SCHEME\":\n            this._scheme = token.text || undefined;\n            break;\n          case \"HOST\":\n            this._host = token.text || undefined;\n            break;\n          case \"PORT\":\n            this._port = token.text || undefined;\n            break;\n          case \"PATH\":\n            tokenPath = token.text || undefined;\n            if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n              this._path = tokenPath;\n            }\n            break;\n          case \"QUERY\":\n            this._query = URLQuery.parse(token.text);\n            break;\n          default:\n            throw new Error(\"Unrecognized URLTokenType: \" + token.type);\n        }\n      }\n    }\n  };\n  URLBuilder.prototype.toString = function () {\n    var result = \"\";\n    if (this._scheme) {\n      result += this._scheme + \"://\";\n    }\n    if (this._host) {\n      result += this._host;\n    }\n    if (this._port) {\n      result += \":\" + this._port;\n    }\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n    if (this._query && this._query.any()) {\n      result += \"?\" + this._query.toString();\n    }\n    return result;\n  };\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  URLBuilder.prototype.replaceAll = function (searchValue, replaceValue) {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  };\n  URLBuilder.parse = function (text) {\n    var result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  };\n  return URLBuilder;\n}();\nexport { URLBuilder };\nvar URLToken = /** @class */function () {\n  function URLToken(text, type) {\n    this.text = text;\n    this.type = type;\n  }\n  URLToken.scheme = function (text) {\n    return new URLToken(text, \"SCHEME\");\n  };\n  URLToken.host = function (text) {\n    return new URLToken(text, \"HOST\");\n  };\n  URLToken.port = function (text) {\n    return new URLToken(text, \"PORT\");\n  };\n  URLToken.path = function (text) {\n    return new URLToken(text, \"PATH\");\n  };\n  URLToken.query = function (text) {\n    return new URLToken(text, \"QUERY\");\n  };\n  return URLToken;\n}();\nexport { URLToken };\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character) {\n  var characterCode = character.charCodeAt(0);\n  return 48 /* '0' */ <= characterCode && characterCode <= 57 /* '9' */ || 65 /* 'A' */ <= characterCode && characterCode <= 90 /* 'Z' */ || 97 /* 'a' */ <= characterCode && characterCode <= 122 /* 'z' */;\n}\n/**\n * A class that tokenizes URL strings.\n */\nvar URLTokenizer = /** @class */function () {\n  function URLTokenizer(_text, state) {\n    this._text = _text;\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state !== undefined && state !== null ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  URLTokenizer.prototype.current = function () {\n    return this._currentToken;\n  };\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  URLTokenizer.prototype.next = function () {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n        case \"SCHEME\":\n          nextScheme(this);\n          break;\n        case \"SCHEME_OR_HOST\":\n          nextSchemeOrHost(this);\n          break;\n        case \"HOST\":\n          nextHost(this);\n          break;\n        case \"PORT\":\n          nextPort(this);\n          break;\n        case \"PATH\":\n          nextPath(this);\n          break;\n        case \"QUERY\":\n          nextQuery(this);\n          break;\n        default:\n          throw new Error(\"Unrecognized URLTokenizerState: \" + this._currentState);\n      }\n    }\n    return !!this._currentToken;\n  };\n  return URLTokenizer;\n}();\nexport { URLTokenizer };\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer) {\n  var result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer) {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer) {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer, step) {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer, charactersToPeek) {\n  var endIndex = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer, condition) {\n  var result = \"\";\n  while (hasCurrentCharacter(tokenizer)) {\n    var currentCharacter = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n  return result;\n}\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer) {\n  return readWhile(tokenizer, function (character) {\n    return isAlphaNumericCharacter(character);\n  });\n}\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer) {\n  var terminatingCharacters = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    terminatingCharacters[_i - 1] = arguments[_i];\n  }\n  return readWhile(tokenizer, function (character) {\n    return terminatingCharacters.indexOf(character) === -1;\n  });\n}\nfunction nextScheme(tokenizer) {\n  var scheme = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\nfunction nextSchemeOrHost(tokenizer) {\n  var schemeOrHost = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\nfunction nextHost(tokenizer) {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n  var host = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\nfunction nextPort(tokenizer) {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n  var port = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\nfunction nextPath(tokenizer) {\n  var path = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\nfunction nextQuery(tokenizer) {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n  var query = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}","map":{"version":3,"sources":["../../src/url.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { replaceAll } from \"./util/utils\";\n\nexport { URL } from \"./util/url\";\n\ntype URLQueryParseState = \"ParameterName\" | \"ParameterValue\";\n\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport class URLQuery {\n  private readonly _rawQuery: { [queryParameterName: string]: string | string[] } = {};\n\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  public any(): boolean {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n\n  /**\n   * Get the keys of the query string.\n   */\n  public keys(): string[] {\n    return Object.keys(this._rawQuery);\n  }\n\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  public set(parameterName: string, parameterValue: unknown): void {\n    const caseParameterValue = parameterValue as {\n      toString: () => string;\n    };\n    if (parameterName) {\n      if (caseParameterValue !== undefined && caseParameterValue !== null) {\n        const newValue = Array.isArray(caseParameterValue)\n          ? caseParameterValue\n          : caseParameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  public get(parameterName: string): string | string[] | undefined {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  public toString(): string {\n    let result = \"\";\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      const parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  public static parse(text: string): URLQuery {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState: URLQueryParseState = \"ParameterName\";\n\n      let parameterName = \"\";\n      let parameterValue = \"\";\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter: string = text[i];\n        switch (currentState) {\n          case \"ParameterName\":\n            switch (currentCharacter) {\n              case \"=\":\n                currentState = \"ParameterValue\";\n                break;\n\n              case \"&\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                break;\n\n              default:\n                parameterName += currentCharacter;\n                break;\n            }\n            break;\n\n          case \"ParameterValue\":\n            switch (currentCharacter) {\n              case \"&\":\n                result.set(parameterName, parameterValue);\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"ParameterName\";\n                break;\n\n              default:\n                parameterValue += currentCharacter;\n                break;\n            }\n            break;\n\n          default:\n            throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport class URLBuilder {\n  private _scheme: string | undefined;\n  private _host: string | undefined;\n  private _port: string | undefined;\n  private _path: string | undefined;\n  private _query: URLQuery | undefined;\n\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  public setScheme(scheme: string | undefined): void {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  public getScheme(): string | undefined {\n    return this._scheme;\n  }\n\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  public setHost(host: string | undefined): void {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n\n  /**\n   * Get the host that has been set in this URL.\n   */\n  public getHost(): string | undefined {\n    return this._host;\n  }\n\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  public setPort(port: number | string | undefined): void {\n    if (port === undefined || port === null || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n\n  /**\n   * Get the port that has been set in this URL.\n   */\n  public getPort(): string | undefined {\n    return this._port;\n  }\n\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  public setPath(path: string | undefined): void {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      const schemeIndex = path.indexOf(\"://\");\n      if (schemeIndex !== -1) {\n        const schemeStart = path.lastIndexOf(\"/\", schemeIndex);\n        // Make sure to only grab the URL part of the path before setting the state back to SCHEME\n        // this will handle cases such as \"/a/b/c/https://microsoft.com\" => \"https://microsoft.com\"\n        this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  public appendPath(path: string | undefined): void {\n    if (path) {\n      let currentPath: string | undefined = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  }\n\n  /**\n   * Get the path that has been set in this URL.\n   */\n  public getPath(): string | undefined {\n    return this._path;\n  }\n\n  /**\n   * Set the query in this URL.\n   */\n  public setQuery(query: string | undefined): void {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  public setQueryParameter(queryParameterName: string, queryParameterValue: unknown): void {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  public getQueryParameterValue(queryParameterName: string): string | string[] | undefined {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n\n  /**\n   * Get the query in this URL.\n   */\n  public getQuery(): string | undefined {\n    return this._query ? this._query.toString() : undefined;\n  }\n\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  private set(text: string, startState: URLTokenizerState): void {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token: URLToken | undefined = tokenizer.current();\n      let tokenPath: string | undefined;\n      if (token) {\n        switch (token.type) {\n          case \"SCHEME\":\n            this._scheme = token.text || undefined;\n            break;\n\n          case \"HOST\":\n            this._host = token.text || undefined;\n            break;\n\n          case \"PORT\":\n            this._port = token.text || undefined;\n            break;\n\n          case \"PATH\":\n            tokenPath = token.text || undefined;\n            if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n              this._path = tokenPath;\n            }\n            break;\n\n          case \"QUERY\":\n            this._query = URLQuery.parse(token.text);\n            break;\n\n          default:\n            throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n\n  public toString(): string {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  public replaceAll(searchValue: string, replaceValue: string): void {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n\n  public static parse(text: string): URLBuilder {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n}\n\ntype URLTokenizerState = \"SCHEME\" | \"SCHEME_OR_HOST\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\" | \"DONE\";\n\ntype URLTokenType = \"SCHEME\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\";\n\nexport class URLToken {\n  public constructor(public readonly text: string, public readonly type: URLTokenType) {}\n\n  public static scheme(text: string): URLToken {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  public static host(text: string): URLToken {\n    return new URLToken(text, \"HOST\");\n  }\n\n  public static port(text: string): URLToken {\n    return new URLToken(text, \"PORT\");\n  }\n\n  public static path(text: string): URLToken {\n    return new URLToken(text, \"PATH\");\n  }\n\n  public static query(text: string): URLToken {\n    return new URLToken(text, \"QUERY\");\n  }\n}\n\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character: string): boolean {\n  const characterCode: number = character.charCodeAt(0);\n  return (\n    (48 /* '0' */ <= characterCode && characterCode <= 57) /* '9' */ ||\n    (65 /* 'A' */ <= characterCode && characterCode <= 90) /* 'Z' */ ||\n    (97 /* 'a' */ <= characterCode && characterCode <= 122) /* 'z' */\n  );\n}\n\n/**\n * A class that tokenizes URL strings.\n */\nexport class URLTokenizer {\n  readonly _textLength: number;\n  _currentState: URLTokenizerState;\n  _currentIndex: number;\n  _currentToken: URLToken | undefined;\n\n  public constructor(readonly _text: string, state?: URLTokenizerState) {\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state !== undefined && state !== null ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  public current(): URLToken | undefined {\n    return this._currentToken;\n  }\n\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  public next(): boolean {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n        case \"SCHEME\":\n          nextScheme(this);\n          break;\n\n        case \"SCHEME_OR_HOST\":\n          nextSchemeOrHost(this);\n          break;\n\n        case \"HOST\":\n          nextHost(this);\n          break;\n\n        case \"PORT\":\n          nextPort(this);\n          break;\n\n        case \"PATH\":\n          nextPath(this);\n          break;\n\n        case \"QUERY\":\n          nextQuery(this);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n    return !!this._currentToken;\n  }\n}\n\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer: URLTokenizer): string {\n  let result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer: URLTokenizer): boolean {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer: URLTokenizer): string {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer: URLTokenizer, step?: number): void {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer: URLTokenizer, charactersToPeek: number): string {\n  let endIndex: number = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer: URLTokenizer, condition: (character: string) => boolean): string {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter: string = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer: URLTokenizer): string {\n  return readWhile(tokenizer, (character: string) => isAlphaNumericCharacter(character));\n}\n\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer: URLTokenizer, ...terminatingCharacters: string[]): string {\n  return readWhile(\n    tokenizer,\n    (character: string) => terminatingCharacters.indexOf(character) === -1\n  );\n}\n\nfunction nextScheme(tokenizer: URLTokenizer): void {\n  const scheme: string = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer: URLTokenizer): void {\n  const schemeOrHost: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer: URLTokenizer): void {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port: string = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer: URLTokenizer): void {\n  const path: string = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query: string = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}