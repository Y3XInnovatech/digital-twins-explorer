{"ast":null,"code":"/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\nconst util = require('./util');\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor(options) {\n    super(options);\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if (component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    if (key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = component.value === id ? '_:a' : '_:z';\n    }\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer, callback) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    self.forEach(quads, (quad, idx, callback) => {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        return callback();\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      self.hashRelatedBlankNode(related, quad, issuer, position, (err, hash) => {\n        if (err) {\n          return callback(err);\n        }\n        if (hash in hashToRelated) {\n          hashToRelated[hash].push(related);\n        } else {\n          hashToRelated[hash] = [related];\n        }\n        callback();\n      });\n    }, err => callback(err, hashToRelated));\n  }\n};","map":{"version":3,"names":["URDNA2015","require","util","module","exports","URDNA2012","constructor","options","name","hashAlgorithm","modifyFirstDegreeComponent","id","component","key","termType","clone","value","getRelatedPredicate","quad","predicate","createHashToRelated","issuer","callback","self","hashToRelated","quads","blankNodeInfo","forEach","idx","position","related","subject","object","hashRelatedBlankNode","err","hash","push"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/rdf-canonize/lib/URGNA2012.js"],"sourcesContent":["/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\nconst util = require('./util');\n\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor(options) {\n    super(options);\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    if(key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = (component.value === id ? '_:a' : '_:z');\n    }\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer, callback) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    self.forEach(quads, (quad, idx, callback) => {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        return callback();\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      self.hashRelatedBlankNode(\n        related, quad, issuer, position, (err, hash) => {\n          if(err) {\n            return callback(err);\n          }\n          if(hash in hashToRelated) {\n            hashToRelated[hash].push(related);\n          } else {\n            hashToRelated[hash] = [related];\n          }\n          callback();\n        });\n    }, err => callback(err, hashToRelated));\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAE9BE,MAAM,CAACC,OAAO,GAAG,MAAMC,SAAS,SAASL,SAAS,CAAC;EACjDM,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,IAAI,GAAG,WAAW;IACvB,IAAI,CAACC,aAAa,GAAG,MAAM;EAC7B;;EAEA;EACAC,0BAA0BA,CAACC,EAAE,EAAEC,SAAS,EAAEC,GAAG,EAAE;IAC7C,IAAGD,SAAS,CAACE,QAAQ,KAAK,WAAW,EAAE;MACrC,OAAOF,SAAS;IAClB;IACAA,SAAS,GAAGV,IAAI,CAACa,KAAK,CAACH,SAAS,CAAC;IACjC,IAAGC,GAAG,KAAK,MAAM,EAAE;MACjBD,SAAS,CAACI,KAAK,GAAG,KAAK;IACzB,CAAC,MAAM;MACLJ,SAAS,CAACI,KAAK,GAAIJ,SAAS,CAACI,KAAK,KAAKL,EAAE,GAAG,KAAK,GAAG,KAAM;IAC5D;IACA,OAAOC,SAAS;EAClB;;EAEA;EACAK,mBAAmBA,CAACC,IAAI,EAAE;IACxB,OAAOA,IAAI,CAACC,SAAS,CAACH,KAAK;EAC7B;;EAEA;EACAI,mBAAmBA,CAACT,EAAE,EAAEU,MAAM,EAAEC,QAAQ,EAAE;IACxC,MAAMC,IAAI,GAAG,IAAI;;IAEjB;IACA;IACA,MAAMC,aAAa,GAAG,CAAC,CAAC;;IAExB;IACA;IACA,MAAMC,KAAK,GAAGF,IAAI,CAACG,aAAa,CAACf,EAAE,CAAC,CAACc,KAAK;;IAE1C;IACAF,IAAI,CAACI,OAAO,CAACF,KAAK,EAAE,CAACP,IAAI,EAAEU,GAAG,EAAEN,QAAQ,KAAK;MAC3C;MACA;MACA;MACA;MACA,IAAIO,QAAQ;MACZ,IAAIC,OAAO;MACX,IAAGZ,IAAI,CAACa,OAAO,CAACjB,QAAQ,KAAK,WAAW,IAAII,IAAI,CAACa,OAAO,CAACf,KAAK,KAAKL,EAAE,EAAE;QACrEmB,OAAO,GAAGZ,IAAI,CAACa,OAAO,CAACf,KAAK;QAC5Ba,QAAQ,GAAG,GAAG;MAChB,CAAC,MAAM,IACLX,IAAI,CAACc,MAAM,CAAClB,QAAQ,KAAK,WAAW,IAAII,IAAI,CAACc,MAAM,CAAChB,KAAK,KAAKL,EAAE,EAAE;QAClE;QACA;QACA;QACA;QACAmB,OAAO,GAAGZ,IAAI,CAACc,MAAM,CAAChB,KAAK;QAC3Ba,QAAQ,GAAG,GAAG;MAChB,CAAC,MAAM;QACL;QACA,OAAOP,QAAQ,CAAC,CAAC;MACnB;MACA;MACA;MACA;MACAC,IAAI,CAACU,oBAAoB,CACvBH,OAAO,EAAEZ,IAAI,EAAEG,MAAM,EAAEQ,QAAQ,EAAE,CAACK,GAAG,EAAEC,IAAI,KAAK;QAC9C,IAAGD,GAAG,EAAE;UACN,OAAOZ,QAAQ,CAACY,GAAG,CAAC;QACtB;QACA,IAAGC,IAAI,IAAIX,aAAa,EAAE;UACxBA,aAAa,CAACW,IAAI,CAAC,CAACC,IAAI,CAACN,OAAO,CAAC;QACnC,CAAC,MAAM;UACLN,aAAa,CAACW,IAAI,CAAC,GAAG,CAACL,OAAO,CAAC;QACjC;QACAR,QAAQ,CAAC,CAAC;MACZ,CAAC,CAAC;IACN,CAAC,EAAEY,GAAG,IAAIZ,QAAQ,CAACY,GAAG,EAAEV,aAAa,CAAC,CAAC;EACzC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}