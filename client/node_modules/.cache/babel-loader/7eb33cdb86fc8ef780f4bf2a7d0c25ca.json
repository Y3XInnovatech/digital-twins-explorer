{"ast":null,"code":"var now = function () {\n  return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\nvar RESET_INTERVAL = 3 * 60 * 1000; // auto reset every 3 minutes\n/**\n * Performance helper class for measuring things.\n *\n * @public\n * {@docCategory FabricPerformance}\n */\nvar FabricPerformance = /** @class */function () {\n  function FabricPerformance() {}\n  /**\n   * Measures execution time of the given syncronous function. If the same logic is executed multiple times,\n   * each individual measurement will be collected as well the overall numbers.\n   * @param name - The name of this measurement\n   * @param func - The logic to be measured for execution time\n   */\n  FabricPerformance.measure = function (name, func) {\n    if (FabricPerformance._timeoutId) {\n      FabricPerformance.setPeriodicReset();\n    }\n    var start = now();\n    func();\n    var end = now();\n    var measurement = FabricPerformance.summary[name] || {\n      totalDuration: 0,\n      count: 0,\n      all: []\n    };\n    var duration = end - start;\n    measurement.totalDuration += duration;\n    measurement.count++;\n    measurement.all.push({\n      duration: duration,\n      timeStamp: end\n    });\n    FabricPerformance.summary[name] = measurement;\n  };\n  FabricPerformance.reset = function () {\n    FabricPerformance.summary = {};\n    clearTimeout(FabricPerformance._timeoutId);\n    FabricPerformance._timeoutId = NaN;\n  };\n  FabricPerformance.setPeriodicReset = function () {\n    FabricPerformance._timeoutId = setTimeout(function () {\n      return FabricPerformance.reset();\n    }, RESET_INTERVAL);\n  };\n  FabricPerformance.summary = {};\n  return FabricPerformance;\n}();\nexport { FabricPerformance };","map":{"version":3,"sources":["FabricPerformance.ts"],"names":[],"mappings":"AAgCA,IAAM,GAAG,GAAiB,SAAA,CAAA,EAAA;EACxB,OAAA,OAAO,WAAW,KAAK,WAAW,IAAI,CAAC,CAAC,WAAW,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG,CAAA,CAAE,GAAG,IAAI,CAAC,GAAG,CAAA,CAAE;AAAxF,CAAwF;AAE1F,IAAM,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;AAEtC;;;;;AAKG;AACH,IAAA,iBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,iBAAA,CAAA,EAAA,CAyCA;EArCE;;;;;AAKG;EACW,iBAAA,CAAA,OAAO,GAArB,UAAsB,IAAY,EAAE,IAAgB,EAAA;IAClD,IAAI,iBAAiB,CAAC,UAAU,EAAE;MAChC,iBAAiB,CAAC,gBAAgB,CAAA,CAAE;IACrC;IACD,IAAM,KAAK,GAAG,GAAG,CAAA,CAAE;IACnB,IAAI,CAAA,CAAE;IACN,IAAM,GAAG,GAAG,GAAG,CAAA,CAAE;IACjB,IAAM,WAAW,GAAqB,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI;MACvE,aAAa,EAAE,CAAC;MAChB,KAAK,EAAE,CAAC;MACR,GAAG,EAAE;KACN;IACD,IAAM,QAAQ,GAAG,GAAG,GAAG,KAAK;IAC5B,WAAW,CAAC,aAAa,IAAI,QAAQ;IACrC,WAAW,CAAC,KAAK,EAAE;IACnB,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC;MACnB,QAAQ,EAAE,QAAQ;MAClB,SAAS,EAAE;KACZ,CAAC;IACF,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,WAAW;EAC/C,CAAC;EAEa,iBAAA,CAAA,KAAK,GAAnB,YAAA;IACE,iBAAiB,CAAC,OAAO,GAAG,CAAA,CAAE;IAC9B,YAAY,CAAC,iBAAiB,CAAC,UAAU,CAAC;IAC1C,iBAAiB,CAAC,UAAU,GAAG,GAAG;EACpC,CAAC;EAEa,iBAAA,CAAA,gBAAgB,GAA9B,YAAA;IACE,iBAAiB,CAAC,UAAU,GAAG,UAAU,CAAC,YAAA;MAAM,OAAA,iBAAiB,CAAC,KAAK,CAAA,CAAE;IAAzB,CAAyB,EAAE,cAAc,CAAC;EAC5F,CAAC;EAvCa,iBAAA,CAAA,OAAO,GAAiB,CAAA,CAAE;EAwC1C,OAAA,iBAAC;CAAA,CAAA,CAAA;SAzCY,iBAAiB","sourcesContent":["declare const setTimeout: (cb: () => void, delay: number) => number;\n\n/**\n * PerfData interface.\n *\n * @internal\n */\nexport interface IPerfData {\n  duration: number;\n  timeStamp: number;\n}\n\n/**\n * PerfMeasurement interface.\n *\n * @internal\n */\nexport interface IPerfMeasurement {\n  totalDuration: number;\n  count: number;\n  all: IPerfData[];\n}\n\n/**\n * PerfSummary interface.\n *\n * @internal\n */\nexport interface IPerfSummary {\n  [key: string]: IPerfMeasurement;\n}\n\nconst now: () => number = () =>\n  typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n\nconst RESET_INTERVAL = 3 * 60 * 1000; // auto reset every 3 minutes\n\n/**\n * Performance helper class for measuring things.\n *\n * @public\n * {@docCategory FabricPerformance}\n */\nexport class FabricPerformance {\n  public static summary: IPerfSummary = {};\n  private static _timeoutId: number;\n\n  /**\n   * Measures execution time of the given syncronous function. If the same logic is executed multiple times,\n   * each individual measurement will be collected as well the overall numbers.\n   * @param name - The name of this measurement\n   * @param func - The logic to be measured for execution time\n   */\n  public static measure(name: string, func: () => void): void {\n    if (FabricPerformance._timeoutId) {\n      FabricPerformance.setPeriodicReset();\n    }\n    const start = now();\n    func();\n    const end = now();\n    const measurement: IPerfMeasurement = FabricPerformance.summary[name] || {\n      totalDuration: 0,\n      count: 0,\n      all: [],\n    };\n    const duration = end - start;\n    measurement.totalDuration += duration;\n    measurement.count++;\n    measurement.all.push({\n      duration: duration,\n      timeStamp: end,\n    });\n    FabricPerformance.summary[name] = measurement;\n  }\n\n  public static reset(): void {\n    FabricPerformance.summary = {};\n    clearTimeout(FabricPerformance._timeoutId);\n    FabricPerformance._timeoutId = NaN;\n  }\n\n  public static setPeriodicReset(): void {\n    FabricPerformance._timeoutId = setTimeout(() => FabricPerformance.reset(), RESET_INTERVAL);\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}