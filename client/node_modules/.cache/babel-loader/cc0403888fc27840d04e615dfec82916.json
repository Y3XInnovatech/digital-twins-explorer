{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { anchorProperties, assign, buttonProperties, createMergedRef, css, getId, getNativeProps, initializeComponentRef, memoizeFunction, mergeAriaAttributeValues, nullRender, portalContainsElement, setFocusVisibility, warnConditionallyRequiredProps, warnDeprecations, Async, EventGroup, FocusRects, KeyCodes } from '../../Utilities';\nimport { Icon, FontIcon, ImageIcon } from '../../Icon';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ContextualMenu } from '../../ContextualMenu';\nimport { getBaseButtonClassNames } from './BaseButton.classNames';\nimport { getSplitButtonClassNames as getBaseSplitButtonClassNames } from './SplitButton/SplitButton.classNames';\nimport { KeytipData } from '../../KeytipData';\nvar TouchIdleDelay = 500; /* ms */\nvar COMPONENT_NAME = 'BaseButton';\n/**\n * {@docCategory Button}\n */\nvar BaseButton = /** @class */function (_super) {\n  __extends(BaseButton, _super);\n  function BaseButton(props) {\n    var _this = _super.call(this, props) || this;\n    _this._buttonElement = React.createRef();\n    _this._splitButtonContainer = React.createRef();\n    _this._mergedRef = createMergedRef();\n    _this._renderedVisibleMenu = false;\n    _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function (keytipProps) {\n      return __assign(__assign({}, keytipProps), {\n        hasMenu: true\n      });\n    });\n    _this._onRenderIcon = function (buttonProps, defaultRender) {\n      var iconProps = _this.props.iconProps;\n      if (iconProps && (iconProps.iconName !== undefined || iconProps.imageProps)) {\n        var className = iconProps.className,\n          imageProps = iconProps.imageProps,\n          rest = __rest(iconProps, [\"className\", \"imageProps\"]);\n        // If the styles prop is specified as part of iconProps, fall back to regular Icon as FontIcon and ImageIcon\n        // do not have this prop.\n        if (iconProps.styles) {\n          return React.createElement(Icon, __assign({\n            className: css(_this._classNames.icon, className),\n            imageProps: imageProps\n          }, rest));\n        }\n        if (iconProps.iconName) {\n          return React.createElement(FontIcon, __assign({\n            className: css(_this._classNames.icon, className)\n          }, rest));\n        }\n        if (imageProps) {\n          return React.createElement(ImageIcon, __assign({\n            className: css(_this._classNames.icon, className),\n            imageProps: imageProps\n          }, rest));\n        }\n      }\n      return null;\n    };\n    _this._onRenderTextContents = function () {\n      var _a = _this.props,\n        text = _a.text,\n        children = _a.children,\n        // eslint-disable-next-line deprecation/deprecation\n        _b = _a.secondaryText,\n        // eslint-disable-next-line deprecation/deprecation\n        secondaryText = _b === void 0 ? _this.props.description : _b,\n        _c = _a.onRenderText,\n        onRenderText = _c === void 0 ? _this._onRenderText : _c,\n        _d = _a.onRenderDescription,\n        onRenderDescription = _d === void 0 ? _this._onRenderDescription : _d;\n      if (text || typeof children === 'string' || secondaryText) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.textContainer\n        }, onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription));\n      }\n      return [onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription)];\n    };\n    _this._onRenderText = function () {\n      var text = _this.props.text;\n      var children = _this.props.children;\n      // For backwards compat, we should continue to take in the text content from children.\n      if (text === undefined && typeof children === 'string') {\n        text = children;\n      }\n      if (_this._hasText()) {\n        return React.createElement(\"span\", {\n          key: _this._labelId,\n          className: _this._classNames.label,\n          id: _this._labelId\n        }, text);\n      }\n      return null;\n    };\n    _this._onRenderChildren = function () {\n      var children = _this.props.children;\n      // If children is just a string, either it or the text will be rendered via onRenderLabel\n      // If children is another component, it will be rendered after text\n      if (typeof children === 'string') {\n        return null;\n      }\n      return children;\n    };\n    _this._onRenderDescription = function (props) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = props.secondaryText,\n        secondaryText = _a === void 0 ? _this.props.description : _a;\n      // ms-Button-description is only shown when the button type is compound.\n      // In other cases it will not be displayed.\n      return secondaryText ? React.createElement(\"span\", {\n        key: _this._descriptionId,\n        className: _this._classNames.description,\n        id: _this._descriptionId\n      }, secondaryText) : null;\n    };\n    _this._onRenderAriaDescription = function () {\n      var ariaDescription = _this.props.ariaDescription;\n      // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\n      // otherwise it will be assigned to descriptionSpan.\n      return ariaDescription ? React.createElement(\"span\", {\n        className: _this._classNames.screenReaderText,\n        id: _this._ariaDescriptionId\n      }, ariaDescription) : null;\n    };\n    _this._onRenderMenuIcon = function (props) {\n      var menuIconProps = _this.props.menuIconProps;\n      return React.createElement(FontIcon, __assign({\n        iconName: \"ChevronDown\"\n      }, menuIconProps, {\n        className: _this._classNames.menuIcon\n      }));\n    };\n    _this._onRenderMenu = function (menuProps) {\n      var persistMenu = _this.props.persistMenu;\n      var menuHidden = _this.state.menuHidden;\n      var MenuType = _this.props.menuAs || ContextualMenu;\n      // the accessible menu label (accessible name) has a relationship to the button.\n      // If the menu props do not specify an explicit value for aria-label or aria-labelledBy,\n      // AND the button has text, we'll set the menu aria-labelledBy to the text element id.\n      if (!menuProps.ariaLabel && !menuProps.labelElementId && _this._hasText()) {\n        menuProps = __assign(__assign({}, menuProps), {\n          labelElementId: _this._labelId\n        });\n      }\n      return React.createElement(MenuType, __assign({\n        id: _this._labelId + '-menu',\n        directionalHint: DirectionalHint.bottomLeftEdge\n      }, menuProps, {\n        shouldFocusOnContainer: _this._menuShouldFocusOnContainer,\n        shouldFocusOnMount: _this._menuShouldFocusOnMount,\n        hidden: persistMenu ? menuHidden : undefined,\n        className: css('ms-BaseButton-menuhost', menuProps.className),\n        target: _this._isSplitButton ? _this._splitButtonContainer.current : _this._buttonElement.current,\n        onDismiss: _this._onDismissMenu\n      }));\n    };\n    _this._onDismissMenu = function (ev) {\n      var menuProps = _this.props.menuProps;\n      if (menuProps && menuProps.onDismiss) {\n        menuProps.onDismiss(ev);\n      }\n      if (!ev || !ev.defaultPrevented) {\n        _this._dismissMenu();\n      }\n    };\n    _this._dismissMenu = function () {\n      _this._menuShouldFocusOnMount = undefined;\n      _this._menuShouldFocusOnContainer = undefined;\n      _this.setState({\n        menuHidden: true\n      });\n    };\n    _this._openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {\n      if (shouldFocusOnMount === void 0) {\n        shouldFocusOnMount = true;\n      }\n      if (_this.props.menuProps) {\n        _this._menuShouldFocusOnContainer = shouldFocusOnContainer;\n        _this._menuShouldFocusOnMount = shouldFocusOnMount;\n        _this._renderedVisibleMenu = true;\n        _this.setState({\n          menuHidden: false\n        });\n      }\n    };\n    _this._onToggleMenu = function (shouldFocusOnContainer) {\n      var shouldFocusOnMount = true;\n      if (_this.props.menuProps && _this.props.menuProps.shouldFocusOnMount === false) {\n        shouldFocusOnMount = false;\n      }\n      _this.state.menuHidden ? _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : _this._dismissMenu();\n    };\n    _this._onSplitContainerFocusCapture = function (ev) {\n      var container = _this._splitButtonContainer.current;\n      // If the target is coming from the portal we do not need to set focus on the container.\n      if (!container || ev.target && portalContainsElement(ev.target, container)) {\n        return;\n      }\n      // We should never be able to focus the individual buttons in a split button. Focus\n      // should always remain on the container.\n      container.focus();\n    };\n    _this._onSplitButtonPrimaryClick = function (ev) {\n      if (!_this.state.menuHidden) {\n        _this._dismissMenu();\n      }\n      if (!_this._processingTouch && _this.props.onClick) {\n        _this.props.onClick(ev);\n      } else if (_this._processingTouch) {\n        _this._onMenuClick(ev);\n      }\n    };\n    _this._onKeyDown = function (ev) {\n      // explicity cancelling event so click won't fire after this\n      if (_this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      } else if (!_this.props.disabled) {\n        if (_this.props.menuProps) {\n          _this._onMenuKeyDown(ev);\n        } else if (_this.props.onKeyDown !== undefined) {\n          _this.props.onKeyDown(ev); // not cancelling event because it's not disabled\n        }\n      }\n    };\n    _this._onKeyUp = function (ev) {\n      if (!_this.props.disabled && _this.props.onKeyUp !== undefined) {\n        _this.props.onKeyUp(ev); // not cancelling event because it's not disabled\n      }\n    };\n    _this._onKeyPress = function (ev) {\n      if (!_this.props.disabled && _this.props.onKeyPress !== undefined) {\n        _this.props.onKeyPress(ev); // not cancelling event because it's not disabled\n      }\n    };\n    _this._onMouseUp = function (ev) {\n      if (!_this.props.disabled && _this.props.onMouseUp !== undefined) {\n        _this.props.onMouseUp(ev); // not cancelling event because it's not disabled\n      }\n    };\n    _this._onMouseDown = function (ev) {\n      if (!_this.props.disabled && _this.props.onMouseDown !== undefined) {\n        _this.props.onMouseDown(ev); // not cancelling event because it's not disabled\n      }\n    };\n    _this._onClick = function (ev) {\n      if (!_this.props.disabled) {\n        if (_this.props.menuProps) {\n          _this._onMenuClick(ev);\n        } else if (_this.props.onClick !== undefined) {\n          _this.props.onClick(ev); // not cancelling event because it's not disabled\n        }\n      }\n    };\n    _this._onSplitButtonContainerKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n        if (_this._buttonElement.current) {\n          _this._buttonElement.current.click();\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      } else {\n        _this._onMenuKeyDown(ev);\n      }\n    };\n    _this._onMenuKeyDown = function (ev) {\n      if (_this.props.disabled) {\n        return;\n      }\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n      }\n      var isUp = ev.which === KeyCodes.up;\n      var isDown = ev.which === KeyCodes.down;\n      if (!ev.defaultPrevented && _this._isValidMenuOpenKey(ev)) {\n        var onMenuClick = _this.props.onMenuClick;\n        if (onMenuClick) {\n          onMenuClick(ev, _this.props);\n        }\n        _this._onToggleMenu(false);\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n      if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n        // We manually set the focus visibility to true if opening via Enter or Space to account for the scenario where\n        // a user clicks on the button, closes the menu and then opens it via keyboard. In this scenario our default logic\n        // for setting focus visibility is not triggered since there is no keyboard navigation present beforehand.\n        setFocusVisibility(true, ev.target);\n      }\n      if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {\n        // Suppose a menu, with shouldFocusOnMount: false, is open, and user wants to keyboard to the menu items\n        // We need to re-render the menu with shouldFocusOnMount as true.\n        if (!_this.state.menuHidden && _this.props.menuProps) {\n          var currentShouldFocusOnMount = _this._menuShouldFocusOnMount !== undefined ? _this._menuShouldFocusOnMount : _this.props.menuProps.shouldFocusOnMount;\n          if (!currentShouldFocusOnMount) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            _this._menuShouldFocusOnMount = true;\n            _this.forceUpdate();\n          }\n        }\n      }\n    };\n    _this._onTouchStart = function () {\n      if (_this._isSplitButton && _this._splitButtonContainer.current && !('onpointerdown' in _this._splitButtonContainer.current)) {\n        _this._handleTouchAndPointerEvent();\n      }\n    };\n    _this._onMenuClick = function (ev) {\n      var onMenuClick = _this.props.onMenuClick;\n      if (onMenuClick) {\n        onMenuClick(ev, _this.props);\n      }\n      if (!ev.defaultPrevented) {\n        // When Edge + Narrator are used together (regardless of if the button is in a form or not), pressing\n        // \"Enter\" fires this method and not _onMenuKeyDown. Checking ev.nativeEvent.detail differentiates\n        // between a real click event and a keypress event (detail should be the number of mouse clicks).\n        // ...Plot twist! For a real click event in IE 11, detail is always 0 (Edge sets it properly to 1).\n        // So we also check the pointerType property, which both Edge and IE set to \"mouse\" for real clicks\n        // and \"\" for pressing \"Enter\" with Narrator on.\n        var shouldFocusOnContainer = ev.nativeEvent.detail !== 0 || ev.nativeEvent.pointerType === 'mouse';\n        _this._onToggleMenu(shouldFocusOnContainer);\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    warnConditionallyRequiredProps(COMPONENT_NAME, props, ['menuProps', 'onClick'], 'split', _this.props.split);\n    warnDeprecations(COMPONENT_NAME, props, {\n      rootProps: undefined,\n      description: 'secondaryText',\n      toggled: 'checked'\n    });\n    _this._labelId = getId();\n    _this._descriptionId = getId();\n    _this._ariaDescriptionId = getId();\n    _this.state = {\n      menuHidden: true\n    };\n    return _this;\n  }\n  Object.defineProperty(BaseButton.prototype, \"_isSplitButton\", {\n    get: function () {\n      return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BaseButton.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      ariaDescription = _b.ariaDescription,\n      ariaLabel = _b.ariaLabel,\n      ariaHidden = _b.ariaHidden,\n      className = _b.className,\n      disabled = _b.disabled,\n      allowDisabledFocus = _b.allowDisabledFocus,\n      primaryDisabled = _b.primaryDisabled,\n      // eslint-disable-next-line deprecation/deprecation\n      _c = _b.secondaryText,\n      // eslint-disable-next-line deprecation/deprecation\n      secondaryText = _c === void 0 ? this.props.description : _c,\n      href = _b.href,\n      iconProps = _b.iconProps,\n      menuIconProps = _b.menuIconProps,\n      styles = _b.styles,\n      checked = _b.checked,\n      variantClassName = _b.variantClassName,\n      theme = _b.theme,\n      toggle = _b.toggle,\n      getClassNames = _b.getClassNames,\n      role = _b.role;\n    var menuHidden = this.state.menuHidden;\n    // Button is disabled if the whole button (in case of splitButton is disabled) or if the primary action is disabled\n    var isPrimaryButtonDisabled = disabled || primaryDisabled;\n    this._classNames = getClassNames ? getClassNames(theme, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !menuHidden, !!this.props.menuProps, this.props.split, !!allowDisabledFocus) : getBaseButtonClassNames(theme, styles, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, !!this.props.menuProps, checked, !menuHidden, this.props.split);\n    var _d = this,\n      _ariaDescriptionId = _d._ariaDescriptionId,\n      _labelId = _d._labelId,\n      _descriptionId = _d._descriptionId;\n    // Anchor tag cannot be disabled hence in disabled state rendering\n    // anchor button as normal button\n    var renderAsAnchor = !isPrimaryButtonDisabled && !!href;\n    var tag = renderAsAnchor ? 'a' : 'button';\n    var nativeProps = getNativeProps(\n    // eslint-disable-next-line deprecation/deprecation\n    assign(renderAsAnchor ? {} : {\n      type: 'button'\n    }, this.props.rootProps, this.props), renderAsAnchor ? anchorProperties : buttonProperties, ['disabled']);\n    // Check for ariaLabel passed in via Button props, and fall back to aria-label passed in via native props\n    var resolvedAriaLabel = ariaLabel || nativeProps['aria-label'];\n    // Check for ariaDescription, secondaryText or aria-describedby in the native props to determine source of\n    // aria-describedby. Otherwise default to undefined so property does not appear in output.\n    var ariaDescribedBy = undefined;\n    if (ariaDescription) {\n      ariaDescribedBy = _ariaDescriptionId;\n    } else if (secondaryText && this.props.onRenderDescription !== nullRender) {\n      // for buttons like CompoundButton with a valid onRenderDescription, we need to set an ariaDescribedBy\n      // for buttons that do not render anything (via nullRender), we should not set an ariaDescribedBy\n      ariaDescribedBy = _descriptionId;\n    } else if (nativeProps['aria-describedby']) {\n      ariaDescribedBy = nativeProps['aria-describedby'];\n    }\n    // If an explicit ariaLabel is given, use that as the label and we're done.\n    // If an explicit aria-labelledby is given, use that and we're done.\n    // If any kind of description is given (which will end up as an aria-describedby attribute),\n    // set the labelledby element. Otherwise, the button is labeled implicitly by the descendent\n    // text on the button (if it exists). Never set both aria-label and aria-labelledby.\n    var ariaLabelledBy = undefined;\n    if (!resolvedAriaLabel) {\n      if (nativeProps['aria-labelledby']) {\n        ariaLabelledBy = nativeProps['aria-labelledby'];\n      } else if (ariaDescribedBy) {\n        ariaLabelledBy = this._hasText() ? _labelId : undefined;\n      }\n    }\n    var dataIsFocusable = this.props['data-is-focusable'] === false || disabled && !allowDisabledFocus || this._isSplitButton ? false : true;\n    var isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n    // if isCheckboxTypeRole, always return a checked value.\n    // Otherwise only return checked value if toggle is set to true.\n    // This is because role=\"checkbox\" always needs to have an aria-checked value\n    // but our checked prop only sets aria-pressed if we mark the button as a toggle=\"true\"\n    var checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : undefined;\n    var buttonProps = assign(nativeProps, (_a = {\n      className: this._classNames.root,\n      // eslint-disable-next-line deprecation/deprecation\n      ref: this._mergedRef(this.props.elementRef, this._buttonElement),\n      disabled: isPrimaryButtonDisabled && !allowDisabledFocus,\n      onKeyDown: this._onKeyDown,\n      onKeyPress: this._onKeyPress,\n      onKeyUp: this._onKeyUp,\n      onMouseDown: this._onMouseDown,\n      onMouseUp: this._onMouseUp,\n      onClick: this._onClick,\n      'aria-label': resolvedAriaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      'aria-disabled': isPrimaryButtonDisabled,\n      'data-is-focusable': dataIsFocusable\n    },\n    // aria-pressed attribute should only be present for toggle buttons\n    // aria-checked attribute should only be present for toggle buttons with checkbox type role\n    _a[isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed'] = checkedOrPressedValue, _a));\n    if (ariaHidden) {\n      buttonProps['aria-hidden'] = true;\n    }\n    if (this._isSplitButton) {\n      return this._onRenderSplitButtonContent(tag, buttonProps);\n    } else if (this.props.menuProps) {\n      assign(buttonProps, {\n        'aria-expanded': !menuHidden,\n        'aria-owns': !menuHidden ? this._labelId + '-menu' : null,\n        'aria-haspopup': true\n      });\n    }\n    return this._onRenderContent(tag, buttonProps);\n  };\n  BaseButton.prototype.componentDidMount = function () {\n    // For split buttons, touching anywhere in the button should drop the dropdown, which should contain the\n    // primary action. This gives more hit target space for touch environments. We're setting the onpointerdown here,\n    // because React does not support Pointer events yet.\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      if ('onpointerdown' in this._splitButtonContainer.current) {\n        this._events.on(this._splitButtonContainer.current, 'pointerdown', this._onPointerDown, true);\n      }\n      if ('onpointerup' in this._splitButtonContainer.current && this.props.onPointerUp) {\n        this._events.on(this._splitButtonContainer.current, 'pointerup', this.props.onPointerUp, true);\n      }\n    }\n  };\n  BaseButton.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // If Button's menu was closed, run onAfterMenuDismiss.\n    if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {\n      this.props.onAfterMenuDismiss();\n    }\n  };\n  BaseButton.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  BaseButton.prototype.focus = function () {\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      setFocusVisibility(true);\n      this._splitButtonContainer.current.focus();\n    } else if (this._buttonElement.current) {\n      setFocusVisibility(true);\n      this._buttonElement.current.focus();\n    }\n  };\n  BaseButton.prototype.dismissMenu = function () {\n    this._dismissMenu();\n  };\n  BaseButton.prototype.openMenu = function (shouldFocusOnContainer, shouldFocusOnMount) {\n    this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);\n  };\n  BaseButton.prototype._onRenderContent = function (tag, buttonProps) {\n    var _this = this;\n    var props = this.props;\n    var Tag = tag;\n    var menuIconProps = props.menuIconProps,\n      menuProps = props.menuProps,\n      _a = props.onRenderIcon,\n      onRenderIcon = _a === void 0 ? this._onRenderIcon : _a,\n      _b = props.onRenderAriaDescription,\n      onRenderAriaDescription = _b === void 0 ? this._onRenderAriaDescription : _b,\n      _c = props.onRenderChildren,\n      onRenderChildren = _c === void 0 ? this._onRenderChildren : _c,\n      // eslint-disable-next-line deprecation/deprecation\n      _d = props.onRenderMenu,\n      // eslint-disable-next-line deprecation/deprecation\n      onRenderMenu = _d === void 0 ? this._onRenderMenu : _d,\n      _e = props.onRenderMenuIcon,\n      onRenderMenuIcon = _e === void 0 ? this._onRenderMenuIcon : _e,\n      disabled = props.disabled;\n    var keytipProps = props.keytipProps;\n    if (keytipProps && menuProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n    var Button = function (keytipAttributes) {\n      return React.createElement(Tag, __assign({}, buttonProps, keytipAttributes), React.createElement(\"span\", {\n        className: _this._classNames.flexContainer,\n        \"data-automationid\": \"splitbuttonprimary\"\n      }, onRenderIcon(props, _this._onRenderIcon), _this._onRenderTextContents(), onRenderAriaDescription(props, _this._onRenderAriaDescription), onRenderChildren(props, _this._onRenderChildren), !_this._isSplitButton && (menuProps || menuIconProps || _this.props.onRenderMenuIcon) && onRenderMenuIcon(_this.props, _this._onRenderMenuIcon), menuProps && !menuProps.doNotLayer && _this._shouldRenderMenu() && onRenderMenu(menuProps, _this._onRenderMenu)));\n    };\n    var Content = keytipProps ?\n    // If we're making a split button, we won't put the keytip here\n    React.createElement(KeytipData, {\n      keytipProps: !this._isSplitButton ? keytipProps : undefined,\n      ariaDescribedBy: buttonProps['aria-describedby'],\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return Button(keytipAttributes);\n    }) : Button();\n    if (menuProps && menuProps.doNotLayer) {\n      return React.createElement(\"span\", {\n        style: {\n          display: 'inline-block'\n        }\n      }, Content, this._shouldRenderMenu() && onRenderMenu(menuProps, this._onRenderMenu));\n    }\n    return React.createElement(React.Fragment, null, Content, React.createElement(FocusRects, null));\n  };\n  /**\n   * Method to help determine if the menu's component tree should\n   * be rendered. It takes into account whether the menu is expanded,\n   * whether it is a persisted menu and whether it has been shown to the user.\n   */\n  BaseButton.prototype._shouldRenderMenu = function () {\n    var menuHidden = this.state.menuHidden;\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n      persistMenu = _a.persistMenu,\n      renderPersistedMenuHiddenOnMount = _a.renderPersistedMenuHiddenOnMount;\n    if (!menuHidden) {\n      // Always should render a menu when it is expanded\n      return true;\n    } else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {\n      // _renderedVisibleMenu ensures that the first rendering of\n      // the menu happens on-screen, as edge's scrollbar calculations are off if done while hidden.\n      return true;\n    }\n    return false;\n  };\n  BaseButton.prototype._hasText = function () {\n    // _onRenderTextContents and _onRenderText do not perform the same checks. Below is parity with what _onRenderText\n    // used to have before the refactor that introduced this function. _onRenderTextContents does not require props.\n    // text to be undefined in order for props.children to be used as a fallback.\n    // Purely a code maintainability/reuse issue, but logged as Issue #4979.\n    return this.props.text !== null && (this.props.text !== undefined || typeof this.props.children === 'string');\n  };\n  BaseButton.prototype._onRenderSplitButtonContent = function (tag, buttonProps) {\n    var _this = this;\n    var _a = this.props,\n      _b = _a.styles,\n      styles = _b === void 0 ? {} : _b,\n      disabled = _a.disabled,\n      allowDisabledFocus = _a.allowDisabledFocus,\n      checked = _a.checked,\n      getSplitButtonClassNames = _a.getSplitButtonClassNames,\n      primaryDisabled = _a.primaryDisabled,\n      menuProps = _a.menuProps,\n      toggle = _a.toggle,\n      role = _a.role,\n      primaryActionButtonProps = _a.primaryActionButtonProps;\n    var keytipProps = this.props.keytipProps;\n    var menuHidden = this.state.menuHidden;\n    var classNames = getSplitButtonClassNames ? getSplitButtonClassNames(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus) : styles && getBaseSplitButtonClassNames(styles, !!disabled, !menuHidden, !!checked, !!primaryDisabled);\n    assign(buttonProps, {\n      onClick: undefined,\n      onPointerDown: undefined,\n      onPointerUp: undefined,\n      tabIndex: -1,\n      'data-is-focusable': false\n    });\n    if (keytipProps && menuProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n    var containerProps = getNativeProps(buttonProps, [], ['disabled']);\n    // Add additional props to apply on primary action button\n    if (primaryActionButtonProps) {\n      assign(buttonProps, primaryActionButtonProps);\n    }\n    var SplitButton = function (keytipAttributes) {\n      return React.createElement(\"div\", __assign({}, containerProps, {\n        \"data-ktp-target\": keytipAttributes ? keytipAttributes['data-ktp-target'] : undefined,\n        role: role ? role : 'button',\n        \"aria-disabled\": disabled,\n        \"aria-haspopup\": true,\n        \"aria-expanded\": !menuHidden,\n        \"aria-pressed\": toggle ? !!checked : undefined,\n        \"aria-describedby\": mergeAriaAttributeValues(buttonProps['aria-describedby'], keytipAttributes ? keytipAttributes['aria-describedby'] : undefined),\n        className: classNames && classNames.splitButtonContainer,\n        onKeyDown: _this._onSplitButtonContainerKeyDown,\n        onTouchStart: _this._onTouchStart,\n        ref: _this._splitButtonContainer,\n        \"data-is-focusable\": true,\n        onClick: !disabled && !primaryDisabled ? _this._onSplitButtonPrimaryClick : undefined,\n        tabIndex: !disabled && !primaryDisabled || allowDisabledFocus ? 0 : undefined,\n        \"aria-roledescription\": buttonProps['aria-roledescription'],\n        onFocusCapture: _this._onSplitContainerFocusCapture\n      }), React.createElement(\"span\", {\n        style: {\n          display: 'flex'\n        }\n      }, _this._onRenderContent(tag, buttonProps), _this._onRenderSplitButtonMenuButton(classNames, keytipAttributes), _this._onRenderSplitButtonDivider(classNames)));\n    };\n    return keytipProps ? React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return SplitButton(keytipAttributes);\n    }) : SplitButton();\n  };\n  BaseButton.prototype._onRenderSplitButtonDivider = function (classNames) {\n    if (classNames && classNames.divider) {\n      var onClick = function (ev) {\n        ev.stopPropagation();\n      };\n      return React.createElement(\"span\", {\n        className: classNames.divider,\n        \"aria-hidden\": true,\n        onClick: onClick\n      });\n    }\n    return null;\n  };\n  BaseButton.prototype._onRenderSplitButtonMenuButton = function (classNames, keytipAttributes) {\n    var _a = this.props,\n      allowDisabledFocus = _a.allowDisabledFocus,\n      checked = _a.checked,\n      disabled = _a.disabled,\n      splitButtonMenuProps = _a.splitButtonMenuProps,\n      splitButtonAriaLabel = _a.splitButtonAriaLabel,\n      primaryDisabled = _a.primaryDisabled;\n    var menuHidden = this.state.menuHidden;\n    var menuIconProps = this.props.menuIconProps;\n    if (menuIconProps === undefined) {\n      menuIconProps = {\n        iconName: 'ChevronDown'\n      };\n    }\n    var splitButtonProps = __assign(__assign({}, splitButtonMenuProps), {\n      styles: classNames,\n      checked: checked,\n      disabled: disabled,\n      allowDisabledFocus: allowDisabledFocus,\n      onClick: this._onMenuClick,\n      menuProps: undefined,\n      iconProps: __assign(__assign({}, menuIconProps), {\n        className: this._classNames.menuIcon\n      }),\n      ariaLabel: splitButtonAriaLabel,\n      'aria-haspopup': true,\n      'aria-expanded': !menuHidden,\n      'data-is-focusable': false\n    });\n    // Add data-ktp-execute-target to the split button if the keytip is defined\n    return React.createElement(BaseButton, __assign({}, splitButtonProps, {\n      \"data-ktp-execute-target\": keytipAttributes ? keytipAttributes['data-ktp-execute-target'] : keytipAttributes,\n      onMouseDown: this._onMouseDown,\n      tabIndex: primaryDisabled && !allowDisabledFocus ? 0 : -1\n    }));\n  };\n  BaseButton.prototype._onPointerDown = function (ev) {\n    var onPointerDown = this.props.onPointerDown;\n    if (onPointerDown) {\n      onPointerDown(ev);\n    }\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent();\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n  BaseButton.prototype._handleTouchAndPointerEvent = function () {\n    var _this = this;\n    // If we already have an existing timeout from a previous touch and pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(function () {\n      _this._processingTouch = false;\n      _this._lastTouchTimeoutId = undefined;\n      // Touch and pointer events don't focus the button naturally,\n      // so adding an imperative focus call to guarantee this behavior.\n      _this.focus();\n    }, TouchIdleDelay);\n  };\n  /**\n   * Returns if the user hits a valid keyboard key to open the menu\n   * @param ev - the keyboard event\n   * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.\n   */\n  BaseButton.prototype._isValidMenuOpenKey = function (ev) {\n    if (this.props.menuTriggerKeyCode) {\n      return ev.which === this.props.menuTriggerKeyCode;\n    } else if (this.props.menuProps) {\n      return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);\n    }\n    // Note: When enter is pressed, we will let the event continue to propagate\n    // to trigger the onClick event on the button\n    return false;\n  };\n  BaseButton.defaultProps = {\n    baseClassName: 'ms-Button',\n    styles: {},\n    split: false\n  };\n  return BaseButton;\n}(React.Component);\nexport { BaseButton };","map":{"version":3,"sources":["components/Button/BaseButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  anchorProperties,\n  assign,\n  buttonProperties,\n  createMergedRef,\n  css,\n  getId,\n  getNativeProps,\n  initializeComponentRef,\n  memoizeFunction,\n  mergeAriaAttributeValues,\n  nullRender,\n  portalContainsElement,\n  setFocusVisibility,\n  warnConditionallyRequiredProps,\n  warnDeprecations,\n  Async,\n  EventGroup,\n  FocusRects,\n  IRenderFunction,\n  KeyCodes,\n} from '../../Utilities';\nimport { Icon, FontIcon, ImageIcon } from '../../Icon';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ContextualMenu, IContextualMenuProps } from '../../ContextualMenu';\nimport { IButtonProps, IButton } from './Button.types';\nimport { IButtonClassNames, getBaseButtonClassNames } from './BaseButton.classNames';\nimport {\n  getSplitButtonClassNames as getBaseSplitButtonClassNames,\n  ISplitButtonClassNames,\n} from './SplitButton/SplitButton.classNames';\nimport { KeytipData } from '../../KeytipData';\nimport { IKeytipProps } from '../Keytip/Keytip.types';\n\n/**\n * {@docCategory Button}\n */\nexport interface IBaseButtonProps extends IButtonProps {\n  baseClassName?: string;\n  variantClassName?: string;\n}\n\nexport interface IBaseButtonState {\n  menuHidden: boolean;\n}\n\nconst TouchIdleDelay = 500; /* ms */\nconst COMPONENT_NAME = 'BaseButton';\n\n/**\n * {@docCategory Button}\n */\nexport class BaseButton extends React.Component<IBaseButtonProps, IBaseButtonState> implements IButton {\n  private get _isSplitButton(): boolean {\n    return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;\n  }\n\n  public static defaultProps: Partial<IBaseButtonProps> = {\n    baseClassName: 'ms-Button',\n    styles: {},\n    split: false,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _buttonElement = React.createRef<HTMLElement>();\n  private _splitButtonContainer = React.createRef<HTMLDivElement>();\n  private _mergedRef = createMergedRef<HTMLElement>();\n  private _labelId: string;\n  private _descriptionId: string;\n  private _ariaDescriptionId: string;\n  private _classNames: IButtonClassNames;\n  private _processingTouch: boolean;\n  private _lastTouchTimeoutId: number | undefined;\n  private _renderedVisibleMenu: boolean = false;\n\n  // These fields will be used to set corresponding props on the menu.\n  private _menuShouldFocusOnContainer: boolean | undefined;\n  private _menuShouldFocusOnMount: boolean | undefined;\n\n  private _getMemoizedMenuButtonKeytipProps = memoizeFunction((keytipProps: IKeytipProps) => {\n    return {\n      ...keytipProps,\n      hasMenu: true,\n    };\n  });\n\n  constructor(props: IBaseButtonProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    warnConditionallyRequiredProps(COMPONENT_NAME, props, ['menuProps', 'onClick'], 'split', this.props.split!);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      rootProps: undefined,\n      description: 'secondaryText',\n      toggled: 'checked',\n    });\n    this._labelId = getId();\n    this._descriptionId = getId();\n    this._ariaDescriptionId = getId();\n\n    this.state = {\n      menuHidden: true,\n    };\n  }\n\n  public render(): JSX.Element {\n    const {\n      ariaDescription,\n      ariaLabel,\n      ariaHidden,\n      className,\n      disabled,\n      allowDisabledFocus,\n      primaryDisabled,\n      // eslint-disable-next-line deprecation/deprecation\n      secondaryText = this.props.description,\n      href,\n      iconProps,\n      menuIconProps,\n      styles,\n      checked,\n      variantClassName,\n      theme,\n      toggle,\n      getClassNames,\n      role,\n    } = this.props;\n\n    const { menuHidden } = this.state;\n\n    // Button is disabled if the whole button (in case of splitButton is disabled) or if the primary action is disabled\n    const isPrimaryButtonDisabled = disabled || primaryDisabled;\n\n    this._classNames = getClassNames\n      ? getClassNames(\n          theme!,\n          className!,\n          variantClassName!,\n          iconProps && iconProps.className,\n          menuIconProps && menuIconProps.className,\n          isPrimaryButtonDisabled!,\n          checked!,\n          !menuHidden,\n          !!this.props.menuProps,\n          this.props.split,\n          !!allowDisabledFocus,\n        )\n      : getBaseButtonClassNames(\n          theme!,\n          styles!,\n          className!,\n          variantClassName!,\n          iconProps && iconProps.className,\n          menuIconProps && menuIconProps.className,\n          isPrimaryButtonDisabled!,\n          !!this.props.menuProps,\n          checked!,\n          !menuHidden,\n          this.props.split,\n        );\n\n    const { _ariaDescriptionId, _labelId, _descriptionId } = this;\n    // Anchor tag cannot be disabled hence in disabled state rendering\n    // anchor button as normal button\n    const renderAsAnchor: boolean = !isPrimaryButtonDisabled && !!href;\n    const tag = renderAsAnchor ? 'a' : 'button';\n\n    const nativeProps = getNativeProps(\n      // eslint-disable-next-line deprecation/deprecation\n      assign(renderAsAnchor ? {} : { type: 'button' }, this.props.rootProps, this.props),\n      renderAsAnchor ? anchorProperties : buttonProperties,\n      [\n        'disabled', // let disabled buttons be focused and styled as disabled.\n      ],\n    );\n\n    // Check for ariaLabel passed in via Button props, and fall back to aria-label passed in via native props\n    const resolvedAriaLabel = ariaLabel || (nativeProps as any)['aria-label'];\n\n    // Check for ariaDescription, secondaryText or aria-describedby in the native props to determine source of\n    // aria-describedby. Otherwise default to undefined so property does not appear in output.\n    let ariaDescribedBy = undefined;\n    if (ariaDescription) {\n      ariaDescribedBy = _ariaDescriptionId;\n    } else if (secondaryText && this.props.onRenderDescription !== nullRender) {\n      // for buttons like CompoundButton with a valid onRenderDescription, we need to set an ariaDescribedBy\n      // for buttons that do not render anything (via nullRender), we should not set an ariaDescribedBy\n      ariaDescribedBy = _descriptionId;\n    } else if ((nativeProps as any)['aria-describedby']) {\n      ariaDescribedBy = (nativeProps as any)['aria-describedby'];\n    }\n\n    // If an explicit ariaLabel is given, use that as the label and we're done.\n    // If an explicit aria-labelledby is given, use that and we're done.\n    // If any kind of description is given (which will end up as an aria-describedby attribute),\n    // set the labelledby element. Otherwise, the button is labeled implicitly by the descendent\n    // text on the button (if it exists). Never set both aria-label and aria-labelledby.\n    let ariaLabelledBy = undefined;\n    if (!resolvedAriaLabel) {\n      if ((nativeProps as any)['aria-labelledby']) {\n        ariaLabelledBy = (nativeProps as any)['aria-labelledby'];\n      } else if (ariaDescribedBy) {\n        ariaLabelledBy = this._hasText() ? _labelId : undefined;\n      }\n    }\n\n    const dataIsFocusable =\n      (this.props as any)['data-is-focusable'] === false || (disabled && !allowDisabledFocus) || this._isSplitButton\n        ? false\n        : true;\n\n    const isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n    // if isCheckboxTypeRole, always return a checked value.\n    // Otherwise only return checked value if toggle is set to true.\n    // This is because role=\"checkbox\" always needs to have an aria-checked value\n    // but our checked prop only sets aria-pressed if we mark the button as a toggle=\"true\"\n    const checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle === true ? !!checked : undefined;\n\n    const buttonProps = assign(nativeProps, {\n      className: this._classNames.root,\n      // eslint-disable-next-line deprecation/deprecation\n      ref: this._mergedRef(this.props.elementRef, this._buttonElement),\n      disabled: isPrimaryButtonDisabled && !allowDisabledFocus,\n      onKeyDown: this._onKeyDown,\n      onKeyPress: this._onKeyPress,\n      onKeyUp: this._onKeyUp,\n      onMouseDown: this._onMouseDown,\n      onMouseUp: this._onMouseUp,\n      onClick: this._onClick,\n      'aria-label': resolvedAriaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      'aria-disabled': isPrimaryButtonDisabled,\n      'data-is-focusable': dataIsFocusable,\n      // aria-pressed attribute should only be present for toggle buttons\n      // aria-checked attribute should only be present for toggle buttons with checkbox type role\n      [isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed']: checkedOrPressedValue,\n    });\n\n    if (ariaHidden) {\n      buttonProps['aria-hidden'] = true;\n    }\n\n    if (this._isSplitButton) {\n      return this._onRenderSplitButtonContent(tag, buttonProps);\n    } else if (this.props.menuProps) {\n      assign(buttonProps, {\n        'aria-expanded': !menuHidden,\n        'aria-owns': !menuHidden ? this._labelId + '-menu' : null,\n        'aria-haspopup': true,\n      });\n    }\n\n    return this._onRenderContent(tag, buttonProps);\n  }\n\n  public componentDidMount() {\n    // For split buttons, touching anywhere in the button should drop the dropdown, which should contain the\n    // primary action. This gives more hit target space for touch environments. We're setting the onpointerdown here,\n    // because React does not support Pointer events yet.\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      if ('onpointerdown' in this._splitButtonContainer.current) {\n        this._events.on(this._splitButtonContainer.current, 'pointerdown', this._onPointerDown, true);\n      }\n      if ('onpointerup' in this._splitButtonContainer.current && this.props.onPointerUp) {\n        this._events.on(this._splitButtonContainer.current, 'pointerup', this.props.onPointerUp, true);\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IBaseButtonProps, prevState: IBaseButtonState) {\n    // If Button's menu was closed, run onAfterMenuDismiss.\n    if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {\n      this.props.onAfterMenuDismiss();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public focus(): void {\n    if (this._isSplitButton && this._splitButtonContainer.current) {\n      setFocusVisibility(true);\n      this._splitButtonContainer.current.focus();\n    } else if (this._buttonElement.current) {\n      setFocusVisibility(true);\n      this._buttonElement.current.focus();\n    }\n  }\n\n  public dismissMenu(): void {\n    this._dismissMenu();\n  }\n\n  public openMenu(shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean): void {\n    this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);\n  }\n\n  private _onRenderContent(tag: any, buttonProps: IButtonProps): JSX.Element {\n    const props = this.props;\n    const Tag = tag;\n    const {\n      menuIconProps,\n      menuProps,\n      onRenderIcon = this._onRenderIcon,\n      onRenderAriaDescription = this._onRenderAriaDescription,\n      onRenderChildren = this._onRenderChildren,\n      // eslint-disable-next-line deprecation/deprecation\n      onRenderMenu = this._onRenderMenu,\n      onRenderMenuIcon = this._onRenderMenuIcon,\n      disabled,\n    } = props;\n    let { keytipProps } = props;\n    if (keytipProps && menuProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    const Button = (keytipAttributes?: any): JSX.Element => (\n      <Tag {...buttonProps} {...keytipAttributes}>\n        <span className={this._classNames.flexContainer} data-automationid=\"splitbuttonprimary\">\n          {onRenderIcon(props, this._onRenderIcon)}\n          {this._onRenderTextContents()}\n          {onRenderAriaDescription(props, this._onRenderAriaDescription)}\n          {onRenderChildren(props, this._onRenderChildren)}\n          {!this._isSplitButton &&\n            (menuProps || menuIconProps || this.props.onRenderMenuIcon) &&\n            onRenderMenuIcon(this.props, this._onRenderMenuIcon)}\n          {menuProps &&\n            !menuProps.doNotLayer &&\n            this._shouldRenderMenu() &&\n            onRenderMenu(menuProps, this._onRenderMenu)}\n        </span>\n      </Tag>\n    );\n\n    const Content = keytipProps ? (\n      // If we're making a split button, we won't put the keytip here\n      <KeytipData\n        keytipProps={!this._isSplitButton ? keytipProps : undefined}\n        ariaDescribedBy={(buttonProps as any)['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => Button(keytipAttributes)}\n      </KeytipData>\n    ) : (\n      Button()\n    );\n\n    if (menuProps && menuProps.doNotLayer) {\n      return (\n        <span style={{ display: 'inline-block' }}>\n          {Content}\n          {this._shouldRenderMenu() && onRenderMenu(menuProps, this._onRenderMenu)}\n        </span>\n      );\n    }\n\n    return (\n      <>\n        {Content}\n        <FocusRects />\n      </>\n    );\n  }\n\n  /**\n   * Method to help determine if the menu's component tree should\n   * be rendered. It takes into account whether the menu is expanded,\n   * whether it is a persisted menu and whether it has been shown to the user.\n   */\n  private _shouldRenderMenu() {\n    const { menuHidden } = this.state;\n    // eslint-disable-next-line deprecation/deprecation\n    const { persistMenu, renderPersistedMenuHiddenOnMount } = this.props;\n\n    if (!menuHidden) {\n      // Always should render a menu when it is expanded\n      return true;\n    } else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {\n      // _renderedVisibleMenu ensures that the first rendering of\n      // the menu happens on-screen, as edge's scrollbar calculations are off if done while hidden.\n      return true;\n    }\n\n    return false;\n  }\n\n  private _onRenderIcon = (\n    buttonProps?: IButtonProps,\n    defaultRender?: IRenderFunction<IButtonProps>,\n  ): JSX.Element | null => {\n    const { iconProps } = this.props;\n\n    if (iconProps && (iconProps.iconName !== undefined || iconProps.imageProps)) {\n      const { className, imageProps, ...rest } = iconProps;\n\n      // If the styles prop is specified as part of iconProps, fall back to regular Icon as FontIcon and ImageIcon\n      // do not have this prop.\n      if (iconProps.styles) {\n        return <Icon className={css(this._classNames.icon, className)} imageProps={imageProps} {...rest} />;\n      }\n      if (iconProps.iconName) {\n        return <FontIcon className={css(this._classNames.icon, className)} {...rest} />;\n      }\n      if (imageProps) {\n        return <ImageIcon className={css(this._classNames.icon, className)} imageProps={imageProps} {...rest} />;\n      }\n    }\n    return null;\n  };\n\n  private _onRenderTextContents = (): JSX.Element | (JSX.Element | null)[] => {\n    const {\n      text,\n      children,\n      // eslint-disable-next-line deprecation/deprecation\n      secondaryText = this.props.description,\n      onRenderText = this._onRenderText,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n\n    if (text || typeof children === 'string' || secondaryText) {\n      return (\n        <span className={this._classNames.textContainer}>\n          {onRenderText(this.props, this._onRenderText)}\n          {onRenderDescription(this.props, this._onRenderDescription)}\n        </span>\n      );\n    }\n    return [onRenderText(this.props, this._onRenderText), onRenderDescription(this.props, this._onRenderDescription)];\n  };\n\n  private _onRenderText = (): JSX.Element | null => {\n    let { text } = this.props;\n    const { children } = this.props;\n\n    // For backwards compat, we should continue to take in the text content from children.\n    if (text === undefined && typeof children === 'string') {\n      text = children;\n    }\n\n    if (this._hasText()) {\n      return (\n        <span key={this._labelId} className={this._classNames.label} id={this._labelId}>\n          {text}\n        </span>\n      );\n    }\n\n    return null;\n  };\n\n  private _hasText(): boolean {\n    // _onRenderTextContents and _onRenderText do not perform the same checks. Below is parity with what _onRenderText\n    // used to have before the refactor that introduced this function. _onRenderTextContents does not require props.\n    // text to be undefined in order for props.children to be used as a fallback.\n    // Purely a code maintainability/reuse issue, but logged as Issue #4979.\n    return this.props.text !== null && (this.props.text !== undefined || typeof this.props.children === 'string');\n  }\n\n  private _onRenderChildren = (): JSX.Element | null => {\n    const { children } = this.props;\n\n    // If children is just a string, either it or the text will be rendered via onRenderLabel\n    // If children is another component, it will be rendered after text\n    if (typeof children === 'string') {\n      return null;\n    }\n\n    return children as any;\n  };\n\n  private _onRenderDescription = (props: IButtonProps) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { secondaryText = this.props.description } = props;\n\n    // ms-Button-description is only shown when the button type is compound.\n    // In other cases it will not be displayed.\n    return secondaryText ? (\n      <span key={this._descriptionId} className={this._classNames.description} id={this._descriptionId}>\n        {secondaryText}\n      </span>\n    ) : null;\n  };\n\n  private _onRenderAriaDescription = () => {\n    const { ariaDescription } = this.props;\n\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\n    // otherwise it will be assigned to descriptionSpan.\n    return ariaDescription ? (\n      <span className={this._classNames.screenReaderText} id={this._ariaDescriptionId}>\n        {ariaDescription}\n      </span>\n    ) : null;\n  };\n\n  private _onRenderMenuIcon = (props: IButtonProps): JSX.Element | null => {\n    const { menuIconProps } = this.props;\n\n    return <FontIcon iconName=\"ChevronDown\" {...menuIconProps} className={this._classNames.menuIcon} />;\n  };\n\n  private _onRenderMenu = (menuProps: IContextualMenuProps): JSX.Element => {\n    const { persistMenu } = this.props;\n    const { menuHidden } = this.state;\n    const MenuType = this.props.menuAs || (ContextualMenu as React.ElementType<IContextualMenuProps>);\n\n    // the accessible menu label (accessible name) has a relationship to the button.\n    // If the menu props do not specify an explicit value for aria-label or aria-labelledBy,\n    // AND the button has text, we'll set the menu aria-labelledBy to the text element id.\n    if (!menuProps.ariaLabel && !menuProps.labelElementId && this._hasText()) {\n      menuProps = { ...menuProps, labelElementId: this._labelId };\n    }\n\n    return (\n      <MenuType\n        id={this._labelId + '-menu'}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        {...menuProps}\n        shouldFocusOnContainer={this._menuShouldFocusOnContainer}\n        shouldFocusOnMount={this._menuShouldFocusOnMount}\n        hidden={persistMenu ? menuHidden : undefined}\n        className={css('ms-BaseButton-menuhost', menuProps.className)}\n        target={this._isSplitButton ? this._splitButtonContainer.current : this._buttonElement.current}\n        onDismiss={this._onDismissMenu}\n      />\n    );\n  };\n\n  private _onDismissMenu: IContextualMenuProps['onDismiss'] = ev => {\n    const { menuProps } = this.props;\n\n    if (menuProps && menuProps.onDismiss) {\n      menuProps.onDismiss(ev);\n    }\n    if (!ev || !ev.defaultPrevented) {\n      this._dismissMenu();\n    }\n  };\n\n  private _dismissMenu = (): void => {\n    this._menuShouldFocusOnMount = undefined;\n    this._menuShouldFocusOnContainer = undefined;\n    this.setState({ menuHidden: true });\n  };\n\n  private _openMenu = (shouldFocusOnContainer?: boolean, shouldFocusOnMount: boolean = true): void => {\n    if (this.props.menuProps) {\n      this._menuShouldFocusOnContainer = shouldFocusOnContainer;\n      this._menuShouldFocusOnMount = shouldFocusOnMount;\n      this._renderedVisibleMenu = true;\n      this.setState({ menuHidden: false });\n    }\n  };\n\n  private _onToggleMenu = (shouldFocusOnContainer: boolean): void => {\n    let shouldFocusOnMount = true;\n    if (this.props.menuProps && this.props.menuProps.shouldFocusOnMount === false) {\n      shouldFocusOnMount = false;\n    }\n\n    this.state.menuHidden ? this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : this._dismissMenu();\n  };\n\n  private _onRenderSplitButtonContent(tag: any, buttonProps: IButtonProps): JSX.Element {\n    const {\n      styles = {},\n      disabled,\n      allowDisabledFocus,\n      checked,\n      getSplitButtonClassNames,\n      primaryDisabled,\n      menuProps,\n      toggle,\n      role,\n      primaryActionButtonProps,\n    } = this.props;\n    let { keytipProps } = this.props;\n    const { menuHidden } = this.state;\n\n    const classNames = getSplitButtonClassNames\n      ? getSplitButtonClassNames(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus)\n      : styles && getBaseSplitButtonClassNames(styles!, !!disabled, !menuHidden, !!checked, !!primaryDisabled);\n\n    assign(buttonProps, {\n      onClick: undefined,\n      onPointerDown: undefined,\n      onPointerUp: undefined,\n      tabIndex: -1,\n      'data-is-focusable': false,\n    });\n\n    if (keytipProps && menuProps) {\n      keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);\n    }\n\n    const containerProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(buttonProps, [], ['disabled']);\n\n    // Add additional props to apply on primary action button\n    if (primaryActionButtonProps) {\n      assign(buttonProps, primaryActionButtonProps);\n    }\n\n    const SplitButton = (keytipAttributes?: any): JSX.Element => (\n      <div\n        {...containerProps}\n        data-ktp-target={keytipAttributes ? keytipAttributes['data-ktp-target'] : undefined}\n        role={role ? role : 'button'}\n        aria-disabled={disabled}\n        aria-haspopup={true}\n        aria-expanded={!menuHidden}\n        aria-pressed={toggle ? !!checked : undefined} // should only be present for toggle buttons\n        aria-describedby={mergeAriaAttributeValues(\n          buttonProps['aria-describedby'],\n          keytipAttributes ? keytipAttributes['aria-describedby'] : undefined,\n        )}\n        className={classNames && classNames.splitButtonContainer}\n        onKeyDown={this._onSplitButtonContainerKeyDown}\n        onTouchStart={this._onTouchStart}\n        ref={this._splitButtonContainer}\n        data-is-focusable={true}\n        onClick={!disabled && !primaryDisabled ? this._onSplitButtonPrimaryClick : undefined}\n        tabIndex={(!disabled && !primaryDisabled) || allowDisabledFocus ? 0 : undefined}\n        aria-roledescription={buttonProps['aria-roledescription']}\n        onFocusCapture={this._onSplitContainerFocusCapture}\n      >\n        <span style={{ display: 'flex' }}>\n          {this._onRenderContent(tag, buttonProps)}\n          {this._onRenderSplitButtonMenuButton(classNames, keytipAttributes)}\n          {this._onRenderSplitButtonDivider(classNames)}\n        </span>\n      </div>\n    );\n\n    return keytipProps ? (\n      <KeytipData keytipProps={keytipProps} disabled={disabled}>\n        {(keytipAttributes: any): JSX.Element => SplitButton(keytipAttributes)}\n      </KeytipData>\n    ) : (\n      SplitButton()\n    );\n  }\n\n  private _onSplitContainerFocusCapture = (ev: React.FocusEvent<HTMLDivElement>) => {\n    const container = this._splitButtonContainer.current;\n\n    // If the target is coming from the portal we do not need to set focus on the container.\n    if (!container || (ev.target && portalContainsElement(ev.target, container))) {\n      return;\n    }\n\n    // We should never be able to focus the individual buttons in a split button. Focus\n    // should always remain on the container.\n    container.focus();\n  };\n\n  private _onSplitButtonPrimaryClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n    if (!this.state.menuHidden) {\n      this._dismissMenu();\n    }\n\n    if (!this._processingTouch && this.props.onClick) {\n      this.props.onClick(ev);\n    } else if (this._processingTouch) {\n      this._onMenuClick(ev);\n    }\n  };\n\n  private _onRenderSplitButtonDivider(classNames: ISplitButtonClassNames | undefined): JSX.Element | null {\n    if (classNames && classNames.divider) {\n      const onClick = (ev: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        ev.stopPropagation();\n      };\n      return <span className={classNames.divider} aria-hidden={true} onClick={onClick} />;\n    }\n    return null;\n  }\n\n  private _onRenderSplitButtonMenuButton(\n    classNames: ISplitButtonClassNames | undefined,\n    keytipAttributes: any,\n  ): JSX.Element {\n    const {\n      allowDisabledFocus,\n      checked,\n      disabled,\n      splitButtonMenuProps,\n      splitButtonAriaLabel,\n      primaryDisabled,\n    } = this.props;\n    const { menuHidden } = this.state;\n    let menuIconProps = this.props.menuIconProps;\n\n    if (menuIconProps === undefined) {\n      menuIconProps = {\n        iconName: 'ChevronDown',\n      };\n    }\n\n    const splitButtonProps = {\n      ...splitButtonMenuProps,\n      styles: classNames,\n      checked: checked,\n      disabled: disabled,\n      allowDisabledFocus: allowDisabledFocus,\n      onClick: this._onMenuClick,\n      menuProps: undefined,\n      iconProps: { ...menuIconProps, className: this._classNames.menuIcon },\n      ariaLabel: splitButtonAriaLabel,\n      'aria-haspopup': true,\n      'aria-expanded': !menuHidden,\n      'data-is-focusable': false,\n    };\n\n    // Add data-ktp-execute-target to the split button if the keytip is defined\n    return (\n      <BaseButton\n        {...splitButtonProps}\n        data-ktp-execute-target={keytipAttributes ? keytipAttributes['data-ktp-execute-target'] : keytipAttributes}\n        onMouseDown={this._onMouseDown}\n        tabIndex={primaryDisabled && !allowDisabledFocus ? 0 : -1}\n      />\n    );\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>) => {\n    // explicity cancelling event so click won't fire after this\n    if (this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else if (!this.props.disabled) {\n      if (this.props.menuProps) {\n        this._onMenuKeyDown(ev);\n      } else if (this.props.onKeyDown !== undefined) {\n        this.props.onKeyDown(ev); // not cancelling event because it's not disabled\n      }\n    }\n  };\n\n  private _onKeyUp = (\n    ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled && this.props.onKeyUp !== undefined) {\n      this.props.onKeyUp(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onKeyPress = (\n    ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled && this.props.onKeyPress !== undefined) {\n      this.props.onKeyPress(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onMouseUp = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled && this.props.onMouseUp !== undefined) {\n      this.props.onMouseUp(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onMouseDown = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled && this.props.onMouseDown !== undefined) {\n      this.props.onMouseDown(ev); // not cancelling event because it's not disabled\n    }\n  };\n\n  private _onClick = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>,\n  ) => {\n    if (!this.props.disabled) {\n      if (this.props.menuProps) {\n        this._onMenuClick(ev);\n      } else if (this.props.onClick !== undefined) {\n        this.props.onClick(ev); // not cancelling event because it's not disabled\n      }\n    }\n  };\n\n  private _onSplitButtonContainerKeyDown = (ev: React.KeyboardEvent<HTMLDivElement>) => {\n    if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n      if (this._buttonElement.current) {\n        this._buttonElement.current.click();\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      this._onMenuKeyDown(ev);\n    }\n  };\n\n  private _onMenuKeyDown = (ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    const isUp = ev.which === KeyCodes.up;\n    const isDown = ev.which === KeyCodes.down;\n\n    if (!ev.defaultPrevented && this._isValidMenuOpenKey(ev)) {\n      const { onMenuClick } = this.props;\n      if (onMenuClick) {\n        onMenuClick(ev, this.props);\n      }\n\n      this._onToggleMenu(false);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n\n    if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n      // We manually set the focus visibility to true if opening via Enter or Space to account for the scenario where\n      // a user clicks on the button, closes the menu and then opens it via keyboard. In this scenario our default logic\n      // for setting focus visibility is not triggered since there is no keyboard navigation present beforehand.\n      setFocusVisibility(true, ev.target as Element);\n    }\n\n    if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {\n      // Suppose a menu, with shouldFocusOnMount: false, is open, and user wants to keyboard to the menu items\n      // We need to re-render the menu with shouldFocusOnMount as true.\n\n      if (!this.state.menuHidden && this.props.menuProps) {\n        const currentShouldFocusOnMount =\n          this._menuShouldFocusOnMount !== undefined\n            ? this._menuShouldFocusOnMount\n            : this.props.menuProps.shouldFocusOnMount;\n        if (!currentShouldFocusOnMount) {\n          ev.preventDefault();\n          ev.stopPropagation();\n          this._menuShouldFocusOnMount = true;\n          this.forceUpdate();\n        }\n      }\n    }\n  };\n\n  private _onTouchStart: () => void = () => {\n    if (\n      this._isSplitButton &&\n      this._splitButtonContainer.current &&\n      !('onpointerdown' in this._splitButtonContainer.current)\n    ) {\n      this._handleTouchAndPointerEvent();\n    }\n  };\n\n  private _onPointerDown(\n    ev: PointerEvent &\n      React.PointerEvent<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement | BaseButton | HTMLSpanElement>,\n  ) {\n    const { onPointerDown } = this.props;\n    if (onPointerDown) {\n      onPointerDown(ev);\n    }\n\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent();\n\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  }\n\n  private _handleTouchAndPointerEvent() {\n    // If we already have an existing timeout from a previous touch and pointer event\n    // cancel that timeout so we can set a new one.\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n\n      // Touch and pointer events don't focus the button naturally,\n      // so adding an imperative focus call to guarantee this behavior.\n      this.focus();\n    }, TouchIdleDelay);\n  }\n\n  /**\n   * Returns if the user hits a valid keyboard key to open the menu\n   * @param ev - the keyboard event\n   * @returns True if user clicks on custom trigger key if enabled or alt + down arrow if not. False otherwise.\n   */\n  private _isValidMenuOpenKey(\n    ev: React.KeyboardEvent<HTMLDivElement | HTMLAnchorElement | HTMLButtonElement>,\n  ): boolean {\n    if (this.props.menuTriggerKeyCode) {\n      return ev.which === this.props.menuTriggerKeyCode;\n    } else if (this.props.menuProps) {\n      return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);\n    }\n\n    // Note: When enter is pressed, we will let the event continue to propagate\n    // to trigger the onClick event on the button\n    return false;\n  }\n\n  private _onMenuClick = (\n    ev: React.MouseEvent<HTMLDivElement | HTMLButtonElement | HTMLAnchorElement | HTMLSpanElement>,\n  ) => {\n    const { onMenuClick } = this.props;\n    if (onMenuClick) {\n      onMenuClick(ev, this.props);\n    }\n\n    if (!ev.defaultPrevented) {\n      // When Edge + Narrator are used together (regardless of if the button is in a form or not), pressing\n      // \"Enter\" fires this method and not _onMenuKeyDown. Checking ev.nativeEvent.detail differentiates\n      // between a real click event and a keypress event (detail should be the number of mouse clicks).\n      // ...Plot twist! For a real click event in IE 11, detail is always 0 (Edge sets it properly to 1).\n      // So we also check the pointerType property, which both Edge and IE set to \"mouse\" for real clicks\n      // and \"\" for pressing \"Enter\" with Narrator on.\n      const shouldFocusOnContainer =\n        ev.nativeEvent.detail !== 0 || (ev.nativeEvent as PointerEvent).pointerType === 'mouse';\n      this._onToggleMenu(shouldFocusOnContainer);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}