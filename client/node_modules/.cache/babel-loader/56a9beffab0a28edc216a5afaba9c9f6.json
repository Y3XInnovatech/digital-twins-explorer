{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Constants } from \"./constants\";\nimport { XML_ATTRKEY } from \"./serializer.common\";\nvar validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport var isNode = typeof process !== \"undefined\" && !!process.version && !!process.versions && !!process.versions.node;\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param urlToCheck - The url to check\n * @returns True if the URL is HTTPS; false otherwise.\n */\nexport function urlIsHTTPS(urlToCheck) {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n/**\n * Encodes an URI.\n *\n * @param uri - The URI to be encoded.\n * @returns The encoded URI.\n */\nexport function encodeUri(uri) {\n  return encodeURIComponent(uri).replace(/!/g, \"%21\").replace(/\"/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/\\*/g, \"%2A\");\n}\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param response - The Http Response\n * @returns The stripped version of Http Response.\n */\nexport function stripResponse(response) {\n  var strippedResponse = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param request - The Http Request object\n * @returns The stripped version of Http Request.\n */\nexport function stripRequest(request) {\n  var strippedRequest = request.clone();\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n  return strippedRequest;\n}\n/**\n * Validates the given uuid as a string\n *\n * @param uuid - The uuid as a string that needs to be validated\n * @returns True if the uuid is valid; false otherwise.\n */\nexport function isValidUuid(uuid) {\n  return validUuidRegex.test(uuid);\n}\n/**\n * Generated UUID\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function generateUuid() {\n  return uuidv4();\n}\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param promiseFactories - An array of promise factories(A function that return a promise)\n * @param kickstart - Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n * @returns A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(promiseFactories, kickstart) {\n  var result = Promise.resolve(kickstart);\n  promiseFactories.forEach(function (promiseFactory) {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param t - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @returns Resolved promise\n */\nexport function delay(t, value) {\n  return new Promise(function (resolve) {\n    return setTimeout(function () {\n      return resolve(value);\n    }, t);\n  });\n}\n/**\n * Converts a Promise to a callback.\n * @param promise - The Promise to be converted to a callback\n * @returns A function that takes the callback `(cb: Function) => void`\n * @deprecated generated code should instead depend on responseToBody\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function promiseToCallback(promise) {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  return function (cb) {\n    promise.then(function (data) {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      return cb(undefined, data);\n    }).catch(function (err) {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      cb(err);\n    });\n  };\n}\n/**\n * Converts a Promise to a service callback.\n * @param promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns A function that takes the service callback (cb: ServiceCallback<T>): void\n */\nexport function promiseToServiceCallback(promise) {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return function (cb) {\n    promise.then(function (data) {\n      return process.nextTick(cb, undefined, data.parsedBody, data.request, data);\n    }).catch(function (err) {\n      process.nextTick(cb, err);\n    });\n  };\n}\nexport function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n  var _a, _b, _c;\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return _a = {}, _a[elementName] = obj, _a;\n  }\n  var result = (_b = {}, _b[elementName] = obj, _b);\n  result[XML_ATTRKEY] = (_c = {}, _c[xmlNamespaceKey] = xmlNamespace, _c);\n  return result;\n}\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param targetCtor - The target object on which the properties need to be applied.\n * @param sourceCtors - An array of source objects from which the properties need to be taken.\n */\nexport function applyMixins(targetCtorParam, sourceCtors) {\n  var castTargetCtorParam = targetCtorParam;\n  sourceCtors.forEach(function (sourceCtor) {\n    Object.getOwnPropertyNames(sourceCtor.prototype).forEach(function (name) {\n      castTargetCtorParam.prototype[name] = sourceCtor.prototype[name];\n    });\n  });\n}\nvar validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @returns `true` if valid, `false` otherwise.\n */\nexport function isDuration(value) {\n  return validateISODuration.test(value);\n}\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param value - The value to search and replace in.\n * @param searchValue - The value to search for in the value argument.\n * @param replaceValue - The value to replace searchValue with in the value argument.\n * @returns The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(value, searchValue, replaceValue) {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n/**\n * Determines whether the given entity is a basic/primitive type\n * (string, number, boolean, null, undefined).\n * @param value - Any entity\n * @returns true is it is primitive type, false otherwise.\n */\nexport function isPrimitiveType(value) {\n  return typeof value !== \"object\" && typeof value !== \"function\" || value === null;\n}\nexport function getEnvironmentValue(name) {\n  if (process.env[name]) {\n    return process.env[name];\n  } else if (process.env[name.toLowerCase()]) {\n    return process.env[name.toLowerCase()];\n  }\n  return undefined;\n}","map":{"version":3,"sources":["../../../src/util/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResourceLike } from \"../webResource\";\nimport { Constants } from \"./constants\";\nimport { XML_ATTRKEY } from \"./serializer.common\";\n\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode =\n  typeof process !== \"undefined\" &&\n  !!process.version &&\n  !!process.versions &&\n  !!process.versions.node;\n\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param urlToCheck - The url to check\n * @returns True if the URL is HTTPS; false otherwise.\n */\nexport function urlIsHTTPS(urlToCheck: { protocol: string }): boolean {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n\n/**\n * Encodes an URI.\n *\n * @param uri - The URI to be encoded.\n * @returns The encoded URI.\n */\nexport function encodeUri(uri: string): string {\n  return encodeURIComponent(uri)\n    .replace(/!/g, \"%21\")\n    .replace(/\"/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\n\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param response - The Http Response\n * @returns The stripped version of Http Response.\n */\nexport function stripResponse(response: HttpOperationResponse): any {\n  const strippedResponse: any = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param request - The Http Request object\n * @returns The stripped version of Http Request.\n */\nexport function stripRequest(request: WebResourceLike): WebResourceLike {\n  const strippedRequest = request.clone();\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n  return strippedRequest;\n}\n\n/**\n * Validates the given uuid as a string\n *\n * @param uuid - The uuid as a string that needs to be validated\n * @returns True if the uuid is valid; false otherwise.\n */\nexport function isValidUuid(uuid: string): boolean {\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Generated UUID\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function generateUuid(): string {\n  return uuidv4();\n}\n\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param promiseFactories - An array of promise factories(A function that return a promise)\n * @param kickstart - Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n * @returns A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(\n  promiseFactories: Array<any>,\n  kickstart: unknown\n): Promise<any> {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach((promiseFactory) => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param t - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @returns Resolved promise\n */\nexport function delay<T>(t: number, value?: T): Promise<T | void> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n\n/**\n * Service callback that is returned for REST requests initiated by the service client.\n */\nexport interface ServiceCallback<TResult> {\n  /**\n   * A method that will be invoked as a callback to a service function.\n   * @param err - The error occurred if any, while executing the request; otherwise null.\n   * @param result - The deserialized response body if an error did not occur.\n   * @param request - The raw/actual request sent to the server if an error did not occur.\n   * @param response - The raw/actual response from the server if an error did not occur.\n   */\n  (\n    err: Error | RestError | null,\n    result?: TResult,\n    request?: WebResourceLike,\n    response?: HttpOperationResponse\n  ): void;\n}\n\n/**\n * Converts a Promise to a callback.\n * @param promise - The Promise to be converted to a callback\n * @returns A function that takes the callback `(cb: Function) => void`\n * @deprecated generated code should instead depend on responseToBody\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function promiseToCallback(promise: Promise<any>): (cb: Function) => void {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  return (cb: Function): void => {\n    promise\n      .then((data: any) => {\n        // eslint-disable-next-line promise/no-callback-in-promise\n        return cb(undefined, data);\n      })\n      .catch((err: Error) => {\n        // eslint-disable-next-line promise/no-callback-in-promise\n        cb(err);\n      });\n  };\n}\n\n/**\n * Converts a Promise to a service callback.\n * @param promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns A function that takes the service callback (cb: ServiceCallback<T>): void\n */\nexport function promiseToServiceCallback<T>(\n  promise: Promise<HttpOperationResponse>\n): (cb: ServiceCallback<T>) => void {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: ServiceCallback<T>): void => {\n    promise\n      .then((data: HttpOperationResponse) => {\n        return process.nextTick(cb, undefined, data.parsedBody as T, data.request, data);\n      })\n      .catch((err: Error) => {\n        process.nextTick(cb, err);\n      });\n  };\n}\n\nexport function prepareXMLRootList(\n  obj: unknown,\n  elementName: string,\n  xmlNamespaceKey?: string,\n  xmlNamespace?: string\n): { [s: string]: any } {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return { [elementName]: obj };\n  }\n\n  const result = { [elementName]: obj };\n  result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n  return result;\n}\n\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param targetCtor - The target object on which the properties need to be applied.\n * @param sourceCtors - An array of source objects from which the properties need to be taken.\n */\nexport function applyMixins(targetCtorParam: unknown, sourceCtors: any[]): void {\n  const castTargetCtorParam = targetCtorParam as {\n    prototype: Record<string, unknown>;\n  };\n  sourceCtors.forEach((sourceCtor) => {\n    Object.getOwnPropertyNames(sourceCtor.prototype).forEach((name) => {\n      castTargetCtorParam.prototype[name] = sourceCtor.prototype[name];\n    });\n  });\n}\n\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @returns `true` if valid, `false` otherwise.\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param value - The value to search and replace in.\n * @param searchValue - The value to search for in the value argument.\n * @param replaceValue - The value to replace searchValue with in the value argument.\n * @returns The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(\n  value: string | undefined,\n  searchValue: string,\n  replaceValue: string\n): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n\n/**\n * Determines whether the given entity is a basic/primitive type\n * (string, number, boolean, null, undefined).\n * @param value - Any entity\n * @returns true is it is primitive type, false otherwise.\n */\nexport function isPrimitiveType(value: unknown): boolean {\n  return (typeof value !== \"object\" && typeof value !== \"function\") || value === null;\n}\n\nexport function getEnvironmentValue(name: string): string | undefined {\n  if (process.env[name]) {\n    return process.env[name];\n  } else if (process.env[name.toLowerCase()]) {\n    return process.env[name.toLowerCase()];\n  }\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}