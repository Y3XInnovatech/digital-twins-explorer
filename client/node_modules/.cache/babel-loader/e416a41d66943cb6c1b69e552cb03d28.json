{"ast":null,"code":"import { find } from '../../Utilities';\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns T/F if the transition keys are equal.\n */\nexport function transitionKeysAreEqual(key1, key2) {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n  var mod1 = key1.modifierKeys;\n  var mod2 = key2.modifierKeys;\n  if (!mod1 && mod2 || mod1 && !mod2) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    }\n    // Sort both arrays\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n    for (var i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns T/F if 'keys' contains 'key'.\n */\nexport function transitionKeysContain(keys, key) {\n  return !!find(keys, function (transitionKey) {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}","map":{"version":3,"sources":["utilities/keytips/IKeytipTransitionKey.ts"],"names":[],"mappings":"AAAA,SAAS,IAAI,QAAkB,iBAAiB;AAahD;;;;;;AAMG;AACH,OAAM,SAAU,sBAAsB,CAAC,IAA0B,EAAE,IAA0B,EAAA;EAC3F,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,EAAE;IACzB,OAAO,KAAK;EACb;EAED,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY;EAC5B,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY;EAE5B,IAAK,CAAC,IAAI,IAAI,IAAI,IAAM,IAAI,IAAI,CAAC,IAAK,EAAE;IACtC;IACA,OAAO,KAAK;EACb;EAED,IAAI,IAAI,IAAI,IAAI,EAAE;IAChB,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;MAC/B,OAAO,KAAK;IACb;IAED;IACA,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA,CAAE;IAClB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA,CAAE;IAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACpC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;QACvB,OAAO,KAAK;MACb;IACF;EACF;EAED,OAAO,IAAI;AACb;AAEA;;;;;;AAMG;AACH,OAAM,SAAU,qBAAqB,CAAC,IAA4B,EAAE,GAAyB,EAAA;EAC3F,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,aAAmC,EAAA;IACtD,OAAO,sBAAsB,CAAC,aAAa,EAAE,GAAG,CAAC;EACnD,CAAC,CAAC;AACJ","sourcesContent":["import { find, KeyCodes } from '../../Utilities';\n\nexport type KeytipTransitionModifier =\n  | typeof KeyCodes.shift\n  | typeof KeyCodes.ctrl\n  | typeof KeyCodes.alt\n  | typeof KeyCodes.leftWindow;\n\nexport interface IKeytipTransitionKey {\n  key: string;\n  modifierKeys?: KeytipTransitionModifier[];\n}\n\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns T/F if the transition keys are equal.\n */\nexport function transitionKeysAreEqual(key1: IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n\n  let mod1 = key1.modifierKeys;\n  let mod2 = key2.modifierKeys;\n\n  if ((!mod1 && mod2) || (mod1 && !mod2)) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    }\n\n    // Sort both arrays\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n    for (let i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns T/F if 'keys' contains 'key'.\n */\nexport function transitionKeysContain(keys: IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean {\n  return !!find(keys, (transitionKey: IKeytipTransitionKey) => {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}