{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { __read, __spread, __values } from \"tslib\";\nimport debug from \"./debug\";\nvar registeredLoggers = new Set();\nvar logLevelFromEnv = typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL || undefined;\nvar azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport var AzureLogger = debug(\"azure\");\nAzureLogger.log = function () {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  debug.log.apply(debug, __spread(args));\n};\nvar AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n  if (isAzureLogLevel(logLevelFromEnv)) {\n    setLogLevel(logLevelFromEnv);\n  } else {\n    console.error(\"AZURE_LOG_LEVEL set to unknown log level '\" + logLevelFromEnv + \"'; logging is not enabled. Acceptable values: \" + AZURE_LOG_LEVELS.join(\", \") + \".\");\n  }\n}\n/**\n * Immediately enables logging at the specified log level.\n * @param level The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level) {\n  var e_1, _a;\n  if (level && !isAzureLogLevel(level)) {\n    throw new Error(\"Unknown log level '\" + level + \"'. Acceptable values: \" + AZURE_LOG_LEVELS.join(\",\"));\n  }\n  azureLogLevel = level;\n  var enabledNamespaces = [];\n  try {\n    for (var registeredLoggers_1 = __values(registeredLoggers), registeredLoggers_1_1 = registeredLoggers_1.next(); !registeredLoggers_1_1.done; registeredLoggers_1_1 = registeredLoggers_1.next()) {\n      var logger = registeredLoggers_1_1.value;\n      if (shouldEnable(logger)) {\n        enabledNamespaces.push(logger.namespace);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (registeredLoggers_1_1 && !registeredLoggers_1_1.done && (_a = registeredLoggers_1.return)) _a.call(registeredLoggers_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  debug.enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n  return azureLogLevel;\n}\nvar levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace The name of the SDK package.\n * @ignore\n */\nexport function createClientLogger(namespace) {\n  var clientRootLogger = AzureLogger.extend(namespace);\n  patchLogMethod(AzureLogger, clientRootLogger);\n  return {\n    error: createLogger(clientRootLogger, \"error\"),\n    warning: createLogger(clientRootLogger, \"warning\"),\n    info: createLogger(clientRootLogger, \"info\"),\n    verbose: createLogger(clientRootLogger, \"verbose\")\n  };\n}\nfunction patchLogMethod(parent, child) {\n  child.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    parent.log.apply(parent, __spread(args));\n  };\n}\nfunction createLogger(parent, level) {\n  var logger = Object.assign(parent.extend(level), {\n    level: level\n  });\n  patchLogMethod(parent, logger);\n  if (shouldEnable(logger)) {\n    var enabledNamespaces = debug.disable();\n    debug.enable(enabledNamespaces + \",\" + logger.namespace);\n  }\n  registeredLoggers.add(logger);\n  return logger;\n}\nfunction shouldEnable(logger) {\n  if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction isAzureLogLevel(logLevel) {\n  return AZURE_LOG_LEVELS.includes(logLevel);\n}","map":{"version":3,"sources":["../../src/logger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { __read, __spread, __values } from \"tslib\";\nimport debug from \"./debug\";\nvar registeredLoggers = new Set();\nvar logLevelFromEnv = (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\nvar azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport var AzureLogger = debug(\"azure\");\nAzureLogger.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    debug.log.apply(debug, __spread(args));\n};\nvar AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n    if (isAzureLogLevel(logLevelFromEnv)) {\n        setLogLevel(logLevelFromEnv);\n    }\n    else {\n        console.error(\"AZURE_LOG_LEVEL set to unknown log level '\" + logLevelFromEnv + \"'; logging is not enabled. Acceptable values: \" + AZURE_LOG_LEVELS.join(\", \") + \".\");\n    }\n}\n/**\n * Immediately enables logging at the specified log level.\n * @param level The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level) {\n    var e_1, _a;\n    if (level && !isAzureLogLevel(level)) {\n        throw new Error(\"Unknown log level '\" + level + \"'. Acceptable values: \" + AZURE_LOG_LEVELS.join(\",\"));\n    }\n    azureLogLevel = level;\n    var enabledNamespaces = [];\n    try {\n        for (var registeredLoggers_1 = __values(registeredLoggers), registeredLoggers_1_1 = registeredLoggers_1.next(); !registeredLoggers_1_1.done; registeredLoggers_1_1 = registeredLoggers_1.next()) {\n            var logger = registeredLoggers_1_1.value;\n            if (shouldEnable(logger)) {\n                enabledNamespaces.push(logger.namespace);\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (registeredLoggers_1_1 && !registeredLoggers_1_1.done && (_a = registeredLoggers_1.return)) _a.call(registeredLoggers_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    debug.enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n    return azureLogLevel;\n}\nvar levelMap = {\n    verbose: 400,\n    info: 300,\n    warning: 200,\n    error: 100\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace The name of the SDK package.\n * @ignore\n */\nexport function createClientLogger(namespace) {\n    var clientRootLogger = AzureLogger.extend(namespace);\n    patchLogMethod(AzureLogger, clientRootLogger);\n    return {\n        error: createLogger(clientRootLogger, \"error\"),\n        warning: createLogger(clientRootLogger, \"warning\"),\n        info: createLogger(clientRootLogger, \"info\"),\n        verbose: createLogger(clientRootLogger, \"verbose\")\n    };\n}\nfunction patchLogMethod(parent, child) {\n    child.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        parent.log.apply(parent, __spread(args));\n    };\n}\nfunction createLogger(parent, level) {\n    var logger = Object.assign(parent.extend(level), {\n        level: level\n    });\n    patchLogMethod(parent, logger);\n    if (shouldEnable(logger)) {\n        var enabledNamespaces = debug.disable();\n        debug.enable(enabledNamespaces + \",\" + logger.namespace);\n    }\n    registeredLoggers.add(logger);\n    return logger;\n}\nfunction shouldEnable(logger) {\n    if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction isAzureLogLevel(logLevel) {\n    return AZURE_LOG_LEVELS.includes(logLevel);\n}\n//# sourceMappingURL=logger.js.map"]},"metadata":{},"sourceType":"module"}