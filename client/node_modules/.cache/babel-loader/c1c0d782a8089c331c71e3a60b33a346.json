{"ast":null,"code":"import { getDocument } from './dom/getDocument';\nimport { mergeStyles } from '@uifabric/merge-styles';\nimport { getWindow } from './dom/getWindow';\nvar _scrollbarWidth;\nvar _bodyScrollDisabledCount = 0;\nvar DisabledScrollClassName = mergeStyles({\n  overflow: 'hidden !important'\n});\n/**\n * Placing this attribute on scrollable divs optimizes detection to know\n * if the div is scrollable or not (given we can avoid expensive operations\n * like getComputedStyle.)\n *\n * @public\n */\nexport var DATA_IS_SCROLLABLE_ATTRIBUTE = 'data-is-scrollable';\n/**\n * Allows the user to scroll within a element,\n * while preventing the user from scrolling the body\n */\nexport var allowScrollOnElement = function (element, events) {\n  if (!element) {\n    return;\n  }\n  var _previousClientY = 0;\n  var _element = null;\n  // remember the clientY for future calls of _preventOverscrolling\n  var _saveClientY = function (event) {\n    if (event.targetTouches.length === 1) {\n      _previousClientY = event.targetTouches[0].clientY;\n    }\n  };\n  // prevent the body from scrolling when the user attempts\n  // to scroll past the top or bottom of the element\n  var _preventOverscrolling = function (event) {\n    // only respond to a single-finger touch\n    if (event.targetTouches.length !== 1) {\n      return;\n    }\n    // prevent the body touchmove handler from firing\n    // so that scrolling is allowed within the element\n    event.stopPropagation();\n    if (!_element) {\n      return;\n    }\n    var clientY = event.targetTouches[0].clientY - _previousClientY;\n    var scrollableParent = findScrollableParent(event.target);\n    if (scrollableParent) {\n      _element = scrollableParent;\n    }\n    // if the element is scrolled to the top,\n    // prevent the user from scrolling up\n    if (_element.scrollTop === 0 && clientY > 0) {\n      event.preventDefault();\n    }\n    // if the element is scrolled to the bottom,\n    // prevent the user from scrolling down\n    if (_element.scrollHeight - Math.ceil(_element.scrollTop) <= _element.clientHeight && clientY < 0) {\n      event.preventDefault();\n    }\n  };\n  events.on(element, 'touchstart', _saveClientY, {\n    passive: false\n  });\n  events.on(element, 'touchmove', _preventOverscrolling, {\n    passive: false\n  });\n  _element = element;\n};\n/**\n * Same as allowScrollOnElement but does not prevent overscrolling.\n */\nexport var allowOverscrollOnElement = function (element, events) {\n  if (!element) {\n    return;\n  }\n  var _allowElementScroll = function (event) {\n    event.stopPropagation();\n  };\n  events.on(element, 'touchmove', _allowElementScroll, {\n    passive: false\n  });\n};\nvar _disableIosBodyScroll = function (event) {\n  event.preventDefault();\n};\n/**\n * Disables the body scrolling.\n *\n * @public\n */\nexport function disableBodyScroll() {\n  var doc = getDocument();\n  if (doc && doc.body && !_bodyScrollDisabledCount) {\n    doc.body.classList.add(DisabledScrollClassName);\n    doc.body.addEventListener('touchmove', _disableIosBodyScroll, {\n      passive: false,\n      capture: false\n    });\n  }\n  _bodyScrollDisabledCount++;\n}\n/**\n * Enables the body scrolling.\n *\n * @public\n */\nexport function enableBodyScroll() {\n  if (_bodyScrollDisabledCount > 0) {\n    var doc = getDocument();\n    if (doc && doc.body && _bodyScrollDisabledCount === 1) {\n      doc.body.classList.remove(DisabledScrollClassName);\n      doc.body.removeEventListener('touchmove', _disableIosBodyScroll);\n    }\n    _bodyScrollDisabledCount--;\n  }\n}\n/**\n * Calculates the width of a scrollbar for the browser/os.\n *\n * @public\n */\nexport function getScrollbarWidth() {\n  if (_scrollbarWidth === undefined) {\n    var scrollDiv = document.createElement('div');\n    scrollDiv.style.setProperty('width', '100px');\n    scrollDiv.style.setProperty('height', '100px');\n    scrollDiv.style.setProperty('overflow', 'scroll');\n    scrollDiv.style.setProperty('position', 'absolute');\n    scrollDiv.style.setProperty('top', '-9999px');\n    document.body.appendChild(scrollDiv);\n    // Get the scrollbar width\n    _scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    // Delete the DIV\n    document.body.removeChild(scrollDiv);\n  }\n  return _scrollbarWidth;\n}\n/**\n * Traverses up the DOM for the element with the data-is-scrollable=true attribute, or returns\n * document.body.\n *\n * @public\n */\nexport function findScrollableParent(startingElement) {\n  var el = startingElement;\n  var doc = getDocument(startingElement);\n  // First do a quick scan for the scrollable attribute.\n  while (el && el !== doc.body) {\n    if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === 'true') {\n      return el;\n    }\n    el = el.parentElement;\n  }\n  // If we haven't found it, the use the slower method: compute styles to evaluate if overflow is set.\n  el = startingElement;\n  while (el && el !== doc.body) {\n    if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== 'false') {\n      var computedStyles = getComputedStyle(el);\n      var overflowY = computedStyles ? computedStyles.getPropertyValue('overflow-y') : '';\n      if (overflowY && (overflowY === 'scroll' || overflowY === 'auto')) {\n        return el;\n      }\n    }\n    el = el.parentElement;\n  }\n  // Fall back to window scroll.\n  if (!el || el === doc.body) {\n    el = getWindow(startingElement);\n  }\n  return el;\n}","map":{"version":3,"sources":["scroll.ts"],"names":[],"mappings":"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","sourcesContent":["import { getDocument } from './dom/getDocument';\nimport { mergeStyles } from '@uifabric/merge-styles';\nimport { EventGroup } from './EventGroup';\nimport { getWindow } from './dom/getWindow';\n\nlet _scrollbarWidth: number;\nlet _bodyScrollDisabledCount = 0;\n\nconst DisabledScrollClassName = mergeStyles({\n  overflow: 'hidden !important' as 'hidden',\n});\n\n/**\n * Placing this attribute on scrollable divs optimizes detection to know\n * if the div is scrollable or not (given we can avoid expensive operations\n * like getComputedStyle.)\n *\n * @public\n */\nexport const DATA_IS_SCROLLABLE_ATTRIBUTE = 'data-is-scrollable';\n\n/**\n * Allows the user to scroll within a element,\n * while preventing the user from scrolling the body\n */\nexport const allowScrollOnElement = (element: HTMLElement | null, events: EventGroup): void => {\n  if (!element) {\n    return;\n  }\n\n  let _previousClientY = 0;\n  let _element: Element | null = null;\n\n  // remember the clientY for future calls of _preventOverscrolling\n  const _saveClientY = (event: TouchEvent): void => {\n    if (event.targetTouches.length === 1) {\n      _previousClientY = event.targetTouches[0].clientY;\n    }\n  };\n\n  // prevent the body from scrolling when the user attempts\n  // to scroll past the top or bottom of the element\n  const _preventOverscrolling = (event: TouchEvent): void => {\n    // only respond to a single-finger touch\n    if (event.targetTouches.length !== 1) {\n      return;\n    }\n\n    // prevent the body touchmove handler from firing\n    // so that scrolling is allowed within the element\n    event.stopPropagation();\n\n    if (!_element) {\n      return;\n    }\n\n    const clientY = event.targetTouches[0].clientY - _previousClientY;\n\n    const scrollableParent = findScrollableParent(event.target as HTMLElement) as HTMLElement;\n    if (scrollableParent) {\n      _element = scrollableParent;\n    }\n\n    // if the element is scrolled to the top,\n    // prevent the user from scrolling up\n    if (_element.scrollTop === 0 && clientY > 0) {\n      event.preventDefault();\n    }\n\n    // if the element is scrolled to the bottom,\n    // prevent the user from scrolling down\n    if (_element.scrollHeight - Math.ceil(_element.scrollTop) <= _element.clientHeight && clientY < 0) {\n      event.preventDefault();\n    }\n  };\n\n  events.on(element, 'touchstart', _saveClientY, { passive: false });\n  events.on(element, 'touchmove', _preventOverscrolling, { passive: false });\n\n  _element = element;\n};\n\n/**\n * Same as allowScrollOnElement but does not prevent overscrolling.\n */\nexport const allowOverscrollOnElement = (element: HTMLElement | null, events: EventGroup): void => {\n  if (!element) {\n    return;\n  }\n  const _allowElementScroll = (event: TouchEvent) => {\n    event.stopPropagation();\n  };\n  events.on(element, 'touchmove', _allowElementScroll, { passive: false });\n};\n\nconst _disableIosBodyScroll = (event: TouchEvent) => {\n  event.preventDefault();\n};\n\n/**\n * Disables the body scrolling.\n *\n * @public\n */\nexport function disableBodyScroll(): void {\n  let doc = getDocument();\n\n  if (doc && doc.body && !_bodyScrollDisabledCount) {\n    doc.body.classList.add(DisabledScrollClassName);\n    doc.body.addEventListener('touchmove', _disableIosBodyScroll, { passive: false, capture: false });\n  }\n\n  _bodyScrollDisabledCount++;\n}\n\n/**\n * Enables the body scrolling.\n *\n * @public\n */\nexport function enableBodyScroll(): void {\n  if (_bodyScrollDisabledCount > 0) {\n    let doc = getDocument();\n\n    if (doc && doc.body && _bodyScrollDisabledCount === 1) {\n      doc.body.classList.remove(DisabledScrollClassName);\n      doc.body.removeEventListener('touchmove', _disableIosBodyScroll);\n    }\n\n    _bodyScrollDisabledCount--;\n  }\n}\n\n/**\n * Calculates the width of a scrollbar for the browser/os.\n *\n * @public\n */\nexport function getScrollbarWidth(): number {\n  if (_scrollbarWidth === undefined) {\n    let scrollDiv: HTMLElement = document.createElement('div');\n    scrollDiv.style.setProperty('width', '100px');\n    scrollDiv.style.setProperty('height', '100px');\n    scrollDiv.style.setProperty('overflow', 'scroll');\n    scrollDiv.style.setProperty('position', 'absolute');\n    scrollDiv.style.setProperty('top', '-9999px');\n    document.body.appendChild(scrollDiv);\n    // Get the scrollbar width\n    _scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n    // Delete the DIV\n    document.body.removeChild(scrollDiv);\n  }\n\n  return _scrollbarWidth;\n}\n\n/**\n * Traverses up the DOM for the element with the data-is-scrollable=true attribute, or returns\n * document.body.\n *\n * @public\n */\nexport function findScrollableParent(startingElement: HTMLElement | null): HTMLElement | Window | undefined | null {\n  let el: HTMLElement | Window | undefined | null = startingElement;\n  const doc = getDocument(startingElement)!;\n\n  // First do a quick scan for the scrollable attribute.\n  while (el && el !== doc.body) {\n    if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === 'true') {\n      return el;\n    }\n    el = el.parentElement;\n  }\n\n  // If we haven't found it, the use the slower method: compute styles to evaluate if overflow is set.\n  el = startingElement;\n\n  while (el && el !== doc.body) {\n    if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== 'false') {\n      const computedStyles = getComputedStyle(el);\n      let overflowY = computedStyles ? computedStyles.getPropertyValue('overflow-y') : '';\n\n      if (overflowY && (overflowY === 'scroll' || overflowY === 'auto')) {\n        return el;\n      }\n    }\n\n    el = el.parentElement;\n  }\n\n  // Fall back to window scroll.\n  if (!el || el === doc.body) {\n    el = getWindow(startingElement);\n  }\n\n  return el;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}