{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n *  Returns a wrapper function for `setInterval` which automatically handles disposal.\n */\nexport var useSetInterval = function () {\n  var intervalIds = useConst({});\n  React.useEffect(function () {\n    return function () {\n      for (var _i = 0, _a = Object.keys(intervalIds); _i < _a.length; _i++) {\n        var id = _a[_i];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearInterval(id);\n      }\n    };\n  },\n  // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n  [intervalIds]);\n  return useConst({\n    setInterval: function (func, duration) {\n      var id = setInterval(func, duration);\n      intervalIds[id] = 1;\n      return id;\n    },\n    clearInterval: function (id) {\n      delete intervalIds[id];\n      clearInterval(id);\n    }\n  });\n};","map":{"version":3,"sources":["useSetInterval.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,QAAQ,QAAQ,YAAY;AAOrC;;AAEG;AACH,OAAO,IAAM,cAAc,GAAG,SAAA,CAAA,EAAA;EAC5B,IAAM,WAAW,GAAG,QAAQ,CAAyB,CAAA,CAAE,CAAC;EAExD,KAAK,CAAC,SAAS,CACb,YAAA;IAAM,OAAA,YAAA;MACJ,KAAiB,IAAA,EAAA,GAAA,CAAwB,EAAxB,EAAA,GAAA,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAxB,EAAA,GAAA,EAAA,CAAA,MAAwB,EAAxB,EAAA,EAAwB,EAAE;QAAtC,IAAM,EAAE,GAAA,EAAA,CAAA,EAAA,CAAA;QACX;QACA,aAAa,CAAC,EAAS,CAAC;MACzB;IACH,CAAC;EALK,CAKL;EACD;EACA,CAAC,WAAW,CAAC,CACd;EAED,OAAO,QAAQ,CAAC;IACd,WAAW,EAAE,SAAA,CAAC,IAAgB,EAAE,QAAgB,EAAA;MAC9C,IAAM,EAAE,GAAI,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAuB;MAE7D,WAAW,CAAC,EAAE,CAAC,GAAG,CAAC;MAEnB,OAAO,EAAE;IACX,CAAC;IAED,aAAa,EAAE,SAAA,CAAC,EAAU,EAAA;MACxB,OAAO,WAAW,CAAC,EAAE,CAAC;MACtB,aAAa,CAAC,EAAE,CAAC;IACnB;GACD,CAAC;AACJ,CAAC","sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetIntervalReturnType = {\n  setInterval: (callback: () => void, duration: number) => number;\n  clearInterval: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setInterval` which automatically handles disposal.\n */\nexport const useSetInterval = (): UseSetIntervalReturnType => {\n  const intervalIds = useConst<Record<number, number>>({});\n\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(intervalIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearInterval(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [intervalIds],\n  );\n\n  return useConst({\n    setInterval: (func: () => void, duration: number): number => {\n      const id = (setInterval(func, duration) as unknown) as number;\n\n      intervalIds[id] = 1;\n\n      return id;\n    },\n\n    clearInterval: (id: number): void => {\n      delete intervalIds[id];\n      clearInterval(id);\n    },\n  });\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}