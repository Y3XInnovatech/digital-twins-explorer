{"ast":null,"code":"\"use strict\";\n\nmodule.exports = compile;\n\n// By using a named \"eval\" most browsers will execute in the global scope.\n// http://www.davidflanagan.com/2010/12/global-eval-in.html\n// Unfortunately execScript doesn't always return the value of the evaluated expression (at least in Chrome)\nvar globalEval = /*this.execScript ||*/eval;\n// For Firebug evaled code isn't debuggable otherwise\n// http://code.google.com/p/fbug/issues/detail?id=2198\nif (global.navigator && global.navigator.userAgent.indexOf(\"Firefox\") >= 0) {\n  globalEval = new Function(\"_\", \"return eval(_)\");\n}\nfunction compile(module) {\n  // Here we use a couple tricks to make debugging better in various browsers:\n  // TODO: determine if these are all necessary / the best options\n  // 1. name the function with something inteligible since some debuggers display the first part of each eval (Firebug)\n  // 2. append the \"//# sourceURL=filename\" hack (Safari, Chrome, Firebug)\n  //  * http://pmuellr.blogspot.com/2009/06/debugger-friendly.html\n  //  * http://blog.getfirebug.com/2009/08/11/give-your-eval-a-name-with-sourceurl/\n  //      TODO: investigate why this isn't working in Firebug.\n  // 3. set displayName property on the factory function (Safari, Chrome)\n\n  var displayName = module.filename.replace(/[^\\w\\d]|^\\d/g, \"_\");\n  try {\n    module.factory = globalEval(\"(function \" + displayName + \"(require, exports, module, __filename, __dirname) {\" + module.text + \"//*/\\n})\\n//# sourceURL=\" + module.system.location + module.id);\n  } catch (exception) {\n    exception.message = exception.message + \" in \" + module.filename;\n    throw exception;\n  }\n\n  // This should work and would be simpler, but Firebug does not show scripts executed via \"new Function()\" constructor.\n  // TODO: sniff browser?\n  // module.factory = new Function(\"require\", \"exports\", \"module\", module.text + \"\\n//*/\"+sourceURLComment);\n\n  module.factory.displayName = module.filename;\n}","map":{"version":3,"names":["module","exports","compile","globalEval","eval","global","navigator","userAgent","indexOf","Function","displayName","filename","replace","factory","text","system","location","id","exception","message"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/system/compile.js"],"sourcesContent":["\"use strict\";\n\nmodule.exports = compile;\n\n// By using a named \"eval\" most browsers will execute in the global scope.\n// http://www.davidflanagan.com/2010/12/global-eval-in.html\n// Unfortunately execScript doesn't always return the value of the evaluated expression (at least in Chrome)\nvar globalEval = /*this.execScript ||*/eval;\n// For Firebug evaled code isn't debuggable otherwise\n// http://code.google.com/p/fbug/issues/detail?id=2198\nif (global.navigator && global.navigator.userAgent.indexOf(\"Firefox\") >= 0) {\n    globalEval = new Function(\"_\", \"return eval(_)\");\n}\n\nfunction compile(module) {\n\n    // Here we use a couple tricks to make debugging better in various browsers:\n    // TODO: determine if these are all necessary / the best options\n    // 1. name the function with something inteligible since some debuggers display the first part of each eval (Firebug)\n    // 2. append the \"//# sourceURL=filename\" hack (Safari, Chrome, Firebug)\n    //  * http://pmuellr.blogspot.com/2009/06/debugger-friendly.html\n    //  * http://blog.getfirebug.com/2009/08/11/give-your-eval-a-name-with-sourceurl/\n    //      TODO: investigate why this isn't working in Firebug.\n    // 3. set displayName property on the factory function (Safari, Chrome)\n\n    var displayName = module.filename.replace(/[^\\w\\d]|^\\d/g, \"_\");\n\n    try {\n        module.factory = globalEval(\n            \"(function \" +\n            displayName +\n             \"(require, exports, module, __filename, __dirname) {\" +\n            module.text +\n            \"//*/\\n})\\n//# sourceURL=\" +\n            module.system.location + module.id\n        );\n    } catch (exception) {\n        exception.message = exception.message + \" in \" + module.filename;\n        throw exception;\n    }\n\n    // This should work and would be simpler, but Firebug does not show scripts executed via \"new Function()\" constructor.\n    // TODO: sniff browser?\n    // module.factory = new Function(\"require\", \"exports\", \"module\", module.text + \"\\n//*/\"+sourceURLComment);\n\n    module.factory.displayName = module.filename;\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,OAAO;;AAExB;AACA;AACA;AACA,IAAIC,UAAU,GAAG,sBAAsBC,IAAI;AAC3C;AACA;AACA,IAAIC,MAAM,CAACC,SAAS,IAAID,MAAM,CAACC,SAAS,CAACC,SAAS,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;EACxEL,UAAU,GAAG,IAAIM,QAAQ,CAAC,GAAG,EAAE,gBAAgB,CAAC;AACpD;AAEA,SAASP,OAAOA,CAACF,MAAM,EAAE;EAErB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIU,WAAW,GAAGV,MAAM,CAACW,QAAQ,CAACC,OAAO,CAAC,cAAc,EAAE,GAAG,CAAC;EAE9D,IAAI;IACAZ,MAAM,CAACa,OAAO,GAAGV,UAAU,CACvB,YAAY,GACZO,WAAW,GACV,qDAAqD,GACtDV,MAAM,CAACc,IAAI,GACX,0BAA0B,GAC1Bd,MAAM,CAACe,MAAM,CAACC,QAAQ,GAAGhB,MAAM,CAACiB,EACpC,CAAC;EACL,CAAC,CAAC,OAAOC,SAAS,EAAE;IAChBA,SAAS,CAACC,OAAO,GAAGD,SAAS,CAACC,OAAO,GAAG,MAAM,GAAGnB,MAAM,CAACW,QAAQ;IAChE,MAAMO,SAAS;EACnB;;EAEA;EACA;EACA;;EAEAlB,MAAM,CAACa,OAAO,CAACH,WAAW,GAAGV,MAAM,CAACW,QAAQ;AAChD","ignoreList":[]},"metadata":{},"sourceType":"script"}