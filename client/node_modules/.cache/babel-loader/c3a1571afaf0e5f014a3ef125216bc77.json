{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { HighContrastSelector, getGlobalClassNames, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-Checkbox',\n  label: 'ms-Checkbox-label',\n  checkbox: 'ms-Checkbox-checkbox',\n  checkmark: 'ms-Checkbox-checkmark',\n  text: 'ms-Checkbox-text'\n};\nvar MS_CHECKBOX_LABEL_SIZE = '20px';\nvar MS_CHECKBOX_TRANSITION_DURATION = '200ms';\nvar MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n  var className = props.className,\n    theme = props.theme,\n    reversed = props.reversed,\n    checked = props.checked,\n    disabled = props.disabled,\n    isUsingCustomLabelRender = props.isUsingCustomLabelRender,\n    indeterminate = props.indeterminate;\n  var semanticColors = theme.semanticColors,\n    effects = theme.effects,\n    palette = theme.palette,\n    fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var checkmarkFontColor = semanticColors.inputForegroundChecked;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder\n  var checkmarkFontColorHovered = palette.neutralSecondary;\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\n  var checkboxBorderColor = palette.neutralPrimary;\n  var checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;\n  var checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;\n  var checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;\n  var checkboxBorderHoveredColor = semanticColors.inputBorderHovered;\n  var checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxBackgroundChecked = semanticColors.inputBackgroundChecked;\n  // TODO: after updating the semanticColors slots mapping the following 2 tokens need to be\n  // semanticColors.inputBackgroundCheckedHovered\n  var checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\n  var checkboxHoveredTextColor = semanticColors.inputTextHovered;\n  var checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;\n  var checkboxTextColor = semanticColors.bodyText;\n  var checkboxTextColorDisabled = semanticColors.disabledText;\n  var indeterminateDotStyles = [(_a = {\n    content: '\"\"',\n    borderRadius: effects.roundedCorner2,\n    position: 'absolute',\n    width: 10,\n    height: 10,\n    top: 4,\n    left: 4,\n    boxSizing: 'border-box',\n    borderWidth: 5,\n    borderStyle: 'solid',\n    borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,\n    transitionProperty: 'border-width, border, border-color',\n    transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n    transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING\n  }, _a[HighContrastSelector] = {\n    borderColor: 'WindowText'\n  }, _a)];\n  return {\n    root: [classNames.root, {\n      position: 'relative',\n      display: 'flex'\n    }, reversed && 'reversed', checked && 'is-checked', !disabled && 'is-enabled', disabled && 'is-disabled', !disabled && [!checked && (_b = {}, _b[\":hover .\" + classNames.checkbox] = (_c = {\n      borderColor: checkboxBorderHoveredColor\n    }, _c[HighContrastSelector] = {\n      borderColor: 'Highlight'\n    }, _c), _b[\":focus .\" + classNames.checkbox] = {\n      borderColor: checkboxBorderHoveredColor\n    }, _b[\":hover .\" + classNames.checkmark] = (_d = {\n      color: checkmarkFontColorHovered,\n      opacity: '1'\n    }, _d[HighContrastSelector] = {\n      color: 'Highlight'\n    }, _d), _b), checked && !indeterminate && (_e = {}, _e[\":hover .\" + classNames.checkbox] = {\n      background: checkboxBackgroundCheckedHovered,\n      borderColor: checkboxBorderColorCheckedHovered\n    }, _e[\":focus .\" + classNames.checkbox] = {\n      background: checkboxBackgroundCheckedHovered,\n      borderColor: checkboxBorderColorCheckedHovered\n    }, _e[HighContrastSelector] = (_f = {}, _f[\":hover .\" + classNames.checkbox] = {\n      background: 'Highlight',\n      borderColor: 'Highlight'\n    }, _f[\":focus .\" + classNames.checkbox] = {\n      background: 'Highlight'\n    }, _f[\":focus:hover .\" + classNames.checkbox] = {\n      background: 'Highlight'\n    }, _f[\":focus:hover .\" + classNames.checkmark] = {\n      color: 'Window'\n    }, _f[\":hover .\" + classNames.checkmark] = {\n      color: 'Window'\n    }, _f), _e), indeterminate && (_g = {}, _g[\":hover .\" + classNames.checkbox + \", :hover .\" + classNames.checkbox + \":after\"] = (_h = {\n      borderColor: checkboxBorderIndeterminateHoveredColor\n    }, _h[HighContrastSelector] = {\n      borderColor: 'WindowText'\n    }, _h), _g[\":focus .\" + classNames.checkbox] = {\n      borderColor: checkboxBorderIndeterminateHoveredColor\n    }, _g[\":hover .\" + classNames.checkmark] = {\n      opacity: '0'\n    }, _g), (_j = {}, _j[\":hover .\" + classNames.text + \", :focus .\" + classNames.text] = (_k = {\n      color: checkboxHoveredTextColor\n    }, _k[HighContrastSelector] = {\n      color: disabled ? 'GrayText' : 'WindowText'\n    }, _k), _j)], className],\n    input: (_l = {\n      position: 'absolute',\n      background: 'none',\n      opacity: 0\n    }, _l[\".\" + IsFocusVisibleClassName + \" &:focus + label::before\"] = (_m = {\n      outline: '1px solid ' + theme.palette.neutralSecondary,\n      outlineOffset: '2px'\n    }, _m[HighContrastSelector] = {\n      outline: '1px solid WindowText'\n    }, _m), _l),\n    label: [classNames.label, theme.fonts.medium, {\n      display: 'flex',\n      alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',\n      cursor: disabled ? 'default' : 'pointer',\n      position: 'relative',\n      userSelect: 'none'\n    }, reversed && {\n      flexDirection: 'row-reverse',\n      justifyContent: 'flex-end'\n    }, {\n      '&::before': {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        content: '\"\"',\n        pointerEvents: 'none'\n      }\n    }],\n    checkbox: [classNames.checkbox, (_o = {\n      position: 'relative',\n      display: 'flex',\n      flexShrink: 0,\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: MS_CHECKBOX_LABEL_SIZE,\n      width: MS_CHECKBOX_LABEL_SIZE,\n      border: \"1px solid \" + checkboxBorderColor,\n      borderRadius: effects.roundedCorner2,\n      boxSizing: 'border-box',\n      transitionProperty: 'background, border, border-color',\n      transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\n      transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\n      /* in case the icon is bigger than the box */\n      overflow: 'hidden',\n      ':after': indeterminate ? indeterminateDotStyles : null\n    }, _o[HighContrastSelector] = __assign({\n      borderColor: 'WindowText'\n    }, getHighContrastNoAdjustStyle()), _o), indeterminate && {\n      borderColor: checkboxBorderIndeterminateColor\n    }, !reversed ?\n    // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender\n    // is used, there will be only a 4px margin from checkbox to label. The label by default would have\n    // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two\n    // (and move it into the text) to not incur a breaking change for everyone using custom render atm.\n    {\n      marginRight: 4\n    } : {\n      marginLeft: 4\n    }, !disabled && !indeterminate && checked && (_p = {\n      background: checkboxBackgroundChecked,\n      borderColor: checkboxBorderColorChecked\n    }, _p[HighContrastSelector] = {\n      background: 'Highlight',\n      borderColor: 'Highlight'\n    }, _p), disabled && (_q = {\n      borderColor: checkboxBorderColorDisabled\n    }, _q[HighContrastSelector] = {\n      borderColor: 'GrayText'\n    }, _q), checked && disabled && (_r = {\n      background: checkboxBackgroundDisabledChecked,\n      borderColor: checkboxBorderColorDisabled\n    }, _r[HighContrastSelector] = {\n      background: 'Window'\n    }, _r)],\n    checkmark: [classNames.checkmark, (_s = {\n      opacity: checked ? '1' : '0',\n      color: checkmarkFontColor\n    }, _s[HighContrastSelector] = __assign({\n      color: disabled ? 'GrayText' : 'Window'\n    }, getHighContrastNoAdjustStyle()), _s)],\n    text: [classNames.text, (_t = {\n      color: disabled ? checkboxTextColorDisabled : checkboxTextColor,\n      fontSize: fonts.medium.fontSize,\n      lineHeight: '20px'\n    }, _t[HighContrastSelector] = __assign({\n      color: disabled ? 'GrayText' : 'WindowText'\n    }, getHighContrastNoAdjustStyle()), _t), !reversed ? {\n      marginLeft: 4\n    } : {\n      marginRight: 4\n    }]\n  };\n};","map":{"version":3,"sources":["components/Checkbox/Checkbox.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\r\nimport { HighContrastSelector, getGlobalClassNames, IStyle, getHighContrastNoAdjustStyle } from '../../Styling';\r\nimport { IsFocusVisibleClassName } from '../../Utilities';\r\n\r\nconst GlobalClassNames = {\r\n  root: 'ms-Checkbox',\r\n  label: 'ms-Checkbox-label',\r\n  checkbox: 'ms-Checkbox-checkbox',\r\n  checkmark: 'ms-Checkbox-checkmark',\r\n  text: 'ms-Checkbox-text',\r\n};\r\n\r\nconst MS_CHECKBOX_LABEL_SIZE = '20px';\r\nconst MS_CHECKBOX_TRANSITION_DURATION = '200ms';\r\nconst MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';\r\n\r\nexport const getStyles = (props: ICheckboxStyleProps): ICheckboxStyles => {\r\n  const { className, theme, reversed, checked, disabled, isUsingCustomLabelRender, indeterminate } = props;\r\n  const { semanticColors, effects, palette, fonts } = theme;\r\n\r\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\r\n\r\n  const checkmarkFontColor = semanticColors.inputForegroundChecked;\r\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder\r\n  const checkmarkFontColorHovered = palette.neutralSecondary;\r\n  // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder\r\n  const checkboxBorderColor = palette.neutralPrimary;\r\n  const checkboxBorderIndeterminateColor = semanticColors.inputBackgroundChecked;\r\n  const checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;\r\n  const checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;\r\n  const checkboxBorderHoveredColor = semanticColors.inputBorderHovered;\r\n  const checkboxBorderIndeterminateHoveredColor = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxBackgroundChecked = semanticColors.inputBackgroundChecked;\r\n  // TODO: after updating the semanticColors slots mapping the following 2 tokens need to be\r\n  // semanticColors.inputBackgroundCheckedHovered\r\n  const checkboxBackgroundCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxBorderColorCheckedHovered = semanticColors.inputBackgroundCheckedHovered;\r\n  const checkboxHoveredTextColor = semanticColors.inputTextHovered;\r\n  const checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;\r\n  const checkboxTextColor = semanticColors.bodyText;\r\n  const checkboxTextColorDisabled = semanticColors.disabledText;\r\n\r\n  const indeterminateDotStyles: IStyle = [\r\n    {\r\n      content: '\"\"',\r\n      borderRadius: effects.roundedCorner2,\r\n      position: 'absolute',\r\n      width: 10,\r\n      height: 10,\r\n      top: 4,\r\n      left: 4,\r\n      boxSizing: 'border-box',\r\n      borderWidth: 5,\r\n      borderStyle: 'solid',\r\n      borderColor: disabled ? checkboxBorderColorDisabled : checkboxBorderIndeterminateColor,\r\n      transitionProperty: 'border-width, border, border-color',\r\n      transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\r\n      transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\r\n      [HighContrastSelector]: {\r\n        borderColor: 'WindowText',\r\n      },\r\n    },\r\n  ];\r\n\r\n  return {\r\n    root: [\r\n      classNames.root,\r\n      {\r\n        position: 'relative',\r\n        display: 'flex',\r\n      },\r\n      reversed && 'reversed',\r\n      checked && 'is-checked',\r\n      !disabled && 'is-enabled',\r\n      disabled && 'is-disabled',\r\n      !disabled && [\r\n        !checked && {\r\n          [`:hover .${classNames.checkbox}`]: {\r\n            borderColor: checkboxBorderHoveredColor,\r\n            [HighContrastSelector]: {\r\n              borderColor: 'Highlight',\r\n            },\r\n          },\r\n          [`:focus .${classNames.checkbox}`]: { borderColor: checkboxBorderHoveredColor },\r\n          [`:hover .${classNames.checkmark}`]: {\r\n            color: checkmarkFontColorHovered,\r\n            opacity: '1',\r\n            [HighContrastSelector]: {\r\n              color: 'Highlight',\r\n            },\r\n          },\r\n        },\r\n        checked &&\r\n          !indeterminate && {\r\n            [`:hover .${classNames.checkbox}`]: {\r\n              background: checkboxBackgroundCheckedHovered,\r\n              borderColor: checkboxBorderColorCheckedHovered,\r\n            },\r\n            [`:focus .${classNames.checkbox}`]: {\r\n              background: checkboxBackgroundCheckedHovered,\r\n              borderColor: checkboxBorderColorCheckedHovered,\r\n            },\r\n            [HighContrastSelector]: {\r\n              [`:hover .${classNames.checkbox}`]: {\r\n                background: 'Highlight',\r\n                borderColor: 'Highlight',\r\n              },\r\n              [`:focus .${classNames.checkbox}`]: {\r\n                background: 'Highlight',\r\n              },\r\n              [`:focus:hover .${classNames.checkbox}`]: {\r\n                background: 'Highlight',\r\n              },\r\n              [`:focus:hover .${classNames.checkmark}`]: {\r\n                color: 'Window',\r\n              },\r\n              [`:hover .${classNames.checkmark}`]: {\r\n                color: 'Window',\r\n              },\r\n            },\r\n          },\r\n        indeterminate && {\r\n          [`:hover .${classNames.checkbox}, :hover .${classNames.checkbox}:after`]: {\r\n            borderColor: checkboxBorderIndeterminateHoveredColor,\r\n            [HighContrastSelector]: {\r\n              borderColor: 'WindowText',\r\n            },\r\n          },\r\n          [`:focus .${classNames.checkbox}`]: {\r\n            borderColor: checkboxBorderIndeterminateHoveredColor,\r\n          },\r\n          [`:hover .${classNames.checkmark}`]: {\r\n            opacity: '0',\r\n          },\r\n        },\r\n        {\r\n          [`:hover .${classNames.text}, :focus .${classNames.text}`]: {\r\n            color: checkboxHoveredTextColor,\r\n            [HighContrastSelector]: {\r\n              color: disabled ? 'GrayText' : 'WindowText',\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      className,\r\n    ],\r\n    input: {\r\n      position: 'absolute',\r\n      background: 'none',\r\n\r\n      opacity: 0,\r\n      [`.${IsFocusVisibleClassName} &:focus + label::before`]: {\r\n        outline: '1px solid ' + theme.palette.neutralSecondary,\r\n        outlineOffset: '2px',\r\n        [HighContrastSelector]: {\r\n          outline: '1px solid WindowText',\r\n        },\r\n      },\r\n    },\r\n    label: [\r\n      classNames.label,\r\n      theme.fonts.medium,\r\n      {\r\n        display: 'flex',\r\n        alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',\r\n        cursor: disabled ? 'default' : 'pointer',\r\n        position: 'relative',\r\n        userSelect: 'none',\r\n      },\r\n      reversed && {\r\n        flexDirection: 'row-reverse',\r\n        justifyContent: 'flex-end',\r\n      },\r\n      {\r\n        '&::before': {\r\n          position: 'absolute',\r\n          left: 0,\r\n          right: 0,\r\n          top: 0,\r\n          bottom: 0,\r\n          content: '\"\"',\r\n          pointerEvents: 'none',\r\n        },\r\n      },\r\n    ],\r\n    checkbox: [\r\n      classNames.checkbox,\r\n      {\r\n        position: 'relative',\r\n        display: 'flex',\r\n        flexShrink: 0,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: MS_CHECKBOX_LABEL_SIZE,\r\n        width: MS_CHECKBOX_LABEL_SIZE,\r\n        border: `1px solid ${checkboxBorderColor}`,\r\n        borderRadius: effects.roundedCorner2,\r\n        boxSizing: 'border-box',\r\n        transitionProperty: 'background, border, border-color',\r\n        transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,\r\n        transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,\r\n\r\n        /* in case the icon is bigger than the box */\r\n        overflow: 'hidden',\r\n        ':after': indeterminate ? indeterminateDotStyles : null,\r\n        [HighContrastSelector]: {\r\n          borderColor: 'WindowText',\r\n          ...getHighContrastNoAdjustStyle(),\r\n        },\r\n      },\r\n      indeterminate && {\r\n        borderColor: checkboxBorderIndeterminateColor,\r\n      },\r\n      !reversed\r\n        ? // This margin on the checkbox is for backwards compat. Notably it has the effect where a customRender\r\n          // is used, there will be only a 4px margin from checkbox to label. The label by default would have\r\n          // another 4px margin for a total of 8px margin between checkbox and label. We don't combine the two\r\n          // (and move it into the text) to not incur a breaking change for everyone using custom render atm.\r\n          {\r\n            marginRight: 4,\r\n          }\r\n        : {\r\n            marginLeft: 4,\r\n          },\r\n      !disabled &&\r\n        !indeterminate &&\r\n        checked && {\r\n          background: checkboxBackgroundChecked,\r\n          borderColor: checkboxBorderColorChecked,\r\n          [HighContrastSelector]: {\r\n            background: 'Highlight',\r\n            borderColor: 'Highlight',\r\n          },\r\n        },\r\n      disabled && {\r\n        borderColor: checkboxBorderColorDisabled,\r\n        [HighContrastSelector]: {\r\n          borderColor: 'GrayText',\r\n        },\r\n      },\r\n      checked &&\r\n        disabled && {\r\n          background: checkboxBackgroundDisabledChecked,\r\n          borderColor: checkboxBorderColorDisabled,\r\n          [HighContrastSelector]: {\r\n            background: 'Window',\r\n          },\r\n        },\r\n    ],\r\n    checkmark: [\r\n      classNames.checkmark,\r\n      {\r\n        opacity: checked ? '1' : '0',\r\n        color: checkmarkFontColor,\r\n        [HighContrastSelector]: {\r\n          color: disabled ? 'GrayText' : 'Window',\r\n          ...getHighContrastNoAdjustStyle(),\r\n        },\r\n      },\r\n    ],\r\n    text: [\r\n      classNames.text,\r\n      {\r\n        color: disabled ? checkboxTextColorDisabled : checkboxTextColor,\r\n        fontSize: fonts.medium.fontSize,\r\n        lineHeight: '20px',\r\n        [HighContrastSelector]: {\r\n          color: disabled ? 'GrayText' : 'WindowText',\r\n          ...getHighContrastNoAdjustStyle(),\r\n        },\r\n      },\r\n      !reversed\r\n        ? {\r\n            marginLeft: 4,\r\n          }\r\n        : {\r\n            marginRight: 4,\r\n          },\r\n    ],\r\n  };\r\n};\r\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}