{"ast":null,"code":"import { _isSSR } from './setSSR';\n/**\n * Helper to get the document object. Note that in popup window cases, document\n * might be the wrong document, which is why we look at ownerDocument for the\n * truth. Also note that the SSR flag is used to test ssr scenarios even if\n * document is defined (from JSDOM for example.)\n *\n * @public\n */\nexport function getDocument(rootElement) {\n  if (_isSSR || typeof document === 'undefined') {\n    return undefined;\n  } else {\n    var el = rootElement;\n    return el && el.ownerDocument ? el.ownerDocument : document;\n  }\n}","map":{"version":3,"sources":["dom/getDocument.ts"],"names":[],"mappings":"AAAA,SAAS,MAAM,QAAQ,UAAU;AAEjC;;;;;;;AAOG;AACH,OAAM,SAAU,WAAW,CAAC,WAAgC,EAAA;EAC1D,IAAI,MAAM,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;IAC7C,OAAO,SAAS;GACjB,MAAM;IACL,IAAM,EAAE,GAAG,WAAsB;IAEjC,OAAO,EAAE,IAAI,EAAE,CAAC,aAAa,GAAG,EAAE,CAAC,aAAa,GAAG,QAAQ;EAC5D;AACH","sourcesContent":["import { _isSSR } from './setSSR';\n\n/**\n * Helper to get the document object. Note that in popup window cases, document\n * might be the wrong document, which is why we look at ownerDocument for the\n * truth. Also note that the SSR flag is used to test ssr scenarios even if\n * document is defined (from JSDOM for example.)\n *\n * @public\n */\nexport function getDocument(rootElement?: HTMLElement | null): Document | undefined {\n  if (_isSSR || typeof document === 'undefined') {\n    return undefined;\n  } else {\n    const el = rootElement as Element;\n\n    return el && el.ownerDocument ? el.ownerDocument : document;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}