{"ast":null,"code":"import { getParent } from './getParent';\n/**\n * Finds the first parent element where the matchFunction returns true\n * @param element - element to start searching at\n * @param matchFunction - the function that determines if the element is a match\n * @returns the matched element or null no match was found\n */\nexport function findElementRecursive(element, matchFunction) {\n  if (!element || element === document.body) {\n    return null;\n  }\n  return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);\n}","map":{"version":3,"sources":["findElementRecursive.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,aAAa;AACvC;;;;;AAKG;AACH,OAAM,SAAU,oBAAoB,CAClC,OAA2B,EAC3B,aAAgD,EAAA;EAEhD,IAAI,CAAC,OAAO,IAAI,OAAO,KAAK,QAAQ,CAAC,IAAI,EAAE;IACzC,OAAO,IAAI;EACZ;EACD,OAAO,aAAa,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,oBAAoB,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,aAAa,CAAC;AACnG","sourcesContent":["import { getParent } from './getParent';\n/**\n * Finds the first parent element where the matchFunction returns true\n * @param element - element to start searching at\n * @param matchFunction - the function that determines if the element is a match\n * @returns the matched element or null no match was found\n */\nexport function findElementRecursive(\n  element: HTMLElement | null,\n  matchFunction: (element: HTMLElement) => boolean,\n): HTMLElement | null {\n  if (!element || element === document.body) {\n    return null;\n  }\n  return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}