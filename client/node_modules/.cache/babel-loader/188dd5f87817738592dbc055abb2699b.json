{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar SpinnerBase = /** @class */function (_super) {\n  __extends(SpinnerBase, _super);\n  function SpinnerBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  SpinnerBase.prototype.render = function () {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n      type = _a.type,\n      size = _a.size,\n      ariaLabel = _a.ariaLabel,\n      ariaLive = _a.ariaLive,\n      styles = _a.styles,\n      label = _a.label,\n      theme = _a.theme,\n      className = _a.className,\n      labelPosition = _a.labelPosition;\n    var statusMessage = ariaLabel;\n    var nativeProps = getNativeProps(this.props, divProperties, ['size']);\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    var styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      size: styleSize,\n      className: className,\n      labelPosition: labelPosition\n    });\n    return React.createElement(\"div\", __assign({}, nativeProps, {\n      className: classNames.root\n    }), React.createElement(\"div\", {\n      className: classNames.circle\n    }), label && React.createElement(\"div\", {\n      className: classNames.label\n    }, label), statusMessage && React.createElement(\"div\", {\n      role: \"status\",\n      \"aria-live\": ariaLive\n    }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n      className: classNames.screenReaderText\n    }, statusMessage))));\n  };\n  SpinnerBase.defaultProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom'\n  };\n  return SpinnerBase;\n}(React.Component);\nexport { SpinnerBase };","map":{"version":3,"sources":["components/Spinner/Spinner.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAA4D,WAAW,EAAE,WAAW,QAAQ,iBAAiB;AAC7G,SAAS,kBAAkB,EAAE,aAAa,EAAE,cAAc,EAAE,aAAa,QAAQ,iBAAiB;AAElG,IAAM,aAAa,GAAG,kBAAkB,CAAA,CAAsC;AAE9E,IAAA,WAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAiC,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;EAAjC,SAAA,WAAA,CAAA,EAAA;;EA2CA;EApCS,WAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE;IACM,IAAA,EAAA,GAAA,IAAA,CAAA,KAAgG;MAA9F,IAAA,GAAA,EAAA,CAAA,IAAI;MAAE,IAAA,GAAA,EAAA,CAAA,IAAI;MAAE,SAAA,GAAA,EAAA,CAAA,SAAS;MAAE,QAAA,GAAA,EAAA,CAAA,QAAQ;MAAE,MAAA,GAAA,EAAA,CAAA,MAAM;MAAE,KAAA,GAAA,EAAA,CAAA,KAAK;MAAE,KAAA,GAAA,EAAA,CAAA,KAAK;MAAE,SAAA,GAAA,EAAA,CAAA,SAAS;MAAE,aAAA,GAAA,EAAA,CAAA,aAA4B;IACtG,IAAM,aAAa,GAAG,SAAS;IAC/B,IAAM,WAAW,GAAG,cAAc,CAAuC,IAAI,CAAC,KAAK,EAAE,aAAa,EAAE,CAAC,MAAM,CAAC,CAAC;IAE7G;IACA;IACA;IACA,IAAI,SAAS,GAAG,IAAI;IACpB,IAAI,SAAS,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;MACjD;MACA,SAAS,GAAG,IAAI,KAAK,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,MAAM;IAChF;IAED,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE;MACxC,KAAK,EAAE,KAAM;MACb,IAAI,EAAE,SAAS;MACf,SAAS,EAAA,SAAA;MACT,aAAa,EAAA;KACd,CAAC;IAEF,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,CAAA,CAAA,EAAS,WAAW,EAAA;MAAE,SAAS,EAAE,UAAU,CAAC;IAAI,CAAA,CAAA,EAC9C,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAAM,CAAA,CAAI,EACpC,KAAK,IAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAAK,CAAA,EAAG,KAAK,CAAO,EACxD,aAAa,IACZ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,IAAI,EAAC,QAAQ;MAAA,WAAA,EAAY;IAAQ,CAAA,EACpC,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA,IAAA,EACZ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAE,UAAU,CAAC;IAAgB,CAAA,EAAG,aAAa,CAAO,CACpD,CAEnB,CACG;EAEV,CAAC;EAzCa,WAAA,CAAA,YAAY,GAAkB;IAC1C,IAAI,EAAE,WAAW,CAAC,MAAM;IACxB,QAAQ,EAAE,QAAQ;IAClB,aAAa,EAAE;GAChB;EAsCH,OAAA,WAAC;CAAA,CA3CgC,KAAK,CAAC,SAAS,CAAA;SAAnC,WAAW","sourcesContent":["import * as React from 'react';\nimport { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles, SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}