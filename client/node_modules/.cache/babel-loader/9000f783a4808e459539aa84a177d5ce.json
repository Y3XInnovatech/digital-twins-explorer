{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, css, divProperties, findIndex, findScrollableParent, getNativeProps, getParent, getWindow, initializeComponentRef } from '../../Utilities';\nimport { ScrollToMode } from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\nvar RESIZE_DELAY = 16;\nvar MIN_SCROLL_UPDATE_DELAY = 100;\nvar MAX_SCROLL_UPDATE_DELAY = 500;\nvar IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nvar DONE_SCROLLING_WAIT = 500;\nvar DEFAULT_ITEMS_PER_PAGE = 10;\nvar DEFAULT_PAGE_HEIGHT = 30;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar PAGE_KEY_PREFIX = 'page-';\nvar SPACER_KEY_PREFIX = 'spacer-';\nvar EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0\n};\n// Naming expensive measures so that they're named in profiles.\nvar _measurePageRect = function (element) {\n  return element.getBoundingClientRect();\n};\nvar _measureSurfaceRect = _measurePageRect;\nvar _measureScrollRect = _measurePageRect;\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nvar List = /** @class */function (_super) {\n  __extends(List, _super);\n  function List(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._surface = React.createRef();\n    _this._pageRefs = {};\n    _this._getDerivedStateFromProps = function (nextProps, previousState) {\n      if (nextProps.items !== _this.props.items || nextProps.renderCount !== _this.props.renderCount || nextProps.startIndex !== _this.props.startIndex || nextProps.version !== _this.props.version) {\n        // We have received new items so we want to make sure that initially we only render a single window to\n        // fill the currently visible rect, and then later render additional windows.\n        _this._resetRequiredWindows();\n        _this._requiredRect = null;\n        _this._measureVersion++;\n        _this._invalidatePageCache();\n        return _this._updatePages(nextProps, previousState);\n      }\n      return previousState;\n    };\n    _this._onRenderRoot = function (props) {\n      var rootRef = props.rootRef,\n        surfaceElement = props.surfaceElement,\n        divProps = props.divProps;\n      return React.createElement(\"div\", __assign({\n        ref: rootRef\n      }, divProps), surfaceElement);\n    };\n    _this._onRenderSurface = function (props) {\n      var surfaceRef = props.surfaceRef,\n        pageElements = props.pageElements,\n        divProps = props.divProps;\n      return React.createElement(\"div\", __assign({\n        ref: surfaceRef\n      }, divProps), pageElements);\n    };\n    _this._onRenderPage = function (pageProps, defaultRender) {\n      var _a = _this.props,\n        onRenderCell = _a.onRenderCell,\n        role = _a.role;\n      var _b = pageProps.page,\n        _c = _b.items,\n        items = _c === void 0 ? [] : _c,\n        startIndex = _b.startIndex,\n        divProps = __rest(pageProps, [\"page\"]);\n      // only assign list item role if no role is assigned\n      var cellRole = role === undefined ? 'listitem' : 'presentation';\n      var cells = [];\n      for (var i = 0; i < items.length; i++) {\n        var index = startIndex + i;\n        var item = items[i];\n        var itemKey = _this.props.getKey ? _this.props.getKey(item, index) : item && item.key;\n        if (itemKey === null || itemKey === undefined) {\n          itemKey = index;\n        }\n        cells.push(React.createElement(\"div\", {\n          role: cellRole,\n          className: 'ms-List-cell',\n          key: itemKey,\n          \"data-list-index\": index,\n          \"data-automationid\": \"ListCell\"\n        }, onRenderCell && onRenderCell(item, index, !_this.props.ignoreScrollingState ? _this.state.isScrolling : undefined)));\n      }\n      return React.createElement(\"div\", __assign({}, divProps), cells);\n    };\n    initializeComponentRef(_this);\n    _this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: _this._getDerivedStateFromProps\n    };\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this._estimatedPageHeight = 0;\n    _this._totalEstimates = 0;\n    _this._requiredWindowsAhead = 0;\n    _this._requiredWindowsBehind = 0;\n    // Track the measure version for everything.\n    _this._measureVersion = 0;\n    // Ensure that scrolls are lazy updated.\n    _this._onAsyncScroll = _this._async.debounce(_this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY\n    });\n    _this._onAsyncIdle = _this._async.debounce(_this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false\n    });\n    _this._onAsyncResize = _this._async.debounce(_this._onAsyncResize, RESIZE_DELAY, {\n      leading: false\n    });\n    _this._onScrollingDone = _this._async.debounce(_this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false\n    });\n    _this._cachedPageHeights = {};\n    _this._estimatedPageHeight = 0;\n    _this._focusedIndex = -1;\n    _this._pageCache = {};\n    return _this;\n  }\n  List.getDerivedStateFromProps = function (nextProps, previousState) {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  };\n  Object.defineProperty(List.prototype, \"pageRefs\", {\n    get: function () {\n      return this._pageRefs;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  List.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    if (scrollToMode === void 0) {\n      scrollToMode = ScrollToMode.auto;\n    }\n    var startIndex = this.props.startIndex;\n    var renderCount = this._getRenderCount();\n    var endIndex = startIndex + renderCount;\n    var allowedRect = this._allowedRect;\n    var scrollTop = 0;\n    var itemsPerPage = 1;\n    for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      var pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n      var pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n      var requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          var scrollRect = _measureScrollRect(this._scrollElement);\n          var scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height\n          };\n          // Adjust for actual item position within page\n          var itemPositionWithinPage = index - itemIndex;\n          for (var itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          var scrollBottom = scrollTop + measureItem(index);\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              this._scrollElement.scrollTop = scrollTop;\n              return;\n            case ScrollToMode.bottom:\n              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;\n              return;\n            case ScrollToMode.center:\n              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n          var itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n          var itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          var itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n        this._scrollElement.scrollTop = scrollTop;\n        return;\n      }\n      scrollTop += pageHeight;\n    }\n  };\n  List.prototype.getStartItemIndexInView = function (measureItem) {\n    var pages = this.state.pages || [];\n    for (var _i = 0, pages_1 = pages; _i < pages_1.length; _i++) {\n      var page = pages_1[_i];\n      var isPageVisible = !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          var rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          var totalRowHeight = 0;\n          for (var itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            var rowHeight = measureItem(itemIndex);\n            if (page.top + totalRowHeight <= this._scrollTop && this._scrollTop < page.top + totalRowHeight + rowHeight) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  };\n  List.prototype.componentDidMount = function () {\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this._root.current);\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  };\n  List.prototype.componentDidUpdate = function (previousProps, previousState) {\n    var finalProps = this.props;\n    var finalState = this.state;\n    if (this.state.pagesVersion !== previousState.pagesVersion) {\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        var heightsChanged = this._updatePageMeasurements(finalState.pages);\n        // On first render, we should re-measure so that we don't get a visual glitch.\n        if (heightsChanged) {\n          this._materializedRect = null;\n          if (!this._hasCompletedFirstRender) {\n            this._hasCompletedFirstRender = true;\n            this.setState(this._updatePages(finalProps, finalState));\n          } else {\n            this._onAsyncScroll();\n          }\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      }\n      // Notify the caller that rendering the new pages has completed\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages);\n      }\n    }\n  };\n  List.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n    delete this._scrollElement;\n  };\n  List.prototype.shouldComponentUpdate = function (newProps, newState) {\n    var oldPages = this.state.pages;\n    var newPages = newState.pages;\n    var shouldComponentUpdate = false;\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n    if (newProps.items === this.props.items && oldPages.length === newPages.length) {\n      for (var i = 0; i < oldPages.length; i++) {\n        var oldPage = oldPages[i];\n        var newPage = newPages[i];\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n    return shouldComponentUpdate;\n  };\n  List.prototype.forceUpdate = function () {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n    _super.prototype.forceUpdate.call(this);\n  };\n  /**\n   * Get the current height the list and it's pages.\n   */\n  List.prototype.getTotalListHeight = function () {\n    return this._surfaceRect.height;\n  };\n  List.prototype.render = function () {\n    var _a = this.props,\n      className = _a.className,\n      _b = _a.role,\n      role = _b === void 0 ? 'list' : _b,\n      onRenderSurface = _a.onRenderSurface,\n      onRenderRoot = _a.onRenderRoot;\n    var _c = this.state.pages,\n      pages = _c === void 0 ? [] : _c;\n    var pageElements = [];\n    var divProps = getNativeProps(this.props, divProperties);\n    for (var _i = 0, pages_2 = pages; _i < pages_2.length; _i++) {\n      var page = pages_2[_i];\n      pageElements.push(this._renderPage(page));\n    }\n    var finalOnRenderSurface = onRenderSurface ? composeRenderFunction(onRenderSurface, this._onRenderSurface) : this._onRenderSurface;\n    var finalOnRenderRoot = onRenderRoot ? composeRenderFunction(onRenderRoot, this._onRenderRoot) : this._onRenderRoot;\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages: pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages: pages,\n        pageElements: pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface'\n        }\n      }),\n      divProps: __assign(__assign({}, divProps), {\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined\n      })\n    });\n  };\n  List.prototype._shouldVirtualize = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n    var onShouldVirtualize = props.onShouldVirtualize;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  };\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  List.prototype._invalidatePageCache = function () {\n    this._pageCache = {};\n  };\n  List.prototype._renderPage = function (page) {\n    var _this = this;\n    var usePageCache = this.props.usePageCache;\n    var cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n    var pageStyle = this._getPageStyle(page);\n    var _a = this.props.onRenderPage,\n      onRenderPage = _a === void 0 ? this._onRenderPage : _a;\n    var pageElement = onRenderPage({\n      page: page,\n      className: 'ms-List-page',\n      key: page.key,\n      ref: function (newRef) {\n        _this._pageRefs[page.key] = newRef;\n      },\n      style: pageStyle,\n      role: 'presentation'\n    }, this._onRenderPage);\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement\n      };\n    }\n    return pageElement;\n  };\n  /** Generate the style object for the page. */\n  List.prototype._getPageStyle = function (page) {\n    var getPageStyle = this.props.getPageStyle;\n    return __assign(__assign({}, getPageStyle ? getPageStyle(page) : {}), !page.items ? {\n      height: page.height\n    } : {});\n  };\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  List.prototype._onFocus = function (ev) {\n    var target = ev.target;\n    while (target !== this._surface.current) {\n      var indexString = target.getAttribute('data-list-index');\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n      target = getParent(target);\n    }\n  };\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  List.prototype._onScroll = function () {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({\n        isScrolling: true\n      });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  };\n  List.prototype._resetRequiredWindows = function () {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  };\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  List.prototype._onAsyncScroll = function () {\n    this._updateRenderRects(this.props, this.state);\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  };\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  List.prototype._onAsyncIdle = function () {\n    var _a = this.props,\n      renderedWindowsAhead = _a.renderedWindowsAhead,\n      renderedWindowsBehind = _a.renderedWindowsBehind;\n    var _b = this,\n      requiredWindowsAhead = _b._requiredWindowsAhead,\n      requiredWindowsBehind = _b._requiredWindowsBehind;\n    var windowsAhead = Math.min(renderedWindowsAhead, requiredWindowsAhead + 1);\n    var windowsBehind = Math.min(renderedWindowsBehind, requiredWindowsBehind + 1);\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n    if (renderedWindowsAhead > windowsAhead || renderedWindowsBehind > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  };\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  List.prototype._onScrollingDone = function () {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({\n        isScrolling: false\n      });\n    }\n  };\n  List.prototype._onAsyncResize = function () {\n    this.forceUpdate();\n  };\n  List.prototype._updatePages = function (nextProps, previousState) {\n    // console.log('updating pages');\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n    var newListState = this._buildPages(nextProps, previousState);\n    var oldListPages = previousState.pages;\n    this._notifyPageChanges(oldListPages, newListState.pages, this.props);\n    return __assign(__assign(__assign({}, previousState), newListState), {\n      pagesVersion: {}\n    });\n  };\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  List.prototype._notifyPageChanges = function (oldPages, newPages, props) {\n    var onPageAdded = props.onPageAdded,\n      onPageRemoved = props.onPageRemoved;\n    if (onPageAdded || onPageRemoved) {\n      var renderedIndexes = {};\n      for (var _i = 0, oldPages_1 = oldPages; _i < oldPages_1.length; _i++) {\n        var page = oldPages_1[_i];\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n      for (var _a = 0, newPages_1 = newPages; _a < newPages_1.length; _a++) {\n        var page = newPages_1[_a];\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n      for (var index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  };\n  List.prototype._updatePageMeasurements = function (pages) {\n    var heightChanged = false;\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n    for (var i = 0; i < pages.length; i++) {\n      var page = pages[i];\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n    return heightChanged;\n  };\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  List.prototype._measurePage = function (page) {\n    var hasChangedHeight = false;\n    var pageElement = this._pageRefs[page.key];\n    var cachedHeight = this._cachedPageHeights[page.startIndex];\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n    if (pageElement && this._shouldVirtualize() && (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)) {\n      var newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight\n      };\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n        page.height = newClientRect.height;\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion\n        };\n        this._estimatedPageHeight = Math.round((this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1));\n        this._totalEstimates++;\n      }\n    }\n    return hasChangedHeight;\n  };\n  /** Called when a page has been added to the DOM. */\n  List.prototype._onPageAdded = function (page) {\n    var onPageAdded = this.props.onPageAdded;\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  };\n  /** Called when a page has been removed from the DOM. */\n  List.prototype._onPageRemoved = function (page) {\n    var onPageRemoved = this.props.onPageRemoved;\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  };\n  /** Build up the pages that should be rendered. */\n  List.prototype._buildPages = function (props, state) {\n    var renderCount = props.renderCount;\n    var items = props.items,\n      startIndex = props.startIndex,\n      getPageHeight = props.getPageHeight;\n    renderCount = this._getRenderCount(props);\n    var materializedRect = __assign({}, EMPTY_RECT);\n    var pages = [];\n    var itemsPerPage = 1;\n    var pageTop = 0;\n    var currentSpacer = null;\n    var focusedIndex = this._focusedIndex;\n    var endIndex = startIndex + renderCount;\n    var shouldVirtualize = this._shouldVirtualize(props);\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    var isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n    var allowedRect = this._allowedRect;\n    var _loop_1 = function (itemIndex) {\n      var pageSpecification = this_1._getPageSpecification(itemIndex, allowedRect);\n      var pageHeight = pageSpecification.height;\n      var pageData = pageSpecification.data;\n      var key = pageSpecification.key;\n      itemsPerPage = pageSpecification.itemCount;\n      var pageBottom = pageTop + pageHeight - 1;\n      var isPageRendered = findIndex(state.pages, function (page) {\n        return !!page.items && page.startIndex === itemIndex;\n      }) > -1;\n      var isPageInAllowedRange = !allowedRect || pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom;\n      var isPageInRequiredRange = !this_1._requiredRect || pageBottom >= this_1._requiredRect.top && pageTop <= this_1._requiredRect.bottom;\n      var isPageVisible = !isFirstRender && (isPageInRequiredRange || isPageInAllowedRange && isPageRendered) || !shouldVirtualize;\n      var isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      var isFirstPage = itemIndex === startIndex;\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n        var itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        var newPage = this_1._createPage(key, items.slice(itemIndex, itemIndex + itemsInPage), itemIndex, undefined, undefined, pageData);\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this_1._visibleRect && this_1._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this_1._visibleRect.top && pageTop <= this_1._visibleRect.bottom;\n        }\n        pages.push(newPage);\n        if (isPageInRequiredRange && this_1._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this_1._createPage(SPACER_KEY_PREFIX + itemIndex, undefined, itemIndex, 0, undefined, pageData, true /*isSpacer*/);\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        return \"break\";\n      }\n    };\n    var this_1 = this;\n    for (var itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      var state_1 = _loop_1(itemIndex);\n      if (state_1 === \"break\") break;\n    }\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n    this._materializedRect = materializedRect;\n    // console.log('materialized: ', materializedRect);\n    return __assign(__assign({}, state), {\n      pages: pages,\n      measureVersion: this._measureVersion\n    });\n  };\n  List.prototype._getPageSpecification = function (itemIndex, visibleRect) {\n    var getPageSpecification = this.props.getPageSpecification;\n    if (getPageSpecification) {\n      var pageData = getPageSpecification(itemIndex, visibleRect);\n      var _a = pageData.itemCount,\n        itemCount = _a === void 0 ? this._getItemCountForPage(itemIndex, visibleRect) : _a;\n      var _b = pageData.height,\n        height = _b === void 0 ? this._getPageHeight(itemIndex, visibleRect, itemCount) : _b;\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data,\n        key: pageData.key\n      };\n    } else {\n      var itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount)\n      };\n    }\n  };\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  List.prototype._getPageHeight = function (itemIndex, visibleRect, itemsPerPage) {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      var cachedHeight = this._cachedPageHeights[itemIndex];\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  };\n  List.prototype._getItemCountForPage = function (itemIndex, visibileRect) {\n    var itemsPerPage = this.props.getItemCountForPage ? this.props.getItemCountForPage(itemIndex, visibileRect) : DEFAULT_ITEMS_PER_PAGE;\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  };\n  List.prototype._createPage = function (pageKey, items, startIndex, count, style, data, isSpacer) {\n    if (startIndex === void 0) {\n      startIndex = -1;\n    }\n    if (count === void 0) {\n      count = items ? items.length : 0;\n    }\n    if (style === void 0) {\n      style = {};\n    }\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    var cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style,\n      top: 0,\n      height: 0,\n      data: data,\n      isSpacer: isSpacer || false\n    };\n  };\n  List.prototype._getRenderCount = function (props) {\n    var _a = props || this.props,\n      items = _a.items,\n      startIndex = _a.startIndex,\n      renderCount = _a.renderCount;\n    return renderCount === undefined ? items ? items.length - startIndex : 0 : renderCount;\n  };\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  List.prototype._updateRenderRects = function (props, state, forceUpdate) {\n    var renderedWindowsAhead = props.renderedWindowsAhead,\n      renderedWindowsBehind = props.renderedWindowsBehind;\n    var pages = state.pages;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n    var surfaceRect = this._surfaceRect || __assign({}, EMPTY_RECT);\n    var scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    var scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (this._surface.current && (forceUpdate || !pages || !this._surfaceRect || !scrollHeight || scrollHeight !== this._scrollHeight || Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n    this._scrollHeight = scrollHeight;\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    var visibleTop = Math.max(0, -surfaceRect.top);\n    var win = getWindow(this._root.current);\n    var visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win.innerHeight\n    };\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind, renderedWindowsAhead);\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  };\n  List.defaultProps = {\n    startIndex: 0,\n    onRenderCell: function (item, index, containsFocus) {\n      return React.createElement(React.Fragment, null, item && item.name || '');\n    },\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND\n  };\n  return List;\n}(React.Component);\nexport { List };\nfunction _expandRect(rect, pagesBefore, pagesAfter) {\n  var top = rect.top - pagesBefore * rect.height;\n  var height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width\n  };\n}\nfunction _isContainedWithin(innerRect, outerRect) {\n  return innerRect.top >= outerRect.top && innerRect.left >= outerRect.left && innerRect.bottom <= outerRect.bottom && innerRect.right <= outerRect.right;\n}\nfunction _mergeRect(targetRect, newRect) {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom = newRect.bottom > targetRect.bottom || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right > targetRect.right || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right - targetRect.left + 1;\n  targetRect.height = targetRect.bottom - targetRect.top + 1;\n  return targetRect;\n}","map":{"version":3,"sources":["components/List/List.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  IRectangle,\n  IRenderFunction,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  ScrollToMode,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n  getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n\n  pagesVersion?: {};\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _pageRefs: Record<string, unknown> = {};\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement: HTMLElement;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  public static getDerivedStateFromProps<T = any>(\n    nextProps: IListProps<T>,\n    previousState: IListState<T>,\n  ): IListState<T> {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  public get pageRefs(): Readonly<Record<string, unknown>> {\n    return this._pageRefs;\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              this._scrollElement.scrollTop = scrollTop;\n              return;\n            case ScrollToMode.bottom:\n              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;\n              return;\n            case ScrollToMode.center:\n              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        this._scrollElement.scrollTop = scrollTop;\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IListProps, previousState: IListState<T>): void {\n    const finalProps = this.props;\n    const finalState = this.state;\n\n    if (this.state.pagesVersion !== previousState.pagesVersion) {\n      // If we weren't provided with the page height, measure the pages\n      if (!finalProps.getPageHeight) {\n        // If measured version is invalid since we've updated the DOM\n        const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n        // On first render, we should re-measure so that we don't get a visual glitch.\n        if (heightsChanged) {\n          this._materializedRect = null;\n          if (!this._hasCompletedFirstRender) {\n            this._hasCompletedFirstRender = true;\n            this.setState(this._updatePages(finalProps, finalState));\n          } else {\n            this._onAsyncScroll();\n          }\n        } else {\n          // Enqueue an idle bump.\n          this._onAsyncIdle();\n        }\n      } else {\n        // Enqueue an idle bump\n        this._onAsyncIdle();\n      }\n\n      // Notify the caller that rendering the new pages has completed\n      if (finalProps.onPagesUpdated) {\n        finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n      },\n    });\n  }\n\n  private _getDerivedStateFromProps = (nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> => {\n    if (\n      nextProps.items !== this.props.items ||\n      nextProps.renderCount !== this.props.renderCount ||\n      nextProps.startIndex !== this.props.startIndex ||\n      nextProps.version !== this.props.version\n    ) {\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n\n      return this._updatePages(nextProps, previousState);\n    }\n\n    return previousState;\n  };\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page: page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: (newRef: unknown) => {\n          this._pageRefs[page.key] = newRef;\n        },\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      cells.push(\n        <div\n          role={cellRole}\n          className={'ms-List-cell'}\n          key={itemKey}\n          data-list-index={index}\n          data-automationid=\"ListCell\"\n        >\n          {onRenderCell &&\n            onRenderCell(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined)}\n        </div>,\n      );\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects(this.props, this.state);\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    const newListState = this._buildPages(nextProps, previousState);\n    const oldListPages = previousState.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!, this.props);\n\n    return {\n      ...previousState,\n      ...newListState,\n      pagesVersion: {},\n    };\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T>): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this._pageRefs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>, state: IListState<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) > -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      ...state,\n      pages: pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = this.props;\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style,\n      top: 0,\n      height: 0,\n      data: data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props: IListProps<T>, state: IListState<T>, forceUpdate?: boolean): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    const scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}