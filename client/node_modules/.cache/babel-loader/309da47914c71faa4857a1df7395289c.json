{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\nexport var ResponsiveMode;\n(function (ResponsiveMode) {\n  ResponsiveMode[ResponsiveMode[\"small\"] = 0] = \"small\";\n  ResponsiveMode[ResponsiveMode[\"medium\"] = 1] = \"medium\";\n  ResponsiveMode[ResponsiveMode[\"large\"] = 2] = \"large\";\n  ResponsiveMode[ResponsiveMode[\"xLarge\"] = 3] = \"xLarge\";\n  ResponsiveMode[ResponsiveMode[\"xxLarge\"] = 4] = \"xxLarge\";\n  ResponsiveMode[ResponsiveMode[\"xxxLarge\"] = 5] = \"xxxLarge\";\n  ResponsiveMode[ResponsiveMode[\"unknown\"] = 999] = \"unknown\";\n})(ResponsiveMode || (ResponsiveMode = {}));\nvar RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nvar _defaultMode;\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nvar _lastMode;\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\nexport function setResponsiveMode(responsiveMode) {\n  _defaultMode = responsiveMode;\n}\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n */\nexport function initializeResponsiveMode(element) {\n  if (typeof window !== 'undefined') {\n    var currentWindow = element && getWindow(element) || window;\n    getResponsiveMode(currentWindow);\n  }\n}\nexport function getInitialResponsiveMode() {\n  return _defaultMode || _lastMode || ResponsiveMode.large;\n}\nexport function withResponsiveMode(ComposedComponent) {\n  var _a;\n  var resultClass = (_a = /** @class */function (_super) {\n    __extends(WithResponsiveMode, _super);\n    function WithResponsiveMode(props) {\n      var _this = _super.call(this, props) || this;\n      _this._onResize = function () {\n        var responsiveMode = getResponsiveMode(_this.context.window);\n        if (responsiveMode !== _this.state.responsiveMode) {\n          _this.setState({\n            responsiveMode: responsiveMode\n          });\n        }\n      };\n      _this._events = new EventGroup(_this);\n      _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n      _this.state = {\n        responsiveMode: getInitialResponsiveMode()\n      };\n      return _this;\n    }\n    WithResponsiveMode.prototype.componentDidMount = function () {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    };\n    WithResponsiveMode.prototype.componentWillUnmount = function () {\n      this._events.dispose();\n    };\n    WithResponsiveMode.prototype.render = function () {\n      var responsiveMode = this.state.responsiveMode;\n      return responsiveMode === ResponsiveMode.unknown ? null : React.createElement(ComposedComponent, __assign({\n        ref: this._updateComposedComponentRef,\n        responsiveMode: responsiveMode\n      }, this.props));\n    };\n    return WithResponsiveMode;\n  }(BaseDecorator), _a.contextType = WindowContext, _a);\n  return hoistStatics(ComposedComponent, resultClass);\n}\nexport function getResponsiveMode(currentWindow) {\n  var responsiveMode = ResponsiveMode.small;\n  if (currentWindow) {\n    try {\n      while (currentWindow.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' + 'Call setResponsiveMode to define what the responsive mode is.');\n    }\n  }\n  return responsiveMode;\n}","map":{"version":3,"sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\n\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  small = 0,\n  medium = 1,\n  large = 2,\n  xLarge = 3,\n  xxLarge = 4,\n  xxxLarge = 5,\n  unknown = 999,\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nlet _lastMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n */\nexport function initializeResponsiveMode(element?: HTMLElement): void {\n  if (typeof window !== 'undefined') {\n    const currentWindow = (element && getWindow(element)) || window;\n\n    getResponsiveMode(currentWindow);\n  }\n}\n\nexport function getInitialResponsiveMode() {\n  return _defaultMode || _lastMode || ResponsiveMode.large;\n}\n\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    public static contextType = WindowContext;\n    public context: React.ContextType<typeof WindowContext>;\n\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n      this._events = new EventGroup(this);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: getInitialResponsiveMode(),\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element | null {\n      const { responsiveMode } = this.state;\n\n      return responsiveMode === ResponsiveMode.unknown ? null : (\n        <ComposedComponent\n          ref={this._updateComposedComponentRef}\n          responsiveMode={responsiveMode}\n          {...(this.props as any)}\n        />\n      );\n    }\n\n    private _onResize = () => {\n      const responsiveMode = getResponsiveMode(this.context.window);\n\n      if (responsiveMode !== this.state.responsiveMode) {\n        this.setState({\n          responsiveMode,\n        });\n      }\n    };\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n\nexport function getResponsiveMode(currentWindow: Window | undefined): ResponsiveMode {\n  let responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (currentWindow.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error(\n        'Content was rendered in a server environment without providing a default responsive mode. ' +\n          'Call setResponsiveMode to define what the responsive mode is.',\n      );\n    }\n  }\n\n  return responsiveMode;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}