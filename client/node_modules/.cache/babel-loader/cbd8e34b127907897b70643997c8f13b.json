{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nvar getClassNames = classNamesFunction();\nvar DialogFooterType = React.createElement(DialogFooter, null).type;\nvar COMPONENT_NAME = 'DialogContent';\nvar DialogContentBase = /** @class */function (_super) {\n  __extends(DialogContentBase, _super);\n  function DialogContentBase(props) {\n    var _this = _super.call(this, props) || this;\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      titleId: 'titleProps.id'\n    });\n    return _this;\n  }\n  DialogContentBase.prototype.render = function () {\n    var _a = this.props,\n      showCloseButton = _a.showCloseButton,\n      className = _a.className,\n      closeButtonAriaLabel = _a.closeButtonAriaLabel,\n      onDismiss = _a.onDismiss,\n      subTextId = _a.subTextId,\n      subText = _a.subText,\n      _b = _a.titleProps,\n      titleProps = _b === void 0 ? {} : _b,\n      // eslint-disable-next-line deprecation/deprecation\n      titleId = _a.titleId,\n      title = _a.title,\n      type = _a.type,\n      styles = _a.styles,\n      theme = _a.theme,\n      draggableHeaderClassName = _a.draggableHeaderClassName;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName: draggableHeaderClassName\n    });\n    var groupings = this._groupChildren();\n    var subTextContent;\n    if (subText) {\n      subTextContent = React.createElement(\"p\", {\n        className: classNames.subText,\n        id: subTextId\n      }, subText);\n    }\n    return React.createElement(\"div\", {\n      className: classNames.content\n    }, React.createElement(\"div\", {\n      className: classNames.header\n    }, React.createElement(\"div\", __assign({\n      id: titleId,\n      role: \"heading\",\n      \"aria-level\": 1\n    }, titleProps, {\n      className: css(classNames.title, titleProps.className)\n    }), title), React.createElement(\"div\", {\n      className: classNames.topButton\n    }, this.props.topButtonsProps.map(function (props, index) {\n      return React.createElement(IconButton, __assign({\n        key: props.uniqueId || index\n      }, props));\n    }), (type === DialogType.close || showCloseButton && type !== DialogType.largeHeader) && React.createElement(IconButton, {\n      className: classNames.button,\n      iconProps: {\n        iconName: 'Cancel'\n      },\n      ariaLabel: closeButtonAriaLabel,\n      onClick: onDismiss,\n      title: closeButtonAriaLabel\n    }))), React.createElement(\"div\", {\n      className: classNames.inner\n    }, React.createElement(\"div\", {\n      className: classNames.innerContent\n    }, subTextContent, groupings.contents), groupings.footers));\n  };\n  // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n  DialogContentBase.prototype._groupChildren = function () {\n    var groupings = {\n      footers: [],\n      contents: []\n    };\n    React.Children.map(this.props.children, function (child) {\n      if (typeof child === 'object' && child !== null && child.type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n    return groupings;\n  };\n  DialogContentBase.defaultProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close'\n  };\n  DialogContentBase = __decorate([withResponsiveMode], DialogContentBase);\n  return DialogContentBase;\n}(React.Component);\nexport { DialogContentBase };","map":{"version":3,"sources":["components/Dialog/DialogContent.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, css, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DialogType, IDialogContentProps, IDialogContentStyleProps, IDialogContentStyles } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { IDialogFooterProps } from './DialogFooter.types';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogContentStyleProps, IDialogContentStyles>();\n\nconst DialogFooterType = ((<DialogFooter />) as React.ReactElement<IDialogFooterProps>).type;\n\nconst COMPONENT_NAME = 'DialogContent';\n\n@withResponsiveMode\nexport class DialogContentBase extends React.Component<IDialogContentProps, {}> {\n  public static defaultProps: IDialogContentProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close',\n  };\n\n  constructor(props: IDialogContentProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      titleId: 'titleProps.id',\n    });\n  }\n\n  public render(): JSX.Element {\n    const {\n      showCloseButton,\n      className,\n      closeButtonAriaLabel,\n      onDismiss,\n      subTextId,\n      subText,\n      titleProps = {},\n      // eslint-disable-next-line deprecation/deprecation\n      titleId,\n      title,\n      type,\n      styles,\n      theme,\n      draggableHeaderClassName,\n    } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName,\n    });\n\n    const groupings = this._groupChildren();\n    let subTextContent;\n    if (subText) {\n      subTextContent = (\n        <p className={classNames.subText} id={subTextId}>\n          {subText}\n        </p>\n      );\n    }\n\n    return (\n      <div className={classNames.content}>\n        <div className={classNames.header}>\n          <div\n            id={titleId}\n            role=\"heading\"\n            aria-level={1}\n            {...titleProps}\n            className={css(classNames.title, titleProps.className)}\n          >\n            {title}\n          </div>\n          <div className={classNames.topButton}>\n            {this.props.topButtonsProps!.map((props, index) => (\n              <IconButton key={props.uniqueId || index} {...props} />\n            ))}\n            {(type === DialogType.close || (showCloseButton && type !== DialogType.largeHeader)) && (\n              <IconButton\n                className={classNames.button}\n                iconProps={{ iconName: 'Cancel' }}\n                ariaLabel={closeButtonAriaLabel}\n                onClick={onDismiss as any}\n                title={closeButtonAriaLabel}\n              />\n            )}\n          </div>\n        </div>\n        <div className={classNames.inner}>\n          <div className={classNames.innerContent}>\n            {subTextContent}\n            {groupings.contents}\n          </div>\n          {groupings.footers}\n        </div>\n      </div>\n    );\n  }\n\n  // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n  private _groupChildren(): { footers: any[]; contents: any[] } {\n    const groupings: { footers: any[]; contents: any[] } = {\n      footers: [],\n      contents: [],\n    };\n\n    React.Children.map(this.props.children, child => {\n      if (typeof child === 'object' && child !== null && (child as any).type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n\n    return groupings;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}