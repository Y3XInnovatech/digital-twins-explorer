{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { GlobalSettings } from '../GlobalSettings';\nvar CustomizationsGlobalKey = 'customizations';\nvar NO_CUSTOMIZATIONS = {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n};\nvar _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n});\nvar _events = [];\nvar Customizations = /** @class */function () {\n  function Customizations() {}\n  Customizations.reset = function () {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  };\n  /** Apply global Customization settings.\n   * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n   */\n  Customizations.applySettings = function (settings) {\n    _allSettings.settings = __assign(__assign({}, _allSettings.settings), settings);\n    Customizations._raiseChange();\n  };\n  /** Apply Customizations to a particular named scope, like a component.\n   * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n   */\n  Customizations.applyScopedSettings = function (scopeName, settings) {\n    _allSettings.scopedSettings[scopeName] = __assign(__assign({}, _allSettings.scopedSettings[scopeName]), settings);\n    Customizations._raiseChange();\n  };\n  Customizations.getSettings = function (properties, scopeName, localSettings) {\n    if (localSettings === void 0) {\n      localSettings = NO_CUSTOMIZATIONS;\n    }\n    var settings = {};\n    var localScopedSettings = scopeName && localSettings.scopedSettings[scopeName] || {};\n    var globalScopedSettings = scopeName && _allSettings.scopedSettings[scopeName] || {};\n    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n      var property = properties_1[_i];\n      settings[property] = localScopedSettings[property] || localSettings.settings[property] || globalScopedSettings[property] || _allSettings.settings[property];\n    }\n    return settings;\n  };\n  /** Used to run some code that sets Customizations without triggering an update until the end.\n   * Useful for applying Customizations that don't affect anything currently rendered, or for\n   * applying many customizations at once.\n   * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n   */\n  Customizations.applyBatchedUpdates = function (code, suppressUpdate) {\n    Customizations._suppressUpdates = true;\n    try {\n      code();\n    } catch (_a) {\n      /* do nothing */\n    }\n    Customizations._suppressUpdates = false;\n    if (!suppressUpdate) {\n      Customizations._raiseChange();\n    }\n  };\n  Customizations.observe = function (onChange) {\n    _events.push(onChange);\n  };\n  Customizations.unobserve = function (onChange) {\n    _events = _events.filter(function (cb) {\n      return cb !== onChange;\n    });\n  };\n  Customizations._raiseChange = function () {\n    if (!Customizations._suppressUpdates) {\n      _events.forEach(function (cb) {\n        return cb();\n      });\n    }\n  };\n  return Customizations;\n}();\nexport { Customizations };","map":{"version":3,"sources":["customizations/Customizations.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalSettings } from '../GlobalSettings';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ISettings = { [key: string]: any };\nexport type ISettingsFunction = (settings: ISettings) => ISettings;\n\n/**\n * @deprecated Use ISettings.\n */\nexport type Settings = ISettings;\n\n/**\n * @deprecated Use ISettingsFunction.\n */\nexport type SettingsFunction = ISettingsFunction;\n\nexport interface ICustomizations {\n  settings: ISettings;\n  scopedSettings: { [key: string]: ISettings };\n  inCustomizerContext?: boolean;\n}\n\nconst CustomizationsGlobalKey = 'customizations';\nconst NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };\n\nlet _allSettings = GlobalSettings.getValue<ICustomizations>(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false,\n});\n\nlet _events: (() => void)[] = [];\n\nexport class Customizations {\n  private static _suppressUpdates: boolean;\n\n  public static reset(): void {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  }\n\n  /** Apply global Customization settings.\n   * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n   */\n  public static applySettings(settings: ISettings): void {\n    _allSettings.settings = { ..._allSettings.settings, ...settings };\n    Customizations._raiseChange();\n  }\n\n  /** Apply Customizations to a particular named scope, like a component.\n   * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n   */\n  public static applyScopedSettings(scopeName: string, settings: ISettings): void {\n    _allSettings.scopedSettings[scopeName] = { ..._allSettings.scopedSettings[scopeName], ...settings };\n    Customizations._raiseChange();\n  }\n\n  public static getSettings(\n    properties: string[],\n    scopeName?: string,\n    localSettings: ICustomizations = NO_CUSTOMIZATIONS,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any {\n    const settings: ISettings = {};\n    const localScopedSettings = (scopeName && localSettings.scopedSettings[scopeName]) || {};\n    const globalScopedSettings = (scopeName && _allSettings.scopedSettings[scopeName]) || {};\n\n    for (let property of properties) {\n      settings[property] =\n        localScopedSettings[property] ||\n        localSettings.settings[property] ||\n        globalScopedSettings[property] ||\n        _allSettings.settings[property];\n    }\n\n    return settings;\n  }\n\n  /** Used to run some code that sets Customizations without triggering an update until the end.\n   * Useful for applying Customizations that don't affect anything currently rendered, or for\n   * applying many customizations at once.\n   * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n   */\n  public static applyBatchedUpdates(code: () => void, suppressUpdate?: boolean): void {\n    Customizations._suppressUpdates = true;\n    try {\n      code();\n    } catch {\n      /* do nothing */\n    }\n    Customizations._suppressUpdates = false;\n    if (!suppressUpdate) {\n      Customizations._raiseChange();\n    }\n  }\n\n  public static observe(onChange: () => void): void {\n    _events.push(onChange);\n  }\n\n  public static unobserve(onChange: () => void): void {\n    _events = _events.filter((cb: () => void) => cb !== onChange);\n  }\n\n  private static _raiseChange(): void {\n    if (!Customizations._suppressUpdates) {\n      _events.forEach((cb: () => void) => cb());\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}