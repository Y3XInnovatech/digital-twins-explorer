{"ast":null,"code":"import { on } from '@uifabric/utilities';\nimport * as React from 'react';\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element - Element (or ref to an element) to attach the event handler to\n * @param eventName - The event to attach a handler for\n * @param callback - The handler for the event\n * @param useCapture - Whether or not to attach the handler for the capture phase\n */\nexport function useOnEvent(element, eventName, callback, useCapture) {\n  // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n  var callbackRef = React.useRef(callback);\n  callbackRef.current = callback;\n  React.useEffect(function () {\n    var actualElement = element && 'current' in element ? element.current : element;\n    if (!actualElement) {\n      return;\n    }\n    var dispose = on(actualElement, eventName, function (ev) {\n      return callbackRef.current(ev);\n    }, useCapture);\n    return dispose;\n  }, [element, eventName, useCapture]);\n}","map":{"version":3,"sources":["useOnEvent.ts"],"names":[],"mappings":"AAAA,SAAS,EAAE,QAAQ,qBAAqB;AACxC,OAAO,KAAK,KAAK,MAAM,OAAO;AAE9B;;;;;;AAMG;AACH,OAAM,SAAU,UAAU,CACxB,OAAuG,EACvG,SAAiB,EACjB,QAA8B,EAC9B,UAAoB,EAAA;EAEpB;EACA,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;EAC1C,WAAW,CAAC,OAAO,GAAG,QAAQ;EAE9B,KAAK,CAAC,SAAS,CAAC,YAAA;IACd,IAAM,aAAa,GAAG,OAAO,IAAI,SAAS,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,GAAG,OAAO;IACjF,IAAI,CAAC,aAAa,EAAE;MAClB;IACD;IAED,IAAM,OAAO,GAAG,EAAE,CAAC,aAAa,EAAE,SAAS,EAAE,UAAC,EAAU,EAAA;MAAK,OAAA,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC;IAAvB,CAAuB,EAAE,UAAU,CAAC;IACjG,OAAO,OAAO;EAChB,CAAC,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AACtC","sourcesContent":["import { on } from '@uifabric/utilities';\nimport * as React from 'react';\n\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element - Element (or ref to an element) to attach the event handler to\n * @param eventName - The event to attach a handler for\n * @param callback - The handler for the event\n * @param useCapture - Whether or not to attach the handler for the capture phase\n */\nexport function useOnEvent<TElement extends Element, TEvent extends Event>(\n  element: React.RefObject<TElement | undefined | null> | TElement | Window | Document | undefined | null,\n  eventName: string,\n  callback: (ev: TEvent) => void,\n  useCapture?: boolean,\n) {\n  // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n  const callbackRef = React.useRef(callback);\n  callbackRef.current = callback;\n\n  React.useEffect(() => {\n    const actualElement = element && 'current' in element ? element.current : element;\n    if (!actualElement) {\n      return;\n    }\n\n    const dispose = on(actualElement, eventName, (ev: TEvent) => callbackRef.current(ev), useCapture);\n    return dispose;\n  }, [element, eventName, useCapture]);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}