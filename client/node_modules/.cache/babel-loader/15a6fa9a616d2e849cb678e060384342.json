{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NOOP_SPAN = exports.NoopSpan = exports.INVALID_SPAN_ID = exports.INVALID_TRACE_ID = void 0;\nvar trace_flags_1 = require(\"./trace_flags\");\nexports.INVALID_TRACE_ID = '0';\nexports.INVALID_SPAN_ID = '0';\nvar INVALID_SPAN_CONTEXT = {\n  traceId: exports.INVALID_TRACE_ID,\n  spanId: exports.INVALID_SPAN_ID,\n  traceFlags: trace_flags_1.TraceFlags.NONE\n};\n/**\n * The NoopSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NoopSpan = /** @class */function () {\n  function NoopSpan(_spanContext) {\n    if (_spanContext === void 0) {\n      _spanContext = INVALID_SPAN_CONTEXT;\n    }\n    this._spanContext = _spanContext;\n  }\n  // Returns a SpanContext.\n  NoopSpan.prototype.context = function () {\n    return this._spanContext;\n  };\n  // By default does nothing\n  NoopSpan.prototype.setAttribute = function (key, value) {\n    return this;\n  };\n  // By default does nothing\n  NoopSpan.prototype.setAttributes = function (attributes) {\n    return this;\n  };\n  // By default does nothing\n  NoopSpan.prototype.addEvent = function (name, attributes) {\n    return this;\n  };\n  // By default does nothing\n  NoopSpan.prototype.setStatus = function (status) {\n    return this;\n  };\n  // By default does nothing\n  NoopSpan.prototype.updateName = function (name) {\n    return this;\n  };\n  // By default does nothing\n  NoopSpan.prototype.end = function (endTime) {};\n  // isRecording always returns false for noopSpan.\n  NoopSpan.prototype.isRecording = function () {\n    return false;\n  };\n  return NoopSpan;\n}();\nexports.NoopSpan = NoopSpan;\nexports.NOOP_SPAN = new NoopSpan();","map":{"version":3,"sources":["../../../src/trace/NoopSpan.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;;AAOH,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEa,OAAA,CAAA,gBAAgB,GAAG,GAAG;AACtB,OAAA,CAAA,eAAe,GAAG,GAAG;AAClC,IAAM,oBAAoB,GAAgB;EACxC,OAAO,EAAE,OAAA,CAAA,gBAAgB;EACzB,MAAM,EAAE,OAAA,CAAA,eAAe;EACvB,UAAU,EAAE,aAAA,CAAA,UAAU,CAAC;CACxB;AAED;;;;AAIG;AACH,IAAA,QAAA,GAAA,aAAA,YAAA;EACE,SAAA,QAAA,CACmB,YAAgD,EAAA;IAAhD,IAAA,YAAA,KAAA,KAAA,CAAA,EAAA;MAAA,YAAA,GAAA,oBAAgD;IAAA;IAAhD,IAAA,CAAA,YAAY,GAAZ,YAAY;EAC5B;EAEH;EACA,QAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,OAAO,IAAI,CAAC,YAAY;EAC1B,CAAC;EAED;EACA,QAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,GAAW,EAAE,KAAc,EAAA;IACtC,OAAO,IAAI;EACb,CAAC;EAED;EACA,QAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,UAAsB,EAAA;IAClC,OAAO,IAAI;EACb,CAAC;EAED;EACA,QAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,IAAY,EAAE,UAAuB,EAAA;IAC5C,OAAO,IAAI;EACb,CAAC;EAED;EACA,QAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,MAAc,EAAA;IACtB,OAAO,IAAI;EACb,CAAC;EAED;EACA,QAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,IAAY,EAAA;IACrB,OAAO,IAAI;EACb,CAAC;EAED;EACA,QAAA,CAAA,SAAA,CAAA,GAAG,GAAH,UAAI,OAAmB,EAAA,CAAS,CAAC;EAEjC;EACA,QAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,OAAO,KAAK;EACd,CAAC;EACH,OAAA,QAAC;AAAD,CAAC,CAAA,CAAA;AA1CY,OAAA,CAAA,QAAA,GAAA,QAAA;AA4CA,OAAA,CAAA,SAAS,GAAG,IAAI,QAAQ,CAAA,CAAE","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_SPAN = exports.NoopSpan = exports.INVALID_SPAN_ID = exports.INVALID_TRACE_ID = void 0;\nvar trace_flags_1 = require(\"./trace_flags\");\nexports.INVALID_TRACE_ID = '0';\nexports.INVALID_SPAN_ID = '0';\nvar INVALID_SPAN_CONTEXT = {\n    traceId: exports.INVALID_TRACE_ID,\n    spanId: exports.INVALID_SPAN_ID,\n    traceFlags: trace_flags_1.TraceFlags.NONE,\n};\n/**\n * The NoopSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NoopSpan = /** @class */ (function () {\n    function NoopSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NoopSpan.prototype.context = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NoopSpan.prototype.setAttribute = function (key, value) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.setAttributes = function (attributes) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.addEvent = function (name, attributes) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.setStatus = function (status) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.updateName = function (name) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.end = function (endTime) { };\n    // isRecording always returns false for noopSpan.\n    NoopSpan.prototype.isRecording = function () {\n        return false;\n    };\n    return NoopSpan;\n}());\nexports.NoopSpan = NoopSpan;\nexports.NOOP_SPAN = new NoopSpan();\n//# sourceMappingURL=NoopSpan.js.map"]},"metadata":{},"sourceType":"script"}