{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async } from './Async';\nimport { EventGroup } from './EventGroup';\nimport { warnConditionallyRequiredProps } from './warn/warnConditionallyRequiredProps';\nimport { warnMutuallyExclusive } from './warn/warnMutuallyExclusive';\nimport { warnDeprecations } from './warn/warnDeprecations';\n/**\n * BaseComponent class, which provides basic helpers for all components.\n *\n * @public\n * {@docCategory BaseComponent}\n *\n * @deprecated Do not use. We are moving away from class component.\n */\nvar BaseComponent = /** @class */function (_super) {\n  __extends(BaseComponent, _super);\n  /**\n   * BaseComponent constructor\n   * @param props - The props for the component.\n   * @param context - The context for the component.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function BaseComponent(props, context) {\n    var _this = _super.call(this, props, context) || this;\n    // eslint-disable-next-line deprecation/deprecation\n    _makeAllSafe(_this, BaseComponent.prototype, ['componentDidMount', 'shouldComponentUpdate', 'getSnapshotBeforeUpdate', 'render', 'componentDidUpdate', 'componentWillUnmount']);\n    return _this;\n  }\n  /**\n   * When the component receives props, make sure the componentRef is updated.\n   */\n  BaseComponent.prototype.componentDidUpdate = function (prevProps, prevState) {\n    this._updateComponentRef(prevProps, this.props);\n  };\n  /**\n   * When the component has mounted, update the componentRef.\n   */\n  BaseComponent.prototype.componentDidMount = function () {\n    this._setComponentRef(this.props.componentRef, this);\n  };\n  /**\n   * If we have disposables, dispose them automatically on unmount.\n   */\n  BaseComponent.prototype.componentWillUnmount = function () {\n    this._setComponentRef(this.props.componentRef, null);\n    if (this.__disposables) {\n      for (var i = 0, len = this._disposables.length; i < len; i++) {\n        var disposable = this.__disposables[i];\n        if (disposable.dispose) {\n          disposable.dispose();\n        }\n      }\n      this.__disposables = null;\n    }\n  };\n  Object.defineProperty(BaseComponent.prototype, \"className\", {\n    /**\n     * Gets the object's class name.\n     */\n    get: function () {\n      if (!this.__className) {\n        var funcNameRegex = /function (.{1,})\\(/;\n        var results = funcNameRegex.exec(this.constructor.toString());\n        this.__className = results && results.length > 1 ? results[1] : '';\n      }\n      return this.__className;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseComponent.prototype, \"_disposables\", {\n    /**\n     * Allows subclasses to push things to this._disposables to be auto disposed.\n     */\n    get: function () {\n      if (!this.__disposables) {\n        this.__disposables = [];\n      }\n      return this.__disposables;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseComponent.prototype, \"_async\", {\n    /**\n     * Gets the async instance associated with the component, created on demand. The async instance gives\n     * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks\n     * will be cleared/ignored automatically after unmounting. The helpers within the async object also\n     * preserve the this pointer so that you don't need to \"bind\" the callbacks.\n     */\n    get: function () {\n      if (!this.__async) {\n        this.__async = new Async(this);\n        this._disposables.push(this.__async);\n      }\n      return this.__async;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseComponent.prototype, \"_events\", {\n    /**\n     * Gets the event group instance assocaited with the component, created on demand. The event instance\n     * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks\n     * will be automatically disconnected after unmounting. The helpers within the events object also\n     * preserve the this reference so that you don't need to \"bind\" the callbacks.\n     */\n    get: function () {\n      if (!this.__events) {\n        this.__events = new EventGroup(this);\n        this._disposables.push(this.__events);\n      }\n      return this.__events;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Helper to return a memoized ref resolver function.\n   * @param refName - Name of the member to assign the ref to.\n   * @returns A function instance keyed from the given refname.\n   * @deprecated Use `createRef` from React.createRef.\n   */\n  BaseComponent.prototype._resolveRef = function (refName) {\n    var _this = this;\n    if (!this.__resolves) {\n      this.__resolves = {};\n    }\n    if (!this.__resolves[refName]) {\n      this.__resolves[refName] = function (ref) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return _this[refName] = ref;\n      };\n    }\n    return this.__resolves[refName];\n  };\n  /**\n   * Updates the componentRef (by calling it with \"this\" when necessary.)\n   */\n  BaseComponent.prototype._updateComponentRef = function (currentProps, newProps) {\n    if (newProps === void 0) {\n      newProps = {};\n    }\n    // currentProps *should* always be defined, but verify that just in case a subclass is manually\n    // calling a lifecycle method with no parameters (which has happened) or other odd usage.\n    if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {\n      this._setComponentRef(currentProps.componentRef, null);\n      this._setComponentRef(newProps.componentRef, this);\n    }\n  };\n  /**\n   * Warns when a deprecated props are being used.\n   *\n   * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n   * either null or a replacement prop name.\n   */\n  BaseComponent.prototype._warnDeprecations = function (deprecationMap) {\n    warnDeprecations(this.className, this.props, deprecationMap);\n  };\n  /**\n   * Warns when props which are mutually exclusive with each other are both used.\n   *\n   * @param mutuallyExclusiveMap - The map of mutually exclusive props.\n   */\n  BaseComponent.prototype._warnMutuallyExclusive = function (mutuallyExclusiveMap) {\n    warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);\n  };\n  /**\n   * Warns when props are required if a condition is met.\n   *\n   * @param requiredProps - The name of the props that are required when the condition is met.\n   * @param conditionalPropName - The name of the prop that the condition is based on.\n   * @param condition - Whether the condition is met.\n   */\n  BaseComponent.prototype._warnConditionallyRequiredProps = function (requiredProps, conditionalPropName, condition) {\n    warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);\n  };\n  BaseComponent.prototype._setComponentRef = function (ref, value) {\n    if (!this._skipComponentRefResolution && ref) {\n      if (typeof ref === 'function') {\n        ref(value);\n      }\n      if (typeof ref === 'object') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ref.current = value;\n      }\n    }\n  };\n  return BaseComponent;\n}(React.Component);\nexport { BaseComponent };\n/**\n * Helper to override a given method with a wrapper method that can try/catch the original, but also\n * ensures that the BaseComponent's methods are called before the subclass's. This ensures that\n * componentWillUnmount in the base is called and that things in the _disposables array are disposed.\n */\n// eslint-disable-next-line deprecation/deprecation\nfunction _makeAllSafe(obj, prototype, methodNames) {\n  for (var i = 0, len = methodNames.length; i < len; i++) {\n    _makeSafe(obj, prototype, methodNames[i]);\n  }\n}\n// eslint-disable-next-line deprecation/deprecation\nfunction _makeSafe(obj, prototype, methodName) {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  var classMethod = obj[methodName];\n  var prototypeMethod = prototype[methodName];\n  if (classMethod || prototypeMethod) {\n    obj[methodName] = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      /* eslint-enable @typescript-eslint/no-explicit-any */\n      var retVal;\n      if (prototypeMethod) {\n        retVal = prototypeMethod.apply(this, args);\n      }\n      if (classMethod !== prototypeMethod) {\n        retVal = classMethod.apply(this, args);\n      }\n      return retVal;\n    };\n  }\n}\n/**\n * Simple constant function for returning null, used to render empty templates in JSX.\n *\n * @public\n */\nexport function nullRender() {\n  return null;\n}","map":{"version":3,"sources":["BaseComponent.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Async } from './Async';\nimport { EventGroup } from './EventGroup';\nimport { IDisposable } from './IDisposable';\nimport { ISettingsMap } from './warn/warn';\nimport { warnConditionallyRequiredProps } from './warn/warnConditionallyRequiredProps';\nimport { warnMutuallyExclusive } from './warn/warnMutuallyExclusive';\nimport { warnDeprecations } from './warn/warnDeprecations';\nimport { IRefObject } from './createRef';\nimport { IBaseProps } from './BaseComponent.types';\n\n/**\n * BaseComponent class, which provides basic helpers for all components.\n *\n * @public\n * {@docCategory BaseComponent}\n *\n * @deprecated Do not use. We are moving away from class component.\n */\nexport class BaseComponent<TProps extends IBaseProps = {}, TState = {}> extends React.Component<TProps, TState> {\n  /**\n   * @deprecated Use React's error boundaries instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public static onError: (errorMessage?: string, ex?: any) => void;\n\n  /**\n   * Controls whether the componentRef prop will be resolved by this component instance. If you are\n   * implementing a passthrough (higher-order component), you would set this to false and pass through\n   * the props to the inner component, allowing it to resolve the componentRef.\n   */\n  protected _skipComponentRefResolution: boolean;\n\n  private __async: Async;\n  private __events: EventGroup;\n  private __disposables: IDisposable[] | null;\n  private __resolves: { [name: string]: (ref: React.ReactNode) => React.ReactNode };\n  private __className: string;\n\n  /**\n   * BaseComponent constructor\n   * @param props - The props for the component.\n   * @param context - The context for the component.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(props: TProps, context?: any) {\n    super(props, context);\n\n    // eslint-disable-next-line deprecation/deprecation\n    _makeAllSafe(this, BaseComponent.prototype, [\n      'componentDidMount',\n      'shouldComponentUpdate',\n      'getSnapshotBeforeUpdate',\n      'render',\n      'componentDidUpdate',\n      'componentWillUnmount',\n    ]);\n  }\n\n  /**\n   * When the component receives props, make sure the componentRef is updated.\n   */\n  public componentDidUpdate(prevProps: TProps, prevState: TState): void {\n    this._updateComponentRef(prevProps, this.props);\n  }\n\n  /**\n   * When the component has mounted, update the componentRef.\n   */\n  public componentDidMount(): void {\n    this._setComponentRef(this.props.componentRef, this);\n  }\n\n  /**\n   * If we have disposables, dispose them automatically on unmount.\n   */\n  public componentWillUnmount(): void {\n    this._setComponentRef(this.props.componentRef, null);\n\n    if (this.__disposables) {\n      for (let i = 0, len = this._disposables.length; i < len; i++) {\n        let disposable = this.__disposables[i];\n\n        if (disposable.dispose) {\n          disposable.dispose();\n        }\n      }\n      this.__disposables = null;\n    }\n  }\n\n  /**\n   * Gets the object's class name.\n   */\n  public get className(): string {\n    if (!this.__className) {\n      let funcNameRegex = /function (.{1,})\\(/;\n      let results = funcNameRegex.exec(this.constructor.toString());\n\n      this.__className = results && results.length > 1 ? results[1] : '';\n    }\n\n    return this.__className;\n  }\n\n  /**\n   * Allows subclasses to push things to this._disposables to be auto disposed.\n   */\n  protected get _disposables(): IDisposable[] {\n    if (!this.__disposables) {\n      this.__disposables = [];\n    }\n    return this.__disposables;\n  }\n\n  /**\n   * Gets the async instance associated with the component, created on demand. The async instance gives\n   * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks\n   * will be cleared/ignored automatically after unmounting. The helpers within the async object also\n   * preserve the this pointer so that you don't need to \"bind\" the callbacks.\n   */\n  protected get _async(): Async {\n    if (!this.__async) {\n      this.__async = new Async(this);\n      this._disposables.push(this.__async);\n    }\n\n    return this.__async;\n  }\n\n  /**\n   * Gets the event group instance assocaited with the component, created on demand. The event instance\n   * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks\n   * will be automatically disconnected after unmounting. The helpers within the events object also\n   * preserve the this reference so that you don't need to \"bind\" the callbacks.\n   */\n  protected get _events(): EventGroup {\n    if (!this.__events) {\n      this.__events = new EventGroup(this);\n      this._disposables.push(this.__events);\n    }\n\n    return this.__events;\n  }\n\n  /**\n   * Helper to return a memoized ref resolver function.\n   * @param refName - Name of the member to assign the ref to.\n   * @returns A function instance keyed from the given refname.\n   * @deprecated Use `createRef` from React.createRef.\n   */\n  protected _resolveRef(refName: string): (ref: React.ReactNode) => React.ReactNode {\n    if (!this.__resolves) {\n      this.__resolves = {};\n    }\n\n    if (!this.__resolves[refName]) {\n      this.__resolves[refName] = (ref: React.ReactNode) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return ((this as any)[refName] = ref);\n      };\n    }\n\n    return this.__resolves[refName];\n  }\n\n  /**\n   * Updates the componentRef (by calling it with \"this\" when necessary.)\n   */\n  protected _updateComponentRef(currentProps: IBaseProps, newProps: IBaseProps = {}): void {\n    // currentProps *should* always be defined, but verify that just in case a subclass is manually\n    // calling a lifecycle method with no parameters (which has happened) or other odd usage.\n    if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {\n      this._setComponentRef(currentProps.componentRef, null);\n      this._setComponentRef(newProps.componentRef, this);\n    }\n  }\n\n  /**\n   * Warns when a deprecated props are being used.\n   *\n   * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n   * either null or a replacement prop name.\n   */\n  protected _warnDeprecations(deprecationMap: ISettingsMap<TProps>): void {\n    warnDeprecations(this.className, this.props, deprecationMap);\n  }\n\n  /**\n   * Warns when props which are mutually exclusive with each other are both used.\n   *\n   * @param mutuallyExclusiveMap - The map of mutually exclusive props.\n   */\n  protected _warnMutuallyExclusive(mutuallyExclusiveMap: ISettingsMap<TProps>): void {\n    warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);\n  }\n\n  /**\n   * Warns when props are required if a condition is met.\n   *\n   * @param requiredProps - The name of the props that are required when the condition is met.\n   * @param conditionalPropName - The name of the prop that the condition is based on.\n   * @param condition - Whether the condition is met.\n   */\n  protected _warnConditionallyRequiredProps(\n    requiredProps: string[],\n    conditionalPropName: string,\n    condition: boolean,\n  ): void {\n    warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);\n  }\n\n  private _setComponentRef<TRefInterface>(\n    ref: IRefObject<TRefInterface> | undefined,\n    value: TRefInterface | null,\n  ): void {\n    if (!this._skipComponentRefResolution && ref) {\n      if (typeof ref === 'function') {\n        ref(value);\n      }\n\n      if (typeof ref === 'object') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (ref as any).current = value;\n      }\n    }\n  }\n}\n\n/**\n * Helper to override a given method with a wrapper method that can try/catch the original, but also\n * ensures that the BaseComponent's methods are called before the subclass's. This ensures that\n * componentWillUnmount in the base is called and that things in the _disposables array are disposed.\n */\n// eslint-disable-next-line deprecation/deprecation\nfunction _makeAllSafe(obj: BaseComponent<{}, {}>, prototype: Object, methodNames: string[]): void {\n  for (let i = 0, len = methodNames.length; i < len; i++) {\n    _makeSafe(obj, prototype, methodNames[i]);\n  }\n}\n\n// eslint-disable-next-line deprecation/deprecation\nfunction _makeSafe(obj: BaseComponent<{}, {}>, prototype: Object, methodName: string): void {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  let classMethod = (obj as any)[methodName];\n  let prototypeMethod = (prototype as any)[methodName];\n\n  if (classMethod || prototypeMethod) {\n    (obj as any)[methodName] = function(...args: any[]): any {\n      /* eslint-enable @typescript-eslint/no-explicit-any */\n      let retVal;\n\n      if (prototypeMethod) {\n        retVal = prototypeMethod.apply(this, args);\n      }\n      if (classMethod !== prototypeMethod) {\n        retVal = classMethod.apply(this, args);\n      }\n\n      return retVal;\n    };\n  }\n}\n\n/**\n * Simple constant function for returning null, used to render empty templates in JSX.\n *\n * @public\n */\nexport function nullRender(): JSX.Element | null {\n  return null;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}