{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\nvar StackView = function (props) {\n  var _a = props.as,\n    RootType = _a === void 0 ? 'div' : _a,\n    disableShrink = props.disableShrink,\n    wrap = props.wrap,\n    rest = __rest(props, [\"as\", \"disableShrink\", \"wrap\"]);\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding'\n  });\n  var stackChildren = React.Children.map(props.children, function (child, index) {\n    if (!child) {\n      return null;\n    }\n    if (_isStackItem(child)) {\n      var defaultItemProps = {\n        shrink: !disableShrink\n      };\n      return React.cloneElement(child, __assign(__assign({}, defaultItemProps), child.props));\n    }\n    return child;\n  });\n  var nativeProps = getNativeProps(rest, htmlElementProperties);\n  var Slots = getSlots(props, {\n    root: RootType,\n    inner: 'div'\n  });\n  if (wrap) {\n    return withSlots(Slots.root, __assign({}, nativeProps), withSlots(Slots.inner, null, stackChildren));\n  }\n  return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);\n};\nfunction _isStackItem(item) {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return !!item && typeof item === 'object' && !!item.type &&\n  // StackItem is generated by createComponent, so we need to check its displayName instead of name\n  item.type.displayName === StackItem.displayName;\n}\nvar StackStatics = {\n  Item: StackItem\n};\nexport var Stack = createComponent(StackView, {\n  displayName: 'Stack',\n  styles: styles,\n  statics: StackStatics\n});\nexport default Stack;","map":{"version":3,"sources":["components/Stack/Stack.tsx"],"names":[],"mappings":";AAAA;AACA;AACA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,SAAS,EAAE,eAAe,EAAE,QAAQ,QAAQ,kBAAkB;AACvE,SAAS,cAAc,EAAE,qBAAqB,EAAE,gBAAgB,QAAQ,iBAAiB;AACzF,SAAS,MAAM,QAAQ,gBAAgB;AAEvC,SAAS,SAAS,QAAQ,uBAAuB;AAGjD,IAAM,SAAS,GAA4B,SAAA,CAAA,KAAK,EAAA;EACtC,IAAA,EAAA,GAAA,KAAA,CAAA,EAAoB;IAApB,QAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAAoB;IAAE,aAAA,GAAA,KAAA,CAAA,aAAa;IAAE,IAAA,GAAA,KAAA,CAAA,IAAI;IAAE,IAAA,GAAA,MAAA,CAAA,KAAA,EAAA,CAAA,IAAA,EAAA,eAAA,EAAA,MAAA,CAAA,CAAO;EAE1D,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAE;IAC/B,GAAG,EAAE,oBAAoB;IACzB,SAAS,EAAE,kBAAkB;IAC7B,QAAQ,EAAE,iBAAiB;IAC3B,OAAO,EAAE;GACV,CAAC;EAEF,IAAM,aAAa,GAAmD,KAAK,CAAC,QAAQ,CAAC,GAAG,CACtF,KAAK,CAAC,QAAQ,EACd,UAAC,KAA0C,EAAE,KAAa,EAAA;IACxD,IAAI,CAAC,KAAK,EAAE;MACV,OAAO,IAAI;IACZ;IAED,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;MACvB,IAAM,gBAAgB,GAAoB;QACxC,MAAM,EAAE,CAAC;OACV;MAED,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAC1B,gBAAgB,CAAA,EAChB,KAAK,CAAC,KAAK,CAAA,CACd;IACH;IAED,OAAO,KAAK;EACd,CAAC,CACF;EAED,IAAM,WAAW,GAAG,cAAc,CAAuC,IAAI,EAAE,qBAAqB,CAAC;EAErG,IAAM,KAAK,GAAG,QAAQ,CAA2B,KAAK,EAAE;IACtD,IAAI,EAAE,QAAQ;IACd,KAAK,EAAE;GACR,CAAC;EAEF,IAAI,IAAI,EAAE;IACR,OACE,SAAA,CAAC,KAAK,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,WAAW,CAAA,EACzB,SAAA,CAAC,KAAK,CAAC,KAAK,EAAA,IAAA,EAAE,aAAa,CAAe,CAC/B;EAEhB;EAED,OAAO,SAAA,CAAC,KAAK,CAAC,IAAI,EAAA,QAAA,CAAA,CAAA,CAAA,EAAK,WAAW,CAAA,EAAG,aAAa,CAAc;AAClE,CAAC;AAED,SAAS,YAAY,CAAC,IAAqB,EAAA;EACzC;EACA;EACA;EACA,OACE,CAAC,CAAC,IAAI,IACN,OAAO,IAAI,KAAK,QAAQ,IACxB,CAAC,CAAE,IAA2B,CAAC,IAAI;EACnC;EACE,IAA2B,CAAC,IAA4B,CAAC,WAAW,KAAK,SAAS,CAAC,WAAW;AAEpG;AAEA,IAAM,YAAY,GAAG;EACnB,IAAI,EAAE;CACP;AAED,OAAO,IAAM,KAAK,GAEd,eAAe,CAAC,SAAS,EAAE;EAC7B,WAAW,EAAE,OAAO;EACpB,MAAM,EAAA,MAAA;EACN,OAAO,EAAE;CACV,CAAC;AAEF,eAAe,KAAK","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles } from './Stack.styles';\nimport { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport { StackItem } from './StackItem/StackItem';\nimport { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink, wrap, ...rest } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  const stackChildren: (React.ReactChild | null)[] | null | undefined = React.Children.map(\n    props.children,\n    (child: React.ReactElement<IStackItemProps>, index: number) => {\n      if (!child) {\n        return null;\n      }\n\n      if (_isStackItem(child)) {\n        const defaultItemProps: IStackItemProps = {\n          shrink: !disableShrink,\n        };\n\n        return React.cloneElement(child, {\n          ...defaultItemProps,\n          ...child.props,\n        });\n      }\n\n      return child;\n    },\n  );\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}