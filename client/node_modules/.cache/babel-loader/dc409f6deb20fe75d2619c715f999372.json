{"ast":null,"code":"import { getWindow } from './dom/getWindow';\n/**\n * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.\n * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.\n *\n * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a\n * new instance of the class and remember to call dispose() during your code's dispose handler.\n *\n * @public\n */\nvar Async = /** @class */function () {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function Async(parent, onError) {\n    this._timeoutIds = null;\n    this._immediateIds = null;\n    this._intervalIds = null;\n    this._animationFrameIds = null;\n    this._isDisposed = false;\n    this._parent = parent || null;\n    this._onErrorHandler = onError;\n    this._noop = function () {\n      /* do nothing */\n    };\n  }\n  /**\n   * Dispose function, clears all async operations.\n   */\n  Async.prototype.dispose = function () {\n    var id;\n    this._isDisposed = true;\n    this._parent = null;\n    // Clear timeouts.\n    if (this._timeoutIds) {\n      for (id in this._timeoutIds) {\n        if (this._timeoutIds.hasOwnProperty(id)) {\n          this.clearTimeout(parseInt(id, 10));\n        }\n      }\n      this._timeoutIds = null;\n    }\n    // Clear immediates.\n    if (this._immediateIds) {\n      for (id in this._immediateIds) {\n        if (this._immediateIds.hasOwnProperty(id)) {\n          this.clearImmediate(parseInt(id, 10));\n        }\n      }\n      this._immediateIds = null;\n    }\n    // Clear intervals.\n    if (this._intervalIds) {\n      for (id in this._intervalIds) {\n        if (this._intervalIds.hasOwnProperty(id)) {\n          this.clearInterval(parseInt(id, 10));\n        }\n      }\n      this._intervalIds = null;\n    }\n    // Clear animation frames.\n    if (this._animationFrameIds) {\n      for (id in this._animationFrameIds) {\n        if (this._animationFrameIds.hasOwnProperty(id)) {\n          this.cancelAnimationFrame(parseInt(id, 10));\n        }\n      }\n      this._animationFrameIds = null;\n    }\n  };\n  /**\n   * SetTimeout override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n  Async.prototype.setTimeout = function (callback, duration) {\n    var _this = this;\n    var timeoutId = 0;\n    if (!this._isDisposed) {\n      if (!this._timeoutIds) {\n        this._timeoutIds = {};\n      }\n      timeoutId = setTimeout(function () {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n        try {\n          // Now delete the record and call the callback.\n          if (_this._timeoutIds) {\n            delete _this._timeoutIds[timeoutId];\n          }\n          callback.apply(_this._parent);\n        } catch (e) {\n          if (_this._onErrorHandler) {\n            _this._onErrorHandler(e);\n          }\n        }\n      }, duration);\n      this._timeoutIds[timeoutId] = true;\n    }\n    return timeoutId;\n  };\n  /**\n   * Clears the timeout.\n   * @param id - Id to cancel.\n   */\n  Async.prototype.clearTimeout = function (id) {\n    if (this._timeoutIds && this._timeoutIds[id]) {\n      clearTimeout(id);\n      delete this._timeoutIds[id];\n    }\n  };\n  /**\n   * SetImmediate override, which will auto cancel the immediate during dispose.\n   * @param callback - Callback to execute.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   * @returns The setTimeout id.\n   */\n  Async.prototype.setImmediate = function (callback, targetElement) {\n    var _this = this;\n    var immediateId = 0;\n    var win = getWindow(targetElement);\n    if (!this._isDisposed) {\n      if (!this._immediateIds) {\n        this._immediateIds = {};\n      }\n      var setImmediateCallback = function () {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n        try {\n          // Now delete the record and call the callback.\n          if (_this._immediateIds) {\n            delete _this._immediateIds[immediateId];\n          }\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      };\n      immediateId = win.setTimeout(setImmediateCallback, 0);\n      this._immediateIds[immediateId] = true;\n    }\n    return immediateId;\n  };\n  /**\n   * Clears the immediate.\n   * @param id - Id to cancel.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   */\n  Async.prototype.clearImmediate = function (id, targetElement) {\n    var win = getWindow(targetElement);\n    if (this._immediateIds && this._immediateIds[id]) {\n      win.clearTimeout(id);\n      delete this._immediateIds[id];\n    }\n  };\n  /**\n   * SetInterval override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n  Async.prototype.setInterval = function (callback, duration) {\n    var _this = this;\n    var intervalId = 0;\n    if (!this._isDisposed) {\n      if (!this._intervalIds) {\n        this._intervalIds = {};\n      }\n      intervalId = setInterval(function () {\n        // Time to execute the interval callback, enqueue it as a foreground task to be executed.\n        try {\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      }, duration);\n      this._intervalIds[intervalId] = true;\n    }\n    return intervalId;\n  };\n  /**\n   * Clears the interval.\n   * @param id - Id to cancel.\n   */\n  Async.prototype.clearInterval = function (id) {\n    if (this._intervalIds && this._intervalIds[id]) {\n      clearInterval(id);\n      delete this._intervalIds[id];\n    }\n  };\n  /**\n   * Creates a function that, when executed, will only call the func function at most once per\n   * every wait milliseconds. Provide an options object to indicate that func should be invoked\n   * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\n   * function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the throttled function is invoked more than once during the wait timeout.\n   *\n   * @param func - The function to throttle.\n   * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.\n   * @param options - The options object.\n   * @returns The new throttled function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Async.prototype.throttle = function (func, wait, options) {\n    var _this = this;\n    if (this._isDisposed) {\n      return this._noop;\n    }\n    var waitMS = wait || 0;\n    var leading = true;\n    var trailing = true;\n    var lastExecuteTime = 0;\n    var lastResult;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var lastArgs;\n    var timeoutId = null;\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n    var callback = function (userCall) {\n      var now = Date.now();\n      var delta = now - lastExecuteTime;\n      var waitLength = leading ? waitMS - delta : waitMS;\n      if (delta >= waitMS && (!userCall || leading)) {\n        lastExecuteTime = now;\n        if (timeoutId) {\n          _this.clearTimeout(timeoutId);\n          timeoutId = null;\n        }\n        lastResult = func.apply(_this._parent, lastArgs);\n      } else if (timeoutId === null && trailing) {\n        timeoutId = _this.setTimeout(callback, waitLength);\n      }\n      return lastResult;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var resultFunction = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      lastArgs = args;\n      return callback(true);\n    };\n    return resultFunction;\n  };\n  /**\n   * Creates a function that will delay the execution of func until after wait milliseconds have\n   * elapsed since the last time it was invoked. Provide an options object to indicate that func\n   * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\n   * to the debounced function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the debounced function is invoked more than once during the wait\n   * timeout.\n   *\n   * @param func - The function to debounce.\n   * @param wait - The number of milliseconds to delay.\n   * @param options - The options object.\n   * @returns The new debounced function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Async.prototype.debounce = function (func, wait, options) {\n    var _this = this;\n    if (this._isDisposed) {\n      var noOpFunction = function () {\n        /** Do nothing */\n      };\n      noOpFunction.cancel = function () {\n        return;\n      };\n      noOpFunction.flush = function () {\n        return null;\n      };\n      noOpFunction.pending = function () {\n        return false;\n      };\n      return noOpFunction;\n    }\n    var waitMS = wait || 0;\n    var leading = false;\n    var trailing = true;\n    var maxWait = null;\n    var lastCallTime = 0;\n    var lastExecuteTime = Date.now();\n    var lastResult;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var lastArgs;\n    var timeoutId = null;\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n    if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {\n      maxWait = options.maxWait;\n    }\n    var markExecuted = function (time) {\n      if (timeoutId) {\n        _this.clearTimeout(timeoutId);\n        timeoutId = null;\n      }\n      lastExecuteTime = time;\n    };\n    var invokeFunction = function (time) {\n      markExecuted(time);\n      lastResult = func.apply(_this._parent, lastArgs);\n    };\n    var callback = function (userCall) {\n      var now = Date.now();\n      var executeImmediately = false;\n      if (userCall) {\n        if (leading && now - lastCallTime >= waitMS) {\n          executeImmediately = true;\n        }\n        lastCallTime = now;\n      }\n      var delta = now - lastCallTime;\n      var waitLength = waitMS - delta;\n      var maxWaitDelta = now - lastExecuteTime;\n      var maxWaitExpired = false;\n      if (maxWait !== null) {\n        // maxWait only matters when there is a pending callback\n        if (maxWaitDelta >= maxWait && timeoutId) {\n          maxWaitExpired = true;\n        } else {\n          waitLength = Math.min(waitLength, maxWait - maxWaitDelta);\n        }\n      }\n      if (delta >= waitMS || maxWaitExpired || executeImmediately) {\n        invokeFunction(now);\n      } else if ((timeoutId === null || !userCall) && trailing) {\n        timeoutId = _this.setTimeout(callback, waitLength);\n      }\n      return lastResult;\n    };\n    var pending = function () {\n      return !!timeoutId;\n    };\n    var cancel = function () {\n      if (pending()) {\n        // Mark the debounced function as having executed\n        markExecuted(Date.now());\n      }\n    };\n    var flush = function () {\n      if (pending()) {\n        invokeFunction(Date.now());\n      }\n      return lastResult;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var resultFunction = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      lastArgs = args;\n      return callback(true);\n    };\n    resultFunction.cancel = cancel;\n    resultFunction.flush = flush;\n    resultFunction.pending = pending;\n    return resultFunction;\n  };\n  Async.prototype.requestAnimationFrame = function (callback, targetElement) {\n    var _this = this;\n    var animationFrameId = 0;\n    var win = getWindow(targetElement);\n    if (!this._isDisposed) {\n      if (!this._animationFrameIds) {\n        this._animationFrameIds = {};\n      }\n      var animationFrameCallback = function () {\n        try {\n          // Now delete the record and call the callback.\n          if (_this._animationFrameIds) {\n            delete _this._animationFrameIds[animationFrameId];\n          }\n          callback.apply(_this._parent);\n        } catch (e) {\n          _this._logError(e);\n        }\n      };\n      animationFrameId = win.requestAnimationFrame ? win.requestAnimationFrame(animationFrameCallback) : win.setTimeout(animationFrameCallback, 0);\n      this._animationFrameIds[animationFrameId] = true;\n    }\n    return animationFrameId;\n  };\n  Async.prototype.cancelAnimationFrame = function (id, targetElement) {\n    var win = getWindow(targetElement);\n    if (this._animationFrameIds && this._animationFrameIds[id]) {\n      win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);\n      delete this._animationFrameIds[id];\n    }\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Async.prototype._logError = function (e) {\n    if (this._onErrorHandler) {\n      this._onErrorHandler(e);\n    }\n  };\n  return Async;\n}();\nexport { Async };","map":{"version":3,"sources":["Async.ts"],"names":[],"mappings":"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","sourcesContent":["import { getWindow } from './dom/getWindow';\n\ndeclare function setTimeout(cb: Function, delay: number): number;\ndeclare function setInterval(cb: Function, delay: number): number;\n\n/**\n * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.\n * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.\n *\n * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a\n * new instance of the class and remember to call dispose() during your code's dispose handler.\n *\n * @public\n */\nexport class Async {\n  private _timeoutIds: { [id: number]: boolean } | null = null;\n  private _immediateIds: { [id: number]: boolean } | null = null;\n  private _intervalIds: { [id: number]: boolean } | null = null;\n  private _animationFrameIds: { [id: number]: boolean } | null = null;\n  private _isDisposed: boolean;\n  private _parent: object | null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _onErrorHandler: ((e: any) => void) | undefined;\n  private _noop: () => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(parent?: object, onError?: (e: any) => void) {\n    this._isDisposed = false;\n    this._parent = parent || null;\n    this._onErrorHandler = onError;\n    this._noop = () => {\n      /* do nothing */\n    };\n  }\n\n  /**\n   * Dispose function, clears all async operations.\n   */\n  public dispose(): void {\n    let id;\n\n    this._isDisposed = true;\n    this._parent = null;\n\n    // Clear timeouts.\n    if (this._timeoutIds) {\n      for (id in this._timeoutIds) {\n        if (this._timeoutIds.hasOwnProperty(id)) {\n          this.clearTimeout(parseInt(id, 10));\n        }\n      }\n\n      this._timeoutIds = null;\n    }\n\n    // Clear immediates.\n    if (this._immediateIds) {\n      for (id in this._immediateIds) {\n        if (this._immediateIds.hasOwnProperty(id)) {\n          this.clearImmediate(parseInt(id, 10));\n        }\n      }\n\n      this._immediateIds = null;\n    }\n\n    // Clear intervals.\n    if (this._intervalIds) {\n      for (id in this._intervalIds) {\n        if (this._intervalIds.hasOwnProperty(id)) {\n          this.clearInterval(parseInt(id, 10));\n        }\n      }\n      this._intervalIds = null;\n    }\n\n    // Clear animation frames.\n    if (this._animationFrameIds) {\n      for (id in this._animationFrameIds) {\n        if (this._animationFrameIds.hasOwnProperty(id)) {\n          this.cancelAnimationFrame(parseInt(id, 10));\n        }\n      }\n\n      this._animationFrameIds = null;\n    }\n  }\n\n  /**\n   * SetTimeout override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n  public setTimeout(callback: () => void, duration: number): number {\n    let timeoutId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._timeoutIds) {\n        this._timeoutIds = {};\n      }\n\n      timeoutId = setTimeout(() => {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n\n        try {\n          // Now delete the record and call the callback.\n          if (this._timeoutIds) {\n            delete this._timeoutIds[timeoutId];\n          }\n          callback.apply(this._parent);\n        } catch (e) {\n          if (this._onErrorHandler) {\n            this._onErrorHandler(e);\n          }\n        }\n      }, duration);\n\n      this._timeoutIds[timeoutId] = true;\n    }\n\n    return timeoutId;\n  }\n\n  /**\n   * Clears the timeout.\n   * @param id - Id to cancel.\n   */\n  public clearTimeout(id: number): void {\n    if (this._timeoutIds && this._timeoutIds[id]) {\n      clearTimeout(id);\n      delete this._timeoutIds[id];\n    }\n  }\n\n  /**\n   * SetImmediate override, which will auto cancel the immediate during dispose.\n   * @param callback - Callback to execute.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   * @returns The setTimeout id.\n   */\n  public setImmediate(callback: () => void, targetElement?: Element | null): number {\n    let immediateId = 0;\n    const win = getWindow(targetElement)!;\n\n    if (!this._isDisposed) {\n      if (!this._immediateIds) {\n        this._immediateIds = {};\n      }\n\n      let setImmediateCallback = () => {\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\n\n        try {\n          // Now delete the record and call the callback.\n          if (this._immediateIds) {\n            delete this._immediateIds[immediateId];\n          }\n          callback.apply(this._parent);\n        } catch (e) {\n          this._logError(e);\n        }\n      };\n\n      immediateId = win.setTimeout(setImmediateCallback, 0);\n\n      this._immediateIds[immediateId] = true;\n    }\n\n    return immediateId;\n  }\n\n  /**\n   * Clears the immediate.\n   * @param id - Id to cancel.\n   * @param targetElement - Optional target element to use for identifying the correct window.\n   */\n  public clearImmediate(id: number, targetElement?: Element | null): void {\n    const win = getWindow(targetElement)!;\n\n    if (this._immediateIds && this._immediateIds[id]) {\n      win.clearTimeout(id);\n      delete this._immediateIds[id];\n    }\n  }\n\n  /**\n   * SetInterval override, which will auto cancel the timeout during dispose.\n   * @param callback - Callback to execute.\n   * @param duration - Duration in milliseconds.\n   * @returns The setTimeout id.\n   */\n  public setInterval(callback: () => void, duration: number): number {\n    let intervalId = 0;\n\n    if (!this._isDisposed) {\n      if (!this._intervalIds) {\n        this._intervalIds = {};\n      }\n\n      intervalId = setInterval(() => {\n        // Time to execute the interval callback, enqueue it as a foreground task to be executed.\n        try {\n          callback.apply(this._parent);\n        } catch (e) {\n          this._logError(e);\n        }\n      }, duration);\n\n      this._intervalIds[intervalId] = true;\n    }\n\n    return intervalId;\n  }\n\n  /**\n   * Clears the interval.\n   * @param id - Id to cancel.\n   */\n  public clearInterval(id: number): void {\n    if (this._intervalIds && this._intervalIds[id]) {\n      clearInterval(id);\n      delete this._intervalIds[id];\n    }\n  }\n\n  /**\n   * Creates a function that, when executed, will only call the func function at most once per\n   * every wait milliseconds. Provide an options object to indicate that func should be invoked\n   * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\n   * function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the throttled function is invoked more than once during the wait timeout.\n   *\n   * @param func - The function to throttle.\n   * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.\n   * @param options - The options object.\n   * @returns The new throttled function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public throttle<T extends (...args: any[]) => any>(\n    func: T,\n    wait?: number,\n    options?: {\n      leading?: boolean;\n      trailing?: boolean;\n    },\n  ): T {\n    if (this._isDisposed) {\n      return this._noop as T;\n    }\n\n    let waitMS = wait || 0;\n    let leading = true;\n    let trailing = true;\n    let lastExecuteTime = 0;\n    let lastResult: T;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let lastArgs: any[];\n    let timeoutId: number | null = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    let callback = (userCall?: boolean) => {\n      let now = Date.now();\n      let delta = now - lastExecuteTime;\n      let waitLength = leading ? waitMS - delta : waitMS;\n      if (delta >= waitMS && (!userCall || leading)) {\n        lastExecuteTime = now;\n        if (timeoutId) {\n          this.clearTimeout(timeoutId);\n          timeoutId = null;\n        }\n        lastResult = func.apply(this._parent, lastArgs);\n      } else if (timeoutId === null && trailing) {\n        timeoutId = this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let resultFunction = ((...args: any[]): any => {\n      lastArgs = args;\n      return callback(true);\n    }) as T;\n\n    return resultFunction;\n  }\n\n  /**\n   * Creates a function that will delay the execution of func until after wait milliseconds have\n   * elapsed since the last time it was invoked. Provide an options object to indicate that func\n   * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\n   * to the debounced function will return the result of the last func call.\n   *\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\n   * the timeout only if the debounced function is invoked more than once during the wait\n   * timeout.\n   *\n   * @param func - The function to debounce.\n   * @param wait - The number of milliseconds to delay.\n   * @param options - The options object.\n   * @returns The new debounced function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait?: number,\n    options?: {\n      leading?: boolean;\n      maxWait?: number;\n      trailing?: boolean;\n    },\n  ): ICancelable<T> & T {\n    if (this._isDisposed) {\n      let noOpFunction = (() => {\n        /** Do nothing */\n      }) as ICancelable<T> & T;\n\n      noOpFunction.cancel = () => {\n        return;\n      };\n      noOpFunction.flush = ((() => null) as unknown) as () => ReturnType<T>;\n      noOpFunction.pending = () => false;\n\n      return noOpFunction;\n    }\n\n    let waitMS = wait || 0;\n    let leading = false;\n    let trailing = true;\n    let maxWait: number | null = null;\n    let lastCallTime = 0;\n    let lastExecuteTime = Date.now();\n    let lastResult: ReturnType<T>;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let lastArgs: any[];\n    let timeoutId: number | null = null;\n\n    if (options && typeof options.leading === 'boolean') {\n      leading = options.leading;\n    }\n\n    if (options && typeof options.trailing === 'boolean') {\n      trailing = options.trailing;\n    }\n\n    if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {\n      maxWait = options.maxWait;\n    }\n\n    let markExecuted = (time: number) => {\n      if (timeoutId) {\n        this.clearTimeout(timeoutId);\n        timeoutId = null;\n      }\n      lastExecuteTime = time;\n    };\n\n    let invokeFunction = (time: number) => {\n      markExecuted(time);\n      lastResult = func.apply(this._parent, lastArgs);\n    };\n\n    let callback = (userCall?: boolean) => {\n      let now = Date.now();\n      let executeImmediately = false;\n      if (userCall) {\n        if (leading && now - lastCallTime >= waitMS) {\n          executeImmediately = true;\n        }\n        lastCallTime = now;\n      }\n      let delta = now - lastCallTime;\n      let waitLength = waitMS - delta;\n      let maxWaitDelta = now - lastExecuteTime;\n      let maxWaitExpired = false;\n\n      if (maxWait !== null) {\n        // maxWait only matters when there is a pending callback\n        if (maxWaitDelta >= maxWait && timeoutId) {\n          maxWaitExpired = true;\n        } else {\n          waitLength = Math.min(waitLength, maxWait - maxWaitDelta);\n        }\n      }\n\n      if (delta >= waitMS || maxWaitExpired || executeImmediately) {\n        invokeFunction(now);\n      } else if ((timeoutId === null || !userCall) && trailing) {\n        timeoutId = this.setTimeout(callback, waitLength);\n      }\n\n      return lastResult;\n    };\n\n    let pending = (): boolean => {\n      return !!timeoutId;\n    };\n\n    let cancel = (): void => {\n      if (pending()) {\n        // Mark the debounced function as having executed\n        markExecuted(Date.now());\n      }\n    };\n\n    let flush = () => {\n      if (pending()) {\n        invokeFunction(Date.now());\n      }\n\n      return lastResult;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let resultFunction = ((...args: any[]) => {\n      lastArgs = args;\n      return callback(true);\n    }) as ICancelable<T> & T;\n\n    resultFunction.cancel = cancel;\n    resultFunction.flush = flush;\n    resultFunction.pending = pending;\n\n    return resultFunction;\n  }\n\n  public requestAnimationFrame(callback: () => void, targetElement?: Element | null): number {\n    let animationFrameId = 0;\n    const win = getWindow(targetElement)!;\n\n    if (!this._isDisposed) {\n      if (!this._animationFrameIds) {\n        this._animationFrameIds = {};\n      }\n\n      let animationFrameCallback = () => {\n        try {\n          // Now delete the record and call the callback.\n          if (this._animationFrameIds) {\n            delete this._animationFrameIds[animationFrameId];\n          }\n\n          callback.apply(this._parent);\n        } catch (e) {\n          this._logError(e);\n        }\n      };\n\n      animationFrameId = win.requestAnimationFrame\n        ? win.requestAnimationFrame(animationFrameCallback)\n        : win.setTimeout(animationFrameCallback, 0);\n\n      this._animationFrameIds[animationFrameId] = true;\n    }\n\n    return animationFrameId;\n  }\n\n  public cancelAnimationFrame(id: number, targetElement?: Element | null): void {\n    const win = getWindow(targetElement)!;\n\n    if (this._animationFrameIds && this._animationFrameIds[id]) {\n      win.cancelAnimationFrame ? win.cancelAnimationFrame(id) : win.clearTimeout(id);\n      delete this._animationFrameIds[id];\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected _logError(e: any): void {\n    if (this._onErrorHandler) {\n      this._onErrorHandler(e);\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ICancelable<T extends (...args: any[]) => any> = {\n  flush: () => ReturnType<T>;\n  cancel: () => void;\n  pending: () => boolean;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}