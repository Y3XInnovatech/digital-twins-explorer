{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport { mergeCustomizations } from './mergeCustomizations';\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n */\nvar Customizer = /** @class */function (_super) {\n  __extends(Customizer, _super);\n  function Customizer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._onCustomizationChange = function () {\n      return _this.forceUpdate();\n    };\n    return _this;\n  }\n  Customizer.prototype.componentDidMount = function () {\n    Customizations.observe(this._onCustomizationChange);\n  };\n  Customizer.prototype.componentWillUnmount = function () {\n    Customizations.unobserve(this._onCustomizationChange);\n  };\n  Customizer.prototype.render = function () {\n    var _this = this;\n    var contextTransform = this.props.contextTransform;\n    return React.createElement(CustomizerContext.Consumer, null, function (parentContext) {\n      var newContext = mergeCustomizations(_this.props, parentContext);\n      if (contextTransform) {\n        newContext = contextTransform(newContext);\n      }\n      return React.createElement(CustomizerContext.Provider, {\n        value: newContext\n      }, _this.props.children);\n    });\n  };\n  return Customizer;\n}(React.Component);\nexport { Customizer };","map":{"version":3,"sources":["customizations/Customizer.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,cAAc,QAAQ,kBAAkB;AACjD,SAAS,iBAAiB,QAA4B,qBAAqB;AAC3E,SAAS,mBAAmB,QAAQ,uBAAuB;AAG3D;;;;;;;;;;;;;AAaG;AACH,IAAA,UAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAgC,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;EAAhC,SAAA,UAAA,CAAA,EAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IA0BU,KAAA,CAAA,sBAAsB,GAAG,YAAA;MAAM,OAAA,KAAI,CAAC,WAAW,CAAA,CAAE;IAAlB,CAAkB;;EAC3D;EA1BS,UAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,YAAA;IACE,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC;EACrD,CAAC;EAEM,UAAA,CAAA,SAAA,CAAA,oBAAoB,GAA3B,YAAA;IACE,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC;EACvD,CAAC;EAEM,UAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACU,IAAA,gBAAA,GAAA,IAAA,CAAA,KAAA,CAAA,gBAAgB;IACxB,OACE,KAAA,CAAA,aAAA,CAAC,iBAAiB,CAAC,QAAQ,EAAA,IAAA,EACxB,UAAC,aAAiC,EAAA;MACjC,IAAI,UAAU,GAAG,mBAAmB,CAAC,KAAI,CAAC,KAAK,EAAE,aAAa,CAAC;MAE/D,IAAI,gBAAgB,EAAE;QACpB,UAAU,GAAG,gBAAgB,CAAC,UAAU,CAAC;MAC1C;MAED,OAAO,KAAA,CAAA,aAAA,CAAC,iBAAiB,CAAC,QAAQ,EAAA;QAAC,KAAK,EAAE;MAAU,CAAA,EAAG,KAAI,CAAC,KAAK,CAAC,QAAQ,CAA8B;IAC1G,CAAC,CAC0B;EAEjC,CAAC;EAGH,OAAA,UAAC;AAAD,CAAC,CA3B+B,KAAK,CAAC,SAAS,CAAA","sourcesContent":["import * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext, ICustomizerContext } from './CustomizerContext';\nimport { mergeCustomizations } from './mergeCustomizations';\nimport { ICustomizerProps } from './Customizer.types';\n\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n */\nexport class Customizer extends React.Component<ICustomizerProps> {\n  public componentDidMount(): void {\n    Customizations.observe(this._onCustomizationChange);\n  }\n\n  public componentWillUnmount(): void {\n    Customizations.unobserve(this._onCustomizationChange);\n  }\n\n  public render(): React.ReactElement<{}> {\n    const { contextTransform } = this.props;\n    return (\n      <CustomizerContext.Consumer>\n        {(parentContext: ICustomizerContext) => {\n          let newContext = mergeCustomizations(this.props, parentContext);\n\n          if (contextTransform) {\n            newContext = contextTransform(newContext);\n          }\n\n          return <CustomizerContext.Provider value={newContext}>{this.props.children}</CustomizerContext.Provider>;\n        }}\n      </CustomizerContext.Consumer>\n    );\n  }\n\n  private _onCustomizationChange = () => this.forceUpdate();\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}