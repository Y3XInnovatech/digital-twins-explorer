{"ast":null,"code":"var _a, _b;\nimport { __assign } from \"tslib\";\nimport { FontWeights, concatStyleSets, getFocusStyle, HighContrastSelector, getPlaceholderStyles, hiddenContentStyle, getInputFocusStyle, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar ComboBoxHeight = 32;\nvar ComboBoxLineHeight = 30;\nvar ComboBoxCaretDownWidth = 32;\nvar ComboBoxOptionHeight = 36;\nvar getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n  var semanticColors = theme.semanticColors;\n  return {\n    backgroundColor: semanticColors.disabledBackground,\n    color: semanticColors.disabledText,\n    cursor: 'default',\n    selectors: (_a = {\n      ':after': {\n        borderColor: semanticColors.disabledBackground\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText',\n      selectors: {\n        ':after': {\n          borderColor: 'GrayText'\n        }\n      }\n    }, _a)\n  };\n});\nvar listOptionHighContrastStyles = {\n  selectors: (_a = {}, _a[HighContrastSelector] = __assign({\n    backgroundColor: 'Highlight',\n    borderColor: 'Highlight',\n    color: 'HighlightText'\n  }, getHighContrastNoAdjustStyle()), _a)\n};\nvar inputHighContrastStyles = {\n  selectors: (_b = {}, _b[HighContrastSelector] = __assign({\n    color: 'WindowText',\n    backgroundColor: 'Window'\n  }, getHighContrastNoAdjustStyle()), _b)\n};\nexport var getOptionStyles = memoizeFunction(function (theme, customStylesForAllOptions, customOptionStylesForCurrentOption, isPending, isHidden) {\n  var _a;\n  var palette = theme.palette,\n    semanticColors = theme.semanticColors;\n  var option = {\n    textHoveredColor: semanticColors.menuItemTextHovered,\n    textSelectedColor: palette.neutralDark,\n    textDisabledColor: semanticColors.disabledText,\n    backgroundHoveredColor: semanticColors.menuItemBackgroundHovered,\n    backgroundPressedColor: semanticColors.menuItemBackgroundPressed\n  };\n  var optionStyles = {\n    root: [theme.fonts.medium, {\n      backgroundColor: isPending ? option.backgroundHoveredColor : 'transparent',\n      boxSizing: 'border-box',\n      cursor: 'pointer',\n      display: isHidden ? 'none' : 'block',\n      width: '100%',\n      height: 'auto',\n      minHeight: ComboBoxOptionHeight,\n      lineHeight: '20px',\n      padding: '0 8px',\n      position: 'relative',\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: 'transparent',\n      borderRadius: 0,\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      textAlign: 'left',\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        border: 'none',\n        borderColor: 'Background'\n      }, _a['&.ms-Checkbox'] = {\n        display: 'flex',\n        alignItems: 'center'\n      }, _a['&.ms-Button--command:hover:active'] = {\n        backgroundColor: option.backgroundPressedColor\n      }, _a['.ms-Checkbox-label'] = {\n        width: '100%'\n      }, _a)\n    }],\n    rootHovered: {\n      backgroundColor: option.backgroundHoveredColor,\n      color: option.textHoveredColor\n    },\n    rootFocused: {\n      backgroundColor: option.backgroundHoveredColor\n    },\n    rootChecked: [{\n      backgroundColor: 'transparent',\n      color: option.textSelectedColor,\n      selectors: {\n        ':hover': [{\n          backgroundColor: option.backgroundHoveredColor\n        }, listOptionHighContrastStyles]\n      }\n    }, getFocusStyle(theme, {\n      inset: -1,\n      isFocusedOnly: false\n    }), listOptionHighContrastStyles],\n    rootDisabled: {\n      color: option.textDisabledColor,\n      cursor: 'default'\n    },\n    optionText: {\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      minWidth: '0px',\n      maxWidth: '100%',\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      display: 'inline-block'\n    },\n    optionTextWrapper: {\n      maxWidth: '100%',\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n  return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);\n});\nexport var getCaretDownButtonStyles = memoizeFunction(function (theme, customStyles) {\n  var _a, _b;\n  var semanticColors = theme.semanticColors,\n    fonts = theme.fonts;\n  var caret = {\n    buttonTextColor: semanticColors.bodySubtext,\n    buttonTextHoveredCheckedColor: semanticColors.buttonTextChecked,\n    buttonBackgroundHoveredColor: semanticColors.listItemBackgroundHovered,\n    buttonBackgroundCheckedColor: semanticColors.listItemBackgroundChecked,\n    buttonBackgroundCheckedHoveredColor: semanticColors.listItemBackgroundCheckedHovered\n  };\n  var buttonHighContrastStyles = {\n    selectors: (_a = {}, _a[HighContrastSelector] = __assign({\n      backgroundColor: 'Highlight',\n      borderColor: 'Highlight',\n      color: 'HighlightText'\n    }, getHighContrastNoAdjustStyle()), _a)\n  };\n  var styles = {\n    root: {\n      color: caret.buttonTextColor,\n      fontSize: fonts.small.fontSize,\n      position: 'absolute',\n      top: 0,\n      height: '100%',\n      lineHeight: ComboBoxLineHeight,\n      width: ComboBoxCaretDownWidth,\n      textAlign: 'center',\n      cursor: 'default',\n      selectors: (_b = {}, _b[HighContrastSelector] = __assign({\n        backgroundColor: 'ButtonFace',\n        borderColor: 'ButtonText',\n        color: 'ButtonText'\n      }, getHighContrastNoAdjustStyle()), _b)\n    },\n    icon: {\n      fontSize: fonts.small.fontSize\n    },\n    rootHovered: [{\n      backgroundColor: caret.buttonBackgroundHoveredColor,\n      color: caret.buttonTextHoveredCheckedColor,\n      cursor: 'pointer'\n    }, buttonHighContrastStyles],\n    rootPressed: [{\n      backgroundColor: caret.buttonBackgroundCheckedColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootChecked: [{\n      backgroundColor: caret.buttonBackgroundCheckedColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootCheckedHovered: [{\n      backgroundColor: caret.buttonBackgroundCheckedHoveredColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootDisabled: [getDisabledStyles(theme), {\n      position: 'absolute'\n    }]\n  };\n  return concatStyleSets(styles, customStyles);\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles, comboBoxOptionWidth) {\n  var _a, _b, _c, _d, _e, _f;\n  var semanticColors = theme.semanticColors,\n    fonts = theme.fonts,\n    effects = theme.effects;\n  var root = {\n    textColor: semanticColors.inputText,\n    borderColor: semanticColors.inputBorder,\n    borderHoveredColor: semanticColors.inputBorderHovered,\n    borderPressedColor: semanticColors.inputFocusBorderAlt,\n    borderFocusedColor: semanticColors.inputFocusBorderAlt,\n    backgroundColor: semanticColors.inputBackground,\n    erroredColor: semanticColors.errorText\n  };\n  var option = {\n    headerTextColor: semanticColors.menuHeader,\n    dividerBorderColor: semanticColors.bodyDivider\n  };\n  // placeholder style variables\n  var placeholderHighContrastStyles = {\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n  var placeholderStyles = [{\n    color: semanticColors.inputPlaceholderText\n  }, placeholderHighContrastStyles];\n  var placeholderStylesHovered = [{\n    color: semanticColors.inputTextHovered\n  }, placeholderHighContrastStyles];\n  var disabledPlaceholderStyles = [{\n    color: semanticColors.disabledText\n  }, placeholderHighContrastStyles];\n  var ComboBoxRootHighContrastFocused = __assign(__assign({\n    color: 'HighlightText',\n    backgroundColor: 'Window'\n  }, getHighContrastNoAdjustStyle()), {\n    selectors: {\n      ':after': {\n        borderColor: 'Highlight'\n      }\n    }\n  });\n  var focusBorderStyles = getInputFocusStyle(root.borderPressedColor, effects.roundedCorner2, 'border', 0);\n  var styles = {\n    container: {},\n    label: {},\n    labelDisabled: {},\n    root: [theme.fonts.medium, {\n      boxShadow: 'none',\n      marginLeft: '0',\n      paddingRight: ComboBoxCaretDownWidth,\n      paddingLeft: 9,\n      color: root.textColor,\n      position: 'relative',\n      outline: '0',\n      userSelect: 'none',\n      backgroundColor: root.backgroundColor,\n      cursor: 'text',\n      display: 'block',\n      height: ComboBoxHeight,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      boxSizing: 'border-box',\n      selectors: {\n        '.ms-Label': {\n          display: 'inline-block',\n          marginBottom: '8px'\n        },\n        '&.is-open': {\n          selectors: (_b = {}, _b[HighContrastSelector] = ComboBoxRootHighContrastFocused, _b)\n        },\n        // setting border using pseudo-element here in order to\n        // prevent chevron button to overlap ComboBox border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: root.borderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    }],\n    rootHovered: {\n      selectors: (_c = {\n        ':after': {\n          borderColor: root.borderHoveredColor\n        },\n        '.ms-ComboBox-Input': [{\n          color: semanticColors.inputTextHovered\n        }, getPlaceholderStyles(placeholderStylesHovered), inputHighContrastStyles]\n      }, _c[HighContrastSelector] = __assign(__assign({\n        color: 'HighlightText',\n        backgroundColor: 'Window'\n      }, getHighContrastNoAdjustStyle()), {\n        selectors: {\n          ':after': {\n            borderColor: 'Highlight'\n          }\n        }\n      }), _c)\n    },\n    rootPressed: [{\n      position: 'relative',\n      selectors: (_d = {}, _d[HighContrastSelector] = ComboBoxRootHighContrastFocused, _d)\n    }],\n    rootFocused: [{\n      selectors: (_e = {\n        '.ms-ComboBox-Input': [{\n          color: semanticColors.inputTextHovered\n        }, inputHighContrastStyles]\n      }, _e[HighContrastSelector] = ComboBoxRootHighContrastFocused, _e)\n    }, focusBorderStyles],\n    rootDisabled: getDisabledStyles(theme),\n    rootError: {\n      selectors: {\n        ':after': {\n          borderColor: root.erroredColor\n        },\n        ':hover:after': {\n          borderColor: semanticColors.inputBorderHovered\n        }\n      }\n    },\n    rootDisallowFreeForm: {},\n    input: [getPlaceholderStyles(placeholderStyles), {\n      backgroundColor: root.backgroundColor,\n      color: root.textColor,\n      boxSizing: 'border-box',\n      width: '100%',\n      height: '100%',\n      borderStyle: 'none',\n      outline: 'none',\n      font: 'inherit',\n      textOverflow: 'ellipsis',\n      padding: '0',\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, inputHighContrastStyles],\n    inputDisabled: [getDisabledStyles(theme), getPlaceholderStyles(disabledPlaceholderStyles)],\n    errorMessage: [theme.fonts.small, {\n      color: root.erroredColor,\n      marginTop: '5px'\n    }],\n    callout: {\n      boxShadow: effects.elevation8\n    },\n    optionsContainerWrapper: {\n      width: comboBoxOptionWidth\n    },\n    optionsContainer: {\n      display: 'block'\n    },\n    screenReaderText: hiddenContentStyle,\n    header: [fonts.medium, {\n      fontWeight: FontWeights.semibold,\n      color: option.headerTextColor,\n      backgroundColor: 'none',\n      borderStyle: 'none',\n      height: ComboBoxOptionHeight,\n      lineHeight: ComboBoxOptionHeight,\n      cursor: 'default',\n      padding: '0 8px',\n      userSelect: 'none',\n      textAlign: 'left',\n      selectors: (_f = {}, _f[HighContrastSelector] = __assign({\n        color: 'GrayText'\n      }, getHighContrastNoAdjustStyle()), _f)\n    }],\n    divider: {\n      height: 1,\n      backgroundColor: option.dividerBorderColor\n    }\n  };\n  return concatStyleSets(styles, customStyles);\n});","map":{"version":3,"sources":["components/ComboBox/ComboBox.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  FontWeights,\r\n  IRawStyle,\r\n  ITheme,\r\n  concatStyleSets,\r\n  getFocusStyle,\r\n  HighContrastSelector,\r\n  IStyle,\r\n  getPlaceholderStyles,\r\n  hiddenContentStyle,\r\n  getInputFocusStyle,\r\n  getHighContrastNoAdjustStyle,\r\n} from '../../Styling';\r\nimport { IComboBoxOptionStyles, IComboBoxStyles } from './ComboBox.types';\r\n\r\nimport { IButtonStyles } from '../../Button';\r\nimport { memoizeFunction } from '../../Utilities';\r\n\r\nconst ComboBoxHeight = 32;\r\nconst ComboBoxLineHeight = 30;\r\nconst ComboBoxCaretDownWidth = 32;\r\nconst ComboBoxOptionHeight = 36;\r\n\r\nconst getDisabledStyles = memoizeFunction(\r\n  (theme: ITheme): IRawStyle => {\r\n    const { semanticColors } = theme;\r\n\r\n    return {\r\n      backgroundColor: semanticColors.disabledBackground,\r\n      color: semanticColors.disabledText,\r\n      cursor: 'default',\r\n      selectors: {\r\n        ':after': {\r\n          borderColor: semanticColors.disabledBackground,\r\n        },\r\n        [HighContrastSelector]: {\r\n          color: 'GrayText',\r\n          selectors: {\r\n            ':after': {\r\n              borderColor: 'GrayText',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n  },\r\n);\r\n\r\nconst listOptionHighContrastStyles: IRawStyle = {\r\n  selectors: {\r\n    [HighContrastSelector]: {\r\n      backgroundColor: 'Highlight',\r\n      borderColor: 'Highlight',\r\n      color: 'HighlightText',\r\n      ...getHighContrastNoAdjustStyle(),\r\n    },\r\n  },\r\n};\r\n\r\nconst inputHighContrastStyles: IRawStyle = {\r\n  selectors: {\r\n    [HighContrastSelector]: {\r\n      color: 'WindowText',\r\n      backgroundColor: 'Window',\r\n      ...getHighContrastNoAdjustStyle(),\r\n    },\r\n  },\r\n};\r\n\r\nexport const getOptionStyles = memoizeFunction(\r\n  (\r\n    theme: ITheme,\r\n    customStylesForAllOptions?: Partial<IComboBoxOptionStyles>,\r\n    customOptionStylesForCurrentOption?: Partial<IComboBoxOptionStyles>,\r\n    isPending?: boolean,\r\n    isHidden?: boolean,\r\n  ): Partial<IComboBoxOptionStyles> => {\r\n    const { palette, semanticColors } = theme;\r\n\r\n    const option = {\r\n      textHoveredColor: semanticColors.menuItemTextHovered,\r\n      textSelectedColor: palette.neutralDark,\r\n      textDisabledColor: semanticColors.disabledText,\r\n      backgroundHoveredColor: semanticColors.menuItemBackgroundHovered,\r\n      backgroundPressedColor: semanticColors.menuItemBackgroundPressed,\r\n    };\r\n\r\n    const optionStyles: IComboBoxOptionStyles = {\r\n      root: [\r\n        theme.fonts.medium,\r\n        {\r\n          backgroundColor: isPending ? option.backgroundHoveredColor : 'transparent',\r\n          boxSizing: 'border-box',\r\n          cursor: 'pointer',\r\n          display: isHidden ? 'none' : 'block',\r\n          width: '100%',\r\n          height: 'auto',\r\n          minHeight: ComboBoxOptionHeight,\r\n          lineHeight: '20px',\r\n          padding: '0 8px',\r\n          position: 'relative',\r\n          borderWidth: '1px',\r\n          borderStyle: 'solid',\r\n          borderColor: 'transparent',\r\n          borderRadius: 0,\r\n          wordWrap: 'break-word',\r\n          overflowWrap: 'break-word',\r\n          textAlign: 'left',\r\n          selectors: {\r\n            [HighContrastSelector]: {\r\n              border: 'none',\r\n              borderColor: 'Background',\r\n            },\r\n            '&.ms-Checkbox': {\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n            },\r\n            '&.ms-Button--command:hover:active': {\r\n              backgroundColor: option.backgroundPressedColor,\r\n            },\r\n            '.ms-Checkbox-label': {\r\n              width: '100%',\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      rootHovered: {\r\n        backgroundColor: option.backgroundHoveredColor,\r\n        color: option.textHoveredColor,\r\n      },\r\n      rootFocused: {\r\n        backgroundColor: option.backgroundHoveredColor,\r\n      },\r\n      rootChecked: [\r\n        {\r\n          backgroundColor: 'transparent',\r\n          color: option.textSelectedColor,\r\n          selectors: {\r\n            ':hover': [\r\n              {\r\n                backgroundColor: option.backgroundHoveredColor,\r\n              },\r\n              listOptionHighContrastStyles,\r\n            ],\r\n          },\r\n        },\r\n        getFocusStyle(theme, { inset: -1, isFocusedOnly: false }),\r\n        listOptionHighContrastStyles,\r\n      ],\r\n      rootDisabled: {\r\n        color: option.textDisabledColor,\r\n        cursor: 'default',\r\n      },\r\n      optionText: {\r\n        overflow: 'hidden',\r\n        whiteSpace: 'nowrap',\r\n        textOverflow: 'ellipsis',\r\n        minWidth: '0px',\r\n        maxWidth: '100%',\r\n        wordWrap: 'break-word',\r\n        overflowWrap: 'break-word',\r\n        display: 'inline-block',\r\n      },\r\n      optionTextWrapper: {\r\n        maxWidth: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n      },\r\n    };\r\n\r\n    return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);\r\n  },\r\n);\r\n\r\nexport const getCaretDownButtonStyles = memoizeFunction(\r\n  (theme: ITheme, customStyles?: Partial<IButtonStyles>): IButtonStyles => {\r\n    const { semanticColors, fonts } = theme;\r\n\r\n    const caret = {\r\n      buttonTextColor: semanticColors.bodySubtext,\r\n      buttonTextHoveredCheckedColor: semanticColors.buttonTextChecked,\r\n      buttonBackgroundHoveredColor: semanticColors.listItemBackgroundHovered,\r\n      buttonBackgroundCheckedColor: semanticColors.listItemBackgroundChecked,\r\n      buttonBackgroundCheckedHoveredColor: semanticColors.listItemBackgroundCheckedHovered,\r\n    };\r\n\r\n    const buttonHighContrastStyles: IStyle = {\r\n      selectors: {\r\n        [HighContrastSelector]: {\r\n          backgroundColor: 'Highlight',\r\n          borderColor: 'Highlight',\r\n          color: 'HighlightText',\r\n          ...getHighContrastNoAdjustStyle(),\r\n        },\r\n      },\r\n    };\r\n\r\n    const styles: IButtonStyles = {\r\n      root: {\r\n        color: caret.buttonTextColor,\r\n        fontSize: fonts.small.fontSize,\r\n        position: 'absolute',\r\n        top: 0,\r\n        height: '100%',\r\n        lineHeight: ComboBoxLineHeight,\r\n        width: ComboBoxCaretDownWidth,\r\n        textAlign: 'center',\r\n        cursor: 'default',\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'ButtonFace',\r\n            borderColor: 'ButtonText',\r\n            color: 'ButtonText',\r\n            ...getHighContrastNoAdjustStyle(),\r\n          },\r\n        },\r\n      },\r\n      icon: {\r\n        fontSize: fonts.small.fontSize,\r\n      },\r\n      rootHovered: [\r\n        {\r\n          backgroundColor: caret.buttonBackgroundHoveredColor,\r\n          color: caret.buttonTextHoveredCheckedColor,\r\n          cursor: 'pointer',\r\n        },\r\n        buttonHighContrastStyles,\r\n      ],\r\n      rootPressed: [\r\n        {\r\n          backgroundColor: caret.buttonBackgroundCheckedColor,\r\n          color: caret.buttonTextHoveredCheckedColor,\r\n        },\r\n        buttonHighContrastStyles,\r\n      ],\r\n      rootChecked: [\r\n        {\r\n          backgroundColor: caret.buttonBackgroundCheckedColor,\r\n          color: caret.buttonTextHoveredCheckedColor,\r\n        },\r\n        buttonHighContrastStyles,\r\n      ],\r\n      rootCheckedHovered: [\r\n        {\r\n          backgroundColor: caret.buttonBackgroundCheckedHoveredColor,\r\n          color: caret.buttonTextHoveredCheckedColor,\r\n        },\r\n        buttonHighContrastStyles,\r\n      ],\r\n      rootDisabled: [\r\n        getDisabledStyles(theme),\r\n        {\r\n          position: 'absolute',\r\n        },\r\n      ],\r\n    };\r\n    return concatStyleSets(styles, customStyles);\r\n  },\r\n);\r\n\r\nexport const getStyles = memoizeFunction(\r\n  (theme: ITheme, customStyles?: Partial<IComboBoxStyles>, comboBoxOptionWidth?: string): Partial<IComboBoxStyles> => {\r\n    const { semanticColors, fonts, effects } = theme;\r\n\r\n    const root = {\r\n      textColor: semanticColors.inputText,\r\n      borderColor: semanticColors.inputBorder,\r\n      borderHoveredColor: semanticColors.inputBorderHovered,\r\n      borderPressedColor: semanticColors.inputFocusBorderAlt,\r\n      borderFocusedColor: semanticColors.inputFocusBorderAlt,\r\n      backgroundColor: semanticColors.inputBackground,\r\n      erroredColor: semanticColors.errorText,\r\n    };\r\n\r\n    const option = {\r\n      headerTextColor: semanticColors.menuHeader,\r\n      dividerBorderColor: semanticColors.bodyDivider,\r\n    };\r\n\r\n    // placeholder style variables\r\n    const placeholderHighContrastStyles: IRawStyle = {\r\n      selectors: {\r\n        [HighContrastSelector]: {\r\n          color: 'GrayText',\r\n        },\r\n      },\r\n    };\r\n    const placeholderStyles: IStyle = [\r\n      {\r\n        color: semanticColors.inputPlaceholderText,\r\n      },\r\n      placeholderHighContrastStyles,\r\n    ];\r\n    const placeholderStylesHovered: IStyle = [\r\n      {\r\n        color: semanticColors.inputTextHovered,\r\n      },\r\n      placeholderHighContrastStyles,\r\n    ];\r\n    const disabledPlaceholderStyles: IStyle = [\r\n      {\r\n        color: semanticColors.disabledText,\r\n      },\r\n      placeholderHighContrastStyles,\r\n    ];\r\n\r\n    const ComboBoxRootHighContrastFocused = {\r\n      color: 'HighlightText',\r\n      backgroundColor: 'Window',\r\n      ...getHighContrastNoAdjustStyle(),\r\n      selectors: {\r\n        ':after': {\r\n          borderColor: 'Highlight',\r\n        },\r\n      },\r\n    };\r\n\r\n    const focusBorderStyles: IStyle = getInputFocusStyle(root.borderPressedColor, effects.roundedCorner2, 'border', 0);\r\n\r\n    const styles: IComboBoxStyles = {\r\n      container: {},\r\n      label: {},\r\n      labelDisabled: {},\r\n      root: [\r\n        theme.fonts.medium,\r\n        {\r\n          boxShadow: 'none',\r\n          marginLeft: '0',\r\n          paddingRight: ComboBoxCaretDownWidth,\r\n          paddingLeft: 9,\r\n          color: root.textColor,\r\n          position: 'relative',\r\n          outline: '0',\r\n          userSelect: 'none',\r\n          backgroundColor: root.backgroundColor,\r\n          cursor: 'text',\r\n          display: 'block',\r\n          height: ComboBoxHeight,\r\n          whiteSpace: 'nowrap',\r\n          textOverflow: 'ellipsis',\r\n          boxSizing: 'border-box', // Border-box matches Dropdown and TextField\r\n          selectors: {\r\n            '.ms-Label': {\r\n              display: 'inline-block',\r\n              marginBottom: '8px',\r\n            },\r\n            '&.is-open': {\r\n              selectors: {\r\n                [HighContrastSelector]: ComboBoxRootHighContrastFocused,\r\n              },\r\n            },\r\n            // setting border using pseudo-element here in order to\r\n            // prevent chevron button to overlap ComboBox border under certain resolutions\r\n            ':after': {\r\n              pointerEvents: 'none',\r\n              content: \"''\",\r\n              position: 'absolute',\r\n              left: 0,\r\n              top: 0,\r\n              bottom: 0,\r\n              right: 0,\r\n              borderWidth: '1px',\r\n              borderStyle: 'solid',\r\n              borderColor: root.borderColor,\r\n              borderRadius: effects.roundedCorner2,\r\n            },\r\n          },\r\n        },\r\n      ],\r\n\r\n      rootHovered: {\r\n        selectors: {\r\n          ':after': {\r\n            borderColor: root.borderHoveredColor,\r\n          },\r\n          '.ms-ComboBox-Input': [\r\n            {\r\n              color: semanticColors.inputTextHovered,\r\n            },\r\n            getPlaceholderStyles(placeholderStylesHovered),\r\n            inputHighContrastStyles,\r\n          ],\r\n          [HighContrastSelector]: {\r\n            color: 'HighlightText',\r\n            backgroundColor: 'Window',\r\n            ...getHighContrastNoAdjustStyle(),\r\n            selectors: {\r\n              ':after': {\r\n                borderColor: 'Highlight',\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n\r\n      rootPressed: [\r\n        {\r\n          position: 'relative',\r\n          selectors: {\r\n            [HighContrastSelector]: ComboBoxRootHighContrastFocused,\r\n          },\r\n        },\r\n      ],\r\n\r\n      rootFocused: [\r\n        {\r\n          selectors: {\r\n            '.ms-ComboBox-Input': [\r\n              {\r\n                color: semanticColors.inputTextHovered,\r\n              },\r\n              inputHighContrastStyles,\r\n            ],\r\n            [HighContrastSelector]: ComboBoxRootHighContrastFocused,\r\n          },\r\n        },\r\n        focusBorderStyles,\r\n      ],\r\n\r\n      rootDisabled: getDisabledStyles(theme),\r\n\r\n      rootError: {\r\n        selectors: {\r\n          ':after': {\r\n            borderColor: root.erroredColor,\r\n          },\r\n          ':hover:after': {\r\n            borderColor: semanticColors.inputBorderHovered,\r\n          },\r\n        },\r\n      },\r\n\r\n      rootDisallowFreeForm: {},\r\n\r\n      input: [\r\n        getPlaceholderStyles(placeholderStyles),\r\n        {\r\n          backgroundColor: root.backgroundColor,\r\n          color: root.textColor,\r\n          boxSizing: 'border-box',\r\n          width: '100%',\r\n          height: '100%',\r\n          borderStyle: 'none',\r\n          outline: 'none',\r\n          font: 'inherit',\r\n          textOverflow: 'ellipsis',\r\n          padding: '0',\r\n          selectors: {\r\n            '::-ms-clear': {\r\n              display: 'none',\r\n            },\r\n          },\r\n        },\r\n        inputHighContrastStyles,\r\n      ],\r\n\r\n      inputDisabled: [getDisabledStyles(theme), getPlaceholderStyles(disabledPlaceholderStyles)],\r\n      errorMessage: [\r\n        theme.fonts.small,\r\n        {\r\n          color: root.erroredColor,\r\n          marginTop: '5px',\r\n        },\r\n      ],\r\n\r\n      callout: {\r\n        boxShadow: effects.elevation8,\r\n      },\r\n\r\n      optionsContainerWrapper: {\r\n        width: comboBoxOptionWidth,\r\n      },\r\n\r\n      optionsContainer: {\r\n        display: 'block',\r\n      },\r\n      screenReaderText: hiddenContentStyle,\r\n\r\n      header: [\r\n        fonts.medium,\r\n        {\r\n          fontWeight: FontWeights.semibold,\r\n          color: option.headerTextColor,\r\n          backgroundColor: 'none',\r\n          borderStyle: 'none',\r\n          height: ComboBoxOptionHeight,\r\n          lineHeight: ComboBoxOptionHeight,\r\n          cursor: 'default',\r\n          padding: '0 8px',\r\n          userSelect: 'none',\r\n          textAlign: 'left',\r\n          selectors: {\r\n            [HighContrastSelector]: {\r\n              color: 'GrayText',\r\n              ...getHighContrastNoAdjustStyle(),\r\n            },\r\n          },\r\n        },\r\n      ],\r\n\r\n      divider: {\r\n        height: 1,\r\n        backgroundColor: option.dividerBorderColor,\r\n      },\r\n    };\r\n\r\n    return concatStyleSets(styles, customStyles);\r\n  },\r\n);\r\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}