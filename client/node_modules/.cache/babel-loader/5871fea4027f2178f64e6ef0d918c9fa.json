{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, on, KeyCodes, getWindow, warnDeprecations, warn } from '../../../Utilities';\nimport { clamp } from '../../../utilities/color/clamp';\nimport { MAX_COLOR_HUE, MAX_COLOR_ALPHA } from '../../../utilities/color/consts';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory ColorPicker}\n */\nvar ColorSliderBase = /** @class */function (_super) {\n  __extends(ColorSliderBase, _super);\n  function ColorSliderBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._disposables = [];\n    _this._root = React.createRef();\n    _this._onKeyDown = function (ev) {\n      var currentValue = _this.value;\n      var maxValue = _this._maxValue;\n      var increment = ev.shiftKey ? 10 : 1;\n      // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n      // and getting all the math and styles flipped correctly is tricky\n      switch (ev.which) {\n        case KeyCodes.left:\n          {\n            currentValue -= increment;\n            break;\n          }\n        case KeyCodes.right:\n          {\n            currentValue += increment;\n            break;\n          }\n        case KeyCodes.home:\n          {\n            currentValue = 0;\n            break;\n          }\n        case KeyCodes.end:\n          {\n            currentValue = maxValue;\n            break;\n          }\n        default:\n          {\n            return;\n          }\n      }\n      _this._updateValue(ev, clamp(currentValue, maxValue));\n    };\n    _this._onMouseDown = function (ev) {\n      var win = getWindow(_this);\n      if (win) {\n        _this._disposables.push(on(win, 'mousemove', _this._onMouseMove, true), on(win, 'mouseup', _this._disposeListeners, true));\n      }\n      _this._onMouseMove(ev);\n    };\n    _this._onMouseMove = function (ev) {\n      if (!_this._root.current) {\n        return;\n      }\n      var maxValue = _this._maxValue;\n      var rectSize = _this._root.current.getBoundingClientRect();\n      var currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n      var newValue = clamp(Math.round(currentPercentage * maxValue), maxValue);\n      _this._updateValue(ev, newValue);\n    };\n    _this._disposeListeners = function () {\n      _this._disposables.forEach(function (dispose) {\n        return dispose();\n      });\n      _this._disposables = [];\n    };\n    initializeComponentRef(_this);\n    warnDeprecations('ColorSlider', props, {\n      thumbColor: 'styles.sliderThumb',\n      overlayStyle: 'overlayColor',\n      isAlpha: 'type',\n      maxValue: 'type',\n      minValue: 'type'\n    });\n    // eslint-disable-next-line deprecation/deprecation\n    if (_this._type !== 'hue' && !(props.overlayColor || props.overlayStyle)) {\n      warn(\"ColorSlider: 'overlayColor' is required when 'type' is \\\"alpha\\\" or \\\"transparency\\\"\");\n    }\n    _this.state = {\n      currentValue: props.value || 0\n    };\n    return _this;\n  }\n  Object.defineProperty(ColorSliderBase.prototype, \"value\", {\n    get: function () {\n      return this.state.currentValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ColorSliderBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.value !== undefined) {\n      this.setState({\n        currentValue: this.props.value\n      });\n    }\n  };\n  ColorSliderBase.prototype.componentWillUnmount = function () {\n    this._disposeListeners();\n  };\n  ColorSliderBase.prototype.render = function () {\n    var type = this._type;\n    var maxValue = this._maxValue;\n    var _a = this.props,\n      // eslint-disable-next-line deprecation/deprecation\n      overlayStyle = _a.overlayStyle,\n      overlayColor = _a.overlayColor,\n      theme = _a.theme,\n      className = _a.className,\n      styles = _a.styles,\n      _b = _a.ariaLabel,\n      ariaLabel = _b === void 0 ? type : _b;\n    var currentValue = this.value;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      type: type\n    });\n    var currentPercentage = 100 * currentValue / maxValue;\n    return React.createElement(\"div\", {\n      ref: this._root,\n      className: classNames.root,\n      tabIndex: 0,\n      onKeyDown: this._onKeyDown,\n      onMouseDown: this._onMouseDown,\n      role: \"slider\",\n      \"aria-valuenow\": currentValue,\n      \"aria-valuetext\": String(currentValue),\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": maxValue,\n      \"aria-label\": ariaLabel,\n      \"data-is-focusable\": true\n    }, !!(overlayColor || overlayStyle) && React.createElement(\"div\", {\n      className: classNames.sliderOverlay,\n      // this isn't included in getStyles because it may change frequently\n      style: overlayColor ? {\n        background: type === 'transparency' ? \"linear-gradient(to right, #\" + overlayColor + \", transparent)\" : \"linear-gradient(to right, transparent, #\" + overlayColor + \")\"\n      } : overlayStyle\n    }), React.createElement(\"div\", {\n      className: classNames.sliderThumb,\n      style: {\n        left: currentPercentage + '%'\n      }\n    }));\n  };\n  Object.defineProperty(ColorSliderBase.prototype, \"_type\", {\n    get: function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = this.props,\n        isAlpha = _a.isAlpha,\n        _b = _a.type,\n        type = _b === void 0 ? isAlpha ? 'alpha' : 'hue' : _b;\n      return type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorSliderBase.prototype, \"_maxValue\", {\n    get: function () {\n      return this._type === 'hue' ? MAX_COLOR_HUE : MAX_COLOR_ALPHA;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ColorSliderBase.prototype._updateValue = function (ev, newValue) {\n    if (newValue === this.value) {\n      return;\n    }\n    var onChange = this.props.onChange;\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n    if (!ev.defaultPrevented) {\n      this.setState({\n        currentValue: newValue\n      });\n      ev.preventDefault();\n    }\n  };\n  ColorSliderBase.defaultProps = {\n    value: 0\n  };\n  return ColorSliderBase;\n}(React.Component);\nexport { ColorSliderBase };","map":{"version":3,"sources":["components/ColorPicker/ColorSlider/ColorSlider.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  initializeComponentRef,\n  on,\n  KeyCodes,\n  getWindow,\n  warnDeprecations,\n  warn,\n} from '../../../Utilities';\nimport { IColorSliderProps, IColorSliderStyleProps, IColorSliderStyles, IColorSlider } from './ColorSlider.types';\nimport { clamp } from '../../../utilities/color/clamp';\nimport { MAX_COLOR_HUE, MAX_COLOR_ALPHA } from '../../../utilities/color/consts';\n\nconst getClassNames = classNamesFunction<IColorSliderStyleProps, IColorSliderStyles>();\n\nexport interface IColorSliderState {\n  currentValue: number;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorSliderBase extends React.Component<IColorSliderProps, IColorSliderState> implements IColorSlider {\n  public static defaultProps: Partial<IColorSliderProps> = {\n    value: 0,\n  };\n\n  private _disposables: (() => void)[] = [];\n  private _root = React.createRef<HTMLDivElement>();\n\n  constructor(props: IColorSliderProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    warnDeprecations('ColorSlider', props, {\n      thumbColor: 'styles.sliderThumb',\n      overlayStyle: 'overlayColor',\n      isAlpha: 'type',\n      maxValue: 'type',\n      minValue: 'type',\n    });\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._type !== 'hue' && !(props.overlayColor || props.overlayStyle)) {\n      warn(`ColorSlider: 'overlayColor' is required when 'type' is \"alpha\" or \"transparency\"`);\n    }\n\n    this.state = {\n      currentValue: props.value || 0,\n    };\n  }\n\n  public get value(): number {\n    return this.state.currentValue;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorSliderProps>, prevState: Readonly<IColorSliderState>): void {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.value !== undefined) {\n      this.setState({ currentValue: this.props.value });\n    }\n  }\n\n  public componentWillUnmount() {\n    this._disposeListeners();\n  }\n\n  public render(): JSX.Element {\n    const type = this._type;\n    const maxValue = this._maxValue;\n    const {\n      // eslint-disable-next-line deprecation/deprecation\n      overlayStyle,\n      overlayColor,\n      theme,\n      className,\n      styles,\n      ariaLabel = type,\n    } = this.props;\n    const currentValue = this.value;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      type,\n    });\n\n    const currentPercentage = (100 * currentValue) / maxValue;\n\n    return (\n      <div\n        ref={this._root}\n        className={classNames.root}\n        tabIndex={0}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        role=\"slider\"\n        aria-valuenow={currentValue}\n        // Narrator doesn't read aria-valuenow properly\n        aria-valuetext={String(currentValue)}\n        aria-valuemin={0}\n        aria-valuemax={maxValue}\n        aria-label={ariaLabel}\n        data-is-focusable={true}\n      >\n        {!!(overlayColor || overlayStyle) && (\n          <div\n            className={classNames.sliderOverlay}\n            // this isn't included in getStyles because it may change frequently\n            style={\n              overlayColor\n                ? {\n                    background:\n                      type === 'transparency'\n                        ? `linear-gradient(to right, #${overlayColor}, transparent)`\n                        : `linear-gradient(to right, transparent, #${overlayColor})`,\n                  }\n                : overlayStyle\n            }\n          />\n        )}\n        <div className={classNames.sliderThumb} style={{ left: currentPercentage + '%' }} />\n      </div>\n    );\n  }\n\n  private get _type(): IColorSliderProps['type'] {\n    // eslint-disable-next-line deprecation/deprecation\n    const { isAlpha, type = isAlpha ? 'alpha' : 'hue' } = this.props;\n    return type;\n  }\n\n  private get _maxValue(): number {\n    return this._type === 'hue' ? MAX_COLOR_HUE : MAX_COLOR_ALPHA;\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent): void => {\n    let currentValue = this.value;\n    const maxValue = this._maxValue;\n    const increment = ev.shiftKey ? 10 : 1;\n\n    // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n    // and getting all the math and styles flipped correctly is tricky\n    switch (ev.which) {\n      case KeyCodes.left: {\n        currentValue -= increment;\n        break;\n      }\n      case KeyCodes.right: {\n        currentValue += increment;\n        break;\n      }\n      case KeyCodes.home: {\n        currentValue = 0;\n        break;\n      }\n      case KeyCodes.end: {\n        currentValue = maxValue;\n        break;\n      }\n      default: {\n        return;\n      }\n    }\n\n    this._updateValue(ev, clamp(currentValue, maxValue));\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    const win = getWindow(this as any);\n\n    if (win) {\n      this._disposables.push(\n        on(win, 'mousemove', this._onMouseMove as (ev: MouseEvent) => void, true),\n        on(win, 'mouseup', this._disposeListeners, true),\n      );\n    }\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: MouseEvent | React.MouseEvent): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    const maxValue = this._maxValue;\n    const rectSize = this._root.current.getBoundingClientRect();\n\n    const currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    const newValue = clamp(Math.round(currentPercentage * maxValue), maxValue);\n\n    this._updateValue(ev, newValue);\n  };\n\n  private _disposeListeners = (): void => {\n    this._disposables.forEach(dispose => dispose());\n    this._disposables = [];\n  };\n\n  private _updateValue(ev: MouseEvent | KeyboardEvent | React.MouseEvent | React.KeyboardEvent, newValue: number) {\n    if (newValue === this.value) {\n      return;\n    }\n\n    const { onChange } = this.props;\n\n    if (onChange) {\n      onChange(ev as React.MouseEvent | React.KeyboardEvent, newValue);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({\n        currentValue: newValue,\n      });\n      ev.preventDefault();\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}