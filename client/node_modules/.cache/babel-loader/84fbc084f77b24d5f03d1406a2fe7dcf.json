{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __assign, __asyncDelegator, __asyncGenerator, __asyncValues, __await, __generator, __rest, __values } from \"tslib\";\n/// <reference lib=\"esnext.asynciterable\" />\nimport { bearerTokenAuthenticationPolicy, createPipelineFromOptions, generateUuid } from \"@azure/core-http\";\nimport { AzureDigitalTwinsAPI as GeneratedClient } from \"./generated/azureDigitalTwinsAPI\";\nimport { createSpan } from \"./tracing\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { logger } from \"./logger\";\nexport var SDK_VERSION = \"1.0.3\";\nvar DEFAULT_DIGITALTWINS_SCOPE = \"https://digitaltwins.azure.net/.default\";\n/**\n * Client for Azure IoT DigitalTwins API.\n */\nvar DigitalTwinsClient = /** @class */function () {\n  /**\n   * Creates an instance of AzureDigitalTwinsAPI.\n   *\n   * Example usage:\n   * ```ts\n   * const { DigitalTwinsClient, ServiceClientCredentials } = require(\"@azure/digital-twins-core\");\n   *\n   * const client = new DigitalTwinsClient(\n   *   \"<endpoint>\",\n   *   new DefaultAzureCredential();\n   * );\n   * ```\n   * @param endpointUrl The endpoint URL of the service.\n   * @param credential Used to authenticate requests to the service.\n   * @param options Used to configure the service client.\n   */\n  function DigitalTwinsClient(endpointUrl, credential, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var authPolicy = bearerTokenAuthenticationPolicy(credential, DEFAULT_DIGITALTWINS_SCOPE);\n    var libInfo = \"azsdk-js-digital-twins-core/\" + SDK_VERSION;\n    var apiVersion = options.apiVersion,\n      pipelineOptions = __rest(options, [\"apiVersion\"]);\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = pipelineOptions.userAgentOptions.userAgentPrefix + \" \" + libInfo;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n    var internalPipelineOptions = __assign(__assign({}, pipelineOptions), {\n      loggingOptions: {\n        logger: logger.info,\n        allowedHeaderNames: [\"x-ms-request-id\"]\n      }\n    });\n    var pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n    this.client = new GeneratedClient(__assign({\n      endpoint: endpointUrl,\n      apiVersion: apiVersion\n    }, pipeline));\n  }\n  /**\n   * Get a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param options The operation options\n   * @returns The application/json digital twin and the http response.\n   */\n  DigitalTwinsClient.prototype.getDigitalTwin = function (digitalTwinId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-getDigitalTwin\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.getById(digitalTwinId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Create or update a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin to create or update.\n   * @param digitalTwinJson The application/json digital twin to create.\n   * @param options Extended operation options including\n   *  ifNoneMatch: Only perform the operation if the entity does not already exist.\n   * @returns The created application/json digital twin and the http response.\n   */\n  DigitalTwinsClient.prototype.upsertDigitalTwin = function (digitalTwinId, digitalTwinJson, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-upsertDigitalTwin\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      var payload = JSON.parse(digitalTwinJson);\n      return this.client.digitalTwins.add(digitalTwinId, payload, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Update a digital twin using a json patch.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param jsonPatch An update specification described by JSON Patch. Updates to property values\n   * and $model elements may happen in the same request. Operations are limited to add, replace and\n   * remove.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  DigitalTwinsClient.prototype.updateDigitalTwin = function (digitalTwinId, jsonPatch, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-updateDigitalTwin\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.update(digitalTwinId, jsonPatch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Delete a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  DigitalTwinsClient.prototype.deleteDigitalTwin = function (digitalTwinId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-deleteDigitalTwin\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.delete(digitalTwinId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Get a component on a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param componentName The component being retrieved.\n   * @param options The operation options\n   * @returns Json string representation of the component corresponding to the provided componentName and the HTTP response.\n   */\n  DigitalTwinsClient.prototype.getComponent = function (digitalTwinId, componentName, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-getComponent\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.getComponent(digitalTwinId, componentName, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Update properties of a component on a digital twin using a JSON patch.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param componentName The component being updated.\n   * @param jsonPatch The application/json-patch+json operations to be performed on the specified digital twin's component.\n   * @param enableUpdate If true then update of an existing digital twin is enabled.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  DigitalTwinsClient.prototype.updateComponent = function (digitalTwinId, componentName, jsonPatch, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-updateComponent\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.updateComponent(digitalTwinId, componentName, jsonPatch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Get a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to retrieve.\n   * @param options The operation options\n   * @returns The pageable list of application/json relationships belonging to the specified digital twin and the http response.\n   */\n  DigitalTwinsClient.prototype.getRelationship = function (digitalTwinId, relationshipId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-getRelationship\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.getRelationshipById(digitalTwinId, relationshipId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Create or update a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to create.\n   * @param relationship: The application/json relationship to be created.\n   * @param options Extended operation options including\n   *  ifNoneMatch: Only perform the operation if the entity does not already exist.\n   */\n  DigitalTwinsClient.prototype.upsertRelationship = function (digitalTwinId, relationshipId, relationship, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-upsertRelationship\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.addRelationship(digitalTwinId, relationshipId, relationship, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Updates the properties of a relationship on a digital twin using a JSON patch.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param relationshipId The Id of the relationship to be updated.\n   * @param jsonPatch The application/json-patch+json operations to be performed on the specified digital twin's relationship.\n   * @param options Extended operation options\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   */\n  DigitalTwinsClient.prototype.updateRelationship = function (digitalTwinId, relationshipId, jsonPatch, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-updateRelationship\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.updateRelationship(digitalTwinId, relationshipId, jsonPatch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Delete a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to delete.\n   * @param options The operation options\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is\n   * @returns The http response.\n   */\n  DigitalTwinsClient.prototype.deleteRelationship = function (digitalTwinId, relationshipId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-deleteRelationship\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.deleteRelationship(digitalTwinId, relationshipId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * @internal\n   * Deals with the pagination of {@link listRelationships}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {DigitalTwinsListRelationshipsOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  DigitalTwinsClient.prototype.listRelationshipsPage = function (digitalTwinId, options, continuationState) {\n    return __asyncGenerator(this, arguments, function listRelationshipsPage_1() {\n      var optionsComplete, listRelationshipResponse, listRelationshipResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(continuationState.continuationToken == null)) return [3 /*break*/, 4];\n            optionsComplete = __assign({}, options);\n            return [4 /*yield*/, __await(this.client.digitalTwins.listRelationships(digitalTwinId, optionsComplete))];\n          case 1:\n            listRelationshipResponse = _a.sent();\n            continuationState.continuationToken = listRelationshipResponse.nextLink;\n            return [4 /*yield*/, __await(listRelationshipResponse)];\n          case 2:\n            return [4 /*yield*/, _a.sent()];\n          case 3:\n            _a.sent();\n            _a.label = 4;\n          case 4:\n            if (!continuationState.continuationToken) return [3 /*break*/, 8];\n            return [4 /*yield*/, __await(this.client.digitalTwins.listRelationshipsNext(\"\", continuationState.continuationToken, options))];\n          case 5:\n            listRelationshipResponse = _a.sent();\n            continuationState.continuationToken = listRelationshipResponse.nextLink;\n            return [4 /*yield*/, __await(listRelationshipResponse)];\n          case 6:\n            return [4 /*yield*/, _a.sent()];\n          case 7:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link listRelationships}.\n   * @param {DigitalTwinsListRelationshipsOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  DigitalTwinsClient.prototype.listRelationshipsAll = function (digitalTwinId, options) {\n    return __asyncGenerator(this, arguments, function listRelationshipsAll_1() {\n      var _a, _b, page, value, _i, value_1, item, e_1_1;\n      var e_1, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 9, 10, 15]);\n            _a = __asyncValues(this.listRelationshipsPage(digitalTwinId, options, {}));\n            _d.label = 1;\n          case 1:\n            return [4 /*yield*/, __await(_a.next())];\n          case 2:\n            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 8];\n            page = _b.value;\n            value = page.value || [];\n            _i = 0, value_1 = value;\n            _d.label = 3;\n          case 3:\n            if (!(_i < value_1.length)) return [3 /*break*/, 7];\n            item = value_1[_i];\n            return [4 /*yield*/, __await(item)];\n          case 4:\n            return [4 /*yield*/, _d.sent()];\n          case 5:\n            _d.sent();\n            _d.label = 6;\n          case 6:\n            _i++;\n            return [3 /*break*/, 3];\n          case 7:\n            return [3 /*break*/, 1];\n          case 8:\n            return [3 /*break*/, 15];\n          case 9:\n            e_1_1 = _d.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 15];\n          case 10:\n            _d.trys.push([10,, 13, 14]);\n            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 12];\n            return [4 /*yield*/, __await(_c.call(_a))];\n          case 11:\n            _d.sent();\n            _d.label = 12;\n          case 12:\n            return [3 /*break*/, 14];\n          case 13:\n            if (e_1) throw e_1.error;\n            return [7 /*endfinally*/];\n          case 14:\n            return [7 /*endfinally*/];\n          case 15:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieve relationships for a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   */\n  DigitalTwinsClient.prototype.listRelationships = function (digitalTwinId, options) {\n    var _a;\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var _b = createSpan(\"DigitalTwinsClient-listRelationships\", options),\n      span = _b.span,\n      updatedOptions = _b.updatedOptions;\n    try {\n      var iter_1 = this.listRelationshipsAll(digitalTwinId, updatedOptions);\n      return _a = {\n        next: function () {\n          return iter_1.next();\n        }\n      }, _a[Symbol.asyncIterator] = function () {\n        return this;\n      }, _a.byPage = function (settings) {\n        if (settings === void 0) {\n          settings = {};\n        }\n        return _this.listRelationshipsPage(digitalTwinId, updatedOptions, settings);\n      }, _a;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * @internal\n   * Deals with the pagination of {@link listIncomingRelationships}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   *\n   */\n  DigitalTwinsClient.prototype.listIncomingRelationshipsPage = function (digitalTwinId, options, continuationState) {\n    return __asyncGenerator(this, arguments, function listIncomingRelationshipsPage_1() {\n      var optionsComplete, listIncomingRelationshipsResponse, listIncomingRelationshipsResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(continuationState.continuationToken == null)) return [3 /*break*/, 4];\n            optionsComplete = __assign({}, options);\n            return [4 /*yield*/, __await(this.client.digitalTwins.listIncomingRelationships(digitalTwinId, optionsComplete))];\n          case 1:\n            listIncomingRelationshipsResponse = _a.sent();\n            continuationState.continuationToken = listIncomingRelationshipsResponse.nextLink;\n            return [4 /*yield*/, __await(listIncomingRelationshipsResponse)];\n          case 2:\n            return [4 /*yield*/, _a.sent()];\n          case 3:\n            _a.sent();\n            _a.label = 4;\n          case 4:\n            if (!continuationState.continuationToken) return [3 /*break*/, 8];\n            return [4 /*yield*/, __await(this.client.digitalTwins.listIncomingRelationshipsNext(\"\", continuationState.continuationToken, options))];\n          case 5:\n            listIncomingRelationshipsResponse = _a.sent();\n            continuationState.continuationToken = listIncomingRelationshipsResponse.nextLink;\n            return [4 /*yield*/, __await(listIncomingRelationshipsResponse)];\n          case 6:\n            return [4 /*yield*/, _a.sent()];\n          case 7:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link listIncomingRelationships}.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   */\n  DigitalTwinsClient.prototype.listIncomingRelationshipsAll = function (digitalTwinId, options) {\n    return __asyncGenerator(this, arguments, function listIncomingRelationshipsAll_1() {\n      var _a, _b, page, value, e_2_1;\n      var e_2, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 7, 8, 13]);\n            _a = __asyncValues(this.listIncomingRelationshipsPage(digitalTwinId, options, {}));\n            _d.label = 1;\n          case 1:\n            return [4 /*yield*/, __await(_a.next())];\n          case 2:\n            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];\n            page = _b.value;\n            value = page.value || [];\n            return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(value)))];\n          case 3:\n            return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];\n          case 4:\n            _d.sent();\n            _d.label = 5;\n          case 5:\n            return [3 /*break*/, 1];\n          case 6:\n            return [3 /*break*/, 13];\n          case 7:\n            e_2_1 = _d.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 13];\n          case 8:\n            _d.trys.push([8,, 11, 12]);\n            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];\n            return [4 /*yield*/, __await(_c.call(_a))];\n          case 9:\n            _d.sent();\n            _d.label = 10;\n          case 10:\n            return [3 /*break*/, 12];\n          case 11:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 12:\n            return [7 /*endfinally*/];\n          case 13:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieve all incoming relationships for a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   */\n  DigitalTwinsClient.prototype.listIncomingRelationships = function (digitalTwinId, options) {\n    var _a;\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var _b = createSpan(\"DigitalTwinsClient-listIncomingRelationships\", options),\n      span = _b.span,\n      updatedOptions = _b.updatedOptions;\n    try {\n      var iter_2 = this.listIncomingRelationshipsAll(digitalTwinId, updatedOptions);\n      return _a = {\n        next: function () {\n          return iter_2.next();\n        }\n      }, _a[Symbol.asyncIterator] = function () {\n        return this;\n      }, _a.byPage = function (settings) {\n        if (settings === void 0) {\n          settings = {};\n        }\n        return _this.listIncomingRelationshipsPage(digitalTwinId, updatedOptions, settings);\n      }, _a;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Publish telemetry from a digital twin, which is then consumed by one or many destination endpoints (subscribers) defined under.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param payload The application/json telemetry payload to be sent.\n   * @param messageId The message Id.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  DigitalTwinsClient.prototype.publishTelemetry = function (digitalTwinId, payload, messageId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var digitalTwinsSendTelemetryOptionalParams = options;\n    digitalTwinsSendTelemetryOptionalParams.telemetrySourceTime = new Date().toISOString();\n    if (!messageId) {\n      messageId = generateUuid();\n    }\n    var _a = createSpan(\"DigitalTwinsClient-publishTelemetry\", digitalTwinsSendTelemetryOptionalParams),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.sendTelemetry(digitalTwinId, payload, messageId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Publish telemetry from a digital twin's component, which is then consumed by one or many destination endpoints (subscribers) defined under.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param componentName The name of the DTDL component.\n   * @param payload The application/json telemetry payload to be sent.\n   * @param messageId The message Id.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  DigitalTwinsClient.prototype.publishComponentTelemetry = function (digitalTwinId, componentName, payload, messageId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var digitalTwinsSendComponentTelemetryOptionalParams = options;\n    digitalTwinsSendComponentTelemetryOptionalParams.telemetrySourceTime = new Date().toISOString();\n    if (!messageId) {\n      messageId = generateUuid();\n    }\n    var _a = createSpan(\"DigitalTwinsClient-publishComponentTelemetry\", digitalTwinsSendComponentTelemetryOptionalParams),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwins.sendComponentTelemetry(digitalTwinId, componentName, payload, messageId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Get a model, including the model metadata and the model definition.\n   *\n   * @param modelId The Id of the model.\n   * @param options Extended operation options including\n   *  includeModelDefinition: When true the model definition will be returned as part of the result. Default value: false.\n   * @returns The application/json model and the http response.\n   */\n  DigitalTwinsClient.prototype.getModel = function (modelId, includeModelDefinition, options) {\n    if (includeModelDefinition === void 0) {\n      includeModelDefinition = false;\n    }\n    if (options === void 0) {\n      options = {};\n    }\n    var digitalTwinModelsGetByIdOptionalParams = options;\n    digitalTwinModelsGetByIdOptionalParams.includeModelDefinition = includeModelDefinition;\n    var _a = createSpan(\"DigitalTwinsClient-getModel\", digitalTwinModelsGetByIdOptionalParams),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwinModels.getById(modelId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * @internal\n   * Deals with the pagination of {@link list}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {DigitalTwinModelsListOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  DigitalTwinsClient.prototype.getModelsPage = function (options, continuationState) {\n    return __asyncGenerator(this, arguments, function getModelsPage_1() {\n      var optionsComplete, listResponse, listResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(continuationState.continuationToken == null)) return [3 /*break*/, 4];\n            optionsComplete = options;\n            optionsComplete.maxItemsPerPage = continuationState.maxPageSize;\n            return [4 /*yield*/, __await(this.client.digitalTwinModels.list(optionsComplete))];\n          case 1:\n            listResponse = _a.sent();\n            continuationState.continuationToken = listResponse.nextLink;\n            return [4 /*yield*/, __await(listResponse)];\n          case 2:\n            return [4 /*yield*/, _a.sent()];\n          case 3:\n            _a.sent();\n            _a.label = 4;\n          case 4:\n            if (!continuationState.continuationToken) return [3 /*break*/, 8];\n            return [4 /*yield*/, __await(this.client.digitalTwinModels.listNext(continuationState.continuationToken, options))];\n          case 5:\n            listResponse = _a.sent();\n            continuationState.continuationToken = listResponse.nextLink;\n            return [4 /*yield*/, __await(listResponse)];\n          case 6:\n            return [4 /*yield*/, _a.sent()];\n          case 7:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link list}.\n   * @param {DigitalTwinModelsListOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  DigitalTwinsClient.prototype.getModelsAll = function (options) {\n    return __asyncGenerator(this, arguments, function getModelsAll_1() {\n      var f, _a, _b, page, value, _i, value_2, item, e_3_1;\n      var e_3, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            f = {};\n            _d.label = 1;\n          case 1:\n            _d.trys.push([1, 10, 11, 16]);\n            _a = __asyncValues(this.getModelsPage(options, f));\n            _d.label = 2;\n          case 2:\n            return [4 /*yield*/, __await(_a.next())];\n          case 3:\n            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 9];\n            page = _b.value;\n            value = page.value || [];\n            _i = 0, value_2 = value;\n            _d.label = 4;\n          case 4:\n            if (!(_i < value_2.length)) return [3 /*break*/, 8];\n            item = value_2[_i];\n            return [4 /*yield*/, __await(item)];\n          case 5:\n            return [4 /*yield*/, _d.sent()];\n          case 6:\n            _d.sent();\n            _d.label = 7;\n          case 7:\n            _i++;\n            return [3 /*break*/, 4];\n          case 8:\n            return [3 /*break*/, 2];\n          case 9:\n            return [3 /*break*/, 16];\n          case 10:\n            e_3_1 = _d.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 16];\n          case 11:\n            _d.trys.push([11,, 14, 15]);\n            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 13];\n            return [4 /*yield*/, __await(_c.call(_a))];\n          case 12:\n            _d.sent();\n            _d.label = 13;\n          case 13:\n            return [3 /*break*/, 15];\n          case 14:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 15:\n            return [7 /*endfinally*/];\n          case 16:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Get the list of models\n   *\n   * @param dependeciesFor The model Ids to have dependencies retrieved. If omitted, all models are retrieved.\n   * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than the requested max.\n   * @returns A pageable set of application/json models and the http response.\n   */\n  DigitalTwinsClient.prototype.listModels = function (dependeciesFor, includeModelDefinition, resultsPerPage, options) {\n    var _a;\n    var _this = this;\n    if (includeModelDefinition === void 0) {\n      includeModelDefinition = false;\n    }\n    if (options === void 0) {\n      options = {};\n    }\n    var digitalTwinModelsListOptionalParams = options;\n    digitalTwinModelsListOptionalParams = {\n      maxItemsPerPage: resultsPerPage,\n      dependenciesFor: dependeciesFor,\n      includeModelDefinition: includeModelDefinition\n    };\n    var _b = createSpan(\"DigitalTwinsClient-listModels\", digitalTwinModelsListOptionalParams),\n      span = _b.span,\n      updatedOptions = _b.updatedOptions;\n    try {\n      var iter_3 = this.getModelsAll(updatedOptions);\n      return _a = {\n        next: function () {\n          return iter_3.next();\n        }\n      }, _a[Symbol.asyncIterator] = function () {\n        return this;\n      }, _a.byPage = function (settings) {\n        if (settings === void 0) {\n          settings = {};\n        }\n        return _this.getModelsPage(digitalTwinModelsListOptionalParams, settings);\n      }, _a;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Create one or many\n   *\n   * @param models The set of models to create. Each string corresponds to exactly one model.\n   * @param options The operation options\n   * @returns The created application/json models and the http response.\n   */\n  DigitalTwinsClient.prototype.createModels = function (dtdlModels, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var digitalTwinModelsAddOptionalParams = options;\n    digitalTwinModelsAddOptionalParams.models = dtdlModels;\n    var _a = createSpan(\"DigitalTwinsClient-createModels\", digitalTwinModelsAddOptionalParams),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwinModels.add(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Decommission a model using a json patch.\n   *\n   * @param modelId The Id of the model to decommission.\n   * property can be replaced.\n   * @param options The operation options\n   * @returns The http response.\n   * @summary When a model is decomissioned, new digital twins will no longer be able to be\n   * defined by this model. However, existing digital twins may continue to use this model.\n   * Once a model is decomissioned, it may not be recommissioned.\n   */\n  DigitalTwinsClient.prototype.decomissionModel = function (modelId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var jsonPatch = [{\n      op: \"replace\",\n      path: \"/decommissioned\",\n      value: true\n    }];\n    var _a = createSpan(\"DigitalTwinsClient-decomissionModel\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwinModels.update(modelId, jsonPatch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Delete a model.\n   *\n   * @param modelId The Id of the model to delete.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  DigitalTwinsClient.prototype.deleteModel = function (modelId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-deleteModel\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.digitalTwinModels.delete(modelId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Get an event route.\n   *\n   * @param modelId The Id of the event route.\n   * @param options The operation options\n   * @returns The application/json event route and the http response.\n   */\n  DigitalTwinsClient.prototype.getEventRoute = function (eventRouteId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-getEventRoute\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.eventRoutes.getById(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * @internal\n   * Deals with the pagination of {@link list}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {EventRoutesListOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  DigitalTwinsClient.prototype.getEventRoutesPage = function (options, continuationState) {\n    return __asyncGenerator(this, arguments, function getEventRoutesPage_1() {\n      var optionsComplete, listResponse, listResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(continuationState.continuationToken == null)) return [3 /*break*/, 4];\n            optionsComplete = options;\n            optionsComplete.maxItemsPerPage = continuationState.maxPageSize;\n            return [4 /*yield*/, __await(this.client.eventRoutes.list(optionsComplete))];\n          case 1:\n            listResponse = _a.sent();\n            continuationState.continuationToken = listResponse.nextLink;\n            return [4 /*yield*/, __await(listResponse)];\n          case 2:\n            return [4 /*yield*/, _a.sent()];\n          case 3:\n            _a.sent();\n            _a.label = 4;\n          case 4:\n            if (!continuationState.continuationToken) return [3 /*break*/, 8];\n            return [4 /*yield*/, __await(this.client.eventRoutes.listNext(continuationState.continuationToken, options))];\n          case 5:\n            listResponse = _a.sent();\n            continuationState.continuationToken = listResponse.nextLink;\n            return [4 /*yield*/, __await(listResponse)];\n          case 6:\n            return [4 /*yield*/, _a.sent()];\n          case 7:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link list}.\n   * @param {EventRoutesListOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  DigitalTwinsClient.prototype.getEventRoutesAll = function (options) {\n    return __asyncGenerator(this, arguments, function getEventRoutesAll_1() {\n      var f, _a, _b, page, value, _i, value_3, item, e_4_1;\n      var e_4, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            f = {};\n            _d.label = 1;\n          case 1:\n            _d.trys.push([1, 10, 11, 16]);\n            _a = __asyncValues(this.getEventRoutesPage(options, f));\n            _d.label = 2;\n          case 2:\n            return [4 /*yield*/, __await(_a.next())];\n          case 3:\n            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 9];\n            page = _b.value;\n            value = page.value || [];\n            _i = 0, value_3 = value;\n            _d.label = 4;\n          case 4:\n            if (!(_i < value_3.length)) return [3 /*break*/, 8];\n            item = value_3[_i];\n            return [4 /*yield*/, __await(item)];\n          case 5:\n            return [4 /*yield*/, _d.sent()];\n          case 6:\n            _d.sent();\n            _d.label = 7;\n          case 7:\n            _i++;\n            return [3 /*break*/, 4];\n          case 8:\n            return [3 /*break*/, 2];\n          case 9:\n            return [3 /*break*/, 16];\n          case 10:\n            e_4_1 = _d.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 16];\n          case 11:\n            _d.trys.push([11,, 14, 15]);\n            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 13];\n            return [4 /*yield*/, __await(_c.call(_a))];\n          case 12:\n            _d.sent();\n            _d.label = 13;\n          case 13:\n            return [3 /*break*/, 15];\n          case 14:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 15:\n            return [7 /*endfinally*/];\n          case 16:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * List the event routes in a digital twins instance.\n   *\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than\n   * the requested max.\n   * @returns The application/json event route and the http response.\n   */\n  DigitalTwinsClient.prototype.listEventRoutes = function (resultsPerPage, options) {\n    var _a;\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var eventRoutesListOptionalParams = options;\n    eventRoutesListOptionalParams = {\n      maxItemsPerPage: resultsPerPage\n    };\n    var _b = createSpan(\"DigitalTwinsClient-listEventRoutes\", eventRoutesListOptionalParams),\n      span = _b.span,\n      updatedOptions = _b.updatedOptions;\n    try {\n      var iter_4 = this.getEventRoutesAll(updatedOptions);\n      return _a = {\n        next: function () {\n          return iter_4.next();\n        }\n      }, _a[Symbol.asyncIterator] = function () {\n        return this;\n      }, _a.byPage = function (settings) {\n        if (settings === void 0) {\n          settings = {};\n        }\n        return _this.getEventRoutesPage(eventRoutesListOptionalParams, settings);\n      }, _a;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Create or update an event route.\n   *\n   * @param eventRouteId The Id of the event route to create or update.\n   * @param endpointId The id of the endpoint this event route is bound to.\n   * @param filter An expression which describes the events which are routed to the endpoint.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  DigitalTwinsClient.prototype.upsertEventRoute = function (eventRouteId, endpointId, filter, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var eventRoutesAddOptionalParams = options;\n    var eventRoute = {\n      endpointName: endpointId,\n      filter: filter\n    };\n    eventRoutesAddOptionalParams.eventRoute = eventRoute;\n    var _a = createSpan(\"DigitalTwinsClient-upsertEventRoute\", eventRoutesAddOptionalParams),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.eventRoutes.add(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * Delete an event route.\n   *\n   * @param eventRouteId The Id of the eventRoute to delete.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  DigitalTwinsClient.prototype.deleteEventRoute = function (eventRouteId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = createSpan(\"DigitalTwinsClient-deleteEventRoute\", options),\n      span = _a.span,\n      updatedOptions = _a.updatedOptions;\n    try {\n      return this.client.eventRoutes.delete(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  /**\n   * @internal\n   * Deals with the pagination of {@link query}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   *\n   */\n  DigitalTwinsClient.prototype.queryTwinsPage = function (query, options, continuationState) {\n    return __asyncGenerator(this, arguments, function queryTwinsPage_1() {\n      var querySpecification, queryResult, querySpecification, queryResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(continuationState.continuationToken == null)) return [3 /*break*/, 4];\n            querySpecification = {\n              query: query,\n              continuationToken: continuationState.continuationToken\n            };\n            return [4 /*yield*/, __await(this.client.query.queryTwins(querySpecification, options))];\n          case 1:\n            queryResult = _a.sent();\n            continuationState.continuationToken = queryResult.continuationToken;\n            return [4 /*yield*/, __await(queryResult)];\n          case 2:\n            return [4 /*yield*/, _a.sent()];\n          case 3:\n            _a.sent();\n            _a.label = 4;\n          case 4:\n            if (!continuationState.continuationToken) return [3 /*break*/, 8];\n            querySpecification = {\n              query: query,\n              continuationToken: continuationState.continuationToken\n            };\n            return [4 /*yield*/, __await(this.client.query.queryTwins(querySpecification, options))];\n          case 5:\n            queryResult = _a.sent();\n            continuationState.continuationToken = queryResult.continuationToken;\n            return [4 /*yield*/, __await(queryResult)];\n          case 6:\n            return [4 /*yield*/, _a.sent()];\n          case 7:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link query}.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   */\n  DigitalTwinsClient.prototype.queryTwinsAll = function (query, options) {\n    return __asyncGenerator(this, arguments, function queryTwinsAll_1() {\n      var f, _a, _b, page, _i, _c, item, e_5_1;\n      var e_5, _d;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            f = {};\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 10, 11, 16]);\n            _a = __asyncValues(this.queryTwinsPage(query, options, f));\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, __await(_a.next())];\n          case 3:\n            if (!(_b = _e.sent(), !_b.done)) return [3 /*break*/, 9];\n            page = _b.value;\n            if (!page.value) return [3 /*break*/, 8];\n            _i = 0, _c = page.value;\n            _e.label = 4;\n          case 4:\n            if (!(_i < _c.length)) return [3 /*break*/, 8];\n            item = _c[_i];\n            return [4 /*yield*/, __await(item)];\n          case 5:\n            return [4 /*yield*/, _e.sent()];\n          case 6:\n            _e.sent();\n            _e.label = 7;\n          case 7:\n            _i++;\n            return [3 /*break*/, 4];\n          case 8:\n            return [3 /*break*/, 2];\n          case 9:\n            return [3 /*break*/, 16];\n          case 10:\n            e_5_1 = _e.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3 /*break*/, 16];\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n            if (!(_b && !_b.done && (_d = _a.return))) return [3 /*break*/, 13];\n            return [4 /*yield*/, __await(_d.call(_a))];\n          case 12:\n            _e.sent();\n            _e.label = 13;\n          case 13:\n            return [3 /*break*/, 15];\n          case 14:\n            if (e_5) throw e_5.error;\n            return [7 /*endfinally*/];\n          case 15:\n            return [7 /*endfinally*/];\n          case 16:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Query for digital twins.\n   *\n   * @param query The query string, in SQL-like syntax.\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than the requested max.\n   * @returns The pageable list of query results.\n   */\n  DigitalTwinsClient.prototype.queryTwins = function (query, resultsPerPage, options) {\n    var _a;\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var queryQueryTwinsOptionalParams = options;\n    queryQueryTwinsOptionalParams = {\n      maxItemsPerPage: resultsPerPage\n    };\n    var _b = createSpan(\"DigitalTwinsClient-queryTwins\", queryQueryTwinsOptionalParams),\n      span = _b.span,\n      updatedOptions = _b.updatedOptions;\n    try {\n      var iter_5 = this.queryTwinsAll(query, updatedOptions);\n      return _a = {\n        next: function () {\n          return iter_5.next();\n        }\n      }, _a[Symbol.asyncIterator] = function () {\n        return this;\n      }, _a.byPage = function (settings) {\n        if (settings === void 0) {\n          settings = {};\n        }\n        return _this.queryTwinsPage(query, queryQueryTwinsOptionalParams, settings);\n      }, _a;\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  };\n  return DigitalTwinsClient;\n}();\nexport { DigitalTwinsClient };","map":{"version":3,"sources":["../../src/digitalTwinsClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  TokenCredential,\n  RestResponse,\n  OperationOptions,\n  InternalPipelineOptions,\n  bearerTokenAuthenticationPolicy,\n  createPipelineFromOptions,\n  generateUuid,\n  PipelineOptions\n} from \"@azure/core-http\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { AzureDigitalTwinsAPI as GeneratedClient } from \"./generated/azureDigitalTwinsAPI\";\nimport {\n  DigitalTwinsGetByIdResponse,\n  DigitalTwinsAddOptionalParams,\n  DigitalTwinsAddResponse,\n  DigitalTwinsUpdateOptionalParams,\n  DigitalTwinsUpdateResponse,\n  DigitalTwinsDeleteOptionalParams,\n  DigitalTwinsGetComponentResponse,\n  DigitalTwinsUpdateComponentResponse,\n  DigitalTwinsUpdateComponentOptionalParams,\n  DigitalTwinsAddRelationshipResponse,\n  DigitalTwinsAddRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipResponse,\n  DigitalTwinsDeleteRelationshipOptionalParams,\n  DigitalTwinsSendTelemetryOptionalParams,\n  DigitalTwinsSendComponentTelemetryOptionalParams,\n  DigitalTwinsListRelationshipsResponse,\n  IncomingRelationship,\n  DigitalTwinsListIncomingRelationshipsResponse,\n  DigitalTwinsGetRelationshipByIdResponse,\n  DigitalTwinsModelData,\n  DigitalTwinModelsGetByIdResponse,\n  DigitalTwinModelsGetByIdOptionalParams,\n  DigitalTwinModelsAddResponse,\n  DigitalTwinModelsAddOptionalParams,\n  DigitalTwinModelsListResponse,\n  DigitalTwinModelsListOptionalParams,\n  EventRoutesGetByIdResponse,\n  EventRoute,\n  EventRoutesAddOptionalParams,\n  EventRoutesListNextResponse,\n  EventRoutesListOptionalParams,\n  QueryQueryTwinsOptionalParams,\n  QueryQueryTwinsResponse,\n  QuerySpecification\n} from \"./generated/models\";\nimport { createSpan } from \"./tracing\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { logger } from \"./logger\";\n\nexport const SDK_VERSION: string = \"1.0.3\";\n\nexport interface DigitalTwinsClientOptions extends PipelineOptions {\n  /**\n   * Api Version\n   */\n  apiVersion?: string;\n}\n\nconst DEFAULT_DIGITALTWINS_SCOPE = \"https://digitaltwins.azure.net/.default\";\n\n/**\n * Client for Azure IoT DigitalTwins API.\n */\nexport class DigitalTwinsClient {\n  /**\n   * @internal\n   * A reference to the auto-generated AzureDigitalTwinsAPI\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of AzureDigitalTwinsAPI.\n   *\n   * Example usage:\n   * ```ts\n   * const { DigitalTwinsClient, ServiceClientCredentials } = require(\"@azure/digital-twins-core\");\n   *\n   * const client = new DigitalTwinsClient(\n   *   \"<endpoint>\",\n   *   new DefaultAzureCredential();\n   * );\n   * ```\n   * @param endpointUrl The endpoint URL of the service.\n   * @param credential Used to authenticate requests to the service.\n   * @param options Used to configure the service client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential,\n    options: DigitalTwinsClientOptions = {}\n  ) {\n    const authPolicy = bearerTokenAuthenticationPolicy(credential, DEFAULT_DIGITALTWINS_SCOPE);\n    const libInfo = `azsdk-js-digital-twins-core/${SDK_VERSION}`;\n\n    const { apiVersion, ...pipelineOptions } = options;\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\"x-ms-request-id\"]\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n\n    this.client = new GeneratedClient({\n      endpoint: endpointUrl,\n      apiVersion,\n      ...pipeline\n    });\n  }\n\n  /**\n   * Get a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param options The operation options\n   * @returns The application/json digital twin and the http response.\n   */\n  public getDigitalTwin(\n    digitalTwinId: string,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinsGetByIdResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getDigitalTwin\", options);\n    try {\n      return this.client.digitalTwins.getById(digitalTwinId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create or update a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin to create or update.\n   * @param digitalTwinJson The application/json digital twin to create.\n   * @param options Extended operation options including\n   *  ifNoneMatch: Only perform the operation if the entity does not already exist.\n   * @returns The created application/json digital twin and the http response.\n   */\n  public upsertDigitalTwin(\n    digitalTwinId: string,\n    digitalTwinJson: string,\n    options: DigitalTwinsAddOptionalParams = {}\n  ): Promise<DigitalTwinsAddResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-upsertDigitalTwin\", options);\n    try {\n      const payload = JSON.parse(digitalTwinJson);\n      return this.client.digitalTwins.add(digitalTwinId, payload, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update a digital twin using a json patch.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param jsonPatch An update specification described by JSON Patch. Updates to property values\n   * and $model elements may happen in the same request. Operations are limited to add, replace and\n   * remove.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  public updateDigitalTwin(\n    digitalTwinId: string,\n    jsonPatch: any,\n    options: DigitalTwinsUpdateOptionalParams = {}\n  ): Promise<DigitalTwinsUpdateResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-updateDigitalTwin\", options);\n    try {\n      return this.client.digitalTwins.update(digitalTwinId, jsonPatch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete a digital twin\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  public deleteDigitalTwin(\n    digitalTwinId: string,\n    options: DigitalTwinsDeleteOptionalParams = {}\n  ): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteDigitalTwin\", options);\n    try {\n      return this.client.digitalTwins.delete(digitalTwinId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a component on a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param componentName The component being retrieved.\n   * @param options The operation options\n   * @returns Json string representation of the component corresponding to the provided componentName and the HTTP response.\n   */\n  public getComponent(\n    digitalTwinId: string,\n    componentName: string,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinsGetComponentResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getComponent\", options);\n    try {\n      return this.client.digitalTwins.getComponent(digitalTwinId, componentName, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Update properties of a component on a digital twin using a JSON patch.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   * @param componentName The component being updated.\n   * @param jsonPatch The application/json-patch+json operations to be performed on the specified digital twin's component.\n   * @param enableUpdate If true then update of an existing digital twin is enabled.\n   * @param options Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   * @returns The http response.\n   */\n  public updateComponent(\n    digitalTwinId: string,\n    componentName: string,\n    jsonPatch: any[],\n    options: DigitalTwinsUpdateComponentOptionalParams = {}\n  ): Promise<DigitalTwinsUpdateComponentResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-updateComponent\", options);\n    try {\n      return this.client.digitalTwins.updateComponent(\n        digitalTwinId,\n        componentName,\n        jsonPatch,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to retrieve.\n   * @param options The operation options\n   * @returns The pageable list of application/json relationships belonging to the specified digital twin and the http response.\n   */\n  public getRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinsGetRelationshipByIdResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getRelationship\", options);\n    try {\n      return this.client.digitalTwins.getRelationshipById(\n        digitalTwinId,\n        relationshipId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create or update a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to create.\n   * @param relationship: The application/json relationship to be created.\n   * @param options Extended operation options including\n   *  ifNoneMatch: Only perform the operation if the entity does not already exist.\n   */\n  public upsertRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    relationship: any,\n    options: DigitalTwinsAddRelationshipOptionalParams = {}\n  ): Promise<DigitalTwinsAddRelationshipResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-upsertRelationship\", options);\n    try {\n      return this.client.digitalTwins.addRelationship(\n        digitalTwinId,\n        relationshipId,\n        relationship,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates the properties of a relationship on a digital twin using a JSON patch.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param relationshipId The Id of the relationship to be updated.\n   * @param jsonPatch The application/json-patch+json operations to be performed on the specified digital twin's relationship.\n   * @param options Extended operation options\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   */\n  public updateRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    jsonPatch: any[],\n    options: DigitalTwinsUpdateRelationshipOptionalParams = {}\n  ): Promise<DigitalTwinsUpdateRelationshipResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-updateRelationship\", options);\n    try {\n      return this.client.digitalTwins.updateRelationship(\n        digitalTwinId,\n        relationshipId,\n        jsonPatch,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete a relationship on a digital twin.\n   *\n   * @param digitalTwinId The Id of the source digital twin.\n   * @param relationshipId The Id of the relationship to delete.\n   * @param options The operation options\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is\n   * @returns The http response.\n   */\n  public deleteRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    options: DigitalTwinsDeleteRelationshipOptionalParams = {}\n  ): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteRelationship\", options);\n    try {\n      return this.client.digitalTwins.deleteRelationship(\n        digitalTwinId,\n        relationshipId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link listRelationships}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {DigitalTwinsListRelationshipsOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *listRelationshipsPage(\n    digitalTwinId: string,\n    options: OperationOptions,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<DigitalTwinsListRelationshipsResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: OperationOptions = {\n        ...options\n      };\n      const listRelationshipResponse = await this.client.digitalTwins.listRelationships(\n        digitalTwinId,\n        optionsComplete\n      );\n      continuationState.continuationToken = listRelationshipResponse.nextLink;\n      yield listRelationshipResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listRelationshipResponse = await this.client.digitalTwins.listRelationshipsNext(\n        \"\",\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listRelationshipResponse.nextLink;\n      yield listRelationshipResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link listRelationships}.\n   * @param {DigitalTwinsListRelationshipsOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  private async *listRelationshipsAll(\n    digitalTwinId: string,\n    options: OperationOptions\n  ): AsyncIterableIterator<any> {\n    for await (const page of this.listRelationshipsPage(digitalTwinId, options, {})) {\n      const value = page.value || [];\n      for (const item of value) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Retrieve relationships for a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   */\n  public listRelationships(\n    digitalTwinId: string,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<any, DigitalTwinsListRelationshipsResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-listRelationships\", options);\n    try {\n      const iter = this.listRelationshipsAll(digitalTwinId, updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.listRelationshipsPage(digitalTwinId, updatedOptions, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link listIncomingRelationships}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *listIncomingRelationshipsPage(\n    digitalTwinId: string,\n    options: OperationOptions,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<DigitalTwinsListIncomingRelationshipsResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: OperationOptions = {\n        ...options\n      };\n      const listIncomingRelationshipsResponse = await this.client.digitalTwins.listIncomingRelationships(\n        digitalTwinId,\n        optionsComplete\n      );\n      continuationState.continuationToken = listIncomingRelationshipsResponse.nextLink;\n      yield listIncomingRelationshipsResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listIncomingRelationshipsResponse = await this.client.digitalTwins.listIncomingRelationshipsNext(\n        \"\",\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listIncomingRelationshipsResponse.nextLink;\n      yield listIncomingRelationshipsResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link listIncomingRelationships}.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *listIncomingRelationshipsAll(\n    digitalTwinId: string,\n    options: OperationOptions\n  ): AsyncIterableIterator<IncomingRelationship> {\n    for await (const page of this.listIncomingRelationshipsPage(digitalTwinId, options, {})) {\n      const value = page.value || [];\n      yield* value;\n    }\n  }\n\n  /**\n   * Retrieve all incoming relationships for a digital twin.\n   *\n   * @param digitalTwinId The Id of the digital twin.\n   */\n  public listIncomingRelationships(\n    digitalTwinId: string,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<\n    IncomingRelationship,\n    DigitalTwinsListIncomingRelationshipsResponse\n  > {\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-listIncomingRelationships\",\n      options\n    );\n    try {\n      const iter = this.listIncomingRelationshipsAll(digitalTwinId, updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.listIncomingRelationshipsPage(digitalTwinId, updatedOptions, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Publish telemetry from a digital twin, which is then consumed by one or many destination endpoints (subscribers) defined under.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param payload The application/json telemetry payload to be sent.\n   * @param messageId The message Id.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public publishTelemetry(\n    digitalTwinId: string,\n    payload: any,\n    messageId: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const digitalTwinsSendTelemetryOptionalParams: DigitalTwinsSendTelemetryOptionalParams = options;\n    digitalTwinsSendTelemetryOptionalParams.telemetrySourceTime = new Date().toISOString();\n    if (!messageId) {\n      messageId = generateUuid();\n    }\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-publishTelemetry\",\n      digitalTwinsSendTelemetryOptionalParams\n    );\n    try {\n      return this.client.digitalTwins.sendTelemetry(\n        digitalTwinId,\n        payload,\n        messageId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Publish telemetry from a digital twin's component, which is then consumed by one or many destination endpoints (subscribers) defined under.\n   *\n   * @param digitalTwinId The Id of the digital twin to delete.\n   * @param componentName The name of the DTDL component.\n   * @param payload The application/json telemetry payload to be sent.\n   * @param messageId The message Id.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public publishComponentTelemetry(\n    digitalTwinId: string,\n    componentName: string,\n    payload: string,\n    messageId: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const digitalTwinsSendComponentTelemetryOptionalParams: DigitalTwinsSendComponentTelemetryOptionalParams = options;\n    digitalTwinsSendComponentTelemetryOptionalParams.telemetrySourceTime = new Date().toISOString();\n    if (!messageId) {\n      messageId = generateUuid();\n    }\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-publishComponentTelemetry\",\n      digitalTwinsSendComponentTelemetryOptionalParams\n    );\n    try {\n      return this.client.digitalTwins.sendComponentTelemetry(\n        digitalTwinId,\n        componentName,\n        payload,\n        messageId,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get a model, including the model metadata and the model definition.\n   *\n   * @param modelId The Id of the model.\n   * @param options Extended operation options including\n   *  includeModelDefinition: When true the model definition will be returned as part of the result. Default value: false.\n   * @returns The application/json model and the http response.\n   */\n  public getModel(\n    modelId: string,\n    includeModelDefinition: boolean = false,\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinModelsGetByIdResponse> {\n    const digitalTwinModelsGetByIdOptionalParams: DigitalTwinModelsGetByIdOptionalParams = options;\n    digitalTwinModelsGetByIdOptionalParams.includeModelDefinition = includeModelDefinition;\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-getModel\",\n      digitalTwinModelsGetByIdOptionalParams\n    );\n    try {\n      return this.client.digitalTwinModels.getById(modelId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link list}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {DigitalTwinModelsListOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *getModelsPage(\n    options: DigitalTwinModelsListOptionalParams,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<DigitalTwinModelsListResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: DigitalTwinModelsListOptionalParams = options;\n      optionsComplete.maxItemsPerPage = continuationState.maxPageSize;\n\n      const listResponse = await this.client.digitalTwinModels.list(optionsComplete);\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listResponse = await this.client.digitalTwinModels.listNext(\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link list}.\n   * @param {DigitalTwinModelsListOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  private async *getModelsAll(\n    options: DigitalTwinModelsListOptionalParams\n  ): AsyncIterableIterator<DigitalTwinsModelData> {\n    const f = {};\n\n    for await (const page of this.getModelsPage(options, f)) {\n      const value = page.value || [];\n      for (const item of value) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Get the list of models\n   *\n   * @param dependeciesFor The model Ids to have dependencies retrieved. If omitted, all models are retrieved.\n   * @param includeModelDefinition Whether to include the model definition in the result. If false, only the model metadata will be returned.\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than the requested max.\n   * @returns A pageable set of application/json models and the http response.\n   */\n  public listModels(\n    dependeciesFor?: string[],\n    includeModelDefinition: boolean = false,\n    resultsPerPage?: number,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<DigitalTwinsModelData, DigitalTwinModelsListResponse> {\n    var digitalTwinModelsListOptionalParams: DigitalTwinModelsListOptionalParams = options;\n    digitalTwinModelsListOptionalParams = {\n      maxItemsPerPage: resultsPerPage,\n      dependenciesFor: dependeciesFor,\n      includeModelDefinition: includeModelDefinition\n    };\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-listModels\",\n      digitalTwinModelsListOptionalParams\n    );\n    try {\n      const iter = this.getModelsAll(updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.getModelsPage(digitalTwinModelsListOptionalParams, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create one or many\n   *\n   * @param models The set of models to create. Each string corresponds to exactly one model.\n   * @param options The operation options\n   * @returns The created application/json models and the http response.\n   */\n  public createModels(\n    dtdlModels: any[],\n    options: OperationOptions = {}\n  ): Promise<DigitalTwinModelsAddResponse> {\n    const digitalTwinModelsAddOptionalParams: DigitalTwinModelsAddOptionalParams = options;\n    digitalTwinModelsAddOptionalParams.models = dtdlModels;\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-createModels\",\n      digitalTwinModelsAddOptionalParams\n    );\n    try {\n      return this.client.digitalTwinModels.add(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Decommission a model using a json patch.\n   *\n   * @param modelId The Id of the model to decommission.\n   * property can be replaced.\n   * @param options The operation options\n   * @returns The http response.\n   * @summary When a model is decomissioned, new digital twins will no longer be able to be\n   * defined by this model. However, existing digital twins may continue to use this model.\n   * Once a model is decomissioned, it may not be recommissioned.\n   */\n  public decomissionModel(modelId: string, options: OperationOptions = {}): Promise<RestResponse> {\n    const jsonPatch = [{ op: \"replace\", path: \"/decommissioned\", value: true }];\n\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-decomissionModel\", options);\n    try {\n      return this.client.digitalTwinModels.update(modelId, jsonPatch, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete a model.\n   *\n   * @param modelId The Id of the model to delete.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public deleteModel(modelId: string, options: OperationOptions = {}): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteModel\", options);\n    try {\n      return this.client.digitalTwinModels.delete(modelId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get an event route.\n   *\n   * @param modelId The Id of the event route.\n   * @param options The operation options\n   * @returns The application/json event route and the http response.\n   */\n  public getEventRoute(\n    eventRouteId: string,\n    options: OperationOptions = {}\n  ): Promise<EventRoutesGetByIdResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-getEventRoute\", options);\n    try {\n      return this.client.eventRoutes.getById(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link list}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {EventRoutesListOptionalParams} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *getEventRoutesPage(\n    options: EventRoutesListOptionalParams,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<EventRoutesListNextResponse> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: EventRoutesListOptionalParams = options;\n      optionsComplete.maxItemsPerPage = continuationState.maxPageSize;\n\n      const listResponse = await this.client.eventRoutes.list(optionsComplete);\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n    while (continuationState.continuationToken) {\n      const listResponse = await this.client.eventRoutes.listNext(\n        continuationState.continuationToken,\n        options\n      );\n\n      continuationState.continuationToken = listResponse.nextLink;\n      yield listResponse;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link list}.\n   * @param {EventRoutesListOptionalParams} [options] Common options for the iterative endpoints.\n   */\n  private async *getEventRoutesAll(\n    options: EventRoutesListOptionalParams\n  ): AsyncIterableIterator<EventRoute> {\n    const f = {};\n    for await (const page of this.getEventRoutesPage(options, f)) {\n      const value = page.value || [];\n      for (const item of value) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * List the event routes in a digital twins instance.\n   *\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than\n   * the requested max.\n   * @returns The application/json event route and the http response.\n   */\n  public listEventRoutes(\n    resultsPerPage?: number,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<EventRoute, EventRoutesListNextResponse> {\n    var eventRoutesListOptionalParams: EventRoutesListOptionalParams = options;\n    eventRoutesListOptionalParams = {\n      maxItemsPerPage: resultsPerPage\n    };\n\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-listEventRoutes\",\n      eventRoutesListOptionalParams\n    );\n    try {\n      const iter = this.getEventRoutesAll(updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.getEventRoutesPage(eventRoutesListOptionalParams, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create or update an event route.\n   *\n   * @param eventRouteId The Id of the event route to create or update.\n   * @param endpointId The id of the endpoint this event route is bound to.\n   * @param filter An expression which describes the events which are routed to the endpoint.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public upsertEventRoute(\n    eventRouteId: string,\n    endpointId: string,\n    filter: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const eventRoutesAddOptionalParams: EventRoutesAddOptionalParams = options;\n    const eventRoute: EventRoute = {\n      endpointName: endpointId,\n      filter: filter\n    };\n    eventRoutesAddOptionalParams.eventRoute = eventRoute;\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-upsertEventRoute\",\n      eventRoutesAddOptionalParams\n    );\n    try {\n      return this.client.eventRoutes.add(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete an event route.\n   *\n   * @param eventRouteId The Id of the eventRoute to delete.\n   * @param options The operation options\n   * @returns The http response.\n   */\n  public deleteEventRoute(\n    eventRouteId: string,\n    options: OperationOptions = {}\n  ): Promise<RestResponse> {\n    const { span, updatedOptions } = createSpan(\"DigitalTwinsClient-deleteEventRoute\", options);\n    try {\n      return this.client.eventRoutes.delete(eventRouteId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the pagination of {@link query}.\n   *\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   *\n   */\n  private async *queryTwinsPage(\n    query: string,\n    options: QueryQueryTwinsOptionalParams,\n    continuationState: PageSettings\n  ): AsyncIterableIterator<QueryQueryTwinsResponse> {\n    if (continuationState.continuationToken == null) {\n      const querySpecification: QuerySpecification = {\n        query: query,\n        continuationToken: continuationState.continuationToken\n      };\n      const queryResult = await this.client.query.queryTwins(querySpecification, options);\n      continuationState.continuationToken = queryResult.continuationToken;\n      yield queryResult;\n    }\n    while (continuationState.continuationToken) {\n      const querySpecification: QuerySpecification = {\n        query: query,\n        continuationToken: continuationState.continuationToken\n      };\n      const queryResult = await this.client.query.queryTwins(querySpecification, options);\n\n      continuationState.continuationToken = queryResult.continuationToken;\n      yield queryResult;\n    }\n  }\n\n  /**\n   * @internal\n   * Deals with the iteration of all the available results of {@link query}.\n   * @param {OperationOptions} [options] Common options for the iterative endpoints.\n   */\n  private async *queryTwinsAll(\n    query: string,\n    options: QueryQueryTwinsOptionalParams\n  ): AsyncIterableIterator<any> {\n    const f = {};\n\n    for await (const page of this.queryTwinsPage(query, options, f)) {\n      if (page.value) {\n        for (const item of page.value) {\n          yield item;\n        }\n      }\n    }\n  }\n\n  /**\n   * Query for digital twins.\n   *\n   * @param query The query string, in SQL-like syntax.\n   * @param resultsPerPage The maximum number of items to retrieve per request. The server may choose to return less than the requested max.\n   * @returns The pageable list of query results.\n   */\n  public queryTwins(\n    query: string,\n    resultsPerPage?: number,\n    options: OperationOptions & PageSettings = {}\n  ): PagedAsyncIterableIterator<any, QueryQueryTwinsResponse> {\n    var queryQueryTwinsOptionalParams: QueryQueryTwinsOptionalParams = options;\n    queryQueryTwinsOptionalParams = {\n      maxItemsPerPage: resultsPerPage\n    };\n\n    const { span, updatedOptions } = createSpan(\n      \"DigitalTwinsClient-queryTwins\",\n      queryQueryTwinsOptionalParams\n    );\n    try {\n      const iter = this.queryTwinsAll(query, updatedOptions);\n\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: PageSettings = {}) =>\n          this.queryTwinsPage(query, queryQueryTwinsOptionalParams, settings)\n      };\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}