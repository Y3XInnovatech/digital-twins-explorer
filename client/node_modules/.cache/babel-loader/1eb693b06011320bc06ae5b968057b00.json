{"ast":null,"code":"/**\n * Regular expression matching characters to ignore when calculating the initials.\n */\n/**\n * Regular expression matching characters within various types of enclosures, including the enclosures themselves\n *  so for example, (xyz) [xyz] {xyz} all would be ignored\n */\nvar UNWANTED_ENCLOSURES_REGEX = /[\\(\\[\\{][^\\)\\]\\}]*[\\)\\]\\}]/g;\n/**\n * Regular expression matching special ASCII characters except space, plus some unicode special characters.\n * Applies after unwanted enclosures have been removed\n */\nvar UNWANTED_CHARS_REGEX = /[\\0-\\u001F\\!-/:-@\\[-`\\{-\\u00BF\\u0250-\\u036F\\uD800-\\uFFFF]/g;\n/**\n * Regular expression matching phone numbers. Applied after chars matching UNWANTED_CHARS_REGEX have been removed\n * and number has been trimmed for whitespaces\n */\nvar PHONENUMBER_REGEX = /^\\d+[\\d\\s]*(:?ext|x|)\\s*\\d+$/i;\n/** Regular expression matching one or more spaces. */\nvar MULTIPLE_WHITESPACES_REGEX = /\\s+/g;\n/**\n * Regular expression matching languages for which we currently don't support initials.\n * Arabic:   Arabic, Arabic Supplement, Arabic Extended-A.\n * Korean:   Hangul Jamo, Hangul Compatibility Jamo, Hangul Jamo Extended-A, Hangul Syllables, Hangul Jamo Extended-B.\n * Japanese: Hiragana, Katakana.\n * CJK:      CJK Unified Ideographs Extension A, CJK Unified Ideographs, CJK Compatibility Ideographs,\n *             CJK Unified Ideographs Extension B\n */\n// eslint-disable-next-line @fluentui/max-len\nvar UNSUPPORTED_TEXT_REGEX = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\u1100-\\u11FF\\u3130-\\u318F\\uA960-\\uA97F\\uAC00-\\uD7AF\\uD7B0-\\uD7FF\\u3040-\\u309F\\u30A0-\\u30FF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD869][\\uDC00-\\uDED6]/;\nfunction getInitialsLatin(displayName, isRtl) {\n  var initials = '';\n  var splits = displayName.split(' ');\n  if (splits.length === 2) {\n    initials += splits[0].charAt(0).toUpperCase();\n    initials += splits[1].charAt(0).toUpperCase();\n  } else if (splits.length === 3) {\n    initials += splits[0].charAt(0).toUpperCase();\n    initials += splits[2].charAt(0).toUpperCase();\n  } else if (splits.length !== 0) {\n    initials += splits[0].charAt(0).toUpperCase();\n  }\n  if (isRtl && initials.length > 1) {\n    return initials.charAt(1) + initials.charAt(0);\n  }\n  return initials;\n}\nfunction cleanupDisplayName(displayName) {\n  displayName = displayName.replace(UNWANTED_ENCLOSURES_REGEX, '');\n  displayName = displayName.replace(UNWANTED_CHARS_REGEX, '');\n  displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX, ' ');\n  displayName = displayName.trim();\n  return displayName;\n}\n/**\n * Get (up to 2 characters) initials based on display name of the persona.\n *\n * @public\n */\nexport function getInitials(displayName, isRtl, allowPhoneInitials) {\n  if (!displayName) {\n    return '';\n  }\n  displayName = cleanupDisplayName(displayName);\n  // For names containing CJK characters, and phone numbers, we don't display initials\n  if (UNSUPPORTED_TEXT_REGEX.test(displayName) || !allowPhoneInitials && PHONENUMBER_REGEX.test(displayName)) {\n    return '';\n  }\n  return getInitialsLatin(displayName, isRtl);\n}","map":{"version":3,"sources":["initials.ts"],"names":[],"mappings":"AAAA;;AAEG;AACH;;;AAGG;AACH,IAAM,yBAAyB,GAAW,6BAA6B;AAEvE;;;AAGG;AACH,IAAM,oBAAoB,GAAW,4DAA4D;AAEjG;;;AAGG;AACH,IAAM,iBAAiB,GAAW,+BAA+B;AAEjE;AACA,IAAM,0BAA0B,GAAW,MAAM;AAEjD;;;;;;;AAOG;AACH;AACA,IAAM,sBAAsB,GAAW,4MAA4M;AAEnP,SAAS,gBAAgB,CAAC,WAAmB,EAAE,KAAc,EAAA;EAC3D,IAAI,QAAQ,GAAG,EAAE;EAEjB,IAAM,MAAM,GAAa,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC;EAE/C,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;IACvB,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAA,CAAE;IAC7C,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAA,CAAE;GAC9C,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;IAC9B,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAA,CAAE;IAC7C,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAA,CAAE;GAC9C,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;IAC9B,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAA,CAAE;EAC9C;EAED,IAAI,KAAK,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;IAChC,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EAC/C;EAED,OAAO,QAAQ;AACjB;AAEA,SAAS,kBAAkB,CAAC,WAAmB,EAAA;EAC7C,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,yBAAyB,EAAE,EAAE,CAAC;EAChE,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAE,CAAC;EAC3D,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,0BAA0B,EAAE,GAAG,CAAC;EAClE,WAAW,GAAG,WAAW,CAAC,IAAI,CAAA,CAAE;EAEhC,OAAO,WAAW;AACpB;AAEA;;;;AAIG;AACH,OAAM,SAAU,WAAW,CACzB,WAAsC,EACtC,KAAc,EACd,kBAA4B,EAAA;EAE5B,IAAI,CAAC,WAAW,EAAE;IAChB,OAAO,EAAE;EACV;EAED,WAAW,GAAG,kBAAkB,CAAC,WAAW,CAAC;EAE7C;EACA,IAAI,sBAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAK,CAAC,kBAAkB,IAAI,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAE,EAAE;IAC5G,OAAO,EAAE;EACV;EAED,OAAO,gBAAgB,CAAC,WAAW,EAAE,KAAK,CAAC;AAC7C","sourcesContent":["/**\n * Regular expression matching characters to ignore when calculating the initials.\n */\n/**\n * Regular expression matching characters within various types of enclosures, including the enclosures themselves\n *  so for example, (xyz) [xyz] {xyz} all would be ignored\n */\nconst UNWANTED_ENCLOSURES_REGEX: RegExp = /[\\(\\[\\{][^\\)\\]\\}]*[\\)\\]\\}]/g;\n\n/**\n * Regular expression matching special ASCII characters except space, plus some unicode special characters.\n * Applies after unwanted enclosures have been removed\n */\nconst UNWANTED_CHARS_REGEX: RegExp = /[\\0-\\u001F\\!-/:-@\\[-`\\{-\\u00BF\\u0250-\\u036F\\uD800-\\uFFFF]/g;\n\n/**\n * Regular expression matching phone numbers. Applied after chars matching UNWANTED_CHARS_REGEX have been removed\n * and number has been trimmed for whitespaces\n */\nconst PHONENUMBER_REGEX: RegExp = /^\\d+[\\d\\s]*(:?ext|x|)\\s*\\d+$/i;\n\n/** Regular expression matching one or more spaces. */\nconst MULTIPLE_WHITESPACES_REGEX: RegExp = /\\s+/g;\n\n/**\n * Regular expression matching languages for which we currently don't support initials.\n * Arabic:   Arabic, Arabic Supplement, Arabic Extended-A.\n * Korean:   Hangul Jamo, Hangul Compatibility Jamo, Hangul Jamo Extended-A, Hangul Syllables, Hangul Jamo Extended-B.\n * Japanese: Hiragana, Katakana.\n * CJK:      CJK Unified Ideographs Extension A, CJK Unified Ideographs, CJK Compatibility Ideographs,\n *             CJK Unified Ideographs Extension B\n */\n// eslint-disable-next-line @fluentui/max-len\nconst UNSUPPORTED_TEXT_REGEX: RegExp = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\u1100-\\u11FF\\u3130-\\u318F\\uA960-\\uA97F\\uAC00-\\uD7AF\\uD7B0-\\uD7FF\\u3040-\\u309F\\u30A0-\\u30FF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD869][\\uDC00-\\uDED6]/;\n\nfunction getInitialsLatin(displayName: string, isRtl: boolean): string {\n  let initials = '';\n\n  const splits: string[] = displayName.split(' ');\n\n  if (splits.length === 2) {\n    initials += splits[0].charAt(0).toUpperCase();\n    initials += splits[1].charAt(0).toUpperCase();\n  } else if (splits.length === 3) {\n    initials += splits[0].charAt(0).toUpperCase();\n    initials += splits[2].charAt(0).toUpperCase();\n  } else if (splits.length !== 0) {\n    initials += splits[0].charAt(0).toUpperCase();\n  }\n\n  if (isRtl && initials.length > 1) {\n    return initials.charAt(1) + initials.charAt(0);\n  }\n\n  return initials;\n}\n\nfunction cleanupDisplayName(displayName: string): string {\n  displayName = displayName.replace(UNWANTED_ENCLOSURES_REGEX, '');\n  displayName = displayName.replace(UNWANTED_CHARS_REGEX, '');\n  displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX, ' ');\n  displayName = displayName.trim();\n\n  return displayName;\n}\n\n/**\n * Get (up to 2 characters) initials based on display name of the persona.\n *\n * @public\n */\nexport function getInitials(\n  displayName: string | undefined | null,\n  isRtl: boolean,\n  allowPhoneInitials?: boolean,\n): string {\n  if (!displayName) {\n    return '';\n  }\n\n  displayName = cleanupDisplayName(displayName);\n\n  // For names containing CJK characters, and phone numbers, we don't display initials\n  if (UNSUPPORTED_TEXT_REGEX.test(displayName) || (!allowPhoneInitials && PHONENUMBER_REGEX.test(displayName))) {\n    return '';\n  }\n\n  return getInitialsLatin(displayName, isRtl);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}