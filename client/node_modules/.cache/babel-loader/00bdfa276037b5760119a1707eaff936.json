{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState) {\n  var _a = React.useState(initialState),\n    value = _a[0],\n    setValue = _a[1];\n  // Storing the value in a ref is redundant but allows the `toggle` callback to have a\n  // constant identity, which overall is probably better for consumers' perf.\n  var valueRef = React.useRef(value);\n  var setTrue = useConst(function () {\n    return function () {\n      setValue(true);\n      valueRef.current = true;\n    };\n  });\n  var setFalse = useConst(function () {\n    return function () {\n      setValue(false);\n      valueRef.current = false;\n    };\n  });\n  var toggle = useConst(function () {\n    return function () {\n      return valueRef.current ? setFalse() : setTrue();\n    };\n  });\n  return [value, {\n    setTrue: setTrue,\n    setFalse: setFalse,\n    toggle: toggle\n  }];\n}","map":{"version":3,"sources":["useBoolean.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,QAAQ,QAAQ,YAAY;AAYrC;;;;;;AAMG;AACH,OAAM,SAAU,UAAU,CAAC,YAAqB,EAAA;EACxC,IAAA,EAAA,GAAA,KAAA,CAAA,QAAA,CAAA,YAAA,CAAgD;IAA/C,KAAA,GAAA,EAAA,CAAA,CAAA,CAAK;IAAE,QAAA,GAAA,EAAA,CAAA,CAAA,CAAwC;EACtD;EACA;EACA,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;EAEpC,IAAM,OAAO,GAAG,QAAQ,CAAC,YAAA;IAAM,OAAA,YAAA;MAC7B,QAAQ,CAAC,IAAI,CAAC;MACd,QAAQ,CAAC,OAAO,GAAG,IAAI;IACzB,CAAC;EAH8B,CAG9B,CAAC;EACF,IAAM,QAAQ,GAAG,QAAQ,CAAC,YAAA;IAAM,OAAA,YAAA;MAC9B,QAAQ,CAAC,KAAK,CAAC;MACf,QAAQ,CAAC,OAAO,GAAG,KAAK;IAC1B,CAAC;EAH+B,CAG/B,CAAC;EACF,IAAM,MAAM,GAAG,QAAQ,CAAC,YAAA;IAAM,OAAA,YAAA;MAAM,OAAC,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAA,CAAE,GAAG,OAAO,CAAA,CAAE;IAA1C,CAA2C;EAAjD,CAAiD,CAAC;EAEhF,OAAO,CAAC,KAAK,EAAE;IAAE,OAAO,EAAA,OAAA;IAAE,QAAQ,EAAA,QAAA;IAAE,MAAM,EAAA;EAAA,CAAE,CAAC;AAC/C","sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\n/** Updater callbacks returned by `useBoolean`. */\nexport interface IUseBooleanCallbacks {\n  /** Set the value to true. Always has the same identity. */\n  setTrue: () => void;\n  /** Set the value to false. Always has the same identity. */\n  setFalse: () => void;\n  /** Toggle the value. Always has the same identity. */\n  toggle: () => void;\n}\n\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks] {\n  const [value, setValue] = React.useState(initialState);\n  // Storing the value in a ref is redundant but allows the `toggle` callback to have a\n  // constant identity, which overall is probably better for consumers' perf.\n  const valueRef = React.useRef(value);\n\n  const setTrue = useConst(() => () => {\n    setValue(true);\n    valueRef.current = true;\n  });\n  const setFalse = useConst(() => () => {\n    setValue(false);\n    valueRef.current = false;\n  });\n  const toggle = useConst(() => () => (valueRef.current ? setFalse() : setTrue()));\n\n  return [value, { setTrue, setFalse, toggle }];\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}