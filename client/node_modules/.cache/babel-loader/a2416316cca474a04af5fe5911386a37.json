{"ast":null,"code":"import { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { isValidShade, getShade, getBackgroundShade } from '../../utilities/color/shades';\nimport { format } from '../../Utilities';\nvar ThemeGenerator = /** @class */function () {\n  function ThemeGenerator() {}\n  /**\n   * Sets an IThemeSlotRule to the given color and cascades it to the rest of the theme, updating other IThemeSlotRules\n   * in the theme that inherit from that color.\n   * @param isInverted - whether it's a dark theme or not, which affects the algorithm used to generate shades\n   * @param isCustomization - should be true only if it's a user action, and indicates overwriting the slot's\n   * inheritance (if any)\n   * @param overwriteCustomColor - A slot could have a generated color based on its inheritance rules (isCustomized\n   * is false), or a custom color based on user input (isCustomized is true). This bool tells us whether to override\n   * existing customized colors.\n   */\n  ThemeGenerator.setSlot = function (rule, color, isInverted, isCustomization, overwriteCustomColor) {\n    if (isInverted === void 0) {\n      isInverted = false;\n    }\n    if (isCustomization === void 0) {\n      isCustomization = false;\n    }\n    if (overwriteCustomColor === void 0) {\n      overwriteCustomColor = true;\n    }\n    if (!rule.color && rule.value) {\n      // not a color rule\n      return;\n    }\n    if (overwriteCustomColor) {\n      var colorAsIColor = void 0;\n      if (typeof color === 'string') {\n        colorAsIColor = getColorFromString(color); // the ! is a lie here but we'll verify it in the next line\n        if (!colorAsIColor) {\n          throw new Error('color is invalid in setSlot(): ' + color);\n        }\n      } else {\n        colorAsIColor = color;\n      }\n      ThemeGenerator._setSlot(rule, colorAsIColor, isInverted, isCustomization, overwriteCustomColor);\n    } else if (rule.color) {\n      ThemeGenerator._setSlot(rule, rule.color, isInverted, isCustomization, overwriteCustomColor);\n    }\n  };\n  /**\n   * Sets the color of each slot based on its rule. Slots that don't inherit must have a color already.\n   * If this completes without error, then the theme is ready to use. (All slots will have a color.)\n   * setSlot() can be called before this, but this must be called before getThemeAs*().\n   * Does not override colors of rules where isCustomized is true (i.e. doesn't override existing customizations).\n   */\n  ThemeGenerator.insureSlots = function (slotRules, isInverted) {\n    // Get all the \"root\" rules, the ones which don't inherit. Then \"set\" them to trigger updating dependent slots.\n    for (var ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        var rule = slotRules[ruleName];\n        if (!rule.inherits && !rule.value) {\n          if (!rule.color) {\n            throw new Error('A color slot rule that does not inherit must provide its own color.');\n          }\n          ThemeGenerator._setSlot(rule, rule.color, isInverted, false, false);\n        }\n      }\n    }\n  };\n  /**\n   * Gets the JSON-formatted blob that describes the theme, usable with the REST request endpoints:\n   * ```\n   * { [theme slot name as string] : [color as string],\n   *  \"tokenName\": \"#f00f00\",\n   *  \"tokenName2\": \"#ba2ba2\",\n   *   ... }\n   * ```\n   */\n  ThemeGenerator.getThemeAsJson = function (slotRules) {\n    var theme = {};\n    for (var ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        var rule = slotRules[ruleName];\n        theme[rule.name] = rule.color ? rule.color.str : rule.value || '';\n      }\n    }\n    return theme;\n  };\n  /**\n   * Gets code-formatted load theme blob that can be copy and pasted.\n   * Only used for the old theme designer, where loadTheme usage is acceptable,\n   * unlike in the new theme designer.\n   */\n  ThemeGenerator.getThemeAsCode = function (slotRules) {\n    var output = 'loadTheme({\\n  palette: {\\n';\n    return ThemeGenerator._makeRemainingCode(output, slotRules);\n  };\n  /**\n   * Gets code-formatted load theme blob, specifically for the new theme designer,\n   * aka.ms/themedesigner. Shouldn't use loadTheme like the old theme designer since it's deprecated.\n   * We want to use the theme object from createTheme and use the Customizations.applySettings API instead.\n   */\n  ThemeGenerator.getThemeAsCodeWithCreateTheme = function (slotRules) {\n    var output = 'const myTheme = createTheme({\\n  palette: {\\n';\n    return ThemeGenerator._makeRemainingCode(output, slotRules);\n  };\n  /**\n   * Gets the theme as a list of SASS variables that can be used in code\n   * ```\n   * $tokenName: \"[theme:tokenName, default:#f00f00]\";\n   * $tokenName2: \"[theme:tokenName2, default:#ba2ba2]\";\n   * ...\n   * ```\n   */\n  ThemeGenerator.getThemeAsSass = function (slotRules) {\n    var sassVarTemplate = '${0}Color: \"[theme: {1}, default: {2}]\";\\n';\n    var output = '';\n    for (var ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        var rule = slotRules[ruleName];\n        var camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        output += format(sassVarTemplate, camelCasedName, camelCasedName, rule.color ? rule.color.str : rule.value || '');\n      }\n    }\n    return output;\n  };\n  /**\n   * Gets the theme formatted for PowerShell scripts\n   * ```\n   * @{\n   * \"tokenName\" = \"#f00f00\";\n   * \"tokenName2\" = \"#ba2ba2\";\n   * ...\n   * }\n   * ```\n   */\n  ThemeGenerator.getThemeForPowerShell = function (slotRules) {\n    var psVarTemplate = '\"{0}\" = \"{1}\";\\n';\n    var output = '';\n    for (var ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        var rule = slotRules[ruleName];\n        if (rule.value) {\n          // skip this one, it's not a color\n          continue;\n        }\n        var camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        var outputColor = rule.color ? '#' + rule.color.hex : rule.value || '';\n        // powershell endpoint uses the RGBA format\n        if (rule.color && rule.color.a && rule.color.a !== 100) {\n          outputColor += String(rule.color.a.toString(16));\n        }\n        output += format(psVarTemplate, camelCasedName, outputColor);\n      }\n    }\n    return '@{\\n' + output + '}';\n  };\n  /**\n   * Sets the given slot's color to the appropriate color, shading it if necessary.\n   * Then, iterates through all other rules (that are this rule's dependents) to update them accordingly.\n   * @param isCustomization - If true, it's a user-provided color, which should be to that raw color.\n   * If false, the rule it's inheriting from changed, so updated using asShade.\n   */\n  ThemeGenerator._setSlot = function (rule, color, isInverted, isCustomization, overwriteCustomColor) {\n    if (overwriteCustomColor === void 0) {\n      overwriteCustomColor = true;\n    }\n    if (!rule.color && rule.value) {\n      // not a color rule\n      return;\n    }\n    if (overwriteCustomColor || !rule.color || !rule.isCustomized || !rule.inherits) {\n      // set the rule's color under these conditions\n      if ((overwriteCustomColor || !rule.isCustomized) && !isCustomization && rule.inherits && isValidShade(rule.asShade)) {\n        // it's inheriting by shade\n        if (rule.isBackgroundShade) {\n          rule.color = getBackgroundShade(color, rule.asShade, isInverted);\n        } else {\n          rule.color = getShade(color, rule.asShade, isInverted);\n        }\n        rule.isCustomized = false;\n      } else {\n        rule.color = color;\n        rule.isCustomized = true;\n      }\n      // then update dependent colors\n      for (var _i = 0, _a = rule.dependentRules; _i < _a.length; _i++) {\n        var ruleToUpdate = _a[_i];\n        ThemeGenerator._setSlot(ruleToUpdate, rule.color, isInverted, false, overwriteCustomColor);\n      }\n    }\n  };\n  /**\n   * Makes the rest of the code that's used for the load theme blob in the exported codepens of\n   * both the older sharepoint-specific theme designer and the new theme designer. Takes in\n   * theme rules and converts them to format fitting a list of palette colors and their values.\n   * Resulting output looks like:\n   * ```\n   * const _theme = createTheme({\n   *  palette: {\n   *    themePrimary: '#0078d4',\n   *    themeLighterAlt: '#f3f9fd',\n   *    ...\n   *  }});\n   * ```\n   * The first line is loadTheme instead of createTheme for the old sharepoint theme designer.\n   */\n  ThemeGenerator._makeRemainingCode = function (output, slotRules) {\n    var attributeTemplate = \"    {0}: '{1}',\\n\";\n    for (var ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        var rule = slotRules[ruleName];\n        var camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        var outputColor = rule.color ? '#' + rule.color.hex : rule.value || '';\n        output += format(attributeTemplate, camelCasedName, outputColor);\n      }\n    }\n    output += '  }});';\n    return output;\n  };\n  return ThemeGenerator;\n}();\nexport { ThemeGenerator };","map":{"version":3,"sources":["components/ThemeGenerator/ThemeGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import { IColor } from '../../utilities/color/interfaces';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { isValidShade, getShade, getBackgroundShade } from '../../utilities/color/shades';\nimport { format } from '../../Utilities';\n\nimport { IThemeSlotRule } from './IThemeSlotRule';\nimport { IThemeRules } from './IThemeRules';\n\nexport class ThemeGenerator {\n  /**\n   * Sets an IThemeSlotRule to the given color and cascades it to the rest of the theme, updating other IThemeSlotRules\n   * in the theme that inherit from that color.\n   * @param isInverted - whether it's a dark theme or not, which affects the algorithm used to generate shades\n   * @param isCustomization - should be true only if it's a user action, and indicates overwriting the slot's\n   * inheritance (if any)\n   * @param overwriteCustomColor - A slot could have a generated color based on its inheritance rules (isCustomized\n   * is false), or a custom color based on user input (isCustomized is true). This bool tells us whether to override\n   * existing customized colors.\n   */\n  public static setSlot(\n    rule: IThemeSlotRule,\n    color: string | IColor,\n    isInverted = false,\n    isCustomization = false,\n    overwriteCustomColor = true,\n  ) {\n    if (!rule.color && rule.value) {\n      // not a color rule\n      return;\n    }\n\n    if (overwriteCustomColor) {\n      let colorAsIColor: IColor;\n      if (typeof color === 'string') {\n        colorAsIColor = getColorFromString(color)!; // the ! is a lie here but we'll verify it in the next line\n        if (!colorAsIColor) {\n          throw new Error('color is invalid in setSlot(): ' + color);\n        }\n      } else {\n        colorAsIColor = color;\n      }\n      ThemeGenerator._setSlot(rule, colorAsIColor, isInverted, isCustomization, overwriteCustomColor);\n    } else if (rule.color) {\n      ThemeGenerator._setSlot(rule, rule.color, isInverted, isCustomization, overwriteCustomColor);\n    }\n  }\n\n  /**\n   * Sets the color of each slot based on its rule. Slots that don't inherit must have a color already.\n   * If this completes without error, then the theme is ready to use. (All slots will have a color.)\n   * setSlot() can be called before this, but this must be called before getThemeAs*().\n   * Does not override colors of rules where isCustomized is true (i.e. doesn't override existing customizations).\n   */\n  public static insureSlots(slotRules: IThemeRules, isInverted: boolean) {\n    // Get all the \"root\" rules, the ones which don't inherit. Then \"set\" them to trigger updating dependent slots.\n    for (const ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        const rule: IThemeSlotRule = slotRules[ruleName];\n        if (!rule.inherits && !rule.value) {\n          if (!rule.color) {\n            throw new Error('A color slot rule that does not inherit must provide its own color.');\n          }\n          ThemeGenerator._setSlot(rule, rule.color, isInverted, false, false);\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets the JSON-formatted blob that describes the theme, usable with the REST request endpoints:\n   * ```\n   * { [theme slot name as string] : [color as string],\n   *  \"tokenName\": \"#f00f00\",\n   *  \"tokenName2\": \"#ba2ba2\",\n   *   ... }\n   * ```\n   */\n  public static getThemeAsJson(slotRules: IThemeRules): any {\n    const theme: any = {};\n    for (const ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        const rule: IThemeSlotRule = slotRules[ruleName];\n        theme[rule.name] = rule.color ? rule.color.str : rule.value || '';\n      }\n    }\n    return theme;\n  }\n\n  /**\n   * Gets code-formatted load theme blob that can be copy and pasted.\n   * Only used for the old theme designer, where loadTheme usage is acceptable,\n   * unlike in the new theme designer.\n   */\n  public static getThemeAsCode(slotRules: IThemeRules): any {\n    const output = 'loadTheme({\\n  palette: {\\n';\n    return ThemeGenerator._makeRemainingCode(output, slotRules);\n  }\n\n  /**\n   * Gets code-formatted load theme blob, specifically for the new theme designer,\n   * aka.ms/themedesigner. Shouldn't use loadTheme like the old theme designer since it's deprecated.\n   * We want to use the theme object from createTheme and use the Customizations.applySettings API instead.\n   */\n  public static getThemeAsCodeWithCreateTheme(slotRules: IThemeRules): any {\n    const output = 'const myTheme = createTheme({\\n  palette: {\\n';\n    return ThemeGenerator._makeRemainingCode(output, slotRules);\n  }\n\n  /**\n   * Gets the theme as a list of SASS variables that can be used in code\n   * ```\n   * $tokenName: \"[theme:tokenName, default:#f00f00]\";\n   * $tokenName2: \"[theme:tokenName2, default:#ba2ba2]\";\n   * ...\n   * ```\n   */\n  public static getThemeAsSass(slotRules: IThemeRules): any {\n    const sassVarTemplate = '${0}Color: \"[theme: {1}, default: {2}]\";\\n';\n    let output = '';\n\n    for (const ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        const rule: IThemeSlotRule = slotRules[ruleName];\n        const camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        output += format(\n          sassVarTemplate,\n          camelCasedName,\n          camelCasedName,\n          rule.color ? rule.color.str : rule.value || '',\n        );\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Gets the theme formatted for PowerShell scripts\n   * ```\n   * @{\n   * \"tokenName\" = \"#f00f00\";\n   * \"tokenName2\" = \"#ba2ba2\";\n   * ...\n   * }\n   * ```\n   */\n  public static getThemeForPowerShell(slotRules: IThemeRules): any {\n    const psVarTemplate = '\"{0}\" = \"{1}\";\\n';\n    let output = '';\n\n    for (const ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        const rule: IThemeSlotRule = slotRules[ruleName];\n        if (rule.value) {\n          // skip this one, it's not a color\n          continue;\n        }\n        const camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        let outputColor = rule.color ? '#' + rule.color.hex : rule.value || '';\n        // powershell endpoint uses the RGBA format\n        if (rule.color && rule.color.a && rule.color.a !== 100) {\n          outputColor += String(rule.color.a.toString(16));\n        }\n        output += format(psVarTemplate, camelCasedName, outputColor);\n      }\n    }\n    return '@{\\n' + output + '}';\n  }\n\n  /**\n   * Sets the given slot's color to the appropriate color, shading it if necessary.\n   * Then, iterates through all other rules (that are this rule's dependents) to update them accordingly.\n   * @param isCustomization - If true, it's a user-provided color, which should be to that raw color.\n   * If false, the rule it's inheriting from changed, so updated using asShade.\n   */\n  private static _setSlot(\n    rule: IThemeSlotRule,\n    color: IColor,\n    isInverted: boolean,\n    isCustomization: boolean,\n    overwriteCustomColor = true,\n  ) {\n    if (!rule.color && rule.value) {\n      // not a color rule\n      return;\n    }\n\n    if (overwriteCustomColor || !rule.color || !rule.isCustomized || !rule.inherits) {\n      // set the rule's color under these conditions\n      if (\n        (overwriteCustomColor || !rule.isCustomized) &&\n        !isCustomization &&\n        rule.inherits &&\n        isValidShade(rule.asShade)\n      ) {\n        // it's inheriting by shade\n        if (rule.isBackgroundShade) {\n          rule.color = getBackgroundShade(color, rule.asShade!, isInverted)!;\n        } else {\n          rule.color = getShade(color, rule.asShade!, isInverted)!;\n        }\n        rule.isCustomized = false;\n      } else {\n        rule.color = color;\n        rule.isCustomized = true;\n      }\n\n      // then update dependent colors\n      for (const ruleToUpdate of rule.dependentRules) {\n        ThemeGenerator._setSlot(ruleToUpdate, rule.color, isInverted, false, overwriteCustomColor);\n      }\n    }\n  }\n\n  /**\n   * Makes the rest of the code that's used for the load theme blob in the exported codepens of\n   * both the older sharepoint-specific theme designer and the new theme designer. Takes in\n   * theme rules and converts them to format fitting a list of palette colors and their values.\n   * Resulting output looks like:\n   * ```\n   * const _theme = createTheme({\n   *  palette: {\n   *    themePrimary: '#0078d4',\n   *    themeLighterAlt: '#f3f9fd',\n   *    ...\n   *  }});\n   * ```\n   * The first line is loadTheme instead of createTheme for the old sharepoint theme designer.\n   */\n  private static _makeRemainingCode(output: string, slotRules: IThemeRules) {\n    const attributeTemplate = \"    {0}: '{1}',\\n\";\n    for (const ruleName in slotRules) {\n      if (slotRules.hasOwnProperty(ruleName)) {\n        const rule: IThemeSlotRule = slotRules[ruleName];\n        const camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\n        const outputColor = rule.color ? '#' + rule.color.hex : rule.value || '';\n        output += format(attributeTemplate, camelCasedName, outputColor);\n      }\n    }\n    output += '  }});';\n    return output;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}