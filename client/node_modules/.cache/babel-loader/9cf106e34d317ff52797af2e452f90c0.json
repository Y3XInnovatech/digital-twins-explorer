{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  parseLinkHeader,\n  buildHeaders\n} = require('../util');\nconst {\n  LINK_HEADER_REL\n} = require('../constants');\nconst JsonLdError = require('../JsonLdError');\nconst RequestQueue = require('../RequestQueue');\n\n/**\n * Creates a built-in node document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          strictSSL: true to require SSL certificates to be valid,\n *            false not to (default: true).\n *          maxRedirects: the maximum number of redirects to permit, none by\n *            default.\n *          request: the object which will make the request, default is\n *            provided by `https://www.npmjs.com/package/request`.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *\n * @return the node document loader.\n */\nmodule.exports = ({\n  secure,\n  strictSSL = true,\n  maxRedirects = -1,\n  request,\n  headers = {}\n} = {\n  strictSSL: true,\n  maxRedirects: -1,\n  headers: {}\n}) => {\n  headers = buildHeaders(headers);\n  // TODO: use `axios`\n  request = request || require('request');\n  const http = require('http');\n  const queue = new RequestQueue();\n  return queue.wrapLoader(function (url) {\n    return loadDocument(url, []);\n  });\n  async function loadDocument(url, redirects) {\n    if (url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError('URL could not be dereferenced; only \"http\" and \"https\" URLs are ' + 'supported.', 'jsonld.InvalidUrl', {\n        code: 'loading document failed',\n        url\n      });\n    }\n    if (secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError('URL could not be dereferenced; secure mode is enabled and ' + 'the URL\\'s scheme is not \"https\".', 'jsonld.InvalidUrl', {\n        code: 'loading document failed',\n        url\n      });\n    }\n    // TODO: disable cache until HTTP caching implemented\n    let doc = null; //cache.get(url);\n    if (doc !== null) {\n      return doc;\n    }\n    let result;\n    try {\n      result = await _request(request, {\n        url,\n        headers,\n        strictSSL,\n        followRedirect: false\n      });\n    } catch (e) {\n      throw new JsonLdError('URL could not be dereferenced, an error occurred.', 'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        url,\n        cause: e\n      });\n    }\n    const {\n      res,\n      body\n    } = result;\n    doc = {\n      contextUrl: null,\n      documentUrl: url,\n      document: body || null\n    };\n\n    // handle error\n    const statusText = http.STATUS_CODES[res.statusCode];\n    if (res.statusCode >= 400) {\n      throw new JsonLdError(`URL \"${url}\" could not be dereferenced: ${statusText}`, 'jsonld.InvalidUrl', {\n        code: 'loading document failed',\n        url,\n        httpStatusCode: res.statusCode\n      });\n    }\n\n    // handle Link Header\n    if (res.headers.link && res.headers['content-type'] !== 'application/ld+json') {\n      // only 1 related link header permitted\n      const linkHeader = parseLinkHeader(res.headers.link)[LINK_HEADER_REL];\n      if (Array.isArray(linkHeader)) {\n        throw new JsonLdError('URL could not be dereferenced, it has more than one associated ' + 'HTTP Link Header.', 'jsonld.InvalidUrl', {\n          code: 'multiple context link headers',\n          url\n        });\n      }\n      if (linkHeader) {\n        doc.contextUrl = linkHeader.target;\n      }\n    }\n\n    // handle redirect\n    if (res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {\n      if (redirects.length === maxRedirects) {\n        throw new JsonLdError('URL could not be dereferenced; there were too many redirects.', 'jsonld.TooManyRedirects', {\n          code: 'loading document failed',\n          url,\n          httpStatusCode: res.statusCode,\n          redirects\n        });\n      }\n      if (redirects.indexOf(url) !== -1) {\n        throw new JsonLdError('URL could not be dereferenced; infinite redirection was detected.', 'jsonld.InfiniteRedirectDetected', {\n          code: 'recursive context inclusion',\n          url,\n          httpStatusCode: res.statusCode,\n          redirects\n        });\n      }\n      redirects.push(url);\n      return loadDocument(res.headers.location, redirects);\n    }\n\n    // cache for each redirected URL\n    redirects.push(url);\n    // TODO: disable cache until HTTP caching implemented\n    /*\n    for(let i = 0; i < redirects.length; ++i) {\n      cache.set(\n        redirects[i],\n        {contextUrl: null, documentUrl: redirects[i], document: body});\n    }\n    */\n\n    return doc;\n  }\n};\nfunction _request(request, options) {\n  return new Promise((resolve, reject) => {\n    request(options, (err, res, body) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({\n          res,\n          body\n        });\n      }\n    });\n  });\n}","map":{"version":3,"names":["parseLinkHeader","buildHeaders","require","LINK_HEADER_REL","JsonLdError","RequestQueue","module","exports","secure","strictSSL","maxRedirects","request","headers","http","queue","wrapLoader","url","loadDocument","redirects","indexOf","code","doc","result","_request","followRedirect","e","cause","res","body","contextUrl","documentUrl","document","statusText","STATUS_CODES","statusCode","httpStatusCode","link","linkHeader","Array","isArray","target","location","length","push","options","Promise","resolve","reject","err"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/jsonld/lib/documentLoaders/node.js"],"sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {parseLinkHeader, buildHeaders} = require('../util');\nconst {LINK_HEADER_REL} = require('../constants');\nconst JsonLdError = require('../JsonLdError');\nconst RequestQueue = require('../RequestQueue');\n\n/**\n * Creates a built-in node document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          strictSSL: true to require SSL certificates to be valid,\n *            false not to (default: true).\n *          maxRedirects: the maximum number of redirects to permit, none by\n *            default.\n *          request: the object which will make the request, default is\n *            provided by `https://www.npmjs.com/package/request`.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *\n * @return the node document loader.\n */\nmodule.exports = ({\n  secure,\n  strictSSL = true,\n  maxRedirects = -1,\n  request,\n  headers = {}\n} = {strictSSL: true, maxRedirects: -1, headers: {}}) => {\n  headers = buildHeaders(headers);\n  // TODO: use `axios`\n  request = request || require('request');\n  const http = require('http');\n\n  const queue = new RequestQueue();\n  return queue.wrapLoader(function(url) {\n    return loadDocument(url, []);\n  });\n\n  async function loadDocument(url, redirects) {\n    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; only \"http\" and \"https\" URLs are ' +\n        'supported.',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n    if(secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; secure mode is enabled and ' +\n        'the URL\\'s scheme is not \"https\".',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n    // TODO: disable cache until HTTP caching implemented\n    let doc = null;//cache.get(url);\n    if(doc !== null) {\n      return doc;\n    }\n\n    let result;\n    try {\n      result = await _request(request, {\n        url,\n        headers,\n        strictSSL,\n        followRedirect: false\n      });\n    } catch(e) {\n      throw new JsonLdError(\n        'URL could not be dereferenced, an error occurred.',\n        'jsonld.LoadDocumentError',\n        {code: 'loading document failed', url, cause: e});\n    }\n\n    const {res, body} = result;\n\n    doc = {contextUrl: null, documentUrl: url, document: body || null};\n\n    // handle error\n    const statusText = http.STATUS_CODES[res.statusCode];\n    if(res.statusCode >= 400) {\n      throw new JsonLdError(\n        `URL \"${url}\" could not be dereferenced: ${statusText}`,\n        'jsonld.InvalidUrl', {\n          code: 'loading document failed',\n          url,\n          httpStatusCode: res.statusCode\n        });\n    }\n\n    // handle Link Header\n    if(res.headers.link &&\n      res.headers['content-type'] !== 'application/ld+json') {\n      // only 1 related link header permitted\n      const linkHeader = parseLinkHeader(res.headers.link)[LINK_HEADER_REL];\n      if(Array.isArray(linkHeader)) {\n        throw new JsonLdError(\n          'URL could not be dereferenced, it has more than one associated ' +\n          'HTTP Link Header.',\n          'jsonld.InvalidUrl',\n          {code: 'multiple context link headers', url});\n      }\n      if(linkHeader) {\n        doc.contextUrl = linkHeader.target;\n      }\n    }\n\n    // handle redirect\n    if(res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {\n      if(redirects.length === maxRedirects) {\n        throw new JsonLdError(\n          'URL could not be dereferenced; there were too many redirects.',\n          'jsonld.TooManyRedirects', {\n            code: 'loading document failed',\n            url,\n            httpStatusCode: res.statusCode,\n            redirects\n          });\n      }\n      if(redirects.indexOf(url) !== -1) {\n        throw new JsonLdError(\n          'URL could not be dereferenced; infinite redirection was detected.',\n          'jsonld.InfiniteRedirectDetected', {\n            code: 'recursive context inclusion',\n            url,\n            httpStatusCode: res.statusCode,\n            redirects\n          });\n      }\n      redirects.push(url);\n      return loadDocument(res.headers.location, redirects);\n    }\n\n    // cache for each redirected URL\n    redirects.push(url);\n    // TODO: disable cache until HTTP caching implemented\n    /*\n    for(let i = 0; i < redirects.length; ++i) {\n      cache.set(\n        redirects[i],\n        {contextUrl: null, documentUrl: redirects[i], document: body});\n    }\n    */\n\n    return doc;\n  }\n};\n\nfunction _request(request, options) {\n  return new Promise((resolve, reject) => {\n    request(options, (err, res, body) => {\n      if(err) {\n        reject(err);\n      } else {\n        resolve({res, body});\n      }\n    });\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}