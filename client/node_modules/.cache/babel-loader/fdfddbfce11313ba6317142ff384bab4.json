{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PropagationAPI = void 0;\nvar getter_1 = require(\"../context/propagation/getter\");\nvar NoopHttpTextPropagator_1 = require(\"../context/propagation/NoopHttpTextPropagator\");\nvar setter_1 = require(\"../context/propagation/setter\");\nvar context_1 = require(\"./context\");\nvar global_utils_1 = require(\"./global-utils\");\nvar contextApi = context_1.ContextAPI.getInstance();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function PropagationAPI() {}\n  /** Get the singleton instance of the Propagator API */\n  PropagationAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current propagator. Returns the initialized propagator\n   */\n  PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n    if (global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) {\n      // global propagator has already been set\n      return this._getGlobalPropagator();\n    }\n    global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, propagator, NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR);\n    return propagator;\n  };\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   * @param context Context carrying tracing data to inject. Defaults to the currently active context.\n   */\n  PropagationAPI.prototype.inject = function (carrier, setter, context) {\n    if (setter === void 0) {\n      setter = setter_1.defaultSetter;\n    }\n    if (context === void 0) {\n      context = contextApi.active();\n    }\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  };\n  /**\n   * Extract context from a carrier\n   *\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   * @param context Context which the newly created context will inherit from. Defaults to the currently active context.\n   */\n  PropagationAPI.prototype.extract = function (carrier, getter, context) {\n    if (getter === void 0) {\n      getter = getter_1.defaultGetter;\n    }\n    if (context === void 0) {\n      context = contextApi.active();\n    }\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  };\n  /** Remove the global propagator */\n  PropagationAPI.prototype.disable = function () {\n    delete global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY];\n  };\n  PropagationAPI.prototype._getGlobalPropagator = function () {\n    var _a, _b;\n    return (_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR;\n  };\n  return PropagationAPI;\n}();\nexports.PropagationAPI = PropagationAPI;","map":{"version":3,"sources":["../../../src/api/propagation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PropagationAPI = void 0;\nvar getter_1 = require(\"../context/propagation/getter\");\nvar NoopHttpTextPropagator_1 = require(\"../context/propagation/NoopHttpTextPropagator\");\nvar setter_1 = require(\"../context/propagation/setter\");\nvar context_1 = require(\"./context\");\nvar global_utils_1 = require(\"./global-utils\");\nvar contextApi = context_1.ContextAPI.getInstance();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator. Returns the initialized propagator\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        if (global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) {\n            // global propagator has already been set\n            return this._getGlobalPropagator();\n        }\n        global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, propagator, NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR);\n        return propagator;\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     * @param context Context carrying tracing data to inject. Defaults to the currently active context.\n     */\n    PropagationAPI.prototype.inject = function (carrier, setter, context) {\n        if (setter === void 0) { setter = setter_1.defaultSetter; }\n        if (context === void 0) { context = contextApi.active(); }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     * @param context Context which the newly created context will inherit from. Defaults to the currently active context.\n     */\n    PropagationAPI.prototype.extract = function (carrier, getter, context) {\n        if (getter === void 0) { getter = getter_1.defaultGetter; }\n        if (context === void 0) { context = contextApi.active(); }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        delete global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY];\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        var _a, _b;\n        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR);\n    };\n    return PropagationAPI;\n}());\nexports.PropagationAPI = PropagationAPI;\n//# sourceMappingURL=propagation.js.map"]},"metadata":{},"sourceType":"script"}