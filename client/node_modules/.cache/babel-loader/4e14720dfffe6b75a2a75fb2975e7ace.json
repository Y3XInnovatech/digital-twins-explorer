{"ast":null,"code":"import { IsFocusVisibleClassName } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle } from '../../Styling';\n// Size breakpoint when the default border width changes from 2px to 4px.\nvar CELL_BORDER_BREAKPOINT = 24;\nvar LARGE_BORDER = 4;\nvar SMALL_BORDER = 2;\nvar DIVIDING_PADDING = 2;\nvar DEFAULT_CELL_SIZE = 20;\nvar cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText'\n};\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e;\n  var theme = props.theme,\n    disabled = props.disabled,\n    selected = props.selected,\n    circle = props.circle,\n    isWhite = props.isWhite,\n    _f = props.height,\n    height = _f === void 0 ? DEFAULT_CELL_SIZE : _f,\n    _g = props.width,\n    width = _g === void 0 ? DEFAULT_CELL_SIZE : _g,\n    borderWidth = props.borderWidth;\n  var semanticColors = theme.semanticColors,\n    palette = theme.palette;\n  var buttonBorderHovered = palette.neutralLighter;\n  var buttonBorderChecked = palette.neutralLight;\n  var buttonBorderCheckedHovered = palette.neutralSecondary;\n  var buttonBorderIsWhite = palette.neutralTertiary;\n  // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n  var calculatedBorderWidth = borderWidth ? borderWidth : width < CELL_BORDER_BREAKPOINT ? SMALL_BORDER : LARGE_BORDER;\n  return {\n    // this is a button that wraps the color\n    colorCell: [getFocusStyle(theme, {\n      inset: -1,\n      position: 'relative',\n      highContrastStyle: cellHighContrastFocus\n    }), {\n      backgroundColor: semanticColors.bodyBackground,\n      padding: 0,\n      position: 'relative',\n      boxSizing: 'border-box',\n      display: 'inline-block',\n      cursor: 'pointer',\n      userSelect: 'none',\n      borderRadius: 0,\n      border: 'none',\n      height: height,\n      width: width\n    }, !circle && {\n      selectors: (_a = {}, _a[\".\" + IsFocusVisibleClassName + \" &:focus::after\"] = {\n        // -1px so that we don't increase visually the size of the cell.\n        outlineOffset: calculatedBorderWidth - 1 + \"px\"\n      }, _a)\n    },\n    // In focus state for circle we want a round border which is not possible with outline.\n    circle && {\n      borderRadius: '50%',\n      selectors: (_b = {}, _b[\".\" + IsFocusVisibleClassName + \" &:focus::after\"] = {\n        outline: 'none',\n        borderColor: semanticColors.focusBorder,\n        borderRadius: '50%',\n        left: -calculatedBorderWidth,\n        right: -calculatedBorderWidth,\n        top: -calculatedBorderWidth,\n        bottom: -calculatedBorderWidth,\n        selectors: (_c = {}, _c[HighContrastSelector] = {\n          outline: \"1px solid ButtonText\"\n        }, _c)\n      }, _b)\n    }, selected && {\n      padding: DIVIDING_PADDING,\n      border: calculatedBorderWidth + \"px solid \" + buttonBorderChecked,\n      selectors: (_d = {}, _d['&:hover::before'] = {\n        content: '\"\"',\n        height: height,\n        width: width,\n        position: 'absolute',\n        top: -calculatedBorderWidth,\n        left: -calculatedBorderWidth,\n        borderRadius: circle ? '50%' : 'default',\n        boxShadow: \"inset 0 0 0 1px \" + buttonBorderCheckedHovered\n      }, _d)\n    }, !selected && {\n      selectors: (_e = {}, _e['&:hover, &:active, &:focus'] = {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: DIVIDING_PADDING,\n        border: calculatedBorderWidth + \"px solid \" + buttonBorderHovered\n      }, _e['&:focus'] = {\n        borderColor: semanticColors.bodyBackground,\n        padding: 0,\n        selectors: {\n          ':hover': {\n            borderColor: theme.palette.neutralLight,\n            padding: DIVIDING_PADDING\n          }\n        }\n      }, _e)\n    }, disabled && {\n      color: semanticColors.disabledBodyText,\n      pointerEvents: 'none',\n      opacity: 0.3\n    }, isWhite && !selected && {\n      // fake a border for white\n      backgroundColor: buttonBorderIsWhite,\n      padding: 1\n    }],\n    // the <svg> that holds the color\n    svg: [{\n      width: '100%',\n      height: '100%'\n    }, circle && {\n      borderRadius: '50%'\n    }]\n  };\n};","map":{"version":3,"sources":["components/SwatchColorPicker/ColorPickerGridCell.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { IsFocusVisibleClassName } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle } from '../../Styling';\nimport { IColorPickerGridCellStyleProps, IColorPickerGridCellStyles } from './ColorPickerGridCell.types';\n\n// Size breakpoint when the default border width changes from 2px to 4px.\nconst CELL_BORDER_BREAKPOINT = 24;\nconst LARGE_BORDER = 4;\nconst SMALL_BORDER = 2;\nconst DIVIDING_PADDING = 2;\nconst DEFAULT_CELL_SIZE = 20;\n\nconst cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText',\n};\n\nexport const getStyles = (props: IColorPickerGridCellStyleProps): IColorPickerGridCellStyles => {\n  const {\n    theme,\n    disabled,\n    selected,\n    circle,\n    isWhite,\n    height = DEFAULT_CELL_SIZE,\n    width = DEFAULT_CELL_SIZE,\n    borderWidth,\n  } = props;\n  const { semanticColors, palette } = theme;\n\n  const buttonBorderHovered = palette.neutralLighter;\n  const buttonBorderChecked = palette.neutralLight;\n  const buttonBorderCheckedHovered = palette.neutralSecondary;\n  const buttonBorderIsWhite = palette.neutralTertiary;\n\n  // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n  const calculatedBorderWidth = borderWidth\n    ? borderWidth\n    : width < CELL_BORDER_BREAKPOINT\n    ? SMALL_BORDER\n    : LARGE_BORDER;\n\n  return {\n    // this is a button that wraps the color\n    colorCell: [\n      getFocusStyle(theme, { inset: -1, position: 'relative', highContrastStyle: cellHighContrastFocus }),\n      {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: 0,\n        position: 'relative',\n        boxSizing: 'border-box',\n        display: 'inline-block',\n        cursor: 'pointer',\n        userSelect: 'none',\n        borderRadius: 0,\n        border: 'none',\n        height: height,\n        width: width,\n      },\n      !circle && {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            // -1px so that we don't increase visually the size of the cell.\n            outlineOffset: `${calculatedBorderWidth - 1}px`,\n          },\n        },\n      },\n      // In focus state for circle we want a round border which is not possible with outline.\n      circle && {\n        borderRadius: '50%',\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            outline: 'none',\n            borderColor: semanticColors.focusBorder,\n            borderRadius: '50%',\n            left: -calculatedBorderWidth,\n            right: -calculatedBorderWidth,\n            top: -calculatedBorderWidth,\n            bottom: -calculatedBorderWidth,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: `1px solid ButtonText`,\n              },\n            },\n          },\n        },\n      },\n      selected && {\n        padding: DIVIDING_PADDING,\n        border: `${calculatedBorderWidth}px solid ${buttonBorderChecked}`,\n        selectors: {\n          ['&:hover::before']: {\n            content: '\"\"',\n            height: height,\n            width: width,\n            position: 'absolute',\n            top: -calculatedBorderWidth,\n            left: -calculatedBorderWidth,\n            borderRadius: circle ? '50%' : 'default',\n            boxShadow: `inset 0 0 0 1px ${buttonBorderCheckedHovered}`,\n          },\n        },\n      },\n      !selected && {\n        selectors: {\n          ['&:hover, &:active, &:focus']: {\n            backgroundColor: semanticColors.bodyBackground, // overwrite white's override\n            padding: DIVIDING_PADDING,\n            border: `${calculatedBorderWidth}px solid ${buttonBorderHovered}`,\n          },\n          ['&:focus']: {\n            borderColor: semanticColors.bodyBackground,\n            padding: 0,\n            selectors: {\n              ':hover': {\n                borderColor: theme.palette.neutralLight,\n                padding: DIVIDING_PADDING,\n              },\n            },\n          },\n        },\n      },\n      disabled && {\n        color: semanticColors.disabledBodyText,\n        pointerEvents: 'none',\n        opacity: 0.3,\n      },\n      isWhite &&\n        !selected && {\n          // fake a border for white\n          backgroundColor: buttonBorderIsWhite,\n          padding: 1,\n        },\n    ],\n    // the <svg> that holds the color\n    svg: [\n      {\n        width: '100%',\n        height: '100%',\n      },\n      circle && {\n        borderRadius: '50%',\n      },\n    ],\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}