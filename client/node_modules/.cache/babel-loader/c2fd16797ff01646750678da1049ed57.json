{"ast":null,"code":"/**\n * Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged\n * together in the order provided. If an object creates a circular reference, it will assign the\n * original reference.\n */\nexport function merge(target) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n    var arg = args_1[_a];\n    _merge(target || {}, arg);\n  }\n  return target;\n}\n/**\n * The _merge helper iterates through all props on source and assigns them to target.\n * When the value is an object, we will create a deep clone of the object. However if\n * there is a circular reference, the value will not be deep cloned and will persist\n * the reference.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _merge(target, source, circularReferences) {\n  if (circularReferences === void 0) {\n    circularReferences = [];\n  }\n  circularReferences.push(source);\n  for (var name_1 in source) {\n    if (source.hasOwnProperty(name_1)) {\n      if (name_1 !== '__proto__' && name_1 !== 'constructor' && name_1 !== 'prototype') {\n        var value = source[name_1];\n        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n          var isCircularReference = circularReferences.indexOf(value) > -1;\n          target[name_1] = isCircularReference ? value : _merge(target[name_1] || {}, value, circularReferences);\n        } else {\n          target[name_1] = value;\n        }\n      }\n    }\n  }\n  circularReferences.pop();\n  return target;\n}","map":{"version":3,"sources":["merge.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AACH,OAAM,SAAU,KAAK,CAAS,MAAkB,EAAA;EAAE,IAAA,IAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAkD,EAAlD,EAAA,GAAA,SAAA,CAAA,MAAkD,EAAlD,EAAA,EAAkD,EAAA;IAAlD,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAChD,KAAkB,IAAA,EAAA,GAAA,CAAI,EAAJ,MAAA,GAAA,IAAI,EAAJ,EAAA,GAAA,MAAA,CAAA,MAAI,EAAJ,EAAA,EAAI,EAAE;IAAnB,IAAM,GAAG,GAAA,MAAA,CAAA,EAAA,CAAA;IACZ,MAAM,CAAC,MAAM,IAAI,CAAA,CAAE,EAAE,GAAiB,CAAC;EACxC;EAED,OAAO,MAAW;AACpB;AAEA;;;;;AAKG;AACH;AACA,SAAS,MAAM,CAAmB,MAAS,EAAE,MAAS,EAAE,kBAA8B,EAAA;EAA9B,IAAA,kBAAA,KAAA,KAAA,CAAA,EAAA;IAAA,kBAAA,GAAA,EAA8B;EAAA;EACpF,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC;EAE/B,KAAK,IAAI,MAAI,IAAI,MAAM,EAAE;IACvB,IAAI,MAAM,CAAC,cAAc,CAAC,MAAI,CAAC,EAAE;MAC/B,IAAI,MAAI,KAAK,WAAW,IAAI,MAAI,KAAK,aAAa,IAAI,MAAI,KAAK,WAAW,EAAE;QAC1E,IAAM,KAAK,GAAgC,MAAM,CAAC,MAAI,CAAC;QACvD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;UACxE,IAAM,mBAAmB,GAAG,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;UAClE,MAAM,CAAC,MAAI,CAAC,GAAI,mBAAmB,GAC/B,KAAK,GACL,MAAM,CAAC,MAAM,CAAC,MAAI,CAAC,IAAI,CAAA,CAAE,EAAE,KAAK,EAAE,kBAAkB,CAAiC;SAC1F,MAAM;UACL,MAAM,CAAC,MAAI,CAAC,GAAG,KAAK;QACrB;MACF;IACF;EACF;EAED,kBAAkB,CAAC,GAAG,CAAA,CAAE;EAExB,OAAO,MAAM;AACf","sourcesContent":["/**\n * Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged\n * together in the order provided. If an object creates a circular reference, it will assign the\n * original reference.\n */\nexport function merge<T = {}>(target: Partial<T>, ...args: (Partial<T> | null | undefined | false)[]): T {\n  for (const arg of args) {\n    _merge(target || {}, arg as Partial<T>);\n  }\n\n  return target as T;\n}\n\n/**\n * The _merge helper iterates through all props on source and assigns them to target.\n * When the value is an object, we will create a deep clone of the object. However if\n * there is a circular reference, the value will not be deep cloned and will persist\n * the reference.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _merge<T extends Object>(target: T, source: T, circularReferences: any[] = []): T {\n  circularReferences.push(source);\n\n  for (let name in source) {\n    if (source.hasOwnProperty(name)) {\n      if (name !== '__proto__' && name !== 'constructor' && name !== 'prototype') {\n        const value: T[Extract<keyof T, string>] = source[name];\n        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n          const isCircularReference = circularReferences.indexOf(value) > -1;\n          target[name] = (isCircularReference\n            ? value\n            : _merge(target[name] || {}, value, circularReferences)) as T[Extract<keyof T, string>];\n        } else {\n          target[name] = value;\n        }\n      }\n    }\n  }\n\n  circularReferences.pop();\n\n  return target;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}