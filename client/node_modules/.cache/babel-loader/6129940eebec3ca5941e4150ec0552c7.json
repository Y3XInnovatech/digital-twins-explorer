{"ast":null,"code":"/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   */\n  constructor(prefix) {\n    this.prefix = prefix;\n    this.counter = 0;\n    this.existing = {};\n  }\n\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n  clone() {\n    const copy = new IdentifierIssuer(this.prefix);\n    copy.counter = this.counter;\n    copy.existing = util.clone(this.existing);\n    return copy;\n  }\n\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n  getId(old) {\n    // return existing old identifier\n    if (old && old in this.existing) {\n      return this.existing[old];\n    }\n\n    // get next identifier\n    const identifier = this.prefix + this.counter;\n    this.counter += 1;\n\n    // save mapping\n    if (old) {\n      this.existing[old] = identifier;\n    }\n    return identifier;\n  }\n\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n  hasId(old) {\n    return old in this.existing;\n  }\n};","map":{"version":3,"names":["util","require","module","exports","IdentifierIssuer","constructor","prefix","counter","existing","clone","copy","getId","old","identifier","hasId"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/rdf-canonize/lib/IdentifierIssuer.js"],"sourcesContent":["/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   */\n  constructor(prefix) {\n    this.prefix = prefix;\n    this.counter = 0;\n    this.existing = {};\n  }\n\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n  clone() {\n    const copy = new IdentifierIssuer(this.prefix);\n    copy.counter = this.counter;\n    copy.existing = util.clone(this.existing);\n    return copy;\n  }\n\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n  getId(old) {\n    // return existing old identifier\n    if(old && old in this.existing) {\n      return this.existing[old];\n    }\n\n    // get next identifier\n    const identifier = this.prefix + this.counter;\n    this.counter += 1;\n\n    // save mapping\n    if(old) {\n      this.existing[old] = identifier;\n    }\n\n    return identifier;\n  }\n\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n  hasId(old) {\n    return (old in this.existing);\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE9BC,MAAM,CAACC,OAAO,GAAG,MAAMC,gBAAgB,CAAC;EACtC;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACEC,KAAKA,CAAA,EAAG;IACN,MAAMC,IAAI,GAAG,IAAIN,gBAAgB,CAAC,IAAI,CAACE,MAAM,CAAC;IAC9CI,IAAI,CAACH,OAAO,GAAG,IAAI,CAACA,OAAO;IAC3BG,IAAI,CAACF,QAAQ,GAAGR,IAAI,CAACS,KAAK,CAAC,IAAI,CAACD,QAAQ,CAAC;IACzC,OAAOE,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAACC,GAAG,EAAE;IACT;IACA,IAAGA,GAAG,IAAIA,GAAG,IAAI,IAAI,CAACJ,QAAQ,EAAE;MAC9B,OAAO,IAAI,CAACA,QAAQ,CAACI,GAAG,CAAC;IAC3B;;IAEA;IACA,MAAMC,UAAU,GAAG,IAAI,CAACP,MAAM,GAAG,IAAI,CAACC,OAAO;IAC7C,IAAI,CAACA,OAAO,IAAI,CAAC;;IAEjB;IACA,IAAGK,GAAG,EAAE;MACN,IAAI,CAACJ,QAAQ,CAACI,GAAG,CAAC,GAAGC,UAAU;IACjC;IAEA,OAAOA,UAAU;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAACF,GAAG,EAAE;IACT,OAAQA,GAAG,IAAI,IAAI,CAACJ,QAAQ;EAC9B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}