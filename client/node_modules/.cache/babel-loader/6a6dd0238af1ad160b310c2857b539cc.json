{"ast":null,"code":"import { L as InteractionRequiredAuthError, P as PublicClientApplication } from './OatPublicUtils-7ccceba5.js';\nvar MsalAuthService = /** @class */function () {\n  function MsalAuthService(environmentToConstantMapping) {\n    var _this = this;\n    this.getTokenCalls = [];\n    this.gettingToken = false;\n    this.isLoggingIn = true;\n    this.executeGetTokenSequentially = true;\n    this.environmentToConstantMapping = {\n      authority: 'https://login.microsoftonline.com/organizations',\n      // valid redirect URI for this is client ID is https://adtexplorer-tsi-local.azurewebsites.net\n      // modify hosts file accordingly\n      clientId: 'e7e88070-28a1-43a3-9704-d8b986eb5f60',\n      scope: 'https://api.timeseries.azure.com/.default',\n      redirectUri: window.location.protocol + '//' + window.location.hostname\n      // // The resource URI for ADT should NOT end with a trailing slash as it will cause\n      // // authentication to fail.\n      // scope: 'https://digitaltwins.azure.net/.default'\n    };\n    this.login = function () {\n      _this.isLoggingIn = true;\n      var accounts = _this.authContext.getAllAccounts();\n      if (accounts.length) {\n        _this.authContext.setActiveAccount(accounts[0]);\n        _this.isLoggingIn = false;\n        _this.shiftAndExecuteGetTokenCall();\n      } else {\n        _this.authContext.loginPopup().then(function () {\n          // In case multiple accounts exist, you can select\n          var currentAccounts = _this.authContext.getAllAccounts();\n          _this.authContext.setActiveAccount(currentAccounts[0]);\n          _this.isLoggingIn = false;\n          _this.shiftAndExecuteGetTokenCall();\n        }).catch(function (error) {\n          //login failure\n          alert(error);\n        });\n      }\n    };\n    this.logout = function () {\n      _this.authContext.logout();\n    };\n    this.shiftAndExecuteGetTokenCall = function () {\n      var call = _this.getTokenCalls.shift();\n      if (call) {\n        call.call();\n      }\n    };\n    this.createGetTokenCall = function (scope, resolve, reject, allowParallelGetTokenAfterComplete) {\n      var resolveToken = function (_a) {\n        var accessToken = _a.accessToken;\n        if (allowParallelGetTokenAfterComplete) {\n          _this.executeGetTokenSequentially = false;\n        }\n        _this.gettingToken = false;\n        resolve(accessToken);\n        _this.shiftAndExecuteGetTokenCall();\n      };\n      return function () {\n        _this.gettingToken = true;\n        _this.authContext.acquireTokenSilent(scope).then(resolveToken).catch(function (error) {\n          if (error instanceof InteractionRequiredAuthError) {\n            // popups are likely to be blocked by the browser\n            // notify the user that they should enable them\n            alert('Some authentication flows will require pop-ups, please make sure popups are enabled for this site.');\n            _this.authContext.acquireTokenPopup(scope).then(resolveToken).catch(function (error) {\n              console.error(error);\n              resolveToken(error);\n            });\n          } else {\n            console.error(error);\n            resolveToken(error);\n          }\n        });\n      };\n    };\n    this.getGenericTokenPromiseCallback = function (scope, allowParallelGetTokenAfterComplete) {\n      if (allowParallelGetTokenAfterComplete === void 0) {\n        allowParallelGetTokenAfterComplete = false;\n      }\n      scope.authority = \"\" + _this.environmentToConstantMapping.authority;\n      return function (resolve, reject) {\n        var getTokenCall = _this.createGetTokenCall(scope, resolve, reject, allowParallelGetTokenAfterComplete);\n        _this.getTokenCalls.push(getTokenCall);\n        if ((!_this.gettingToken || !_this.executeGetTokenSequentially) && !_this.isLoggingIn) {\n          _this.shiftAndExecuteGetTokenCall();\n        }\n      };\n    };\n    this.getToken = function (tokenFor) {\n      var scope;\n      if (tokenFor === 'azureManagement') {\n        scope = 'https://management.azure.com//.default';\n        return new Promise(_this.getGenericTokenPromiseCallback({\n          scopes: [scope]\n        }, true));\n      } else if (tokenFor === 'adx') {\n        scope = 'https://help.kusto.windows.net/user_impersonation';\n        return new Promise(_this.getGenericTokenPromiseCallback({\n          scopes: [scope]\n        }, true));\n      } else if (tokenFor === 'storage') {\n        scope = 'https://storage.azure.com/user_impersonation';\n        return new Promise(_this.getGenericTokenPromiseCallback({\n          scopes: [scope]\n        }, true));\n      } else {\n        scope = _this.environmentToConstantMapping.scope;\n        return new Promise(_this.getGenericTokenPromiseCallback({\n          scopes: [scope]\n        }));\n      }\n    };\n    this.environmentToConstantMapping = environmentToConstantMapping || this.environmentToConstantMapping;\n    this.authContextConfig = {\n      auth: {\n        clientId: this.environmentToConstantMapping.clientId,\n        authority: \"\" + this.environmentToConstantMapping.authority,\n        redirectUri: this.environmentToConstantMapping.redirectUri,\n        navigateToLoginRequestUrl: true\n      },\n      cache: {\n        cacheLocation: 'localStorage',\n        storeAuthStateInCookie: true\n      }\n    };\n    this.authContext = new PublicClientApplication(this.authContextConfig);\n  }\n  return MsalAuthService;\n}();\nexport { MsalAuthService as M };","map":{"version":3,"sources":["../../src/Models/Services/MsalAuthService.ts"],"names":["Msal.PublicClientApplication","Msal.InteractionRequiredAuthError"],"mappings":"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","sourcesContent":["import * as Msal from '@azure/msal-browser';\nimport {\n    IEnvironmentToConstantMapping,\n    IAuthService\n} from '../Constants/Interfaces';\n\nexport default class MsalAuthService implements IAuthService {\n    private getTokenCalls = [];\n    private gettingToken = false;\n    private isLoggingIn = true;\n    private executeGetTokenSequentially = true;\n    private authContextConfig;\n    private authContext;\n\n    private environmentToConstantMapping: IEnvironmentToConstantMapping = {\n        authority: 'https://login.microsoftonline.com/organizations',\n\n        // valid redirect URI for this is client ID is https://adtexplorer-tsi-local.azurewebsites.net\n        // modify hosts file accordingly\n        clientId: 'e7e88070-28a1-43a3-9704-d8b986eb5f60',\n\n        scope: 'https://api.timeseries.azure.com/.default',\n\n        redirectUri: window.location.protocol + '//' + window.location.hostname\n\n        // // The resource URI for ADT should NOT end with a trailing slash as it will cause\n        // // authentication to fail.\n        // scope: 'https://digitaltwins.azure.net/.default'\n    };\n\n    constructor(environmentToConstantMapping?: IEnvironmentToConstantMapping) {\n        this.environmentToConstantMapping =\n            environmentToConstantMapping || this.environmentToConstantMapping;\n\n        this.authContextConfig = {\n            auth: {\n                clientId: this.environmentToConstantMapping.clientId,\n                authority: `${this.environmentToConstantMapping.authority}`,\n                redirectUri: this.environmentToConstantMapping.redirectUri,\n                navigateToLoginRequestUrl: true\n            },\n            cache: {\n                cacheLocation: 'localStorage',\n                storeAuthStateInCookie: true\n            }\n        };\n        this.authContext = new Msal.PublicClientApplication(\n            this.authContextConfig\n        );\n    }\n\n    public login = () => {\n        this.isLoggingIn = true;\n\n        const accounts = this.authContext.getAllAccounts();\n        if (accounts.length) {\n            this.authContext.setActiveAccount(accounts[0]);\n            this.isLoggingIn = false;\n            this.shiftAndExecuteGetTokenCall();\n        } else {\n            this.authContext\n                .loginPopup()\n                .then(() => {\n                    // In case multiple accounts exist, you can select\n                    const currentAccounts = this.authContext.getAllAccounts();\n                    this.authContext.setActiveAccount(currentAccounts[0]);\n                    this.isLoggingIn = false;\n                    this.shiftAndExecuteGetTokenCall();\n                })\n                .catch(function (error) {\n                    //login failure\n                    alert(error);\n                });\n        }\n    };\n\n    private logout = () => {\n        this.authContext.logout();\n    };\n\n    private shiftAndExecuteGetTokenCall = () => {\n        const call = this.getTokenCalls.shift();\n        if (call) {\n            call.call();\n        }\n    };\n\n    private createGetTokenCall = (\n        scope,\n        resolve,\n        reject,\n        allowParallelGetTokenAfterComplete\n    ) => {\n        const resolveToken = ({ accessToken }) => {\n            if (allowParallelGetTokenAfterComplete) {\n                this.executeGetTokenSequentially = false;\n            }\n            this.gettingToken = false;\n            resolve(accessToken);\n            this.shiftAndExecuteGetTokenCall();\n        };\n\n        return () => {\n            this.gettingToken = true;\n            this.authContext\n                .acquireTokenSilent(scope)\n                .then(resolveToken)\n                .catch((error) => {\n                    if (error instanceof Msal.InteractionRequiredAuthError) {\n                        // popups are likely to be blocked by the browser\n                        // notify the user that they should enable them\n                        alert(\n                            'Some authentication flows will require pop-ups, please make sure popups are enabled for this site.'\n                        );\n                        this.authContext\n                            .acquireTokenPopup(scope)\n                            .then(resolveToken)\n                            .catch((error) => {\n                                console.error(error);\n                                resolveToken(error);\n                            });\n                    } else {\n                        console.error(error);\n                        resolveToken(error);\n                    }\n                });\n        };\n    };\n\n    private getGenericTokenPromiseCallback = (\n        scope,\n        allowParallelGetTokenAfterComplete = false\n    ) => {\n        scope.authority = `${this.environmentToConstantMapping.authority}`;\n        return (resolve, reject) => {\n            const getTokenCall = this.createGetTokenCall(\n                scope,\n                resolve,\n                reject,\n                allowParallelGetTokenAfterComplete\n            );\n            this.getTokenCalls.push(getTokenCall);\n            if (\n                (!this.gettingToken || !this.executeGetTokenSequentially) &&\n                !this.isLoggingIn\n            ) {\n                this.shiftAndExecuteGetTokenCall();\n            }\n        };\n    };\n\n    public getToken = (tokenFor?: 'azureManagement' | 'adx' | 'storage') => {\n        let scope;\n        if (tokenFor === 'azureManagement') {\n            scope = 'https://management.azure.com//.default';\n            return new Promise(\n                this.getGenericTokenPromiseCallback(\n                    {\n                        scopes: [scope]\n                    },\n                    true\n                )\n            ) as Promise<string>;\n        } else if (tokenFor === 'adx') {\n            scope = 'https://help.kusto.windows.net/user_impersonation';\n            return new Promise(\n                this.getGenericTokenPromiseCallback(\n                    {\n                        scopes: [scope]\n                    },\n                    true\n                )\n            ) as Promise<string>;\n        } else if (tokenFor === 'storage') {\n            scope = 'https://storage.azure.com/user_impersonation';\n            return new Promise(\n                this.getGenericTokenPromiseCallback(\n                    {\n                        scopes: [scope]\n                    },\n                    true\n                )\n            ) as Promise<string>;\n        } else {\n            scope = this.environmentToConstantMapping.scope;\n            return new Promise(\n                this.getGenericTokenPromiseCallback({\n                    scopes: [scope]\n                })\n            ) as Promise<string>;\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}