{"ast":null,"code":"import { getFocusStyle, hiddenContentStyle, HighContrastSelector, getGlobalClassNames } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-RatingStar-root',\n  rootIsSmall: 'ms-RatingStar-root--small',\n  rootIsLarge: 'ms-RatingStar-root--large',\n  ratingStar: 'ms-RatingStar-container',\n  ratingStarBack: 'ms-RatingStar-back',\n  ratingStarFront: 'ms-RatingStar-front',\n  ratingButton: 'ms-Rating-button',\n  ratingStarIsSmall: 'ms-Rating--small',\n  ratingStartIsLarge: 'ms-Rating--large',\n  labelText: 'ms-Rating-labelText',\n  ratingFocusZone: 'ms-Rating-focuszone'\n};\nfunction _getColorWithHighContrast(color, highContrastColor) {\n  var _a;\n  return {\n    color: color,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: highContrastColor\n    }, _a)\n  };\n}\nexport function getStyles(props) {\n  var disabled = props.disabled,\n    readOnly = props.readOnly,\n    theme = props.theme;\n  var semanticColors = theme.semanticColors,\n    palette = theme.palette;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var ratingSmallIconSize = 16;\n  var ratingLargeIconSize = 20;\n  var ratingVerticalPadding = 8;\n  var ratingHorizontalPadding = 2;\n  var ratingStarUncheckedColor = palette.neutralSecondary;\n  var ratingStarUncheckedHoverColor = palette.themePrimary;\n  var ratingStarUncheckedHoverSelectedColor = palette.themeDark;\n  var ratingStarCheckedColor = palette.neutralPrimary;\n  var ratingStarDisabledColor = semanticColors.disabledBodySubtext;\n  return {\n    root: [classNames.root, theme.fonts.medium, !disabled && !readOnly && {\n      selectors: {\n        // This is part 1 of highlighting all stars up to the one the user is hovering over\n        '&:hover': {\n          selectors: {\n            '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight')\n          }\n        }\n      }\n    }],\n    rootIsSmall: [classNames.rootIsSmall, {\n      height: ratingSmallIconSize + ratingVerticalPadding * 2 + 'px'\n    }],\n    rootIsLarge: [classNames.rootIsLarge, {\n      height: ratingLargeIconSize + ratingVerticalPadding * 2 + 'px'\n    }],\n    ratingStar: [classNames.ratingStar, {\n      display: 'inline-block',\n      position: 'relative',\n      height: 'inherit'\n    }],\n    ratingStarBack: [classNames.ratingStarBack, {\n      // TODO: Use a proper semantic color for this\n      color: ratingStarUncheckedColor,\n      width: '100%'\n    }, disabled && _getColorWithHighContrast(ratingStarDisabledColor, 'GrayText')],\n    ratingStarFront: [classNames.ratingStarFront, {\n      position: 'absolute',\n      height: '100 %',\n      left: '0',\n      top: '0',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      overflow: 'hidden'\n    }, _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight')],\n    ratingButton: [getFocusStyle(theme), classNames.ratingButton, {\n      backgroundColor: 'transparent',\n      padding: ratingVerticalPadding + \"px \" + ratingHorizontalPadding + \"px\",\n      boxSizing: 'content-box',\n      margin: '0px',\n      border: 'none',\n      cursor: 'pointer',\n      selectors: {\n        '&:disabled': {\n          cursor: 'default'\n        },\n        '&[disabled]': {\n          cursor: 'default'\n        }\n      }\n    }, !disabled && !readOnly && {\n      selectors: {\n        // This is part 2 of highlighting all stars up to the one the user is hovering over\n        '&:hover ~ .ms-Rating-button': {\n          selectors: {\n            '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText'),\n            '.ms-RatingStar-front': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText')\n          }\n        },\n        '&:hover': {\n          selectors: {\n            '.ms-RatingStar-back': {\n              color: ratingStarUncheckedHoverColor\n            },\n            '.ms-RatingStar-front': {\n              color: ratingStarUncheckedHoverSelectedColor\n            }\n          }\n        }\n      }\n    }, disabled && {\n      cursor: 'default'\n    }],\n    ratingStarIsSmall: [classNames.ratingStarIsSmall, {\n      fontSize: ratingSmallIconSize + 'px',\n      lineHeight: ratingSmallIconSize + 'px',\n      height: ratingSmallIconSize + 'px'\n    }],\n    ratingStarIsLarge: [classNames.ratingStartIsLarge, {\n      fontSize: ratingLargeIconSize + 'px',\n      lineHeight: ratingLargeIconSize + 'px',\n      height: ratingLargeIconSize + 'px'\n    }],\n    labelText: [classNames.labelText, hiddenContentStyle],\n    ratingFocusZone: [getFocusStyle(theme), classNames.ratingFocusZone, {\n      display: 'inline-block'\n    }]\n  };\n}","map":{"version":3,"sources":["components/Rating/Rating.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { getFocusStyle, hiddenContentStyle, HighContrastSelector, getGlobalClassNames } from '../../Styling';\nimport { IRatingStyleProps, IRatingStyles } from './Rating.types';\n\nconst GlobalClassNames = {\n  root: 'ms-RatingStar-root',\n  rootIsSmall: 'ms-RatingStar-root--small',\n  rootIsLarge: 'ms-RatingStar-root--large',\n  ratingStar: 'ms-RatingStar-container',\n  ratingStarBack: 'ms-RatingStar-back',\n  ratingStarFront: 'ms-RatingStar-front',\n  ratingButton: 'ms-Rating-button',\n  ratingStarIsSmall: 'ms-Rating--small',\n  ratingStartIsLarge: 'ms-Rating--large',\n  labelText: 'ms-Rating-labelText',\n  ratingFocusZone: 'ms-Rating-focuszone',\n};\n\nfunction _getColorWithHighContrast(color: string, highContrastColor: string) {\n  return {\n    color: color,\n    selectors: {\n      [HighContrastSelector]: {\n        color: highContrastColor,\n      },\n    },\n  };\n}\n\nexport function getStyles(props: IRatingStyleProps): IRatingStyles {\n  const { disabled, readOnly, theme } = props;\n\n  const { semanticColors, palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const ratingSmallIconSize = 16;\n  const ratingLargeIconSize = 20;\n  const ratingVerticalPadding = 8;\n  const ratingHorizontalPadding = 2;\n\n  const ratingStarUncheckedColor = palette.neutralSecondary;\n  const ratingStarUncheckedHoverColor = palette.themePrimary;\n  const ratingStarUncheckedHoverSelectedColor = palette.themeDark;\n  const ratingStarCheckedColor = palette.neutralPrimary;\n  const ratingStarDisabledColor = semanticColors.disabledBodySubtext;\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      !disabled &&\n        !readOnly && {\n          selectors: {\n            // This is part 1 of highlighting all stars up to the one the user is hovering over\n            '&:hover': {\n              selectors: {\n                '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight'),\n              },\n            },\n          },\n        },\n    ],\n    rootIsSmall: [\n      classNames.rootIsSmall,\n      {\n        height: ratingSmallIconSize + ratingVerticalPadding * 2 + 'px',\n      },\n    ],\n    rootIsLarge: [\n      classNames.rootIsLarge,\n      {\n        height: ratingLargeIconSize + ratingVerticalPadding * 2 + 'px',\n      },\n    ],\n    ratingStar: [\n      classNames.ratingStar,\n      {\n        display: 'inline-block',\n        position: 'relative',\n        height: 'inherit',\n      },\n    ],\n    ratingStarBack: [\n      classNames.ratingStarBack,\n      {\n        // TODO: Use a proper semantic color for this\n        color: ratingStarUncheckedColor,\n        width: '100%',\n      },\n      disabled && _getColorWithHighContrast(ratingStarDisabledColor, 'GrayText'),\n    ],\n    ratingStarFront: [\n      classNames.ratingStarFront,\n      {\n        position: 'absolute',\n        height: '100 %',\n        left: '0',\n        top: '0',\n        textAlign: 'center',\n        verticalAlign: 'middle',\n        overflow: 'hidden',\n      },\n      _getColorWithHighContrast(ratingStarCheckedColor, 'Highlight'),\n    ],\n    ratingButton: [\n      getFocusStyle(theme),\n      classNames.ratingButton,\n      {\n        backgroundColor: 'transparent',\n        padding: `${ratingVerticalPadding}px ${ratingHorizontalPadding}px`,\n        boxSizing: 'content-box',\n        margin: '0px',\n        border: 'none',\n        cursor: 'pointer',\n        selectors: {\n          '&:disabled': {\n            cursor: 'default',\n          },\n          '&[disabled]': {\n            cursor: 'default',\n          },\n        },\n      },\n      !disabled &&\n        !readOnly && {\n          selectors: {\n            // This is part 2 of highlighting all stars up to the one the user is hovering over\n            '&:hover ~ .ms-Rating-button': {\n              selectors: {\n                '.ms-RatingStar-back': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText'),\n                '.ms-RatingStar-front': _getColorWithHighContrast(ratingStarUncheckedColor, 'WindowText'),\n              },\n            },\n            '&:hover': {\n              selectors: {\n                '.ms-RatingStar-back': {\n                  color: ratingStarUncheckedHoverColor,\n                },\n                '.ms-RatingStar-front': {\n                  color: ratingStarUncheckedHoverSelectedColor,\n                },\n              },\n            },\n          },\n        },\n      disabled && {\n        cursor: 'default',\n      },\n    ],\n    ratingStarIsSmall: [\n      classNames.ratingStarIsSmall,\n      {\n        fontSize: ratingSmallIconSize + 'px',\n        lineHeight: ratingSmallIconSize + 'px',\n        height: ratingSmallIconSize + 'px',\n      },\n    ],\n    ratingStarIsLarge: [\n      classNames.ratingStartIsLarge,\n      {\n        fontSize: ratingLargeIconSize + 'px',\n        lineHeight: ratingLargeIconSize + 'px',\n        height: ratingLargeIconSize + 'px',\n      },\n    ],\n    labelText: [classNames.labelText, hiddenContentStyle],\n    ratingFocusZone: [\n      getFocusStyle(theme),\n      classNames.ratingFocusZone,\n      {\n        display: 'inline-block',\n      },\n    ],\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}