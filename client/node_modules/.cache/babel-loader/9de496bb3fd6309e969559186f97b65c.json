{"ast":null,"code":"// Regex that finds { and } so they can be removed on a lookup for string format\nvar FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n// Regex that finds {#} so it can be replaced by the arguments in string format\nvar FORMAT_REGEX = /\\{\\d+\\}/g;\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function format(s) {\n  var values = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    values[_i - 1] = arguments[_i];\n  }\n  var args = values;\n  // Callback match function\n  function replaceFunc(match) {\n    // looks up in the args\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var replacement = args[match.replace(FORMAT_ARGS_REGEX, '')];\n    // catches undefined in nondebug and null in debug and nondebug\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n    return replacement;\n  }\n  return s.replace(FORMAT_REGEX, replaceFunc);\n}","map":{"version":3,"sources":["string.ts"],"names":[],"mappings":"AAAA;AACA,IAAM,iBAAiB,GAAG,SAAS;AAEnC;AACA,IAAM,YAAY,GAAG,UAAU;AAE/B;;;;;;;;;;;;AAYG;AACH;AACA,OAAM,SAAU,MAAM,CAAC,CAAS,EAAA;EAAE,IAAA,MAAA,GAAA,EAAA;OAAA,IAAA,EAAA,GAAA,CAAgB,EAAhB,EAAA,GAAA,SAAA,CAAA,MAAgB,EAAhB,EAAA,EAAgB,EAAA;IAAhB,MAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;EAChC,IAAI,IAAI,GAAG,MAAM;EACjB;EACA,SAAS,WAAW,CAAC,KAAa,EAAA;IAChC;IACA;IACA,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAQ,CAAC;IAEnE;IACA,IAAI,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,EAAE;MACrD,WAAW,GAAG,EAAE;IACjB;IAED,OAAO,WAAW;EACpB;EACA,OAAO,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,WAAW,CAAC;AAC7C","sourcesContent":["// Regex that finds { and } so they can be removed on a lookup for string format\nconst FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n\n// Regex that finds {#} so it can be replaced by the arguments in string format\nconst FORMAT_REGEX = /\\{\\d+\\}/g;\n\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function format(s: string, ...values: any[]): string {\n  let args = values;\n  // Callback match function\n  function replaceFunc(match: string): string {\n    // looks up in the args\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let replacement = args[match.replace(FORMAT_ARGS_REGEX, '') as any];\n\n    // catches undefined in nondebug and null in debug and nondebug\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n\n    return replacement;\n  }\n  return s.replace(FORMAT_REGEX, replaceFunc);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}