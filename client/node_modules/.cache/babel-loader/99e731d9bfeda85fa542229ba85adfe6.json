{"ast":null,"code":"import { __assign, __decorate, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { Autofill } from '../Autofill/index';\nimport { initializeComponentRef, css, customizable, divProperties, findElementRecursive, findIndex, focusAsync, getId, getNativeProps, isIOS, isMac, KeyCodes, shallowCompare, mergeAriaAttributeValues, warnMutuallyExclusive, Async, EventGroup } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Checkbox } from '../../Checkbox';\nimport { CommandButton, IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { getCaretDownButtonStyles, getOptionStyles, getStyles } from './ComboBox.styles';\nimport { getClassNames, getComboBoxOptionClassNames } from './ComboBox.classNames';\nimport { KeytipData } from '../../KeytipData';\nimport { Label } from '../../Label';\nimport { SelectableOptionMenuItemType, getAllSelectedOptions } from '../../utilities/selectableOption/index';\nvar SearchDirection;\n(function (SearchDirection) {\n  SearchDirection[SearchDirection[\"backward\"] = -1] = \"backward\";\n  SearchDirection[SearchDirection[\"none\"] = 0] = \"none\";\n  SearchDirection[SearchDirection[\"forward\"] = 1] = \"forward\";\n})(SearchDirection || (SearchDirection = {}));\nvar HoverStatus;\n(function (HoverStatus) {\n  /** Used when the user was hovering and has since moused out of the menu items */\n  HoverStatus[HoverStatus[\"clearAll\"] = -2] = \"clearAll\";\n  /** Default \"normal\" state, when no hover has happened or a hover is in progress */\n  HoverStatus[HoverStatus[\"default\"] = -1] = \"default\";\n})(HoverStatus || (HoverStatus = {}));\nvar ScrollIdleDelay = 250; /* ms */\nvar TouchIdleDelay = 500; /* ms */\n/**\n * This is used to clear any pending autocomplete text (used when autocomplete is true and\n * allowFreeform is false)\n */\nvar ReadOnlyPendingAutoCompleteTimeout = 1000; /* ms */\n/**\n * Internal class that is used to wrap all ComboBox options.\n * This is used to customize when we want to rerender components,\n * so we don't rerender every option every time render is executed.\n */\nvar ComboBoxOptionWrapper = /** @class */function (_super) {\n  __extends(ComboBoxOptionWrapper, _super);\n  function ComboBoxOptionWrapper() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ComboBoxOptionWrapper.prototype.render = function () {\n    return this.props.render();\n  };\n  ComboBoxOptionWrapper.prototype.shouldComponentUpdate = function (newProps) {\n    // The render function will always be different, so we ignore that prop\n    return !shallowCompare(__assign(__assign({}, this.props), {\n      render: undefined\n    }), __assign(__assign({}, newProps), {\n      render: undefined\n    }));\n  };\n  return ComboBoxOptionWrapper;\n}(React.Component);\nvar COMPONENT_NAME = 'ComboBox';\nvar ComboBox = /** @class */function (_super) {\n  __extends(ComboBox, _super);\n  function ComboBox(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    /** The input aspect of the comboBox */\n    _this._autofill = React.createRef();\n    /** The wrapping div of the input and button */\n    _this._comboBoxWrapper = React.createRef();\n    /** The callout element */\n    _this._comboBoxMenu = React.createRef();\n    /** The menu item element that is currently selected */\n    _this._selectedElement = React.createRef();\n    /**\n     * {@inheritdoc}\n     */\n    _this.focus = function (shouldOpenOnFocus, useFocusAsync) {\n      if (_this._autofill.current) {\n        if (useFocusAsync) {\n          focusAsync(_this._autofill.current);\n        } else {\n          _this._autofill.current.focus();\n        }\n        if (shouldOpenOnFocus) {\n          _this.setState({\n            isOpen: true\n          });\n        }\n      }\n      // Programatically setting focus means that there is nothing else that needs to be done\n      // Focus is now contained\n      if (!_this._hasFocus()) {\n        _this.setState({\n          focusState: 'focused'\n        });\n      }\n    };\n    /**\n     * Close menu callout if it is open\n     */\n    _this.dismissMenu = function () {\n      var isOpen = _this.state.isOpen;\n      isOpen && _this.setState({\n        isOpen: false\n      });\n    };\n    /**\n     * componentWillReceiveProps handler for the auto fill component\n     * Checks/updates the iput value to set, if needed\n     * @param defaultVisibleValue - the defaultVisibleValue that got passed\n     *  in to the auto fill's componentWillReceiveProps\n     * @returns - the updated value to set, if needed\n     */\n    _this._onUpdateValueInAutofillWillReceiveProps = function () {\n      var comboBox = _this._autofill.current;\n      if (!comboBox) {\n        return null;\n      }\n      if (comboBox.value === null || comboBox.value === undefined) {\n        return null;\n      }\n      var visibleValue = _this._normalizeToString(_this._currentVisibleValue);\n      if (comboBox.value !== visibleValue) {\n        // If visibleValue is empty, ensure that the empty string is used\n        return visibleValue || '';\n      }\n      return comboBox.value;\n    };\n    _this._renderComboBoxWrapper = function (multiselectAccessibleText, errorMessageId, keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n      var _a = _this.props,\n        label = _a.label,\n        disabled = _a.disabled,\n        ariaLabel = _a.ariaLabel,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        required = _a.required,\n        errorMessage = _a.errorMessage,\n        buttonIconProps = _a.buttonIconProps,\n        _b = _a.isButtonAriaHidden,\n        isButtonAriaHidden = _b === void 0 ? true : _b,\n        title = _a.title,\n        placeholderProp = _a.placeholder,\n        tabIndex = _a.tabIndex,\n        autofill = _a.autofill,\n        iconButtonProps = _a.iconButtonProps;\n      var _c = _this.state,\n        isOpen = _c.isOpen,\n        suggestedDisplayValue = _c.suggestedDisplayValue;\n      // If the combobox has focus, is multiselect, and has a display string, then use that placeholder\n      // so that the selected items don't appear to vanish. This is not ideal but it's the only reasonable way\n      // to correct the behavior where the input is cleared so the user can type. If a full refactor is done, then this\n      // should be removed and the multiselect combobox should behave like a picker.\n      var placeholder = _this._hasFocus() && _this.props.multiSelect && multiselectAccessibleText ? multiselectAccessibleText : placeholderProp;\n      return React.createElement(\"div\", {\n        \"data-ktp-target\": keytipAttributes['data-ktp-target'],\n        ref: _this._comboBoxWrapper,\n        id: _this._id + 'wrapper',\n        className: _this._classNames.root\n      }, React.createElement(Autofill, __assign({\n        \"data-ktp-execute-target\": keytipAttributes['data-ktp-execute-target'],\n        \"data-is-interactable\": !disabled,\n        componentRef: _this._autofill,\n        id: _this._id + '-input',\n        className: _this._classNames.input,\n        type: \"text\",\n        onFocus: _this._onFocus,\n        onBlur: _this._onBlur,\n        onKeyDown: _this._onInputKeyDown,\n        onKeyUp: _this._onInputKeyUp,\n        onClick: _this._onAutofillClick,\n        onTouchStart: _this._onTouchStart,\n        onInputValueChange: _this._onInputChange,\n        \"aria-expanded\": isOpen,\n        \"aria-autocomplete\": _this._getAriaAutoCompleteValue(),\n        role: \"combobox\",\n        readOnly: disabled,\n        \"aria-labelledby\": label && _this._id + '-label',\n        \"aria-label\": ariaLabel && !label ? ariaLabel : undefined,\n        \"aria-describedby\": errorMessage !== undefined ? mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'], errorMessageId) : mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby']),\n        \"aria-activedescendant\": _this._getAriaActiveDescendantValue(),\n        \"aria-required\": required,\n        \"aria-disabled\": disabled,\n        \"aria-owns\": isOpen ? _this._id + '-list' : undefined,\n        spellCheck: false,\n        defaultVisibleValue: _this._currentVisibleValue,\n        suggestedDisplayValue: suggestedDisplayValue,\n        updateValueInWillReceiveProps: _this._onUpdateValueInAutofillWillReceiveProps,\n        shouldSelectFullInputValueInComponentDidUpdate: _this._onShouldSelectFullInputValueInAutofillComponentDidUpdate,\n        title: title,\n        preventValueSelection: !_this._hasFocus(),\n        placeholder: placeholder,\n        tabIndex: tabIndex\n      }, autofill)), React.createElement(IconButton, __assign({\n        className: 'ms-ComboBox-CaretDown-button',\n        styles: _this._getCaretButtonStyles(),\n        role: \"presentation\",\n        \"aria-hidden\": isButtonAriaHidden,\n        \"data-is-focusable\": false,\n        tabIndex: -1,\n        onClick: _this._onComboBoxClick,\n        onBlur: _this._onBlur,\n        iconProps: buttonIconProps,\n        disabled: disabled,\n        checked: isOpen\n      }, iconButtonProps)));\n    };\n    /**\n     * componentDidUpdate handler for the auto fill component\n     *\n     * @param defaultVisibleValue - the current defaultVisibleValue in the auto fill's componentDidUpdate\n     * @param suggestedDisplayValue - the current suggestedDisplayValue in the auto fill's componentDidUpdate\n     * @returns - should the full value of the input be selected?\n     * True if the defaultVisibleValue equals the suggestedDisplayValue, false otherwise\n     */\n    _this._onShouldSelectFullInputValueInAutofillComponentDidUpdate = function () {\n      return _this._currentVisibleValue === _this.state.suggestedDisplayValue;\n    };\n    /**\n     * Get the correct value to pass to the input\n     * to show to the user based off of the current props and state\n     * @returns the value to pass to the input\n     */\n    _this._getVisibleValue = function () {\n      var _a = _this.props,\n        text = _a.text,\n        allowFreeform = _a.allowFreeform,\n        autoComplete = _a.autoComplete;\n      var _b = _this.state,\n        selectedIndices = _b.selectedIndices,\n        currentPendingValueValidIndex = _b.currentPendingValueValidIndex,\n        currentOptions = _b.currentOptions,\n        currentPendingValue = _b.currentPendingValue,\n        suggestedDisplayValue = _b.suggestedDisplayValue,\n        isOpen = _b.isOpen;\n      var currentPendingIndexValid = _this._indexWithinBounds(currentOptions, currentPendingValueValidIndex);\n      // If the user passed is a value prop, use that\n      // unless we are open and have a valid current pending index\n      if (!(isOpen && currentPendingIndexValid) && text && (currentPendingValue === null || currentPendingValue === undefined)) {\n        return text;\n      }\n      if (_this.props.multiSelect) {\n        // Multi-select\n        if (_this._hasFocus()) {\n          var index = -1;\n          if (autoComplete === 'on' && currentPendingIndexValid) {\n            index = currentPendingValueValidIndex;\n          }\n          return _this._getPendingString(currentPendingValue, currentOptions, index);\n        } else {\n          return _this._getMultiselectDisplayString(selectedIndices, currentOptions, suggestedDisplayValue);\n        }\n      } else {\n        // Single-select\n        var index = _this._getFirstSelectedIndex();\n        if (allowFreeform) {\n          // If we are allowing freeform and autocomplete is also true\n          // and we've got a pending value that matches an option, remember\n          // the matched option's index\n          if (autoComplete === 'on' && currentPendingIndexValid) {\n            index = currentPendingValueValidIndex;\n          }\n          // Since we are allowing freeform, if there is currently a pending value, use that\n          // otherwise use the index determined above (falling back to '' if we did not get a valid index)\n          return _this._getPendingString(currentPendingValue, currentOptions, index);\n        } else {\n          // If we are not allowing freeform and have a\n          // valid index that matches the pending value,\n          // we know we will need some version of the pending value\n          if (currentPendingIndexValid && autoComplete === 'on') {\n            // If autoComplete is on, return the\n            // raw pending value, otherwise remember\n            // the matched option's index\n            index = currentPendingValueValidIndex;\n            return _this._normalizeToString(currentPendingValue);\n          } else if (!_this.state.isOpen && currentPendingValue) {\n            return _this._indexWithinBounds(currentOptions, index) ? currentPendingValue : _this._normalizeToString(suggestedDisplayValue);\n          } else {\n            return _this._indexWithinBounds(currentOptions, index) ? currentOptions[index].text : _this._normalizeToString(suggestedDisplayValue);\n          }\n        }\n      }\n    };\n    /**\n     * Handler for typing changes on the input\n     * @param updatedValue - the newly changed value\n     */\n    _this._onInputChange = function (updatedValue) {\n      if (_this.props.disabled) {\n        _this._handleInputWhenDisabled(null /* event */);\n        return;\n      }\n      _this.props.allowFreeform ? _this._processInputChangeWithFreeform(updatedValue) : _this._processInputChangeWithoutFreeform(updatedValue);\n    };\n    /**\n     * Focus (and select) the content of the input\n     * and set the focused state\n     */\n    _this._onFocus = function () {\n      if (_this._autofill.current && _this._autofill.current.inputElement) {\n        _this._autofill.current.inputElement.select();\n      }\n      if (!_this._hasFocus()) {\n        _this.setState({\n          focusState: 'focusing'\n        });\n      }\n    };\n    /**\n     * Callback issued when the options should be resolved, if they have been updated or\n     * if they need to be passed in the first time. This only does work if an onResolveOptions\n     * callback was passed in\n     */\n    _this._onResolveOptions = function () {\n      if (_this.props.onResolveOptions) {\n        // get the options\n        var newOptions = _this.props.onResolveOptions(__spreadArrays(_this.state.currentOptions));\n        // Check to see if the returned value is an array, if it is update the state\n        // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n        // If it is then resolve it asynchronously.\n        if (Array.isArray(newOptions)) {\n          _this.setState({\n            currentOptions: newOptions\n          });\n        } else if (newOptions && newOptions.then) {\n          // Ensure that the promise will only use the callback if it was the most recent one\n          // and update the state when the promise returns\n          var promise_1 = _this._currentPromise = newOptions;\n          promise_1.then(function (newOptionsFromPromise) {\n            if (promise_1 === _this._currentPromise) {\n              _this.setState({\n                currentOptions: newOptionsFromPromise\n              });\n            }\n          });\n        }\n      }\n    };\n    /**\n     * OnBlur handler. Set the focused state to false\n     * and submit any pending value\n     */\n    // eslint-disable-next-line deprecation/deprecation\n    _this._onBlur = function (event) {\n      // Do nothing if the blur is coming from something\n      // inside the comboBox root or the comboBox menu since\n      // it we are not really bluring from the whole comboBox\n      var relatedTarget = event.relatedTarget;\n      if (event.relatedTarget === null) {\n        // In IE11, due to lack of support, event.relatedTarget is always\n        // null making every onBlur call to be \"outside\" of the ComboBox\n        // even when it's not. Using document.activeElement is another way\n        // for us to be able to get what the relatedTarget without relying\n        // on the event\n        relatedTarget = document.activeElement;\n      }\n      if (relatedTarget && (\n      // when event coming from withing the comboBox title\n      _this._root.current && _this._root.current.contains(relatedTarget) ||\n      // when event coming from within the comboBox list menu\n      _this._comboBoxMenu.current && (_this._comboBoxMenu.current.contains(relatedTarget) ||\n      // when event coming from the callout containing the comboBox list menu (ex: when scrollBar of the\n      // Callout is clicked) checks if the relatedTarget is a parent of _comboBoxMenu\n      findElementRecursive(_this._comboBoxMenu.current, function (element) {\n        return element === relatedTarget;\n      })))) {\n        event.preventDefault();\n        event.stopPropagation();\n        return;\n      }\n      if (_this._hasFocus()) {\n        _this.setState({\n          focusState: 'none'\n        });\n        if (!_this.props.multiSelect || _this.props.allowFreeform) {\n          _this._submitPendingValue(event);\n        }\n      }\n    };\n    // Render Callout container and pass in list\n    _this._onRenderContainer = function (props) {\n      var onRenderList = props.onRenderList,\n        calloutProps = props.calloutProps,\n        dropdownWidth = props.dropdownWidth,\n        dropdownMaxWidth = props.dropdownMaxWidth,\n        _a = props.onRenderUpperContent,\n        onRenderUpperContent = _a === void 0 ? _this._onRenderUpperContent : _a,\n        _b = props.onRenderLowerContent,\n        onRenderLowerContent = _b === void 0 ? _this._onRenderLowerContent : _b,\n        useComboBoxAsMenuWidth = props.useComboBoxAsMenuWidth,\n        persistMenu = props.persistMenu,\n        _c = props.shouldRestoreFocus,\n        shouldRestoreFocus = _c === void 0 ? true : _c;\n      var isOpen = _this.state.isOpen;\n      var id = _this._id;\n      var comboBoxMenuWidth = useComboBoxAsMenuWidth && _this._comboBoxWrapper.current ? _this._comboBoxWrapper.current.clientWidth + 2 : undefined;\n      return React.createElement(Callout, __assign({\n        isBeakVisible: false,\n        gapSpace: 0,\n        doNotLayer: false,\n        directionalHint: DirectionalHint.bottomLeftEdge,\n        directionalHintFixed: false\n      }, calloutProps, {\n        onLayerMounted: _this._onLayerMounted,\n        className: css(_this._classNames.callout, calloutProps ? calloutProps.className : undefined),\n        target: _this._comboBoxWrapper.current,\n        onDismiss: _this._onDismiss,\n        onMouseDown: _this._onCalloutMouseDown,\n        onScroll: _this._onScroll,\n        setInitialFocus: false,\n        calloutWidth: useComboBoxAsMenuWidth && _this._comboBoxWrapper.current ? comboBoxMenuWidth && comboBoxMenuWidth : dropdownWidth,\n        calloutMaxWidth: dropdownMaxWidth ? dropdownMaxWidth : comboBoxMenuWidth,\n        hidden: persistMenu ? !isOpen : undefined,\n        shouldRestoreFocus: shouldRestoreFocus\n      }), onRenderUpperContent(_this.props, _this._onRenderUpperContent), React.createElement(\"div\", {\n        className: _this._classNames.optionsContainerWrapper,\n        ref: _this._comboBoxMenu\n      }, onRenderList(__assign(__assign({}, props), {\n        id: id\n      }), _this._onRenderList)), onRenderLowerContent(_this.props, _this._onRenderLowerContent));\n    };\n    _this._onLayerMounted = function () {\n      _this._onCalloutLayerMounted();\n      if (_this.props.calloutProps && _this.props.calloutProps.onLayerMounted) {\n        _this.props.calloutProps.onLayerMounted();\n      }\n    };\n    _this._onRenderLabel = function (onRenderLabelProps) {\n      var _a = onRenderLabelProps.props,\n        label = _a.label,\n        disabled = _a.disabled,\n        required = _a.required;\n      if (label) {\n        return React.createElement(Label, {\n          id: _this._id + '-label',\n          disabled: disabled,\n          required: required,\n          className: _this._classNames.label\n        }, label, onRenderLabelProps.multiselectAccessibleText && React.createElement(\"span\", {\n          className: _this._classNames.screenReaderText\n        }, onRenderLabelProps.multiselectAccessibleText));\n      }\n      return null;\n    };\n    // Render List of items\n    _this._onRenderList = function (props) {\n      var onRenderItem = props.onRenderItem,\n        options = props.options;\n      var id = _this._id;\n      return React.createElement(\"div\", {\n        id: id + '-list',\n        className: _this._classNames.optionsContainer,\n        \"aria-labelledby\": id + '-label',\n        role: \"listbox\"\n      }, options.map(function (item) {\n        return onRenderItem(item, _this._onRenderItem);\n      }));\n    };\n    // Render items\n    _this._onRenderItem = function (item) {\n      switch (item.itemType) {\n        case SelectableOptionMenuItemType.Divider:\n          return _this._renderSeparator(item);\n        case SelectableOptionMenuItemType.Header:\n          return _this._renderHeader(item);\n        default:\n          return _this._renderOption(item);\n      }\n    };\n    // Default _onRenderLowerContent function returns nothing\n    _this._onRenderLowerContent = function () {\n      return null;\n    };\n    // Default _onRenderUpperContent function returns nothing\n    _this._onRenderUpperContent = function () {\n      return null;\n    };\n    _this._renderOption = function (item) {\n      var _a = _this.props.onRenderOption,\n        onRenderOption = _a === void 0 ? _this._onRenderOptionContent : _a;\n      var id = _this._id;\n      var isSelected = _this._isOptionSelected(item.index);\n      var isChecked = _this._isOptionChecked(item.index);\n      var optionStyles = _this._getCurrentOptionStyles(item);\n      var optionClassNames = getComboBoxOptionClassNames(_this._getCurrentOptionStyles(item));\n      var title = _this._getPreviewText(item);\n      var onRenderCheckboxLabel = function () {\n        return onRenderOption(item, _this._onRenderOptionContent);\n      };\n      var getOptionComponent = function () {\n        return !_this.props.multiSelect ? React.createElement(CommandButton, {\n          id: id + '-list' + item.index,\n          key: item.key,\n          \"data-index\": item.index,\n          styles: optionStyles,\n          checked: isSelected,\n          className: 'ms-ComboBox-option',\n          onClick: _this._onItemClick(item),\n          // eslint-disable-next-line react/jsx-no-bind\n          onMouseEnter: _this._onOptionMouseEnter.bind(_this, item.index),\n          // eslint-disable-next-line react/jsx-no-bind\n          onMouseMove: _this._onOptionMouseMove.bind(_this, item.index),\n          onMouseLeave: _this._onOptionMouseLeave,\n          role: \"option\",\n          \"aria-selected\": isSelected ? 'true' : 'false',\n          ariaLabel: _this._getPreviewText(item),\n          disabled: item.disabled,\n          title: title\n        }, React.createElement(\"span\", {\n          className: optionClassNames.optionTextWrapper,\n          ref: isSelected ? _this._selectedElement : undefined\n        }, onRenderOption(item, _this._onRenderOptionContent))) : React.createElement(Checkbox, {\n          id: id + '-list' + item.index,\n          ariaLabel: _this._getPreviewText(item),\n          key: item.key,\n          \"data-index\": item.index,\n          styles: optionStyles,\n          className: 'ms-ComboBox-option',\n          \"data-is-focusable\": true,\n          onChange: _this._onItemClick(item),\n          label: item.text,\n          role: \"option\",\n          checked: isChecked,\n          title: title,\n          disabled: item.disabled,\n          // eslint-disable-next-line react/jsx-no-bind\n          onRenderLabel: onRenderCheckboxLabel,\n          inputProps: {\n            'aria-selected': isSelected ? 'true' : 'false'\n          }\n        });\n      };\n      return React.createElement(ComboBoxOptionWrapper, {\n        key: item.key,\n        index: item.index,\n        disabled: item.disabled,\n        isSelected: isSelected,\n        isChecked: isChecked,\n        text: item.text,\n        // eslint-disable-next-line react/jsx-no-bind\n        render: getOptionComponent,\n        data: item.data\n      });\n    };\n    /**\n     * Mouse clicks to headers, dividers and scrollbar should not make input lose focus\n     */\n    _this._onCalloutMouseDown = function (ev) {\n      ev.preventDefault();\n    };\n    /**\n     * Scroll handler for the callout to make sure the mouse events\n     * for updating focus are not interacting during scroll\n     */\n    _this._onScroll = function () {\n      if (!_this._isScrollIdle && _this._scrollIdleTimeoutId !== undefined) {\n        _this._async.clearTimeout(_this._scrollIdleTimeoutId);\n        _this._scrollIdleTimeoutId = undefined;\n      } else {\n        _this._isScrollIdle = false;\n      }\n      _this._scrollIdleTimeoutId = _this._async.setTimeout(function () {\n        _this._isScrollIdle = true;\n      }, ScrollIdleDelay);\n    };\n    _this._onRenderOptionContent = function (item) {\n      var optionClassNames = getComboBoxOptionClassNames(_this._getCurrentOptionStyles(item));\n      return React.createElement(\"span\", {\n        className: optionClassNames.optionText\n      }, item.text);\n    };\n    /**\n     * Handles dismissing (cancelling) the menu\n     */\n    _this._onDismiss = function () {\n      var onMenuDismiss = _this.props.onMenuDismiss;\n      if (onMenuDismiss) {\n        onMenuDismiss();\n      }\n      // In persistMode we need to simulate callout layer mount\n      // since that only happens once. We do it on dismiss since\n      // it works either way.\n      if (_this.props.persistMenu) {\n        _this._onCalloutLayerMounted();\n      }\n      // close the menu\n      _this._setOpenStateAndFocusOnClose(false /* isOpen */, false /* focusInputAfterClose */);\n      // reset the selected index\n      // to the last value state\n      _this._resetSelectedIndex();\n    };\n    _this._onAfterClearPendingInfo = function () {\n      _this._processingClearPendingInfo = false;\n    };\n    /**\n     * Handle keydown on the input\n     * @param ev - The keyboard event that was fired\n     */\n    _this._onInputKeyDown = function (ev) {\n      var _a = _this.props,\n        disabled = _a.disabled,\n        allowFreeform = _a.allowFreeform,\n        autoComplete = _a.autoComplete;\n      var _b = _this.state,\n        isOpen = _b.isOpen,\n        currentOptions = _b.currentOptions,\n        currentPendingValueValidIndexOnHover = _b.currentPendingValueValidIndexOnHover;\n      // Take note if we are processing an alt (option) or meta (command) keydown.\n      // See comment in _onInputKeyUp for reasoning.\n      _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);\n      if (disabled) {\n        _this._handleInputWhenDisabled(ev);\n        return;\n      }\n      var index = _this._getPendingSelectedIndex(false /* includeCurrentPendingValue */);\n      switch (ev.which) {\n        case KeyCodes.enter:\n          if (_this._autofill.current && _this._autofill.current.inputElement) {\n            _this._autofill.current.inputElement.select();\n          }\n          _this._submitPendingValue(ev);\n          if (_this.props.multiSelect && isOpen) {\n            _this.setState({\n              currentPendingValueValidIndex: index\n            });\n          } else {\n            // On enter submit the pending value\n            if (isOpen || (!allowFreeform || _this.state.currentPendingValue === undefined || _this.state.currentPendingValue === null || _this.state.currentPendingValue.length <= 0) && _this.state.currentPendingValueValidIndex < 0) {\n              // if we are open or\n              // if we are not allowing freeform or\n              // our we have no pending value\n              // and no valid pending index\n              // flip the open state\n              _this.setState({\n                isOpen: !isOpen\n              });\n            }\n          }\n          break;\n        case KeyCodes.tab:\n          // On enter submit the pending value\n          if (!_this.props.multiSelect) {\n            _this._submitPendingValue(ev);\n          }\n          // If we are not allowing freeform\n          // or the comboBox is open, flip the open state\n          if (isOpen) {\n            _this._setOpenStateAndFocusOnClose(!isOpen, false /* focusInputAfterClose */);\n          }\n          // Allow TAB to propigate\n          return;\n        case KeyCodes.escape:\n          // reset the selected index\n          _this._resetSelectedIndex();\n          // Close the menu if opened\n          if (isOpen) {\n            _this.setState({\n              isOpen: false\n            });\n          } else {\n            return;\n          }\n          break;\n        case KeyCodes.up:\n          // if we are in clearAll state (e.g. the user as hovering\n          // and has since mousedOut of the menu items),\n          // go to the last index\n          if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n            index = _this.state.currentOptions.length;\n          }\n          if (ev.altKey || ev.metaKey) {\n            // Close the menu if it is open and break so\n            // that the event get stopPropagation and prevent default.\n            // Otherwise, we need to let the event continue to propagate\n            if (isOpen) {\n              _this._setOpenStateAndFocusOnClose(!isOpen, true /* focusInputAfterClose */);\n              break;\n            }\n            return;\n          }\n          // Go to the previous option\n          _this._setPendingInfoFromIndexAndDirection(index, SearchDirection.backward);\n          break;\n        case KeyCodes.down:\n          // Expand the comboBox on ALT + DownArrow\n          if (ev.altKey || ev.metaKey) {\n            _this._setOpenStateAndFocusOnClose(true /* isOpen */, true /* focusInputAfterClose */);\n          } else {\n            // if we are in clearAll state (e.g. the user as hovering\n            // and has since mousedOut of the menu items),\n            // go to the first index\n            if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n              index = -1;\n            }\n            // Got to the next option\n            _this._setPendingInfoFromIndexAndDirection(index, SearchDirection.forward);\n          }\n          break;\n        case KeyCodes.home:\n        case KeyCodes.end:\n          if (allowFreeform) {\n            return;\n          }\n          // Set the initial values to respond to HOME\n          // which goes to the first selectable option\n          index = -1;\n          var directionToSearch = SearchDirection.forward;\n          // If end, update the values to respond to END\n          // which goes to the last selectable option\n          if (ev.which === KeyCodes.end) {\n            index = currentOptions.length;\n            directionToSearch = SearchDirection.backward;\n          }\n          _this._setPendingInfoFromIndexAndDirection(index, directionToSearch);\n          break;\n        /* eslint-disable no-fallthrough */\n        case KeyCodes.space:\n          // event handled in _onComboBoxKeyUp\n          if (!allowFreeform && autoComplete === 'off') {\n            break;\n          }\n        default:\n          /* eslint-enable no-fallthrough */\n          // are we processing a function key? if so bail out\n          if (ev.which >= 112 /* F1 */ && ev.which <= 123 /* F12 */) {\n            return;\n          }\n          // If we get here and we got either and ALT key\n          // or meta key, let the event propagate\n          if (ev.keyCode === KeyCodes.alt || ev.key === 'Meta' /* && isOpen */) {\n            return;\n          }\n          // If we are not allowing freeform and\n          // allowing autoComplete, handle the input here\n          // since we have marked the input as readonly\n          if (!allowFreeform && autoComplete === 'on') {\n            _this._onInputChange(ev.key);\n            break;\n          }\n          // allow the key to propagate by default\n          return;\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n    /**\n     * Handle keyup on the input\n     * @param ev - the keyboard event that was fired\n     */\n    _this._onInputKeyUp = function (ev) {\n      var _a = _this.props,\n        disabled = _a.disabled,\n        allowFreeform = _a.allowFreeform,\n        autoComplete = _a.autoComplete;\n      var isOpen = _this.state.isOpen;\n      // We close the menu on key up only if ALL of the following are true:\n      // - Most recent key down was alt or meta (command)\n      // - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n      //   expand/collapse the menu)\n      // - We're not on a Mac (or iOS)\n      // This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n      // closing any open context menus. There is not a similar behavior on Macs.\n      var keyPressIsAltOrMetaAlone = _this._lastKeyDownWasAltOrMeta && _this._isAltOrMeta(ev);\n      _this._lastKeyDownWasAltOrMeta = false;\n      var shouldHandleKey = keyPressIsAltOrMetaAlone && !(isMac() || isIOS());\n      if (disabled) {\n        _this._handleInputWhenDisabled(ev);\n        return;\n      }\n      switch (ev.which) {\n        case KeyCodes.space:\n          // If we are not allowing freeform and are not autoComplete\n          // make space expand/collapse the comboBox\n          // and allow the event to propagate\n          if (!allowFreeform && autoComplete === 'off') {\n            _this._setOpenStateAndFocusOnClose(!isOpen, !!isOpen);\n          }\n          return;\n        default:\n          if (shouldHandleKey && isOpen) {\n            _this._setOpenStateAndFocusOnClose(!isOpen, true /* focusInputAfterClose */);\n          } else {\n            if (_this.state.focusState === 'focusing' && _this.props.openOnKeyboardFocus) {\n              _this.setState({\n                isOpen: true\n              });\n            }\n            if (_this.state.focusState !== 'focused') {\n              _this.setState({\n                focusState: 'focused'\n              });\n            }\n          }\n          return;\n      }\n    };\n    _this._onOptionMouseLeave = function () {\n      if (_this._shouldIgnoreMouseEvent()) {\n        return;\n      }\n      // Ignore the event in persistMenu mode if the callout has\n      // closed. This is to avoid clearing the visuals on item click.\n      if (_this.props.persistMenu && !_this.state.isOpen) {\n        return;\n      }\n      _this.setState({\n        currentPendingValueValidIndexOnHover: HoverStatus.clearAll\n      });\n    };\n    /**\n     * Click handler for the button of the comboBox\n     * and the input when not allowing freeform. This\n     * toggles the expand/collapse state of the comboBox (if enbled)\n     */\n    _this._onComboBoxClick = function () {\n      var disabled = _this.props.disabled;\n      var isOpen = _this.state.isOpen;\n      if (!disabled) {\n        _this._setOpenStateAndFocusOnClose(!isOpen, false /* focusInputAfterClose */);\n        _this.setState({\n          focusState: 'focused'\n        });\n      }\n    };\n    /**\n     * Click handler for the autofill.\n     */\n    _this._onAutofillClick = function () {\n      var _a = _this.props,\n        disabled = _a.disabled,\n        allowFreeform = _a.allowFreeform;\n      if (allowFreeform && !disabled) {\n        _this.focus(_this.state.isOpen || _this._processingTouch);\n      } else {\n        _this._onComboBoxClick();\n      }\n    };\n    _this._onTouchStart = function () {\n      if (_this._comboBoxWrapper.current && !('onpointerdown' in _this._comboBoxWrapper)) {\n        _this._handleTouchAndPointerEvent();\n      }\n    };\n    _this._onPointerDown = function (ev) {\n      if (ev.pointerType === 'touch') {\n        _this._handleTouchAndPointerEvent();\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n      }\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      defaultSelectedKey: 'selectedKey',\n      text: 'defaultSelectedKey',\n      selectedKey: 'value',\n      dropdownWidth: 'useComboBoxAsMenuWidth'\n    });\n    _this._id = props.id || getId('ComboBox');\n    var selectedKeys = _this._buildDefaultSelectedKeys(props.defaultSelectedKey, props.selectedKey);\n    _this._isScrollIdle = true;\n    _this._processingTouch = false;\n    _this._gotMouseMove = false;\n    _this._processingClearPendingInfo = false;\n    var initialSelectedIndices = _this._getSelectedIndices(props.options, selectedKeys);\n    _this.state = {\n      isOpen: false,\n      selectedIndices: initialSelectedIndices,\n      focusState: 'none',\n      suggestedDisplayValue: undefined,\n      currentOptions: _this.props.options,\n      currentPendingValueValidIndex: -1,\n      currentPendingValue: undefined,\n      currentPendingValueValidIndexOnHover: HoverStatus.default\n    };\n    return _this;\n  }\n  Object.defineProperty(ComboBox.prototype, \"selectedOptions\", {\n    /**\n     * All selected options\n     */\n    get: function () {\n      var _a = this.state,\n        currentOptions = _a.currentOptions,\n        selectedIndices = _a.selectedIndices;\n      return getAllSelectedOptions(currentOptions, selectedIndices);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ComboBox.prototype.componentDidMount = function () {\n    if (this._comboBoxWrapper.current && !this.props.disabled) {\n      // hook up resolving the options if needed on focus\n      this._events.on(this._comboBoxWrapper.current, 'focus', this._onResolveOptions, true);\n      if ('onpointerdown' in this._comboBoxWrapper.current) {\n        // For ComboBoxes, touching anywhere in the combo box should drop the dropdown, including the input element.\n        // This gives more hit target space for touch environments. We're setting the onpointerdown here, because React\n        // does not support Pointer events yet.\n        this._events.on(this._comboBoxWrapper.current, 'pointerdown', this._onPointerDown, true);\n      }\n    }\n  };\n  ComboBox.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    // Update the selectedIndex and currentOptions state if\n    // the selectedKey, value, or options have changed\n    if (newProps.selectedKey !== this.props.selectedKey || newProps.text !== this.props.text || newProps.options !== this.props.options) {\n      var selectedKeys = this._buildSelectedKeys(newProps.selectedKey);\n      var indices = this._getSelectedIndices(newProps.options, selectedKeys);\n      this.setState({\n        selectedIndices: indices,\n        currentOptions: newProps.options\n      });\n      if (newProps.selectedKey === null) {\n        this.setState({\n          suggestedDisplayValue: undefined\n        });\n      }\n    }\n  };\n  ComboBox.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n    var _a = this.props,\n      allowFreeform = _a.allowFreeform,\n      text = _a.text,\n      onMenuOpen = _a.onMenuOpen,\n      onMenuDismissed = _a.onMenuDismissed;\n    var _b = this.state,\n      isOpen = _b.isOpen,\n      selectedIndices = _b.selectedIndices,\n      currentPendingValueValidIndex = _b.currentPendingValueValidIndex;\n    // If we are newly open or are open and the pending valid index changed,\n    // make sure the currently selected/pending option is scrolled into view\n    if (isOpen && (!prevState.isOpen || prevState.currentPendingValueValidIndex !== currentPendingValueValidIndex)) {\n      // Need this timeout so that the selectedElement ref is correctly updated\n      this._async.setTimeout(function () {\n        return _this._scrollIntoView();\n      }, 0);\n    }\n    // if an action is taken that put focus in the ComboBox\n    // and If we are open or we are just closed, shouldFocusAfterClose is set,\n    // but we are not the activeElement set focus on the input\n    if (this._hasFocus() && (isOpen || prevState.isOpen && !isOpen && this._focusInputAfterClose && this._autofill.current && document.activeElement !== this._autofill.current.inputElement)) {\n      this.focus(undefined /*shouldOpenOnFocus*/, true /*useFocusAsync*/);\n    }\n    // If we should focusAfterClose AND\n    //   just opened/closed the menu OR\n    //   are focused AND\n    //     updated the selectedIndex with the menu closed OR\n    //     are not allowing freeform OR\n    //     the value changed\n    // we need to set selection\n    if (this._focusInputAfterClose && (prevState.isOpen && !isOpen || this._hasFocus() && (!isOpen && !this.props.multiSelect && prevState.selectedIndices && selectedIndices && prevState.selectedIndices[0] !== selectedIndices[0] || !allowFreeform || text !== prevProps.text))) {\n      this._onFocus();\n    }\n    this._notifyPendingValueChanged(prevState);\n    if (isOpen && !prevState.isOpen && onMenuOpen) {\n      onMenuOpen();\n    }\n    if (!isOpen && prevState.isOpen && onMenuDismissed) {\n      onMenuDismissed();\n    }\n  };\n  ComboBox.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  // Primary Render\n  ComboBox.prototype.render = function () {\n    var _this = this;\n    var id = this._id;\n    var errorMessageId = id + '-error';\n    var _a = this.props,\n      className = _a.className,\n      disabled = _a.disabled,\n      required = _a.required,\n      errorMessage = _a.errorMessage,\n      _b = _a.onRenderContainer,\n      onRenderContainer = _b === void 0 ? this._onRenderContainer : _b,\n      _c = _a.onRenderLabel,\n      onRenderLabel = _c === void 0 ? this._onRenderLabel : _c,\n      _d = _a.onRenderList,\n      onRenderList = _d === void 0 ? this._onRenderList : _d,\n      _e = _a.onRenderItem,\n      onRenderItem = _e === void 0 ? this._onRenderItem : _e,\n      _f = _a.onRenderOption,\n      onRenderOption = _f === void 0 ? this._onRenderOptionContent : _f,\n      allowFreeform = _a.allowFreeform,\n      customStyles = _a.styles,\n      theme = _a.theme,\n      keytipProps = _a.keytipProps,\n      persistMenu = _a.persistMenu,\n      multiSelect = _a.multiSelect;\n    var _g = this.state,\n      isOpen = _g.isOpen,\n      suggestedDisplayValue = _g.suggestedDisplayValue;\n    this._currentVisibleValue = this._getVisibleValue();\n    // Single select is already accessible since the whole text is selected\n    // when focus enters the input. Since multiselect appears to clear the input\n    // it needs special accessible text\n    var multiselectAccessibleText = multiSelect ? this._getMultiselectDisplayString(this.state.selectedIndices, this.state.currentOptions, suggestedDisplayValue) : undefined;\n    var divProps = getNativeProps(this.props, divProperties, ['onChange', 'value']);\n    var hasErrorMessage = errorMessage && errorMessage.length > 0 ? true : false;\n    this._classNames = this.props.getClassNames ? this.props.getClassNames(theme, !!isOpen, !!disabled, !!required, !!this._hasFocus(), !!allowFreeform, !!hasErrorMessage, className) : getClassNames(getStyles(theme, customStyles), className, !!isOpen, !!disabled, !!required, !!this._hasFocus(), !!allowFreeform, !!hasErrorMessage);\n    var comboBoxWrapper = keytipProps ? React.createElement(KeytipData, {\n      keytipProps: keytipProps,\n      disabled: disabled\n    }, function (keytipAttributes) {\n      return _this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId, keytipAttributes);\n    }) : this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId);\n    return React.createElement(\"div\", __assign({}, divProps, {\n      ref: this._root,\n      className: this._classNames.container\n    }), onRenderLabel({\n      props: this.props,\n      multiselectAccessibleText: multiselectAccessibleText\n    }, this._onRenderLabel), comboBoxWrapper, (persistMenu || isOpen) && onRenderContainer(__assign(__assign({}, this.props), {\n      onRenderList: onRenderList,\n      onRenderItem: onRenderItem,\n      onRenderOption: onRenderOption,\n      options: this.state.currentOptions.map(function (item, index) {\n        return __assign(__assign({}, item), {\n          index: index\n        });\n      }),\n      onDismiss: this._onDismiss\n    }), this._onRenderContainer), React.createElement(\"div\", {\n      role: \"region\",\n      \"aria-live\": \"polite\",\n      \"aria-atomic\": \"true\",\n      id: errorMessageId,\n      className: hasErrorMessage ? this._classNames.errorMessage : ''\n    }, errorMessage !== undefined ? errorMessage : ''));\n  };\n  ComboBox.prototype._getPendingString = function (currentPendingValue, currentOptions, index) {\n    return currentPendingValue !== null && currentPendingValue !== undefined ? currentPendingValue : this._indexWithinBounds(currentOptions, index) ? currentOptions[index].text : '';\n  };\n  /**\n   * Returns a string that concatenates all of the selected values\n   * for multiselect combobox.\n   */\n  ComboBox.prototype._getMultiselectDisplayString = function (selectedIndices, currentOptions, suggestedDisplayValue) {\n    var displayValues = [];\n    for (var idx = 0; selectedIndices && idx < selectedIndices.length; idx++) {\n      var index = selectedIndices[idx];\n      displayValues.push(this._indexWithinBounds(currentOptions, index) ? currentOptions[index].text : this._normalizeToString(suggestedDisplayValue));\n    }\n    var _a = this.props.multiSelectDelimiter,\n      multiSelectDelimiter = _a === void 0 ? ', ' : _a;\n    return displayValues.join(multiSelectDelimiter);\n  };\n  /**\n   * Is the index within the bounds of the array?\n   * @param options - options to check if the index is valid for\n   * @param index - the index to check\n   * @returns - true if the index is valid for the given options, false otherwise\n   */\n  ComboBox.prototype._indexWithinBounds = function (options, index) {\n    if (!options) {\n      return false;\n    }\n    return index >= 0 && index < options.length;\n  };\n  /**\n   * Process the new input's new value when the comboBox\n   * allows freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n  ComboBox.prototype._processInputChangeWithFreeform = function (updatedValue) {\n    var _this = this;\n    var currentOptions = this.state.currentOptions;\n    var newCurrentPendingValueValidIndex = -1;\n    // if the new value is empty, see if we have an exact match\n    // and then set the pending info\n    if (updatedValue === '') {\n      var items = currentOptions.map(function (item, index) {\n        return __assign(__assign({}, item), {\n          index: index\n        });\n      }).filter(function (option) {\n        return option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider;\n      }).filter(function (option) {\n        return _this._getPreviewText(option) === updatedValue;\n      });\n      // if we found a match remember the index\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n      this._setPendingInfo(updatedValue, newCurrentPendingValueValidIndex, updatedValue);\n      return;\n    }\n    // Remember the original value and then,\n    // make the value lowercase for comparison\n    var originalUpdatedValue = updatedValue;\n    updatedValue = updatedValue.toLocaleLowerCase();\n    var newSuggestedDisplayValue = '';\n    // If autoComplete is on, attempt to find a match from the available options\n    if (this.props.autoComplete === 'on') {\n      // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n      var items = currentOptions.map(function (item, index) {\n        return __assign(__assign({}, item), {\n          index: index\n        });\n      }).filter(function (option) {\n        return option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider;\n      }).filter(function (option) {\n        return _this._getPreviewText(option).toLocaleLowerCase().indexOf(updatedValue) === 0;\n      });\n      if (items.length > 0) {\n        // use ariaLabel as the value when the option is set\n        var text = this._getPreviewText(items[0]);\n        // If the user typed out the complete option text, we don't need any suggested display text anymore\n        newSuggestedDisplayValue = text.toLocaleLowerCase() !== updatedValue ? text : '';\n        // remember the index of the match we found\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    } else {\n      // If autoComplete is off, attempt to find a match only when the value is exactly equal to the text of an option\n      var items = currentOptions.map(function (item, index) {\n        return __assign(__assign({}, item), {\n          index: index\n        });\n      }).filter(function (option) {\n        return option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider;\n      }).filter(function (option) {\n        return _this._getPreviewText(option).toLocaleLowerCase() === updatedValue;\n      });\n      // if we found a match remember the index\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    }\n    // Set the updated state\n    this._setPendingInfo(originalUpdatedValue, newCurrentPendingValueValidIndex, newSuggestedDisplayValue);\n  };\n  /**\n   * Process the new input's new value when the comboBox\n   * does not allow freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n  ComboBox.prototype._processInputChangeWithoutFreeform = function (updatedValue) {\n    var _this = this;\n    var _a = this.state,\n      currentPendingValue = _a.currentPendingValue,\n      currentPendingValueValidIndex = _a.currentPendingValueValidIndex,\n      currentOptions = _a.currentOptions;\n    if (this.props.autoComplete === 'on') {\n      // If autoComplete is on while allow freeform is off,\n      // we will remember the keypresses and build up a string to attempt to match\n      // as long as characters are typed within a the timeout span of each other,\n      // otherwise we will clear the string and start building a new one on the next keypress.\n      // Also, only do this processing if we have a non-empty value\n      if (updatedValue !== '') {\n        // If we have a pending autocomplete clearing task,\n        // we know that the user is typing with keypresses happening\n        // within the timeout of each other so remove the clearing task\n        // and continue building the pending value with the udpated value\n        if (this._lastReadOnlyAutoCompleteChangeTimeoutId !== undefined) {\n          this._async.clearTimeout(this._lastReadOnlyAutoCompleteChangeTimeoutId);\n          this._lastReadOnlyAutoCompleteChangeTimeoutId = undefined;\n          updatedValue = this._normalizeToString(currentPendingValue) + updatedValue;\n        }\n        var originalUpdatedValue = updatedValue;\n        updatedValue = updatedValue.toLocaleLowerCase();\n        // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n        var items = currentOptions.map(function (item, i) {\n          return __assign(__assign({}, item), {\n            index: i\n          });\n        }).filter(function (option) {\n          return option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider;\n        }).filter(function (option) {\n          return option.text.toLocaleLowerCase().indexOf(updatedValue) === 0;\n        });\n        // If we found a match, udpdate the state\n        if (items.length > 0) {\n          this._setPendingInfo(originalUpdatedValue, items[0].index, this._getPreviewText(items[0]));\n        }\n        // Schedule a timeout to clear the pending value after the timeout span\n        this._lastReadOnlyAutoCompleteChangeTimeoutId = this._async.setTimeout(function () {\n          _this._lastReadOnlyAutoCompleteChangeTimeoutId = undefined;\n        }, ReadOnlyPendingAutoCompleteTimeout);\n        return;\n      }\n    }\n    // If we get here, either autoComplete is on or we did not find a match with autoComplete on.\n    // Remember we are not allowing freeform, so at this point, if we have a pending valid value index\n    // use that; otherwise use the selectedIndex\n    var index = currentPendingValueValidIndex >= 0 ? currentPendingValueValidIndex : this._getFirstSelectedIndex();\n    // Since we are not allowing freeform, we need to\n    // set both the pending and suggested values/index\n    // to allow us to select all content in the input to\n    // give the illusion that we are readonly (e.g. freeform off)\n    this._setPendingInfoFromIndex(index);\n  };\n  ComboBox.prototype._getFirstSelectedIndex = function () {\n    return this.state.selectedIndices && this.state.selectedIndices.length > 0 ? this.state.selectedIndices[0] : -1;\n  };\n  /**\n   * Walk along the options starting at the index, stepping by the delta (positive or negative)\n   * looking for the next valid selectable index (e.g. skipping headings and dividers)\n   * @param index - the index to get the next selectable index from\n   * @param delta - optional delta to step by when finding the next index, defaults to 0\n   * @returns - the next valid selectable index. If the new index is outside of the bounds,\n   * it will snap to the edge of the options array. If delta == 0 and the given index is not selectable\n   */\n  ComboBox.prototype._getNextSelectableIndex = function (index, searchDirection) {\n    var currentOptions = this.state.currentOptions;\n    var newIndex = index + searchDirection;\n    newIndex = Math.max(0, Math.min(currentOptions.length - 1, newIndex));\n    if (!this._indexWithinBounds(currentOptions, newIndex)) {\n      return -1;\n    }\n    var option = currentOptions[newIndex];\n    if (option.itemType === SelectableOptionMenuItemType.Header || option.itemType === SelectableOptionMenuItemType.Divider || option.hidden === true) {\n      // Should we continue looking for an index to select?\n      if (searchDirection !== SearchDirection.none && (newIndex > 0 && searchDirection < SearchDirection.none || newIndex >= 0 && newIndex < currentOptions.length && searchDirection > SearchDirection.none)) {\n        newIndex = this._getNextSelectableIndex(newIndex, searchDirection);\n      } else {\n        // If we cannot perform a useful search just return the index we were given\n        return index;\n      }\n    }\n    // We have the next valid selectable index, return it\n    return newIndex;\n  };\n  /**\n   * Set the selected index. Note, this is\n   * the \"real\" selected index, not the pending selected index\n   * @param index - the index to set (or the index to set from if a search direction is provided)\n   * @param searchDirection - the direction to search along the options from the given index\n   */\n  ComboBox.prototype._setSelectedIndex = function (index, submitPendingValueEvent, searchDirection) {\n    var _this = this;\n    if (searchDirection === void 0) {\n      searchDirection = SearchDirection.none;\n    }\n    var _a = this.props,\n      onChange = _a.onChange,\n      onPendingValueChanged = _a.onPendingValueChanged;\n    var currentOptions = this.state.currentOptions;\n    var initialIndices = this.state.selectedIndices;\n    // Clone selectedIndices so we don't mutate state\n    var selectedIndices = initialIndices ? initialIndices.slice() : [];\n    // Find the next selectable index, if searchDirection is none\n    // we will get our starting index back\n    index = this._getNextSelectableIndex(index, searchDirection);\n    if (!this._indexWithinBounds(currentOptions, index)) {\n      return;\n    }\n    // Are we at a new index? If so, update the state, otherwise\n    // there is nothing to do\n    if (this.props.multiSelect || selectedIndices.length < 1 || selectedIndices.length === 1 && selectedIndices[0] !== index) {\n      var option_1 = __assign({}, currentOptions[index]);\n      // if option doesn't existing, or option is disabled, we noop\n      if (!option_1 || option_1.disabled) {\n        return;\n      }\n      if (this.props.multiSelect) {\n        // Setting the initial state of option.selected in Multi-select combobox by checking the\n        // selectedIndices array and overriding the undefined issue\n        option_1.selected = option_1.selected !== undefined ? !option_1.selected : selectedIndices.indexOf(index) < 0;\n        if (option_1.selected && selectedIndices.indexOf(index) < 0) {\n          selectedIndices.push(index);\n        } else if (!option_1.selected && selectedIndices.indexOf(index) >= 0) {\n          selectedIndices = selectedIndices.filter(function (value) {\n            return value !== index;\n          });\n        }\n      } else {\n        selectedIndices[0] = index;\n      }\n      submitPendingValueEvent.persist();\n      // Only setstate if combobox is uncontrolled.\n      if (this.props.selectedKey || this.props.selectedKey === null) {\n        // If ComboBox value is changed, revert preview first\n        if (this._hasPendingValue && onPendingValueChanged) {\n          onPendingValueChanged();\n          this._hasPendingValue = false;\n        }\n        if (onChange) {\n          onChange(submitPendingValueEvent, option_1, index, undefined);\n        }\n      } else {\n        // Update current options\n        var changedOptions = currentOptions.slice();\n        changedOptions[index] = option_1;\n        // Call onChange after state is updated\n        this.setState({\n          selectedIndices: selectedIndices,\n          currentOptions: changedOptions\n        }, function () {\n          // If ComboBox value is changed, revert preview first\n          if (_this._hasPendingValue && onPendingValueChanged) {\n            onPendingValueChanged();\n            _this._hasPendingValue = false;\n          }\n          if (onChange) {\n            onChange(submitPendingValueEvent, option_1, index, undefined);\n          }\n        });\n      }\n    }\n    if (this.props.multiSelect && this.state.isOpen) {\n      return;\n    }\n    // clear all of the pending info\n    this._clearPendingInfo();\n  };\n  /**\n   * Submit a pending value if there is one\n   */\n  ComboBox.prototype._submitPendingValue = function (submitPendingValueEvent) {\n    var _a = this.props,\n      onChange = _a.onChange,\n      allowFreeform = _a.allowFreeform,\n      autoComplete = _a.autoComplete;\n    var _b = this.state,\n      currentPendingValue = _b.currentPendingValue,\n      currentPendingValueValidIndex = _b.currentPendingValueValidIndex,\n      currentOptions = _b.currentOptions,\n      currentPendingValueValidIndexOnHover = _b.currentPendingValueValidIndexOnHover;\n    var selectedIndices = this.state.selectedIndices;\n    // Do not submit any pending value if we\n    // have already initiated clearing the pending info\n    if (this._processingClearPendingInfo) {\n      return;\n    }\n    // If we allow freeform we need to handle that\n    if (allowFreeform) {\n      // if currentPendingValue is null or undefined the user did not submit anything\n      // (not even empty because we would have stored that as the pending value)\n      if (currentPendingValue === null || currentPendingValue === undefined) {\n        // if a user did not type anything they may just hovered over an item\n        if (currentPendingValueValidIndexOnHover >= 0) {\n          this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);\n          this._clearPendingInfo();\n        }\n        return;\n      }\n      // Check to see if the user typed an exact match\n      if (this._indexWithinBounds(currentOptions, currentPendingValueValidIndex)) {\n        var pendingOptionText = this._getPreviewText(currentOptions[currentPendingValueValidIndex]).toLocaleLowerCase();\n        // By exact match, that means: our pending value is the same as the pending option text OR\n        // the pending option starts with the pending value and we have an \"autoComplete\" selection\n        // where the total length is equal to pending option length OR\n        // the live value in the underlying input matches the pending option; update the state\n        if (currentPendingValue.toLocaleLowerCase() === pendingOptionText || autoComplete && pendingOptionText.indexOf(currentPendingValue.toLocaleLowerCase()) === 0 && this._autofill.current && this._autofill.current.isValueSelected && currentPendingValue.length + (this._autofill.current.selectionEnd - this._autofill.current.selectionStart) === pendingOptionText.length || this._autofill.current && this._autofill.current.inputElement && this._autofill.current.inputElement.value.toLocaleLowerCase() === pendingOptionText) {\n          this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);\n          if (this.props.multiSelect && this.state.isOpen) {\n            return;\n          }\n          this._clearPendingInfo();\n          return;\n        }\n      }\n      if (onChange) {\n        if (onChange) {\n          // trigger onChange to clear value\n          onChange(submitPendingValueEvent, undefined, undefined, currentPendingValue);\n        }\n      } else {\n        // If we are not controlled, create a new selected option\n        var newOption = {\n          key: currentPendingValue || getId(),\n          text: this._normalizeToString(currentPendingValue)\n        };\n        // If it's multiselect, set selected state to true\n        if (this.props.multiSelect) {\n          newOption.selected = true;\n        }\n        var newOptions = currentOptions.concat([newOption]);\n        if (selectedIndices) {\n          if (!this.props.multiSelect) {\n            selectedIndices = [];\n          }\n          selectedIndices.push(newOptions.length - 1);\n        }\n        this.setState({\n          currentOptions: newOptions,\n          selectedIndices: selectedIndices\n        });\n      }\n    } else if (currentPendingValueValidIndex >= 0) {\n      // Since we are not allowing freeform, we must have a matching\n      // to be able to update state\n      this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);\n    } else if (currentPendingValueValidIndexOnHover >= 0) {\n      // If all else failed and we were hovering over an item, select it\n      this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);\n    }\n    // Finally, clear the pending info\n    this._clearPendingInfo();\n  };\n  ComboBox.prototype._onCalloutLayerMounted = function () {\n    // In persistMenu mode _onLayerMounted is only called once for the lifetime\n    // of the component. Any functionality required for callout \"on mount\" can\n    // go here so that we can also call it again during callout dismissal to reset\n    // object state.\n    this._gotMouseMove = false;\n  };\n  // Render separator\n  ComboBox.prototype._renderSeparator = function (item) {\n    var index = item.index,\n      key = item.key;\n    if (index && index > 0) {\n      return React.createElement(\"div\", {\n        role: \"separator\",\n        key: key,\n        className: this._classNames.divider\n      });\n    }\n    return null;\n  };\n  ComboBox.prototype._renderHeader = function (item) {\n    var _a = this.props.onRenderOption,\n      onRenderOption = _a === void 0 ? this._onRenderOptionContent : _a;\n    return React.createElement(\"div\", {\n      key: item.key,\n      className: this._classNames.header\n    }, onRenderOption(item, this._onRenderOptionContent));\n  };\n  /**\n   * If we are coming from a mouseOut:\n   * there is no visible selected option.\n   *\n   * Else if We are hovering over an item:\n   * that gets the selected look.\n   *\n   * Else:\n   * Use the current valid pending index if it exists OR\n   * we do not have a valid index and we currently have a pending input value,\n   * otherwise use the selected index\n   * */\n  ComboBox.prototype._isOptionSelected = function (index) {\n    var currentPendingValueValidIndexOnHover = this.state.currentPendingValueValidIndexOnHover;\n    // If the hover state is set to clearAll, don't show a selected index.\n    // Note, this happens when the user moused out of the menu items\n    if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n      return false;\n    }\n    return this._getPendingSelectedIndex(true /* includePendingValue */) === index ? true : false;\n  };\n  ComboBox.prototype._isOptionChecked = function (index) {\n    if (this.props.multiSelect && index !== undefined && this.state.selectedIndices) {\n      var idxOfSelectedIndex = -1;\n      idxOfSelectedIndex = this.state.selectedIndices.indexOf(index);\n      return idxOfSelectedIndex >= 0;\n    }\n    return false;\n  };\n  /**\n   * Gets the pending selected index taking into account hover, valueValidIndex, and selectedIndex\n   * @param includeCurrentPendingValue - Should we include the currentPendingValue when\n   * finding the index\n   */\n  ComboBox.prototype._getPendingSelectedIndex = function (includeCurrentPendingValue) {\n    var _a = this.state,\n      currentPendingValueValidIndexOnHover = _a.currentPendingValueValidIndexOnHover,\n      currentPendingValueValidIndex = _a.currentPendingValueValidIndex,\n      currentPendingValue = _a.currentPendingValue;\n    return currentPendingValueValidIndexOnHover >= 0 ? currentPendingValueValidIndexOnHover : currentPendingValueValidIndex >= 0 || includeCurrentPendingValue && currentPendingValue !== null && currentPendingValue !== undefined ? currentPendingValueValidIndex : this.props.multiSelect ? 0 : this._getFirstSelectedIndex();\n  };\n  /**\n   * Scroll the selected element into view\n   */\n  ComboBox.prototype._scrollIntoView = function () {\n    var _a = this.props,\n      onScrollToItem = _a.onScrollToItem,\n      scrollSelectedToTop = _a.scrollSelectedToTop;\n    var _b = this.state,\n      currentPendingValueValidIndex = _b.currentPendingValueValidIndex,\n      currentPendingValue = _b.currentPendingValue;\n    if (onScrollToItem) {\n      // Use the custom scroll handler\n      onScrollToItem(currentPendingValueValidIndex >= 0 || currentPendingValue !== '' ? currentPendingValueValidIndex : this._getFirstSelectedIndex());\n    } else if (this._selectedElement.current && this._selectedElement.current.offsetParent) {\n      // We are using refs, scroll the ref into view\n      if (scrollSelectedToTop) {\n        this._selectedElement.current.offsetParent.scrollIntoView(true);\n      } else {\n        var alignToTop = true;\n        if (this._comboBoxMenu.current && this._comboBoxMenu.current.offsetParent) {\n          var scrollableParentRect = this._comboBoxMenu.current.offsetParent.getBoundingClientRect();\n          var selectedElementRect = this._selectedElement.current.offsetParent.getBoundingClientRect();\n          // If we are completely in view then we do not need to scroll\n          if (scrollableParentRect.top <= selectedElementRect.top && scrollableParentRect.top + scrollableParentRect.height >= selectedElementRect.top + selectedElementRect.height) {\n            return;\n          }\n          // If we are lower than the scrollable parent viewport then we should align to the bottom\n          if (scrollableParentRect.top + scrollableParentRect.height <= selectedElementRect.top + selectedElementRect.height) {\n            alignToTop = false;\n          }\n        }\n        this._selectedElement.current.offsetParent.scrollIntoView(alignToTop);\n      }\n    }\n  };\n  /**\n   * Click handler for the menu items\n   * to select the item and also close the menu\n   * @param index - the index of the item that was clicked\n   */\n  ComboBox.prototype._onItemClick = function (item) {\n    var _this = this;\n    var onItemClick = this.props.onItemClick;\n    var index = item.index;\n    return function (ev) {\n      // only close the callout when it's in single-select mode\n      if (!_this.props.multiSelect) {\n        // ensure that focus returns to the input, not the button\n        _this._autofill.current && _this._autofill.current.focus();\n        _this.setState({\n          isOpen: false\n        });\n      }\n      // Continue processing the click only after\n      // performing menu close / control focus(inner working)\n      onItemClick && onItemClick(ev, item, index);\n      _this._setSelectedIndex(index, ev);\n    };\n  };\n  /**\n   * Get the indices of the options that are marked as selected\n   * @param options - the comboBox options\n   * @param selectedKeys - the known selected keys to find\n   * @returns - an array of the indices of the selected options, empty array if nothing is selected\n   */\n  ComboBox.prototype._getSelectedIndices = function (options, selectedKeys) {\n    if (!options || !selectedKeys) {\n      return [];\n    }\n    var selectedIndices = {};\n    options.forEach(function (option, index) {\n      if (option.selected) {\n        selectedIndices[index] = true;\n      }\n    });\n    var _loop_1 = function (selectedKey) {\n      var index = findIndex(options, function (option) {\n        return option.key === selectedKey;\n      });\n      if (index > -1) {\n        selectedIndices[index] = true;\n      }\n    };\n    for (var _i = 0, selectedKeys_1 = selectedKeys; _i < selectedKeys_1.length; _i++) {\n      var selectedKey = selectedKeys_1[_i];\n      _loop_1(selectedKey);\n    }\n    return Object.keys(selectedIndices).map(Number).sort();\n  };\n  /**\n   * Reset the selected index by clearing the\n   * input (of any pending text), clearing the pending state,\n   * and setting the suggested display value to the last\n   * selected state text\n   */\n  ComboBox.prototype._resetSelectedIndex = function () {\n    var currentOptions = this.state.currentOptions;\n    this._clearPendingInfo();\n    var selectedIndex = this._getFirstSelectedIndex();\n    if (selectedIndex > 0 && selectedIndex < currentOptions.length) {\n      this.setState({\n        suggestedDisplayValue: currentOptions[selectedIndex].text\n      });\n    } else if (this.props.text) {\n      // If we had a value initially, restore it\n      this.setState({\n        suggestedDisplayValue: this.props.text\n      });\n    }\n  };\n  /**\n   * Clears the pending info state\n   */\n  ComboBox.prototype._clearPendingInfo = function () {\n    this._processingClearPendingInfo = true;\n    this.setState({\n      currentPendingValue: undefined,\n      currentPendingValueValidIndex: -1,\n      suggestedDisplayValue: undefined,\n      currentPendingValueValidIndexOnHover: HoverStatus.default\n    }, this._onAfterClearPendingInfo);\n  };\n  /**\n   * Set the pending info\n   * @param currentPendingValue - new pending value to set\n   * @param currentPendingValueValidIndex - new pending value index to set\n   * @param suggestedDisplayValue - new suggest display value to set\n   */\n  ComboBox.prototype._setPendingInfo = function (currentPendingValue, currentPendingValueValidIndex, suggestedDisplayValue) {\n    if (currentPendingValueValidIndex === void 0) {\n      currentPendingValueValidIndex = -1;\n    }\n    if (this._processingClearPendingInfo) {\n      return;\n    }\n    this.setState({\n      currentPendingValue: this._normalizeToString(currentPendingValue),\n      currentPendingValueValidIndex: currentPendingValueValidIndex,\n      suggestedDisplayValue: suggestedDisplayValue,\n      currentPendingValueValidIndexOnHover: HoverStatus.default\n    });\n  };\n  /**\n   * Set the pending info from the given index\n   * @param index - the index to set the pending info from\n   */\n  ComboBox.prototype._setPendingInfoFromIndex = function (index) {\n    var currentOptions = this.state.currentOptions;\n    if (index >= 0 && index < currentOptions.length) {\n      var option = currentOptions[index];\n      this._setPendingInfo(this._getPreviewText(option), index, this._getPreviewText(option));\n    } else {\n      this._clearPendingInfo();\n    }\n  };\n  /**\n   * Sets the pending info for the comboBox\n   * @param index - the index to search from\n   * @param searchDirection - the direction to search\n   */\n  ComboBox.prototype._setPendingInfoFromIndexAndDirection = function (index, searchDirection) {\n    var currentOptions = this.state.currentOptions;\n    // update index to allow content to wrap\n    if (searchDirection === SearchDirection.forward && index >= currentOptions.length - 1) {\n      index = -1;\n    } else if (searchDirection === SearchDirection.backward && index <= 0) {\n      index = currentOptions.length;\n    }\n    // get the next \"valid\" index\n    var indexUpdate = this._getNextSelectableIndex(index, searchDirection);\n    // if the two indicies are equal we didn't move and\n    // we should attempt to get  get the first/last \"valid\" index to use\n    // (Note, this takes care of the potential cases where the first/last\n    // item is not focusable), otherwise use the updated index\n    if (index === indexUpdate) {\n      if (searchDirection === SearchDirection.forward) {\n        index = this._getNextSelectableIndex(-1, searchDirection);\n      } else if (searchDirection === SearchDirection.backward) {\n        index = this._getNextSelectableIndex(currentOptions.length, searchDirection);\n      }\n    } else {\n      index = indexUpdate;\n    }\n    if (this._indexWithinBounds(currentOptions, index)) {\n      this._setPendingInfoFromIndex(index);\n    }\n  };\n  ComboBox.prototype._notifyPendingValueChanged = function (prevState) {\n    var onPendingValueChanged = this.props.onPendingValueChanged;\n    if (!onPendingValueChanged) {\n      return;\n    }\n    var _a = this.state,\n      currentPendingValue = _a.currentPendingValue,\n      currentOptions = _a.currentOptions,\n      currentPendingValueValidIndex = _a.currentPendingValueValidIndex,\n      currentPendingValueValidIndexOnHover = _a.currentPendingValueValidIndexOnHover;\n    var newPendingIndex = undefined;\n    var newPendingValue = undefined;\n    if (currentPendingValueValidIndexOnHover !== prevState.currentPendingValueValidIndexOnHover && this._indexWithinBounds(currentOptions, currentPendingValueValidIndexOnHover)) {\n      // Set new pending index if hover index was changed\n      newPendingIndex = currentPendingValueValidIndexOnHover;\n    } else if (currentPendingValueValidIndex !== prevState.currentPendingValueValidIndex && this._indexWithinBounds(currentOptions, currentPendingValueValidIndex)) {\n      // Set new pending index if currentPendingValueValidIndex was changed\n      newPendingIndex = currentPendingValueValidIndex;\n    } else if (currentPendingValue !== prevState.currentPendingValue) {\n      // Set pendingValue in the case it was changed and no index was changed\n      newPendingValue = currentPendingValue;\n    }\n    // Notify when there is a new pending index/value. Also, if there is a pending value, it needs to send undefined.\n    if (newPendingIndex !== undefined || newPendingValue !== undefined || this._hasPendingValue) {\n      onPendingValueChanged(newPendingIndex !== undefined ? currentOptions[newPendingIndex] : undefined, newPendingIndex, newPendingValue);\n      this._hasPendingValue = newPendingIndex !== undefined || newPendingValue !== undefined;\n    }\n  };\n  /**\n   * Sets the isOpen state and updates focusInputAfterClose\n   */\n  ComboBox.prototype._setOpenStateAndFocusOnClose = function (isOpen, focusInputAfterClose) {\n    this._focusInputAfterClose = focusInputAfterClose;\n    this.setState({\n      isOpen: isOpen\n    });\n  };\n  /**\n   * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n   */\n  ComboBox.prototype._isAltOrMeta = function (ev) {\n    return ev.which === KeyCodes.alt || ev.key === 'Meta';\n  };\n  ComboBox.prototype._onOptionMouseEnter = function (index) {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n    this.setState({\n      currentPendingValueValidIndexOnHover: index\n    });\n  };\n  ComboBox.prototype._onOptionMouseMove = function (index) {\n    this._gotMouseMove = true;\n    if (!this._isScrollIdle || this.state.currentPendingValueValidIndexOnHover === index) {\n      return;\n    }\n    this.setState({\n      currentPendingValueValidIndexOnHover: index\n    });\n  };\n  ComboBox.prototype._shouldIgnoreMouseEvent = function () {\n    return !this._isScrollIdle || !this._gotMouseMove;\n  };\n  /**\n   * Handle dismissing the menu and\n   * eating the required key event when disabled\n   * @param ev - the keyboard event that was fired\n   */\n  ComboBox.prototype._handleInputWhenDisabled = function (ev) {\n    // If we are disabled, close the menu (if needed)\n    // and eat all keystokes other than TAB or ESC\n    if (this.props.disabled) {\n      if (this.state.isOpen) {\n        this.setState({\n          isOpen: false\n        });\n      }\n      // When disabled stop propagation and prevent default\n      // of the event unless we have a tab, escape, or function key\n      if (ev !== null && ev.which !== KeyCodes.tab && ev.which !== KeyCodes.escape && (ev.which < 112 /* F1 */ || ev.which > 123) /* F12 */) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n  ComboBox.prototype._handleTouchAndPointerEvent = function () {\n    var _this = this;\n    // If we already have an existing timeeout from a previous touch and pointer event\n    // cancel that timeout so we can set a nwe one.\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n    this._lastTouchTimeoutId = this._async.setTimeout(function () {\n      _this._processingTouch = false;\n      _this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  };\n  /**\n   * Get the styles for the current option.\n   * @param item - Item props for the current option\n   */\n  ComboBox.prototype._getCaretButtonStyles = function () {\n    var customCaretDownButtonStyles = this.props.caretDownButtonStyles;\n    return getCaretDownButtonStyles(this.props.theme, customCaretDownButtonStyles);\n  };\n  /**\n   * Get the styles for the current option.\n   * @param item - Item props for the current option\n   */\n  ComboBox.prototype._getCurrentOptionStyles = function (item) {\n    var customStylesForAllOptions = this.props.comboBoxOptionStyles;\n    var customStylesForCurrentOption = item.styles;\n    return getOptionStyles(this.props.theme, customStylesForAllOptions, customStylesForCurrentOption, this._isPendingOption(item), item.hidden);\n  };\n  /**\n   * Get the aria-activedescendant value for the comboxbox.\n   * @returns the id of the current focused combo item, otherwise the id of the currently selected element,\n   * null otherwise\n   */\n  ComboBox.prototype._getAriaActiveDescendantValue = function () {\n    var descendantText = this.state.isOpen && this.state.selectedIndices && this.state.selectedIndices.length > 0 ? this._id + '-list' + this.state.selectedIndices[0] : undefined;\n    if (this.state.isOpen && this._hasFocus() && this.state.currentPendingValueValidIndex !== -1) {\n      descendantText = this._id + '-list' + this.state.currentPendingValueValidIndex;\n    }\n    return descendantText;\n  };\n  /**\n   * Get the aria autocomplete value for the Combobox\n   * @returns 'inline' if auto-complete automatically dynamic, 'both' if we have a list of possible values to pick from\n   * and can dynamically populate input, and 'none' if auto-complete is not enabled as we can't give user inputs.\n   */\n  ComboBox.prototype._getAriaAutoCompleteValue = function () {\n    var autoComplete = !this.props.disabled && this.props.autoComplete === 'on';\n    return autoComplete ? this.props.allowFreeform ? 'inline' : 'both' : 'none';\n  };\n  ComboBox.prototype._isPendingOption = function (item) {\n    return item && item.index === this.state.currentPendingValueValidIndex;\n  };\n  /**\n   * Given default selected key(s) and selected key(s), return the selected keys(s).\n   * When default selected key(s) are available, they take precedence and return them instead of selected key(s).\n   *\n   * @returns No matter what specific types the input parameters are, always return an array of\n   *  either strings or numbers instead of premitive type.  This normlization makes caller's logic easier.\n   */\n  ComboBox.prototype._buildDefaultSelectedKeys = function (defaultSelectedKey, selectedKey) {\n    var selectedKeys = this._buildSelectedKeys(defaultSelectedKey);\n    if (selectedKeys.length) {\n      return selectedKeys;\n    }\n    return this._buildSelectedKeys(selectedKey);\n  };\n  ComboBox.prototype._buildSelectedKeys = function (selectedKey) {\n    if (selectedKey === undefined) {\n      return [];\n    }\n    // need to cast here so typescript does not complain\n    return selectedKey instanceof Array ? selectedKey : [selectedKey];\n  };\n  // For scenarios where the option's text prop contains embedded styles, we use the option's\n  // ariaLabel value as the text in the input and for autocomplete matching. We know to use this\n  // when the useAriaLabelAsText prop is set to true\n  ComboBox.prototype._getPreviewText = function (item) {\n    return item.useAriaLabelAsText && item.ariaLabel ? item.ariaLabel : item.text;\n  };\n  ComboBox.prototype._normalizeToString = function (value) {\n    return value || '';\n  };\n  /**\n   * Returns true if the component has some kind of focus. If it's either focusing or if it's focused\n   */\n  ComboBox.prototype._hasFocus = function () {\n    return this.state.focusState !== 'none';\n  };\n  ComboBox.defaultProps = {\n    options: [],\n    allowFreeform: false,\n    autoComplete: 'on',\n    buttonIconProps: {\n      iconName: 'ChevronDown'\n    }\n  };\n  ComboBox = __decorate([customizable('ComboBox', ['theme', 'styles'], true)], ComboBox);\n  return ComboBox;\n}(React.Component);\nexport { ComboBox };","map":{"version":3,"sources":["components/ComboBox/ComboBox.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Autofill, IAutofill } from '../Autofill/index';\nimport {\n  initializeComponentRef,\n  css,\n  customizable,\n  divProperties,\n  findElementRecursive,\n  findIndex,\n  focusAsync,\n  getId,\n  getNativeProps,\n  isIOS,\n  isMac,\n  KeyCodes,\n  shallowCompare,\n  mergeAriaAttributeValues,\n  warnMutuallyExclusive,\n  Async,\n  EventGroup,\n} from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Checkbox } from '../../Checkbox';\nimport { CommandButton, IButtonStyles, IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { getCaretDownButtonStyles, getOptionStyles, getStyles } from './ComboBox.styles';\nimport { getClassNames, getComboBoxOptionClassNames } from './ComboBox.classNames';\nimport {\n  IComboBoxOption,\n  IComboBoxOptionStyles,\n  IComboBoxProps,\n  IOnRenderComboBoxLabelProps,\n  IComboBoxClassNames,\n} from './ComboBox.types';\nimport { KeytipData } from '../../KeytipData';\nimport { Label } from '../../Label';\nimport { SelectableOptionMenuItemType, getAllSelectedOptions } from '../../utilities/selectableOption/index';\nimport { BaseButton, Button } from '../Button/index';\nimport { ICalloutProps } from '../../Callout';\n\nexport interface IComboBoxState {\n  /** The open state */\n  isOpen?: boolean;\n\n  /** The currently selected indices */\n  selectedIndices?: number[];\n\n  /** The focused state of the comboBox */\n  focusState?: 'none' | 'focused' | 'focusing';\n\n  /** This value is used for the autocomplete hint value */\n  suggestedDisplayValue?: string;\n\n  /** The options currently available for the callout */\n  currentOptions: IComboBoxOption[];\n\n  /**\n   * When taking input, this will store the index that the options input matches\n   * (-1 if no input or match)\n   */\n  currentPendingValueValidIndex: number;\n\n  /**\n   * Stores the hovered over value in the dropdown\n   * (used for styling the options without updating the input)\n   */\n  currentPendingValueValidIndexOnHover: number;\n\n  /** When taking input, this will store the actual text that is being entered */\n  currentPendingValue?: string;\n}\n\nenum SearchDirection {\n  backward = -1,\n  none = 0,\n  forward = 1,\n}\n\nenum HoverStatus {\n  /** Used when the user was hovering and has since moused out of the menu items */\n  clearAll = -2,\n  /** Default \"normal\" state, when no hover has happened or a hover is in progress */\n  default = -1,\n}\n\nconst ScrollIdleDelay = 250; /* ms */\nconst TouchIdleDelay = 500; /* ms */\n\n/**\n * This is used to clear any pending autocomplete text (used when autocomplete is true and\n * allowFreeform is false)\n */\nconst ReadOnlyPendingAutoCompleteTimeout = 1000; /* ms */\n\ninterface IComboBoxOptionWrapperProps extends IComboBoxOption {\n  /** True if the option is currently selected */\n  isSelected: boolean;\n\n  /** True if the option is currently checked (multi-select) */\n  isChecked: boolean;\n\n  /**\n   * A function that returns the children of the OptionWrapper. We pass this in as a function to ensure that\n   * children methods don't get called unnecessarily if the component doesn't need to be updated. This leads\n   * to a significant performance increase in ComboBoxes with many options and/or complex onRenderOption functions\n   */\n  render: () => JSX.Element;\n}\n\n/**\n * Internal class that is used to wrap all ComboBox options.\n * This is used to customize when we want to rerender components,\n * so we don't rerender every option every time render is executed.\n */\nclass ComboBoxOptionWrapper extends React.Component<IComboBoxOptionWrapperProps, {}> {\n  public render(): React.ReactNode {\n    return this.props.render();\n  }\n\n  public shouldComponentUpdate(newProps: IComboBoxOptionWrapperProps): boolean {\n    // The render function will always be different, so we ignore that prop\n    return !shallowCompare({ ...this.props, render: undefined }, { ...newProps, render: undefined });\n  }\n}\n\nconst COMPONENT_NAME = 'ComboBox';\n\n@customizable('ComboBox', ['theme', 'styles'], true)\nexport class ComboBox extends React.Component<IComboBoxProps, IComboBoxState> {\n  public static defaultProps: IComboBoxProps = {\n    options: [],\n    allowFreeform: false,\n    autoComplete: 'on',\n    buttonIconProps: { iconName: 'ChevronDown' },\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n\n  /** The input aspect of the comboBox */\n  private _autofill = React.createRef<IAutofill>();\n\n  /** The wrapping div of the input and button */\n  private _comboBoxWrapper = React.createRef<HTMLDivElement>();\n\n  /** The callout element */\n  private _comboBoxMenu = React.createRef<HTMLDivElement>();\n\n  /** The menu item element that is currently selected */\n  private _selectedElement = React.createRef<HTMLSpanElement>();\n\n  /** The base id for the ComboBox */\n  private _id: string;\n\n  /**\n   * After a character is inserted when autocomplete is true and allowFreeform is false,\n   * remember the task that will clear the pending string of characters.\n   */\n  private _lastReadOnlyAutoCompleteChangeTimeoutId: number | undefined;\n\n  /** Promise used when resolving the comboBox options */\n  private _currentPromise: PromiseLike<IComboBoxOption[]>;\n\n  /** The current visible value sent to the auto fill on render */\n  private _currentVisibleValue: string | undefined;\n  private _classNames: IComboBoxClassNames;\n  private _isScrollIdle: boolean;\n  private _hasPendingValue: boolean;\n  private _scrollIdleTimeoutId: number | undefined;\n  private _processingTouch: boolean;\n  private _lastTouchTimeoutId: number | undefined;\n  /** True if the most recent keydown event was for alt (option) or meta (command). */\n  private _lastKeyDownWasAltOrMeta: boolean | undefined;\n\n  /**\n   * Determines if we should be setting focus back to the input when the menu closes.\n   * The general rule of thumb is if the menu was launched via the keyboard focus should go back\n   * to the input, if it was dropped via the mouse focus should not be forced back to the input.\n   */\n  private _focusInputAfterClose: boolean;\n\n  /** Flag for when we get the first mouseMove */\n  private _gotMouseMove: boolean;\n\n  private _processingClearPendingInfo: boolean;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  constructor(props: IComboBoxProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      defaultSelectedKey: 'selectedKey',\n      text: 'defaultSelectedKey',\n      selectedKey: 'value',\n      dropdownWidth: 'useComboBoxAsMenuWidth',\n    });\n\n    this._id = props.id || getId('ComboBox');\n    const selectedKeys: string[] | number[] = this._buildDefaultSelectedKeys(\n      props.defaultSelectedKey,\n      props.selectedKey,\n    );\n\n    this._isScrollIdle = true;\n    this._processingTouch = false;\n    this._gotMouseMove = false;\n    this._processingClearPendingInfo = false;\n\n    const initialSelectedIndices: number[] = this._getSelectedIndices(props.options, selectedKeys);\n\n    this.state = {\n      isOpen: false,\n      selectedIndices: initialSelectedIndices,\n      focusState: 'none',\n      suggestedDisplayValue: undefined,\n      currentOptions: this.props.options,\n      currentPendingValueValidIndex: -1,\n      currentPendingValue: undefined,\n      currentPendingValueValidIndexOnHover: HoverStatus.default,\n    };\n  }\n\n  /**\n   * All selected options\n   */\n  public get selectedOptions(): IComboBoxOption[] {\n    const { currentOptions, selectedIndices } = this.state;\n\n    return getAllSelectedOptions(currentOptions, selectedIndices!);\n  }\n\n  public componentDidMount(): void {\n    if (this._comboBoxWrapper.current && !this.props.disabled) {\n      // hook up resolving the options if needed on focus\n      this._events.on(this._comboBoxWrapper.current, 'focus', this._onResolveOptions, true);\n      if ('onpointerdown' in this._comboBoxWrapper.current) {\n        // For ComboBoxes, touching anywhere in the combo box should drop the dropdown, including the input element.\n        // This gives more hit target space for touch environments. We're setting the onpointerdown here, because React\n        // does not support Pointer events yet.\n        this._events.on(this._comboBoxWrapper.current, 'pointerdown', this._onPointerDown, true);\n      }\n    }\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: IComboBoxProps): void {\n    // Update the selectedIndex and currentOptions state if\n    // the selectedKey, value, or options have changed\n    if (\n      newProps.selectedKey !== this.props.selectedKey ||\n      newProps.text !== this.props.text ||\n      newProps.options !== this.props.options\n    ) {\n      const selectedKeys: string[] | number[] = this._buildSelectedKeys(newProps.selectedKey);\n      const indices: number[] = this._getSelectedIndices(newProps.options, selectedKeys);\n\n      this.setState({\n        selectedIndices: indices,\n        currentOptions: newProps.options,\n      });\n      if (newProps.selectedKey === null) {\n        this.setState({\n          suggestedDisplayValue: undefined,\n        });\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IComboBoxProps, prevState: IComboBoxState) {\n    const { allowFreeform, text, onMenuOpen, onMenuDismissed } = this.props;\n    const { isOpen, selectedIndices, currentPendingValueValidIndex } = this.state;\n\n    // If we are newly open or are open and the pending valid index changed,\n    // make sure the currently selected/pending option is scrolled into view\n    if (isOpen && (!prevState.isOpen || prevState.currentPendingValueValidIndex !== currentPendingValueValidIndex)) {\n      // Need this timeout so that the selectedElement ref is correctly updated\n      this._async.setTimeout(() => this._scrollIntoView(), 0);\n    }\n\n    // if an action is taken that put focus in the ComboBox\n    // and If we are open or we are just closed, shouldFocusAfterClose is set,\n    // but we are not the activeElement set focus on the input\n    if (\n      this._hasFocus() &&\n      (isOpen ||\n        (prevState.isOpen &&\n          !isOpen &&\n          this._focusInputAfterClose &&\n          this._autofill.current &&\n          document.activeElement !== this._autofill.current.inputElement))\n    ) {\n      this.focus(undefined /*shouldOpenOnFocus*/, true /*useFocusAsync*/);\n    }\n\n    // If we should focusAfterClose AND\n    //   just opened/closed the menu OR\n    //   are focused AND\n    //     updated the selectedIndex with the menu closed OR\n    //     are not allowing freeform OR\n    //     the value changed\n    // we need to set selection\n    if (\n      this._focusInputAfterClose &&\n      ((prevState.isOpen && !isOpen) ||\n        (this._hasFocus() &&\n          ((!isOpen &&\n            !this.props.multiSelect &&\n            prevState.selectedIndices &&\n            selectedIndices &&\n            prevState.selectedIndices[0] !== selectedIndices[0]) ||\n            !allowFreeform ||\n            text !== prevProps.text)))\n    ) {\n      this._onFocus();\n    }\n\n    this._notifyPendingValueChanged(prevState);\n\n    if (isOpen && !prevState.isOpen && onMenuOpen) {\n      onMenuOpen();\n    }\n\n    if (!isOpen && prevState.isOpen && onMenuDismissed) {\n      onMenuDismissed();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  // Primary Render\n  public render(): JSX.Element {\n    const id = this._id;\n    const errorMessageId = id + '-error';\n    const {\n      className,\n      disabled,\n      required,\n      errorMessage,\n      onRenderContainer = this._onRenderContainer,\n      onRenderLabel = this._onRenderLabel,\n      onRenderList = this._onRenderList,\n      onRenderItem = this._onRenderItem,\n      onRenderOption = this._onRenderOptionContent,\n      allowFreeform,\n      styles: customStyles,\n      theme,\n      keytipProps,\n      persistMenu,\n      multiSelect,\n    } = this.props;\n    const { isOpen, suggestedDisplayValue } = this.state;\n    this._currentVisibleValue = this._getVisibleValue();\n\n    // Single select is already accessible since the whole text is selected\n    // when focus enters the input. Since multiselect appears to clear the input\n    // it needs special accessible text\n    const multiselectAccessibleText = multiSelect\n      ? this._getMultiselectDisplayString(this.state.selectedIndices, this.state.currentOptions, suggestedDisplayValue)\n      : undefined;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'onChange',\n      'value',\n    ]);\n\n    const hasErrorMessage = errorMessage && errorMessage.length > 0 ? true : false;\n\n    this._classNames = this.props.getClassNames\n      ? this.props.getClassNames(\n          theme!,\n          !!isOpen,\n          !!disabled,\n          !!required,\n          !!this._hasFocus(),\n          !!allowFreeform,\n          !!hasErrorMessage,\n          className,\n        )\n      : getClassNames(\n          getStyles(theme!, customStyles),\n          className!,\n          !!isOpen,\n          !!disabled,\n          !!required,\n          !!this._hasFocus(),\n          !!allowFreeform,\n          !!hasErrorMessage,\n        );\n\n    const comboBoxWrapper = keytipProps ? (\n      <KeytipData keytipProps={keytipProps} disabled={disabled}>\n        {(keytipAttributes: any): JSX.Element =>\n          this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId, keytipAttributes)\n        }\n      </KeytipData>\n    ) : (\n      this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId)\n    );\n\n    return (\n      <div {...divProps} ref={this._root} className={this._classNames.container}>\n        {onRenderLabel({ props: this.props, multiselectAccessibleText }, this._onRenderLabel)}\n        {comboBoxWrapper}\n        {(persistMenu || isOpen) &&\n          onRenderContainer(\n            {\n              ...this.props,\n              onRenderList,\n              onRenderItem,\n              onRenderOption,\n              options: this.state.currentOptions.map((item, index) => ({ ...item, index: index })),\n              onDismiss: this._onDismiss,\n            },\n            this._onRenderContainer,\n          )}\n        <div\n          role=\"region\"\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n          id={errorMessageId}\n          className={hasErrorMessage ? this._classNames.errorMessage : ''}\n        >\n          {errorMessage !== undefined ? errorMessage : ''}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public focus = (shouldOpenOnFocus?: boolean, useFocusAsync?: boolean): void => {\n    if (this._autofill.current) {\n      if (useFocusAsync) {\n        focusAsync(this._autofill.current);\n      } else {\n        this._autofill.current.focus();\n      }\n\n      if (shouldOpenOnFocus) {\n        this.setState({\n          isOpen: true,\n        });\n      }\n    }\n\n    // Programatically setting focus means that there is nothing else that needs to be done\n    // Focus is now contained\n    if (!this._hasFocus()) {\n      this.setState({ focusState: 'focused' });\n    }\n  };\n\n  /**\n   * Close menu callout if it is open\n   */\n  public dismissMenu = (): void => {\n    const { isOpen } = this.state;\n    isOpen && this.setState({ isOpen: false });\n  };\n\n  /**\n   * componentWillReceiveProps handler for the auto fill component\n   * Checks/updates the iput value to set, if needed\n   * @param defaultVisibleValue - the defaultVisibleValue that got passed\n   *  in to the auto fill's componentWillReceiveProps\n   * @returns - the updated value to set, if needed\n   */\n  private _onUpdateValueInAutofillWillReceiveProps = (): string | null => {\n    const comboBox = this._autofill.current;\n\n    if (!comboBox) {\n      return null;\n    }\n\n    if (comboBox.value === null || comboBox.value === undefined) {\n      return null;\n    }\n\n    const visibleValue = this._normalizeToString(this._currentVisibleValue);\n    if (comboBox.value !== visibleValue) {\n      // If visibleValue is empty, ensure that the empty string is used\n      return visibleValue || '';\n    }\n\n    return comboBox.value;\n  };\n\n  private _renderComboBoxWrapper = (\n    multiselectAccessibleText: string | undefined,\n    errorMessageId: string,\n    keytipAttributes: any = {},\n  ): JSX.Element => {\n    const {\n      label,\n      disabled,\n      ariaLabel,\n      ariaDescribedBy,\n      required,\n      errorMessage,\n      buttonIconProps,\n      isButtonAriaHidden = true,\n      title,\n      placeholder: placeholderProp,\n      tabIndex,\n      autofill,\n      iconButtonProps,\n    } = this.props;\n\n    const { isOpen, suggestedDisplayValue } = this.state;\n\n    // If the combobox has focus, is multiselect, and has a display string, then use that placeholder\n    // so that the selected items don't appear to vanish. This is not ideal but it's the only reasonable way\n    // to correct the behavior where the input is cleared so the user can type. If a full refactor is done, then this\n    // should be removed and the multiselect combobox should behave like a picker.\n    const placeholder =\n      this._hasFocus() && this.props.multiSelect && multiselectAccessibleText\n        ? multiselectAccessibleText\n        : placeholderProp;\n\n    return (\n      <div\n        data-ktp-target={keytipAttributes['data-ktp-target']}\n        ref={this._comboBoxWrapper}\n        id={this._id + 'wrapper'}\n        className={this._classNames.root}\n      >\n        <Autofill\n          data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\n          data-is-interactable={!disabled}\n          componentRef={this._autofill}\n          id={this._id + '-input'}\n          className={this._classNames.input}\n          type=\"text\"\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onKeyDown={this._onInputKeyDown}\n          onKeyUp={this._onInputKeyUp}\n          onClick={this._onAutofillClick}\n          onTouchStart={this._onTouchStart}\n          onInputValueChange={this._onInputChange}\n          aria-expanded={isOpen}\n          aria-autocomplete={this._getAriaAutoCompleteValue()}\n          role=\"combobox\"\n          readOnly={disabled}\n          aria-labelledby={label && this._id + '-label'}\n          aria-label={ariaLabel && !label ? ariaLabel : undefined}\n          aria-describedby={\n            errorMessage !== undefined\n              ? mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'], errorMessageId)\n              : mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])\n          }\n          aria-activedescendant={this._getAriaActiveDescendantValue()}\n          aria-required={required}\n          aria-disabled={disabled}\n          aria-owns={isOpen ? this._id + '-list' : undefined}\n          spellCheck={false}\n          defaultVisibleValue={this._currentVisibleValue}\n          suggestedDisplayValue={suggestedDisplayValue}\n          updateValueInWillReceiveProps={this._onUpdateValueInAutofillWillReceiveProps}\n          shouldSelectFullInputValueInComponentDidUpdate={\n            this._onShouldSelectFullInputValueInAutofillComponentDidUpdate\n          }\n          title={title}\n          preventValueSelection={!this._hasFocus()}\n          placeholder={placeholder}\n          tabIndex={tabIndex}\n          {...autofill}\n        />\n        <IconButton\n          className={'ms-ComboBox-CaretDown-button'}\n          styles={this._getCaretButtonStyles()}\n          role=\"presentation\"\n          aria-hidden={isButtonAriaHidden}\n          data-is-focusable={false}\n          tabIndex={-1}\n          onClick={this._onComboBoxClick}\n          onBlur={this._onBlur}\n          iconProps={buttonIconProps}\n          disabled={disabled}\n          checked={isOpen}\n          {...iconButtonProps}\n        />\n      </div>\n    );\n  };\n\n  /**\n   * componentDidUpdate handler for the auto fill component\n   *\n   * @param defaultVisibleValue - the current defaultVisibleValue in the auto fill's componentDidUpdate\n   * @param suggestedDisplayValue - the current suggestedDisplayValue in the auto fill's componentDidUpdate\n   * @returns - should the full value of the input be selected?\n   * True if the defaultVisibleValue equals the suggestedDisplayValue, false otherwise\n   */\n  private _onShouldSelectFullInputValueInAutofillComponentDidUpdate = (): boolean => {\n    return this._currentVisibleValue === this.state.suggestedDisplayValue;\n  };\n\n  /**\n   * Get the correct value to pass to the input\n   * to show to the user based off of the current props and state\n   * @returns the value to pass to the input\n   */\n  private _getVisibleValue = (): string | undefined => {\n    const { text, allowFreeform, autoComplete } = this.props;\n    const {\n      selectedIndices,\n      currentPendingValueValidIndex,\n      currentOptions,\n      currentPendingValue,\n      suggestedDisplayValue,\n      isOpen,\n    } = this.state;\n\n    const currentPendingIndexValid = this._indexWithinBounds(currentOptions, currentPendingValueValidIndex);\n\n    // If the user passed is a value prop, use that\n    // unless we are open and have a valid current pending index\n    if (\n      !(isOpen && currentPendingIndexValid) &&\n      text &&\n      (currentPendingValue === null || currentPendingValue === undefined)\n    ) {\n      return text;\n    }\n\n    if (this.props.multiSelect) {\n      // Multi-select\n      if (this._hasFocus()) {\n        let index = -1;\n        if (autoComplete === 'on' && currentPendingIndexValid) {\n          index = currentPendingValueValidIndex;\n        }\n        return this._getPendingString(currentPendingValue, currentOptions, index);\n      } else {\n        return this._getMultiselectDisplayString(selectedIndices, currentOptions, suggestedDisplayValue);\n      }\n    } else {\n      // Single-select\n      let index: number = this._getFirstSelectedIndex();\n      if (allowFreeform) {\n        // If we are allowing freeform and autocomplete is also true\n        // and we've got a pending value that matches an option, remember\n        // the matched option's index\n        if (autoComplete === 'on' && currentPendingIndexValid) {\n          index = currentPendingValueValidIndex;\n        }\n\n        // Since we are allowing freeform, if there is currently a pending value, use that\n        // otherwise use the index determined above (falling back to '' if we did not get a valid index)\n        return this._getPendingString(currentPendingValue, currentOptions, index);\n      } else {\n        // If we are not allowing freeform and have a\n        // valid index that matches the pending value,\n        // we know we will need some version of the pending value\n        if (currentPendingIndexValid && autoComplete === 'on') {\n          // If autoComplete is on, return the\n          // raw pending value, otherwise remember\n          // the matched option's index\n          index = currentPendingValueValidIndex;\n          return this._normalizeToString(currentPendingValue);\n        } else if (!this.state.isOpen && currentPendingValue) {\n          return this._indexWithinBounds(currentOptions, index)\n            ? currentPendingValue\n            : this._normalizeToString(suggestedDisplayValue);\n        } else {\n          return this._indexWithinBounds(currentOptions, index)\n            ? currentOptions[index].text\n            : this._normalizeToString(suggestedDisplayValue);\n        }\n      }\n    }\n  };\n\n  private _getPendingString(\n    currentPendingValue: string | null | undefined,\n    currentOptions: IComboBoxOption[],\n    index: number,\n  ) {\n    return currentPendingValue !== null && currentPendingValue !== undefined\n      ? currentPendingValue\n      : this._indexWithinBounds(currentOptions, index)\n      ? currentOptions[index].text\n      : '';\n  }\n\n  /**\n   * Returns a string that concatenates all of the selected values\n   * for multiselect combobox.\n   */\n  private _getMultiselectDisplayString(\n    selectedIndices: number[] | undefined,\n    currentOptions: IComboBoxOption[],\n    suggestedDisplayValue: string | undefined,\n  ) {\n    const displayValues = [];\n    for (let idx = 0; selectedIndices && idx < selectedIndices.length; idx++) {\n      const index: number = selectedIndices[idx];\n      displayValues.push(\n        this._indexWithinBounds(currentOptions, index)\n          ? currentOptions[index].text\n          : this._normalizeToString(suggestedDisplayValue),\n      );\n    }\n    const { multiSelectDelimiter = ', ' } = this.props;\n    return displayValues.join(multiSelectDelimiter);\n  }\n\n  /**\n   * Is the index within the bounds of the array?\n   * @param options - options to check if the index is valid for\n   * @param index - the index to check\n   * @returns - true if the index is valid for the given options, false otherwise\n   */\n  private _indexWithinBounds(options: IComboBoxOption[] | undefined, index: number): boolean {\n    if (!options) {\n      return false;\n    }\n    return index >= 0 && index < options.length;\n  }\n\n  /**\n   * Handler for typing changes on the input\n   * @param updatedValue - the newly changed value\n   */\n  private _onInputChange = (updatedValue: string): void => {\n    if (this.props.disabled) {\n      this._handleInputWhenDisabled(null /* event */);\n      return;\n    }\n\n    this.props.allowFreeform\n      ? this._processInputChangeWithFreeform(updatedValue)\n      : this._processInputChangeWithoutFreeform(updatedValue);\n  };\n\n  /**\n   * Process the new input's new value when the comboBox\n   * allows freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n  private _processInputChangeWithFreeform(updatedValue: string): void {\n    const { currentOptions } = this.state;\n    let newCurrentPendingValueValidIndex = -1;\n\n    // if the new value is empty, see if we have an exact match\n    // and then set the pending info\n    if (updatedValue === '') {\n      const items = currentOptions\n        .map((item, index) => {\n          return { ...item, index };\n        })\n        .filter(\n          option =>\n            option.itemType !== SelectableOptionMenuItemType.Header &&\n            option.itemType !== SelectableOptionMenuItemType.Divider,\n        )\n        .filter(option => this._getPreviewText(option) === updatedValue);\n\n      // if we found a match remember the index\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n\n      this._setPendingInfo(updatedValue, newCurrentPendingValueValidIndex, updatedValue);\n      return;\n    }\n\n    // Remember the original value and then,\n    // make the value lowercase for comparison\n    const originalUpdatedValue: string = updatedValue;\n    updatedValue = updatedValue.toLocaleLowerCase();\n\n    let newSuggestedDisplayValue = '';\n\n    // If autoComplete is on, attempt to find a match from the available options\n    if (this.props.autoComplete === 'on') {\n      // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n      const items = currentOptions\n        .map((item, index) => {\n          return { ...item, index };\n        })\n        .filter(\n          option =>\n            option.itemType !== SelectableOptionMenuItemType.Header &&\n            option.itemType !== SelectableOptionMenuItemType.Divider,\n        )\n        .filter(\n          option =>\n            this._getPreviewText(option)\n              .toLocaleLowerCase()\n              .indexOf(updatedValue) === 0,\n        );\n      if (items.length > 0) {\n        // use ariaLabel as the value when the option is set\n        const text: string = this._getPreviewText(items[0]);\n\n        // If the user typed out the complete option text, we don't need any suggested display text anymore\n        newSuggestedDisplayValue = text.toLocaleLowerCase() !== updatedValue ? text : '';\n\n        // remember the index of the match we found\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    } else {\n      // If autoComplete is off, attempt to find a match only when the value is exactly equal to the text of an option\n      const items = currentOptions\n        .map((item, index) => {\n          return { ...item, index };\n        })\n        .filter(\n          option =>\n            option.itemType !== SelectableOptionMenuItemType.Header &&\n            option.itemType !== SelectableOptionMenuItemType.Divider,\n        )\n        .filter(option => this._getPreviewText(option).toLocaleLowerCase() === updatedValue);\n\n      // if we found a match remember the index\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    }\n\n    // Set the updated state\n    this._setPendingInfo(originalUpdatedValue, newCurrentPendingValueValidIndex, newSuggestedDisplayValue);\n  }\n\n  /**\n   * Process the new input's new value when the comboBox\n   * does not allow freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n  private _processInputChangeWithoutFreeform(updatedValue: string): void {\n    const { currentPendingValue, currentPendingValueValidIndex, currentOptions } = this.state;\n\n    if (this.props.autoComplete === 'on') {\n      // If autoComplete is on while allow freeform is off,\n      // we will remember the keypresses and build up a string to attempt to match\n      // as long as characters are typed within a the timeout span of each other,\n      // otherwise we will clear the string and start building a new one on the next keypress.\n      // Also, only do this processing if we have a non-empty value\n      if (updatedValue !== '') {\n        // If we have a pending autocomplete clearing task,\n        // we know that the user is typing with keypresses happening\n        // within the timeout of each other so remove the clearing task\n        // and continue building the pending value with the udpated value\n        if (this._lastReadOnlyAutoCompleteChangeTimeoutId !== undefined) {\n          this._async.clearTimeout(this._lastReadOnlyAutoCompleteChangeTimeoutId);\n          this._lastReadOnlyAutoCompleteChangeTimeoutId = undefined;\n          updatedValue = this._normalizeToString(currentPendingValue) + updatedValue;\n        }\n\n        const originalUpdatedValue: string = updatedValue;\n        updatedValue = updatedValue.toLocaleLowerCase();\n\n        // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n        const items = currentOptions\n          .map((item, i) => {\n            return { ...item, index: i };\n          })\n          .filter(\n            option =>\n              option.itemType !== SelectableOptionMenuItemType.Header &&\n              option.itemType !== SelectableOptionMenuItemType.Divider,\n          )\n          .filter(option => option.text.toLocaleLowerCase().indexOf(updatedValue) === 0);\n\n        // If we found a match, udpdate the state\n        if (items.length > 0) {\n          this._setPendingInfo(originalUpdatedValue, items[0].index, this._getPreviewText(items[0]));\n        }\n\n        // Schedule a timeout to clear the pending value after the timeout span\n        this._lastReadOnlyAutoCompleteChangeTimeoutId = this._async.setTimeout(() => {\n          this._lastReadOnlyAutoCompleteChangeTimeoutId = undefined;\n        }, ReadOnlyPendingAutoCompleteTimeout);\n        return;\n      }\n    }\n\n    // If we get here, either autoComplete is on or we did not find a match with autoComplete on.\n    // Remember we are not allowing freeform, so at this point, if we have a pending valid value index\n    // use that; otherwise use the selectedIndex\n    const index = currentPendingValueValidIndex >= 0 ? currentPendingValueValidIndex : this._getFirstSelectedIndex();\n\n    // Since we are not allowing freeform, we need to\n    // set both the pending and suggested values/index\n    // to allow us to select all content in the input to\n    // give the illusion that we are readonly (e.g. freeform off)\n    this._setPendingInfoFromIndex(index);\n  }\n\n  private _getFirstSelectedIndex(): number {\n    return this.state.selectedIndices && this.state.selectedIndices.length > 0 ? this.state.selectedIndices[0] : -1;\n  }\n\n  /**\n   * Walk along the options starting at the index, stepping by the delta (positive or negative)\n   * looking for the next valid selectable index (e.g. skipping headings and dividers)\n   * @param index - the index to get the next selectable index from\n   * @param delta - optional delta to step by when finding the next index, defaults to 0\n   * @returns - the next valid selectable index. If the new index is outside of the bounds,\n   * it will snap to the edge of the options array. If delta == 0 and the given index is not selectable\n   */\n  private _getNextSelectableIndex(index: number, searchDirection: SearchDirection): number {\n    const { currentOptions } = this.state;\n\n    let newIndex = index + searchDirection;\n\n    newIndex = Math.max(0, Math.min(currentOptions.length - 1, newIndex));\n\n    if (!this._indexWithinBounds(currentOptions, newIndex)) {\n      return -1;\n    }\n\n    const option: IComboBoxOption = currentOptions[newIndex];\n\n    if (\n      option.itemType === SelectableOptionMenuItemType.Header ||\n      option.itemType === SelectableOptionMenuItemType.Divider ||\n      option.hidden === true\n    ) {\n      // Should we continue looking for an index to select?\n      if (\n        searchDirection !== SearchDirection.none &&\n        ((newIndex > 0 && searchDirection < SearchDirection.none) ||\n          (newIndex >= 0 && newIndex < currentOptions.length && searchDirection > SearchDirection.none))\n      ) {\n        newIndex = this._getNextSelectableIndex(newIndex, searchDirection);\n      } else {\n        // If we cannot perform a useful search just return the index we were given\n        return index;\n      }\n    }\n\n    // We have the next valid selectable index, return it\n    return newIndex;\n  }\n\n  /**\n   * Set the selected index. Note, this is\n   * the \"real\" selected index, not the pending selected index\n   * @param index - the index to set (or the index to set from if a search direction is provided)\n   * @param searchDirection - the direction to search along the options from the given index\n   */\n  private _setSelectedIndex(\n    index: number,\n    submitPendingValueEvent: React.SyntheticEvent<any>,\n    searchDirection: SearchDirection = SearchDirection.none,\n  ): void {\n    const { onChange, onPendingValueChanged } = this.props;\n    const { currentOptions } = this.state;\n    const { selectedIndices: initialIndices } = this.state;\n\n    // Clone selectedIndices so we don't mutate state\n    let selectedIndices = initialIndices ? initialIndices.slice() : [];\n\n    // Find the next selectable index, if searchDirection is none\n    // we will get our starting index back\n    index = this._getNextSelectableIndex(index, searchDirection);\n\n    if (!this._indexWithinBounds(currentOptions, index)) {\n      return;\n    }\n\n    // Are we at a new index? If so, update the state, otherwise\n    // there is nothing to do\n    if (\n      this.props.multiSelect ||\n      selectedIndices.length < 1 ||\n      (selectedIndices.length === 1 && selectedIndices[0] !== index)\n    ) {\n      const option: IComboBoxOption = { ...currentOptions[index] };\n      // if option doesn't existing, or option is disabled, we noop\n      if (!option || option.disabled) {\n        return;\n      }\n      if (this.props.multiSelect) {\n        // Setting the initial state of option.selected in Multi-select combobox by checking the\n        // selectedIndices array and overriding the undefined issue\n        option.selected = option.selected !== undefined ? !option.selected : selectedIndices.indexOf(index) < 0;\n        if (option.selected && selectedIndices.indexOf(index) < 0) {\n          selectedIndices.push(index);\n        } else if (!option.selected && selectedIndices.indexOf(index) >= 0) {\n          selectedIndices = selectedIndices.filter((value: number) => value !== index);\n        }\n      } else {\n        selectedIndices[0] = index;\n      }\n\n      submitPendingValueEvent.persist();\n\n      // Only setstate if combobox is uncontrolled.\n      if (this.props.selectedKey || this.props.selectedKey === null) {\n        // If ComboBox value is changed, revert preview first\n        if (this._hasPendingValue && onPendingValueChanged) {\n          onPendingValueChanged();\n          this._hasPendingValue = false;\n        }\n        if (onChange) {\n          onChange(submitPendingValueEvent, option, index, undefined);\n        }\n      } else {\n        // Update current options\n        const changedOptions = currentOptions.slice();\n        changedOptions[index] = option;\n\n        // Call onChange after state is updated\n        this.setState(\n          {\n            selectedIndices: selectedIndices,\n            currentOptions: changedOptions,\n          },\n          () => {\n            // If ComboBox value is changed, revert preview first\n            if (this._hasPendingValue && onPendingValueChanged) {\n              onPendingValueChanged();\n              this._hasPendingValue = false;\n            }\n\n            if (onChange) {\n              onChange(submitPendingValueEvent, option, index, undefined);\n            }\n          },\n        );\n      }\n    }\n    if (this.props.multiSelect && this.state.isOpen) {\n      return;\n    }\n    // clear all of the pending info\n    this._clearPendingInfo();\n  }\n\n  /**\n   * Focus (and select) the content of the input\n   * and set the focused state\n   */\n  private _onFocus = (): void => {\n    if (this._autofill.current && this._autofill.current.inputElement) {\n      this._autofill.current.inputElement.select();\n    }\n\n    if (!this._hasFocus()) {\n      this.setState({ focusState: 'focusing' });\n    }\n  };\n\n  /**\n   * Callback issued when the options should be resolved, if they have been updated or\n   * if they need to be passed in the first time. This only does work if an onResolveOptions\n   * callback was passed in\n   */\n  private _onResolveOptions = (): void => {\n    if (this.props.onResolveOptions) {\n      // get the options\n      const newOptions = this.props.onResolveOptions([...this.state.currentOptions]);\n\n      // Check to see if the returned value is an array, if it is update the state\n      // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n      // If it is then resolve it asynchronously.\n      if (Array.isArray(newOptions)) {\n        this.setState({\n          currentOptions: newOptions,\n        });\n      } else if (newOptions && newOptions.then) {\n        // Ensure that the promise will only use the callback if it was the most recent one\n        // and update the state when the promise returns\n        const promise: PromiseLike<IComboBoxOption[]> = (this._currentPromise = newOptions);\n        promise.then((newOptionsFromPromise: IComboBoxOption[]) => {\n          if (promise === this._currentPromise) {\n            this.setState({\n              currentOptions: newOptionsFromPromise,\n            });\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * OnBlur handler. Set the focused state to false\n   * and submit any pending value\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  private _onBlur = (event: React.FocusEvent<HTMLElement | Autofill | BaseButton | Button>): void => {\n    // Do nothing if the blur is coming from something\n    // inside the comboBox root or the comboBox menu since\n    // it we are not really bluring from the whole comboBox\n    let relatedTarget = event.relatedTarget;\n    if (event.relatedTarget === null) {\n      // In IE11, due to lack of support, event.relatedTarget is always\n      // null making every onBlur call to be \"outside\" of the ComboBox\n      // even when it's not. Using document.activeElement is another way\n      // for us to be able to get what the relatedTarget without relying\n      // on the event\n      relatedTarget = document.activeElement as Element;\n    }\n    if (\n      relatedTarget &&\n      // when event coming from withing the comboBox title\n      ((this._root.current && this._root.current.contains(relatedTarget as HTMLElement)) ||\n        // when event coming from within the comboBox list menu\n        (this._comboBoxMenu.current &&\n          (this._comboBoxMenu.current.contains(relatedTarget as HTMLElement) ||\n            // when event coming from the callout containing the comboBox list menu (ex: when scrollBar of the\n            // Callout is clicked) checks if the relatedTarget is a parent of _comboBoxMenu\n            findElementRecursive(this._comboBoxMenu.current, element => element === relatedTarget))))\n    ) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (this._hasFocus()) {\n      this.setState({ focusState: 'none' });\n      if (!this.props.multiSelect || this.props.allowFreeform) {\n        this._submitPendingValue(event);\n      }\n    }\n  };\n\n  /**\n   * Submit a pending value if there is one\n   */\n  private _submitPendingValue(submitPendingValueEvent: any): void {\n    const { onChange, allowFreeform, autoComplete } = this.props;\n    const {\n      currentPendingValue,\n      currentPendingValueValidIndex,\n      currentOptions,\n      currentPendingValueValidIndexOnHover,\n    } = this.state;\n    let { selectedIndices } = this.state;\n\n    // Do not submit any pending value if we\n    // have already initiated clearing the pending info\n    if (this._processingClearPendingInfo) {\n      return;\n    }\n\n    // If we allow freeform we need to handle that\n    if (allowFreeform) {\n      // if currentPendingValue is null or undefined the user did not submit anything\n      // (not even empty because we would have stored that as the pending value)\n      if (currentPendingValue === null || currentPendingValue === undefined) {\n        // if a user did not type anything they may just hovered over an item\n        if (currentPendingValueValidIndexOnHover >= 0) {\n          this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);\n          this._clearPendingInfo();\n        }\n\n        return;\n      }\n\n      // Check to see if the user typed an exact match\n      if (this._indexWithinBounds(currentOptions, currentPendingValueValidIndex)) {\n        const pendingOptionText: string = this._getPreviewText(\n          currentOptions[currentPendingValueValidIndex],\n        ).toLocaleLowerCase();\n\n        // By exact match, that means: our pending value is the same as the pending option text OR\n        // the pending option starts with the pending value and we have an \"autoComplete\" selection\n        // where the total length is equal to pending option length OR\n        // the live value in the underlying input matches the pending option; update the state\n        if (\n          currentPendingValue.toLocaleLowerCase() === pendingOptionText ||\n          (autoComplete &&\n            pendingOptionText.indexOf(currentPendingValue.toLocaleLowerCase()) === 0 &&\n            this._autofill.current &&\n            this._autofill.current.isValueSelected &&\n            currentPendingValue.length +\n              (this._autofill.current.selectionEnd! - this._autofill.current.selectionStart!) ===\n              pendingOptionText.length) ||\n          (this._autofill.current &&\n            this._autofill.current.inputElement &&\n            this._autofill.current.inputElement.value.toLocaleLowerCase() === pendingOptionText)\n        ) {\n          this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);\n          if (this.props.multiSelect && this.state.isOpen) {\n            return;\n          }\n          this._clearPendingInfo();\n          return;\n        }\n      }\n\n      if (onChange) {\n        if (onChange) {\n          // trigger onChange to clear value\n          onChange(submitPendingValueEvent, undefined, undefined, currentPendingValue);\n        }\n      } else {\n        // If we are not controlled, create a new selected option\n        const newOption: IComboBoxOption = {\n          key: currentPendingValue || getId(),\n          text: this._normalizeToString(currentPendingValue),\n        };\n        // If it's multiselect, set selected state to true\n        if (this.props.multiSelect) {\n          newOption.selected = true;\n        }\n        const newOptions: IComboBoxOption[] = currentOptions.concat([newOption]);\n        if (selectedIndices) {\n          if (!this.props.multiSelect) {\n            selectedIndices = [];\n          }\n          selectedIndices.push(newOptions.length - 1);\n        }\n        this.setState({\n          currentOptions: newOptions,\n          selectedIndices: selectedIndices,\n        });\n      }\n    } else if (currentPendingValueValidIndex >= 0) {\n      // Since we are not allowing freeform, we must have a matching\n      // to be able to update state\n      this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);\n    } else if (currentPendingValueValidIndexOnHover >= 0) {\n      // If all else failed and we were hovering over an item, select it\n      this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);\n    }\n\n    // Finally, clear the pending info\n    this._clearPendingInfo();\n  }\n\n  // Render Callout container and pass in list\n  private _onRenderContainer = (props: IComboBoxProps): JSX.Element => {\n    const {\n      onRenderList,\n      calloutProps,\n      dropdownWidth,\n      dropdownMaxWidth,\n      onRenderUpperContent = this._onRenderUpperContent,\n      onRenderLowerContent = this._onRenderLowerContent,\n      useComboBoxAsMenuWidth,\n      persistMenu,\n      shouldRestoreFocus = true,\n    } = props;\n\n    const { isOpen } = this.state;\n    const id = this._id;\n\n    const comboBoxMenuWidth =\n      useComboBoxAsMenuWidth && this._comboBoxWrapper.current\n        ? this._comboBoxWrapper.current.clientWidth + 2\n        : undefined;\n\n    return (\n      <Callout\n        isBeakVisible={false}\n        gapSpace={0}\n        doNotLayer={false}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        directionalHintFixed={false}\n        {...calloutProps}\n        onLayerMounted={this._onLayerMounted}\n        className={css(this._classNames.callout, calloutProps ? calloutProps.className : undefined)}\n        target={this._comboBoxWrapper.current}\n        onDismiss={this._onDismiss}\n        onMouseDown={this._onCalloutMouseDown}\n        onScroll={this._onScroll}\n        setInitialFocus={false}\n        calloutWidth={\n          useComboBoxAsMenuWidth && this._comboBoxWrapper.current\n            ? comboBoxMenuWidth && comboBoxMenuWidth\n            : dropdownWidth\n        }\n        calloutMaxWidth={dropdownMaxWidth ? dropdownMaxWidth : comboBoxMenuWidth}\n        hidden={persistMenu ? !isOpen : undefined}\n        shouldRestoreFocus={shouldRestoreFocus}\n      >\n        {onRenderUpperContent(this.props, this._onRenderUpperContent)}\n        <div className={this._classNames.optionsContainerWrapper} ref={this._comboBoxMenu}>\n          {(onRenderList as any)({ ...props, id }, this._onRenderList)}\n        </div>\n        {onRenderLowerContent(this.props, this._onRenderLowerContent)}\n      </Callout>\n    );\n  };\n\n  private _onCalloutLayerMounted() {\n    // In persistMenu mode _onLayerMounted is only called once for the lifetime\n    // of the component. Any functionality required for callout \"on mount\" can\n    // go here so that we can also call it again during callout dismissal to reset\n    // object state.\n    this._gotMouseMove = false;\n  }\n\n  private _onLayerMounted = () => {\n    this._onCalloutLayerMounted();\n\n    if (this.props.calloutProps && this.props.calloutProps.onLayerMounted) {\n      this.props.calloutProps.onLayerMounted();\n    }\n  };\n\n  private _onRenderLabel = (onRenderLabelProps: IOnRenderComboBoxLabelProps): JSX.Element | null => {\n    const { label, disabled, required } = onRenderLabelProps.props;\n\n    if (label) {\n      return (\n        <Label id={this._id + '-label'} disabled={disabled} required={required} className={this._classNames.label}>\n          {label}\n          {onRenderLabelProps.multiselectAccessibleText && (\n            <span className={this._classNames.screenReaderText}>{onRenderLabelProps.multiselectAccessibleText}</span>\n          )}\n        </Label>\n      );\n    }\n\n    return null;\n  };\n\n  // Render List of items\n  private _onRenderList = (props: IComboBoxProps): JSX.Element => {\n    const { onRenderItem, options } = props;\n\n    const id = this._id;\n    return (\n      <div\n        id={id + '-list'}\n        className={this._classNames.optionsContainer}\n        aria-labelledby={id + '-label'}\n        role=\"listbox\"\n      >\n        {options.map(item => (onRenderItem as any)(item, this._onRenderItem))}\n      </div>\n    );\n  };\n\n  // Render items\n  private _onRenderItem = (item: IComboBoxOption): JSX.Element | null => {\n    switch (item.itemType) {\n      case SelectableOptionMenuItemType.Divider:\n        return this._renderSeparator(item);\n      case SelectableOptionMenuItemType.Header:\n        return this._renderHeader(item);\n      default:\n        return this._renderOption(item);\n    }\n  };\n\n  // Default _onRenderLowerContent function returns nothing\n  private _onRenderLowerContent = (): null => {\n    return null;\n  };\n\n  // Default _onRenderUpperContent function returns nothing\n  private _onRenderUpperContent = (): null => {\n    return null;\n  };\n\n  // Render separator\n  private _renderSeparator(item: IComboBoxOption): JSX.Element | null {\n    const { index, key } = item;\n\n    if (index && index > 0) {\n      return <div role=\"separator\" key={key} className={this._classNames.divider} />;\n    }\n    return null;\n  }\n\n  private _renderHeader(item: IComboBoxOption): JSX.Element {\n    const { onRenderOption = this._onRenderOptionContent } = this.props;\n\n    return (\n      <div key={item.key} className={this._classNames.header}>\n        {onRenderOption(item, this._onRenderOptionContent)}\n      </div>\n    );\n  }\n\n  private _renderOption = (item: IComboBoxOption): JSX.Element => {\n    const { onRenderOption = this._onRenderOptionContent } = this.props;\n    const id = this._id;\n    const isSelected: boolean = this._isOptionSelected(item.index);\n    const isChecked: boolean = this._isOptionChecked(item.index);\n    const optionStyles = this._getCurrentOptionStyles(item);\n    const optionClassNames = getComboBoxOptionClassNames(this._getCurrentOptionStyles(item));\n    const title = this._getPreviewText(item);\n\n    const onRenderCheckboxLabel = () => onRenderOption(item, this._onRenderOptionContent);\n\n    const getOptionComponent = () => {\n      return !this.props.multiSelect ? (\n        <CommandButton\n          id={id + '-list' + item.index}\n          key={item.key}\n          data-index={item.index}\n          styles={optionStyles}\n          checked={isSelected}\n          className={'ms-ComboBox-option'}\n          onClick={this._onItemClick(item)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onMouseEnter={this._onOptionMouseEnter.bind(this, item.index)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onMouseMove={this._onOptionMouseMove.bind(this, item.index)}\n          onMouseLeave={this._onOptionMouseLeave}\n          role=\"option\"\n          aria-selected={isSelected ? 'true' : 'false'}\n          ariaLabel={this._getPreviewText(item)}\n          disabled={item.disabled}\n          title={title}\n        >\n          {\n            <span className={optionClassNames.optionTextWrapper} ref={isSelected ? this._selectedElement : undefined}>\n              {onRenderOption(item, this._onRenderOptionContent)}\n            </span>\n          }\n        </CommandButton>\n      ) : (\n        <Checkbox\n          id={id + '-list' + item.index}\n          ariaLabel={this._getPreviewText(item)}\n          key={item.key}\n          data-index={item.index}\n          styles={optionStyles}\n          className={'ms-ComboBox-option'}\n          data-is-focusable={true}\n          onChange={this._onItemClick(item)}\n          label={item.text}\n          role=\"option\"\n          checked={isChecked}\n          title={title}\n          disabled={item.disabled}\n          // eslint-disable-next-line react/jsx-no-bind\n          onRenderLabel={onRenderCheckboxLabel}\n          inputProps={{\n            'aria-selected': isSelected ? 'true' : 'false',\n          }}\n        />\n      );\n    };\n\n    return (\n      <ComboBoxOptionWrapper\n        key={item.key}\n        index={item.index}\n        disabled={item.disabled}\n        isSelected={isSelected}\n        isChecked={isChecked}\n        text={item.text}\n        // eslint-disable-next-line react/jsx-no-bind\n        render={getOptionComponent}\n        data={item.data}\n      />\n    );\n  };\n\n  /**\n   * If we are coming from a mouseOut:\n   * there is no visible selected option.\n   *\n   * Else if We are hovering over an item:\n   * that gets the selected look.\n   *\n   * Else:\n   * Use the current valid pending index if it exists OR\n   * we do not have a valid index and we currently have a pending input value,\n   * otherwise use the selected index\n   * */\n  private _isOptionSelected(index: number | undefined): boolean {\n    const { currentPendingValueValidIndexOnHover } = this.state;\n\n    // If the hover state is set to clearAll, don't show a selected index.\n    // Note, this happens when the user moused out of the menu items\n    if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n      return false;\n    }\n\n    return this._getPendingSelectedIndex(true /* includePendingValue */) === index ? true : false;\n  }\n\n  private _isOptionChecked(index: number | undefined): boolean {\n    if (this.props.multiSelect && index !== undefined && this.state.selectedIndices) {\n      let idxOfSelectedIndex = -1;\n\n      idxOfSelectedIndex = this.state.selectedIndices.indexOf(index);\n      return idxOfSelectedIndex >= 0;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the pending selected index taking into account hover, valueValidIndex, and selectedIndex\n   * @param includeCurrentPendingValue - Should we include the currentPendingValue when\n   * finding the index\n   */\n  private _getPendingSelectedIndex(includeCurrentPendingValue: boolean): number {\n    const { currentPendingValueValidIndexOnHover, currentPendingValueValidIndex, currentPendingValue } = this.state;\n\n    return currentPendingValueValidIndexOnHover >= 0\n      ? currentPendingValueValidIndexOnHover\n      : currentPendingValueValidIndex >= 0 ||\n        (includeCurrentPendingValue && currentPendingValue !== null && currentPendingValue !== undefined)\n      ? currentPendingValueValidIndex\n      : this.props.multiSelect\n      ? 0\n      : this._getFirstSelectedIndex();\n  }\n\n  /**\n   * Mouse clicks to headers, dividers and scrollbar should not make input lose focus\n   */\n  private _onCalloutMouseDown: ICalloutProps['onMouseDown'] = ev => {\n    ev.preventDefault();\n  };\n\n  /**\n   * Scroll handler for the callout to make sure the mouse events\n   * for updating focus are not interacting during scroll\n   */\n  private _onScroll = () => {\n    if (!this._isScrollIdle && this._scrollIdleTimeoutId !== undefined) {\n      this._async.clearTimeout(this._scrollIdleTimeoutId);\n      this._scrollIdleTimeoutId = undefined;\n    } else {\n      this._isScrollIdle = false;\n    }\n\n    this._scrollIdleTimeoutId = this._async.setTimeout(() => {\n      this._isScrollIdle = true;\n    }, ScrollIdleDelay);\n  };\n\n  /**\n   * Scroll the selected element into view\n   */\n  private _scrollIntoView(): void {\n    const { onScrollToItem, scrollSelectedToTop } = this.props;\n\n    const { currentPendingValueValidIndex, currentPendingValue } = this.state;\n\n    if (onScrollToItem) {\n      // Use the custom scroll handler\n      onScrollToItem(\n        currentPendingValueValidIndex >= 0 || currentPendingValue !== ''\n          ? currentPendingValueValidIndex\n          : this._getFirstSelectedIndex(),\n      );\n    } else if (this._selectedElement.current && this._selectedElement.current.offsetParent) {\n      // We are using refs, scroll the ref into view\n      if (scrollSelectedToTop) {\n        this._selectedElement.current.offsetParent.scrollIntoView(true);\n      } else {\n        let alignToTop = true;\n\n        if (this._comboBoxMenu.current && this._comboBoxMenu.current.offsetParent) {\n          const scrollableParentRect = this._comboBoxMenu.current.offsetParent.getBoundingClientRect();\n          const selectedElementRect = this._selectedElement.current.offsetParent.getBoundingClientRect();\n\n          // If we are completely in view then we do not need to scroll\n          if (\n            scrollableParentRect.top <= selectedElementRect.top &&\n            scrollableParentRect.top + scrollableParentRect.height >=\n              selectedElementRect.top + selectedElementRect.height\n          ) {\n            return;\n          }\n\n          // If we are lower than the scrollable parent viewport then we should align to the bottom\n          if (\n            scrollableParentRect.top + scrollableParentRect.height <=\n            selectedElementRect.top + selectedElementRect.height\n          ) {\n            alignToTop = false;\n          }\n        }\n\n        this._selectedElement.current.offsetParent.scrollIntoView(alignToTop);\n      }\n    }\n  }\n\n  private _onRenderOptionContent = (item: IComboBoxOption): JSX.Element => {\n    const optionClassNames = getComboBoxOptionClassNames(this._getCurrentOptionStyles(item));\n    return <span className={optionClassNames.optionText}>{item.text}</span>;\n  };\n\n  /**\n   * Click handler for the menu items\n   * to select the item and also close the menu\n   * @param index - the index of the item that was clicked\n   */\n  private _onItemClick(item: IComboBoxOption): (ev: any) => void {\n    const { onItemClick } = this.props;\n    const { index } = item;\n\n    return (ev: any): void => {\n      // only close the callout when it's in single-select mode\n      if (!this.props.multiSelect) {\n        // ensure that focus returns to the input, not the button\n        this._autofill.current && this._autofill.current.focus();\n        this.setState({\n          isOpen: false,\n        });\n      }\n\n      // Continue processing the click only after\n      // performing menu close / control focus(inner working)\n      onItemClick && onItemClick(ev, item, index);\n      this._setSelectedIndex(index as number, ev);\n    };\n  }\n\n  /**\n   * Handles dismissing (cancelling) the menu\n   */\n  private _onDismiss = (): void => {\n    const { onMenuDismiss } = this.props;\n    if (onMenuDismiss) {\n      onMenuDismiss();\n    }\n\n    // In persistMode we need to simulate callout layer mount\n    // since that only happens once. We do it on dismiss since\n    // it works either way.\n    if (this.props.persistMenu) {\n      this._onCalloutLayerMounted();\n    }\n\n    // close the menu\n    this._setOpenStateAndFocusOnClose(false /* isOpen */, false /* focusInputAfterClose */);\n\n    // reset the selected index\n    // to the last value state\n    this._resetSelectedIndex();\n  };\n\n  /**\n   * Get the indices of the options that are marked as selected\n   * @param options - the comboBox options\n   * @param selectedKeys - the known selected keys to find\n   * @returns - an array of the indices of the selected options, empty array if nothing is selected\n   */\n  private _getSelectedIndices(\n    options: IComboBoxOption[] | undefined,\n    selectedKeys: (string | number | undefined)[],\n  ): number[] {\n    if (!options || !selectedKeys) {\n      return [];\n    }\n\n    const selectedIndices: { [key: number]: boolean } = {};\n    options.forEach((option: IComboBoxOption, index: number) => {\n      if (option.selected) {\n        selectedIndices[index] = true;\n      }\n    });\n\n    for (const selectedKey of selectedKeys) {\n      const index = findIndex(options, option => option.key === selectedKey);\n      if (index > -1) {\n        selectedIndices[index] = true;\n      }\n    }\n\n    return Object.keys(selectedIndices)\n      .map(Number)\n      .sort();\n  }\n\n  /**\n   * Reset the selected index by clearing the\n   * input (of any pending text), clearing the pending state,\n   * and setting the suggested display value to the last\n   * selected state text\n   */\n  private _resetSelectedIndex(): void {\n    const { currentOptions } = this.state;\n    this._clearPendingInfo();\n\n    const selectedIndex: number = this._getFirstSelectedIndex();\n    if (selectedIndex > 0 && selectedIndex < currentOptions.length) {\n      this.setState({\n        suggestedDisplayValue: currentOptions[selectedIndex].text,\n      });\n    } else if (this.props.text) {\n      // If we had a value initially, restore it\n      this.setState({\n        suggestedDisplayValue: this.props.text,\n      });\n    }\n  }\n\n  /**\n   * Clears the pending info state\n   */\n  private _clearPendingInfo(): void {\n    this._processingClearPendingInfo = true;\n\n    this.setState(\n      {\n        currentPendingValue: undefined,\n        currentPendingValueValidIndex: -1,\n        suggestedDisplayValue: undefined,\n        currentPendingValueValidIndexOnHover: HoverStatus.default,\n      },\n      this._onAfterClearPendingInfo,\n    );\n  }\n\n  private _onAfterClearPendingInfo = () => {\n    this._processingClearPendingInfo = false;\n  };\n\n  /**\n   * Set the pending info\n   * @param currentPendingValue - new pending value to set\n   * @param currentPendingValueValidIndex - new pending value index to set\n   * @param suggestedDisplayValue - new suggest display value to set\n   */\n  private _setPendingInfo(\n    currentPendingValue?: string,\n    currentPendingValueValidIndex: number = -1,\n    suggestedDisplayValue?: string,\n  ): void {\n    if (this._processingClearPendingInfo) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValue: this._normalizeToString(currentPendingValue),\n      currentPendingValueValidIndex: currentPendingValueValidIndex,\n      suggestedDisplayValue: suggestedDisplayValue,\n      currentPendingValueValidIndexOnHover: HoverStatus.default,\n    });\n  }\n\n  /**\n   * Set the pending info from the given index\n   * @param index - the index to set the pending info from\n   */\n  private _setPendingInfoFromIndex(index: number): void {\n    const { currentOptions } = this.state;\n\n    if (index >= 0 && index < currentOptions.length) {\n      const option = currentOptions[index];\n      this._setPendingInfo(this._getPreviewText(option), index, this._getPreviewText(option));\n    } else {\n      this._clearPendingInfo();\n    }\n  }\n\n  /**\n   * Sets the pending info for the comboBox\n   * @param index - the index to search from\n   * @param searchDirection - the direction to search\n   */\n  private _setPendingInfoFromIndexAndDirection(index: number, searchDirection: SearchDirection): void {\n    const { currentOptions } = this.state;\n\n    // update index to allow content to wrap\n    if (searchDirection === SearchDirection.forward && index >= currentOptions.length - 1) {\n      index = -1;\n    } else if (searchDirection === SearchDirection.backward && index <= 0) {\n      index = currentOptions.length;\n    }\n\n    // get the next \"valid\" index\n    const indexUpdate = this._getNextSelectableIndex(index, searchDirection);\n\n    // if the two indicies are equal we didn't move and\n    // we should attempt to get  get the first/last \"valid\" index to use\n    // (Note, this takes care of the potential cases where the first/last\n    // item is not focusable), otherwise use the updated index\n    if (index === indexUpdate) {\n      if (searchDirection === SearchDirection.forward) {\n        index = this._getNextSelectableIndex(-1, searchDirection);\n      } else if (searchDirection === SearchDirection.backward) {\n        index = this._getNextSelectableIndex(currentOptions.length, searchDirection);\n      }\n    } else {\n      index = indexUpdate;\n    }\n\n    if (this._indexWithinBounds(currentOptions, index)) {\n      this._setPendingInfoFromIndex(index);\n    }\n  }\n\n  private _notifyPendingValueChanged(prevState: IComboBoxState): void {\n    const { onPendingValueChanged } = this.props;\n\n    if (!onPendingValueChanged) {\n      return;\n    }\n\n    const {\n      currentPendingValue,\n      currentOptions,\n      currentPendingValueValidIndex,\n      currentPendingValueValidIndexOnHover,\n    } = this.state;\n\n    let newPendingIndex: number | undefined = undefined;\n    let newPendingValue: string | undefined = undefined;\n\n    if (\n      currentPendingValueValidIndexOnHover !== prevState.currentPendingValueValidIndexOnHover &&\n      this._indexWithinBounds(currentOptions, currentPendingValueValidIndexOnHover)\n    ) {\n      // Set new pending index if hover index was changed\n      newPendingIndex = currentPendingValueValidIndexOnHover;\n    } else if (\n      currentPendingValueValidIndex !== prevState.currentPendingValueValidIndex &&\n      this._indexWithinBounds(currentOptions, currentPendingValueValidIndex)\n    ) {\n      // Set new pending index if currentPendingValueValidIndex was changed\n      newPendingIndex = currentPendingValueValidIndex;\n    } else if (currentPendingValue !== prevState.currentPendingValue) {\n      // Set pendingValue in the case it was changed and no index was changed\n      newPendingValue = currentPendingValue;\n    }\n\n    // Notify when there is a new pending index/value. Also, if there is a pending value, it needs to send undefined.\n    if (newPendingIndex !== undefined || newPendingValue !== undefined || this._hasPendingValue) {\n      onPendingValueChanged(\n        newPendingIndex !== undefined ? currentOptions[newPendingIndex] : undefined,\n        newPendingIndex,\n        newPendingValue,\n      );\n      this._hasPendingValue = newPendingIndex !== undefined || newPendingValue !== undefined;\n    }\n  }\n\n  /**\n   * Sets the isOpen state and updates focusInputAfterClose\n   */\n  private _setOpenStateAndFocusOnClose(isOpen: boolean, focusInputAfterClose: boolean): void {\n    this._focusInputAfterClose = focusInputAfterClose;\n    this.setState({\n      isOpen: isOpen,\n    });\n  }\n\n  /**\n   * Handle keydown on the input\n   * @param ev - The keyboard event that was fired\n   */\n  private _onInputKeyDown = (ev: React.KeyboardEvent<HTMLElement | Autofill>): void => {\n    const { disabled, allowFreeform, autoComplete } = this.props;\n    const { isOpen, currentOptions, currentPendingValueValidIndexOnHover } = this.state;\n\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in _onInputKeyUp for reasoning.\n    this._lastKeyDownWasAltOrMeta = this._isAltOrMeta(ev);\n\n    if (disabled) {\n      this._handleInputWhenDisabled(ev);\n      return;\n    }\n\n    let index = this._getPendingSelectedIndex(false /* includeCurrentPendingValue */);\n\n    switch (ev.which) {\n      case KeyCodes.enter:\n        if (this._autofill.current && this._autofill.current.inputElement) {\n          this._autofill.current.inputElement.select();\n        }\n\n        this._submitPendingValue(ev);\n        if (this.props.multiSelect && isOpen) {\n          this.setState({\n            currentPendingValueValidIndex: index,\n          });\n        } else {\n          // On enter submit the pending value\n          if (\n            isOpen ||\n            ((!allowFreeform ||\n              this.state.currentPendingValue === undefined ||\n              this.state.currentPendingValue === null ||\n              this.state.currentPendingValue.length <= 0) &&\n              this.state.currentPendingValueValidIndex < 0)\n          ) {\n            // if we are open or\n            // if we are not allowing freeform or\n            // our we have no pending value\n            // and no valid pending index\n            // flip the open state\n            this.setState({\n              isOpen: !isOpen,\n            });\n          }\n        }\n        break;\n\n      case KeyCodes.tab:\n        // On enter submit the pending value\n        if (!this.props.multiSelect) {\n          this._submitPendingValue(ev);\n        }\n\n        // If we are not allowing freeform\n        // or the comboBox is open, flip the open state\n        if (isOpen) {\n          this._setOpenStateAndFocusOnClose(!isOpen, false /* focusInputAfterClose */);\n        }\n\n        // Allow TAB to propigate\n        return;\n\n      case KeyCodes.escape:\n        // reset the selected index\n        this._resetSelectedIndex();\n\n        // Close the menu if opened\n        if (isOpen) {\n          this.setState({\n            isOpen: false,\n          });\n        } else {\n          return;\n        }\n        break;\n\n      case KeyCodes.up:\n        // if we are in clearAll state (e.g. the user as hovering\n        // and has since mousedOut of the menu items),\n        // go to the last index\n        if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n          index = this.state.currentOptions.length;\n        }\n\n        if (ev.altKey || ev.metaKey) {\n          // Close the menu if it is open and break so\n          // that the event get stopPropagation and prevent default.\n          // Otherwise, we need to let the event continue to propagate\n          if (isOpen) {\n            this._setOpenStateAndFocusOnClose(!isOpen, true /* focusInputAfterClose */);\n            break;\n          }\n\n          return;\n        }\n\n        // Go to the previous option\n        this._setPendingInfoFromIndexAndDirection(index, SearchDirection.backward);\n        break;\n\n      case KeyCodes.down:\n        // Expand the comboBox on ALT + DownArrow\n        if (ev.altKey || ev.metaKey) {\n          this._setOpenStateAndFocusOnClose(true /* isOpen */, true /* focusInputAfterClose */);\n        } else {\n          // if we are in clearAll state (e.g. the user as hovering\n          // and has since mousedOut of the menu items),\n          // go to the first index\n          if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n            index = -1;\n          }\n\n          // Got to the next option\n          this._setPendingInfoFromIndexAndDirection(index, SearchDirection.forward);\n        }\n        break;\n\n      case KeyCodes.home:\n      case KeyCodes.end:\n        if (allowFreeform) {\n          return;\n        }\n\n        // Set the initial values to respond to HOME\n        // which goes to the first selectable option\n        index = -1;\n        let directionToSearch = SearchDirection.forward;\n\n        // If end, update the values to respond to END\n        // which goes to the last selectable option\n        if (ev.which === KeyCodes.end) {\n          index = currentOptions.length;\n          directionToSearch = SearchDirection.backward;\n        }\n\n        this._setPendingInfoFromIndexAndDirection(index, directionToSearch);\n        break;\n\n      /* eslint-disable no-fallthrough */\n      case KeyCodes.space:\n        // event handled in _onComboBoxKeyUp\n        if (!allowFreeform && autoComplete === 'off') {\n          break;\n        }\n\n      default:\n        /* eslint-enable no-fallthrough */\n        // are we processing a function key? if so bail out\n        if (ev.which >= 112 /* F1 */ && ev.which <= 123 /* F12 */) {\n          return;\n        }\n\n        // If we get here and we got either and ALT key\n        // or meta key, let the event propagate\n        if (ev.keyCode === KeyCodes.alt || ev.key === 'Meta' /* && isOpen */) {\n          return;\n        }\n\n        // If we are not allowing freeform and\n        // allowing autoComplete, handle the input here\n        // since we have marked the input as readonly\n        if (!allowFreeform && autoComplete === 'on') {\n          this._onInputChange(ev.key);\n          break;\n        }\n\n        // allow the key to propagate by default\n        return;\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  /**\n   * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n   */\n  private _isAltOrMeta(ev: React.KeyboardEvent<HTMLElement | Autofill>): boolean {\n    return ev.which === KeyCodes.alt || ev.key === 'Meta';\n  }\n\n  /**\n   * Handle keyup on the input\n   * @param ev - the keyboard event that was fired\n   */\n  private _onInputKeyUp = (ev: React.KeyboardEvent<HTMLElement | Autofill>): void => {\n    const { disabled, allowFreeform, autoComplete } = this.props;\n    const isOpen = this.state.isOpen;\n\n    // We close the menu on key up only if ALL of the following are true:\n    // - Most recent key down was alt or meta (command)\n    // - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n    //   expand/collapse the menu)\n    // - We're not on a Mac (or iOS)\n    // This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n    // closing any open context menus. There is not a similar behavior on Macs.\n    const keyPressIsAltOrMetaAlone = this._lastKeyDownWasAltOrMeta && this._isAltOrMeta(ev);\n    this._lastKeyDownWasAltOrMeta = false;\n    const shouldHandleKey = keyPressIsAltOrMetaAlone && !(isMac() || isIOS());\n\n    if (disabled) {\n      this._handleInputWhenDisabled(ev);\n      return;\n    }\n\n    switch (ev.which) {\n      case KeyCodes.space:\n        // If we are not allowing freeform and are not autoComplete\n        // make space expand/collapse the comboBox\n        // and allow the event to propagate\n        if (!allowFreeform && autoComplete === 'off') {\n          this._setOpenStateAndFocusOnClose(!isOpen, !!isOpen);\n        }\n        return;\n      default:\n        if (shouldHandleKey && isOpen) {\n          this._setOpenStateAndFocusOnClose(!isOpen, true /* focusInputAfterClose */);\n        } else {\n          if (this.state.focusState === 'focusing' && this.props.openOnKeyboardFocus) {\n            this.setState({ isOpen: true });\n          }\n          if (this.state.focusState !== 'focused') {\n            this.setState({ focusState: 'focused' });\n          }\n        }\n        return;\n    }\n  };\n\n  private _onOptionMouseEnter(index: number): void {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: index,\n    });\n  }\n\n  private _onOptionMouseMove(index: number): void {\n    this._gotMouseMove = true;\n\n    if (!this._isScrollIdle || this.state.currentPendingValueValidIndexOnHover === index) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: index,\n    });\n  }\n\n  private _onOptionMouseLeave = () => {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    // Ignore the event in persistMenu mode if the callout has\n    // closed. This is to avoid clearing the visuals on item click.\n    if (this.props.persistMenu && !this.state.isOpen) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: HoverStatus.clearAll,\n    });\n  };\n\n  private _shouldIgnoreMouseEvent(): boolean {\n    return !this._isScrollIdle || !this._gotMouseMove;\n  }\n\n  /**\n   * Handle dismissing the menu and\n   * eating the required key event when disabled\n   * @param ev - the keyboard event that was fired\n   */\n  private _handleInputWhenDisabled(ev: React.KeyboardEvent<HTMLElement | Autofill> | null): void {\n    // If we are disabled, close the menu (if needed)\n    // and eat all keystokes other than TAB or ESC\n    if (this.props.disabled) {\n      if (this.state.isOpen) {\n        this.setState({ isOpen: false });\n      }\n\n      // When disabled stop propagation and prevent default\n      // of the event unless we have a tab, escape, or function key\n      if (\n        ev !== null &&\n        ev.which !== KeyCodes.tab &&\n        ev.which !== KeyCodes.escape &&\n        (ev.which < 112 /* F1 */ || ev.which > 123) /* F12 */\n      ) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Click handler for the button of the comboBox\n   * and the input when not allowing freeform. This\n   * toggles the expand/collapse state of the comboBox (if enbled)\n   */\n  private _onComboBoxClick = (): void => {\n    const { disabled } = this.props;\n    const { isOpen } = this.state;\n\n    if (!disabled) {\n      this._setOpenStateAndFocusOnClose(!isOpen, false /* focusInputAfterClose */);\n      this.setState({ focusState: 'focused' });\n    }\n  };\n\n  /**\n   * Click handler for the autofill.\n   */\n  private _onAutofillClick = (): void => {\n    const { disabled, allowFreeform } = this.props;\n\n    if (allowFreeform && !disabled) {\n      this.focus(this.state.isOpen || this._processingTouch);\n    } else {\n      this._onComboBoxClick();\n    }\n  };\n\n  private _onTouchStart: () => void = () => {\n    if (this._comboBoxWrapper.current && !('onpointerdown' in this._comboBoxWrapper)) {\n      this._handleTouchAndPointerEvent();\n    }\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent();\n\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n\n  private _handleTouchAndPointerEvent() {\n    // If we already have an existing timeeout from a previous touch and pointer event\n    // cancel that timeout so we can set a nwe one.\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  }\n\n  /**\n   * Get the styles for the current option.\n   * @param item - Item props for the current option\n   */\n  private _getCaretButtonStyles(): IButtonStyles {\n    const { caretDownButtonStyles: customCaretDownButtonStyles } = this.props;\n    return getCaretDownButtonStyles(this.props.theme!, customCaretDownButtonStyles);\n  }\n\n  /**\n   * Get the styles for the current option.\n   * @param item - Item props for the current option\n   */\n  private _getCurrentOptionStyles(item: IComboBoxOption): Partial<IComboBoxOptionStyles> {\n    const { comboBoxOptionStyles: customStylesForAllOptions } = this.props;\n    const { styles: customStylesForCurrentOption } = item;\n\n    return getOptionStyles(\n      this.props.theme!,\n      customStylesForAllOptions,\n      customStylesForCurrentOption,\n      this._isPendingOption(item),\n      item.hidden,\n    );\n  }\n\n  /**\n   * Get the aria-activedescendant value for the comboxbox.\n   * @returns the id of the current focused combo item, otherwise the id of the currently selected element,\n   * null otherwise\n   */\n  private _getAriaActiveDescendantValue(): string | undefined {\n    let descendantText =\n      this.state.isOpen && this.state.selectedIndices && this.state.selectedIndices.length > 0\n        ? this._id + '-list' + this.state.selectedIndices[0]\n        : undefined;\n    if (this.state.isOpen && this._hasFocus() && this.state.currentPendingValueValidIndex !== -1) {\n      descendantText = this._id + '-list' + this.state.currentPendingValueValidIndex;\n    }\n    return descendantText;\n  }\n\n  /**\n   * Get the aria autocomplete value for the Combobox\n   * @returns 'inline' if auto-complete automatically dynamic, 'both' if we have a list of possible values to pick from\n   * and can dynamically populate input, and 'none' if auto-complete is not enabled as we can't give user inputs.\n   */\n  private _getAriaAutoCompleteValue(): 'none' | 'inline' | 'list' | 'both' | undefined {\n    const autoComplete = !this.props.disabled && this.props.autoComplete === 'on';\n    return autoComplete ? (this.props.allowFreeform ? 'inline' : 'both') : 'none';\n  }\n\n  private _isPendingOption(item: IComboBoxOption): boolean {\n    return item && item.index === this.state.currentPendingValueValidIndex;\n  }\n\n  /**\n   * Given default selected key(s) and selected key(s), return the selected keys(s).\n   * When default selected key(s) are available, they take precedence and return them instead of selected key(s).\n   *\n   * @returns No matter what specific types the input parameters are, always return an array of\n   *  either strings or numbers instead of premitive type.  This normlization makes caller's logic easier.\n   */\n  private _buildDefaultSelectedKeys(\n    defaultSelectedKey: string | number | string[] | number[] | null | undefined,\n    selectedKey: string | number | string[] | number[] | null | undefined,\n  ): string[] | number[] {\n    const selectedKeys: string[] | number[] = this._buildSelectedKeys(defaultSelectedKey);\n    if (selectedKeys.length) {\n      return selectedKeys;\n    }\n    return this._buildSelectedKeys(selectedKey);\n  }\n\n  private _buildSelectedKeys(\n    selectedKey: string | number | string[] | number[] | null | undefined,\n  ): string[] | number[] {\n    if (selectedKey === undefined) {\n      return [];\n    }\n\n    // need to cast here so typescript does not complain\n    return (selectedKey instanceof Array ? selectedKey : [selectedKey]) as string[] | number[];\n  }\n\n  // For scenarios where the option's text prop contains embedded styles, we use the option's\n  // ariaLabel value as the text in the input and for autocomplete matching. We know to use this\n  // when the useAriaLabelAsText prop is set to true\n  private _getPreviewText(item: IComboBoxOption): string {\n    return item.useAriaLabelAsText && item.ariaLabel ? item.ariaLabel : item.text;\n  }\n\n  private _normalizeToString(value?: string): string {\n    return value || '';\n  }\n\n  /**\n   * Returns true if the component has some kind of focus. If it's either focusing or if it's focused\n   */\n  private _hasFocus() {\n    return this.state.focusState !== 'none';\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}