{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst vertex_1 = __importDefault(require(\"./vertex\"));\n/**\n * @description Edge filter type that can be used to match edges based on a supplied filter.\n * @export\n * @class EdgeFilter\n */\nclass EdgeFilter {\n  /**\n   * @description Creates an instance of EdgeFilter.\n   * @param {(string | types.EdgeSelector)} filter The filter definition to use.\n   * @memberof EdgeFilter\n   */\n  constructor(filter) {\n    this._filter = filter;\n  }\n  /**\n   * @description Checks if the configured filter matches the specified edge.\n   * @param {Edge} edge The edge to match.\n   * @returns\n   * @memberof EdgeFilter\n   */\n  match(edge) {\n    if (!this._filter) {\n      return true;\n    }\n    if (typeof this._filter === 'string') {\n      return edge.label === this._filter;\n    }\n    return this._filter(edge);\n  }\n}\nexports.EdgeFilter = EdgeFilter;\n/**\n * @description Represents an edge in the graph with outgoing and incoming vertex references.\n * @export\n * @class Edge\n */\nclass Edge {\n  /**\n   * @description Creates an instance of Edge.\n   * @param {IndexEdge} indexEdge The edge index this edge wraps.\n   * @memberof Edge\n   */\n  constructor(indexEdge, index) {\n    if (!indexEdge) {\n      throw new ReferenceError(`Invalid graphEdge. graphEdge is ${indexEdge}`);\n    }\n    if (!index) {\n      throw new ReferenceError(`Invalid `);\n    }\n    this._graphEdge = indexEdge;\n    this._index = index;\n  }\n  /**\n   * @description Gets the id of the edge.\n   * @readonly\n   * @returns {string}\n   * @memberof Edge\n   */\n  get id() {\n    return this._graphEdge.id;\n  }\n  /**\n   * @description Gets the edge label.\n   * @readonly\n   * @type {string}\n   * @memberof Edge\n   */\n  get label() {\n    return this._graphEdge.label;\n  }\n  /**\n   * @description Gets the reference to the outgoing vertex.\n   * @readonly\n   * @type {Vertex}\n   * @memberof Edge\n   */\n  get fromVertex() {\n    const node = this._index.getNode(this._graphEdge.fromNodeId);\n    return new vertex_1.default(node, this._index);\n  }\n  /**\n   * @description Gets the reference to the incoming vertex.\n   * @readonly\n   * @type {Vertex}\n   * @memberof Edge\n   */\n  get toVertex() {\n    const node = this._index.getNode(this._graphEdge.toNodeId);\n    return new vertex_1.default(node, this._index);\n  }\n}\nexports.Edge = Edge;\nexports.default = Edge;","map":{"version":3,"sources":["../src/edge.ts"],"names":[],"mappings":";;;;;;;;;;AACA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;AAWA;;;;AAIG;AACH,MAAa,UAAU,CAAA;EAGnB;;;;AAIG;EACH,WAAA,CAAY,MAA8B,EAAA;IACtC,IAAI,CAAC,OAAO,GAAG,MAAM;EACzB;EAEA;;;;;AAKG;EACH,KAAK,CAAC,IAAU,EAAA;IACZ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;MACf,OAAO,IAAI;IACd;IAED,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;MAClC,OAAO,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,OAAO;IACrC;IAED,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;EAC7B;AACH;AA7BD,OAAA,CAAA,UAAA,GAAA,UAAA;AA+BA;;;;AAIG;AACH,MAAa,IAAI,CAAA;EAIb;;;;AAIG;EACH,WAAA,CAAY,SAAoB,EAAE,KAAiB,EAAA;IAC/C,IAAI,CAAC,SAAS,EAAE;MACZ,MAAM,IAAI,cAAc,CAAC,mCAAmC,SAAS,EAAE,CAAC;IAC3E;IAED,IAAI,CAAC,KAAK,EAAE;MACR,MAAM,IAAI,cAAc,CAAC,UAAU,CAAC;IACvC;IAED,IAAI,CAAC,UAAU,GAAG,SAAS;IAC3B,IAAI,CAAC,MAAM,GAAG,KAAK;EACvB;EAEA;;;;;AAKG;EACH,IAAI,EAAE,CAAA,EAAA;IACF,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;EAC7B;EAEA;;;;;AAKG;EACH,IAAI,KAAK,CAAA,EAAA;IACL,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK;EAChC;EAEA;;;;;AAKG;EACH,IAAI,UAAU,CAAA,EAAA;IACV,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;IAC5D,OAAO,IAAI,QAAA,CAAA,OAAM,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;EACxC;EAEA;;;;;AAKG;EACH,IAAI,QAAQ,CAAA,EAAA;IACR,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;IAC1D,OAAO,IAAI,QAAA,CAAA,OAAM,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC;EACxC;AACH;AA/DD,OAAA,CAAA,IAAA,GAAA,IAAA;AAiEA,OAAA,CAAA,OAAA,GAAe,IAAI","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vertex_1 = __importDefault(require(\"./vertex\"));\n/**\n * @description Edge filter type that can be used to match edges based on a supplied filter.\n * @export\n * @class EdgeFilter\n */\nclass EdgeFilter {\n    /**\n     * @description Creates an instance of EdgeFilter.\n     * @param {(string | types.EdgeSelector)} filter The filter definition to use.\n     * @memberof EdgeFilter\n     */\n    constructor(filter) {\n        this._filter = filter;\n    }\n    /**\n     * @description Checks if the configured filter matches the specified edge.\n     * @param {Edge} edge The edge to match.\n     * @returns\n     * @memberof EdgeFilter\n     */\n    match(edge) {\n        if (!this._filter) {\n            return true;\n        }\n        if (typeof this._filter === 'string') {\n            return edge.label === this._filter;\n        }\n        return this._filter(edge);\n    }\n}\nexports.EdgeFilter = EdgeFilter;\n/**\n * @description Represents an edge in the graph with outgoing and incoming vertex references.\n * @export\n * @class Edge\n */\nclass Edge {\n    /**\n     * @description Creates an instance of Edge.\n     * @param {IndexEdge} indexEdge The edge index this edge wraps.\n     * @memberof Edge\n     */\n    constructor(indexEdge, index) {\n        if (!indexEdge) {\n            throw new ReferenceError(`Invalid graphEdge. graphEdge is ${indexEdge}`);\n        }\n        if (!index) {\n            throw new ReferenceError(`Invalid `);\n        }\n        this._graphEdge = indexEdge;\n        this._index = index;\n    }\n    /**\n     * @description Gets the id of the edge.\n     * @readonly\n     * @returns {string}\n     * @memberof Edge\n     */\n    get id() {\n        return this._graphEdge.id;\n    }\n    /**\n     * @description Gets the edge label.\n     * @readonly\n     * @type {string}\n     * @memberof Edge\n     */\n    get label() {\n        return this._graphEdge.label;\n    }\n    /**\n     * @description Gets the reference to the outgoing vertex.\n     * @readonly\n     * @type {Vertex}\n     * @memberof Edge\n     */\n    get fromVertex() {\n        const node = this._index.getNode(this._graphEdge.fromNodeId);\n        return new vertex_1.default(node, this._index);\n    }\n    /**\n     * @description Gets the reference to the incoming vertex.\n     * @readonly\n     * @type {Vertex}\n     * @memberof Edge\n     */\n    get toVertex() {\n        const node = this._index.getNode(this._graphEdge.toNodeId);\n        return new vertex_1.default(node, this._index);\n    }\n}\nexports.Edge = Edge;\nexports.default = Edge;\n//# sourceMappingURL=edge.js.map"]},"metadata":{},"sourceType":"script"}