{"ast":null,"code":"import fs from \"fs\";\nimport path from \"path\";\nimport dotenv from \"dotenv\";\ndotenv.config();\nconst MODELS_FILE_PATH = path.join(__dirname, \"./models.json\");\nconst TWINS_FILE_PATH = path.join(__dirname, \"./twins.json\");\nclass ApiService {\n  constructor() {\n    this.models = [];\n    this.twins = [];\n  }\n\n  /**\n   * Load models from the local models.json file.\n   */\n  // eslint-disable-next-line require-await\n  async loadModels() {\n    try {\n      if (fs.existsSync(MODELS_FILE_PATH)) {\n        const modelsData = fs.readFileSync(MODELS_FILE_PATH, \"utf-8\");\n        this.models = JSON.parse(modelsData);\n        // eslint-disable-next-line no-console\n        console.log(\"Models loaded successfully.\");\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\"models.json not found. Ensure the file exists.\");\n        this.models = [];\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(`Error loading models: ${err.message}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Load twins from the local twins.json file.\n   */\n  // eslint-disable-next-line require-await\n  async loadTwins() {\n    try {\n      if (fs.existsSync(TWINS_FILE_PATH)) {\n        const twinsData = fs.readFileSync(TWINS_FILE_PATH, \"utf-8\");\n        this.twins = JSON.parse(twinsData);\n        // eslint-disable-next-line no-console\n        console.log(\"Twins loaded successfully.\");\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\"twins.json not found. Ensure the file exists.\");\n        this.twins = [];\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(`Error loading twins: ${err.message}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Save models to the local models.json file.\n   */\n  saveModels() {\n    try {\n      fs.writeFileSync(MODELS_FILE_PATH, JSON.stringify(this.models, null, 2));\n      // eslint-disable-next-line no-console\n      console.log(\"Models saved successfully.\");\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(`Error saving models: ${err.message}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Save twins to the local twins.json file.\n   */\n  saveTwins() {\n    try {\n      fs.writeFileSync(TWINS_FILE_PATH, JSON.stringify(this.twins, null, 2));\n      // eslint-disable-next-line no-console\n      console.log(\"Twins saved successfully.\");\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(`Error saving twins: ${err.message}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Query all models.\n   */\n  async queryModels() {\n    await this.loadModels();\n    return this.models;\n  }\n\n  /**\n   * Get a specific model by ID.\n   * @param {string} modelId - The ID of the model to retrieve.\n   */\n  async getModelById(modelId) {\n    await this.loadModels();\n    const model = this.models.find(m => m.id === modelId);\n    if (!model) {\n      throw new Error(`Model with ID ${modelId} not found.`);\n    }\n    return model;\n  }\n\n  /**\n   * Add new models.\n   * @param {Array} models - Array of models to add.\n   */\n  async addModels(models) {\n    await this.loadModels();\n    this.models.push(...models);\n    this.saveModels();\n    // eslint-disable-next-line no-console\n    console.log(`${models.length} models added successfully.`);\n  }\n\n  /**\n   * Delete a model by ID.\n   * @param {string} modelId - The ID of the model to delete.\n   */\n  async deleteModel(modelId) {\n    await this.loadModels();\n    const initialLength = this.models.length;\n    this.models = this.models.filter(model => model.id !== modelId);\n    if (this.models.length === initialLength) {\n      throw new Error(`Model with ID ${modelId} not found.`);\n    }\n    this.saveModels();\n    // eslint-disable-next-line no-console\n    console.log(`Model with ID ${modelId} deleted successfully.`);\n  }\n\n  /**\n   * Query all twins.\n   */\n  async getAllTwins() {\n    await this.loadTwins();\n    return this.twins;\n  }\n\n  /**\n   * Get a specific twin by ID.\n   * @param {string} twinId - The ID of the twin to retrieve.\n   */\n  async getTwinById(twinId) {\n    await this.loadTwins();\n    const twin = this.twins.find(t => t.$dtId === twinId);\n    if (!twin) {\n      throw new Error(`Twin with ID ${twinId} not found.`);\n    }\n    return twin;\n  }\n\n  /**\n   * Add new twins.\n   * @param {Array} twins - Array of twins to add.\n   */\n  async addTwins(twins) {\n    await this.loadTwins();\n    this.twins.push(...twins);\n    this.saveTwins();\n    // eslint-disable-next-line no-console\n    console.log(`${twins.length} twins added successfully.`);\n  }\n\n  /**\n   * Delete a twin by ID.\n   * @param {string} twinId - The ID of the twin to delete.\n   */\n  async deleteTwin(twinId) {\n    await this.loadTwins();\n    const initialLength = this.twins.length;\n    this.twins = this.twins.filter(twin => twin.$dtId !== twinId);\n    if (this.twins.length === initialLength) {\n      throw new Error(`Twin with ID ${twinId} not found.`);\n    }\n    this.saveTwins();\n    // eslint-disable-next-line no-console\n    console.log(`Twin with ID ${twinId} deleted successfully.`);\n  }\n\n  /**\n   * Get all relationships of a twin.\n   * @param {string} twinId - The ID of the twin to retrieve relationships for.\n   */\n  async getRelationships(twinId) {\n    await this.loadTwins();\n    const relationships = this.twins.filter(twin => twin.$sourceId === twinId || twin.$targetId === twinId).map(twin => twin.relationships || []);\n    return relationships.flat();\n  }\n\n  /**\n   * Delete a relationship by ID.\n   * @param {string} twinId - The ID of the twin that owns the relationship.\n   * @param {string} relationshipId - The ID of the relationship to delete.\n   */\n  async deleteRelationship(twinId, relationshipId) {\n    await this.loadTwins();\n    const twin = this.twins.find(t => t.$dtId === twinId);\n    if (!twin || !twin.relationships) {\n      throw new Error(`Twin or relationships for twin ID ${twinId} not found.`);\n    }\n    const initialLength = twin.relationships.length;\n    twin.relationships = twin.relationships.filter(rel => rel.$relationshipId !== relationshipId);\n    if (twin.relationships.length === initialLength) {\n      throw new Error(`Relationship with ID ${relationshipId} not found.`);\n    }\n    this.saveTwins();\n    // eslint-disable-next-line no-console\n    console.log(`Relationship with ID ${relationshipId} deleted successfully.`);\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["fs","path","dotenv","config","MODELS_FILE_PATH","join","__dirname","TWINS_FILE_PATH","ApiService","constructor","models","twins","loadModels","existsSync","modelsData","readFileSync","JSON","parse","console","log","warn","err","error","message","loadTwins","twinsData","saveModels","writeFileSync","stringify","saveTwins","queryModels","getModelById","modelId","model","find","m","id","Error","addModels","push","length","deleteModel","initialLength","filter","getAllTwins","getTwinById","twinId","twin","t","$dtId","addTwins","deleteTwin","getRelationships","relationships","$sourceId","$targetId","map","flat","deleteRelationship","relationshipId","rel","$relationshipId","apiService"],"sources":["/home/saharsh/digital-twins-explorer/client/src/services/ApiService.js"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst MODELS_FILE_PATH = path.join(__dirname, \"./models.json\");\nconst TWINS_FILE_PATH = path.join(__dirname, \"./twins.json\");\n\nclass ApiService {\n\n  constructor() {\n    this.models = [];\n    this.twins = [];\n  }\n\n  /**\n   * Load models from the local models.json file.\n   */\n  // eslint-disable-next-line require-await\n  async loadModels() {\n    try {\n      if (fs.existsSync(MODELS_FILE_PATH)) {\n        const modelsData = fs.readFileSync(MODELS_FILE_PATH, \"utf-8\");\n        this.models = JSON.parse(modelsData);\n        // eslint-disable-next-line no-console\n        console.log(\"Models loaded successfully.\");\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\"models.json not found. Ensure the file exists.\");\n        this.models = [];\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(`Error loading models: ${err.message}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Load twins from the local twins.json file.\n   */\n  // eslint-disable-next-line require-await\n  async loadTwins() {\n    try {\n      if (fs.existsSync(TWINS_FILE_PATH)) {\n        const twinsData = fs.readFileSync(TWINS_FILE_PATH, \"utf-8\");\n        this.twins = JSON.parse(twinsData);\n        // eslint-disable-next-line no-console\n        console.log(\"Twins loaded successfully.\");\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\"twins.json not found. Ensure the file exists.\");\n        this.twins = [];\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(`Error loading twins: ${err.message}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Save models to the local models.json file.\n   */\n  saveModels() {\n    try {\n      fs.writeFileSync(MODELS_FILE_PATH, JSON.stringify(this.models, null, 2));\n      // eslint-disable-next-line no-console\n      console.log(\"Models saved successfully.\");\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(`Error saving models: ${err.message}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Save twins to the local twins.json file.\n   */\n  saveTwins() {\n    try {\n      fs.writeFileSync(TWINS_FILE_PATH, JSON.stringify(this.twins, null, 2));\n      // eslint-disable-next-line no-console\n      console.log(\"Twins saved successfully.\");\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(`Error saving twins: ${err.message}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Query all models.\n   */\n  async queryModels() {\n    await this.loadModels();\n    return this.models;\n  }\n\n  /**\n   * Get a specific model by ID.\n   * @param {string} modelId - The ID of the model to retrieve.\n   */\n  async getModelById(modelId) {\n    await this.loadModels();\n    const model = this.models.find(m => m.id === modelId);\n    if (!model) {\n      throw new Error(`Model with ID ${modelId} not found.`);\n    }\n    return model;\n  }\n\n  /**\n   * Add new models.\n   * @param {Array} models - Array of models to add.\n   */\n  async addModels(models) {\n    await this.loadModels();\n    this.models.push(...models);\n    this.saveModels();\n    // eslint-disable-next-line no-console\n    console.log(`${models.length} models added successfully.`);\n  }\n\n  /**\n   * Delete a model by ID.\n   * @param {string} modelId - The ID of the model to delete.\n   */\n  async deleteModel(modelId) {\n    await this.loadModels();\n    const initialLength = this.models.length;\n    this.models = this.models.filter(model => model.id !== modelId);\n    if (this.models.length === initialLength) {\n      throw new Error(`Model with ID ${modelId} not found.`);\n    }\n    this.saveModels();\n    // eslint-disable-next-line no-console\n    console.log(`Model with ID ${modelId} deleted successfully.`);\n  }\n\n  /**\n   * Query all twins.\n   */\n  async getAllTwins() {\n    await this.loadTwins();\n    return this.twins;\n  }\n\n  /**\n   * Get a specific twin by ID.\n   * @param {string} twinId - The ID of the twin to retrieve.\n   */\n  async getTwinById(twinId) {\n    await this.loadTwins();\n    const twin = this.twins.find(t => t.$dtId === twinId);\n    if (!twin) {\n      throw new Error(`Twin with ID ${twinId} not found.`);\n    }\n    return twin;\n  }\n\n  /**\n   * Add new twins.\n   * @param {Array} twins - Array of twins to add.\n   */\n  async addTwins(twins) {\n    await this.loadTwins();\n    this.twins.push(...twins);\n    this.saveTwins();\n    // eslint-disable-next-line no-console\n    console.log(`${twins.length} twins added successfully.`);\n  }\n\n  /**\n   * Delete a twin by ID.\n   * @param {string} twinId - The ID of the twin to delete.\n   */\n  async deleteTwin(twinId) {\n    await this.loadTwins();\n    const initialLength = this.twins.length;\n    this.twins = this.twins.filter(twin => twin.$dtId !== twinId);\n    if (this.twins.length === initialLength) {\n      throw new Error(`Twin with ID ${twinId} not found.`);\n    }\n    this.saveTwins();\n    // eslint-disable-next-line no-console\n    console.log(`Twin with ID ${twinId} deleted successfully.`);\n  }\n\n  /**\n   * Get all relationships of a twin.\n   * @param {string} twinId - The ID of the twin to retrieve relationships for.\n   */\n  async getRelationships(twinId) {\n    await this.loadTwins();\n    const relationships = this.twins\n      .filter(twin => twin.$sourceId === twinId || twin.$targetId === twinId)\n      .map(twin => twin.relationships || []);\n    return relationships.flat();\n  }\n\n  /**\n   * Delete a relationship by ID.\n   * @param {string} twinId - The ID of the twin that owns the relationship.\n   * @param {string} relationshipId - The ID of the relationship to delete.\n   */\n  async deleteRelationship(twinId, relationshipId) {\n    await this.loadTwins();\n    const twin = this.twins.find(t => t.$dtId === twinId);\n    if (!twin || !twin.relationships) {\n      throw new Error(`Twin or relationships for twin ID ${twinId} not found.`);\n    }\n    const initialLength = twin.relationships.length;\n    twin.relationships = twin.relationships.filter(\n      rel => rel.$relationshipId !== relationshipId\n    );\n    if (twin.relationships.length === initialLength) {\n      throw new Error(`Relationship with ID ${relationshipId} not found.`);\n    }\n    this.saveTwins();\n    // eslint-disable-next-line no-console\n    console.log(`Relationship with ID ${relationshipId} deleted successfully.`);\n  }\n\n}\n\nexport const apiService = new ApiService();\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,IAAI;AACnB,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,QAAQ;AAC3BA,MAAM,CAACC,MAAM,CAAC,CAAC;AAEf,MAAMC,gBAAgB,GAAGH,IAAI,CAACI,IAAI,CAACC,SAAS,EAAE,eAAe,CAAC;AAC9D,MAAMC,eAAe,GAAGN,IAAI,CAACI,IAAI,CAACC,SAAS,EAAE,cAAc,CAAC;AAE5D,MAAME,UAAU,CAAC;EAEfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,KAAK,GAAG,EAAE;EACjB;;EAEA;AACF;AACA;EACE;EACA,MAAMC,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,IAAIZ,EAAE,CAACa,UAAU,CAACT,gBAAgB,CAAC,EAAE;QACnC,MAAMU,UAAU,GAAGd,EAAE,CAACe,YAAY,CAACX,gBAAgB,EAAE,OAAO,CAAC;QAC7D,IAAI,CAACM,MAAM,GAAGM,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC;QACpC;QACAI,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC5C,CAAC,MAAM;QACL;QACAD,OAAO,CAACE,IAAI,CAAC,gDAAgD,CAAC;QAC9D,IAAI,CAACV,MAAM,GAAG,EAAE;MAClB;IACF,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZ;MACAH,OAAO,CAACI,KAAK,CAAC,yBAAyBD,GAAG,CAACE,OAAO,EAAE,CAAC;MACrD,MAAMF,GAAG;IACX;EACF;;EAEA;AACF;AACA;EACE;EACA,MAAMG,SAASA,CAAA,EAAG;IAChB,IAAI;MACF,IAAIxB,EAAE,CAACa,UAAU,CAACN,eAAe,CAAC,EAAE;QAClC,MAAMkB,SAAS,GAAGzB,EAAE,CAACe,YAAY,CAACR,eAAe,EAAE,OAAO,CAAC;QAC3D,IAAI,CAACI,KAAK,GAAGK,IAAI,CAACC,KAAK,CAACQ,SAAS,CAAC;QAClC;QACAP,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MAC3C,CAAC,MAAM;QACL;QACAD,OAAO,CAACE,IAAI,CAAC,+CAA+C,CAAC;QAC7D,IAAI,CAACT,KAAK,GAAG,EAAE;MACjB;IACF,CAAC,CAAC,OAAOU,GAAG,EAAE;MACZ;MACAH,OAAO,CAACI,KAAK,CAAC,wBAAwBD,GAAG,CAACE,OAAO,EAAE,CAAC;MACpD,MAAMF,GAAG;IACX;EACF;;EAEA;AACF;AACA;EACEK,UAAUA,CAAA,EAAG;IACX,IAAI;MACF1B,EAAE,CAAC2B,aAAa,CAACvB,gBAAgB,EAAEY,IAAI,CAACY,SAAS,CAAC,IAAI,CAAClB,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MACxE;MACAQ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC3C,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ;MACAH,OAAO,CAACI,KAAK,CAAC,wBAAwBD,GAAG,CAACE,OAAO,EAAE,CAAC;MACpD,MAAMF,GAAG;IACX;EACF;;EAEA;AACF;AACA;EACEQ,SAASA,CAAA,EAAG;IACV,IAAI;MACF7B,EAAE,CAAC2B,aAAa,CAACpB,eAAe,EAAES,IAAI,CAACY,SAAS,CAAC,IAAI,CAACjB,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MACtE;MACAO,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAC1C,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ;MACAH,OAAO,CAACI,KAAK,CAAC,uBAAuBD,GAAG,CAACE,OAAO,EAAE,CAAC;MACnD,MAAMF,GAAG;IACX;EACF;;EAEA;AACF;AACA;EACE,MAAMS,WAAWA,CAAA,EAAG;IAClB,MAAM,IAAI,CAAClB,UAAU,CAAC,CAAC;IACvB,OAAO,IAAI,CAACF,MAAM;EACpB;;EAEA;AACF;AACA;AACA;EACE,MAAMqB,YAAYA,CAACC,OAAO,EAAE;IAC1B,MAAM,IAAI,CAACpB,UAAU,CAAC,CAAC;IACvB,MAAMqB,KAAK,GAAG,IAAI,CAACvB,MAAM,CAACwB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,OAAO,CAAC;IACrD,IAAI,CAACC,KAAK,EAAE;MACV,MAAM,IAAII,KAAK,CAAC,iBAAiBL,OAAO,aAAa,CAAC;IACxD;IACA,OAAOC,KAAK;EACd;;EAEA;AACF;AACA;AACA;EACE,MAAMK,SAASA,CAAC5B,MAAM,EAAE;IACtB,MAAM,IAAI,CAACE,UAAU,CAAC,CAAC;IACvB,IAAI,CAACF,MAAM,CAAC6B,IAAI,CAAC,GAAG7B,MAAM,CAAC;IAC3B,IAAI,CAACgB,UAAU,CAAC,CAAC;IACjB;IACAR,OAAO,CAACC,GAAG,CAAC,GAAGT,MAAM,CAAC8B,MAAM,6BAA6B,CAAC;EAC5D;;EAEA;AACF;AACA;AACA;EACE,MAAMC,WAAWA,CAACT,OAAO,EAAE;IACzB,MAAM,IAAI,CAACpB,UAAU,CAAC,CAAC;IACvB,MAAM8B,aAAa,GAAG,IAAI,CAAChC,MAAM,CAAC8B,MAAM;IACxC,IAAI,CAAC9B,MAAM,GAAG,IAAI,CAACA,MAAM,CAACiC,MAAM,CAACV,KAAK,IAAIA,KAAK,CAACG,EAAE,KAAKJ,OAAO,CAAC;IAC/D,IAAI,IAAI,CAACtB,MAAM,CAAC8B,MAAM,KAAKE,aAAa,EAAE;MACxC,MAAM,IAAIL,KAAK,CAAC,iBAAiBL,OAAO,aAAa,CAAC;IACxD;IACA,IAAI,CAACN,UAAU,CAAC,CAAC;IACjB;IACAR,OAAO,CAACC,GAAG,CAAC,iBAAiBa,OAAO,wBAAwB,CAAC;EAC/D;;EAEA;AACF;AACA;EACE,MAAMY,WAAWA,CAAA,EAAG;IAClB,MAAM,IAAI,CAACpB,SAAS,CAAC,CAAC;IACtB,OAAO,IAAI,CAACb,KAAK;EACnB;;EAEA;AACF;AACA;AACA;EACE,MAAMkC,WAAWA,CAACC,MAAM,EAAE;IACxB,MAAM,IAAI,CAACtB,SAAS,CAAC,CAAC;IACtB,MAAMuB,IAAI,GAAG,IAAI,CAACpC,KAAK,CAACuB,IAAI,CAACc,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKH,MAAM,CAAC;IACrD,IAAI,CAACC,IAAI,EAAE;MACT,MAAM,IAAIV,KAAK,CAAC,gBAAgBS,MAAM,aAAa,CAAC;IACtD;IACA,OAAOC,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACE,MAAMG,QAAQA,CAACvC,KAAK,EAAE;IACpB,MAAM,IAAI,CAACa,SAAS,CAAC,CAAC;IACtB,IAAI,CAACb,KAAK,CAAC4B,IAAI,CAAC,GAAG5B,KAAK,CAAC;IACzB,IAAI,CAACkB,SAAS,CAAC,CAAC;IAChB;IACAX,OAAO,CAACC,GAAG,CAAC,GAAGR,KAAK,CAAC6B,MAAM,4BAA4B,CAAC;EAC1D;;EAEA;AACF;AACA;AACA;EACE,MAAMW,UAAUA,CAACL,MAAM,EAAE;IACvB,MAAM,IAAI,CAACtB,SAAS,CAAC,CAAC;IACtB,MAAMkB,aAAa,GAAG,IAAI,CAAC/B,KAAK,CAAC6B,MAAM;IACvC,IAAI,CAAC7B,KAAK,GAAG,IAAI,CAACA,KAAK,CAACgC,MAAM,CAACI,IAAI,IAAIA,IAAI,CAACE,KAAK,KAAKH,MAAM,CAAC;IAC7D,IAAI,IAAI,CAACnC,KAAK,CAAC6B,MAAM,KAAKE,aAAa,EAAE;MACvC,MAAM,IAAIL,KAAK,CAAC,gBAAgBS,MAAM,aAAa,CAAC;IACtD;IACA,IAAI,CAACjB,SAAS,CAAC,CAAC;IAChB;IACAX,OAAO,CAACC,GAAG,CAAC,gBAAgB2B,MAAM,wBAAwB,CAAC;EAC7D;;EAEA;AACF;AACA;AACA;EACE,MAAMM,gBAAgBA,CAACN,MAAM,EAAE;IAC7B,MAAM,IAAI,CAACtB,SAAS,CAAC,CAAC;IACtB,MAAM6B,aAAa,GAAG,IAAI,CAAC1C,KAAK,CAC7BgC,MAAM,CAACI,IAAI,IAAIA,IAAI,CAACO,SAAS,KAAKR,MAAM,IAAIC,IAAI,CAACQ,SAAS,KAAKT,MAAM,CAAC,CACtEU,GAAG,CAACT,IAAI,IAAIA,IAAI,CAACM,aAAa,IAAI,EAAE,CAAC;IACxC,OAAOA,aAAa,CAACI,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,kBAAkBA,CAACZ,MAAM,EAAEa,cAAc,EAAE;IAC/C,MAAM,IAAI,CAACnC,SAAS,CAAC,CAAC;IACtB,MAAMuB,IAAI,GAAG,IAAI,CAACpC,KAAK,CAACuB,IAAI,CAACc,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKH,MAAM,CAAC;IACrD,IAAI,CAACC,IAAI,IAAI,CAACA,IAAI,CAACM,aAAa,EAAE;MAChC,MAAM,IAAIhB,KAAK,CAAC,qCAAqCS,MAAM,aAAa,CAAC;IAC3E;IACA,MAAMJ,aAAa,GAAGK,IAAI,CAACM,aAAa,CAACb,MAAM;IAC/CO,IAAI,CAACM,aAAa,GAAGN,IAAI,CAACM,aAAa,CAACV,MAAM,CAC5CiB,GAAG,IAAIA,GAAG,CAACC,eAAe,KAAKF,cACjC,CAAC;IACD,IAAIZ,IAAI,CAACM,aAAa,CAACb,MAAM,KAAKE,aAAa,EAAE;MAC/C,MAAM,IAAIL,KAAK,CAAC,wBAAwBsB,cAAc,aAAa,CAAC;IACtE;IACA,IAAI,CAAC9B,SAAS,CAAC,CAAC;IAChB;IACAX,OAAO,CAACC,GAAG,CAAC,wBAAwBwC,cAAc,wBAAwB,CAAC;EAC7E;AAEF;AAEA,OAAO,MAAMG,UAAU,GAAG,IAAItD,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}