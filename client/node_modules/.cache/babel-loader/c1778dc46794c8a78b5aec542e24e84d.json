{"ast":null,"code":"import { getColorFromRGBA } from './getColorFromRGBA';\n/**\n * Gets a color with a single RGBA component updated to a new value.\n * Does not modify the original `color`. Alpha defaults to 100 if not set.\n */\nexport function updateRGB(color, component, value) {\n  var _a;\n  return getColorFromRGBA((_a = {\n    r: color.r,\n    g: color.g,\n    b: color.b,\n    a: color.a\n  }, _a[component] = value, _a));\n}","map":{"version":3,"sources":["utilities/color/updateRGB.ts"],"names":[],"mappings":"AACA,SAAS,gBAAgB,QAAQ,oBAAoB;AAErD;;;AAGG;AACH,OAAM,SAAU,SAAS,CAAC,KAAa,EAAE,SAAqB,EAAE,KAAa,EAAA;;EAC3E,OAAO,gBAAgB,EAAA,EAAA,GAAA;IACrB,CAAC,EAAE,KAAK,CAAC,CAAC;IACV,CAAC,EAAE,KAAK,CAAC,CAAC;IACV,CAAC,EAAE,KAAK,CAAC,CAAC;IACV,CAAC,EAAE,KAAK,CAAC;KACT,EAAA,CAAC,SAAS,CAAA,GAAG,KAAK,E,IAClB;AACJ","sourcesContent":["import { IColor, IRGB } from './interfaces';\nimport { getColorFromRGBA } from './getColorFromRGBA';\n\n/**\n * Gets a color with a single RGBA component updated to a new value.\n * Does not modify the original `color`. Alpha defaults to 100 if not set.\n */\nexport function updateRGB(color: IColor, component: keyof IRGB, value: number): IColor {\n  return getColorFromRGBA({\n    r: color.r,\n    g: color.g,\n    b: color.b,\n    a: color.a,\n    [component]: value,\n  });\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}