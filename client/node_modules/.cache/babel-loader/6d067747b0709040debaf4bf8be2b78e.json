{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, KeyCodes, classNamesFunction, css, styled } from '../../../Utilities';\nimport { CommandButton } from '../../../Button';\nimport { Spinner } from '../../../Spinner';\nimport { Announced } from '../../../Announced';\nimport { SuggestionActionType } from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport * as stylesImport from './Suggestions.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\nvar StyledSuggestionsItem = styled(SuggestionsItem, suggestionsItemStyles, undefined, {\n  scope: 'SuggestionItem'\n});\n/**\n * {@docCategory Pickers}\n */\nvar Suggestions = /** @class */function (_super) {\n  __extends(Suggestions, _super);\n  function Suggestions(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n    _this._forceResolveButton = React.createRef();\n    _this._searchForMoreButton = React.createRef();\n    _this._selectedElement = React.createRef();\n    /**\n     * Returns true if the event was handled, false otherwise\n     */\n    _this.tryHandleKeyDown = function (keyCode, currentSuggestionIndex) {\n      var isEventHandled = false;\n      var newSelectedActionType = null;\n      var currentSelectedAction = _this.state.selectedActionType;\n      var suggestionLength = _this.props.suggestions.length;\n      if (keyCode === KeyCodes.down) {\n        switch (currentSelectedAction) {\n          case SuggestionActionType.forceResolve:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n              newSelectedActionType = SuggestionActionType.none;\n            } else if (_this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            } else {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n            break;\n          case SuggestionActionType.searchMore:\n            if (_this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n              newSelectedActionType = SuggestionActionType.none;\n            } else {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            }\n            break;\n          case SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n            break;\n        }\n      } else if (keyCode === KeyCodes.up) {\n        switch (currentSelectedAction) {\n          case SuggestionActionType.forceResolve:\n            if (_this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n              newSelectedActionType = SuggestionActionType.none;\n            }\n            break;\n          case SuggestionActionType.searchMore:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n              newSelectedActionType = SuggestionActionType.none;\n            } else if (_this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n            break;\n          case SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            }\n            break;\n        }\n      }\n      if (newSelectedActionType !== null) {\n        _this.setState({\n          selectedActionType: newSelectedActionType\n        });\n        isEventHandled = true;\n      }\n      return isEventHandled;\n    };\n    _this._getAlertText = function () {\n      var _a = _this.props,\n        isLoading = _a.isLoading,\n        isSearching = _a.isSearching,\n        suggestions = _a.suggestions,\n        suggestionsAvailableAlertText = _a.suggestionsAvailableAlertText,\n        noResultsFoundText = _a.noResultsFoundText;\n      if (!isLoading && !isSearching) {\n        if (suggestions.length > 0) {\n          return suggestionsAvailableAlertText || '';\n        }\n        if (noResultsFoundText) {\n          return noResultsFoundText;\n        }\n      }\n      return '';\n    };\n    _this._getMoreResults = function () {\n      if (_this.props.onGetMoreResults) {\n        _this.props.onGetMoreResults();\n      }\n    };\n    _this._forceResolve = function () {\n      if (_this.props.createGenericItem) {\n        _this.props.createGenericItem();\n      }\n    };\n    _this._shouldShowForceResolve = function () {\n      return _this.props.showForceResolve ? _this.props.showForceResolve() : false;\n    };\n    _this._onClickTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        _this.props.onSuggestionClick(ev, item, index);\n      };\n    };\n    _this._refocusOnSuggestions = function (keyCode) {\n      if (typeof _this.props.refocusSuggestions === 'function') {\n        _this.props.refocusSuggestions(keyCode);\n      }\n    };\n    _this._onRemoveTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        var onSuggestionRemove = _this.props.onSuggestionRemove;\n        onSuggestionRemove(ev, item, index);\n        ev.stopPropagation();\n      };\n    };\n    initializeComponentRef(_this);\n    _this.state = {\n      selectedActionType: SuggestionActionType.none\n    };\n    return _this;\n  }\n  Suggestions.prototype.componentDidMount = function () {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  };\n  Suggestions.prototype.componentDidUpdate = function () {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  };\n  Suggestions.prototype.render = function () {\n    var _a, _b;\n    var _this = this;\n    var _c = this.props,\n      forceResolveText = _c.forceResolveText,\n      mostRecentlyUsedHeaderText = _c.mostRecentlyUsedHeaderText,\n      searchForMoreText = _c.searchForMoreText,\n      className = _c.className,\n      moreSuggestionsAvailable = _c.moreSuggestionsAvailable,\n      noResultsFoundText = _c.noResultsFoundText,\n      suggestions = _c.suggestions,\n      isLoading = _c.isLoading,\n      isSearching = _c.isSearching,\n      loadingText = _c.loadingText,\n      onRenderNoResultFound = _c.onRenderNoResultFound,\n      searchingText = _c.searchingText,\n      isMostRecentlyUsedVisible = _c.isMostRecentlyUsedVisible,\n      resultsMaximumNumber = _c.resultsMaximumNumber,\n      resultsFooterFull = _c.resultsFooterFull,\n      resultsFooter = _c.resultsFooter,\n      _d = _c.isResultsFooterVisible,\n      isResultsFooterVisible = _d === void 0 ? true : _d,\n      suggestionsHeaderText = _c.suggestionsHeaderText,\n      suggestionsClassName = _c.suggestionsClassName,\n      theme = _c.theme,\n      styles = _c.styles,\n      suggestionsListId = _c.suggestionsListId;\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    this._classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggestionsClassName: suggestionsClassName,\n      forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n      searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore\n    }) : {\n      root: css('ms-Suggestions', className, legacyStyles.root),\n      title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n      searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, (_a = {}, _a['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === SuggestionActionType.searchMore, _a)),\n      forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, (_b = {}, _b['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === SuggestionActionType.forceResolve, _b)),\n      suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n      suggestionsContainer: css('ms-Suggestions-container', legacyStyles.suggestionsContainer, suggestionsClassName),\n      noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone)\n    };\n    var spinnerStyles = this._classNames.subComponentStyles ? this._classNames.subComponentStyles.spinner : undefined;\n    // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n    var spinnerClassNameOrStyles = styles ? {\n      styles: spinnerStyles\n    } : {\n      className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner)\n    };\n    var noResults = function () {\n      return noResultsFoundText ? React.createElement(\"div\", {\n        className: _this._classNames.noSuggestions\n      }, noResultsFoundText) : null;\n    };\n    // MostRecently Used text should supercede the header text if it's there and available.\n    var headerText = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n    var footerTitle = undefined;\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= resultsMaximumNumber ? resultsFooterFull : resultsFooter;\n    }\n    var hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n    var divProps = hasNoSuggestions || isLoading ? {\n      role: 'dialog',\n      id: suggestionsListId\n    } : {};\n    var forceResolveId = this.state.selectedActionType === SuggestionActionType.forceResolve ? 'sug-selectedAction' : undefined;\n    var searchForMoreId = this.state.selectedActionType === SuggestionActionType.searchMore ? 'sug-selectedAction' : undefined;\n    return React.createElement(\"div\", __assign({\n      className: this._classNames.root\n    }, divProps), React.createElement(Announced, {\n      message: this._getAlertText(),\n      \"aria-live\": \"polite\"\n    }), headerText ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, headerText) : null, forceResolveText && this._shouldShowForceResolve() && React.createElement(CommandButton, {\n      componentRef: this._forceResolveButton,\n      className: this._classNames.forceResolveButton,\n      id: forceResolveId,\n      onClick: this._forceResolve,\n      \"data-automationid\": 'sug-forceResolve'\n    }, forceResolveText), isLoading && React.createElement(Spinner, __assign({}, spinnerClassNameOrStyles, {\n      label: loadingText\n    })), hasNoSuggestions ? onRenderNoResultFound ? onRenderNoResultFound(undefined, noResults) : noResults() : this._renderSuggestions(), searchForMoreText && moreSuggestionsAvailable && React.createElement(CommandButton, {\n      componentRef: this._searchForMoreButton,\n      className: this._classNames.searchForMoreButton,\n      iconProps: {\n        iconName: 'Search'\n      },\n      id: searchForMoreId,\n      onClick: this._getMoreResults,\n      \"data-automationid\": 'sug-searchForMore'\n    }, searchForMoreText), isSearching ? React.createElement(Spinner, __assign({}, spinnerClassNameOrStyles, {\n      label: searchingText\n    })) : null, footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, footerTitle(this.props)) : null);\n  };\n  Suggestions.prototype.hasSuggestedAction = function () {\n    return !!this._searchForMoreButton.current || !!this._forceResolveButton.current;\n  };\n  Suggestions.prototype.hasSuggestedActionSelected = function () {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  };\n  Suggestions.prototype.executeSelectedAction = function () {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n        break;\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n        break;\n    }\n  };\n  Suggestions.prototype.focusAboveSuggestions = function () {\n    if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.forceResolve\n      });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.searchMore\n      });\n    }\n  };\n  Suggestions.prototype.focusBelowSuggestions = function () {\n    if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.searchMore\n      });\n    } else if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.forceResolve\n      });\n    }\n  };\n  Suggestions.prototype.focusSearchForMoreButton = function () {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  };\n  // TODO get the element to scroll into view properly regardless of direction.\n  Suggestions.prototype.scrollSelected = function () {\n    if (this._selectedElement.current && this._selectedElement.current.scrollIntoView !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  };\n  Suggestions.prototype._renderSuggestions = function () {\n    var _this = this;\n    var _a = this.props,\n      isMostRecentlyUsedVisible = _a.isMostRecentlyUsedVisible,\n      mostRecentlyUsedHeaderText = _a.mostRecentlyUsedHeaderText,\n      onRenderSuggestion = _a.onRenderSuggestion,\n      removeSuggestionAriaLabel = _a.removeSuggestionAriaLabel,\n      suggestionsItemClassName = _a.suggestionsItemClassName,\n      resultsMaximumNumber = _a.resultsMaximumNumber,\n      showRemoveButtons = _a.showRemoveButtons,\n      suggestionsContainerAriaLabel = _a.suggestionsContainerAriaLabel,\n      suggestionsHeaderText = _a.suggestionsHeaderText,\n      suggestionsListId = _a.suggestionsListId;\n    var suggestions = this.props.suggestions;\n    var StyledTypedSuggestionsItem = StyledSuggestionsItem;\n    var selectedIndex = -1;\n    suggestions.some(function (element, index) {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n      return false;\n    });\n    if (resultsMaximumNumber) {\n      suggestions = selectedIndex >= resultsMaximumNumber ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1) : suggestions.slice(0, resultsMaximumNumber);\n    }\n    if (suggestions.length === 0) {\n      return null;\n    }\n    // MostRecently Used text should supercede the header text if it's there and available.\n    var headerText = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n    return React.createElement(\"div\", {\n      className: this._classNames.suggestionsContainer,\n      id: suggestionsListId,\n      role: \"listbox\",\n      \"aria-label\": suggestionsContainerAriaLabel || headerText\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: suggestion.selected ? _this._selectedElement : undefined,\n        key: suggestion.item.key ? suggestion.item.key : index,\n        role: \"presentation\"\n      }, React.createElement(StyledTypedSuggestionsItem, {\n        suggestionModel: suggestion,\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        removeButtonAriaLabel: removeSuggestionAriaLabel,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index),\n        id: 'sug-' + index\n      }));\n    }));\n  };\n  return Suggestions;\n}(React.Component);\nexport { Suggestions };","map":{"version":3,"sources":["components/pickers/Suggestions/Suggestions.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  KeyCodes,\n  classNamesFunction,\n  IStyleFunctionOrObject,\n  css,\n  styled,\n} from '../../../Utilities';\nimport { IProcessedStyleSet } from '../../../Styling';\nimport { CommandButton, IButton } from '../../../Button';\nimport { Spinner, ISpinnerStyleProps, ISpinnerStyles } from '../../../Spinner';\nimport { Announced } from '../../../Announced';\nimport {\n  ISuggestionsProps,\n  SuggestionActionType,\n  ISuggestionsStyleProps,\n  ISuggestionsStyles,\n} from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nimport * as stylesImport from './Suggestions.scss';\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsStyleProps, ISuggestionsStyles>();\n\nexport interface ISuggestionsState {\n  selectedActionType: SuggestionActionType;\n}\n\nconst StyledSuggestionsItem = styled<ISuggestionItemProps<any>, ISuggestionsItemStyleProps, ISuggestionsItemStyles>(\n  SuggestionsItem,\n  suggestionsItemStyles,\n  undefined,\n  { scope: 'SuggestionItem' },\n);\n\n/**\n * {@docCategory Pickers}\n */\nexport class Suggestions<T> extends React.Component<ISuggestionsProps<T>, ISuggestionsState> {\n  protected _forceResolveButton = React.createRef<IButton>();\n  protected _searchForMoreButton = React.createRef<IButton>();\n  protected _selectedElement = React.createRef<HTMLDivElement>();\n  private activeSelectedElement: HTMLDivElement | null;\n  private _classNames: Partial<IProcessedStyleSet<ISuggestionsStyles>>;\n\n  constructor(suggestionsProps: ISuggestionsProps<T>) {\n    super(suggestionsProps);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      selectedActionType: SuggestionActionType.none,\n    };\n  }\n\n  public componentDidMount(): void {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  }\n\n  public componentDidUpdate(): void {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      forceResolveText,\n      mostRecentlyUsedHeaderText,\n      searchForMoreText,\n      className,\n      moreSuggestionsAvailable,\n      noResultsFoundText,\n      suggestions,\n      isLoading,\n      isSearching,\n      loadingText,\n      onRenderNoResultFound,\n      searchingText,\n      isMostRecentlyUsedVisible,\n      resultsMaximumNumber,\n      resultsFooterFull,\n      resultsFooter,\n      isResultsFooterVisible = true,\n      suggestionsHeaderText,\n      suggestionsClassName,\n      theme,\n      styles,\n      suggestionsListId,\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    this._classNames = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggestionsClassName,\n          forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n          searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore,\n        })\n      : {\n          root: css('ms-Suggestions', className, legacyStyles.root),\n          title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n          searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]:\n              this.state.selectedActionType === SuggestionActionType.searchMore,\n          }),\n          forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]:\n              this.state.selectedActionType === SuggestionActionType.forceResolve,\n          }),\n          suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n          suggestionsContainer: css(\n            'ms-Suggestions-container',\n            legacyStyles.suggestionsContainer,\n            suggestionsClassName,\n          ),\n          noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone),\n        };\n\n    const spinnerStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.spinner as IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>)\n      : undefined;\n\n    // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n    const spinnerClassNameOrStyles = styles\n      ? { styles: spinnerStyles }\n      : { className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner) };\n\n    const noResults = () => {\n      return noResultsFoundText ? <div className={this._classNames.noSuggestions}>{noResultsFoundText}</div> : null;\n    };\n\n    // MostRecently Used text should supercede the header text if it's there and available.\n    let headerText: string | undefined = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    let footerTitle: ((props: ISuggestionsProps<T>) => JSX.Element) | undefined = undefined;\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= (resultsMaximumNumber as number) ? resultsFooterFull : resultsFooter;\n    }\n\n    const hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n    const divProps: React.HtmlHTMLAttributes<HTMLDivElement> =\n      hasNoSuggestions || isLoading ? { role: 'dialog', id: suggestionsListId } : {};\n\n    const forceResolveId =\n      this.state.selectedActionType === SuggestionActionType.forceResolve ? 'sug-selectedAction' : undefined;\n    const searchForMoreId =\n      this.state.selectedActionType === SuggestionActionType.searchMore ? 'sug-selectedAction' : undefined;\n\n    return (\n      <div className={this._classNames.root} {...divProps}>\n        <Announced message={this._getAlertText()} aria-live=\"polite\" />\n\n        {headerText ? <div className={this._classNames.title}>{headerText}</div> : null}\n        {forceResolveText && this._shouldShowForceResolve() && (\n          <CommandButton\n            componentRef={this._forceResolveButton}\n            className={this._classNames.forceResolveButton}\n            id={forceResolveId}\n            onClick={this._forceResolve}\n            data-automationid={'sug-forceResolve'}\n          >\n            {forceResolveText}\n          </CommandButton>\n        )}\n        {isLoading && <Spinner {...spinnerClassNameOrStyles} label={loadingText} />}\n        {hasNoSuggestions\n          ? onRenderNoResultFound\n            ? onRenderNoResultFound(undefined, noResults)\n            : noResults()\n          : this._renderSuggestions()}\n        {searchForMoreText && moreSuggestionsAvailable && (\n          <CommandButton\n            componentRef={this._searchForMoreButton}\n            className={this._classNames.searchForMoreButton}\n            iconProps={{ iconName: 'Search' }}\n            id={searchForMoreId}\n            onClick={this._getMoreResults}\n            data-automationid={'sug-searchForMore'}\n          >\n            {searchForMoreText}\n          </CommandButton>\n        )}\n        {isSearching ? <Spinner {...spinnerClassNameOrStyles} label={searchingText} /> : null}\n        {footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? (\n          <div className={this._classNames.title}>{footerTitle(this.props)}</div>\n        ) : null}\n      </div>\n    );\n  }\n\n  /**\n   * Returns true if the event was handled, false otherwise\n   */\n  public tryHandleKeyDown = (keyCode: number, currentSuggestionIndex: number): boolean => {\n    let isEventHandled = false;\n    let newSelectedActionType = null;\n    const currentSelectedAction = this.state.selectedActionType;\n    const suggestionLength = this.props.suggestions.length;\n    if (keyCode === KeyCodes.down) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n      }\n    } else if (keyCode === KeyCodes.up) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n      }\n    }\n\n    if (newSelectedActionType !== null) {\n      this.setState({ selectedActionType: newSelectedActionType });\n      isEventHandled = true;\n    }\n\n    return isEventHandled;\n  };\n\n  public hasSuggestedAction(): boolean {\n    return !!this._searchForMoreButton.current || !!this._forceResolveButton.current;\n  }\n\n  public hasSuggestedActionSelected(): boolean {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  }\n\n  public executeSelectedAction(): void {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n        break;\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n        break;\n    }\n  }\n\n  public focusAboveSuggestions(): void {\n    if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    }\n  }\n\n  public focusBelowSuggestions(): void {\n    if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    } else if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    }\n  }\n\n  public focusSearchForMoreButton(): void {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  }\n\n  // TODO get the element to scroll into view properly regardless of direction.\n  public scrollSelected(): void {\n    if (this._selectedElement.current && this._selectedElement.current.scrollIntoView !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  }\n\n  private _getAlertText = () => {\n    const { isLoading, isSearching, suggestions, suggestionsAvailableAlertText, noResultsFoundText } = this.props;\n    if (!isLoading && !isSearching) {\n      if (suggestions.length > 0) {\n        return suggestionsAvailableAlertText || '';\n      }\n      if (noResultsFoundText) {\n        return noResultsFoundText;\n      }\n    }\n    return '';\n  };\n\n  private _renderSuggestions(): JSX.Element | null {\n    const {\n      isMostRecentlyUsedVisible,\n      mostRecentlyUsedHeaderText,\n      onRenderSuggestion,\n      removeSuggestionAriaLabel,\n      suggestionsItemClassName,\n      resultsMaximumNumber,\n      showRemoveButtons,\n      suggestionsContainerAriaLabel,\n      suggestionsHeaderText,\n      suggestionsListId,\n    } = this.props;\n\n    let { suggestions } = this.props;\n\n    const StyledTypedSuggestionsItem: React.FunctionComponent<ISuggestionItemProps<T>> = StyledSuggestionsItem;\n\n    let selectedIndex = -1;\n    suggestions.some((element, index) => {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n      return false;\n    });\n\n    if (resultsMaximumNumber) {\n      suggestions =\n        selectedIndex >= resultsMaximumNumber\n          ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1)\n          : suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    // MostRecently Used text should supercede the header text if it's there and available.\n    let headerText: string | undefined = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    return (\n      <div\n        className={this._classNames.suggestionsContainer}\n        id={suggestionsListId}\n        role=\"listbox\"\n        aria-label={suggestionsContainerAriaLabel || headerText}\n      >\n        {suggestions.map((suggestion, index) => (\n          <div\n            ref={suggestion.selected ? this._selectedElement : undefined}\n            key={(suggestion.item as any).key ? (suggestion.item as any).key : index}\n            role=\"presentation\"\n          >\n            <StyledTypedSuggestionsItem\n              suggestionModel={suggestion}\n              RenderSuggestion={onRenderSuggestion}\n              onClick={this._onClickTypedSuggestionsItem(suggestion.item, index)}\n              className={suggestionsItemClassName}\n              showRemoveButton={showRemoveButtons}\n              removeButtonAriaLabel={removeSuggestionAriaLabel}\n              onRemoveItem={this._onRemoveTypedSuggestionsItem(suggestion.item, index)}\n              id={'sug-' + index}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  private _getMoreResults = (): void => {\n    if (this.props.onGetMoreResults) {\n      this.props.onGetMoreResults();\n    }\n  };\n\n  private _forceResolve = (): void => {\n    if (this.props.createGenericItem) {\n      this.props.createGenericItem();\n    }\n  };\n\n  private _shouldShowForceResolve = (): boolean => {\n    return this.props.showForceResolve ? this.props.showForceResolve() : false;\n  };\n\n  private _onClickTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  private _refocusOnSuggestions = (keyCode: number): void => {\n    if (typeof this.props.refocusSuggestions === 'function') {\n      this.props.refocusSuggestions(keyCode);\n    }\n  };\n\n  private _onRemoveTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      const onSuggestionRemove = this.props.onSuggestionRemove!;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}