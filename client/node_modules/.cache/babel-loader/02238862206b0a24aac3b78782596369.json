{"ast":null,"code":"import { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param window - the window used to add the event listeners\n * @deprecated Use useFocusRects hook or FocusRects component instead.\n */\nexport function initializeFocusRects(window) {\n  var _a;\n  var win = window || getWindow();\n  if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {\n    return;\n  }\n  if (!win.__hasInitializeFocusRects__) {\n    win.__hasInitializeFocusRects__ = true;\n    win.addEventListener('mousedown', _onMouseDown, true);\n    win.addEventListener('pointerdown', _onPointerDown, true);\n    win.addEventListener('keydown', _onKeyDown, true);\n  }\n}\nfunction _onMouseDown(ev) {\n  setFocusVisibility(false, ev.target);\n}\nfunction _onPointerDown(ev) {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target);\n  }\n}\nfunction _onKeyDown(ev) {\n  // eslint-disable-next-line deprecation/deprecation\n  isDirectionalKeyCode(ev.which) && setFocusVisibility(true, ev.target);\n}","map":{"version":3,"sources":["initializeFocusRects.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,iBAAiB;AAC3C,SAAS,oBAAoB,QAAQ,YAAY;AACjD,SAAS,kBAAkB,QAAQ,sBAAsB;AASzD;;;;;;;;;;;;;;;AAeG;AACH,OAAM,SAAU,oBAAoB,CAAC,MAAe,EAAA;;EAClD,IAAM,GAAG,GAAI,MAAM,IAAI,SAAS,CAAA,CAAgB;EAChD,IAAI,CAAC,GAAG,IAAI,CAAA,CAAA,EAAA,GAAA,GAAG,CAAC,YAAY,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,iBAAiB,MAAK,IAAI,EAAE;IACxD;EACD;EAED,IAAI,CAAC,GAAG,CAAC,2BAA2B,EAAE;IACpC,GAAG,CAAC,2BAA2B,GAAG,IAAI;IACtC,GAAG,CAAC,gBAAgB,CAAC,WAAW,EAAE,YAAY,EAAE,IAAI,CAAC;IACrD,GAAG,CAAC,gBAAgB,CAAC,aAAa,EAAE,cAAc,EAAE,IAAI,CAAC;IACzD,GAAG,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAwB,EAAE,IAAI,CAAC;EAChE;AACH;AAEA,SAAS,YAAY,CAAC,EAAc,EAAA;EAClC,kBAAkB,CAAC,KAAK,EAAE,EAAE,CAAC,MAAiB,CAAC;AACjD;AAEA,SAAS,cAAc,CAAC,EAAgB,EAAA;EACtC,IAAI,EAAE,CAAC,WAAW,KAAK,OAAO,EAAE;IAC9B,kBAAkB,CAAC,KAAK,EAAE,EAAE,CAAC,MAAiB,CAAC;EAChD;AACH;AAEA,SAAS,UAAU,CAAC,EAAiB,EAAA;EACnC;EACA,oBAAoB,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,kBAAkB,CAAC,IAAI,EAAE,EAAE,CAAC,MAAiB,CAAC;AAClF","sourcesContent":["import { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n\ntype AppWindow =\n  | (Window & {\n      __hasInitializeFocusRects__: boolean;\n      FabricConfig?: { disableFocusRects?: boolean };\n    })\n  | undefined;\n\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param window - the window used to add the event listeners\n * @deprecated Use useFocusRects hook or FocusRects component instead.\n */\nexport function initializeFocusRects(window?: Window): void {\n  const win = (window || getWindow()) as AppWindow;\n  if (!win || win.FabricConfig?.disableFocusRects === true) {\n    return;\n  }\n\n  if (!win.__hasInitializeFocusRects__) {\n    win.__hasInitializeFocusRects__ = true;\n    win.addEventListener('mousedown', _onMouseDown, true);\n    win.addEventListener('pointerdown', _onPointerDown, true);\n    win.addEventListener('keydown', _onKeyDown as () => void, true);\n  }\n}\n\nfunction _onMouseDown(ev: MouseEvent): void {\n  setFocusVisibility(false, ev.target as Element);\n}\n\nfunction _onPointerDown(ev: PointerEvent): void {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target as Element);\n  }\n}\n\nfunction _onKeyDown(ev: KeyboardEvent): void {\n  // eslint-disable-next-line deprecation/deprecation\n  isDirectionalKeyCode(ev.which) && setFocusVisibility(true, ev.target as Element);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}