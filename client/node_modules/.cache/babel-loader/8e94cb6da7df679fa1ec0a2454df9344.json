{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { StickyPositionType } from './Sticky.types';\nvar Sticky = /** @class */function (_super) {\n  __extends(Sticky, _super);\n  function Sticky(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._stickyContentTop = React.createRef();\n    _this._stickyContentBottom = React.createRef();\n    _this._nonStickyContent = React.createRef();\n    _this._placeHolder = React.createRef();\n    _this.syncScroll = function (container) {\n      var nonStickyContent = _this.nonStickyContent;\n      if (nonStickyContent && _this.props.isScrollSynced) {\n        nonStickyContent.scrollLeft = container.scrollLeft;\n      }\n    };\n    // eslint-disable-next-line deprecation/deprecation\n    _this._getContext = function () {\n      return _this.context;\n    };\n    _this._onScrollEvent = function (container, footerStickyContainer) {\n      if (_this.root && _this.nonStickyContent) {\n        var distanceFromTop = _this._getNonStickyDistanceFromTop(container);\n        var isStickyTop = false;\n        var isStickyBottom = false;\n        if (_this.canStickyTop) {\n          var distanceToStickTop = distanceFromTop - _this._getStickyDistanceFromTop();\n          isStickyTop = distanceToStickTop < container.scrollTop;\n        }\n        // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n        // from the top of the pane\n        if (_this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n          isStickyBottom = distanceFromTop - Math.floor(container.scrollTop) >= _this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n        }\n        if (document.activeElement && _this.nonStickyContent.contains(document.activeElement) && (_this.state.isStickyTop !== isStickyTop || _this.state.isStickyBottom !== isStickyBottom)) {\n          _this._activeElement = document.activeElement;\n        } else {\n          _this._activeElement = undefined;\n        }\n        _this.setState({\n          isStickyTop: _this.canStickyTop && isStickyTop,\n          isStickyBottom: isStickyBottom,\n          distanceFromTop: distanceFromTop\n        });\n      }\n    };\n    _this._getStickyDistanceFromTop = function () {\n      var distance = 0;\n      if (_this.stickyContentTop) {\n        distance = _this.stickyContentTop.offsetTop;\n      }\n      return distance;\n    };\n    _this._getStickyDistanceFromTopForFooter = function (container, footerStickyVisibleContainer) {\n      var distance = 0;\n      if (_this.stickyContentBottom) {\n        distance = container.clientHeight - footerStickyVisibleContainer.offsetHeight + _this.stickyContentBottom.offsetTop;\n      }\n      return distance;\n    };\n    _this._getNonStickyDistanceFromTop = function (container) {\n      var distance = 0;\n      var currElem = _this.root;\n      if (currElem) {\n        while (currElem && currElem.offsetParent !== container) {\n          distance += currElem.offsetTop;\n          currElem = currElem.offsetParent;\n        }\n        if (currElem && currElem.offsetParent === container) {\n          distance += currElem.offsetTop;\n        }\n      }\n      return distance;\n    };\n    initializeComponentRef(_this);\n    _this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined\n    };\n    _this._activeElement = undefined;\n    return _this;\n  }\n  Object.defineProperty(Sticky.prototype, \"root\", {\n    get: function () {\n      return this._root.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"placeholder\", {\n    get: function () {\n      return this._placeHolder.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentTop\", {\n    get: function () {\n      return this._stickyContentTop.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentBottom\", {\n    get: function () {\n      return this._stickyContentBottom.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"nonStickyContent\", {\n    get: function () {\n      return this._nonStickyContent.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyTop\", {\n    get: function () {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyBottom\", {\n    get: function () {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sticky.prototype.componentDidMount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n    if (!scrollablePane) {\n      return;\n    }\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  };\n  Sticky.prototype.componentWillUnmount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n    if (!scrollablePane) {\n      return;\n    }\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  };\n  Sticky.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var scrollablePane = this._getContext().scrollablePane;\n    if (!scrollablePane) {\n      return;\n    }\n    var _a = this.state,\n      isStickyBottom = _a.isStickyBottom,\n      isStickyTop = _a.isStickyTop,\n      distanceFromTop = _a.distanceFromTop;\n    var syncScroll = false;\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true /*sortAgain*/);\n      syncScroll = true;\n    }\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  };\n  Sticky.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n    var _a = this.state,\n      isStickyTop = _a.isStickyTop,\n      isStickyBottom = _a.isStickyBottom,\n      distanceFromTop = _a.distanceFromTop;\n    return isStickyTop !== nextState.isStickyTop || isStickyBottom !== nextState.isStickyBottom || this.props.stickyPosition !== nextProps.stickyPosition || this.props.children !== nextProps.children || distanceFromTop !== nextState.distanceFromTop || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) || _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder);\n  };\n  Sticky.prototype.render = function () {\n    var _a = this.state,\n      isStickyTop = _a.isStickyTop,\n      isStickyBottom = _a.isStickyBottom;\n    var _b = this.props,\n      stickyClassName = _b.stickyClassName,\n      children = _b.children;\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.context.scrollablePane) {\n      return React.createElement(\"div\", null, this.props.children);\n    }\n    return React.createElement(\"div\", {\n      ref: this._root\n    }, this.canStickyTop && React.createElement(\"div\", {\n      ref: this._stickyContentTop,\n      style: {\n        pointerEvents: isStickyTop ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyTop)\n    })), this.canStickyBottom && React.createElement(\"div\", {\n      ref: this._stickyContentBottom,\n      style: {\n        pointerEvents: isStickyBottom ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyBottom)\n    })), React.createElement(\"div\", {\n      style: this._getNonStickyPlaceholderHeightAndWidth(),\n      ref: this._placeHolder\n    }, (isStickyTop || isStickyBottom) && React.createElement(\"span\", {\n      style: hiddenContentStyle\n    }, children), React.createElement(\"div\", {\n      ref: this._nonStickyContent,\n      className: isStickyTop || isStickyBottom ? stickyClassName : undefined,\n      style: this._getContentStyles(isStickyTop || isStickyBottom)\n    }, children)));\n  };\n  Sticky.prototype.addSticky = function (stickyContent) {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  };\n  Sticky.prototype.resetSticky = function () {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  };\n  Sticky.prototype.setDistanceFromTop = function (container) {\n    var distanceFromTop = this._getNonStickyDistanceFromTop(container);\n    this.setState({\n      distanceFromTop: distanceFromTop\n    });\n  };\n  Sticky.prototype._getContentStyles = function (isSticky) {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : ''\n    };\n  };\n  Sticky.prototype._getStickyPlaceholderHeight = function (isSticky) {\n    var height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height\n    };\n  };\n  Sticky.prototype._getNonStickyPlaceholderHeightAndWidth = function () {\n    var _a = this.state,\n      isStickyTop = _a.isStickyTop,\n      isStickyBottom = _a.isStickyBottom;\n    if (isStickyTop || isStickyBottom) {\n      var height = 0;\n      var width = 0;\n      // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight;\n        // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n        width = this.nonStickyContent.firstElementChild.scrollWidth + (this.nonStickyContent.firstElementChild.offsetWidth - this.nonStickyContent.firstElementChild.clientWidth);\n      }\n      return {\n        height: height,\n        width: width\n      };\n    } else {\n      return {};\n    }\n  };\n  // Gets background of nearest parent element that has a declared background-color attribute\n  Sticky.prototype._getBackground = function () {\n    if (!this.root) {\n      return undefined;\n    }\n    var curr = this.root;\n    while (window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' || window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent') {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  };\n  Sticky.defaultProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true\n  };\n  Sticky.contextType = ScrollablePaneContext;\n  return Sticky;\n}(React.Component);\nexport { Sticky };\nfunction _isOffsetHeightDifferent(a, b) {\n  return a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight;\n}","map":{"version":3,"sources":["components/Sticky/Sticky.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { IScrollablePaneContext, ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { IStickyProps, StickyPositionType } from './Sticky.types';\n\nexport interface IStickyState {\n  isStickyTop: boolean;\n  isStickyBottom: boolean;\n  distanceFromTop?: number;\n}\n\nexport interface IStickyContext {\n  scrollablePane: PropTypes.Requireable<object>;\n}\n\nexport class Sticky extends React.Component<IStickyProps, IStickyState> {\n  public static defaultProps: IStickyProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true,\n  };\n\n  public static contextType = ScrollablePaneContext;\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _stickyContentTop = React.createRef<HTMLDivElement>();\n  private _stickyContentBottom = React.createRef<HTMLDivElement>();\n  private _nonStickyContent = React.createRef<HTMLDivElement>();\n  private _placeHolder = React.createRef<HTMLDivElement>();\n  private _activeElement: HTMLElement | undefined;\n\n  constructor(props: IStickyProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined,\n    };\n    this._activeElement = undefined;\n  }\n\n  public get root(): HTMLDivElement | null {\n    return this._root.current;\n  }\n\n  public get placeholder(): HTMLDivElement | null {\n    return this._placeHolder.current;\n  }\n\n  public get stickyContentTop(): HTMLDivElement | null {\n    return this._stickyContentTop.current;\n  }\n\n  public get stickyContentBottom(): HTMLDivElement | null {\n    return this._stickyContentBottom.current;\n  }\n\n  public get nonStickyContent(): HTMLDivElement | null {\n    return this._nonStickyContent.current;\n  }\n\n  public get canStickyTop(): boolean {\n    return (\n      this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header\n    );\n  }\n\n  public get canStickyBottom(): boolean {\n    return (\n      this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer\n    );\n  }\n\n  public syncScroll = (container: HTMLElement): void => {\n    const { nonStickyContent } = this;\n\n    if (nonStickyContent && this.props.isScrollSynced) {\n      nonStickyContent.scrollLeft = container.scrollLeft;\n    }\n  };\n\n  public componentDidMount(): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  }\n\n  public componentWillUnmount(): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  }\n\n  public componentDidUpdate(prevProps: IStickyProps, prevState: IStickyState): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    const { isStickyBottom, isStickyTop, distanceFromTop } = this.state;\n    let syncScroll: boolean = false;\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true /*sortAgain*/);\n      syncScroll = true;\n    }\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  }\n\n  public shouldComponentUpdate(nextProps: IStickyProps, nextState: IStickyState): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n\n    const { isStickyTop, isStickyBottom, distanceFromTop } = this.state;\n\n    return (isStickyTop !== nextState.isStickyTop ||\n      isStickyBottom !== nextState.isStickyBottom ||\n      this.props.stickyPosition !== nextProps.stickyPosition ||\n      this.props.children !== nextProps.children ||\n      distanceFromTop !== nextState.distanceFromTop ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder)) as boolean;\n  }\n\n  public render(): JSX.Element {\n    const { isStickyTop, isStickyBottom } = this.state;\n    const { stickyClassName, children } = this.props;\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.context.scrollablePane) {\n      return <div>{this.props.children}</div>;\n    }\n\n    return (\n      <div ref={this._root}>\n        {this.canStickyTop && (\n          <div ref={this._stickyContentTop} style={{ pointerEvents: isStickyTop ? 'auto' : 'none' }}>\n            <div style={this._getStickyPlaceholderHeight(isStickyTop)} />\n          </div>\n        )}\n        {this.canStickyBottom && (\n          <div ref={this._stickyContentBottom} style={{ pointerEvents: isStickyBottom ? 'auto' : 'none' }}>\n            <div style={this._getStickyPlaceholderHeight(isStickyBottom)} />\n          </div>\n        )}\n        <div style={this._getNonStickyPlaceholderHeightAndWidth()} ref={this._placeHolder}>\n          {(isStickyTop || isStickyBottom) && <span style={hiddenContentStyle as any}>{children}</span>}\n          <div\n            ref={this._nonStickyContent}\n            className={isStickyTop || isStickyBottom ? stickyClassName : undefined}\n            style={this._getContentStyles(isStickyTop || isStickyBottom)}\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public addSticky(stickyContent: HTMLDivElement): void {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  }\n\n  public resetSticky(): void {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  }\n\n  public setDistanceFromTop(container: HTMLDivElement): void {\n    const distanceFromTop = this._getNonStickyDistanceFromTop(container);\n    this.setState({ distanceFromTop: distanceFromTop });\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  private _getContext = (): IScrollablePaneContext => this.context;\n\n  private _getContentStyles(isSticky: boolean): React.CSSProperties {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : '',\n    };\n  }\n\n  private _getStickyPlaceholderHeight(isSticky: boolean): React.CSSProperties {\n    const height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height,\n    };\n  }\n\n  private _getNonStickyPlaceholderHeightAndWidth(): React.CSSProperties {\n    const { isStickyTop, isStickyBottom } = this.state;\n    if (isStickyTop || isStickyBottom) {\n      let height = 0;\n      let width = 0;\n      // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight;\n        // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n        width =\n          this.nonStickyContent.firstElementChild.scrollWidth +\n          ((this.nonStickyContent.firstElementChild as HTMLElement).offsetWidth -\n            this.nonStickyContent.firstElementChild.clientWidth);\n      }\n      return {\n        height: height,\n        width: width,\n      };\n    } else {\n      return {};\n    }\n  }\n\n  private _onScrollEvent = (container: HTMLElement, footerStickyContainer: HTMLElement): void => {\n    if (this.root && this.nonStickyContent) {\n      const distanceFromTop = this._getNonStickyDistanceFromTop(container);\n      let isStickyTop = false;\n      let isStickyBottom = false;\n\n      if (this.canStickyTop) {\n        const distanceToStickTop = distanceFromTop - this._getStickyDistanceFromTop();\n        isStickyTop = distanceToStickTop < container.scrollTop;\n      }\n\n      // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n      // from the top of the pane\n      if (this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n        isStickyBottom =\n          distanceFromTop - Math.floor(container.scrollTop) >=\n          this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n      }\n\n      if (\n        document.activeElement &&\n        this.nonStickyContent.contains(document.activeElement) &&\n        (this.state.isStickyTop !== isStickyTop || this.state.isStickyBottom !== isStickyBottom)\n      ) {\n        this._activeElement = document.activeElement as HTMLElement;\n      } else {\n        this._activeElement = undefined;\n      }\n\n      this.setState({\n        isStickyTop: this.canStickyTop && isStickyTop,\n        isStickyBottom: isStickyBottom,\n        distanceFromTop: distanceFromTop,\n      });\n    }\n  };\n\n  private _getStickyDistanceFromTop = (): number => {\n    let distance = 0;\n    if (this.stickyContentTop) {\n      distance = this.stickyContentTop.offsetTop;\n    }\n\n    return distance;\n  };\n\n  private _getStickyDistanceFromTopForFooter = (\n    container: HTMLElement,\n    footerStickyVisibleContainer: HTMLElement,\n  ): number => {\n    let distance = 0;\n    if (this.stickyContentBottom) {\n      distance =\n        container.clientHeight - footerStickyVisibleContainer.offsetHeight + this.stickyContentBottom.offsetTop;\n    }\n\n    return distance;\n  };\n\n  private _getNonStickyDistanceFromTop = (container: HTMLElement): number => {\n    let distance = 0;\n    let currElem = this.root;\n\n    if (currElem) {\n      while (currElem && currElem.offsetParent !== container) {\n        distance += currElem.offsetTop;\n        currElem = currElem.offsetParent as HTMLDivElement;\n      }\n\n      if (currElem && currElem.offsetParent === container) {\n        distance += currElem.offsetTop;\n      }\n    }\n    return distance;\n  };\n\n  // Gets background of nearest parent element that has a declared background-color attribute\n  private _getBackground(): string | undefined {\n    if (!this.root) {\n      return undefined;\n    }\n\n    let curr: HTMLElement = this.root;\n\n    while (\n      window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' ||\n      window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent'\n    ) {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  }\n}\n\nfunction _isOffsetHeightDifferent(a: React.RefObject<HTMLElement>, b: React.RefObject<HTMLDivElement>): boolean {\n  return (a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight) as boolean;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}