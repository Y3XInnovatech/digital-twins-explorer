{"ast":null,"code":"import { getGlobalClassNames } from '../../Styling';\nvar inheritFont = {\n  fontFamily: 'inherit'\n};\nvar GlobalClassNames = {\n  root: 'ms-Fabric',\n  bodyThemed: 'ms-Fabric-bodyThemed'\n};\nexport var getStyles = function (props) {\n  var theme = props.theme,\n    className = props.className,\n    applyTheme = props.applyTheme;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [classNames.root, theme.fonts.medium, {\n      color: theme.palette.neutralPrimary,\n      selectors: {\n        '& button': inheritFont,\n        '& input': inheritFont,\n        '& textarea': inheritFont\n      }\n    },\n    // apply theme to only if applyTheme is true\n    applyTheme && {\n      color: theme.semanticColors.bodyText,\n      backgroundColor: theme.semanticColors.bodyBackground\n    }, className],\n    bodyThemed: [{\n      backgroundColor: theme.semanticColors.bodyBackground\n    }]\n  };\n};","map":{"version":3,"sources":["components/Fabric/Fabric.styles.ts"],"names":[],"mappings":"AAAA,SAAS,mBAAmB,QAAQ,eAAe;AAGnD,IAAM,WAAW,GAAG;EAAE,UAAU,EAAE;AAAS,CAAE;AAE7C,IAAM,gBAAgB,GAAG;EACvB,IAAI,EAAE,WAAW;EACjB,UAAU,EAAE;CACb;AAOD,OAAO,IAAM,SAAS,GAAG,SAAA,CAAC,KAAwB,EAAA;EACxC,IAAA,KAAA,GAAA,KAAA,CAAA,KAAK;IAAE,SAAA,GAAA,KAAA,CAAA,SAAS;IAAE,UAAA,GAAA,KAAA,CAAA,UAAU;EACpC,IAAM,UAAU,GAAG,mBAAmB,CAAC,gBAAgB,EAAE,KAAK,CAAC;EAC/D,OAAO;IACL,IAAI,EAAE,CACJ,UAAU,CAAC,IAAI,EACf,KAAK,CAAC,KAAK,CAAC,MAAM,EAClB;MACE,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,cAAc;MACnC,SAAS,EAAE;QACT,UAAU,EAAE,WAAW;QACvB,SAAS,EAAE,WAAW;QACtB,YAAY,EAAE;MACf;KACF;IACD;IACA,UAAU,IAAI;MACZ,KAAK,EAAE,KAAK,CAAC,cAAc,CAAC,QAAQ;MACpC,eAAe,EAAE,KAAK,CAAC,cAAc,CAAC;KACvC,EACD,SAAS,CACV;IACD,UAAU,EAAE,CACV;MACE,eAAe,EAAE,KAAK,CAAC,cAAc,CAAC;KACvC;GAEJ;AACH,CAAC","sourcesContent":["import { getGlobalClassNames } from '../../Styling';\nimport { IFabricStyleProps, IFabricStyles } from './Fabric.types';\n\nconst inheritFont = { fontFamily: 'inherit' };\n\nconst GlobalClassNames = {\n  root: 'ms-Fabric',\n  bodyThemed: 'ms-Fabric-bodyThemed',\n};\n\nexport interface IFabricClassNames {\n  root: string;\n  bodyThemed: string;\n}\n\nexport const getStyles = (props: IFabricStyleProps): IFabricStyles => {\n  const { theme, className, applyTheme } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        color: theme.palette.neutralPrimary,\n        selectors: {\n          '& button': inheritFont,\n          '& input': inheritFont,\n          '& textarea': inheritFont,\n        },\n      },\n      // apply theme to only if applyTheme is true\n      applyTheme && {\n        color: theme.semanticColors.bodyText,\n        backgroundColor: theme.semanticColors.bodyBackground,\n      },\n      className,\n    ],\n    bodyThemed: [\n      {\n        backgroundColor: theme.semanticColors.bodyBackground,\n      },\n    ],\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}