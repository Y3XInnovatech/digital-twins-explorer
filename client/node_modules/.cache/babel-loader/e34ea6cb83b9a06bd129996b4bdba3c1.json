{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { HighContrastSelector, keyframes, noWrap, getGlobalClassNames, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-ProgressIndicator',\n  itemName: 'ms-ProgressIndicator-itemName',\n  itemDescription: 'ms-ProgressIndicator-itemDescription',\n  itemProgress: 'ms-ProgressIndicator-itemProgress',\n  progressTrack: 'ms-ProgressIndicator-progressTrack',\n  progressBar: 'ms-ProgressIndicator-progressBar'\n};\nvar IndeterminateProgress = memoizeFunction(function () {\n  return keyframes({\n    '0%': {\n      left: '-30%'\n    },\n    '100%': {\n      left: '100%'\n    }\n  });\n});\nvar IndeterminateProgressRTL = memoizeFunction(function () {\n  return keyframes({\n    '100%': {\n      right: '-30%'\n    },\n    '0%': {\n      right: '100%'\n    }\n  });\n});\nexport var getStyles = function (props) {\n  var _a, _b, _c;\n  var isRTL = getRTL(props.theme);\n  var className = props.className,\n    indeterminate = props.indeterminate,\n    theme = props.theme,\n    _d = props.barHeight,\n    barHeight = _d === void 0 ? 2 : _d;\n  var palette = theme.palette,\n    semanticColors = theme.semanticColors,\n    fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var marginBetweenText = 8;\n  var textHeight = 18;\n  var progressTrackColor = palette.neutralLight;\n  return {\n    root: [classNames.root, fonts.medium, className],\n    itemName: [classNames.itemName, noWrap, {\n      color: semanticColors.bodyText,\n      paddingTop: marginBetweenText / 2,\n      lineHeight: textHeight + 2\n    }],\n    itemDescription: [classNames.itemDescription, {\n      color: semanticColors.bodySubtext,\n      fontSize: fonts.small.fontSize,\n      lineHeight: textHeight\n    }],\n    itemProgress: [classNames.itemProgress, {\n      position: 'relative',\n      overflow: 'hidden',\n      height: barHeight,\n      padding: marginBetweenText + \"px 0\"\n    }],\n    progressTrack: [classNames.progressTrack, {\n      position: 'absolute',\n      width: '100%',\n      height: barHeight,\n      backgroundColor: progressTrackColor,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        borderBottom: '1px solid WindowText'\n      }, _a)\n    }],\n    progressBar: [{\n      backgroundColor: palette.themePrimary,\n      height: barHeight,\n      position: 'absolute',\n      transition: 'width .3s ease',\n      width: 0,\n      selectors: (_b = {}, _b[HighContrastSelector] = __assign({\n        backgroundColor: 'highlight'\n      }, getHighContrastNoAdjustStyle()), _b)\n    }, indeterminate ? {\n      position: 'absolute',\n      minWidth: '33%',\n      background: \"linear-gradient(to right, \" + progressTrackColor + \" 0%, \" + (palette.themePrimary + \" 50%, \" + progressTrackColor + \" 100%)\"),\n      animation: (isRTL ? IndeterminateProgressRTL() : IndeterminateProgress()) + \" 3s infinite\",\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        background: \"highlight\"\n      }, _c)\n    } : {\n      transition: 'width .15s linear'\n    }, classNames.progressBar]\n  };\n};","map":{"version":3,"sources":["components/ProgressIndicator/ProgressIndicator.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  HighContrastSelector,\n  keyframes,\n  noWrap,\n  getGlobalClassNames,\n  IRawStyle,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\nimport { IProgressIndicatorStyleProps, IProgressIndicatorStyles } from './ProgressIndicator.types';\n\nconst GlobalClassNames = {\n  root: 'ms-ProgressIndicator',\n  itemName: 'ms-ProgressIndicator-itemName',\n  itemDescription: 'ms-ProgressIndicator-itemDescription',\n  itemProgress: 'ms-ProgressIndicator-itemProgress',\n  progressTrack: 'ms-ProgressIndicator-progressTrack',\n  progressBar: 'ms-ProgressIndicator-progressBar',\n};\n\nconst IndeterminateProgress = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      left: '-30%',\n    },\n    '100%': {\n      left: '100%',\n    },\n  }),\n);\n\nconst IndeterminateProgressRTL = memoizeFunction(() =>\n  keyframes({\n    '100%': {\n      right: '-30%',\n    },\n    '0%': {\n      right: '100%',\n    },\n  }),\n);\n\nexport const getStyles = (props: IProgressIndicatorStyleProps): IProgressIndicatorStyles => {\n  const isRTL = getRTL(props.theme);\n  const { className, indeterminate, theme, barHeight = 2 } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const marginBetweenText = 8;\n  const textHeight = 18;\n  const progressTrackColor = palette.neutralLight;\n\n  return {\n    root: [classNames.root, fonts.medium, className],\n\n    itemName: [\n      classNames.itemName,\n      noWrap,\n      {\n        color: semanticColors.bodyText,\n        paddingTop: marginBetweenText / 2,\n        lineHeight: textHeight + 2,\n      },\n    ],\n\n    itemDescription: [\n      classNames.itemDescription,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.small.fontSize,\n        lineHeight: textHeight,\n      },\n    ],\n\n    itemProgress: [\n      classNames.itemProgress,\n      {\n        position: 'relative',\n        overflow: 'hidden',\n        height: barHeight,\n        padding: `${marginBetweenText}px 0`,\n      },\n    ],\n\n    progressTrack: [\n      classNames.progressTrack,\n      {\n        position: 'absolute',\n        width: '100%',\n        height: barHeight,\n        backgroundColor: progressTrackColor,\n\n        selectors: {\n          [HighContrastSelector]: {\n            borderBottom: '1px solid WindowText',\n          },\n        },\n      },\n    ],\n\n    progressBar: [\n      {\n        backgroundColor: palette.themePrimary,\n        height: barHeight,\n        position: 'absolute',\n        transition: 'width .3s ease',\n        width: 0,\n\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'highlight',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      indeterminate\n        ? ({\n            position: 'absolute',\n            minWidth: '33%',\n            background:\n              `linear-gradient(to right, ${progressTrackColor} 0%, ` +\n              `${palette.themePrimary} 50%, ${progressTrackColor} 100%)`,\n            animation: `${isRTL ? IndeterminateProgressRTL() : IndeterminateProgress()} 3s infinite`,\n            selectors: {\n              [HighContrastSelector]: {\n                background: `highlight`,\n              },\n            },\n          } as IRawStyle)\n        : ({\n            transition: 'width .15s linear',\n          } as IRawStyle),\n      classNames.progressBar,\n    ],\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}