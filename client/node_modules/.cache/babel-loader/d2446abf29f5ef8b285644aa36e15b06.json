{"ast":null,"code":"import { concatStyleSets, HighContrastSelector, IconFontSizes, getInputFocusStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar ARROW_BUTTON_WIDTH = 23;\nvar ARROW_BUTTON_ICON_SIZE = 8;\nvar DEFAULT_HEIGHT = 32;\nvar DEFAULT_MIN_WIDTH = 86;\nvar LABEL_MARGIN = 10;\nvar _getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n  var semanticColors = theme.semanticColors;\n  var SpinButtonTextColorDisabled = semanticColors.disabledText;\n  var SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n  return {\n    backgroundColor: SpinButtonBackgroundColorDisabled,\n    pointerEvents: 'none',\n    cursor: 'default',\n    color: SpinButtonTextColorDisabled,\n    selectors: (_a = {\n      ':after': {\n        borderColor: SpinButtonBackgroundColorDisabled\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n});\nexport var getArrowButtonStyles = memoizeFunction(function (theme, isUpArrow, customSpecificArrowStyles) {\n  var _a, _b, _c;\n  var palette = theme.palette,\n    semanticColors = theme.semanticColors,\n    effects = theme.effects;\n  // TODO: after updating the semanticColor slots all this need to be reevaluated.\n  var ArrowButtonTextColor = palette.neutralSecondary;\n  var ArrowButtonTextColorHovered = semanticColors.buttonText;\n  var ArrowButtonTextColorPressed = semanticColors.buttonText;\n  var ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n  var ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n  var defaultArrowButtonStyles = {\n    root: {\n      outline: 'none',\n      display: 'block',\n      height: '50%',\n      width: ARROW_BUTTON_WIDTH,\n      padding: 0,\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      cursor: 'default',\n      color: ArrowButtonTextColor,\n      selectors: {\n        '&.ms-DownButton': {\n          borderRadius: \"0 0 \" + effects.roundedCorner2 + \" 0\"\n        },\n        '&.ms-UpButton': {\n          borderRadius: \"0 \" + effects.roundedCorner2 + \" 0 0\"\n        }\n      }\n    },\n    rootHovered: {\n      backgroundColor: ArrowButtonBackgroundHovered,\n      color: ArrowButtonTextColorHovered\n    },\n    rootChecked: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _a)\n    },\n    rootPressed: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    rootDisabled: {\n      opacity: 0.5,\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        color: 'GrayText',\n        opacity: 1\n      }, _c)\n    },\n    icon: {\n      fontSize: ARROW_BUTTON_ICON_SIZE,\n      marginTop: 0,\n      marginRight: 0,\n      marginBottom: 0,\n      marginLeft: 0\n    }\n  };\n  // No specific styles needed as of now.\n  var defaultUpArrowButtonStyles = {};\n  var defaultDownArrowButtonStyles = {};\n  return concatStyleSets(defaultArrowButtonStyles, isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles, customSpecificArrowStyles);\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles) {\n  var _a, _b;\n  var palette = theme.palette,\n    semanticColors = theme.semanticColors,\n    effects = theme.effects,\n    fonts = theme.fonts;\n  var SpinButtonRootBorderColor = semanticColors.inputBorder;\n  var SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  var SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  var SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  var SpinButtonInputTextColor = semanticColors.inputText;\n  var SpinButtonInputTextColorSelected = palette.white;\n  var SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  var SpinButtonIconDisabledColor = semanticColors.disabledText;\n  var defaultStyles = {\n    root: [fonts.medium, {\n      outline: 'none',\n      width: '100%',\n      minWidth: DEFAULT_MIN_WIDTH\n    }],\n    labelWrapper: {\n      display: 'inline-flex',\n      alignItems: 'center'\n    },\n    labelWrapperStart: {\n      height: DEFAULT_HEIGHT,\n      float: 'left',\n      marginRight: LABEL_MARGIN\n    },\n    labelWrapperEnd: {\n      height: DEFAULT_HEIGHT,\n      float: 'right',\n      marginLeft: LABEL_MARGIN\n    },\n    labelWrapperTop: {\n      // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n      // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n      // the SpinButton is displayed with the label on top next to other form fields.\n      // Decrease the wrapper's effective height slightly to compensate.\n      marginBottom: -1\n    },\n    labelWrapperBottom: {},\n    icon: {\n      padding: '0 5px',\n      fontSize: IconFontSizes.large\n    },\n    iconDisabled: {\n      color: SpinButtonIconDisabledColor\n    },\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large\n    },\n    labelDisabled: {},\n    spinButtonWrapper: {\n      display: 'flex',\n      position: 'relative',\n      boxSizing: 'border-box',\n      height: DEFAULT_HEIGHT,\n      minWidth: DEFAULT_MIN_WIDTH,\n      selectors: {\n        // setting border using pseudo-element here in order to prevent:\n        // input and chevron buttons to overlap border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: SpinButtonRootBorderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    },\n    spinButtonWrapperTopBottom: {\n      width: '100%'\n    },\n    spinButtonWrapperHovered: {\n      selectors: (_a = {\n        ':after': {\n          borderColor: SpinButtonRootBorderColorHovered\n        }\n      }, _a[HighContrastSelector] = {\n        selectors: {\n          ':after': {\n            borderColor: 'Highlight'\n          }\n        }\n      }, _a)\n    },\n    spinButtonWrapperFocused: getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\n    spinButtonWrapperDisabled: _getDisabledStyles(theme),\n    input: {\n      boxSizing: 'border-box',\n      boxShadow: 'none',\n      borderStyle: 'none',\n      flex: 1,\n      margin: 0,\n      fontSize: fonts.medium.fontSize,\n      fontFamily: 'inherit',\n      color: SpinButtonInputTextColor,\n      backgroundColor: SpinButtonRootBackgroundColor,\n      height: '100%',\n      padding: '0 8px 0 9px',\n      outline: 0,\n      display: 'block',\n      minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      cursor: 'text',\n      userSelect: 'text',\n      borderRadius: effects.roundedCorner2 + \" 0 0 \" + effects.roundedCorner2\n    },\n    inputTextSelected: {\n      backgroundColor: SpinButtonInputBackgroundColorSelected,\n      color: SpinButtonInputTextColorSelected,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        borderColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    inputDisabled: _getDisabledStyles(theme),\n    arrowButtonsContainer: {\n      display: 'block',\n      height: '100%',\n      cursor: 'default'\n    },\n    arrowButtonsContainerDisabled: _getDisabledStyles(theme)\n  };\n  return concatStyleSets(defaultStyles, customStyles);\n});","map":{"version":3,"sources":["components/SpinButton/SpinButton.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  IRawStyle,\r\n  ITheme,\r\n  concatStyleSets,\r\n  HighContrastSelector,\r\n  IconFontSizes,\r\n  getInputFocusStyle,\r\n} from '../../Styling';\r\nimport { IButtonStyles } from '../../Button';\r\nimport { ISpinButtonStyles } from './SpinButton.types';\r\nimport { memoizeFunction } from '../../Utilities';\r\n\r\nconst ARROW_BUTTON_WIDTH = 23;\r\nconst ARROW_BUTTON_ICON_SIZE = 8;\r\nconst DEFAULT_HEIGHT = 32;\r\nconst DEFAULT_MIN_WIDTH = 86;\r\nconst LABEL_MARGIN = 10;\r\n\r\nconst _getDisabledStyles = memoizeFunction(\r\n  (theme: ITheme): IRawStyle => {\r\n    const { semanticColors } = theme;\r\n\r\n    const SpinButtonTextColorDisabled = semanticColors.disabledText;\r\n    const SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\r\n\r\n    return {\r\n      backgroundColor: SpinButtonBackgroundColorDisabled,\r\n      pointerEvents: 'none',\r\n      cursor: 'default',\r\n      color: SpinButtonTextColorDisabled,\r\n      selectors: {\r\n        ':after': {\r\n          borderColor: SpinButtonBackgroundColorDisabled,\r\n        },\r\n        [HighContrastSelector]: {\r\n          color: 'GrayText',\r\n        },\r\n      },\r\n    };\r\n  },\r\n);\r\n\r\nexport const getArrowButtonStyles = memoizeFunction(\r\n  (theme: ITheme, isUpArrow: boolean, customSpecificArrowStyles?: Partial<IButtonStyles>): IButtonStyles => {\r\n    const { palette, semanticColors, effects } = theme;\r\n\r\n    // TODO: after updating the semanticColor slots all this need to be reevaluated.\r\n    const ArrowButtonTextColor = palette.neutralSecondary;\r\n    const ArrowButtonTextColorHovered = semanticColors.buttonText;\r\n    const ArrowButtonTextColorPressed = semanticColors.buttonText;\r\n\r\n    const ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\r\n    const ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\r\n\r\n    const defaultArrowButtonStyles: IButtonStyles = {\r\n      root: {\r\n        outline: 'none',\r\n        display: 'block',\r\n        height: '50%',\r\n        width: ARROW_BUTTON_WIDTH,\r\n        padding: 0,\r\n        backgroundColor: 'transparent',\r\n        textAlign: 'center',\r\n        cursor: 'default',\r\n        color: ArrowButtonTextColor,\r\n        selectors: {\r\n          '&.ms-DownButton': {\r\n            borderRadius: `0 0 ${effects.roundedCorner2} 0`,\r\n          },\r\n          '&.ms-UpButton': {\r\n            borderRadius: `0 ${effects.roundedCorner2} 0 0`,\r\n          },\r\n        },\r\n      },\r\n      rootHovered: {\r\n        backgroundColor: ArrowButtonBackgroundHovered,\r\n        color: ArrowButtonTextColorHovered,\r\n      },\r\n      rootChecked: {\r\n        backgroundColor: ArrowButtonBackgroundPressed,\r\n        color: ArrowButtonTextColorPressed,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      rootPressed: {\r\n        backgroundColor: ArrowButtonBackgroundPressed,\r\n        color: ArrowButtonTextColorPressed,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      rootDisabled: {\r\n        opacity: 0.5,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            color: 'GrayText',\r\n            opacity: 1,\r\n          },\r\n        },\r\n      },\r\n      icon: {\r\n        fontSize: ARROW_BUTTON_ICON_SIZE,\r\n        marginTop: 0,\r\n        marginRight: 0,\r\n        marginBottom: 0,\r\n        marginLeft: 0,\r\n      },\r\n    };\r\n\r\n    // No specific styles needed as of now.\r\n    const defaultUpArrowButtonStyles: Partial<IButtonStyles> = {};\r\n\r\n    const defaultDownArrowButtonStyles: Partial<IButtonStyles> = {};\r\n\r\n    return concatStyleSets(\r\n      defaultArrowButtonStyles,\r\n      isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles,\r\n      customSpecificArrowStyles,\r\n    ) as IButtonStyles;\r\n  },\r\n);\r\n\r\nexport const getStyles = memoizeFunction(\r\n  (theme: ITheme, customStyles?: Partial<ISpinButtonStyles>): ISpinButtonStyles => {\r\n    const { palette, semanticColors, effects, fonts } = theme;\r\n\r\n    const SpinButtonRootBorderColor = semanticColors.inputBorder;\r\n    const SpinButtonRootBackgroundColor = semanticColors.inputBackground;\r\n    const SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\r\n    const SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\r\n\r\n    const SpinButtonInputTextColor = semanticColors.inputText;\r\n    const SpinButtonInputTextColorSelected = palette.white;\r\n    const SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\r\n\r\n    const SpinButtonIconDisabledColor = semanticColors.disabledText;\r\n\r\n    const defaultStyles: ISpinButtonStyles = {\r\n      root: [\r\n        fonts.medium,\r\n        {\r\n          outline: 'none',\r\n          width: '100%',\r\n          minWidth: DEFAULT_MIN_WIDTH,\r\n        },\r\n      ],\r\n      labelWrapper: {\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n      },\r\n      labelWrapperStart: {\r\n        height: DEFAULT_HEIGHT,\r\n        float: 'left',\r\n        marginRight: LABEL_MARGIN,\r\n      },\r\n      labelWrapperEnd: {\r\n        height: DEFAULT_HEIGHT,\r\n        float: 'right',\r\n        marginLeft: LABEL_MARGIN,\r\n      },\r\n      labelWrapperTop: {\r\n        // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\r\n        // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\r\n        // the SpinButton is displayed with the label on top next to other form fields.\r\n        // Decrease the wrapper's effective height slightly to compensate.\r\n        marginBottom: -1,\r\n      },\r\n      labelWrapperBottom: {},\r\n      icon: {\r\n        padding: '0 5px',\r\n        fontSize: IconFontSizes.large,\r\n      },\r\n      iconDisabled: {\r\n        color: SpinButtonIconDisabledColor,\r\n      },\r\n      label: {\r\n        pointerEvents: 'none',\r\n        // centering the label with the icon by forcing the exact same height as the icon.\r\n        lineHeight: IconFontSizes.large,\r\n      },\r\n      labelDisabled: {},\r\n      spinButtonWrapper: {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        boxSizing: 'border-box',\r\n        height: DEFAULT_HEIGHT,\r\n        minWidth: DEFAULT_MIN_WIDTH,\r\n        selectors: {\r\n          // setting border using pseudo-element here in order to prevent:\r\n          // input and chevron buttons to overlap border under certain resolutions\r\n          ':after': {\r\n            pointerEvents: 'none',\r\n            content: \"''\",\r\n            position: 'absolute',\r\n            left: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            right: 0,\r\n            borderWidth: '1px',\r\n            borderStyle: 'solid',\r\n            borderColor: SpinButtonRootBorderColor,\r\n            borderRadius: effects.roundedCorner2,\r\n          },\r\n        },\r\n      },\r\n      spinButtonWrapperTopBottom: {\r\n        width: '100%',\r\n      },\r\n      spinButtonWrapperHovered: {\r\n        selectors: {\r\n          ':after': {\r\n            borderColor: SpinButtonRootBorderColorHovered,\r\n          },\r\n          [HighContrastSelector]: {\r\n            selectors: {\r\n              ':after': {\r\n                borderColor: 'Highlight',\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      spinButtonWrapperFocused: getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\r\n      spinButtonWrapperDisabled: _getDisabledStyles(theme),\r\n      input: {\r\n        boxSizing: 'border-box',\r\n        boxShadow: 'none',\r\n        borderStyle: 'none',\r\n        flex: 1,\r\n        margin: 0,\r\n        fontSize: fonts.medium.fontSize,\r\n        fontFamily: 'inherit',\r\n        color: SpinButtonInputTextColor,\r\n        backgroundColor: SpinButtonRootBackgroundColor,\r\n        height: '100%',\r\n        padding: '0 8px 0 9px',\r\n        outline: 0,\r\n        display: 'block',\r\n        minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\r\n        whiteSpace: 'nowrap',\r\n        textOverflow: 'ellipsis',\r\n        overflow: 'hidden',\r\n        cursor: 'text',\r\n        userSelect: 'text',\r\n        borderRadius: `${effects.roundedCorner2} 0 0 ${effects.roundedCorner2}`,\r\n      },\r\n      inputTextSelected: {\r\n        backgroundColor: SpinButtonInputBackgroundColorSelected,\r\n        color: SpinButtonInputTextColorSelected,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            borderColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      inputDisabled: _getDisabledStyles(theme),\r\n      arrowButtonsContainer: {\r\n        display: 'block',\r\n        height: '100%',\r\n        cursor: 'default',\r\n      },\r\n      arrowButtonsContainerDisabled: _getDisabledStyles(theme),\r\n    };\r\n    return concatStyleSets(defaultStyles, customStyles) as ISpinButtonStyles;\r\n  },\r\n);\r\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}