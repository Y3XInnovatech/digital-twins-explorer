{"ast":null,"code":"var _jsxFileName = \"/home/saharsh/digital-twins-explorer/client/src/components/ModelGraphViewerComponent/ModelGraphViewerComponent.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React from \"react\";\nimport { ModelGraphViewerCytoscapeComponent } from \"./ModelGraphViewerCytoscapeComponent/ModelGraphViewerCytoscapeComponent\";\nimport LoaderComponent from \"../LoaderComponent/LoaderComponent\";\nimport { eventService } from \"../../services/EventService\";\nimport \"./ModelGraphViewerComponent.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ModelGraphViewerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      layout: \"d3Force\"\n    };\n    this.cyRef = /*#__PURE__*/React.createRef();\n  }\n  async componentDidMount() {\n    await this.retrieveModels();\n    eventService.subscribeModelsUpdate(() => {\n      this.retrieveModels();\n    });\n  }\n  async retrieveModels() {\n    this.setState({\n      isLoading: true\n    });\n    try {\n      const response = await fetch(\"/models\");\n      if (!response.ok) {\n        throw new Error(`Error fetching models: ${response.statusText}`);\n      }\n      const models = await response.json();\n      const nodes = models.map(model => ({\n        id: model.id,\n        label: model.name || model.id\n      }));\n      const relationships = models.flatMap(model => model.relationships.map(rel => ({\n        sourceId: model.id,\n        targetId: rel.target,\n        relationshipName: rel.name\n      })));\n      this.cyRef.current.addNodes(nodes);\n      this.cyRef.current.addRelationships(relationships, \"related\");\n      await this.cyRef.current.doLayout();\n    } catch (err) {\n      console.error(\"Error retrieving models:\", err);\n      eventService.publishError(err);\n    } finally {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mgv-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"model-graph\",\n        children: /*#__PURE__*/_jsxDEV(ModelGraphViewerCytoscapeComponent, {\n          ref: this.cyRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(LoaderComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default ModelGraphViewerComponent;","map":{"version":3,"names":["React","ModelGraphViewerCytoscapeComponent","LoaderComponent","eventService","jsxDEV","_jsxDEV","ModelGraphViewerComponent","Component","constructor","props","state","isLoading","layout","cyRef","createRef","componentDidMount","retrieveModels","subscribeModelsUpdate","setState","response","fetch","ok","Error","statusText","models","json","nodes","map","model","id","label","name","relationships","flatMap","rel","sourceId","targetId","target","relationshipName","current","addNodes","addRelationships","doLayout","err","console","error","publishError","render","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/saharsh/digital-twins-explorer/client/src/components/ModelGraphViewerComponent/ModelGraphViewerComponent.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React from \"react\";\n\nimport { ModelGraphViewerCytoscapeComponent } from \"./ModelGraphViewerCytoscapeComponent/ModelGraphViewerCytoscapeComponent\";\nimport LoaderComponent from \"../LoaderComponent/LoaderComponent\";\nimport { eventService } from \"../../services/EventService\";\n\nimport \"./ModelGraphViewerComponent.scss\";\n\nclass ModelGraphViewerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      layout: \"d3Force\",\n    };\n    this.cyRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    await this.retrieveModels();\n\n    eventService.subscribeModelsUpdate(() => {\n      this.retrieveModels();\n    });\n  }\n\n  async retrieveModels() {\n    this.setState({ isLoading: true });\n\n    try {\n      const response = await fetch(\"/models\");\n      if (!response.ok) {\n        throw new Error(`Error fetching models: ${response.statusText}`);\n      }\n\n      const models = await response.json();\n      const nodes = models.map((model) => ({\n        id: model.id,\n        label: model.name || model.id,\n      }));\n\n      const relationships = models.flatMap((model) =>\n        model.relationships.map((rel) => ({\n          sourceId: model.id,\n          targetId: rel.target,\n          relationshipName: rel.name,\n        }))\n      );\n\n      this.cyRef.current.addNodes(nodes);\n      this.cyRef.current.addRelationships(relationships, \"related\");\n      await this.cyRef.current.doLayout();\n    } catch (err) {\n      console.error(\"Error retrieving models:\", err);\n      eventService.publishError(err);\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  render() {\n    const { isLoading } = this.state;\n\n    return (\n      <div className=\"mgv-wrap\">\n        <div className=\"model-graph\">\n          <ModelGraphViewerCytoscapeComponent ref={this.cyRef} />\n        </div>\n        {isLoading && <LoaderComponent />}\n      </div>\n    );\n  }\n}\n\nexport default ModelGraphViewerComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}