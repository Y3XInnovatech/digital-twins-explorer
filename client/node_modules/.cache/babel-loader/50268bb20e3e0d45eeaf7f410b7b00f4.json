{"ast":null,"code":"import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles } from '../../Styling';\nimport { Position } from '../../utilities/positioning';\nexport var getClassNames = memoizeFunction(function (styles, disabled, isFocused, keyboardSpinDirection, labelPosition, className) {\n  if (labelPosition === void 0) {\n    labelPosition = Position.start;\n  }\n  if (className === void 0) {\n    className = undefined;\n  }\n  return {\n    root: mergeStyles(styles.root, className),\n    labelWrapper: mergeStyles(styles.labelWrapper, _getStyleForLabelBasedOnPosition(labelPosition, styles)),\n    icon: mergeStyles(styles.icon, disabled && styles.iconDisabled),\n    label: mergeStyles(styles.label),\n    spinButtonWrapper: mergeStyles(styles.spinButtonWrapper, _getStyleForRootBasedOnPosition(labelPosition, styles), !disabled && [{\n      selectors: {\n        ':hover': styles.spinButtonWrapperHovered\n      }\n    }, isFocused && {\n      // This is to increase the specificity of the focus styles\n      // and make it equal to that of the hover styles.\n      selectors: {\n        '&&': styles.spinButtonWrapperFocused\n      }\n    }], disabled && styles.spinButtonWrapperDisabled),\n    input: mergeStyles('ms-spinButton-input', styles.input, !disabled && {\n      selectors: {\n        '::selection': styles.inputTextSelected\n      }\n    }, disabled && styles.inputDisabled),\n    arrowBox: mergeStyles(styles.arrowButtonsContainer, disabled && styles.arrowButtonsContainerDisabled)\n  };\n});\n/**\n * Returns the Style corresponding to the label position\n */\nfunction _getStyleForLabelBasedOnPosition(labelPosition, styles) {\n  switch (labelPosition) {\n    case Position.start:\n      return styles.labelWrapperStart;\n    case Position.end:\n      return styles.labelWrapperEnd;\n    case Position.top:\n      return styles.labelWrapperTop;\n    case Position.bottom:\n      return styles.labelWrapperBottom;\n  }\n}\n/**\n * Returns the Style corresponding to the label position\n */\nfunction _getStyleForRootBasedOnPosition(labelPosition, styles) {\n  switch (labelPosition) {\n    case Position.top:\n    case Position.bottom:\n      return styles.spinButtonWrapperTopBottom;\n    default:\n      return {};\n  }\n}","map":{"version":3,"sources":["components/SpinButton/SpinButton.classNames.ts"],"names":[],"mappings":"AAAA,SAAS,eAAe,QAAQ,iBAAiB;AACjD,SAAS,WAAW,QAAgB,eAAe;AAGnD,SAAS,QAAQ,QAAQ,6BAA6B;AAEtD,OAAO,IAAM,aAAa,GAAG,eAAe,CAC1C,UACE,MAAyB,EACzB,QAAiB,EACjB,SAAkB,EAClB,qBAA4C,EAC5C,aAAwC,EACxC,SAAyC,EAAA;EADzC,IAAA,aAAA,KAAA,KAAA,CAAA,EAAA;IAAA,aAAA,GAA0B,QAAQ,CAAC,KAAK;EAAA;EACxC,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA;IAAA,SAAA,GAAA,SAAyC;EAAA;EAEzC,OAAO;IACL,IAAI,EAAE,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC;IACzC,YAAY,EAAE,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,gCAAgC,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;IACvG,IAAI,EAAE,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,IAAI,MAAM,CAAC,YAAY,CAAC;IAC/D,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC;IAChC,iBAAiB,EAAE,WAAW,CAC5B,MAAM,CAAC,iBAAiB,EACxB,+BAA+B,CAAC,aAAa,EAAE,MAAM,CAAC,EACtD,CAAC,QAAQ,IAAI,CACX;MACE,SAAS,EAAE;QACT,QAAQ,EAAE,MAAM,CAAC;MAClB;KACF,EACD,SAAS,IAAI;MACX;MACA;MACA,SAAS,EAAE;QACT,IAAI,EAAE,MAAM,CAAC;MACd;KACF,CACF,EACD,QAAQ,IAAI,MAAM,CAAC,yBAAyB,CAC7C;IACD,KAAK,EAAE,WAAW,CAChB,qBAAqB,EACrB,MAAM,CAAC,KAAK,EACZ,CAAC,QAAQ,IAAI;MACX,SAAS,EAAE;QACT,aAAa,EAAE,MAAM,CAAC;MACvB;KACF,EACD,QAAQ,IAAI,MAAM,CAAC,aAAa,CACjC;IACD,QAAQ,EAAE,WAAW,CAAC,MAAM,CAAC,qBAAqB,EAAE,QAAQ,IAAI,MAAM,CAAC,6BAA6B;GACrG;AACH,CAAC,CACF;AAED;;AAEG;AACH,SAAS,gCAAgC,CAAC,aAAuB,EAAE,MAAyB,EAAA;EAC1F,QAAQ,aAAa;IACnB,KAAK,QAAQ,CAAC,KAAK;MACjB,OAAO,MAAM,CAAC,iBAAiB;IACjC,KAAK,QAAQ,CAAC,GAAG;MACf,OAAO,MAAM,CAAC,eAAe;IAC/B,KAAK,QAAQ,CAAC,GAAG;MACf,OAAO,MAAM,CAAC,eAAe;IAC/B,KAAK,QAAQ,CAAC,MAAM;MAClB,OAAO,MAAM,CAAC,kBAAkB;EACnC;AACH;AAEA;;AAEG;AACH,SAAS,+BAA+B,CAAC,aAAuB,EAAE,MAAyB,EAAA;EACzF,QAAQ,aAAa;IACnB,KAAK,QAAQ,CAAC,GAAG;IACjB,KAAK,QAAQ,CAAC,MAAM;MAClB,OAAO,MAAM,CAAC,0BAA0B;IAC1C;MACE,OAAO,CAAA,CAAE;EACZ;AACH","sourcesContent":["import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles, IStyle } from '../../Styling';\nimport { ISpinButtonClassNames, ISpinButtonStyles } from './SpinButton.types';\nimport { KeyboardSpinDirection } from './SpinButton';\nimport { Position } from '../../utilities/positioning';\n\nexport const getClassNames = memoizeFunction(\n  (\n    styles: ISpinButtonStyles,\n    disabled: boolean,\n    isFocused: boolean,\n    keyboardSpinDirection: KeyboardSpinDirection,\n    labelPosition: Position = Position.start,\n    className: string | undefined = undefined,\n  ): ISpinButtonClassNames => {\n    return {\n      root: mergeStyles(styles.root, className),\n      labelWrapper: mergeStyles(styles.labelWrapper, _getStyleForLabelBasedOnPosition(labelPosition, styles)),\n      icon: mergeStyles(styles.icon, disabled && styles.iconDisabled),\n      label: mergeStyles(styles.label),\n      spinButtonWrapper: mergeStyles(\n        styles.spinButtonWrapper,\n        _getStyleForRootBasedOnPosition(labelPosition, styles),\n        !disabled && [\n          {\n            selectors: {\n              ':hover': styles.spinButtonWrapperHovered,\n            },\n          },\n          isFocused && {\n            // This is to increase the specificity of the focus styles\n            // and make it equal to that of the hover styles.\n            selectors: {\n              '&&': styles.spinButtonWrapperFocused,\n            },\n          },\n        ],\n        disabled && styles.spinButtonWrapperDisabled,\n      ),\n      input: mergeStyles(\n        'ms-spinButton-input',\n        styles.input,\n        !disabled && {\n          selectors: {\n            '::selection': styles.inputTextSelected,\n          },\n        },\n        disabled && styles.inputDisabled,\n      ),\n      arrowBox: mergeStyles(styles.arrowButtonsContainer, disabled && styles.arrowButtonsContainerDisabled),\n    };\n  },\n);\n\n/**\n * Returns the Style corresponding to the label position\n */\nfunction _getStyleForLabelBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\n  switch (labelPosition) {\n    case Position.start:\n      return styles.labelWrapperStart;\n    case Position.end:\n      return styles.labelWrapperEnd;\n    case Position.top:\n      return styles.labelWrapperTop;\n    case Position.bottom:\n      return styles.labelWrapperBottom;\n  }\n}\n\n/**\n * Returns the Style corresponding to the label position\n */\nfunction _getStyleForRootBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\n  switch (labelPosition) {\n    case Position.top:\n    case Position.bottom:\n      return styles.spinButtonWrapperTopBottom;\n    default:\n      return {};\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}