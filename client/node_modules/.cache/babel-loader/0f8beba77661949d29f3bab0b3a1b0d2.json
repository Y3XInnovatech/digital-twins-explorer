{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\nexport var ShimmerElementsGroupBase = function (props) {\n  var styles = props.styles,\n    _a = props.width,\n    width = _a === void 0 ? 'auto' : _a,\n    shimmerElements = props.shimmerElements,\n    _b = props.rowHeight,\n    rowHeight = _b === void 0 ? findMaxElementHeight(shimmerElements || []) : _b,\n    _c = props.flexWrap,\n    flexWrap = _c === void 0 ? false : _c,\n    theme = props.theme,\n    backgroundColor = props.backgroundColor;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    flexWrap: flexWrap\n  });\n  return React.createElement(\"div\", {\n    style: {\n      width: width\n    },\n    className: classNames.root\n  }, getRenderedElements(shimmerElements, backgroundColor, rowHeight));\n};\nfunction getRenderedElements(shimmerElements, backgroundColor, rowHeight) {\n  var renderedElements = shimmerElements ? shimmerElements.map(\n  // false positive\n  // eslint-disable-next-line array-callback-return\n  function (element, index) {\n    var type = element.type,\n      filteredElem = __rest(element, [\"type\"]);\n    var verticalAlign = filteredElem.verticalAlign,\n      height = filteredElem.height;\n    var styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n    switch (element.type) {\n      case ShimmerElementType.circle:\n        return React.createElement(ShimmerCircle, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n      case ShimmerElementType.gap:\n        return React.createElement(ShimmerGap, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n      case ShimmerElementType.line:\n        return React.createElement(ShimmerLine, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n    }\n  }) : React.createElement(ShimmerLine, {\n    height: ShimmerElementsDefaultHeights.line\n  });\n  return renderedElements;\n}\nvar getElementStyles = memoizeFunction(function (verticalAlign, elementType, elementHeight, backgroundColor, rowHeight) {\n  var dif = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n  var borderStyle;\n  if (!verticalAlign || verticalAlign === 'center') {\n    borderStyle = {\n      borderBottomWidth: (dif ? Math.floor(dif / 2) : 0) + \"px\",\n      borderTopWidth: (dif ? Math.ceil(dif / 2) : 0) + \"px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'top') {\n    borderStyle = {\n      borderBottomWidth: dif + \"px\",\n      borderTopWidth: \"0px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'bottom') {\n    borderStyle = {\n      borderBottomWidth: \"0px\",\n      borderTopWidth: dif + \"px\"\n    };\n  }\n  if (backgroundColor) {\n    switch (elementType) {\n      case ShimmerElementType.circle:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor\n          }),\n          svg: {\n            fill: backgroundColor\n          }\n        };\n      case ShimmerElementType.gap:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor,\n            backgroundColor: backgroundColor\n          })\n        };\n      case ShimmerElementType.line:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor\n          }),\n          topLeftCorner: {\n            fill: backgroundColor\n          },\n          topRightCorner: {\n            fill: backgroundColor\n          },\n          bottomLeftCorner: {\n            fill: backgroundColor\n          },\n          bottomRightCorner: {\n            fill: backgroundColor\n          }\n        };\n    }\n  }\n  return {\n    root: borderStyle\n  };\n});\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements) {\n  var shimmerElementsDefaulted = shimmerElements.map(function (element) {\n    switch (element.type) {\n      case ShimmerElementType.circle:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.circle;\n        }\n        break;\n      case ShimmerElementType.line:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.line;\n        }\n        break;\n      case ShimmerElementType.gap:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.gap;\n        }\n        break;\n    }\n    return element;\n  });\n  var rowHeight = shimmerElementsDefaulted.reduce(function (acc, next) {\n    return next.height ? next.height > acc ? next.height : acc : acc;\n  }, 0);\n  return rowHeight;\n}","map":{"version":3,"sources":["components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { IRawStyle } from '../../../Styling';\nimport {\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles,\n} from './ShimmerElementsGroup.types';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights, IShimmerElement } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerElementsGroupBase: React.FunctionComponent<IShimmerElementsGroupProps> = props => {\n  const {\n    styles,\n    width = 'auto',\n    shimmerElements,\n    rowHeight = findMaxElementHeight(shimmerElements || []),\n    flexWrap = false,\n    theme,\n    backgroundColor,\n  } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    flexWrap,\n  });\n\n  return (\n    <div style={{ width: width }} className={classNames.root}>\n      {getRenderedElements(shimmerElements, backgroundColor, rowHeight)}\n    </div>\n  );\n};\n\nfunction getRenderedElements(\n  shimmerElements?: IShimmerElement[],\n  backgroundColor?: string,\n  rowHeight?: number,\n): React.ReactNode {\n  const renderedElements: React.ReactNode = shimmerElements ? (\n    shimmerElements.map(\n      // false positive\n      // eslint-disable-next-line array-callback-return\n      (element: IShimmerElement, index: number): JSX.Element => {\n        const { type, ...filteredElem } = element;\n        const { verticalAlign, height } = filteredElem;\n        const styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n\n        switch (element.type) {\n          case ShimmerElementType.circle:\n            return <ShimmerCircle key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.gap:\n            return <ShimmerGap key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.line:\n            return <ShimmerLine key={index} {...filteredElem} styles={styles} />;\n        }\n      },\n    )\n  ) : (\n    <ShimmerLine height={ShimmerElementsDefaultHeights.line} />\n  );\n\n  return renderedElements;\n}\n\nconst getElementStyles = memoizeFunction(\n  (\n    verticalAlign: 'center' | 'bottom' | 'top' | undefined,\n    elementType: ShimmerElementType,\n    elementHeight: number | undefined,\n    backgroundColor?: string,\n    rowHeight?: number,\n  ): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\n    const dif: number = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n\n    let borderStyle: IRawStyle | undefined;\n\n    if (!verticalAlign || verticalAlign === 'center') {\n      borderStyle = {\n        borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n        borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'top') {\n      borderStyle = {\n        borderBottomWidth: `${dif}px`,\n        borderTopWidth: `0px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'bottom') {\n      borderStyle = {\n        borderBottomWidth: `0px`,\n        borderTopWidth: `${dif}px`,\n      };\n    }\n\n    if (backgroundColor) {\n      switch (elementType) {\n        case ShimmerElementType.circle:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            svg: { fill: backgroundColor },\n          };\n        case ShimmerElementType.gap:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor, backgroundColor: backgroundColor },\n          };\n        case ShimmerElementType.line:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            topLeftCorner: { fill: backgroundColor },\n            topRightCorner: { fill: backgroundColor },\n            bottomLeftCorner: { fill: backgroundColor },\n            bottomRightCorner: { fill: backgroundColor },\n          };\n      }\n    }\n\n    return {\n      root: borderStyle,\n    };\n  },\n);\n\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements: IShimmerElement[]): number {\n  const shimmerElementsDefaulted: IShimmerElement[] = shimmerElements.map(\n    (element: IShimmerElement): IShimmerElement => {\n      switch (element.type) {\n        case ShimmerElementType.circle:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.circle;\n          }\n          break;\n        case ShimmerElementType.line:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.line;\n          }\n          break;\n        case ShimmerElementType.gap:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.gap;\n          }\n          break;\n      }\n      return element;\n    },\n  );\n\n  const rowHeight = shimmerElementsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n    return next.height ? (next.height > acc ? next.height : acc) : acc;\n  }, 0);\n\n  return rowHeight;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}