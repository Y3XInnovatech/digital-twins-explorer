{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\nexport function useControllableValue(controlledValue, defaultUncontrolledValue, onChange) {\n  var _a = React.useState(defaultUncontrolledValue),\n    value = _a[0],\n    setValue = _a[1];\n  var isControlled = useConst(controlledValue !== undefined);\n  var currentValue = isControlled ? controlledValue : value;\n  // Duplicate the current value and onChange in refs so they're accessible from\n  // setValueOrCallOnChange without creating a new callback every time\n  var valueRef = React.useRef(currentValue);\n  var onChangeRef = React.useRef(onChange);\n  React.useEffect(function () {\n    valueRef.current = currentValue;\n    onChangeRef.current = onChange;\n  });\n  // To match the behavior of the setter returned by React.useState, this callback's identity\n  // should never change. This means it MUST NOT directly reference variables that can change.\n  var setValueOrCallOnChange = useConst(function () {\n    return function (update, ev) {\n      // Assuming here that TValue is not a function, because a controllable value will typically\n      // be something a user can enter as input\n      var newValue = typeof update === 'function' ? update(valueRef.current) : update;\n      if (onChangeRef.current) {\n        onChangeRef.current(ev, newValue);\n      }\n      if (!isControlled) {\n        setValue(newValue);\n      }\n    };\n  });\n  return [currentValue, setValueOrCallOnChange];\n}","map":{"version":3,"sources":["useControllableValue.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,QAAQ,QAAQ,YAAY;AAkCrC,OAAM,SAAU,oBAAoB,CAKlC,eAAmC,EACnC,wBAA4C,EAC5C,QAAmD,EAAA;EAE7C,IAAA,EAAA,GAAA,KAAA,CAAA,QAAA,CAAA,wBAAA,CAAgF;IAA/E,KAAA,GAAA,EAAA,CAAA,CAAA,CAAK;IAAE,QAAA,GAAA,EAAA,CAAA,CAAA,CAAwE;EACtF,IAAM,YAAY,GAAG,QAAQ,CAAU,eAAe,KAAK,SAAS,CAAC;EACrE,IAAM,YAAY,GAAG,YAAY,GAAG,eAAe,GAAG,KAAK;EAE3D;EACA;EACA,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC;EAC3C,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;EAC1C,KAAK,CAAC,SAAS,CAAC,YAAA;IACd,QAAQ,CAAC,OAAO,GAAG,YAAY;IAC/B,WAAW,CAAC,OAAO,GAAG,QAAQ;EAChC,CAAC,CAAC;EAEF;EACA;EACA,IAAM,sBAAsB,GAAG,QAAQ,CAAC,YAAA;IAAM,OAAA,UAAC,MAAgD,EAAE,EAAW,EAAA;MAC1G;MACA;MACA,IAAM,QAAQ,GAAG,OAAO,MAAM,KAAK,UAAU,GAAI,MAAmB,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,MAAM;MAE/F,IAAI,WAAW,CAAC,OAAO,EAAE;QACvB,WAAW,CAAC,OAAO,CAAC,EAAG,EAAE,QAAQ,CAAC;MACnC;MAED,IAAI,CAAC,YAAY,EAAE;QACjB,QAAQ,CAAC,QAAQ,CAAC;MACnB;IACH,CAAC;EAZ6C,CAY7C,CAAC;EAEF,OAAO,CAAC,YAAY,EAAE,sBAAsB,CAAU;AACxD","sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type ChangeCallback<\n  TElement extends HTMLElement,\n  TValue,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n> = (ev: TEvent, newValue: TValue | undefined) => void;\n\n/**\n * Hook to manage a value that could be either controlled or uncontrolled, such as a checked state or\n * text box string.\n * @param controlledValue - The controlled value passed in the props. This value will always be used if provided,\n * and the internal state will be updated to reflect it.\n * @param defaultUncontrolledValue - Initial value for the internal state in the uncontrolled case.\n * @returns An array of the current value and an updater callback. Like `React.useState`, the updater\n * callback always has the same identity, and it can take either a new value, or a function which\n * is passed the previous value and returns the new value.\n * @see https://reactjs.org/docs/uncontrolled-components.html\n */\nexport function useControllableValue<TValue, TElement extends HTMLElement>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n): Readonly<[TValue | undefined, (update: React.SetStateAction<TValue | undefined>) => void]>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange: ChangeCallback<TElement, TValue, TEvent> | undefined,\n): Readonly<\n  [TValue | undefined, (update: React.SetStateAction<TValue | undefined>, ev?: React.FormEvent<TElement>) => void]\n>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TEvent extends React.SyntheticEvent<TElement> | undefined\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange?: ChangeCallback<TElement, TValue, TEvent>,\n) {\n  const [value, setValue] = React.useState<TValue | undefined>(defaultUncontrolledValue);\n  const isControlled = useConst<boolean>(controlledValue !== undefined);\n  const currentValue = isControlled ? controlledValue : value;\n\n  // Duplicate the current value and onChange in refs so they're accessible from\n  // setValueOrCallOnChange without creating a new callback every time\n  const valueRef = React.useRef(currentValue);\n  const onChangeRef = React.useRef(onChange);\n  React.useEffect(() => {\n    valueRef.current = currentValue;\n    onChangeRef.current = onChange;\n  });\n\n  // To match the behavior of the setter returned by React.useState, this callback's identity\n  // should never change. This means it MUST NOT directly reference variables that can change.\n  const setValueOrCallOnChange = useConst(() => (update: React.SetStateAction<TValue | undefined>, ev?: TEvent) => {\n    // Assuming here that TValue is not a function, because a controllable value will typically\n    // be something a user can enter as input\n    const newValue = typeof update === 'function' ? (update as Function)(valueRef.current) : update;\n\n    if (onChangeRef.current) {\n      onChangeRef.current(ev!, newValue);\n    }\n\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  });\n\n  return [currentValue, setValueOrCallOnChange] as const;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}