{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, getRTL, initializeComponentRef, format } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { addYears, setMonth, getYearStart, getYearEnd, getMonthStart, getMonthEnd, compareDatePart } from '../../utilities/dateMath/DateMath';\nimport { Icon } from '../../Icon';\nimport * as stylesImport from './Calendar.scss';\nimport { CalendarYear } from './CalendarYear';\nvar styles = stylesImport;\nvar MONTHS_PER_ROW = 4;\nvar CalendarMonth = /** @class */function (_super) {\n  __extends(CalendarMonth, _super);\n  function CalendarMonth(props) {\n    var _this = _super.call(this, props) || this;\n    _this._navigatedMonthRef = React.createRef();\n    _this._onCalendarYearRef = function (ref) {\n      _this._calendarYearRef = ref;\n    };\n    _this._onKeyDown = function (callback, ev) {\n      if (ev.which === KeyCodes.enter) {\n        callback();\n      }\n    };\n    _this._onSelectYear = function (selectedYear) {\n      _this._focusOnUpdate = true;\n      var _a = _this.props,\n        navigatedDate = _a.navigatedDate,\n        onNavigateDate = _a.onNavigateDate,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate;\n      var navYear = navigatedDate.getFullYear();\n      if (navYear !== selectedYear) {\n        var newNavigationDate = new Date(navigatedDate.getTime());\n        newNavigationDate.setFullYear(selectedYear);\n        // for min and max dates, adjust the new navigation date - perhaps this should be\n        // checked on the master navigation date handler (i.e. in Calendar)\n        if (maxDate && newNavigationDate > maxDate) {\n          newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n        } else if (minDate && newNavigationDate < minDate) {\n          newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n        }\n        onNavigateDate(newNavigationDate, true);\n      }\n      _this.setState({\n        isYearPickerVisible: false\n      });\n    };\n    _this._yearToString = function (year) {\n      var _a = _this.props,\n        navigatedDate = _a.navigatedDate,\n        dateTimeFormatter = _a.dateTimeFormatter;\n      if (dateTimeFormatter) {\n        // create a date based on the current nav date\n        var yearFormattingDate = new Date(navigatedDate.getTime());\n        yearFormattingDate.setFullYear(year);\n        return dateTimeFormatter.formatYear(yearFormattingDate);\n      }\n      return String(year);\n    };\n    _this._yearRangeToString = function (yearRange) {\n      return _this._yearToString(yearRange.fromYear) + \" - \" + _this._yearToString(yearRange.toYear);\n    };\n    _this._yearRangeToNextDecadeLabel = function (yearRange) {\n      var strings = _this.props.strings;\n      return strings.nextYearRangeAriaLabel ? strings.nextYearRangeAriaLabel + \" \" + _this._yearRangeToString(yearRange) : '';\n    };\n    _this._yearRangeToPrevDecadeLabel = function (yearRange) {\n      var strings = _this.props.strings;\n      return strings.prevYearRangeAriaLabel ? strings.prevYearRangeAriaLabel + \" \" + _this._yearRangeToString(yearRange) : '';\n    };\n    _this._onRenderYear = function (year) {\n      return _this._yearToString(year);\n    };\n    _this._onSelectNextYear = function () {\n      var _a = _this.props,\n        navigatedDate = _a.navigatedDate,\n        onNavigateDate = _a.onNavigateDate;\n      onNavigateDate(addYears(navigatedDate, 1), false);\n    };\n    _this._onSelectNextYearKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectNextYear, ev);\n      }\n    };\n    _this._onSelectPrevYear = function () {\n      var _a = _this.props,\n        navigatedDate = _a.navigatedDate,\n        onNavigateDate = _a.onNavigateDate;\n      onNavigateDate(addYears(navigatedDate, -1), false);\n    };\n    _this._onSelectPrevYearKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectPrevYear, ev);\n      }\n    };\n    _this._onSelectMonthKeyDown = function (index) {\n      return function (ev) {\n        return _this._onKeyDown(function () {\n          return _this._onSelectMonth(index);\n        }, ev);\n      };\n    };\n    _this._onSelectMonth = function (newMonth) {\n      var _a = _this.props,\n        navigatedDate = _a.navigatedDate,\n        onNavigateDate = _a.onNavigateDate,\n        onHeaderSelect = _a.onHeaderSelect;\n      // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n      if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n      onNavigateDate(setMonth(navigatedDate, newMonth), true);\n    };\n    _this._onHeaderSelect = function () {\n      var _a = _this.props,\n        onHeaderSelect = _a.onHeaderSelect,\n        yearPickerHidden = _a.yearPickerHidden;\n      if (!yearPickerHidden) {\n        _this._focusOnUpdate = true;\n        _this.setState({\n          isYearPickerVisible: true\n        });\n      } else if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n    };\n    _this._onYearPickerHeaderSelect = function (focus) {\n      _this._focusOnUpdate = focus;\n      _this.setState({\n        isYearPickerVisible: false\n      });\n    };\n    _this._onHeaderKeyDown = function (ev) {\n      if (_this._onHeaderSelect && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n        _this._onHeaderSelect();\n      }\n    };\n    initializeComponentRef(_this);\n    _this._selectMonthCallbacks = [];\n    props.strings.shortMonths.forEach(function (month, index) {\n      _this._selectMonthCallbacks[index] = _this._onSelectMonth.bind(_this, index);\n    });\n    _this._isCurrentMonth = _this._isCurrentMonth.bind(_this);\n    _this._onSelectNextYear = _this._onSelectNextYear.bind(_this);\n    _this._onSelectPrevYear = _this._onSelectPrevYear.bind(_this);\n    _this._onSelectMonth = _this._onSelectMonth.bind(_this);\n    _this.state = {\n      isYearPickerVisible: false\n    };\n    return _this;\n  }\n  CalendarMonth.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n  CalendarMonth.prototype.render = function () {\n    var _a, _b;\n    var _this = this;\n    var _c = this.props,\n      navigatedDate = _c.navigatedDate,\n      selectedDate = _c.selectedDate,\n      strings = _c.strings,\n      today = _c.today,\n      highlightCurrentMonth = _c.highlightCurrentMonth,\n      highlightSelectedMonth = _c.highlightSelectedMonth,\n      navigationIcons = _c.navigationIcons,\n      dateTimeFormatter = _c.dateTimeFormatter,\n      minDate = _c.minDate,\n      maxDate = _c.maxDate,\n      yearPickerHidden = _c.yearPickerHidden;\n    if (this.state.isYearPickerVisible) {\n      // default the year picker to the current navigated date\n      var currentSelectedDate = navigatedDate ? navigatedDate.getFullYear() : undefined;\n      return React.createElement(CalendarYear, {\n        key: 'calendarYear_' + (currentSelectedDate && currentSelectedDate.toString()),\n        minYear: minDate ? minDate.getFullYear() : undefined,\n        maxYear: maxDate ? maxDate.getFullYear() : undefined,\n        onSelectYear: this._onSelectYear,\n        navigationIcons: navigationIcons,\n        onHeaderSelect: this._onYearPickerHeaderSelect,\n        selectedYear: currentSelectedDate,\n        onRenderYear: this._onRenderYear,\n        strings: {\n          rangeAriaLabel: this._yearRangeToString,\n          prevRangeAriaLabel: this._yearRangeToPrevDecadeLabel,\n          nextRangeAriaLabel: this._yearRangeToNextDecadeLabel,\n          headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel\n        },\n        ref: this._onCalendarYearRef\n      });\n    }\n    var rowIndexes = [];\n    for (var i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n      rowIndexes.push(i);\n    }\n    var leftNavigationIcon = navigationIcons.leftNavigation;\n    var rightNavigationIcon = navigationIcons.rightNavigation;\n    // determine if previous/next years are in bounds\n    var isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n    var isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n    var yearString = dateTimeFormatter.formatYear(navigatedDate);\n    var headerAriaLabel = strings.monthPickerHeaderAriaLabel ? format(strings.monthPickerHeaderAriaLabel, yearString) : yearString;\n    return React.createElement(\"div\", {\n      className: css('ms-DatePicker-monthPicker', styles.monthPicker)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-header', styles.header)\n    }, this.props.onHeaderSelect || !yearPickerHidden ? React.createElement(\"div\", {\n      className: css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear, styles.headerToggleView),\n      onClick: this._onHeaderSelect,\n      onKeyDown: this._onHeaderKeyDown,\n      \"aria-label\": headerAriaLabel,\n      role: \"button\",\n      \"aria-atomic\": true,\n      \"aria-live\": \"polite\",\n      tabIndex: 0\n    }, dateTimeFormatter.formatYear(navigatedDate)) : React.createElement(\"div\", {\n      className: css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear)\n    }, dateTimeFormatter.formatYear(navigatedDate)), React.createElement(\"div\", {\n      className: css('ms-DatePicker-yearComponents', styles.yearComponents)\n    }, React.createElement(\"div\", {\n      className: css('ms-DatePicker-navContainer', styles.navContainer)\n    }, React.createElement(\"button\", {\n      className: css('ms-DatePicker-prevYear js-prevYear', styles.prevYear, (_a = {}, _a['ms-DatePicker-prevYear--disabled ' + styles.prevYearIsDisabled] = !isPrevYearInBounds, _a)),\n      disabled: !isPrevYearInBounds,\n      onClick: isPrevYearInBounds ? this._onSelectPrevYear : undefined,\n      onKeyDown: isPrevYearInBounds ? this._onSelectPrevYearKeyDown : undefined,\n      title: strings.prevYearAriaLabel ? strings.prevYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, -1)) : undefined,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: getRTL() ? rightNavigationIcon : leftNavigationIcon\n    })), React.createElement(\"button\", {\n      className: css('ms-DatePicker-nextYear js-nextYear', styles.nextYear, (_b = {}, _b['ms-DatePicker-nextYear--disabled ' + styles.nextYearIsDisabled] = !isNextYearInBounds, _b)),\n      disabled: !isNextYearInBounds,\n      onClick: isNextYearInBounds ? this._onSelectNextYear : undefined,\n      onKeyDown: isNextYearInBounds ? this._onSelectNextYearKeyDown : undefined,\n      title: strings.nextYearAriaLabel ? strings.nextYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, 1)) : undefined,\n      role: \"button\",\n      type: \"button\"\n    }, React.createElement(Icon, {\n      iconName: getRTL() ? leftNavigationIcon : rightNavigationIcon\n    }))))), React.createElement(FocusZone, null, React.createElement(\"div\", {\n      className: css('ms-DatePicker-optionGrid', styles.optionGrid),\n      role: \"grid\",\n      \"aria-readonly\": \"true\"\n    }, rowIndexes.map(function (rowNum) {\n      var monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n      return React.createElement(\"div\", {\n        key: 'monthRow_' + rowNum,\n        role: \"row\"\n      }, monthsForRow.map(function (month, index) {\n        var _a;\n        var monthIndex = rowNum * MONTHS_PER_ROW + index;\n        var indexedMonth = setMonth(navigatedDate, monthIndex);\n        var isCurrentMonth = _this._isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today);\n        var isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n        var isSelectedMonth = selectedDate.getMonth() === monthIndex;\n        var isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n        var isInBounds = (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) && (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n        return React.createElement(\"button\", {\n          role: 'gridcell',\n          className: css('ms-DatePicker-monthOption', styles.monthOption, (_a = {}, _a['ms-DatePicker-day--today ' + styles.monthIsCurrentMonth] = highlightCurrentMonth && isCurrentMonth, _a['ms-DatePicker-day--highlighted ' + styles.monthIsHighlighted] = (highlightCurrentMonth || highlightSelectedMonth) && isSelectedMonth && isSelectedYear, _a['ms-DatePicker-monthOption--disabled ' + styles.monthOptionIsDisabled] = !isInBounds, _a)),\n          disabled: !isInBounds,\n          key: monthIndex,\n          onClick: isInBounds ? _this._selectMonthCallbacks[monthIndex] : undefined,\n          onKeyDown: isInBounds ? _this._onSelectMonthKeyDown(monthIndex) : undefined,\n          \"aria-label\": dateTimeFormatter.formatMonthYear(indexedMonth, strings),\n          \"aria-selected\": isNavigatedMonth,\n          \"data-is-focusable\": isInBounds ? true : undefined,\n          ref: isNavigatedMonth ? _this._navigatedMonthRef : undefined,\n          type: \"button\"\n        }, month);\n      }));\n    }))));\n  };\n  CalendarMonth.prototype.focus = function () {\n    if (this._calendarYearRef) {\n      this._calendarYearRef.focus();\n    } else if (this._navigatedMonthRef.current) {\n      this._navigatedMonthRef.current.tabIndex = 0;\n      this._navigatedMonthRef.current.focus();\n    }\n  };\n  CalendarMonth.prototype._isCurrentMonth = function (month, year, today) {\n    return today.getFullYear() === year && today.getMonth() === month;\n  };\n  return CalendarMonth;\n}(React.Component);\nexport { CalendarMonth };","map":{"version":3,"sources":["components/Calendar/CalendarMonth.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, getRTL, IRefObject, initializeComponentRef, format } from '../../Utilities';\nimport { ICalendarStrings, ICalendarIconStrings, ICalendarFormatDateCallbacks } from './Calendar.types';\nimport { FocusZone } from '../../FocusZone';\nimport {\n  addYears,\n  setMonth,\n  getYearStart,\n  getYearEnd,\n  getMonthStart,\n  getMonthEnd,\n  compareDatePart,\n} from '../../utilities/dateMath/DateMath';\nimport { Icon } from '../../Icon';\nimport * as stylesImport from './Calendar.scss';\nimport { CalendarYear, ICalendarYearRange } from './CalendarYear';\nconst styles: any = stylesImport;\nconst MONTHS_PER_ROW: number = 4;\n\nexport interface ICalendarMonth {\n  focus(): void;\n}\n\nexport interface ICalendarMonthProps extends React.ClassAttributes<CalendarMonth> {\n  componentRef?: IRefObject<ICalendarMonth>;\n  navigatedDate: Date;\n  selectedDate: Date;\n  strings: ICalendarStrings;\n  onNavigateDate: (date: Date, focusOnNavigatedDay: boolean) => void;\n  today?: Date;\n  highlightCurrentMonth: boolean;\n  highlightSelectedMonth: boolean;\n  onHeaderSelect?: (focus: boolean) => void;\n  navigationIcons: ICalendarIconStrings;\n  dateTimeFormatter: ICalendarFormatDateCallbacks;\n  minDate?: Date;\n  maxDate?: Date;\n  yearPickerHidden?: boolean;\n}\n\nexport interface ICalendarMonthState {\n  /** State used to show/hide month picker */\n  isYearPickerVisible?: boolean;\n}\n\nexport class CalendarMonth extends React.Component<ICalendarMonthProps, ICalendarMonthState> {\n  /**\n   * @deprecated unused, prefer 'ref' and 'componentRef' of ICalendarMonthProps.\n   */\n  public refs: {\n    [key: string]: React.ReactInstance;\n    navigatedMonth: HTMLElement;\n  };\n\n  private _selectMonthCallbacks: (() => void)[];\n  private _calendarYearRef: CalendarYear;\n  private _navigatedMonthRef: React.RefObject<HTMLButtonElement> = React.createRef<HTMLButtonElement>();\n  private _focusOnUpdate: boolean;\n\n  public constructor(props: ICalendarMonthProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._selectMonthCallbacks = [];\n    props.strings.shortMonths.forEach((month, index) => {\n      this._selectMonthCallbacks[index] = this._onSelectMonth.bind(this, index);\n    });\n\n    this._isCurrentMonth = this._isCurrentMonth.bind(this);\n    this._onSelectNextYear = this._onSelectNextYear.bind(this);\n    this._onSelectPrevYear = this._onSelectPrevYear.bind(this);\n    this._onSelectMonth = this._onSelectMonth.bind(this);\n\n    this.state = { isYearPickerVisible: false };\n  }\n\n  public componentDidUpdate(): void {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      navigatedDate,\n      selectedDate,\n      strings,\n      today,\n      highlightCurrentMonth,\n      highlightSelectedMonth,\n      navigationIcons,\n      dateTimeFormatter,\n      minDate,\n      maxDate,\n      yearPickerHidden,\n    } = this.props;\n\n    if (this.state.isYearPickerVisible) {\n      // default the year picker to the current navigated date\n      const currentSelectedDate = navigatedDate ? navigatedDate.getFullYear() : undefined;\n      return (\n        <CalendarYear\n          key={'calendarYear_' + (currentSelectedDate && currentSelectedDate.toString())}\n          minYear={minDate ? minDate.getFullYear() : undefined}\n          maxYear={maxDate ? maxDate.getFullYear() : undefined}\n          onSelectYear={this._onSelectYear}\n          navigationIcons={navigationIcons}\n          onHeaderSelect={this._onYearPickerHeaderSelect}\n          selectedYear={currentSelectedDate}\n          onRenderYear={this._onRenderYear}\n          strings={{\n            rangeAriaLabel: this._yearRangeToString,\n            prevRangeAriaLabel: this._yearRangeToPrevDecadeLabel,\n            nextRangeAriaLabel: this._yearRangeToNextDecadeLabel,\n            headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel,\n          }}\n          ref={this._onCalendarYearRef}\n        />\n      );\n    }\n\n    const rowIndexes = [];\n    for (let i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n      rowIndexes.push(i);\n    }\n\n    const leftNavigationIcon = navigationIcons.leftNavigation;\n    const rightNavigationIcon = navigationIcons.rightNavigation;\n\n    // determine if previous/next years are in bounds\n    const isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n    const isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n\n    const yearString = dateTimeFormatter.formatYear(navigatedDate);\n    const headerAriaLabel = strings.monthPickerHeaderAriaLabel\n      ? format(strings.monthPickerHeaderAriaLabel, yearString)\n      : yearString;\n\n    return (\n      <div className={css('ms-DatePicker-monthPicker', styles.monthPicker)}>\n        <div className={css('ms-DatePicker-header', styles.header)}>\n          {this.props.onHeaderSelect || !yearPickerHidden ? (\n            <div\n              className={css(\n                'ms-DatePicker-currentYear js-showYearPicker',\n                styles.currentYear,\n                styles.headerToggleView,\n              )}\n              onClick={this._onHeaderSelect}\n              onKeyDown={this._onHeaderKeyDown}\n              aria-label={headerAriaLabel}\n              role=\"button\"\n              aria-atomic={true}\n              aria-live=\"polite\"\n              tabIndex={0}\n            >\n              {dateTimeFormatter.formatYear(navigatedDate)}\n            </div>\n          ) : (\n            <div className={css('ms-DatePicker-currentYear js-showYearPicker', styles.currentYear)}>\n              {dateTimeFormatter.formatYear(navigatedDate)}\n            </div>\n          )}\n          <div className={css('ms-DatePicker-yearComponents', styles.yearComponents)}>\n            <div className={css('ms-DatePicker-navContainer', styles.navContainer)}>\n              <button\n                className={css('ms-DatePicker-prevYear js-prevYear', styles.prevYear, {\n                  ['ms-DatePicker-prevYear--disabled ' + styles.prevYearIsDisabled]: !isPrevYearInBounds,\n                })}\n                disabled={!isPrevYearInBounds}\n                onClick={isPrevYearInBounds ? this._onSelectPrevYear : undefined}\n                onKeyDown={isPrevYearInBounds ? this._onSelectPrevYearKeyDown : undefined}\n                title={\n                  strings.prevYearAriaLabel\n                    ? strings.prevYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, -1))\n                    : undefined\n                }\n                role=\"button\"\n                type=\"button\"\n              >\n                <Icon iconName={getRTL() ? rightNavigationIcon : leftNavigationIcon} />\n              </button>\n              <button\n                className={css('ms-DatePicker-nextYear js-nextYear', styles.nextYear, {\n                  ['ms-DatePicker-nextYear--disabled ' + styles.nextYearIsDisabled]: !isNextYearInBounds,\n                })}\n                disabled={!isNextYearInBounds}\n                onClick={isNextYearInBounds ? this._onSelectNextYear : undefined}\n                onKeyDown={isNextYearInBounds ? this._onSelectNextYearKeyDown : undefined}\n                title={\n                  strings.nextYearAriaLabel\n                    ? strings.nextYearAriaLabel + ' ' + dateTimeFormatter.formatYear(addYears(navigatedDate, 1))\n                    : undefined\n                }\n                role=\"button\"\n                type=\"button\"\n              >\n                <Icon iconName={getRTL() ? leftNavigationIcon : rightNavigationIcon} />\n              </button>\n            </div>\n          </div>\n        </div>\n        <FocusZone>\n          <div className={css('ms-DatePicker-optionGrid', styles.optionGrid)} role=\"grid\" aria-readonly=\"true\">\n            {rowIndexes.map((rowNum: number) => {\n              const monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n              return (\n                <div key={'monthRow_' + rowNum} role=\"row\">\n                  {monthsForRow.map((month: string, index: number) => {\n                    const monthIndex = rowNum * MONTHS_PER_ROW + index;\n                    const indexedMonth = setMonth(navigatedDate, monthIndex);\n                    const isCurrentMonth = this._isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today!);\n                    const isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n                    const isSelectedMonth = selectedDate.getMonth() === monthIndex;\n                    const isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n                    const isInBounds =\n                      (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) &&\n                      (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n\n                    return (\n                      <button\n                        role={'gridcell'}\n                        className={css('ms-DatePicker-monthOption', styles.monthOption, {\n                          ['ms-DatePicker-day--today ' + styles.monthIsCurrentMonth]:\n                            highlightCurrentMonth && isCurrentMonth!,\n                          ['ms-DatePicker-day--highlighted ' + styles.monthIsHighlighted]:\n                            (highlightCurrentMonth || highlightSelectedMonth) && isSelectedMonth && isSelectedYear,\n                          ['ms-DatePicker-monthOption--disabled ' + styles.monthOptionIsDisabled]: !isInBounds,\n                        })}\n                        disabled={!isInBounds}\n                        key={monthIndex}\n                        onClick={isInBounds ? this._selectMonthCallbacks[monthIndex] : undefined}\n                        onKeyDown={isInBounds ? this._onSelectMonthKeyDown(monthIndex) : undefined}\n                        aria-label={dateTimeFormatter.formatMonthYear(indexedMonth, strings)}\n                        aria-selected={isNavigatedMonth}\n                        data-is-focusable={isInBounds ? true : undefined}\n                        ref={isNavigatedMonth ? this._navigatedMonthRef : undefined}\n                        type=\"button\"\n                      >\n                        {month}\n                      </button>\n                    );\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        </FocusZone>\n      </div>\n    );\n  }\n\n  public focus() {\n    if (this._calendarYearRef) {\n      this._calendarYearRef.focus();\n    } else if (this._navigatedMonthRef.current) {\n      this._navigatedMonthRef.current.tabIndex = 0;\n      this._navigatedMonthRef.current.focus();\n    }\n  }\n\n  private _onCalendarYearRef = (ref: CalendarYear) => {\n    this._calendarYearRef = ref;\n  };\n\n  private _isCurrentMonth(month: number, year: number, today: Date): boolean {\n    return today.getFullYear() === year && today.getMonth() === month;\n  }\n\n  private _onKeyDown = (callback: () => void, ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      callback();\n    }\n  };\n\n  private _onSelectYear = (selectedYear: number) => {\n    this._focusOnUpdate = true;\n    const { navigatedDate, onNavigateDate, maxDate, minDate } = this.props;\n    const navYear = navigatedDate.getFullYear();\n    if (navYear !== selectedYear) {\n      let newNavigationDate = new Date(navigatedDate.getTime());\n      newNavigationDate.setFullYear(selectedYear);\n      // for min and max dates, adjust the new navigation date - perhaps this should be\n      // checked on the master navigation date handler (i.e. in Calendar)\n      if (maxDate && newNavigationDate > maxDate) {\n        newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n      } else if (minDate && newNavigationDate < minDate) {\n        newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n      }\n      onNavigateDate(newNavigationDate, true);\n    }\n    this.setState({ isYearPickerVisible: false });\n  };\n\n  private _yearToString = (year: number) => {\n    const { navigatedDate, dateTimeFormatter } = this.props;\n    if (dateTimeFormatter) {\n      // create a date based on the current nav date\n      const yearFormattingDate = new Date(navigatedDate.getTime());\n      yearFormattingDate.setFullYear(year);\n      return dateTimeFormatter.formatYear(yearFormattingDate);\n    }\n    return String(year);\n  };\n\n  private _yearRangeToString = (yearRange: ICalendarYearRange) => {\n    return `${this._yearToString(yearRange.fromYear)} - ${this._yearToString(yearRange.toYear)}`;\n  };\n\n  private _yearRangeToNextDecadeLabel = (yearRange: ICalendarYearRange) => {\n    const { strings } = this.props;\n    return strings.nextYearRangeAriaLabel\n      ? `${strings.nextYearRangeAriaLabel} ${this._yearRangeToString(yearRange)}`\n      : '';\n  };\n\n  private _yearRangeToPrevDecadeLabel = (yearRange: ICalendarYearRange) => {\n    const { strings } = this.props;\n    return strings.prevYearRangeAriaLabel\n      ? `${strings.prevYearRangeAriaLabel} ${this._yearRangeToString(yearRange)}`\n      : '';\n  };\n\n  private _onRenderYear = (year: number) => {\n    return this._yearToString(year);\n  };\n\n  private _onSelectNextYear = (): void => {\n    const { navigatedDate, onNavigateDate } = this.props;\n    onNavigateDate(addYears(navigatedDate, 1), false);\n  };\n\n  private _onSelectNextYearKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      this._onKeyDown(this._onSelectNextYear, ev);\n    }\n  };\n\n  private _onSelectPrevYear = (): void => {\n    const { navigatedDate, onNavigateDate } = this.props;\n    onNavigateDate(addYears(navigatedDate, -1), false);\n  };\n\n  private _onSelectPrevYearKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.enter) {\n      this._onKeyDown(this._onSelectPrevYear, ev);\n    }\n  };\n\n  private _onSelectMonthKeyDown = (index: number): ((ev: React.KeyboardEvent<HTMLElement>) => void) => {\n    return (ev: React.KeyboardEvent<HTMLElement>) => this._onKeyDown(() => this._onSelectMonth(index), ev);\n  };\n\n  private _onSelectMonth = (newMonth: number): void => {\n    const { navigatedDate, onNavigateDate, onHeaderSelect } = this.props;\n\n    // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n    if (onHeaderSelect) {\n      onHeaderSelect(true);\n    }\n    onNavigateDate(setMonth(navigatedDate, newMonth), true);\n  };\n\n  private _onHeaderSelect = (): void => {\n    const { onHeaderSelect, yearPickerHidden } = this.props;\n    if (!yearPickerHidden) {\n      this._focusOnUpdate = true;\n      this.setState({ isYearPickerVisible: true });\n    } else if (onHeaderSelect) {\n      onHeaderSelect(true);\n    }\n  };\n\n  private _onYearPickerHeaderSelect = (focus: boolean): void => {\n    this._focusOnUpdate = focus;\n    this.setState({ isYearPickerVisible: false });\n  };\n\n  private _onHeaderKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this._onHeaderSelect && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {\n      this._onHeaderSelect();\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}