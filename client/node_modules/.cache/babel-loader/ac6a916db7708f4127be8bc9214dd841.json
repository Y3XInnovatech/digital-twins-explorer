{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { DragDropHelper } from '../../utilities/dragdrop/index';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nvar getClassNames = classNamesFunction();\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nvar MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\nvar NO_COLUMNS = [];\nvar DetailsHeaderBase = /** @class */function (_super) {\n  __extends(DetailsHeaderBase, _super);\n  function DetailsHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._rootElement = React.createRef();\n    _this._rootComponent = React.createRef();\n    _this._draggedColumnIndex = -1;\n    _this._dropHintDetails = {};\n    _this._updateDroppingState = function (newValue, event) {\n      if (_this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n        _this._resetDropHints();\n      }\n    };\n    _this._onDragOver = function (item, event) {\n      if (_this._draggedColumnIndex >= 0) {\n        event.stopPropagation();\n        _this._computeDropHintToBeShown(event.clientX);\n      }\n    };\n    _this._onDrop = function (item, event) {\n      // Safe to assume this is defined since we're handling a drop event\n      var columnReorderProps = _this._getColumnReorderProps();\n      // Target index will not get changed if draggeditem is after target item.\n      if (_this._draggedColumnIndex >= 0 && event) {\n        var targetIndex = _this._draggedColumnIndex > _this._currentDropHintIndex ? _this._currentDropHintIndex : _this._currentDropHintIndex - 1;\n        var isValidDrop = _this._isValidCurrentDropHintIndex();\n        event.stopPropagation();\n        if (isValidDrop) {\n          _this._onDropIndexInfo.sourceIndex = _this._draggedColumnIndex;\n          _this._onDropIndexInfo.targetIndex = targetIndex;\n          if (columnReorderProps.onColumnDrop) {\n            var dragDropDetails = {\n              draggedIndex: _this._draggedColumnIndex,\n              targetIndex: targetIndex\n            };\n            columnReorderProps.onColumnDrop(dragDropDetails);\n            /* eslint-disable deprecation/deprecation */\n          } else if (columnReorderProps.handleColumnReorder) {\n            columnReorderProps.handleColumnReorder(_this._draggedColumnIndex, targetIndex);\n            /* eslint-enable deprecation/deprecation */\n          }\n        }\n      }\n      _this._resetDropHints();\n      _this._dropHintDetails = {};\n      _this._draggedColumnIndex = -1;\n    };\n    _this._updateDragInfo = function (props, event) {\n      // Safe to assume this is defined since we're handling a drag event\n      var columnReorderProps = _this._getColumnReorderProps();\n      var itemIndex = props.itemIndex;\n      if (itemIndex >= 0) {\n        // Column index is set based on the checkbox\n        _this._draggedColumnIndex = _this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n        _this._getDropHintPositions();\n        if (columnReorderProps.onColumnDragStart) {\n          columnReorderProps.onColumnDragStart(true);\n        }\n      } else if (event && _this._draggedColumnIndex >= 0) {\n        _this._resetDropHints();\n        _this._draggedColumnIndex = -1;\n        _this._dropHintDetails = {};\n        if (columnReorderProps.onColumnDragEnd) {\n          var columnDragEndLocation = _this._isEventOnHeader(event);\n          columnReorderProps.onColumnDragEnd({\n            dropLocation: columnDragEndLocation\n          }, event);\n        }\n      }\n    };\n    _this._getDropHintPositions = function () {\n      var _a = _this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      var columnReorderProps = _this._getColumnReorderProps();\n      var prevX = 0;\n      var prevMid = 0;\n      var prevRef;\n      var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n      for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n        if (_this._rootElement.current) {\n          var dropHintElement = _this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0];\n          if (dropHintElement) {\n            if (i === frozenColumnCountFromStart) {\n              prevX = dropHintElement.offsetLeft;\n              prevMid = dropHintElement.offsetLeft;\n              prevRef = dropHintElement;\n            } else {\n              var newMid = (dropHintElement.offsetLeft + prevX) / 2;\n              _this._dropHintDetails[i - 1] = {\n                originX: prevX,\n                startX: prevMid,\n                endX: newMid,\n                dropHintElementRef: prevRef\n              };\n              prevMid = newMid;\n              prevRef = dropHintElement;\n              prevX = dropHintElement.offsetLeft;\n              if (i === columns.length - frozenColumnCountFromEnd) {\n                _this._dropHintDetails[i] = {\n                  originX: prevX,\n                  startX: prevMid,\n                  endX: dropHintElement.offsetLeft,\n                  dropHintElementRef: prevRef\n                };\n              }\n            }\n          }\n        }\n      }\n    };\n    /**\n     * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n     */\n    _this._computeDropHintToBeShown = function (clientX) {\n      var isRtl = getRTL(_this.props.theme);\n      if (_this._rootElement.current) {\n        var clientRect = _this._rootElement.current.getBoundingClientRect();\n        var headerOriginX = clientRect.left;\n        var eventXRelativePosition = clientX - headerOriginX;\n        var currentDropHintIndex = _this._currentDropHintIndex;\n        if (_this._isValidCurrentDropHintIndex()) {\n          if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {\n            return;\n          }\n        }\n        var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a;\n        // Safe to assume this is defined since we're handling a drag/drop event\n        var columnReorderProps = _this._getColumnReorderProps();\n        var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n        var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n        var currentIndex = frozenColumnCountFromStart;\n        var lastValidColumn = columns.length - frozenColumnCountFromEnd;\n        var indexToUpdate = -1;\n        if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {\n          indexToUpdate = currentIndex;\n        } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {\n          indexToUpdate = lastValidColumn;\n        } else if (_this._isValidCurrentDropHintIndex()) {\n          if (_this._dropHintDetails[currentDropHintIndex + 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {\n            indexToUpdate = currentDropHintIndex + 1;\n          } else if (_this._dropHintDetails[currentDropHintIndex - 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {\n            indexToUpdate = currentDropHintIndex - 1;\n          }\n        }\n        if (indexToUpdate === -1) {\n          var startIndex = frozenColumnCountFromStart;\n          var endIndex = lastValidColumn;\n          while (startIndex < endIndex) {\n            var middleIndex = Math.ceil((endIndex + startIndex) / 2);\n            if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {\n              indexToUpdate = middleIndex;\n              break;\n            } else if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              endIndex = middleIndex;\n            } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              startIndex = middleIndex;\n            }\n          }\n        }\n        if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {\n          if (_this._isValidCurrentDropHintIndex()) {\n            _this._resetDropHints();\n          }\n        } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n          _this._resetDropHints();\n          _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n          _this._currentDropHintIndex = indexToUpdate;\n        }\n      }\n    };\n    _this._renderColumnSizer = function (_a) {\n      var _b;\n      var columnIndex = _a.columnIndex;\n      var _c = _this.props.columns,\n        columns = _c === void 0 ? NO_COLUMNS : _c;\n      var column = columns[columnIndex];\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      var classNames = _this._classNames;\n      return column.isResizable ? React.createElement(\"div\", {\n        key: column.key + \"_sizer\",\n        \"aria-hidden\": true,\n        role: \"button\",\n        \"data-is-focusable\": false,\n        onClick: _stopPropagation,\n        \"data-sizer-index\": columnIndex,\n        onBlur: _this._onSizerBlur,\n        className: css(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_b = {}, _b[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex, _b)),\n        onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex)\n      }) : null;\n    };\n    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {\n      return React.createElement(\"span\", {\n        className: tooltipHostProps.hostClassName\n      }, tooltipHostProps.children);\n    };\n    /**\n     * Called when the select all toggle is clicked.\n     */\n    _this._onSelectAllClicked = function () {\n      var selection = _this.props.selection;\n      if (selection) {\n        selection.toggleAllSelected();\n      }\n    };\n    _this._onRootMouseDown = function (ev) {\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n      var columnIndex = Number(columnIndexAttr);\n      var _a = _this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n      if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n        // Ignore anything except the primary button.\n        return;\n      }\n      _this.setState({\n        columnResizeDetails: {\n          columnIndex: columnIndex,\n          columnMinWidth: columns[columnIndex].calculatedWidth,\n          originX: ev.clientX\n        }\n      });\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n    _this._onRootMouseMove = function (ev) {\n      var _a = _this.state,\n        columnResizeDetails = _a.columnResizeDetails,\n        isSizing = _a.isSizing;\n      if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n        _this.setState({\n          isSizing: true\n        });\n      }\n    };\n    _this._onRootKeyDown = function (ev) {\n      var _a = _this.state,\n        columnResizeDetails = _a.columnResizeDetails,\n        isSizing = _a.isSizing;\n      var _b = _this.props,\n        _c = _b.columns,\n        columns = _c === void 0 ? NO_COLUMNS : _c,\n        onColumnResized = _b.onColumnResized;\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n      if (!columnIndexAttr || isSizing) {\n        return;\n      }\n      var columnIndex = Number(columnIndexAttr);\n      if (!columnResizeDetails) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: {\n              columnIndex: columnIndex,\n              columnMinWidth: columns[columnIndex].calculatedWidth\n            }\n          });\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      } else {\n        var increment = void 0;\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: undefined\n          });\n          ev.preventDefault();\n          ev.stopPropagation();\n          // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.left) {\n          increment = getRTL(_this.props.theme) ? 1 : -1;\n          // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.right) {\n          increment = getRTL(_this.props.theme) ? -1 : 1;\n        }\n        if (increment) {\n          if (!ev.shiftKey) {\n            increment *= 10;\n          }\n          _this.setState({\n            columnResizeDetails: __assign(__assign({}, columnResizeDetails), {\n              columnMinWidth: columnResizeDetails.columnMinWidth + increment\n            })\n          });\n          if (onColumnResized) {\n            onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n          }\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    };\n    /**\n     * mouse move event handler in the header\n     * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n     *\n     * @param ev - mouse move event\n     */\n    _this._onSizerMouseMove = function (ev) {\n      var\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = ev.buttons;\n      var _a = _this.props,\n        onColumnIsSizingChanged = _a.onColumnIsSizingChanged,\n        onColumnResized = _a.onColumnResized,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n        // cancel mouse down event and return early when the primary button is not pressed\n        _this._onSizerMouseUp(ev);\n        return;\n      }\n      if (ev.clientX !== columnResizeDetails.originX) {\n        if (onColumnIsSizingChanged) {\n          onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);\n        }\n      }\n      if (onColumnResized) {\n        var movement = ev.clientX - columnResizeDetails.originX;\n        if (getRTL(_this.props.theme)) {\n          movement = -movement;\n        }\n        onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);\n      }\n    };\n    _this._onSizerBlur = function (ev) {\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      if (columnResizeDetails) {\n        _this.setState({\n          columnResizeDetails: undefined,\n          isSizing: false\n        });\n      }\n    };\n    /**\n     * mouse up event handler in the header\n     * clear the resize related state.\n     * This is to ensure we can catch double click event\n     *\n     * @param ev - mouse up event\n     */\n    _this._onSizerMouseUp = function (ev) {\n      var _a = _this.props,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b,\n        onColumnIsSizingChanged = _a.onColumnIsSizingChanged;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      _this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false\n      });\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);\n      }\n    };\n    _this._onToggleCollapseAll = function () {\n      var onToggleCollapseAll = _this.props.onToggleCollapseAll;\n      var newCollapsed = !_this.state.isAllCollapsed;\n      _this.setState({\n        isAllCollapsed: newCollapsed\n      });\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(newCollapsed);\n      }\n    };\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: _this.props.isAllCollapsed,\n      isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected()\n    };\n    _this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1\n    };\n    _this._id = getId('header');\n    _this._currentDropHintIndex = -1;\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    _this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: function () {\n          return;\n        }\n      },\n      minimumPixelsForDrag: _this.props.minimumPixelsForDrag\n    });\n    return _this;\n  }\n  DetailsHeaderBase.prototype.componentDidMount = function () {\n    var selection = this.props.selection;\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    }\n  };\n  DetailsHeaderBase.prototype.componentDidUpdate = function (prevProps) {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      var _a = prevProps.columns,\n        previousColumns = _a === void 0 ? NO_COLUMNS : _a;\n      var _b = this.props.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1\n        };\n      }\n    }\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({\n        isAllCollapsed: this.props.isAllCollapsed\n      });\n    }\n  };\n  DetailsHeaderBase.prototype.componentWillUnmount = function () {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n    this._dragDropHelper.dispose();\n    this._events.dispose();\n  };\n  DetailsHeaderBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      _b = _a.columns,\n      columns = _b === void 0 ? NO_COLUMNS : _b,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelForToggleAllGroupsButton = _a.ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox,\n      selectAllVisibility = _a.selectAllVisibility,\n      ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn,\n      indentWidth = _a.indentWidth,\n      onColumnClick = _a.onColumnClick,\n      onColumnContextMenu = _a.onColumnContextMenu,\n      _c = _a.onRenderColumnHeaderTooltip,\n      onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c,\n      styles = _a.styles,\n      selectionMode = _a.selectionMode,\n      theme = _a.theme,\n      onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox,\n      groupNestingDepth = _a.groupNestingDepth,\n      useFastIcons = _a.useFastIcons,\n      checkboxVisibility = _a.checkboxVisibility,\n      className = _a.className;\n    var _d = this.state,\n      isAllSelected = _d.isAllSelected,\n      columnResizeDetails = _d.columnResizeDetails,\n      isSizing = _d.isSizing,\n      isAllCollapsed = _d.isAllCollapsed;\n    var showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    var isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    var isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n    var columnReorderProps = this._getColumnReorderProps();\n    var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;\n    var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isAllSelected: isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing: isSizing,\n      isAllCollapsed: isAllCollapsed,\n      isCheckboxHidden: isCheckboxHidden,\n      className: className\n    });\n    var classNames = this._classNames;\n    var IconComponent = useFastIcons ? FontIcon : Icon;\n    var isRTL = getRTL(theme);\n    return React.createElement(FocusZone, {\n      role: \"row\",\n      \"aria-label\": ariaLabel,\n      className: classNames.root,\n      componentRef: this._rootComponent,\n      elementRef: this._rootElement,\n      onMouseMove: this._onRootMouseMove,\n      \"data-automationid\": \"DetailsHeader\",\n      direction: FocusZoneDirection.horizontal\n    }, showCheckbox ? [React.createElement(\"div\", {\n      key: \"__checkbox\",\n      className: classNames.cellIsCheck,\n      \"aria-labelledby\": this._id + \"-check\",\n      onClick: !isCheckboxHidden ? this._onSelectAllClicked : undefined,\n      \"aria-colindex\": 1,\n      role: 'columnheader'\n    }, onRenderColumnHeaderTooltip({\n      hostClassName: classNames.checkTooltip,\n      id: this._id + \"-checkTooltip\",\n      setAriaDescribedBy: false,\n      content: ariaLabelForSelectAllCheckbox,\n      children: React.createElement(DetailsRowCheck, {\n        id: this._id + \"-check\",\n        \"aria-label\": selectionMode === SelectionMode.multiple ? ariaLabelForSelectAllCheckbox : ariaLabelForSelectionColumn,\n        \"aria-describedby\": !isCheckboxHidden ? ariaLabelForSelectAllCheckbox && !this.props.onRenderColumnHeaderTooltip ? this._id + \"-checkTooltip\" : undefined : ariaLabelForSelectionColumn && !this.props.onRenderColumnHeaderTooltip ? this._id + \"-checkTooltip\" : undefined,\n        \"data-is-focusable\": !isCheckboxHidden || undefined,\n        isHeader: true,\n        selected: isAllSelected,\n        anySelected: false,\n        canSelect: !isCheckboxHidden,\n        className: classNames.check,\n        onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n        useFastIcons: useFastIcons,\n        isVisible: isCheckboxAlwaysVisible\n      })\n    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectAllCheckbox) : ariaLabelForSelectionColumn && isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectionColumn) : null : null] : null, groupNestingDepth > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? React.createElement(\"div\", {\n      className: classNames.cellIsGroupExpander,\n      onClick: this._onToggleCollapseAll,\n      \"data-is-focusable\": true,\n      \"aria-label\": ariaLabelForToggleAllGroupsButton,\n      \"aria-expanded\": !isAllCollapsed,\n      role: \"columnheader\"\n    }, React.createElement(IconComponent, {\n      className: classNames.collapseButton,\n      iconName: isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'\n    })) : null, React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth - 1\n    }), columns.map(function (column, columnIndex) {\n      var _isDraggable = columnReorderProps ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd : false;\n      return [columnReorderProps && (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) && _this._renderDropHint(columnIndex), React.createElement(DetailsColumn, {\n        column: column,\n        styles: column.styles,\n        key: column.key,\n        columnIndex: (showCheckbox ? 2 : 1) + columnIndex,\n        parentId: _this._id,\n        isDraggable: _isDraggable,\n        updateDragInfo: _this._updateDragInfo,\n        dragDropHelper: _this._dragDropHelper,\n        onColumnClick: onColumnClick,\n        onColumnContextMenu: onColumnContextMenu,\n        // Do not render tooltips by default, but allow for override via props.\n        onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip,\n        isDropped: _this._onDropIndexInfo.targetIndex === columnIndex,\n        cellStyleProps: _this.props.cellStyleProps,\n        useFastIcons: useFastIcons\n      }), _this._renderColumnDivider(columnIndex)];\n    }), columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length), isSizing && React.createElement(Layer, null, React.createElement(\"div\", {\n      className: classNames.sizingOverlay,\n      onMouseMove: this._onSizerMouseMove,\n      onMouseUp: this._onSizerMouseUp\n    })));\n  };\n  /** Set focus to the active thing in the focus area. */\n  DetailsHeaderBase.prototype.focus = function () {\n    var _a;\n    return !!((_a = this._rootComponent.current) === null || _a === void 0 ? void 0 : _a.focus());\n  };\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  DetailsHeaderBase.prototype._getColumnReorderProps = function () {\n    var _a = this.props,\n      columnReorderOptions = _a.columnReorderOptions,\n      columnReorderProps = _a.columnReorderProps;\n    return columnReorderProps || columnReorderOptions && __assign(__assign({}, columnReorderOptions), {\n      onColumnDragEnd: undefined\n    });\n  };\n  DetailsHeaderBase.prototype._getHeaderDragDropOptions = function () {\n    var options = {\n      selectionIndex: 1,\n      context: {\n        data: this,\n        index: 0\n      },\n      canDrag: function () {\n        return false;\n      },\n      canDrop: function () {\n        return true;\n      },\n      onDragStart: function () {\n        return undefined;\n      },\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: function () {\n        return undefined;\n      },\n      onDragOver: this._onDragOver\n    };\n    return options;\n  };\n  DetailsHeaderBase.prototype._isValidCurrentDropHintIndex = function () {\n    return this._currentDropHintIndex >= 0;\n  };\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  DetailsHeaderBase.prototype._isCheckboxColumnHidden = function () {\n    var _a = this.props,\n      selectionMode = _a.selectionMode,\n      checkboxVisibility = _a.checkboxVisibility;\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  };\n  DetailsHeaderBase.prototype._resetDropHints = function () {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  };\n  DetailsHeaderBase.prototype._updateDropHintElement = function (element, displayProperty) {\n    element.childNodes[1].style.display = displayProperty;\n    element.childNodes[0].style.display = displayProperty;\n  };\n  DetailsHeaderBase.prototype._isEventOnHeader = function (event) {\n    if (this._rootElement.current) {\n      var clientRect = this._rootElement.current.getBoundingClientRect();\n      if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  };\n  DetailsHeaderBase.prototype._renderColumnDivider = function (columnIndex) {\n    var _a = this.props.columns,\n      columns = _a === void 0 ? NO_COLUMNS : _a;\n    var column = columns[columnIndex];\n    var onRenderDivider = column.onRenderDivider;\n    return onRenderDivider ? onRenderDivider({\n      column: column,\n      columnIndex: columnIndex\n    }, this._renderColumnSizer) : this._renderColumnSizer({\n      column: column,\n      columnIndex: columnIndex\n    });\n  };\n  DetailsHeaderBase.prototype._renderDropHint = function (dropHintIndex) {\n    var classNames = this._classNames;\n    var IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return React.createElement(\"div\", {\n      key: 'dropHintKey',\n      className: classNames.dropHintStyle,\n      id: \"columnDropHint_\" + dropHintIndex\n    }, React.createElement(\"div\", {\n      role: \"presentation\",\n      key: \"dropHintCircleKey\",\n      className: classNames.dropHintCaretStyle,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      \"aria-hidden\": true\n    }, React.createElement(IconComponent, {\n      iconName: 'CircleShapeSolid'\n    })), React.createElement(\"div\", {\n      key: \"dropHintLineKey\",\n      \"aria-hidden\": true,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      className: classNames.dropHintLineStyle\n    }));\n  };\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  DetailsHeaderBase.prototype._onSizerDoubleClick = function (columnIndex, ev) {\n    var _a = this.props,\n      onColumnAutoResized = _a.onColumnAutoResized,\n      _b = _a.columns,\n      columns = _b === void 0 ? NO_COLUMNS : _b;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  };\n  DetailsHeaderBase.prototype._onSelectionChanged = function () {\n    var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected\n      });\n    }\n  };\n  DetailsHeaderBase.defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true\n  };\n  return DetailsHeaderBase;\n}(React.Component);\nexport { DetailsHeaderBase };\nfunction _liesBetween(rtl, target, left, right) {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl, a, b) {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl, a, b) {\n  return rtl ? a <= b : a >= b;\n}\nfunction _stopPropagation(ev) {\n  ev.stopPropagation();\n}","map":{"version":3,"sources":["components/DetailsList/DetailsHeader.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport {\r\n  initializeComponentRef,\r\n  EventGroup,\r\n  IDisposable,\r\n  css,\r\n  getRTL,\r\n  getId,\r\n  KeyCodes,\r\n  classNamesFunction,\r\n} from '../../Utilities';\r\nimport {\r\n  IColumn,\r\n  IDetailsHeaderBaseProps,\r\n  IColumnDragDropDetails,\r\n  ColumnDragEndLocation,\r\n  CheckboxVisibility,\r\n} from './DetailsList.types';\r\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { Icon, FontIcon } from '../../Icon';\r\nimport { Layer } from '../../Layer';\r\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\r\nimport { CollapseAllVisibility } from '../../GroupedList';\r\nimport { DetailsRowCheck } from './DetailsRowCheck';\r\nimport { ITooltipHostProps } from '../../Tooltip';\r\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\r\nimport { IDragDropOptions, DragDropHelper } from '../../utilities/dragdrop/index';\r\nimport { DetailsColumn, IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\r\nimport {\r\n  SelectAllVisibility,\r\n  IDropHintDetails,\r\n  IColumnReorderHeaderProps,\r\n  IDetailsHeaderState,\r\n} from './DetailsHeader.types';\r\nimport { IDetailsHeaderStyleProps, IDetailsHeaderStyles, IDetailsHeader } from './DetailsHeader.types';\r\n\r\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\r\n\r\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\r\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\r\n\r\nconst NO_COLUMNS: IColumn[] = [];\r\n\r\nexport class DetailsHeaderBase extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\r\n  implements IDetailsHeader {\r\n  public static defaultProps = {\r\n    selectAllVisibility: SelectAllVisibility.visible,\r\n    collapseAllVisibility: CollapseAllVisibility.visible,\r\n    useFastIcons: true,\r\n  };\r\n\r\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\r\n  private _rootElement = React.createRef<HTMLElement>();\r\n  private _events: EventGroup;\r\n  private _rootComponent = React.createRef<IFocusZone>();\r\n  private _id: string;\r\n  private _draggedColumnIndex = -1;\r\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\r\n  private _dragDropHelper: DragDropHelper;\r\n  private _currentDropHintIndex: number;\r\n  private _subscriptionObject: IDisposable;\r\n  private _onDropIndexInfo: {\r\n    sourceIndex: number;\r\n    targetIndex: number;\r\n  };\r\n\r\n  constructor(props: IDetailsHeaderBaseProps) {\r\n    super(props);\r\n\r\n    initializeComponentRef(this);\r\n    this._events = new EventGroup(this);\r\n\r\n    this.state = {\r\n      columnResizeDetails: undefined,\r\n      isAllCollapsed: this.props.isAllCollapsed,\r\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\r\n    };\r\n\r\n    this._onDropIndexInfo = {\r\n      sourceIndex: -1,\r\n      targetIndex: -1,\r\n    };\r\n    this._id = getId('header');\r\n    this._currentDropHintIndex = -1;\r\n\r\n    // The drag drop handler won't do any work until subscribe() is called,\r\n    // so always set it up for convenience\r\n    this._dragDropHelper = new DragDropHelper({\r\n      selection: {\r\n        getSelection: () => {\r\n          return;\r\n        },\r\n      } as ISelection,\r\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\r\n    });\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    const { selection } = this.props;\r\n\r\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\r\n\r\n    // this._rootElement.current will be null in tests using react-test-renderer\r\n    if (this._rootElement.current) {\r\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\r\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\r\n\r\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\r\n\r\n      if (this._getColumnReorderProps()) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement.current,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\r\n    if (this._getColumnReorderProps()) {\r\n      if (!this._subscriptionObject && this._rootElement.current) {\r\n        this._subscriptionObject = this._dragDropHelper.subscribe(\r\n          this._rootElement.current,\r\n          this._events,\r\n          this._getHeaderDragDropOptions(),\r\n        );\r\n      }\r\n    } else if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\r\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\r\n        this._onDropIndexInfo = {\r\n          sourceIndex: -1,\r\n          targetIndex: -1,\r\n        };\r\n      }\r\n    }\r\n\r\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\r\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    if (this._subscriptionObject) {\r\n      this._subscriptionObject.dispose();\r\n      delete this._subscriptionObject;\r\n    }\r\n\r\n    this._dragDropHelper.dispose();\r\n\r\n    this._events.dispose();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      columns = NO_COLUMNS,\r\n      ariaLabel,\r\n      ariaLabelForToggleAllGroupsButton,\r\n      ariaLabelForSelectAllCheckbox,\r\n      selectAllVisibility,\r\n      ariaLabelForSelectionColumn,\r\n      indentWidth,\r\n      onColumnClick,\r\n      onColumnContextMenu,\r\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\r\n      styles,\r\n      selectionMode,\r\n      theme,\r\n      onRenderDetailsCheckbox,\r\n      groupNestingDepth,\r\n      useFastIcons,\r\n      checkboxVisibility,\r\n      className,\r\n    } = this.props;\r\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\r\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\r\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\r\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\r\n\r\n    const columnReorderProps = this._getColumnReorderProps();\r\n    const frozenColumnCountFromStart =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\r\n        ? columnReorderProps.frozenColumnCountFromStart\r\n        : 0;\r\n    const frozenColumnCountFromEnd =\r\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\r\n        ? columnReorderProps.frozenColumnCountFromEnd\r\n        : 0;\r\n\r\n    this._classNames = getClassNames(styles, {\r\n      theme: theme!,\r\n      isAllSelected,\r\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\r\n      isResizingColumn: !!columnResizeDetails && isSizing,\r\n      isSizing,\r\n      isAllCollapsed,\r\n      isCheckboxHidden,\r\n      className,\r\n    });\r\n\r\n    const classNames = this._classNames;\r\n    const IconComponent = useFastIcons ? FontIcon : Icon;\r\n\r\n    const isRTL = getRTL(theme);\r\n    return (\r\n      <FocusZone\r\n        role=\"row\"\r\n        aria-label={ariaLabel}\r\n        className={classNames.root}\r\n        componentRef={this._rootComponent}\r\n        elementRef={this._rootElement}\r\n        onMouseMove={this._onRootMouseMove}\r\n        data-automationid=\"DetailsHeader\"\r\n        direction={FocusZoneDirection.horizontal}\r\n      >\r\n        {showCheckbox\r\n          ? [\r\n              <div\r\n                key=\"__checkbox\"\r\n                className={classNames.cellIsCheck}\r\n                aria-labelledby={`${this._id}-check`}\r\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\r\n                aria-colindex={1}\r\n                role={'columnheader'}\r\n              >\r\n                {onRenderColumnHeaderTooltip(\r\n                  {\r\n                    hostClassName: classNames.checkTooltip,\r\n                    id: `${this._id}-checkTooltip`,\r\n                    setAriaDescribedBy: false,\r\n                    content: ariaLabelForSelectAllCheckbox,\r\n                    children: (\r\n                      <DetailsRowCheck\r\n                        id={`${this._id}-check`}\r\n                        aria-label={\r\n                          selectionMode === SelectionMode.multiple\r\n                            ? ariaLabelForSelectAllCheckbox\r\n                            : ariaLabelForSelectionColumn\r\n                        }\r\n                        aria-describedby={\r\n                          !isCheckboxHidden\r\n                            ? ariaLabelForSelectAllCheckbox && !this.props.onRenderColumnHeaderTooltip\r\n                              ? `${this._id}-checkTooltip`\r\n                              : undefined\r\n                            : ariaLabelForSelectionColumn && !this.props.onRenderColumnHeaderTooltip\r\n                            ? `${this._id}-checkTooltip`\r\n                            : undefined\r\n                        }\r\n                        data-is-focusable={!isCheckboxHidden || undefined}\r\n                        isHeader={true}\r\n                        selected={isAllSelected}\r\n                        anySelected={false}\r\n                        canSelect={!isCheckboxHidden}\r\n                        className={classNames.check}\r\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\r\n                        useFastIcons={useFastIcons}\r\n                        isVisible={isCheckboxAlwaysVisible}\r\n                      />\r\n                    ),\r\n                  },\r\n                  this._onRenderColumnHeaderTooltip,\r\n                )}\r\n              </div>,\r\n              !this.props.onRenderColumnHeaderTooltip ? (\r\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectAllCheckbox}\r\n                  </label>\r\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\r\n                  <label\r\n                    key=\"__checkboxLabel\"\r\n                    id={`${this._id}-checkTooltip`}\r\n                    className={classNames.accessibleLabel}\r\n                    aria-hidden={true}\r\n                  >\r\n                    {ariaLabelForSelectionColumn}\r\n                  </label>\r\n                ) : null\r\n              ) : null,\r\n            ]\r\n          : null}\r\n        {groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? (\r\n          <div\r\n            className={classNames.cellIsGroupExpander}\r\n            onClick={this._onToggleCollapseAll}\r\n            data-is-focusable={true}\r\n            aria-label={ariaLabelForToggleAllGroupsButton}\r\n            aria-expanded={!isAllCollapsed}\r\n            role=\"columnheader\"\r\n          >\r\n            <IconComponent\r\n              className={classNames.collapseButton}\r\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\r\n        {columns.map((column: IColumn, columnIndex: number) => {\r\n          const _isDraggable = columnReorderProps\r\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\r\n            : false;\r\n          return [\r\n            columnReorderProps &&\r\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\r\n              this._renderDropHint(columnIndex),\r\n            <DetailsColumn\r\n              column={column}\r\n              styles={column.styles}\r\n              key={column.key}\r\n              columnIndex={(showCheckbox ? 2 : 1) + columnIndex}\r\n              parentId={this._id}\r\n              isDraggable={_isDraggable}\r\n              updateDragInfo={this._updateDragInfo}\r\n              dragDropHelper={this._dragDropHelper}\r\n              onColumnClick={onColumnClick}\r\n              onColumnContextMenu={onColumnContextMenu}\r\n              // Do not render tooltips by default, but allow for override via props.\r\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\r\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\r\n              cellStyleProps={this.props.cellStyleProps}\r\n              useFastIcons={useFastIcons}\r\n            />,\r\n            this._renderColumnDivider(columnIndex),\r\n          ];\r\n        })}\r\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\r\n        {isSizing && (\r\n          <Layer>\r\n            <div\r\n              className={classNames.sizingOverlay}\r\n              onMouseMove={this._onSizerMouseMove}\r\n              onMouseUp={this._onSizerMouseUp}\r\n            />\r\n          </Layer>\r\n        )}\r\n      </FocusZone>\r\n    );\r\n  }\r\n\r\n  /** Set focus to the active thing in the focus area. */\r\n  public focus(): boolean {\r\n    return !!this._rootComponent.current?.focus();\r\n  }\r\n\r\n  /**\r\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\r\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\r\n   * (because drag/drop handling will only be set up if reorder props are given).\r\n   */\r\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\r\n    const { columnReorderOptions, columnReorderProps } = this.props;\r\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\r\n  }\r\n\r\n  private _getHeaderDragDropOptions(): IDragDropOptions {\r\n    const options = {\r\n      selectionIndex: 1,\r\n      context: { data: this, index: 0 },\r\n      canDrag: () => false,\r\n      canDrop: () => true,\r\n      onDragStart: () => undefined,\r\n      updateDropState: this._updateDroppingState,\r\n      onDrop: this._onDrop,\r\n      onDragEnd: () => undefined,\r\n      onDragOver: this._onDragOver,\r\n    };\r\n    return options;\r\n  }\r\n\r\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\r\n      this._resetDropHints();\r\n    }\r\n  };\r\n\r\n  private _isValidCurrentDropHintIndex() {\r\n    return this._currentDropHintIndex >= 0;\r\n  }\r\n\r\n  private _onDragOver = (item: any, event: DragEvent): void => {\r\n    if (this._draggedColumnIndex >= 0) {\r\n      event.stopPropagation();\r\n      this._computeDropHintToBeShown(event.clientX);\r\n    }\r\n  };\r\n\r\n  private _onDrop = (item?: any, event?: DragEvent): void => {\r\n    // Safe to assume this is defined since we're handling a drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n\r\n    // Target index will not get changed if draggeditem is after target item.\r\n    if (this._draggedColumnIndex >= 0 && event) {\r\n      const targetIndex =\r\n        this._draggedColumnIndex > this._currentDropHintIndex\r\n          ? this._currentDropHintIndex\r\n          : this._currentDropHintIndex - 1;\r\n      const isValidDrop = this._isValidCurrentDropHintIndex();\r\n      event.stopPropagation();\r\n      if (isValidDrop) {\r\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\r\n        this._onDropIndexInfo.targetIndex = targetIndex;\r\n\r\n        if (columnReorderProps.onColumnDrop) {\r\n          const dragDropDetails: IColumnDragDropDetails = {\r\n            draggedIndex: this._draggedColumnIndex,\r\n            targetIndex: targetIndex,\r\n          };\r\n          columnReorderProps.onColumnDrop(dragDropDetails);\r\n          /* eslint-disable deprecation/deprecation */\r\n        } else if (columnReorderProps.handleColumnReorder) {\r\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\r\n          /* eslint-enable deprecation/deprecation */\r\n        }\r\n      }\r\n    }\r\n\r\n    this._resetDropHints();\r\n    this._dropHintDetails = {};\r\n    this._draggedColumnIndex = -1;\r\n  };\r\n\r\n  /**\r\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\r\n   */\r\n  private _isCheckboxColumnHidden(): boolean {\r\n    const { selectionMode, checkboxVisibility } = this.props;\r\n\r\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\r\n  }\r\n\r\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\r\n    // Safe to assume this is defined since we're handling a drag event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    const itemIndex = props.itemIndex;\r\n    if (itemIndex >= 0) {\r\n      // Column index is set based on the checkbox\r\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\r\n      this._getDropHintPositions();\r\n      if (columnReorderProps.onColumnDragStart) {\r\n        columnReorderProps.onColumnDragStart(true);\r\n      }\r\n    } else if (event && this._draggedColumnIndex >= 0) {\r\n      this._resetDropHints();\r\n      this._draggedColumnIndex = -1;\r\n      this._dropHintDetails = {};\r\n      if (columnReorderProps.onColumnDragEnd) {\r\n        const columnDragEndLocation = this._isEventOnHeader(event);\r\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\r\n      }\r\n    }\r\n  };\r\n\r\n  private _resetDropHints(): void {\r\n    if (this._currentDropHintIndex >= 0) {\r\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\r\n      this._currentDropHintIndex = -1;\r\n    }\r\n  }\r\n\r\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\r\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\r\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\r\n  }\r\n\r\n  private _getDropHintPositions = (): void => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    // Safe to assume this is defined since we're handling a drag/drop event\r\n    const columnReorderProps = this._getColumnReorderProps()!;\r\n    let prevX = 0;\r\n    let prevMid = 0;\r\n    let prevRef: HTMLElement;\r\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\r\n      if (this._rootElement.current) {\r\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\r\n        if (dropHintElement) {\r\n          if (i === frozenColumnCountFromStart) {\r\n            prevX = dropHintElement.offsetLeft;\r\n            prevMid = dropHintElement.offsetLeft;\r\n            prevRef = dropHintElement;\r\n          } else {\r\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\r\n            this._dropHintDetails[i - 1] = {\r\n              originX: prevX,\r\n              startX: prevMid!,\r\n              endX: newMid,\r\n              dropHintElementRef: prevRef!,\r\n            };\r\n            prevMid = newMid;\r\n            prevRef = dropHintElement;\r\n            prevX = dropHintElement.offsetLeft;\r\n            if (i === columns.length - frozenColumnCountFromEnd) {\r\n              this._dropHintDetails[i] = {\r\n                originX: prevX,\r\n                startX: prevMid!,\r\n                endX: dropHintElement.offsetLeft,\r\n                dropHintElementRef: prevRef,\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\r\n   */\r\n  private _computeDropHintToBeShown = (clientX: number): void => {\r\n    const isRtl = getRTL(this.props.theme);\r\n    if (this._rootElement.current) {\r\n      const clientRect = this._rootElement.current.getBoundingClientRect();\r\n      const headerOriginX = clientRect.left;\r\n      const eventXRelativePosition = clientX - headerOriginX;\r\n      const currentDropHintIndex = this._currentDropHintIndex;\r\n      if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex!].startX,\r\n            this._dropHintDetails[currentDropHintIndex!].endX,\r\n          )\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n      const { columns = NO_COLUMNS } = this.props;\r\n      // Safe to assume this is defined since we're handling a drag/drop event\r\n      const columnReorderProps = this._getColumnReorderProps()!;\r\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\r\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\r\n\r\n      const currentIndex: number = frozenColumnCountFromStart;\r\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\r\n      let indexToUpdate = -1;\r\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\r\n        indexToUpdate = currentIndex;\r\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\r\n        indexToUpdate = lastValidColumn;\r\n      } else if (this._isValidCurrentDropHintIndex()) {\r\n        if (\r\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! + 1;\r\n        } else if (\r\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\r\n          _liesBetween(\r\n            isRtl,\r\n            eventXRelativePosition,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\r\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\r\n          )\r\n        ) {\r\n          indexToUpdate = currentDropHintIndex! - 1;\r\n        }\r\n      }\r\n      if (indexToUpdate === -1) {\r\n        let startIndex = frozenColumnCountFromStart;\r\n        let endIndex = lastValidColumn;\r\n        while (startIndex < endIndex) {\r\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\r\n          if (\r\n            _liesBetween(\r\n              isRtl,\r\n              eventXRelativePosition,\r\n              this._dropHintDetails[middleIndex].startX,\r\n              this._dropHintDetails[middleIndex].endX,\r\n            )\r\n          ) {\r\n            indexToUpdate = middleIndex;\r\n            break;\r\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            endIndex = middleIndex;\r\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\r\n            startIndex = middleIndex;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\r\n        if (this._isValidCurrentDropHintIndex()) {\r\n          this._resetDropHints();\r\n        }\r\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\r\n        this._resetDropHints();\r\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\r\n        this._currentDropHintIndex = indexToUpdate;\r\n      }\r\n    }\r\n  };\r\n\r\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\r\n    if (this._rootElement.current) {\r\n      const clientRect = this._rootElement.current.getBoundingClientRect();\r\n      if (\r\n        event.clientX > clientRect.left &&\r\n        event.clientX < clientRect.right &&\r\n        event.clientY > clientRect.top &&\r\n        event.clientY < clientRect.bottom\r\n      ) {\r\n        return ColumnDragEndLocation.header;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { columnResizeDetails } = this.state;\r\n    const classNames = this._classNames;\r\n\r\n    return column.isResizable ? (\r\n      <div\r\n        key={`${column.key}_sizer`}\r\n        aria-hidden={true}\r\n        role=\"button\"\r\n        data-is-focusable={false}\r\n        onClick={_stopPropagation}\r\n        data-sizer-index={columnIndex}\r\n        onBlur={this._onSizerBlur}\r\n        className={css(\r\n          classNames.cellSizer,\r\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\r\n          {\r\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\r\n          },\r\n        )}\r\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\r\n      />\r\n    ) : null;\r\n  };\r\n\r\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\r\n    const { columns = NO_COLUMNS } = this.props;\r\n    const column = columns[columnIndex];\r\n    const { onRenderDivider } = column;\r\n    return onRenderDivider\r\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\r\n      : this._renderColumnSizer({ column, columnIndex });\r\n  }\r\n\r\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\r\n    const classNames = this._classNames;\r\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\r\n    return (\r\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\r\n        <div\r\n          role=\"presentation\"\r\n          key={`dropHintCircleKey`}\r\n          className={classNames.dropHintCaretStyle}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          aria-hidden={true}\r\n        >\r\n          <IconComponent iconName={'CircleShapeSolid'} />\r\n        </div>\r\n        <div\r\n          key={`dropHintLineKey`}\r\n          aria-hidden={true}\r\n          data-is-focusable={false}\r\n          data-sizer-index={dropHintIndex}\r\n          className={classNames.dropHintLineStyle}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\r\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\r\n  };\r\n\r\n  /**\r\n   * double click on the column sizer will auto ajust column width\r\n   * to fit the longest content among current rendered rows.\r\n   *\r\n   * @param columnIndex - index of the column user double clicked\r\n   * @param ev - mouse double click event\r\n   */\r\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\r\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\r\n    if (onColumnAutoResized) {\r\n      onColumnAutoResized(columns[columnIndex], columnIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the select all toggle is clicked.\r\n   */\r\n  private _onSelectAllClicked = (): void => {\r\n    const { selection } = this.props;\r\n\r\n    if (selection) {\r\n      selection.toggleAllSelected();\r\n    }\r\n  };\r\n\r\n  private _onRootMouseDown = (ev: MouseEvent): void => {\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n    const columnIndex = Number(columnIndexAttr);\r\n    const { columns = NO_COLUMNS } = this.props;\r\n\r\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\r\n      // Ignore anything except the primary button.\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      columnResizeDetails: {\r\n        columnIndex: columnIndex,\r\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n        originX: ev.clientX,\r\n      },\r\n    });\r\n\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  };\r\n\r\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n\r\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\r\n      this.setState({ isSizing: true });\r\n    }\r\n  };\r\n\r\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\r\n    const { columnResizeDetails, isSizing } = this.state;\r\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\r\n\r\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\r\n\r\n    if (!columnIndexAttr || isSizing) {\r\n      return;\r\n    }\r\n\r\n    const columnIndex = Number(columnIndexAttr);\r\n\r\n    if (!columnResizeDetails) {\r\n      // eslint-disable-next-line deprecation/deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            columnIndex: columnIndex,\r\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\r\n          },\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    } else {\r\n      let increment: number | undefined;\r\n\r\n      // eslint-disable-next-line deprecation/deprecation\r\n      if (ev.which === KeyCodes.enter) {\r\n        this.setState({\r\n          columnResizeDetails: undefined,\r\n        });\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n        // eslint-disable-next-line deprecation/deprecation\r\n      } else if (ev.which === KeyCodes.left) {\r\n        increment = getRTL(this.props.theme) ? 1 : -1;\r\n        // eslint-disable-next-line deprecation/deprecation\r\n      } else if (ev.which === KeyCodes.right) {\r\n        increment = getRTL(this.props.theme) ? -1 : 1;\r\n      }\r\n\r\n      if (increment) {\r\n        if (!ev.shiftKey) {\r\n          increment *= 10;\r\n        }\r\n\r\n        this.setState({\r\n          columnResizeDetails: {\r\n            ...columnResizeDetails,\r\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\r\n          },\r\n        });\r\n\r\n        if (onColumnResized) {\r\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\r\n        }\r\n\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse move event handler in the header\r\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\r\n   *\r\n   * @param ev - mouse move event\r\n   */\r\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const {\r\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\r\n      // but firefox doesn't support it, so we set the default value when it is not defined.\r\n      buttons,\r\n    } = ev;\r\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\r\n      // cancel mouse down event and return early when the primary button is not pressed\r\n      this._onSizerMouseUp(ev);\r\n      return;\r\n    }\r\n\r\n    if (ev.clientX !== columnResizeDetails!.originX) {\r\n      if (onColumnIsSizingChanged) {\r\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\r\n      }\r\n    }\r\n\r\n    if (onColumnResized) {\r\n      let movement = ev.clientX - columnResizeDetails!.originX!;\r\n\r\n      if (getRTL(this.props.theme)) {\r\n        movement = -movement;\r\n      }\r\n\r\n      onColumnResized(\r\n        columns[columnResizeDetails!.columnIndex],\r\n        columnResizeDetails!.columnMinWidth + movement,\r\n        columnResizeDetails!.columnIndex,\r\n      );\r\n    }\r\n  };\r\n\r\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    if (columnResizeDetails) {\r\n      this.setState({\r\n        columnResizeDetails: undefined,\r\n        isSizing: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * mouse up event handler in the header\r\n   * clear the resize related state.\r\n   * This is to ensure we can catch double click event\r\n   *\r\n   * @param ev - mouse up event\r\n   */\r\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\r\n    const { columnResizeDetails } = this.state;\r\n\r\n    this.setState({\r\n      columnResizeDetails: undefined,\r\n      isSizing: false,\r\n    });\r\n\r\n    if (onColumnIsSizingChanged) {\r\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\r\n    }\r\n  };\r\n\r\n  private _onSelectionChanged(): void {\r\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\r\n\r\n    if (this.state.isAllSelected !== isAllSelected) {\r\n      this.setState({\r\n        isAllSelected: isAllSelected,\r\n      });\r\n    }\r\n  }\r\n\r\n  private _onToggleCollapseAll = (): void => {\r\n    const { onToggleCollapseAll } = this.props;\r\n    const newCollapsed = !this.state.isAllCollapsed;\r\n    this.setState({\r\n      isAllCollapsed: newCollapsed,\r\n    });\r\n    if (onToggleCollapseAll) {\r\n      onToggleCollapseAll(newCollapsed);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\r\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\r\n}\r\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a >= b : a <= b;\r\n}\r\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\r\n  return rtl ? a <= b : a >= b;\r\n}\r\n\r\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\r\n  ev.stopPropagation();\r\n}\r\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}