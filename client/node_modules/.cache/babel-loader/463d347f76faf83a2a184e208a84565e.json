{"ast":null,"code":"/*\n * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\nconst JsonLdError = require('./JsonLdError');\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = require('./types');\nconst {\n  isAbsolute: _isAbsoluteIri,\n  isRelative: _isRelativeIri,\n  prependBase,\n  parse: parseUrl\n} = require('./url');\nconst {\n  asArray: _asArray,\n  compareShortestLeast: _compareShortestLeast\n} = require('./util');\nconst INITIAL_CONTEXT_CACHE = new Map();\nconst INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;\nconst api = {};\nmodule.exports = api;\n\n/**\n * Processes a local context and returns a new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param options the context processing options.\n * @param propagate `true` if `false`, retains any previously defined term,\n *   which can be rolled back when the descending into a new node object.\n * @param overrideProtected `false` allows protected terms to be modified.\n *\n * @return a Promise that resolves to the new active context.\n */\napi.process = async ({\n  activeCtx,\n  localCtx,\n  options,\n  propagate = true,\n  overrideProtected = false\n}) => {\n  // normalize local context to an array of @context objects\n  if (_isObject(localCtx) && '@context' in localCtx && _isArray(localCtx['@context'])) {\n    localCtx = localCtx['@context'];\n  }\n  const ctxs = _asArray(localCtx);\n\n  // no contexts in array, return current active context w/o changes\n  if (ctxs.length === 0) {\n    return activeCtx;\n  }\n\n  // resolve contexts\n  const resolved = await options.contextResolver.resolve({\n    context: localCtx,\n    documentLoader: options.documentLoader,\n    base: options.base\n  });\n\n  // override propagate if first resolved context has `@propagate`\n  if (_isObject(resolved[0].document) && typeof resolved[0].document['@propagate'] === 'boolean') {\n    // retrieve early, error checking done later\n    propagate = resolved[0].document['@propagate'];\n  }\n\n  // process each context in order, update active context\n  // on each iteration to ensure proper caching\n  let rval = activeCtx;\n\n  // track the previous context\n  // if not propagating, make sure rval has a previous context\n  if (!propagate && !rval.previousContext) {\n    // clone `rval` context before updating\n    rval = rval.clone();\n    rval.previousContext = activeCtx;\n  }\n  for (const resolvedContext of resolved) {\n    let {\n      document: ctx\n    } = resolvedContext;\n\n    // update active context to one computed from last iteration\n    activeCtx = rval;\n\n    // reset to initial context\n    if (ctx === null) {\n      // We can't nullify if there are protected terms and we're\n      // not allowing overrides (e.g. processing a property term scoped context)\n      if (!overrideProtected && Object.keys(activeCtx.protected).length !== 0) {\n        const protectedMode = options && options.protectedMode || 'error';\n        if (protectedMode === 'error') {\n          throw new JsonLdError('Tried to nullify a context with protected terms outside of ' + 'a term definition.', 'jsonld.SyntaxError', {\n            code: 'invalid context nullification'\n          });\n        } else if (protectedMode === 'warn') {\n          // FIXME: remove logging and use a handler\n          console.warn('WARNING: invalid context nullification');\n          const oldActiveCtx = activeCtx;\n          // copy all protected term definitions to fresh initial context\n          rval = activeCtx = api.getInitialContext(options).clone();\n          for (const [term, _protected] of Object.entries(oldActiveCtx.protected)) {\n            if (_protected) {\n              activeCtx.mappings[term] = util.clone(oldActiveCtx.mappings[term]);\n            }\n          }\n          activeCtx.protected = util.clone(oldActiveCtx.protected);\n\n          // cache processed result\n          resolvedContext.setProcessed(oldActiveCtx, rval);\n          continue;\n        }\n        throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {\n          code: 'invalid protected mode',\n          context: localCtx,\n          protectedMode\n        });\n      }\n      rval = activeCtx = api.getInitialContext(options).clone();\n      continue;\n    }\n\n    // get processed context from cache if available\n    const processed = resolvedContext.getProcessed(activeCtx);\n    if (processed) {\n      rval = activeCtx = processed;\n      continue;\n    }\n\n    // dereference @context key if present\n    if (_isObject(ctx) && '@context' in ctx) {\n      ctx = ctx['@context'];\n    }\n\n    // context must be an object by now, all URLs retrieved before this call\n    if (!_isObject(ctx)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {\n        code: 'invalid local context',\n        context: ctx\n      });\n    }\n\n    // TODO: there is likely a `previousContext` cloning optimization that\n    // could be applied here (no need to copy it under certain conditions)\n\n    // clone context before updating it\n    rval = rval.clone();\n\n    // define context mappings for keys in local context\n    const defined = new Map();\n\n    // handle @version\n    if ('@version' in ctx) {\n      if (ctx['@version'] !== 1.1) {\n        throw new JsonLdError('Unsupported JSON-LD version: ' + ctx['@version'], 'jsonld.UnsupportedVersion', {\n          code: 'invalid @version value',\n          context: ctx\n        });\n      }\n      if (activeCtx.processingMode && activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('@version: ' + ctx['@version'] + ' not compatible with ' + activeCtx.processingMode, 'jsonld.ProcessingModeConflict', {\n          code: 'processing mode conflict',\n          context: ctx\n        });\n      }\n      rval.processingMode = 'json-ld-1.1';\n      rval['@version'] = ctx['@version'];\n      defined.set('@version', true);\n    }\n\n    // if not set explicitly, set processingMode to \"json-ld-1.1\"\n    rval.processingMode = rval.processingMode || activeCtx.processingMode;\n\n    // handle @base\n    if ('@base' in ctx) {\n      let base = ctx['@base'];\n      if (base === null) {\n        // no action\n      } else if (_isAbsoluteIri(base)) {\n        base = parseUrl(base);\n      } else if (_isRelativeIri(base)) {\n        base = parseUrl(prependBase(rval['@base'].href, base));\n      } else {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@base\" in a ' + '@context must be an absolute IRI, a relative IRI, or null.', 'jsonld.SyntaxError', {\n          code: 'invalid base IRI',\n          context: ctx\n        });\n      }\n      rval['@base'] = base;\n      defined.set('@base', true);\n    }\n\n    // handle @vocab\n    if ('@vocab' in ctx) {\n      const value = ctx['@vocab'];\n      if (value === null) {\n        delete rval['@vocab'];\n      } else if (!_isString(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@vocab\" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {\n          code: 'invalid vocab mapping',\n          context: ctx\n        });\n      } else if (!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@vocab\" in a ' + '@context must be an absolute IRI.', 'jsonld.SyntaxError', {\n          code: 'invalid vocab mapping',\n          context: ctx\n        });\n      } else {\n        rval['@vocab'] = _expandIri(rval, value, {\n          vocab: true,\n          base: true\n        }, undefined, undefined, options);\n      }\n      defined.set('@vocab', true);\n    }\n\n    // handle @language\n    if ('@language' in ctx) {\n      const value = ctx['@language'];\n      if (value === null) {\n        delete rval['@language'];\n      } else if (!_isString(value)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@language\" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {\n          code: 'invalid default language',\n          context: ctx\n        });\n      } else {\n        rval['@language'] = value.toLowerCase();\n      }\n      defined.set('@language', true);\n    }\n\n    // handle @propagate\n    // note: we've already extracted it, here we just do error checking\n    if ('@propagate' in ctx) {\n      const value = ctx['@propagate'];\n      if (activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError('Invalid JSON-LD syntax; @propagate not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {\n          code: 'invalid context member',\n          context: ctx\n        });\n      }\n      if (typeof value !== 'boolean') {\n        throw new JsonLdError('Invalid JSON-LD syntax; @propagate value must be a boolean.', 'jsonld.SyntaxError', {\n          code: 'invalid @propagate value',\n          context: localCtx\n        });\n      }\n      defined.set('@propagate', true);\n    }\n\n    // handle @protected; determine whether this sub-context is declaring\n    // all its terms to be \"protected\" (exceptions can be made on a\n    // per-definition basis)\n    defined.set('@protected', ctx['@protected'] || false);\n\n    // process all other keys\n    for (const key in ctx) {\n      api.createTermDefinition({\n        activeCtx: rval,\n        localCtx: ctx,\n        term: key,\n        defined,\n        options,\n        overrideProtected\n      });\n    }\n\n    // cache processed result\n    resolvedContext.setProcessed(activeCtx, rval);\n  }\n  return rval;\n};\n\n/**\n * Creates a term definition during context processing.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context being processed.\n * @param term the term in the local context to define the mapping for.\n * @param defined a map of defining/defined keys to detect cycles and prevent\n *          double definitions.\n * @param {Object} [options] - creation options.\n * @param {string} [options.protectedMode=\"error\"] - \"error\" to throw error\n *   on `@protected` constraint violation, \"warn\" to allow violations and\n *   signal a warning.\n * @param overrideProtected `false` allows protected terms to be modified.\n */\napi.createTermDefinition = ({\n  activeCtx,\n  localCtx,\n  term,\n  defined,\n  options,\n  overrideProtected = false\n}) => {\n  if (defined.has(term)) {\n    // term already defined\n    if (defined.get(term)) {\n      return;\n    }\n    // cycle detected\n    throw new JsonLdError('Cyclical context definition detected.', 'jsonld.CyclicalContext', {\n      code: 'cyclic IRI mapping',\n      context: localCtx,\n      term\n    });\n  }\n\n  // now defining term\n  defined.set(term, false);\n\n  // get context term value\n  let value;\n  if (localCtx.hasOwnProperty(term)) {\n    value = localCtx[term];\n  }\n  if (term === '@type' && _isObject(value) && value['@container'] === '@set' && api.processingMode(activeCtx, 1.1)) {\n    const validKeys = ['@container', '@id', '@protected'];\n    if (Object.keys(value).some(k => !validKeys.includes(k))) {\n      throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {\n        code: 'keyword redefinition',\n        context: localCtx,\n        term\n      });\n    }\n  } else if (api.isKeyword(term)) {\n    throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {\n      code: 'keyword redefinition',\n      context: localCtx,\n      term\n    });\n  } else if (term === '') {\n    throw new JsonLdError('Invalid JSON-LD syntax; a term cannot be an empty string.', 'jsonld.SyntaxError', {\n      code: 'invalid term definition',\n      context: localCtx\n    });\n  }\n\n  // keep reference to previous mapping for potential `@protected` check\n  const previousMapping = activeCtx.mappings.get(term);\n\n  // remove old mapping\n  if (activeCtx.mappings.has(term)) {\n    activeCtx.mappings.delete(term);\n  }\n\n  // clear context entry\n  if (value === null || _isObject(value) && value['@id'] === null) {\n    activeCtx.mappings.set(term, null);\n    defined.set(term, true);\n    return;\n  }\n\n  // convert short-hand value to object w/@id\n  let simpleTerm = false;\n  if (_isString(value)) {\n    simpleTerm = true;\n    value = {\n      '@id': value\n    };\n  }\n  if (!_isObject(value)) {\n    throw new JsonLdError('Invalid JSON-LD syntax; @context term values must be ' + 'strings or objects.', 'jsonld.SyntaxError', {\n      code: 'invalid term definition',\n      context: localCtx\n    });\n  }\n\n  // create new mapping\n  const mapping = {};\n  activeCtx.mappings.set(term, mapping);\n  mapping.reverse = false;\n\n  // make sure term definition only has expected keywords\n  const validKeys = ['@container', '@id', '@language', '@reverse', '@type'];\n\n  // JSON-LD 1.1 support\n  if (api.processingMode(activeCtx, 1.1)) {\n    validKeys.push('@context', '@index', '@nest', '@prefix', '@protected');\n  }\n  for (const kw in value) {\n    if (!validKeys.includes(kw)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a term definition must not contain ' + kw, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n  }\n\n  // always compute whether term has a colon as an optimization for\n  // _compactIri\n  const colon = term.indexOf(':');\n  mapping._termHasColon = colon > 0;\n  if ('@reverse' in value) {\n    if ('@id' in value) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @id.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n    if ('@nest' in value) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @nest.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n    const reverse = value['@reverse'];\n    if (!_isString(reverse)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be a string.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n\n    // expand and add @id mapping\n    const id = _expandIri(activeCtx, reverse, {\n      vocab: true,\n      base: false\n    }, localCtx, defined, options);\n    if (!_isAbsoluteIri(id)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be an ' + 'absolute IRI or a blank node identifier.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n    mapping['@id'] = id;\n    mapping.reverse = true;\n  } else if ('@id' in value) {\n    let id = value['@id'];\n    if (!_isString(id)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an array ' + 'of strings or a string.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n    if (id !== term) {\n      // expand and add @id mapping\n      id = _expandIri(activeCtx, id, {\n        vocab: true,\n        base: false\n      }, localCtx, defined, options);\n      if (!_isAbsoluteIri(id) && !api.isKeyword(id)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an ' + 'absolute IRI, a blank node identifier, or a keyword.', 'jsonld.SyntaxError', {\n          code: 'invalid IRI mapping',\n          context: localCtx\n        });\n      }\n      mapping['@id'] = id;\n      // indicate if this term may be used as a compact IRI prefix\n      mapping._prefix = simpleTerm && !mapping._termHasColon && id.match(/[:\\/\\?#\\[\\]@]$/);\n    }\n  }\n  if (!('@id' in mapping)) {\n    // see if the term has a prefix\n    if (mapping._termHasColon) {\n      const prefix = term.substr(0, colon);\n      if (localCtx.hasOwnProperty(prefix)) {\n        // define parent prefix\n        api.createTermDefinition({\n          activeCtx,\n          localCtx,\n          term: prefix,\n          defined,\n          options\n        });\n      }\n      if (activeCtx.mappings.has(prefix)) {\n        // set @id based on prefix parent\n        const suffix = term.substr(colon + 1);\n        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;\n      } else {\n        // term is an absolute IRI\n        mapping['@id'] = term;\n      }\n    } else if (term == '@type') {\n      // Special case, were we've previously determined that container is @set\n      mapping['@id'] = term;\n    } else {\n      // non-IRIs *must* define @ids if @vocab is not available\n      if (!('@vocab' in activeCtx)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; @context terms must define an @id.', 'jsonld.SyntaxError', {\n          code: 'invalid IRI mapping',\n          context: localCtx,\n          term\n        });\n      }\n      // prepend vocab to term\n      mapping['@id'] = activeCtx['@vocab'] + term;\n    }\n  }\n\n  // Handle term protection\n  if (value['@protected'] === true || defined.get('@protected') === true && value['@protected'] !== false) {\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n  }\n\n  // IRI mapping now defined\n  defined.set(term, true);\n  if ('@type' in value) {\n    let type = value['@type'];\n    if (!_isString(type)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be a string.', 'jsonld.SyntaxError', {\n        code: 'invalid type mapping',\n        context: localCtx\n      });\n    }\n    if (type === '@json' || type === '@none') {\n      if (api.processingMode(activeCtx, 1.0)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must not be ' + `\"${type}\" in JSON-LD 1.0 mode.`, 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n    } else if (type !== '@id' && type !== '@vocab') {\n      // expand @type to full IRI\n      type = _expandIri(activeCtx, type, {\n        vocab: true,\n        base: false\n      }, localCtx, defined, options);\n      if (!_isAbsoluteIri(type)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an ' + 'absolute IRI.', 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n      if (type.indexOf('_:') === 0) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an IRI, ' + 'not a blank node identifier.', 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n    }\n\n    // add @type to mapping\n    mapping['@type'] = type;\n  }\n  if ('@container' in value) {\n    // normalize container to an array form\n    const container = _isString(value['@container']) ? [value['@container']] : value['@container'] || [];\n    const validContainers = ['@list', '@set', '@index', '@language'];\n    let isValid = true;\n    const hasSet = container.includes('@set');\n\n    // JSON-LD 1.1 support\n    if (api.processingMode(activeCtx, 1.1)) {\n      validContainers.push('@graph', '@id', '@type');\n\n      // check container length\n      if (container.includes('@list')) {\n        if (container.length !== 1) {\n          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @list must ' + 'have no other values', 'jsonld.SyntaxError', {\n            code: 'invalid container mapping',\n            context: localCtx\n          });\n        }\n      } else if (container.includes('@graph')) {\n        if (container.some(key => key !== '@graph' && key !== '@id' && key !== '@index' && key !== '@set')) {\n          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @graph must ' + 'have no other values other than @id, @index, and @set', 'jsonld.SyntaxError', {\n            code: 'invalid container mapping',\n            context: localCtx\n          });\n        }\n      } else {\n        // otherwise, container may also include @set\n        isValid &= container.length <= (hasSet ? 2 : 1);\n      }\n      if (container.includes('@type')) {\n        // If mapping does not have an @type,\n        // set it to @id\n        mapping['@type'] = mapping['@type'] || '@id';\n\n        // type mapping must be either @id or @vocab\n        if (!['@id', '@vocab'].includes(mapping['@type'])) {\n          throw new JsonLdError('Invalid JSON-LD syntax; container: @type requires @type to be ' + '@id or @vocab.', 'jsonld.SyntaxError', {\n            code: 'invalid type mapping',\n            context: localCtx\n          });\n        }\n      }\n    } else {\n      // in JSON-LD 1.0, container must not be an array (it must be a string,\n      // which is one of the validContainers)\n      isValid &= !_isArray(value['@container']);\n\n      // check container length\n      isValid &= container.length <= 1;\n    }\n\n    // check against valid containers\n    isValid &= container.every(c => validContainers.includes(c));\n\n    // @set not allowed with @list\n    isValid &= !(hasSet && container.includes('@list'));\n    if (!isValid) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value must be ' + 'one of the following: ' + validContainers.join(', '), 'jsonld.SyntaxError', {\n        code: 'invalid container mapping',\n        context: localCtx\n      });\n    }\n    if (mapping.reverse && !container.every(c => ['@index', '@set'].includes(c))) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value for a @reverse ' + 'type definition must be @index or @set.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n\n    // add @container to mapping\n    mapping['@container'] = container;\n  }\n\n  // property indexing\n  if ('@index' in value) {\n    if (!('@container' in value) || !mapping['@container'].includes('@index')) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @index without @index in @container: ' + `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n    if (!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @index must expand to an IRI: ' + `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n    mapping['@index'] = value['@index'];\n  }\n\n  // scoped contexts\n  if ('@context' in value) {\n    mapping['@context'] = value['@context'];\n  }\n  if ('@language' in value && !('@type' in value)) {\n    let language = value['@language'];\n    if (language !== null && !_isString(language)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @language value must be ' + 'a string or null.', 'jsonld.SyntaxError', {\n        code: 'invalid language mapping',\n        context: localCtx\n      });\n    }\n\n    // add @language to mapping\n    if (language !== null) {\n      language = language.toLowerCase();\n    }\n    mapping['@language'] = language;\n  }\n\n  // term may be used as a prefix\n  if ('@prefix' in value) {\n    if (mapping._termHasColon) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @prefix used on a compact IRI term', 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n    if (typeof value['@prefix'] === 'boolean') {\n      mapping._prefix = value['@prefix'] === true;\n    } else {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context value for @prefix must be boolean', 'jsonld.SyntaxError', {\n        code: 'invalid @prefix value',\n        context: localCtx\n      });\n    }\n  }\n  if ('@nest' in value) {\n    const nest = value['@nest'];\n    if (!_isString(nest) || nest !== '@nest' && nest.indexOf('@') === 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @nest value must be ' + 'a string which is not a keyword other than @nest.', 'jsonld.SyntaxError', {\n        code: 'invalid @nest value',\n        context: localCtx\n      });\n    }\n    mapping['@nest'] = nest;\n  }\n\n  // disallow aliasing @context and @preserve\n  const id = mapping['@id'];\n  if (id === '@context' || id === '@preserve') {\n    throw new JsonLdError('Invalid JSON-LD syntax; @context and @preserve cannot be aliased.', 'jsonld.SyntaxError', {\n      code: 'invalid keyword alias',\n      context: localCtx\n    });\n  }\n\n  // Check for overriding protected terms\n  if (previousMapping && previousMapping.protected && !overrideProtected) {\n    // force new term to continue to be protected and see if the mappings would\n    // be equal\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n    if (!_deepCompare(previousMapping, mapping)) {\n      const protectedMode = options && options.protectedMode || 'error';\n      if (protectedMode === 'error') {\n        throw new JsonLdError('Invalid JSON-LD syntax; tried to redefine a protected term.', 'jsonld.SyntaxError', {\n          code: 'protected term redefinition',\n          context: localCtx,\n          term\n        });\n      } else if (protectedMode === 'warn') {\n        // FIXME: remove logging and use a handler\n        console.warn('WARNING: protected term redefinition', {\n          term\n        });\n        return;\n      }\n      throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {\n        code: 'invalid protected mode',\n        context: localCtx,\n        term,\n        protectedMode\n      });\n    }\n  }\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\napi.expandIri = (activeCtx, value, relativeTo, options) => {\n  return _expandIri(activeCtx, value, relativeTo, undefined, undefined, options);\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param localCtx the local context being processed (only given if called\n *          during context processing).\n * @param defined a map for tracking cycles in context definitions (only given\n *          if called during context processing).\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\nfunction _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {\n  // already expanded\n  if (value === null || !_isString(value) || api.isKeyword(value)) {\n    return value;\n  }\n\n  // define term dependency if not defined\n  if (localCtx && localCtx.hasOwnProperty(value) && defined.get(value) !== true) {\n    api.createTermDefinition({\n      activeCtx,\n      localCtx,\n      term: value,\n      defined,\n      options\n    });\n  }\n  relativeTo = relativeTo || {};\n  if (relativeTo.vocab) {\n    const mapping = activeCtx.mappings.get(value);\n\n    // value is explicitly ignored with a null mapping\n    if (mapping === null) {\n      return null;\n    }\n    if (mapping) {\n      // value is a term\n      return mapping['@id'];\n    }\n  }\n\n  // split value into prefix:suffix\n  const colon = value.indexOf(':');\n  if (colon > 0) {\n    const prefix = value.substr(0, colon);\n    const suffix = value.substr(colon + 1);\n\n    // do not expand blank nodes (prefix of '_') or already-absolute\n    // IRIs (suffix of '//')\n    if (prefix === '_' || suffix.indexOf('//') === 0) {\n      return value;\n    }\n\n    // prefix dependency not defined, define it\n    if (localCtx && localCtx.hasOwnProperty(prefix)) {\n      api.createTermDefinition({\n        activeCtx,\n        localCtx,\n        term: prefix,\n        defined,\n        options\n      });\n    }\n\n    // use mapping if prefix is defined\n    const mapping = activeCtx.mappings.get(prefix);\n    if (mapping && mapping._prefix) {\n      return mapping['@id'] + suffix;\n    }\n\n    // already absolute IRI\n    if (_isAbsoluteIri(value)) {\n      return value;\n    }\n  }\n\n  // prepend vocab\n  if (relativeTo.vocab && '@vocab' in activeCtx) {\n    return activeCtx['@vocab'] + value;\n  }\n\n  // prepend base\n  if (relativeTo.base) {\n    return prependBase(activeCtx['@base'], value);\n  }\n  return value;\n}\n\n/**\n * Gets the initial context.\n *\n * @param options the options to use:\n *          [base] the document base IRI.\n *\n * @return the initial context.\n */\napi.getInitialContext = options => {\n  const base = parseUrl(options.base || '');\n  const key = JSON.stringify({\n    base,\n    processingMode: options.processingMode\n  });\n  const cached = INITIAL_CONTEXT_CACHE.get(key);\n  if (cached) {\n    return cached;\n  }\n  const initialContext = {\n    '@base': base,\n    processingMode: options.processingMode,\n    mappings: new Map(),\n    inverse: null,\n    getInverse: _createInverseContext,\n    clone: _cloneActiveContext,\n    revertToPreviousContext: _revertToPreviousContext,\n    protected: {}\n  };\n  // TODO: consider using LRU cache instead\n  if (INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {\n    // clear whole cache -- assumes scenario where the cache fills means\n    // the cache isn't being used very efficiently anyway\n    INITIAL_CONTEXT_CACHE.clear();\n  }\n  INITIAL_CONTEXT_CACHE.set(key, initialContext);\n  return initialContext;\n\n  /**\n   * Generates an inverse context for use in the compaction algorithm, if\n   * not already generated for the given active context.\n   *\n   * @return the inverse context.\n   */\n  function _createInverseContext() {\n    const activeCtx = this;\n\n    // lazily create inverse\n    if (activeCtx.inverse) {\n      return activeCtx.inverse;\n    }\n    const inverse = activeCtx.inverse = {};\n\n    // variables for building fast CURIE map\n    const fastCurieMap = activeCtx.fastCurieMap = {};\n    const irisToTerms = {};\n\n    // handle default language\n    const defaultLanguage = activeCtx['@language'] || '@none';\n\n    // create term selections for each mapping in the context, ordered by\n    // shortest and then lexicographically least\n    const mappings = activeCtx.mappings;\n    const terms = [...mappings.keys()].sort(_compareShortestLeast);\n    for (const term of terms) {\n      const mapping = mappings.get(term);\n      if (mapping === null) {\n        continue;\n      }\n      let container = mapping['@container'] || '@none';\n      container = [].concat(container).sort().join('');\n\n      // iterate over every IRI in the mapping\n      const ids = _asArray(mapping['@id']);\n      for (const iri of ids) {\n        let entry = inverse[iri];\n        const isKeyword = api.isKeyword(iri);\n        if (!entry) {\n          // initialize entry\n          inverse[iri] = entry = {};\n          if (!isKeyword && !mapping._termHasColon) {\n            // init IRI to term map and fast CURIE prefixes\n            irisToTerms[iri] = [term];\n            const fastCurieEntry = {\n              iri,\n              terms: irisToTerms[iri]\n            };\n            if (iri[0] in fastCurieMap) {\n              fastCurieMap[iri[0]].push(fastCurieEntry);\n            } else {\n              fastCurieMap[iri[0]] = [fastCurieEntry];\n            }\n          }\n        } else if (!isKeyword && !mapping._termHasColon) {\n          // add IRI to term match\n          irisToTerms[iri].push(term);\n        }\n\n        // add new entry\n        if (!entry[container]) {\n          entry[container] = {\n            '@language': {},\n            '@type': {},\n            '@any': {}\n          };\n        }\n        entry = entry[container];\n        _addPreferredTerm(term, entry['@any'], '@none');\n        if (mapping.reverse) {\n          // term is preferred for values using @reverse\n          _addPreferredTerm(term, entry['@type'], '@reverse');\n        } else if (mapping['@type'] === '@none') {\n          _addPreferredTerm(term, entry['@any'], '@none');\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else if ('@type' in mapping) {\n          // term is preferred for values using specific type\n          _addPreferredTerm(term, entry['@type'], mapping['@type']);\n        } else if ('@language' in mapping) {\n          // term is preferred for values using specific language\n          const language = mapping['@language'] || '@null';\n          _addPreferredTerm(term, entry['@language'], language);\n        } else {\n          // term is preferred for values w/default language or no type and\n          // no language\n          // add an entry for the default language\n          _addPreferredTerm(term, entry['@language'], defaultLanguage);\n\n          // add entries for no type and no language\n          _addPreferredTerm(term, entry['@type'], '@none');\n          _addPreferredTerm(term, entry['@language'], '@none');\n        }\n      }\n    }\n\n    // build fast CURIE map\n    for (const key in fastCurieMap) {\n      _buildIriMap(fastCurieMap, key, 1);\n    }\n    return inverse;\n  }\n\n  /**\n   * Runs a recursive algorithm to build a lookup map for quickly finding\n   * potential CURIEs.\n   *\n   * @param iriMap the map to build.\n   * @param key the current key in the map to work on.\n   * @param idx the index into the IRI to compare.\n   */\n  function _buildIriMap(iriMap, key, idx) {\n    const entries = iriMap[key];\n    const next = iriMap[key] = {};\n    let iri;\n    let letter;\n    for (const entry of entries) {\n      iri = entry.iri;\n      if (idx >= iri.length) {\n        letter = '';\n      } else {\n        letter = iri[idx];\n      }\n      if (letter in next) {\n        next[letter].push(entry);\n      } else {\n        next[letter] = [entry];\n      }\n    }\n    for (const key in next) {\n      if (key === '') {\n        continue;\n      }\n      _buildIriMap(next, key, idx + 1);\n    }\n  }\n\n  /**\n   * Adds the term for the given entry if not already added.\n   *\n   * @param term the term to add.\n   * @param entry the inverse context typeOrLanguage entry to add to.\n   * @param typeOrLanguageValue the key in the entry to add to.\n   */\n  function _addPreferredTerm(term, entry, typeOrLanguageValue) {\n    if (!entry.hasOwnProperty(typeOrLanguageValue)) {\n      entry[typeOrLanguageValue] = term;\n    }\n  }\n\n  /**\n   * Clones an active context, creating a child active context.\n   *\n   * @return a clone (child) of the active context.\n   */\n  function _cloneActiveContext() {\n    const child = {};\n    child['@base'] = this['@base'];\n    child.mappings = util.clone(this.mappings);\n    child.clone = this.clone;\n    child.inverse = null;\n    child.getInverse = this.getInverse;\n    child.protected = util.clone(this.protected);\n    if (this.previousContext) {\n      child.previousContext = this.previousContext.clone();\n    }\n    child.revertToPreviousContext = this.revertToPreviousContext;\n    if ('@language' in this) {\n      child['@language'] = this['@language'];\n    }\n    if ('@vocab' in this) {\n      child['@vocab'] = this['@vocab'];\n    }\n    return child;\n  }\n\n  /**\n   * Reverts any type-scoped context in this active context to the previous\n   * context.\n   */\n  function _revertToPreviousContext() {\n    if (!this.previousContext) {\n      return this;\n    }\n    return this.previousContext.clone();\n  }\n};\n\n/**\n * Gets the value for the given active context key and type, null if none is\n * set or undefined if none is set and type is '@context'.\n *\n * @param ctx the active context.\n * @param key the context key.\n * @param [type] the type of value to get (eg: '@id', '@type'), if not\n *          specified gets the entire entry for a key, null if not found.\n *\n * @return the value, null, or undefined.\n */\napi.getContextValue = (ctx, key, type) => {\n  // invalid key\n  if (key === null) {\n    if (type === '@context') {\n      return undefined;\n    }\n    return null;\n  }\n\n  // get specific entry information\n  if (ctx.mappings.has(key)) {\n    const entry = ctx.mappings.get(key);\n    if (_isUndefined(type)) {\n      // return whole entry\n      return entry;\n    }\n    if (entry.hasOwnProperty(type)) {\n      // return entry value for type\n      return entry[type];\n    }\n  }\n\n  // get default language\n  if (type === '@language' && ctx.hasOwnProperty(type)) {\n    return ctx[type];\n  }\n  if (type === '@context') {\n    return undefined;\n  }\n  return null;\n};\n\n/**\n * Processing Mode check.\n *\n * @param activeCtx the current active context.\n * @param version the string or numeric version to check.\n *\n * @return boolean.\n */\napi.processingMode = (activeCtx, version) => {\n  if (version.toString() >= '1.1') {\n    return !activeCtx.processingMode || activeCtx.processingMode >= 'json-ld-' + version.toString();\n  } else {\n    return activeCtx.processingMode === 'json-ld-1.0';\n  }\n};\n\n/**\n * Returns whether or not the given value is a keyword.\n *\n * @param v the value to check.\n *\n * @return true if the value is a keyword, false if not.\n */\napi.isKeyword = v => {\n  if (!_isString(v) || v[0] !== '@') {\n    return false;\n  }\n  switch (v) {\n    case '@base':\n    case '@container':\n    case '@context':\n    case '@default':\n    case '@embed':\n    case '@explicit':\n    case '@graph':\n    case '@id':\n    case '@index':\n    case '@json':\n    case '@language':\n    case '@list':\n    case '@nest':\n    case '@none':\n    case '@omitDefault':\n    case '@prefix':\n    case '@preserve':\n    case '@protected':\n    case '@requireAll':\n    case '@reverse':\n    case '@set':\n    case '@type':\n    case '@value':\n    case '@version':\n    case '@vocab':\n      return true;\n  }\n  return false;\n};\nfunction _deepCompare(x1, x2) {\n  // compare `null` or primitive types directly\n  if (!(x1 && typeof x1 === 'object') || !(x2 && typeof x2 === 'object')) {\n    return x1 === x2;\n  }\n  // x1 and x2 are objects (also potentially arrays)\n  const x1Array = Array.isArray(x1);\n  if (x1Array !== Array.isArray(x2)) {\n    return false;\n  }\n  if (x1Array) {\n    if (x1.length !== x2.length) {\n      return false;\n    }\n    for (let i = 0; i < x1.length; ++i) {\n      if (!_deepCompare(x1[i], x2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // x1 and x2 are non-array objects\n  const k1s = Object.keys(x1);\n  const k2s = Object.keys(x2);\n  if (k1s.length !== k2s.length) {\n    return false;\n  }\n  for (const k1 in x1) {\n    let v1 = x1[k1];\n    let v2 = x2[k1];\n    // special case: `@container` can be in any order\n    if (k1 === '@container') {\n      if (Array.isArray(v1) && Array.isArray(v2)) {\n        v1 = v1.slice().sort();\n        v2 = v2.slice().sort();\n      }\n    }\n    if (!_deepCompare(v1, v2)) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["util","require","JsonLdError","isArray","_isArray","isObject","_isObject","isString","_isString","isUndefined","_isUndefined","isAbsolute","_isAbsoluteIri","isRelative","_isRelativeIri","prependBase","parse","parseUrl","asArray","_asArray","compareShortestLeast","_compareShortestLeast","INITIAL_CONTEXT_CACHE","Map","INITIAL_CONTEXT_CACHE_MAX_SIZE","api","module","exports","process","activeCtx","localCtx","options","propagate","overrideProtected","ctxs","length","resolved","contextResolver","resolve","context","documentLoader","base","document","rval","previousContext","clone","resolvedContext","ctx","Object","keys","protected","protectedMode","code","console","warn","oldActiveCtx","getInitialContext","term","_protected","entries","mappings","setProcessed","processed","getProcessed","defined","processingMode","set","href","value","_expandIri","vocab","undefined","toLowerCase","key","createTermDefinition","has","get","hasOwnProperty","validKeys","some","k","includes","isKeyword","previousMapping","delete","simpleTerm","mapping","reverse","push","kw","colon","indexOf","_termHasColon","id","_prefix","match","prefix","substr","suffix","type","container","validContainers","isValid","hasSet","every","c","join","language","nest","_deepCompare","expandIri","relativeTo","JSON","stringify","cached","initialContext","inverse","getInverse","_createInverseContext","_cloneActiveContext","revertToPreviousContext","_revertToPreviousContext","size","clear","fastCurieMap","irisToTerms","defaultLanguage","terms","sort","concat","ids","iri","entry","fastCurieEntry","_addPreferredTerm","_buildIriMap","iriMap","idx","next","letter","typeOrLanguageValue","child","getContextValue","version","toString","v","x1","x2","x1Array","Array","i","k1s","k2s","k1","v1","v2","slice"],"sources":["/home/saharsh/digital-twins-explorer/client/node_modules/jsonld/lib/context.js"],"sourcesContent":["/*\n * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\nconst JsonLdError = require('./JsonLdError');\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = require('./types');\n\nconst {\n  isAbsolute: _isAbsoluteIri,\n  isRelative: _isRelativeIri,\n  prependBase,\n  parse: parseUrl\n} = require('./url');\n\nconst {\n  asArray: _asArray,\n  compareShortestLeast: _compareShortestLeast\n} = require('./util');\n\nconst INITIAL_CONTEXT_CACHE = new Map();\nconst INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Processes a local context and returns a new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param options the context processing options.\n * @param propagate `true` if `false`, retains any previously defined term,\n *   which can be rolled back when the descending into a new node object.\n * @param overrideProtected `false` allows protected terms to be modified.\n *\n * @return a Promise that resolves to the new active context.\n */\napi.process = async ({\n  activeCtx, localCtx, options,\n  propagate = true,\n  overrideProtected = false\n}) => {\n  // normalize local context to an array of @context objects\n  if(_isObject(localCtx) && '@context' in localCtx &&\n    _isArray(localCtx['@context'])) {\n    localCtx = localCtx['@context'];\n  }\n  const ctxs = _asArray(localCtx);\n\n  // no contexts in array, return current active context w/o changes\n  if(ctxs.length === 0) {\n    return activeCtx;\n  }\n\n  // resolve contexts\n  const resolved = await options.contextResolver.resolve({\n    context: localCtx,\n    documentLoader: options.documentLoader,\n    base: options.base\n  });\n\n  // override propagate if first resolved context has `@propagate`\n  if(_isObject(resolved[0].document) &&\n    typeof resolved[0].document['@propagate'] === 'boolean') {\n    // retrieve early, error checking done later\n    propagate = resolved[0].document['@propagate'];\n  }\n\n  // process each context in order, update active context\n  // on each iteration to ensure proper caching\n  let rval = activeCtx;\n\n  // track the previous context\n  // if not propagating, make sure rval has a previous context\n  if(!propagate && !rval.previousContext) {\n    // clone `rval` context before updating\n    rval = rval.clone();\n    rval.previousContext = activeCtx;\n  }\n\n  for(const resolvedContext of resolved) {\n    let {document: ctx} = resolvedContext;\n\n    // update active context to one computed from last iteration\n    activeCtx = rval;\n\n    // reset to initial context\n    if(ctx === null) {\n      // We can't nullify if there are protected terms and we're\n      // not allowing overrides (e.g. processing a property term scoped context)\n      if(!overrideProtected &&\n        Object.keys(activeCtx.protected).length !== 0) {\n        const protectedMode = (options && options.protectedMode) || 'error';\n        if(protectedMode === 'error') {\n          throw new JsonLdError(\n            'Tried to nullify a context with protected terms outside of ' +\n            'a term definition.',\n            'jsonld.SyntaxError',\n            {code: 'invalid context nullification'});\n        } else if(protectedMode === 'warn') {\n          // FIXME: remove logging and use a handler\n          console.warn('WARNING: invalid context nullification');\n          const oldActiveCtx = activeCtx;\n          // copy all protected term definitions to fresh initial context\n          rval = activeCtx = api.getInitialContext(options).clone();\n          for(const [term, _protected] of\n            Object.entries(oldActiveCtx.protected)) {\n            if(_protected) {\n              activeCtx.mappings[term] =\n                util.clone(oldActiveCtx.mappings[term]);\n            }\n          }\n          activeCtx.protected = util.clone(oldActiveCtx.protected);\n\n          // cache processed result\n          resolvedContext.setProcessed(oldActiveCtx, rval);\n          continue;\n        }\n        throw new JsonLdError(\n          'Invalid protectedMode.',\n          'jsonld.SyntaxError',\n          {code: 'invalid protected mode', context: localCtx, protectedMode});\n      }\n      rval = activeCtx = api.getInitialContext(options).clone();\n      continue;\n    }\n\n    // get processed context from cache if available\n    const processed = resolvedContext.getProcessed(activeCtx);\n    if(processed) {\n      rval = activeCtx = processed;\n      continue;\n    }\n\n    // dereference @context key if present\n    if(_isObject(ctx) && '@context' in ctx) {\n      ctx = ctx['@context'];\n    }\n\n    // context must be an object by now, all URLs retrieved before this call\n    if(!_isObject(ctx)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context must be an object.',\n        'jsonld.SyntaxError', {code: 'invalid local context', context: ctx});\n    }\n\n    // TODO: there is likely a `previousContext` cloning optimization that\n    // could be applied here (no need to copy it under certain conditions)\n\n    // clone context before updating it\n    rval = rval.clone();\n\n    // define context mappings for keys in local context\n    const defined = new Map();\n\n    // handle @version\n    if('@version' in ctx) {\n      if(ctx['@version'] !== 1.1) {\n        throw new JsonLdError(\n          'Unsupported JSON-LD version: ' + ctx['@version'],\n          'jsonld.UnsupportedVersion',\n          {code: 'invalid @version value', context: ctx});\n      }\n      if(activeCtx.processingMode &&\n        activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          '@version: ' + ctx['@version'] + ' not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.ProcessingModeConflict',\n          {code: 'processing mode conflict', context: ctx});\n      }\n      rval.processingMode = 'json-ld-1.1';\n      rval['@version'] = ctx['@version'];\n      defined.set('@version', true);\n    }\n\n    // if not set explicitly, set processingMode to \"json-ld-1.1\"\n    rval.processingMode =\n      rval.processingMode || activeCtx.processingMode;\n\n    // handle @base\n    if('@base' in ctx) {\n      let base = ctx['@base'];\n\n      if(base === null) {\n        // no action\n      } else if(_isAbsoluteIri(base)) {\n        base = parseUrl(base);\n      } else if(_isRelativeIri(base)) {\n        base = parseUrl(prependBase(rval['@base'].href, base));\n      } else {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@base\" in a ' +\n          '@context must be an absolute IRI, a relative IRI, or null.',\n          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});\n      }\n\n      rval['@base'] = base;\n      defined.set('@base', true);\n    }\n\n    // handle @vocab\n    if('@vocab' in ctx) {\n      const value = ctx['@vocab'];\n      if(value === null) {\n        delete rval['@vocab'];\n      } else if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@vocab\" in a ' +\n          '@context must be a string or null.',\n          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});\n      } else if(!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@vocab\" in a ' +\n          '@context must be an absolute IRI.',\n          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});\n      } else {\n        rval['@vocab'] = _expandIri(rval, value, {vocab: true, base: true},\n          undefined, undefined, options);\n      }\n      defined.set('@vocab', true);\n    }\n\n    // handle @language\n    if('@language' in ctx) {\n      const value = ctx['@language'];\n      if(value === null) {\n        delete rval['@language'];\n      } else if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@language\" in a ' +\n          '@context must be a string or null.',\n          'jsonld.SyntaxError',\n          {code: 'invalid default language', context: ctx});\n      } else {\n        rval['@language'] = value.toLowerCase();\n      }\n      defined.set('@language', true);\n    }\n\n    // handle @propagate\n    // note: we've already extracted it, here we just do error checking\n    if('@propagate' in ctx) {\n      const value = ctx['@propagate'];\n      if(activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @propagate not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.SyntaxError',\n          {code: 'invalid context member', context: ctx});\n      }\n      if(typeof value !== 'boolean') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @propagate value must be a boolean.',\n          'jsonld.SyntaxError',\n          {code: 'invalid @propagate value', context: localCtx});\n      }\n      defined.set('@propagate', true);\n    }\n\n    // handle @protected; determine whether this sub-context is declaring\n    // all its terms to be \"protected\" (exceptions can be made on a\n    // per-definition basis)\n    defined.set('@protected', ctx['@protected'] || false);\n\n    // process all other keys\n    for(const key in ctx) {\n      api.createTermDefinition({\n        activeCtx: rval,\n        localCtx: ctx,\n        term: key,\n        defined,\n        options,\n        overrideProtected\n      });\n    }\n\n    // cache processed result\n    resolvedContext.setProcessed(activeCtx, rval);\n  }\n\n  return rval;\n};\n\n/**\n * Creates a term definition during context processing.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context being processed.\n * @param term the term in the local context to define the mapping for.\n * @param defined a map of defining/defined keys to detect cycles and prevent\n *          double definitions.\n * @param {Object} [options] - creation options.\n * @param {string} [options.protectedMode=\"error\"] - \"error\" to throw error\n *   on `@protected` constraint violation, \"warn\" to allow violations and\n *   signal a warning.\n * @param overrideProtected `false` allows protected terms to be modified.\n */\napi.createTermDefinition = ({\n  activeCtx,\n  localCtx,\n  term,\n  defined,\n  options,\n  overrideProtected = false,\n}) => {\n  if(defined.has(term)) {\n    // term already defined\n    if(defined.get(term)) {\n      return;\n    }\n    // cycle detected\n    throw new JsonLdError(\n      'Cyclical context definition detected.',\n      'jsonld.CyclicalContext',\n      {code: 'cyclic IRI mapping', context: localCtx, term});\n  }\n\n  // now defining term\n  defined.set(term, false);\n\n  // get context term value\n  let value;\n  if(localCtx.hasOwnProperty(term)) {\n    value = localCtx[term];\n  }\n\n  if(term === '@type' &&\n     _isObject(value) &&\n     value['@container'] === '@set' &&\n     api.processingMode(activeCtx, 1.1)) {\n\n    const validKeys = ['@container', '@id', '@protected'];\n    if(Object.keys(value).some(k => !validKeys.includes(k))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; keywords cannot be overridden.',\n        'jsonld.SyntaxError',\n        {code: 'keyword redefinition', context: localCtx, term});\n    }\n  } else if(api.isKeyword(term)) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; keywords cannot be overridden.',\n      'jsonld.SyntaxError',\n      {code: 'keyword redefinition', context: localCtx, term});\n  } else if(term === '') {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a term cannot be an empty string.',\n      'jsonld.SyntaxError',\n      {code: 'invalid term definition', context: localCtx});\n  }\n\n  // keep reference to previous mapping for potential `@protected` check\n  const previousMapping = activeCtx.mappings.get(term);\n\n  // remove old mapping\n  if(activeCtx.mappings.has(term)) {\n    activeCtx.mappings.delete(term);\n  }\n\n  // clear context entry\n  if(value === null || (_isObject(value) && value['@id'] === null)) {\n    activeCtx.mappings.set(term, null);\n    defined.set(term, true);\n    return;\n  }\n\n  // convert short-hand value to object w/@id\n  let simpleTerm = false;\n  if(_isString(value)) {\n    simpleTerm = true;\n    value = {'@id': value};\n  }\n\n  if(!_isObject(value)) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; @context term values must be ' +\n      'strings or objects.',\n      'jsonld.SyntaxError',\n      {code: 'invalid term definition', context: localCtx});\n  }\n\n  // create new mapping\n  const mapping = {};\n  activeCtx.mappings.set(term, mapping);\n  mapping.reverse = false;\n\n  // make sure term definition only has expected keywords\n  const validKeys = ['@container', '@id', '@language', '@reverse', '@type'];\n\n  // JSON-LD 1.1 support\n  if(api.processingMode(activeCtx, 1.1)) {\n    validKeys.push('@context', '@index', '@nest', '@prefix', '@protected');\n  }\n\n  for(const kw in value) {\n    if(!validKeys.includes(kw)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a term definition must not contain ' + kw,\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n  }\n\n  // always compute whether term has a colon as an optimization for\n  // _compactIri\n  const colon = term.indexOf(':');\n  mapping._termHasColon = (colon > 0);\n\n  if('@reverse' in value) {\n    if('@id' in value) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @reverse term definition must not ' +\n        'contain @id.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n    if('@nest' in value) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @reverse term definition must not ' +\n        'contain @nest.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n    const reverse = value['@reverse'];\n    if(!_isString(reverse)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @reverse value must be a string.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n\n    // expand and add @id mapping\n    const id = _expandIri(\n      activeCtx, reverse, {vocab: true, base: false}, localCtx, defined,\n      options);\n    if(!_isAbsoluteIri(id)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @reverse value must be an ' +\n        'absolute IRI or a blank node identifier.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n    mapping['@id'] = id;\n    mapping.reverse = true;\n  } else if('@id' in value) {\n    let id = value['@id'];\n    if(!_isString(id)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @id value must be an array ' +\n        'of strings or a string.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n    if(id !== term) {\n      // expand and add @id mapping\n      id = _expandIri(\n        activeCtx, id, {vocab: true, base: false}, localCtx, defined, options);\n      if(!_isAbsoluteIri(id) && !api.isKeyword(id)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; a @context @id value must be an ' +\n          'absolute IRI, a blank node identifier, or a keyword.',\n          'jsonld.SyntaxError',\n          {code: 'invalid IRI mapping', context: localCtx});\n      }\n      mapping['@id'] = id;\n      // indicate if this term may be used as a compact IRI prefix\n      mapping._prefix = (simpleTerm &&\n        !mapping._termHasColon &&\n        id.match(/[:\\/\\?#\\[\\]@]$/));\n    }\n  }\n\n  if(!('@id' in mapping)) {\n    // see if the term has a prefix\n    if(mapping._termHasColon) {\n      const prefix = term.substr(0, colon);\n      if(localCtx.hasOwnProperty(prefix)) {\n        // define parent prefix\n        api.createTermDefinition({\n          activeCtx, localCtx, term: prefix, defined, options\n        });\n      }\n\n      if(activeCtx.mappings.has(prefix)) {\n        // set @id based on prefix parent\n        const suffix = term.substr(colon + 1);\n        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;\n      } else {\n        // term is an absolute IRI\n        mapping['@id'] = term;\n      }\n    } else if(term == '@type') {\n      // Special case, were we've previously determined that container is @set\n      mapping['@id'] = term;\n    } else {\n      // non-IRIs *must* define @ids if @vocab is not available\n      if(!('@vocab' in activeCtx)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @context terms must define an @id.',\n          'jsonld.SyntaxError',\n          {code: 'invalid IRI mapping', context: localCtx, term});\n      }\n      // prepend vocab to term\n      mapping['@id'] = activeCtx['@vocab'] + term;\n    }\n  }\n\n  // Handle term protection\n  if(value['@protected'] === true ||\n    (defined.get('@protected') === true && value['@protected'] !== false)) {\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n  }\n\n  // IRI mapping now defined\n  defined.set(term, true);\n\n  if('@type' in value) {\n    let type = value['@type'];\n    if(!_isString(type)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an @context @type value must be a string.',\n        'jsonld.SyntaxError',\n        {code: 'invalid type mapping', context: localCtx});\n    }\n\n    if((type === '@json' || type === '@none')) {\n      if(api.processingMode(activeCtx, 1.0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must not be ' +\n          `\"${type}\" in JSON-LD 1.0 mode.`,\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n    } else if(type !== '@id' && type !== '@vocab') {\n      // expand @type to full IRI\n      type = _expandIri(\n        activeCtx, type, {vocab: true, base: false}, localCtx, defined,\n        options);\n      if(!_isAbsoluteIri(type)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must be an ' +\n          'absolute IRI.',\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n      if(type.indexOf('_:') === 0) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must be an IRI, ' +\n          'not a blank node identifier.',\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n    }\n\n    // add @type to mapping\n    mapping['@type'] = type;\n  }\n\n  if('@container' in value) {\n    // normalize container to an array form\n    const container = _isString(value['@container']) ?\n      [value['@container']] : (value['@container'] || []);\n    const validContainers = ['@list', '@set', '@index', '@language'];\n    let isValid = true;\n    const hasSet = container.includes('@set');\n\n    // JSON-LD 1.1 support\n    if(api.processingMode(activeCtx, 1.1)) {\n      validContainers.push('@graph', '@id', '@type');\n\n      // check container length\n      if(container.includes('@list')) {\n        if(container.length !== 1) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; @context @container with @list must ' +\n            'have no other values',\n            'jsonld.SyntaxError',\n            {code: 'invalid container mapping', context: localCtx});\n        }\n      } else if(container.includes('@graph')) {\n        if(container.some(key =>\n          key !== '@graph' && key !== '@id' && key !== '@index' &&\n          key !== '@set')) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; @context @container with @graph must ' +\n            'have no other values other than @id, @index, and @set',\n            'jsonld.SyntaxError',\n            {code: 'invalid container mapping', context: localCtx});\n        }\n      } else {\n        // otherwise, container may also include @set\n        isValid &= container.length <= (hasSet ? 2 : 1);\n      }\n\n      if(container.includes('@type')) {\n        // If mapping does not have an @type,\n        // set it to @id\n        mapping['@type'] = mapping['@type'] || '@id';\n\n        // type mapping must be either @id or @vocab\n        if(!['@id', '@vocab'].includes(mapping['@type'])) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; container: @type requires @type to be ' +\n            '@id or @vocab.',\n            'jsonld.SyntaxError',\n            {code: 'invalid type mapping', context: localCtx});\n        }\n      }\n    } else {\n      // in JSON-LD 1.0, container must not be an array (it must be a string,\n      // which is one of the validContainers)\n      isValid &= !_isArray(value['@container']);\n\n      // check container length\n      isValid &= container.length <= 1;\n    }\n\n    // check against valid containers\n    isValid &= container.every(c => validContainers.includes(c));\n\n    // @set not allowed with @list\n    isValid &= !(hasSet && container.includes('@list'));\n\n    if(!isValid) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @container value must be ' +\n        'one of the following: ' + validContainers.join(', '),\n        'jsonld.SyntaxError',\n        {code: 'invalid container mapping', context: localCtx});\n    }\n\n    if(mapping.reverse &&\n      !container.every(c => ['@index', '@set'].includes(c))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @container value for a @reverse ' +\n        'type definition must be @index or @set.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n\n    // add @container to mapping\n    mapping['@container'] = container;\n  }\n\n  // property indexing\n  if('@index' in value) {\n    if(!('@container' in value) || !mapping['@container'].includes('@index')) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @index without @index in @container: ' +\n        `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @index must expand to an IRI: ' +\n        `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    mapping['@index'] = value['@index'];\n  }\n\n  // scoped contexts\n  if('@context' in value) {\n    mapping['@context'] = value['@context'];\n  }\n\n  if('@language' in value && !('@type' in value)) {\n    let language = value['@language'];\n    if(language !== null && !_isString(language)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @language value must be ' +\n        'a string or null.', 'jsonld.SyntaxError',\n        {code: 'invalid language mapping', context: localCtx});\n    }\n\n    // add @language to mapping\n    if(language !== null) {\n      language = language.toLowerCase();\n    }\n    mapping['@language'] = language;\n  }\n\n  // term may be used as a prefix\n  if('@prefix' in value) {\n    if(mapping._termHasColon) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @prefix used on a compact IRI term',\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(typeof value['@prefix'] === 'boolean') {\n      mapping._prefix = value['@prefix'] === true;\n    } else {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context value for @prefix must be boolean',\n        'jsonld.SyntaxError',\n        {code: 'invalid @prefix value', context: localCtx});\n    }\n  }\n\n  if('@nest' in value) {\n    const nest = value['@nest'];\n    if(!_isString(nest) || (nest !== '@nest' && nest.indexOf('@') === 0)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @nest value must be ' +\n        'a string which is not a keyword other than @nest.',\n        'jsonld.SyntaxError',\n        {code: 'invalid @nest value', context: localCtx});\n    }\n    mapping['@nest'] = nest;\n  }\n\n  // disallow aliasing @context and @preserve\n  const id = mapping['@id'];\n  if(id === '@context' || id === '@preserve') {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; @context and @preserve cannot be aliased.',\n      'jsonld.SyntaxError', {code: 'invalid keyword alias', context: localCtx});\n  }\n\n  // Check for overriding protected terms\n  if(previousMapping && previousMapping.protected && !overrideProtected) {\n    // force new term to continue to be protected and see if the mappings would\n    // be equal\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n    if(!_deepCompare(previousMapping, mapping)) {\n      const protectedMode = (options && options.protectedMode) || 'error';\n      if(protectedMode === 'error') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; tried to redefine a protected term.',\n          'jsonld.SyntaxError',\n          {code: 'protected term redefinition', context: localCtx, term});\n      } else if(protectedMode === 'warn') {\n        // FIXME: remove logging and use a handler\n        console.warn('WARNING: protected term redefinition', {term});\n        return;\n      }\n      throw new JsonLdError(\n        'Invalid protectedMode.',\n        'jsonld.SyntaxError',\n        {code: 'invalid protected mode', context: localCtx, term,\n          protectedMode});\n    }\n  }\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\napi.expandIri = (activeCtx, value, relativeTo, options) => {\n  return _expandIri(activeCtx, value, relativeTo, undefined, undefined,\n    options);\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param localCtx the local context being processed (only given if called\n *          during context processing).\n * @param defined a map for tracking cycles in context definitions (only given\n *          if called during context processing).\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\nfunction _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {\n  // already expanded\n  if(value === null || !_isString(value) || api.isKeyword(value)) {\n    return value;\n  }\n\n  // define term dependency if not defined\n  if(localCtx && localCtx.hasOwnProperty(value) &&\n    defined.get(value) !== true) {\n    api.createTermDefinition({\n      activeCtx, localCtx, term: value, defined, options\n    });\n  }\n\n  relativeTo = relativeTo || {};\n  if(relativeTo.vocab) {\n    const mapping = activeCtx.mappings.get(value);\n\n    // value is explicitly ignored with a null mapping\n    if(mapping === null) {\n      return null;\n    }\n\n    if(mapping) {\n      // value is a term\n      return mapping['@id'];\n    }\n  }\n\n  // split value into prefix:suffix\n  const colon = value.indexOf(':');\n  if(colon > 0) {\n    const prefix = value.substr(0, colon);\n    const suffix = value.substr(colon + 1);\n\n    // do not expand blank nodes (prefix of '_') or already-absolute\n    // IRIs (suffix of '//')\n    if(prefix === '_' || suffix.indexOf('//') === 0) {\n      return value;\n    }\n\n    // prefix dependency not defined, define it\n    if(localCtx && localCtx.hasOwnProperty(prefix)) {\n      api.createTermDefinition({\n        activeCtx, localCtx, term: prefix, defined, options\n      });\n    }\n\n    // use mapping if prefix is defined\n    const mapping = activeCtx.mappings.get(prefix);\n    if(mapping && mapping._prefix) {\n      return mapping['@id'] + suffix;\n    }\n\n    // already absolute IRI\n    if(_isAbsoluteIri(value)) {\n      return value;\n    }\n  }\n\n  // prepend vocab\n  if(relativeTo.vocab && '@vocab' in activeCtx) {\n    return activeCtx['@vocab'] + value;\n  }\n\n  // prepend base\n  if(relativeTo.base) {\n    return prependBase(activeCtx['@base'], value);\n  }\n\n  return value;\n}\n\n/**\n * Gets the initial context.\n *\n * @param options the options to use:\n *          [base] the document base IRI.\n *\n * @return the initial context.\n */\napi.getInitialContext = options => {\n  const base = parseUrl(options.base || '');\n  const key = JSON.stringify({base, processingMode: options.processingMode});\n  const cached = INITIAL_CONTEXT_CACHE.get(key);\n  if(cached) {\n    return cached;\n  }\n\n  const initialContext = {\n    '@base': base,\n    processingMode: options.processingMode,\n    mappings: new Map(),\n    inverse: null,\n    getInverse: _createInverseContext,\n    clone: _cloneActiveContext,\n    revertToPreviousContext: _revertToPreviousContext,\n    protected: {}\n  };\n  // TODO: consider using LRU cache instead\n  if(INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {\n    // clear whole cache -- assumes scenario where the cache fills means\n    // the cache isn't being used very efficiently anyway\n    INITIAL_CONTEXT_CACHE.clear();\n  }\n  INITIAL_CONTEXT_CACHE.set(key, initialContext);\n  return initialContext;\n\n  /**\n   * Generates an inverse context for use in the compaction algorithm, if\n   * not already generated for the given active context.\n   *\n   * @return the inverse context.\n   */\n  function _createInverseContext() {\n    const activeCtx = this;\n\n    // lazily create inverse\n    if(activeCtx.inverse) {\n      return activeCtx.inverse;\n    }\n    const inverse = activeCtx.inverse = {};\n\n    // variables for building fast CURIE map\n    const fastCurieMap = activeCtx.fastCurieMap = {};\n    const irisToTerms = {};\n\n    // handle default language\n    const defaultLanguage = activeCtx['@language'] || '@none';\n\n    // create term selections for each mapping in the context, ordered by\n    // shortest and then lexicographically least\n    const mappings = activeCtx.mappings;\n    const terms = [...mappings.keys()].sort(_compareShortestLeast);\n    for(const term of terms) {\n      const mapping = mappings.get(term);\n      if(mapping === null) {\n        continue;\n      }\n\n      let container = mapping['@container'] || '@none';\n      container = [].concat(container).sort().join('');\n\n      // iterate over every IRI in the mapping\n      const ids = _asArray(mapping['@id']);\n      for(const iri of ids) {\n        let entry = inverse[iri];\n        const isKeyword = api.isKeyword(iri);\n\n        if(!entry) {\n          // initialize entry\n          inverse[iri] = entry = {};\n\n          if(!isKeyword && !mapping._termHasColon) {\n            // init IRI to term map and fast CURIE prefixes\n            irisToTerms[iri] = [term];\n            const fastCurieEntry = {iri, terms: irisToTerms[iri]};\n            if(iri[0] in fastCurieMap) {\n              fastCurieMap[iri[0]].push(fastCurieEntry);\n            } else {\n              fastCurieMap[iri[0]] = [fastCurieEntry];\n            }\n          }\n        } else if(!isKeyword && !mapping._termHasColon) {\n          // add IRI to term match\n          irisToTerms[iri].push(term);\n        }\n\n        // add new entry\n        if(!entry[container]) {\n          entry[container] = {\n            '@language': {},\n            '@type': {},\n            '@any': {}\n          };\n        }\n        entry = entry[container];\n        _addPreferredTerm(term, entry['@any'], '@none');\n\n        if(mapping.reverse) {\n          // term is preferred for values using @reverse\n          _addPreferredTerm(term, entry['@type'], '@reverse');\n        } else if(mapping['@type'] === '@none') {\n          _addPreferredTerm(term, entry['@any'], '@none');\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else if('@type' in mapping) {\n          // term is preferred for values using specific type\n          _addPreferredTerm(term, entry['@type'], mapping['@type']);\n        } else if('@language' in mapping) {\n          // term is preferred for values using specific language\n          const language = mapping['@language'] || '@null';\n          _addPreferredTerm(term, entry['@language'], language);\n        } else {\n          // term is preferred for values w/default language or no type and\n          // no language\n          // add an entry for the default language\n          _addPreferredTerm(term, entry['@language'], defaultLanguage);\n\n          // add entries for no type and no language\n          _addPreferredTerm(term, entry['@type'], '@none');\n          _addPreferredTerm(term, entry['@language'], '@none');\n        }\n      }\n    }\n\n    // build fast CURIE map\n    for(const key in fastCurieMap) {\n      _buildIriMap(fastCurieMap, key, 1);\n    }\n\n    return inverse;\n  }\n\n  /**\n   * Runs a recursive algorithm to build a lookup map for quickly finding\n   * potential CURIEs.\n   *\n   * @param iriMap the map to build.\n   * @param key the current key in the map to work on.\n   * @param idx the index into the IRI to compare.\n   */\n  function _buildIriMap(iriMap, key, idx) {\n    const entries = iriMap[key];\n    const next = iriMap[key] = {};\n\n    let iri;\n    let letter;\n    for(const entry of entries) {\n      iri = entry.iri;\n      if(idx >= iri.length) {\n        letter = '';\n      } else {\n        letter = iri[idx];\n      }\n      if(letter in next) {\n        next[letter].push(entry);\n      } else {\n        next[letter] = [entry];\n      }\n    }\n\n    for(const key in next) {\n      if(key === '') {\n        continue;\n      }\n      _buildIriMap(next, key, idx + 1);\n    }\n  }\n\n  /**\n   * Adds the term for the given entry if not already added.\n   *\n   * @param term the term to add.\n   * @param entry the inverse context typeOrLanguage entry to add to.\n   * @param typeOrLanguageValue the key in the entry to add to.\n   */\n  function _addPreferredTerm(term, entry, typeOrLanguageValue) {\n    if(!entry.hasOwnProperty(typeOrLanguageValue)) {\n      entry[typeOrLanguageValue] = term;\n    }\n  }\n\n  /**\n   * Clones an active context, creating a child active context.\n   *\n   * @return a clone (child) of the active context.\n   */\n  function _cloneActiveContext() {\n    const child = {};\n    child['@base'] = this['@base'];\n    child.mappings = util.clone(this.mappings);\n    child.clone = this.clone;\n    child.inverse = null;\n    child.getInverse = this.getInverse;\n    child.protected = util.clone(this.protected);\n    if(this.previousContext) {\n      child.previousContext = this.previousContext.clone();\n    }\n    child.revertToPreviousContext = this.revertToPreviousContext;\n    if('@language' in this) {\n      child['@language'] = this['@language'];\n    }\n    if('@vocab' in this) {\n      child['@vocab'] = this['@vocab'];\n    }\n    return child;\n  }\n\n  /**\n   * Reverts any type-scoped context in this active context to the previous\n   * context.\n   */\n  function _revertToPreviousContext() {\n    if(!this.previousContext) {\n      return this;\n    }\n    return this.previousContext.clone();\n  }\n};\n\n/**\n * Gets the value for the given active context key and type, null if none is\n * set or undefined if none is set and type is '@context'.\n *\n * @param ctx the active context.\n * @param key the context key.\n * @param [type] the type of value to get (eg: '@id', '@type'), if not\n *          specified gets the entire entry for a key, null if not found.\n *\n * @return the value, null, or undefined.\n */\napi.getContextValue = (ctx, key, type) => {\n  // invalid key\n  if(key === null) {\n    if(type === '@context') {\n      return undefined;\n    }\n    return null;\n  }\n\n  // get specific entry information\n  if(ctx.mappings.has(key)) {\n    const entry = ctx.mappings.get(key);\n\n    if(_isUndefined(type)) {\n      // return whole entry\n      return entry;\n    }\n    if(entry.hasOwnProperty(type)) {\n      // return entry value for type\n      return entry[type];\n    }\n  }\n\n  // get default language\n  if(type === '@language' && ctx.hasOwnProperty(type)) {\n    return ctx[type];\n  }\n\n  if(type === '@context') {\n    return undefined;\n  }\n  return null;\n};\n\n/**\n * Processing Mode check.\n *\n * @param activeCtx the current active context.\n * @param version the string or numeric version to check.\n *\n * @return boolean.\n */\napi.processingMode = (activeCtx, version) => {\n  if(version.toString() >= '1.1') {\n    return !activeCtx.processingMode ||\n      activeCtx.processingMode >= 'json-ld-' + version.toString();\n  } else {\n    return activeCtx.processingMode === 'json-ld-1.0';\n  }\n};\n\n/**\n * Returns whether or not the given value is a keyword.\n *\n * @param v the value to check.\n *\n * @return true if the value is a keyword, false if not.\n */\napi.isKeyword = v => {\n  if(!_isString(v) || v[0] !== '@') {\n    return false;\n  }\n  switch(v) {\n    case '@base':\n    case '@container':\n    case '@context':\n    case '@default':\n    case '@embed':\n    case '@explicit':\n    case '@graph':\n    case '@id':\n    case '@index':\n    case '@json':\n    case '@language':\n    case '@list':\n    case '@nest':\n    case '@none':\n    case '@omitDefault':\n    case '@prefix':\n    case '@preserve':\n    case '@protected':\n    case '@requireAll':\n    case '@reverse':\n    case '@set':\n    case '@type':\n    case '@value':\n    case '@version':\n    case '@vocab':\n      return true;\n  }\n  return false;\n};\n\nfunction _deepCompare(x1, x2) {\n  // compare `null` or primitive types directly\n  if((!(x1 && typeof x1 === 'object')) ||\n     (!(x2 && typeof x2 === 'object'))) {\n    return x1 === x2;\n  }\n  // x1 and x2 are objects (also potentially arrays)\n  const x1Array = Array.isArray(x1);\n  if(x1Array !== Array.isArray(x2)) {\n    return false;\n  }\n  if(x1Array) {\n    if(x1.length !== x2.length) {\n      return false;\n    }\n    for(let i = 0; i < x1.length; ++i) {\n      if(!_deepCompare(x1[i], x2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // x1 and x2 are non-array objects\n  const k1s = Object.keys(x1);\n  const k2s = Object.keys(x2);\n  if(k1s.length !== k2s.length) {\n    return false;\n  }\n  for(const k1 in x1) {\n    let v1 = x1[k1];\n    let v2 = x2[k1];\n    // special case: `@container` can be in any order\n    if(k1 === '@container') {\n      if(Array.isArray(v1) && Array.isArray(v2)) {\n        v1 = v1.slice().sort();\n        v2 = v2.slice().sort();\n      }\n    }\n    if(!_deepCompare(v1, v2)) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}