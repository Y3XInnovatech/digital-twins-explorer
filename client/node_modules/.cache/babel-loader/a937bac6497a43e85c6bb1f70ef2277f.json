{"ast":null,"code":"/**\n * {@docCategory Pickers}\n */\nvar SuggestionsController = /** @class */function () {\n  function SuggestionsController() {\n    var _this = this;\n    this._isSuggestionModel = function (value) {\n      return value.item !== undefined;\n    };\n    this._ensureSuggestionModel = function (suggestion) {\n      if (_this._isSuggestionModel(suggestion)) {\n        return suggestion;\n      } else {\n        return {\n          item: suggestion,\n          selected: false,\n          ariaLabel: suggestion.name || suggestion.primaryText\n        };\n      }\n    };\n    this.suggestions = [];\n    this.currentIndex = -1;\n  }\n  SuggestionsController.prototype.updateSuggestions = function (newSuggestions, selectedIndex) {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n      this.currentIndex = selectedIndex ? selectedIndex : 0;\n      if (selectedIndex === -1) {\n        this.currentSuggestion = undefined;\n      } else if (selectedIndex !== undefined) {\n        this.suggestions[selectedIndex].selected = true;\n        this.currentSuggestion = this.suggestions[selectedIndex];\n      }\n    } else {\n      this.suggestions = [];\n      this.currentIndex = -1;\n      this.currentSuggestion = undefined;\n    }\n  };\n  /**\n   * Increments the suggestion index and gets the next suggestion in the list.\n   */\n  SuggestionsController.prototype.nextSuggestion = function () {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex < this.suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.currentIndex === this.suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Decrements the suggestion index and gets the previous suggestion in the list.\n   */\n  SuggestionsController.prototype.previousSuggestion = function () {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.currentIndex === 0) {\n        this.setSelectedSuggestion(this.suggestions.length - 1);\n        return true;\n      }\n    }\n    return false;\n  };\n  SuggestionsController.prototype.getSuggestions = function () {\n    return this.suggestions;\n  };\n  SuggestionsController.prototype.getCurrentItem = function () {\n    return this.currentSuggestion;\n  };\n  SuggestionsController.prototype.getSuggestionAtIndex = function (index) {\n    return this.suggestions[index];\n  };\n  SuggestionsController.prototype.hasSelectedSuggestion = function () {\n    return this.currentSuggestion ? true : false;\n  };\n  SuggestionsController.prototype.removeSuggestion = function (index) {\n    this.suggestions.splice(index, 1);\n  };\n  SuggestionsController.prototype.createGenericSuggestion = function (itemToConvert) {\n    var itemToAdd = this.convertSuggestionsToSuggestionItems([itemToConvert])[0];\n    this.currentSuggestion = itemToAdd;\n  };\n  SuggestionsController.prototype.convertSuggestionsToSuggestionItems = function (suggestions) {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  };\n  SuggestionsController.prototype.deselectAllSuggestions = function () {\n    if (this.currentIndex > -1) {\n      this.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n    }\n  };\n  SuggestionsController.prototype.setSelectedSuggestion = function (index) {\n    if (index > this.suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion.selected = false;\n      this.currentSuggestion = this.suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1) {\n        this.suggestions[this.currentIndex].selected = false;\n      }\n      this.suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = this.suggestions[index];\n    }\n  };\n  return SuggestionsController;\n}();\nexport { SuggestionsController };","map":{"version":3,"sources":["components/pickers/Suggestions/SuggestionsController.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISuggestionModel } from './Suggestions.types';\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsController<T> {\n  public currentIndex: number;\n  public currentSuggestion: ISuggestionModel<T> | undefined;\n  public suggestions: ISuggestionModel<T>[];\n\n  constructor() {\n    this.suggestions = [];\n    this.currentIndex = -1;\n  }\n\n  public updateSuggestions(newSuggestions: T[], selectedIndex?: number): void {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n      this.currentIndex = selectedIndex ? selectedIndex : 0;\n      if (selectedIndex! === -1) {\n        this.currentSuggestion = undefined;\n      } else if (selectedIndex !== undefined) {\n        this.suggestions[selectedIndex].selected = true;\n        this.currentSuggestion = this.suggestions[selectedIndex];\n      }\n    } else {\n      this.suggestions = [];\n      this.currentIndex = -1;\n      this.currentSuggestion = undefined;\n    }\n  }\n\n  /**\n   * Increments the suggestion index and gets the next suggestion in the list.\n   */\n  public nextSuggestion(): boolean {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex < this.suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.currentIndex === this.suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrements the suggestion index and gets the previous suggestion in the list.\n   */\n  public previousSuggestion(): boolean {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.currentIndex === 0) {\n        this.setSelectedSuggestion(this.suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getSuggestions(): ISuggestionModel<T>[] {\n    return this.suggestions;\n  }\n\n  public getCurrentItem(): ISuggestionModel<T> {\n    return this.currentSuggestion!;\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.suggestions[index];\n  }\n\n  public hasSelectedSuggestion(): boolean {\n    return this.currentSuggestion ? true : false;\n  }\n\n  public removeSuggestion(index: number): void {\n    this.suggestions.splice(index, 1);\n  }\n\n  public createGenericSuggestion(itemToConvert: ISuggestionModel<T> | T) {\n    const itemToAdd = this.convertSuggestionsToSuggestionItems([itemToConvert])[0];\n    this.currentSuggestion = itemToAdd;\n  }\n\n  public convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[] {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  }\n\n  public deselectAllSuggestions(): void {\n    if (this.currentIndex > -1) {\n      this.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n    }\n  }\n\n  public setSelectedSuggestion(index: number): void {\n    if (index > this.suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion!.selected = false;\n      this.currentSuggestion = this.suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1) {\n        this.suggestions[this.currentIndex].selected = false;\n      }\n      this.suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = this.suggestions[index];\n    }\n  }\n\n  private _isSuggestionModel = (value: ISuggestionModel<T> | T): value is ISuggestionModel<T> => {\n    return (<ISuggestionModel<T>>value).item !== undefined;\n  };\n\n  private _ensureSuggestionModel = (suggestion: ISuggestionModel<T> | T): ISuggestionModel<T> => {\n    if (this._isSuggestionModel(suggestion)) {\n      return suggestion as ISuggestionModel<T>;\n    } else {\n      return {\n        item: suggestion,\n        selected: false,\n        ariaLabel: (<any>suggestion).name || (<any>suggestion).primaryText,\n      } as ISuggestionModel<T>;\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}