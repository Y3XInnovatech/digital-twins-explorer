{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { NoOpTracer } from \"./tracers/noop/noOpTracer\";\nimport { getCache } from \"./utils/cache\";\nvar defaultTracer;\nfunction getDefaultTracer() {\n  if (!defaultTracer) {\n    defaultTracer = new NoOpTracer();\n  }\n  return defaultTracer;\n}\n/**\n * Sets the global tracer, enabling tracing for the Azure SDK.\n * @param tracer An OpenTelemetry Tracer instance.\n */\nexport function setTracer(tracer) {\n  var cache = getCache();\n  cache.tracer = tracer;\n}\n/**\n * Retrieves the active tracer, or returns a\n * no-op implementation if one is not set.\n */\nexport function getTracer() {\n  var cache = getCache();\n  if (!cache.tracer) {\n    return getDefaultTracer();\n  }\n  return cache.tracer;\n}","map":{"version":3,"sources":["../../src/tracerProxy.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,UAAU,QAAQ,2BAA2B;AAEtD,SAAS,QAAQ,QAAQ,eAAe;AAExC,IAAI,aAAqB;AAEzB,SAAS,gBAAgB,CAAA,EAAA;EACvB,IAAI,CAAC,aAAa,EAAE;IAClB,aAAa,GAAG,IAAI,UAAU,CAAA,CAAE;EACjC;EACD,OAAO,aAAa;AACtB;AAEA;;;AAGG;AACH,OAAM,SAAU,SAAS,CAAC,MAAc,EAAA;EACtC,IAAM,KAAK,GAAG,QAAQ,CAAA,CAAE;EACxB,KAAK,CAAC,MAAM,GAAG,MAAM;AACvB;AAEA;;;AAGG;AACH,OAAM,SAAU,SAAS,CAAA,EAAA;EACvB,IAAM,KAAK,GAAG,QAAQ,CAAA,CAAE;EACxB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;IACjB,OAAO,gBAAgB,CAAA,CAAE;EAC1B;EACD,OAAO,KAAK,CAAC,MAAM;AACrB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { NoOpTracer } from \"./tracers/noop/noOpTracer\";\nimport { Tracer } from \"@opentelemetry/api\";\nimport { getCache } from \"./utils/cache\";\n\nlet defaultTracer: Tracer;\n\nfunction getDefaultTracer(): Tracer {\n  if (!defaultTracer) {\n    defaultTracer = new NoOpTracer();\n  }\n  return defaultTracer;\n}\n\n/**\n * Sets the global tracer, enabling tracing for the Azure SDK.\n * @param tracer An OpenTelemetry Tracer instance.\n */\nexport function setTracer(tracer: Tracer): void {\n  const cache = getCache();\n  cache.tracer = tracer;\n}\n\n/**\n * Retrieves the active tracer, or returns a\n * no-op implementation if one is not set.\n */\nexport function getTracer(): Tracer {\n  const cache = getCache();\n  if (!cache.tracer) {\n    return getDefaultTracer();\n  }\n  return cache.tracer;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}