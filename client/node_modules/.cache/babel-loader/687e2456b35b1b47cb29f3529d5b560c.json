{"ast":null,"code":"import { getVirtualParent } from './getVirtualParent';\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n *\n * @public\n */\nexport function getParent(child, allowVirtualParents) {\n  if (allowVirtualParents === void 0) {\n    allowVirtualParents = true;\n  }\n  return child && (allowVirtualParents && getVirtualParent(child) || child.parentNode && child.parentNode);\n}","map":{"version":3,"sources":["getParent.ts"],"names":[],"mappings":"AAAA,SAAS,gBAAgB,QAAQ,oBAAoB;AACrD;;;;;;AAMG;AACH,OAAM,SAAU,SAAS,CAAC,KAAkB,EAAE,mBAAmC,EAAA;EAAnC,IAAA,mBAAA,KAAA,KAAA,CAAA,EAAA;IAAA,mBAAA,GAAA,IAAmC;EAAA;EAC/E,OACE,KAAK,KACH,mBAAmB,IAAI,gBAAgB,CAAC,KAAK,CAAC,IAAM,KAAK,CAAC,UAAU,IAAK,KAAK,CAAC,UAA2B,CAAC;AAEjH","sourcesContent":["import { getVirtualParent } from './getVirtualParent';\n/**\n * Gets the element which is the parent of a given element.\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\n * real DOM parent when present.\n *\n * @public\n */\nexport function getParent(child: HTMLElement, allowVirtualParents: boolean = true): HTMLElement | null {\n  return (\n    child &&\n    ((allowVirtualParents && getVirtualParent(child)) || (child.parentNode && (child.parentNode as HTMLElement)))\n  );\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}