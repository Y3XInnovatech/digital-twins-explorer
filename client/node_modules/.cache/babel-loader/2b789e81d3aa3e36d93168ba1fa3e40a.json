{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { concatStyleSetsWithProps } from '@uifabric/merge-styles';\nimport { useCustomizationSettings } from './customizations/useCustomizationSettings';\nvar DefaultFields = ['theme', 'styles'];\nexport function styled(Component, baseStyles, getProps, customizable, pure) {\n  customizable = customizable || {\n    scope: '',\n    fields: undefined\n  };\n  var scope = customizable.scope,\n    _a = customizable.fields,\n    fields = _a === void 0 ? DefaultFields : _a;\n  var Wrapped = React.forwardRef(function (props, forwardedRef) {\n    var styles = React.useRef();\n    var settings = useCustomizationSettings(fields, scope);\n    var customizedStyles = settings.styles,\n      dir = settings.dir,\n      rest = __rest(settings, [\"styles\", \"dir\"]);\n    var additionalProps = getProps ? getProps(props) : undefined;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var cache = styles.current && styles.current.__cachedInputs__ || [];\n    if (!styles.current || customizedStyles !== cache[1] || props.styles !== cache[2]) {\n      // Using styled components as the Component arg will result in nested styling arrays.\n      var concatenatedStyles = function (styleProps) {\n        return concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, props.styles);\n      };\n      // The __cachedInputs__ array is attached to the function and consumed by the\n      // classNamesFunction as a list of keys to include for memoizing classnames.\n      concatenatedStyles.__cachedInputs__ = [baseStyles, customizedStyles, props.styles];\n      concatenatedStyles.__noStyleOverride__ = !customizedStyles && !props.styles;\n      styles.current = concatenatedStyles;\n    }\n    return React.createElement(Component, __assign({\n      ref: forwardedRef\n    }, rest, additionalProps, props, {\n      styles: styles.current\n    }));\n  });\n  // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\n  // able to drop IE 11 support and compile with ES6 libs\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Wrapped.displayName = \"Styled\" + (Component.displayName || Component.name);\n  // This preserves backwards compatibility.\n  var pureComponent = pure ? React.memo(Wrapped) : Wrapped;\n  // Check if the wrapper has a displayName after it has been memoized. Then assign it to the pure component.\n  if (Wrapped.displayName) {\n    pureComponent.displayName = Wrapped.displayName;\n  }\n  return pureComponent;\n}","map":{"version":3,"sources":["styled.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAA4C,wBAAwB,QAAQ,wBAAwB;AACpG,SAAS,wBAAwB,QAAQ,2CAA2C;AAmBpF,IAAM,aAAa,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AAoDzC,OAAM,SAAU,MAAM,CAMpB,SAA2F,EAC3F,UAA0D,EAC1D,QAA+D,EAC/D,YAAiC,EACjC,IAAc,EAAA;EAEd,YAAY,GAAG,YAAY,IAAI;IAAE,KAAK,EAAE,EAAE;IAAE,MAAM,EAAE;EAAS,CAAE;EAEvD,IAAA,KAAA,GAAA,YAAA,CAAA,KAAK;IAAE,EAAA,GAAA,YAAA,CAAA,MAAsB;IAAtB,MAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,aAAA,GAAA,EAAsB;EAErC,IAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,UAAC,KAAsB,EAAE,YAA6B,EAAA;IACrF,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAA,CAAyC;IAEpE,IAAM,QAAQ,GAAG,wBAAwB,CAAC,MAAM,EAAE,KAAK,CAAC;IAChD,IAAA,gBAAA,GAAA,QAAA,CAAA,MAAwB;MAAE,GAAA,GAAA,QAAA,CAAA,GAAG;MAAE,IAAA,GAAA,MAAA,CAAA,QAAA,EAAA,CAAA,QAAA,EAAA,KAAA,CAAA,CAAO;IAC9C,IAAM,eAAe,GAAG,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,SAAS;IAE9D;IACA,IAAM,KAAK,GAAI,MAAM,CAAC,OAAO,IAAK,MAAM,CAAC,OAAe,CAAC,gBAAgB,IAAK,EAAE;IAChF,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,gBAAgB,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,EAAE;MACjF;MACA,IAAM,kBAAkB,GAAmD,SAAA,CAAC,UAAuB,EAAA;QACjG,OAAA,wBAAwB,CAAC,UAAU,EAAE,UAAU,EAAE,gBAAgB,EAAE,KAAK,CAAC,MAAM,CAAC;MAAhF,CAAgF;MAElF;MACA;MACC,kBAA4D,CAAC,gBAAgB,GAAG,CAC/E,UAAU,EACV,gBAAgB,EAChB,KAAK,CAAC,MAAM,CACb;MAEA,kBAA4D,CAAC,mBAAmB,GAC/E,CAAC,gBAAgB,IAAI,CAAC,KAAK,CAAC,MAAM;MAEpC,MAAM,CAAC,OAAO,GAAG,kBAA2D;IAC7E;IAED,OAAO,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA,QAAA,CAAA;MAAC,GAAG,EAAE;IAAY,CAAA,EAAM,IAAI,EAAM,eAAe,EAAM,KAAK,EAAA;MAAE,MAAM,EAAE,MAAM,CAAC;IAAO,CAAA,CAAA,CAAI;EAC3G,CAAC,CAAC;EACF;EACA;EACA;EACA,OAAO,CAAC,WAAW,GAAG,QAAA,IAAS,SAAS,CAAC,WAAW,IAAK,SAAiB,CAAC,IAAI,CAAE;EAEjF;EACA,IAAM,aAAa,GAAG,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,OAAO;EAC1D;EACA,IAAI,OAAO,CAAC,WAAW,EAAE;IACvB,aAAa,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW;EAChD;EAED,OAAO,aAAa;AACtB","sourcesContent":["import * as React from 'react';\nimport { IStyleSet, IStyleFunctionOrObject, concatStyleSetsWithProps } from '@uifabric/merge-styles';\nimport { useCustomizationSettings } from './customizations/useCustomizationSettings';\n\nexport interface IPropsWithStyles<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>> {\n  styles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;\n}\n\nexport interface ICustomizableProps {\n  /**\n   * Name of scope, which can be targeted using the Customizer.\n   */\n  scope: string;\n\n  /**\n   * List of fields which can be customized.\n   * @defaultvalue [ 'theme', 'styles' ]\n   */\n  fields?: string[];\n}\n\nconst DefaultFields = ['theme', 'styles'];\n\nexport type StyleFunction<TStyleProps, TStyleSet> = IStyleFunctionOrObject<TStyleProps, TStyleSet> & {\n  /** Cache for all style functions. */\n  __cachedInputs__: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[];\n\n  /** True if no styles prop or styles from Customizer is passed to wrapped component. */\n  __noStyleOverride__: boolean;\n};\n\n/**\n * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve\n * getStyles functional props, and mix customized props passed in using concatStyleSets.\n *\n * @example\n * ```tsx\n * export const Toggle = styled(\n *   ToggleBase,\n *   props => ({ root: { background: 'red' }})\n * );\n * ```\n * @param Component - The unstyled base component to render, which receives styles.\n * @param baseStyles - The styles which should be curried with the component.\n * @param getProps - A helper which provides default props.\n * @param customizable - An object which defines which props can be customized using the Customizer.\n * @param pure - A boolean indicating if the component should avoid re-rendering when props haven't changed.\n * Note that pure should not be used on components which allow children, or take in complex objects or\n * arrays as props which could mutate on every render.\n */\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>\n>(\n  Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean,\n): React.FunctionComponent<TComponentProps>;\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet> & React.RefAttributes<TRef>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TRef = unknown\n>(\n  Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean,\n): React.ForwardRefExoticComponent<React.PropsWithoutRef<TComponentProps> & React.RefAttributes<TRef>>;\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet> & React.RefAttributes<TRef>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TRef = unknown\n>(\n  Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean,\n) {\n  customizable = customizable || { scope: '', fields: undefined };\n\n  const { scope, fields = DefaultFields } = customizable;\n\n  const Wrapped = React.forwardRef((props: TComponentProps, forwardedRef: React.Ref<TRef>) => {\n    const styles = React.useRef<StyleFunction<TStyleProps, TStyleSet>>();\n\n    const settings = useCustomizationSettings(fields, scope);\n    const { styles: customizedStyles, dir, ...rest } = settings;\n    const additionalProps = getProps ? getProps(props) : undefined;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const cache = (styles.current && (styles.current as any).__cachedInputs__) || [];\n    if (!styles.current || customizedStyles !== cache[1] || props.styles !== cache[2]) {\n      // Using styled components as the Component arg will result in nested styling arrays.\n      const concatenatedStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> = (styleProps: TStyleProps) =>\n        concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, props.styles);\n\n      // The __cachedInputs__ array is attached to the function and consumed by the\n      // classNamesFunction as a list of keys to include for memoizing classnames.\n      (concatenatedStyles as StyleFunction<TStyleProps, TStyleSet>).__cachedInputs__ = [\n        baseStyles,\n        customizedStyles,\n        props.styles,\n      ];\n\n      (concatenatedStyles as StyleFunction<TStyleProps, TStyleSet>).__noStyleOverride__ =\n        !customizedStyles && !props.styles;\n\n      styles.current = concatenatedStyles as StyleFunction<TStyleProps, TStyleSet>;\n    }\n\n    return <Component ref={forwardedRef} {...rest} {...additionalProps} {...props} styles={styles.current} />;\n  });\n  // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\n  // able to drop IE 11 support and compile with ES6 libs\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Wrapped.displayName = `Styled${Component.displayName || (Component as any).name}`;\n\n  // This preserves backwards compatibility.\n  const pureComponent = pure ? React.memo(Wrapped) : Wrapped;\n  // Check if the wrapper has a displayName after it has been memoized. Then assign it to the pure component.\n  if (Wrapped.displayName) {\n    pureComponent.displayName = Wrapped.displayName;\n  }\n\n  return pureComponent;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}