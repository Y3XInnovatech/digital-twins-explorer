{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { NoOpSpan } from \"./noOpSpan\";\n/**\n * A no-op implementation of Tracer that can be used when tracing\n * is disabled.\n */\nvar NoOpTracer = /** @class */function () {\n  function NoOpTracer() {}\n  /**\n   * Starts a new Span.\n   * @param _name The name of the span.\n   * @param _options The SpanOptions used during Span creation.\n   */\n  NoOpTracer.prototype.startSpan = function (_name, _options) {\n    return new NoOpSpan();\n  };\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n  NoOpTracer.prototype.getCurrentSpan = function () {\n    return new NoOpSpan();\n  };\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param fn The function to be executed.\n   */\n  NoOpTracer.prototype.withSpan = function (_span, fn) {\n    return fn();\n  };\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n  NoOpTracer.prototype.bind = function (target, _span) {\n    return target;\n  };\n  return NoOpTracer;\n}();\nexport { NoOpTracer };","map":{"version":3,"sources":["../../../../src/tracers/noop/noOpTracer.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,QAAQ,QAAQ,YAAY;AAGrC;;;AAGG;AACH,IAAA,UAAA,GAAA,aAAA,YAAA;EAAA,SAAA,UAAA,CAAA,EAAA,CAkCA;EAjCE;;;;AAIG;EACH,UAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,KAAa,EAAE,QAAsB,EAAA;IAC7C,OAAO,IAAI,QAAQ,CAAA,CAAE;EACvB,CAAC;EAED;;AAEG;EACH,UAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACE,OAAO,IAAI,QAAQ,CAAA,CAAE;EACvB,CAAC;EAED;;;;AAIG;EACH,UAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAA0D,KAAW,EAAE,EAAK,EAAA;IAC1E,OAAO,EAAE,CAAA,CAAE;EACb,CAAC;EAED;;;;AAIG;EACH,UAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,UAAQ,MAAS,EAAE,KAAY,EAAA;IAC7B,OAAO,MAAM;EACf,CAAC;EACH,OAAA,UAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { NoOpSpan } from \"./noOpSpan\";\nimport { Tracer, Span, SpanOptions } from \"@opentelemetry/api\";\n\n/**\n * A no-op implementation of Tracer that can be used when tracing\n * is disabled.\n */\nexport class NoOpTracer implements Tracer {\n  /**\n   * Starts a new Span.\n   * @param _name The name of the span.\n   * @param _options The SpanOptions used during Span creation.\n   */\n  startSpan(_name: string, _options?: SpanOptions): Span {\n    return new NoOpSpan();\n  }\n\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n  getCurrentSpan(): Span {\n    return new NoOpSpan();\n  }\n\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param fn The function to be executed.\n   */\n  withSpan<T extends (...args: unknown[]) => ReturnType<T>>(_span: Span, fn: T): ReturnType<T> {\n    return fn();\n  }\n\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n  bind<T>(target: T, _span?: Span): T {\n    return target;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}