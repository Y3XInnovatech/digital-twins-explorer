{"ast":null,"code":"var _jsxFileName = \"/home/saharsh/digital-twins-explorer/client/src/components/ConsoleComponent/ConsoleComponent.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { Component } from \"react\";\nimport Terminal from \"react-console-emulator\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { apiService } from \"../../services/ApiService\";\nimport { eventService } from \"../../services/EventService\";\nimport { ModelService } from \"../../services/ModelService\";\nimport { REL_TYPE_INCOMING } from \"../../services/Constants\";\nimport \"./ConsoleComponent.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ConsoleComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.patchTwin = async (arg1, arg2, arg3, arg4) => {\n      if (arg1 && arg2 && arg3 && arg4) {\n        try {\n          const twin = await apiService.getTwinById(arg1);\n          const properties = await new ModelService().getProperties(twin.$metadata.$model);\n          const prop = properties[arg3];\n          if (!prop) {\n            this.pushToStdout(\"*** Property doesn\\\"t exist!\");\n            return;\n          }\n          let newArg4 = arg4;\n          switch (prop.schema) {\n            case \"dtmi:dtdl:instance:Schema:integer;2\":\n              newArg4 = parseInt(arg4, 10);\n              break;\n            case \"dtmi:dtdl:instance:Schema:double;2\":\n            case \"dtmi:dtdl:instance:Schema:long;2\":\n            case \"dtmi:dtdl:instance:Schema:float;2\":\n              newArg4 = parseFloat(arg4);\n              break;\n            case \"dtmi:dtdl:instance:Schema:boolean;2\":\n              newArg4 = arg4.toLowerCase() === \"true\";\n              break;\n            default:\n              break;\n          }\n          const patch = {\n            op: arg2,\n            path: `/${arg3}`,\n            value: newArg4\n          };\n          const result = await apiService.updateTwin(arg1, [patch]);\n          this.pushToStdout(JSON.stringify(result, null, 2));\n        } catch (exc) {\n          this.pushToStdout(`*** Error patching twin: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.getTwin = async arg1 => {\n      if (arg1) {\n        try {\n          const result = await apiService.getTwinById(arg1);\n          this.pushToStdout(JSON.stringify(result, null, 2));\n        } catch (exc) {\n          this.pushToStdout(`*** Error retrieving twin from Azure Digital Twins: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.addTwin = async (arg1, arg2) => {\n      if (arg1 && arg2) {\n        try {\n          const modelService = new ModelService();\n          const payload = await modelService.createPayload(arg1);\n          const result = await apiService.addTwin(arg2, payload);\n          eventService.publishCreateTwin({\n            $dtId: arg2,\n            $metadata: {\n              $model: arg1\n            }\n          });\n          this.pushToStdout(JSON.stringify(result, null, 2));\n        } catch (exc) {\n          this.pushToStdout(`*** Error creating twin from Azure Digital Twins: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.deleteTwin = async arg1 => {\n      if (arg1) {\n        try {\n          await apiService.deleteTwin(arg1);\n          eventService.publishDeleteTwin(arg1);\n          this.pushToStdout(`*** Deleted Twin with ID: ${arg1}`);\n        } catch (exc) {\n          this.pushToStdout(`*** Error deleting twin from Azure Digital Twins: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.deleteAllTwins = async () => {\n      try {\n        const allTwins = await apiService.getAllTwins();\n        const ids = allTwins ? allTwins.map(twin => twin.$dtId) : [];\n        await apiService.deleteAllTwins(ids);\n        eventService.publishClearTwinsData();\n        this.pushToStdout(`*** Deleted all twins.`);\n      } catch (exc) {\n        this.pushToStdout(`*** Error deleting twins: ${exc}`);\n      }\n    };\n    this.getRelationships = async (arg1, type) => {\n      if (arg1) {\n        try {\n          const edgeList = await apiService.queryRelationships([arg1], type);\n          if (edgeList !== null) {\n            if (edgeList.length <= 0) {\n              this.pushToStdout(`*** No relationships found.`);\n            }\n            for (const edge of edgeList) {\n              this.pushToStdout(JSON.stringify(edge, null, 2));\n            }\n          }\n        } catch (exc) {\n          this.pushToStdout(`*** Error getting relationships: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.getIncomingRelationships = async arg1 => {\n      await this.getRelationships(arg1, REL_TYPE_INCOMING);\n    };\n    this.addRelationship = async (arg1, arg2, arg3) => {\n      if (arg1 && arg2 && arg3) {\n        try {\n          const relId = uuidv4();\n          const result = await apiService.addRelationship(arg1, arg2, arg3, relId);\n          eventService.publishAddRelationship({\n            $sourceId: arg1,\n            $relationshipId: relId,\n            $relationshipName: arg3,\n            $targetId: arg2\n          });\n          this.pushToStdout(JSON.stringify(result, null, 2));\n        } catch (exc) {\n          this.pushToStdout(`*** Error creating relationship: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.deleteRelationship = async (arg1, arg2) => {\n      if (arg1 && arg2) {\n        try {\n          await apiService.deleteRelationship(arg1, arg2);\n          eventService.publishDeleteRelationship({\n            $sourceId: arg1,\n            $relationshipId: arg2\n          });\n          this.pushToStdout(`*** Deleted relationship with ID: ${arg2}`);\n        } catch (exc) {\n          this.pushToStdout(`*** Error deleting relationship: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.getModel = async arg1 => {\n      if (arg1) {\n        try {\n          const result = await apiService.getModelById(arg1);\n          this.pushToStdout(JSON.stringify(result, null, 2));\n        } catch (exc) {\n          this.pushToStdout(`*** Error retrieving model from Azure Digital Twins: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.getModels = async () => {\n      try {\n        const result = await apiService.queryModels();\n        this.pushToStdout(JSON.stringify(result, null, 2));\n      } catch (exc) {\n        this.pushToStdout(`*** Error retrieving models from Azure Digital Twins: ${exc}`);\n      }\n    };\n    this.addModel = async arg1 => {\n      if (arg1) {\n        try {\n          const model = JSON.parse(arg1);\n          const result = await apiService.addModels([model]);\n          eventService.publishCreateModel();\n          this.pushToStdout(JSON.stringify(result, null, 2));\n        } catch (exc) {\n          this.pushToStdout(`*** Error creating model - Ensure there are no spaces in your input. You should NOT escape your JSON string: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.deleteModel = async arg1 => {\n      if (arg1) {\n        try {\n          await apiService.deleteModel(arg1);\n          eventService.publishDeleteModel(arg1);\n          this.pushToStdout(`*** Deleted model with ID: ${arg1}`);\n        } catch (exc) {\n          this.pushToStdout(`*** Error deleting model: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.deleteAllModels = async () => {\n      try {\n        await new ModelService().deleteAll();\n        eventService.publishClearModelsData();\n        this.pushToStdout(`*** All models deleted.`);\n      } catch (exc) {\n        this.pushToStdout(`*** Error deleting all models: ${exc}`);\n      }\n    };\n    this.query = async args => {\n      if (args) {\n        try {\n          const query = `${Array.from(args).join(\" \")}`;\n          const result = await apiService.queryTwins(query);\n          this.pushToStdout(JSON.stringify(result, null, 2));\n        } catch (exc) {\n          this.pushToStdout(`*** Error retrieving data from Azure Digital Twins: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.observeProperties = async (arg1, arg2) => {\n      if (arg1 && arg2) {\n        try {\n          const twin = await apiService.getTwinById(arg1);\n          if (twin[arg2]) {\n            this.pushToStdout(`*** Observed property ${arg2} for TwinId '${arg1}': ${twin[arg2]}`);\n          } else {\n            this.pushToStdout(`*** Property ${arg2} not found for TwinId '${arg1}'`);\n          }\n        } catch (exc) {\n          this.pushToStdout(`*** Error observing properties: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.getRelationship = async (arg1, arg2) => {\n      if (arg1 && arg2) {\n        try {\n          const relationship = await apiService.getRelationship(arg1, arg2);\n          if (relationship) {\n            this.pushToStdout(`${JSON.stringify(relationship, null, 2)}`);\n          } else {\n            this.pushToStdout(`*** Relationship ${arg2} not found for TwinId '${arg1}'`);\n          }\n        } catch (exc) {\n          this.pushToStdout(`*** Error getting the relationship: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.getEventRoutes = async () => {\n      try {\n        const eventRoutes = await apiService.getEventRoutes();\n        this.pushToStdout(`${JSON.stringify(eventRoutes, null, 2)}`);\n      } catch (exc) {\n        this.pushToStdout(`*** Error getting the event routes: ${exc}`);\n      }\n    };\n    this.getEventRoute = async arg1 => {\n      if (arg1) {\n        try {\n          const eventRoute = await apiService.getEventRoute(arg1);\n          if (eventRoute) {\n            this.pushToStdout(`${JSON.stringify(eventRoute, null, 2)}`);\n          } else {\n            this.pushToStdout(`*** Event route with id ${arg1} not found.`);\n          }\n        } catch (exc) {\n          this.pushToStdout(`*** Error getting the event route: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.addEventRoute = async (arg1, arg2, arg3) => {\n      if (arg1 && arg2 && arg3) {\n        try {\n          const eventRoute = await apiService.addEventRoute(arg1, arg2, arg3);\n          this.pushToStdout(`${JSON.stringify(eventRoute, null, 2)}`);\n        } catch (exc) {\n          this.pushToStdout(`*** Error creating the event route: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.deleteEventRoute = async arg1 => {\n      if (arg1) {\n        try {\n          await apiService.deleteEventRoute(arg1);\n          this.pushToStdout(`*** Deleted event route with ID: ${arg1}`);\n        } catch (exc) {\n          this.pushToStdout(`*** Error deleting the event route: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.decommissionModel = async arg1 => {\n      if (arg1) {\n        try {\n          await apiService.decommissionModel(arg1);\n          this.pushToStdout(`*** Decommission Model with ID: ${arg1}`);\n        } catch (exc) {\n          this.pushToStdout(`*** Error decommissioning model: ${exc}`);\n        }\n      } else {\n        this.pushToStdout(\"*** Not enough params\");\n      }\n    };\n    this.pushToStdout = message => {\n      const terminal = this.terminal ? this.terminal.current : null;\n      if (terminal) {\n        terminal.pushToStdout(message);\n        terminal.scrollToBottom();\n      }\n    };\n    this.commands = {\n      patchtwin: {\n        description: \"patch a digital twin\",\n        usage: \"patchtwin <twinId:string> <operation:string> <propertyName:string> <value:string>\",\n        fn: (arg1, arg2, arg3, arg4) => {\n          this.patchTwin(arg1, arg2, arg3, arg4);\n        }\n      },\n      gettwin: {\n        description: \"get a digital twin\",\n        usage: \"gettwin <twinId:string>\",\n        fn: arg1 => {\n          this.getTwin(arg1);\n        }\n      },\n      addtwin: {\n        description: \"add a digital twin\",\n        usage: \"addtwin <modelId:string> <newTwinId:string>\",\n        fn: (arg1, arg2) => {\n          this.addTwin(arg1, arg2);\n        }\n      },\n      deltwin: {\n        description: \"delete a digital twin\",\n        usage: \"deltwin <twinId:string>\",\n        fn: arg1 => {\n          this.deleteTwin(arg1);\n        }\n      },\n      delalltwins: {\n        description: \"delete all digital twins\",\n        usage: \"delalltwins\",\n        fn: () => {\n          this.deleteAllTwins();\n        }\n      },\n      getrelationships: {\n        description: \"get relationships\",\n        usage: \"getrelationships <twinId:string>\",\n        fn: arg1 => {\n          this.getRelationships(arg1);\n        }\n      },\n      getrelationship: {\n        description: \"get a specific relationship by id\",\n        usage: \"getRelationship <sourceTwinId:string> <relationshipId:string>\",\n        fn: (arg1, arg2) => {\n          this.getRelationship(arg1, arg2);\n        }\n      },\n      getincomrel: {\n        description: \"get incoming relationship\",\n        usage: \"getrel <twinId:string>\",\n        fn: arg1 => {\n          this.getIncomingRelationships(arg1);\n        }\n      },\n      addrel: {\n        description: \"add relationship\",\n        usage: \"addrel <sourceId:string> <targetId:string> <relationshipName:string>\",\n        fn: (arg1, arg2, arg3) => {\n          this.addRelationship(arg1, arg2, arg3);\n        }\n      },\n      delrel: {\n        description: \"delete relationship\",\n        usage: \"delrel <twinId:string> <relationshipId:string>\",\n        fn: (arg1, arg2) => {\n          this.deleteRelationship(arg1, arg2);\n        }\n      },\n      getmodel: {\n        description: \"get model info\",\n        usage: \"getmodel <modelId:string>\",\n        fn: arg1 => {\n          this.getModel(arg1);\n        }\n      },\n      getmodels: {\n        description: \"get models info\",\n        usage: \"getmodels <modelId:string>\",\n        fn: arg1 => {\n          this.getModels(arg1);\n        }\n      },\n      addmodel: {\n        description: \"add model (ensure JSON has no spaces and is not escaped)\",\n        usage: \"addmodel <modelJSON:string>\",\n        fn: arg1 => {\n          this.addModel(arg1);\n        }\n      },\n      delmodel: {\n        description: \"delete model\",\n        usage: \"delmodel <modelId:string>\",\n        fn: arg1 => {\n          this.deleteModel(arg1);\n        }\n      },\n      delallmodels: {\n        description: \"deletes all models in your instance\",\n        usage: \"delallmodels\",\n        fn: () => {\n          this.deleteAllModels();\n        }\n      },\n      query: {\n        description: \"query twins\",\n        usage: \"query <string>\",\n        fn: (...args) => {\n          this.query(args);\n        }\n      },\n      observeproperties: {\n        description: \"observes the selected properties on the selected twins\",\n        usage: \"observeproperties <twinId:string> <propertyName:string>\",\n        fn: (arg1, arg2) => {\n          this.observeProperties(arg1, arg2);\n        }\n      },\n      geteventroutes: {\n        description: \"get all the event routes\",\n        usage: \"geteventroutes\",\n        fn: () => {\n          this.getEventRoutes();\n        }\n      },\n      geteventroute: {\n        description: \"get a specific route by id\",\n        usage: \"geteventroute <routeId:string>\",\n        fn: arg1 => {\n          this.getEventRoute(arg1);\n        }\n      },\n      addeventroute: {\n        description: \"creates a new event route\",\n        usage: \"addeventroute <routeId:string> <endpointId:string> <filter:bool>\",\n        fn: (arg1, arg2, arg3) => {\n          this.addEventRoute(arg1, arg2, arg3);\n        }\n      },\n      deleventroute: {\n        description: \"deletes an event route by the id\",\n        usage: \"deleventroute <routeId:string>\",\n        fn: arg1 => {\n          this.deleteEventRoute(arg1);\n        }\n      },\n      decommissionmodel: {\n        description: \"decommission model\",\n        usage: \"decommissionmodel <modelId:string>\",\n        fn: arg1 => {\n          this.decommissionModel(arg1);\n        }\n      }\n    };\n    this.terminal = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    eventService.subscribeFocusConsole(() => {\n      if (this.terminal.current) {\n        this.terminal.current.focusTerminal();\n      }\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(Terminal, {\n      welcomeMessage: \"Azure Digital Twins Explorer command prompt\",\n      commands: this.commands,\n      contentClassName: \"cc-content\",\n      inputClassName: \"cc-input\",\n      messageClassName: \"cc-message\",\n      promptLabel: \"$>\",\n      className: \"cc-console\",\n      ref: this.terminal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Terminal","v4","uuidv4","apiService","eventService","ModelService","REL_TYPE_INCOMING","jsxDEV","_jsxDEV","ConsoleComponent","constructor","props","patchTwin","arg1","arg2","arg3","arg4","twin","getTwinById","properties","getProperties","$metadata","$model","prop","pushToStdout","newArg4","schema","parseInt","parseFloat","toLowerCase","patch","op","path","value","result","updateTwin","JSON","stringify","exc","getTwin","addTwin","modelService","payload","createPayload","publishCreateTwin","$dtId","deleteTwin","publishDeleteTwin","deleteAllTwins","allTwins","getAllTwins","ids","map","publishClearTwinsData","getRelationships","type","edgeList","queryRelationships","length","edge","getIncomingRelationships","addRelationship","relId","publishAddRelationship","$sourceId","$relationshipId","$relationshipName","$targetId","deleteRelationship","publishDeleteRelationship","getModel","getModelById","getModels","queryModels","addModel","model","parse","addModels","publishCreateModel","deleteModel","publishDeleteModel","deleteAllModels","deleteAll","publishClearModelsData","query","args","Array","from","join","queryTwins","observeProperties","getRelationship","relationship","getEventRoutes","eventRoutes","getEventRoute","eventRoute","addEventRoute","deleteEventRoute","decommissionModel","message","terminal","current","scrollToBottom","commands","patchtwin","description","usage","fn","gettwin","addtwin","deltwin","delalltwins","getrelationships","getrelationship","getincomrel","addrel","delrel","getmodel","getmodels","addmodel","delmodel","delallmodels","observeproperties","geteventroutes","geteventroute","addeventroute","deleventroute","decommissionmodel","createRef","componentDidMount","subscribeFocusConsole","focusTerminal","render","welcomeMessage","contentClassName","inputClassName","messageClassName","promptLabel","className","ref","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/saharsh/digital-twins-explorer/client/src/components/ConsoleComponent/ConsoleComponent.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport React, { Component } from \"react\";\nimport Terminal from \"react-console-emulator\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { apiService } from \"../../services/ApiService\";\nimport { eventService } from \"../../services/EventService\";\nimport { ModelService } from \"../../services/ModelService\";\nimport { REL_TYPE_INCOMING } from \"../../services/Constants\";\n\nimport \"./ConsoleComponent.scss\";\n\nexport class ConsoleComponent extends Component {\n\n  constructor(props) {\n    super(props);\n    this.terminal = React.createRef();\n  }\n\n  componentDidMount() {\n    eventService.subscribeFocusConsole(() => {\n      if (this.terminal.current) {\n        this.terminal.current.focusTerminal();\n      }\n    });\n  }\n\n  patchTwin = async (arg1, arg2, arg3, arg4) => {\n    if (arg1 && arg2 && arg3 && arg4) {\n      try {\n        const twin = await apiService.getTwinById(arg1);\n        const properties = await new ModelService().getProperties(twin.$metadata.$model);\n        const prop = properties[arg3];\n\n        if (!prop) {\n          this.pushToStdout(\"*** Property doesn\\\"t exist!\");\n          return;\n        }\n\n        let newArg4 = arg4;\n        switch (prop.schema) {\n          case \"dtmi:dtdl:instance:Schema:integer;2\":\n            newArg4 = parseInt(arg4, 10);\n            break;\n          case \"dtmi:dtdl:instance:Schema:double;2\":\n          case \"dtmi:dtdl:instance:Schema:long;2\":\n          case \"dtmi:dtdl:instance:Schema:float;2\":\n            newArg4 = parseFloat(arg4);\n            break;\n          case \"dtmi:dtdl:instance:Schema:boolean;2\":\n            newArg4 = (arg4.toLowerCase() === \"true\");\n            break;\n          default:\n            break;\n        }\n\n        const patch = { op: arg2, path: `/${arg3}`, value: newArg4 };\n        const result = await apiService.updateTwin(arg1, [ patch ]);\n        this.pushToStdout(JSON.stringify(result, null, 2));\n      } catch (exc) {\n        this.pushToStdout(`*** Error patching twin: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  getTwin = async arg1 => {\n    if (arg1) {\n      try {\n        const result = await apiService.getTwinById(arg1);\n        this.pushToStdout(JSON.stringify(result, null, 2));\n      } catch (exc) {\n        this.pushToStdout(`*** Error retrieving twin from Azure Digital Twins: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  addTwin = async (arg1, arg2) => {\n    if (arg1 && arg2) {\n      try {\n        const modelService = new ModelService();\n        const payload = await modelService.createPayload(arg1);\n        const result = await apiService.addTwin(arg2, payload);\n        eventService.publishCreateTwin({ $dtId: arg2, $metadata: { $model: arg1 } });\n        this.pushToStdout(JSON.stringify(result, null, 2));\n      } catch (exc) {\n        this.pushToStdout(`*** Error creating twin from Azure Digital Twins: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  deleteTwin = async arg1 => {\n    if (arg1) {\n      try {\n        await apiService.deleteTwin(arg1);\n        eventService.publishDeleteTwin(arg1);\n        this.pushToStdout(`*** Deleted Twin with ID: ${arg1}`);\n      } catch (exc) {\n        this.pushToStdout(`*** Error deleting twin from Azure Digital Twins: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  deleteAllTwins = async () => {\n    try {\n      const allTwins = await apiService.getAllTwins();\n      const ids = allTwins ? allTwins.map(twin => twin.$dtId) : [];\n      await apiService.deleteAllTwins(ids);\n      eventService.publishClearTwinsData();\n      this.pushToStdout(`*** Deleted all twins.`);\n    } catch (exc) {\n      this.pushToStdout(`*** Error deleting twins: ${exc}`);\n    }\n  }\n\n  getRelationships = async (arg1, type) => {\n    if (arg1) {\n      try {\n        const edgeList = await apiService.queryRelationships([ arg1 ], type);\n        if (edgeList !== null) {\n          if (edgeList.length <= 0) {\n            this.pushToStdout(`*** No relationships found.`);\n          }\n\n          for (const edge of edgeList) {\n            this.pushToStdout(JSON.stringify(edge, null, 2));\n          }\n        }\n      } catch (exc) {\n        this.pushToStdout(`*** Error getting relationships: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  getIncomingRelationships = async arg1 => {\n    await this.getRelationships(arg1, REL_TYPE_INCOMING);\n  }\n\n  addRelationship = async (arg1, arg2, arg3) => {\n    if (arg1 && arg2 && arg3) {\n      try {\n        const relId = uuidv4();\n        const result = await apiService.addRelationship(arg1, arg2, arg3, relId);\n        eventService.publishAddRelationship({ $sourceId: arg1, $relationshipId: relId, $relationshipName: arg3, $targetId: arg2 });\n        this.pushToStdout(JSON.stringify(result, null, 2));\n      } catch (exc) {\n        this.pushToStdout(`*** Error creating relationship: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  deleteRelationship = async (arg1, arg2) => {\n    if (arg1 && arg2) {\n      try {\n        await apiService.deleteRelationship(arg1, arg2);\n        eventService.publishDeleteRelationship({ $sourceId: arg1, $relationshipId: arg2 });\n        this.pushToStdout(`*** Deleted relationship with ID: ${arg2}`);\n      } catch (exc) {\n        this.pushToStdout(`*** Error deleting relationship: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  getModel = async arg1 => {\n    if (arg1) {\n      try {\n        const result = await apiService.getModelById(arg1);\n        this.pushToStdout(JSON.stringify(result, null, 2));\n      } catch (exc) {\n        this.pushToStdout(`*** Error retrieving model from Azure Digital Twins: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  getModels = async () => {\n    try {\n      const result = await apiService.queryModels();\n      this.pushToStdout(JSON.stringify(result, null, 2));\n    } catch (exc) {\n      this.pushToStdout(`*** Error retrieving models from Azure Digital Twins: ${exc}`);\n    }\n  }\n\n  addModel = async arg1 => {\n    if (arg1) {\n      try {\n        const model = JSON.parse(arg1);\n        const result = await apiService.addModels([ model ]);\n        eventService.publishCreateModel();\n        this.pushToStdout(JSON.stringify(result, null, 2));\n      } catch (exc) {\n        this.pushToStdout(\n          `*** Error creating model - Ensure there are no spaces in your input. You should NOT escape your JSON string: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  deleteModel = async arg1 => {\n    if (arg1) {\n      try {\n        await apiService.deleteModel(arg1);\n        eventService.publishDeleteModel(arg1);\n        this.pushToStdout(`*** Deleted model with ID: ${arg1}`);\n      } catch (exc) {\n        this.pushToStdout(`*** Error deleting model: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  deleteAllModels = async () => {\n    try {\n      await new ModelService().deleteAll();\n      eventService.publishClearModelsData();\n      this.pushToStdout(`*** All models deleted.`);\n    } catch (exc) {\n      this.pushToStdout(`*** Error deleting all models: ${exc}`);\n    }\n  }\n\n  query = async args => {\n    if (args) {\n      try {\n        const query = `${Array.from(args).join(\" \")}`;\n        const result = await apiService.queryTwins(query);\n        this.pushToStdout(JSON.stringify(result, null, 2));\n      } catch (exc) {\n        this.pushToStdout(`*** Error retrieving data from Azure Digital Twins: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  observeProperties = async (arg1, arg2) => {\n    if (arg1 && arg2) {\n      try {\n        const twin = await apiService.getTwinById(arg1);\n        if (twin[arg2]) {\n          this.pushToStdout(`*** Observed property ${arg2} for TwinId '${arg1}': ${twin[arg2]}`);\n        } else {\n          this.pushToStdout(`*** Property ${arg2} not found for TwinId '${arg1}'`);\n        }\n      } catch (exc) {\n        this.pushToStdout(`*** Error observing properties: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  getRelationship = async (arg1, arg2) => {\n    if (arg1 && arg2) {\n      try {\n        const relationship = await apiService.getRelationship(arg1, arg2);\n        if (relationship) {\n          this.pushToStdout(`${JSON.stringify(relationship, null, 2)}`);\n        } else {\n          this.pushToStdout(`*** Relationship ${arg2} not found for TwinId '${arg1}'`);\n        }\n      } catch (exc) {\n        this.pushToStdout(`*** Error getting the relationship: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  getEventRoutes = async () => {\n    try {\n      const eventRoutes = await apiService.getEventRoutes();\n      this.pushToStdout(`${JSON.stringify(eventRoutes, null, 2)}`);\n    } catch (exc) {\n      this.pushToStdout(`*** Error getting the event routes: ${exc}`);\n    }\n  }\n\n  getEventRoute = async arg1 => {\n    if (arg1) {\n      try {\n        const eventRoute = await apiService.getEventRoute(arg1);\n        if (eventRoute) {\n          this.pushToStdout(`${JSON.stringify(eventRoute, null, 2)}`);\n        } else {\n          this.pushToStdout(`*** Event route with id ${arg1} not found.`);\n        }\n      } catch (exc) {\n        this.pushToStdout(`*** Error getting the event route: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  addEventRoute = async (arg1, arg2, arg3) => {\n    if (arg1 && arg2 && arg3) {\n      try {\n        const eventRoute = await apiService.addEventRoute(arg1, arg2, arg3);\n        this.pushToStdout(`${JSON.stringify(eventRoute, null, 2)}`);\n      } catch (exc) {\n        this.pushToStdout(`*** Error creating the event route: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  deleteEventRoute = async arg1 => {\n    if (arg1) {\n      try {\n        await apiService.deleteEventRoute(arg1);\n        this.pushToStdout(`*** Deleted event route with ID: ${arg1}`);\n      } catch (exc) {\n        this.pushToStdout(`*** Error deleting the event route: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  decommissionModel = async arg1 => {\n    if (arg1) {\n      try {\n        await apiService.decommissionModel(arg1);\n        this.pushToStdout(`*** Decommission Model with ID: ${arg1}`);\n      } catch (exc) {\n        this.pushToStdout(`*** Error decommissioning model: ${exc}`);\n      }\n    } else {\n      this.pushToStdout(\"*** Not enough params\");\n    }\n  }\n\n  pushToStdout = message => {\n    const terminal = this.terminal ? this.terminal.current : null;\n    if (terminal) {\n      terminal.pushToStdout(message);\n      terminal.scrollToBottom();\n    }\n  }\n\n  commands = {\n    patchtwin: {\n      description: \"patch a digital twin\",\n      usage: \"patchtwin <twinId:string> <operation:string> <propertyName:string> <value:string>\",\n      fn: (arg1, arg2, arg3, arg4) => {\n        this.patchTwin(arg1, arg2, arg3, arg4);\n      }\n    },\n    gettwin: {\n      description: \"get a digital twin\",\n      usage: \"gettwin <twinId:string>\",\n      fn: arg1 => {\n        this.getTwin(arg1);\n      }\n    },\n    addtwin: {\n      description: \"add a digital twin\",\n      usage: \"addtwin <modelId:string> <newTwinId:string>\",\n      fn: (arg1, arg2) => {\n        this.addTwin(arg1, arg2);\n      }\n    },\n    deltwin: {\n      description: \"delete a digital twin\",\n      usage: \"deltwin <twinId:string>\",\n      fn: arg1 => {\n        this.deleteTwin(arg1);\n      }\n    },\n    delalltwins: {\n      description: \"delete all digital twins\",\n      usage: \"delalltwins\",\n      fn: () => {\n        this.deleteAllTwins();\n      }\n    },\n    getrelationships: {\n      description: \"get relationships\",\n      usage: \"getrelationships <twinId:string>\",\n      fn: arg1 => {\n        this.getRelationships(arg1);\n      }\n    },\n    getrelationship: {\n      description: \"get a specific relationship by id\",\n      usage: \"getRelationship <sourceTwinId:string> <relationshipId:string>\",\n      fn: (arg1, arg2) => {\n        this.getRelationship(arg1, arg2);\n      }\n    },\n    getincomrel: {\n      description: \"get incoming relationship\",\n      usage: \"getrel <twinId:string>\",\n      fn: arg1 => {\n        this.getIncomingRelationships(arg1);\n      }\n    },\n    addrel: {\n      description: \"add relationship\",\n      usage: \"addrel <sourceId:string> <targetId:string> <relationshipName:string>\",\n      fn: (arg1, arg2, arg3) => {\n        this.addRelationship(arg1, arg2, arg3);\n      }\n    },\n    delrel: {\n      description: \"delete relationship\",\n      usage: \"delrel <twinId:string> <relationshipId:string>\",\n      fn: (arg1, arg2) => {\n        this.deleteRelationship(arg1, arg2);\n      }\n    },\n    getmodel: {\n      description: \"get model info\",\n      usage: \"getmodel <modelId:string>\",\n      fn: arg1 => {\n        this.getModel(arg1);\n      }\n    },\n    getmodels: {\n      description: \"get models info\",\n      usage: \"getmodels <modelId:string>\",\n      fn: arg1 => {\n        this.getModels(arg1);\n      }\n    },\n    addmodel: {\n      description: \"add model (ensure JSON has no spaces and is not escaped)\",\n      usage: \"addmodel <modelJSON:string>\",\n      fn: arg1 => {\n        this.addModel(arg1);\n      }\n    },\n    delmodel: {\n      description: \"delete model\",\n      usage: \"delmodel <modelId:string>\",\n      fn: arg1 => {\n        this.deleteModel(arg1);\n      }\n    },\n    delallmodels: {\n      description: \"deletes all models in your instance\",\n      usage: \"delallmodels\",\n      fn: () => {\n        this.deleteAllModels();\n      }\n    },\n    query: {\n      description: \"query twins\",\n      usage: \"query <string>\",\n      fn: (...args) => {\n        this.query(args);\n      }\n    },\n    observeproperties: {\n      description: \"observes the selected properties on the selected twins\",\n      usage: \"observeproperties <twinId:string> <propertyName:string>\",\n      fn: (arg1, arg2) => {\n        this.observeProperties(arg1, arg2);\n      }\n    },\n    geteventroutes: {\n      description: \"get all the event routes\",\n      usage: \"geteventroutes\",\n      fn: () => {\n        this.getEventRoutes();\n      }\n    },\n    geteventroute: {\n      description: \"get a specific route by id\",\n      usage: \"geteventroute <routeId:string>\",\n      fn: arg1 => {\n        this.getEventRoute(arg1);\n      }\n    },\n    addeventroute: {\n      description: \"creates a new event route\",\n      usage: \"addeventroute <routeId:string> <endpointId:string> <filter:bool>\",\n      fn: (arg1, arg2, arg3) => {\n        this.addEventRoute(arg1, arg2, arg3);\n      }\n    },\n    deleventroute: {\n      description: \"deletes an event route by the id\",\n      usage: \"deleventroute <routeId:string>\",\n      fn: arg1 => {\n        this.deleteEventRoute(arg1);\n      }\n    },\n    decommissionmodel: {\n      description: \"decommission model\",\n      usage: \"decommissionmodel <modelId:string>\",\n      fn: arg1 => {\n        this.decommissionModel(arg1);\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Terminal\n        welcomeMessage=\"Azure Digital Twins Explorer command prompt\"\n        commands={this.commands}\n        contentClassName=\"cc-content\"\n        inputClassName=\"cc-input\"\n        messageClassName=\"cc-message\"\n        promptLabel=\"$>\"\n        className=\"cc-console\"\n        ref={this.terminal} />\n    );\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}