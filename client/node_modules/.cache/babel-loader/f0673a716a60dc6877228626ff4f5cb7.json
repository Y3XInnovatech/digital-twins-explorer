{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nexport var getIconContent = memoizeFunction(function (iconName) {\n  var _a = getIcon(iconName) || {\n      subset: {},\n      code: undefined\n    },\n    code = _a.code,\n    subset = _a.subset;\n  if (!code) {\n    return null;\n  }\n  return {\n    children: code,\n    iconClassName: subset.className,\n    fontFamily: subset.fontFace && subset.fontFace.fontFamily\n  };\n}, undefined, true /*ignoreNullOrUndefinedResult */);\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport var FontIcon = function (props) {\n  var iconName = props.iconName,\n    className = props.className,\n    _a = props.style,\n    style = _a === void 0 ? {} : _a;\n  var iconContent = getIconContent(iconName) || {};\n  var iconClassName = iconContent.iconClassName,\n    children = iconContent.children,\n    fontFamily = iconContent.fontFamily;\n  var nativeProps = getNativeProps(props, htmlElementProperties);\n  var containerProps = props['aria-label'] ? {} : {\n    role: 'presentation',\n    'aria-hidden': true\n  };\n  return React.createElement(\"i\", __assign({\n    \"data-icon-name\": iconName\n  }, containerProps, nativeProps, {\n    className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className),\n    // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n    // https://github.com/microsoft/fluentui/issues/10449\n    style: __assign({\n      fontFamily: fontFamily\n    }, style)\n  }), children);\n};\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport var getFontIcon = memoizeFunction(function (iconName, className, ariaLabel) {\n  return FontIcon({\n    iconName: iconName,\n    className: className,\n    'aria-label': ariaLabel\n  });\n});","map":{"version":3,"sources":["components/Icon/FontIcon.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAG9B,SAAS,UAAU,EAAE,OAAO,QAAQ,eAAe;AACnD,SAAS,GAAG,EAAE,cAAc,EAAE,qBAAqB,EAAE,eAAe,QAAQ,iBAAiB;AAC7F,SAAS,OAAO,QAAwC,eAAe;AAQvE,OAAO,IAAM,cAAc,GAAG,eAAe,CAC3C,UAAC,QAAiB,EAAA;EACV,IAAA,EAAA,GAAA,OAAA,CAAA,QAAA,CAAA,IAAA;;;KAGL;IAHO,IAAA,GAAA,EAAA,CAAA,IAAI;IAAE,MAAA,GAAA,EAAA,CAAA,MAGb;EAED,IAAI,CAAC,IAAI,EAAE;IACT,OAAO,IAAI;EACZ;EAED,OAAO;IACL,QAAQ,EAAE,IAAI;IACd,aAAa,EAAE,MAAM,CAAC,SAAS;IAC/B,UAAU,EAAE,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC;GAChD;AACH,CAAC,EACD,SAAS,EACT,IAAI,CAAC,gCAAgC,CACtC;AAED;;;;AAIG;AACH,OAAO,IAAM,QAAQ,GAA4C,SAAA,CAAA,KAAK,EAAA;EAC5D,IAAA,QAAA,GAAA,KAAA,CAAA,QAAQ;IAAE,SAAA,GAAA,KAAA,CAAA,SAAS;IAAE,EAAA,GAAA,KAAA,CAAA,KAAU;IAAV,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAU;EACvC,IAAM,WAAW,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAA,CAAE;EAC1C,IAAA,aAAA,GAAA,WAAA,CAAA,aAAa;IAAE,QAAA,GAAA,WAAA,CAAA,QAAQ;IAAE,UAAA,GAAA,WAAA,CAAA,UAAU;EAE3C,IAAM,WAAW,GAAG,cAAc,CAAoC,KAAK,EAAE,qBAAqB,CAAC;EACnG,IAAM,cAAc,GAAG,KAAK,CAAC,YAAY,CAAC,GACtC,CAAA,CAAE,GACF;IACE,IAAI,EAAE,cAAc;IACpB,aAAa,EAAE;GAChB;EAEL,OACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;IAAA,gBAAA,EACkB;EAAQ,CAAA,EACpB,cAAc,EACd,WAAW,EAAA;IACf,SAAS,EAAE,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC,QAAQ,IAAI,UAAU,CAAC,WAAW,EAAE,SAAS,CAAC;IACvG;IACA;IACA,KAAK,EAAA,QAAA,CAAA;MAAI,UAAU,EAAA;IAAA,CAAA,EAAK,KAAK;EAAA,CAAA,CAAA,EAE5B,QAAQ,CACP;AAER,CAAC;AAED;;;;;;AAMG;AACH,OAAO,IAAM,WAAW,GAAG,eAAe,CAAC,UAAC,QAAgB,EAAE,SAAkB,EAAE,SAAkB,EAAA;EAClG,OAAO,QAAQ,CAAC;IAAE,QAAQ,EAAA,QAAA;IAAE,SAAS,EAAA,SAAA;IAAE,YAAY,EAAE;EAAS,CAAE,CAAC;AACnE,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nimport { IFontIconProps } from './Icon.types';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon, IIconRecord, IIconSubsetRecord } from '../../Styling';\n\nexport interface IIconContent {\n  children?: string;\n  iconClassName?: string;\n  fontFamily?: string;\n}\n\nexport const getIconContent = memoizeFunction(\n  (iconName?: string): IIconContent | null => {\n    const { code, subset }: Pick<IIconRecord, 'code'> & { subset: Partial<IIconSubsetRecord> } = getIcon(iconName) || {\n      subset: {},\n      code: undefined,\n    };\n\n    if (!code) {\n      return null;\n    }\n\n    return {\n      children: code,\n      iconClassName: subset.className,\n      fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n    };\n  },\n  undefined,\n  true /*ignoreNullOrUndefinedResult */,\n);\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className, style = {} } = props;\n  const iconContent = getIconContent(iconName) || {};\n  const { iconClassName, children, fontFamily } = iconContent;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const containerProps = props['aria-label']\n    ? {}\n    : {\n        role: 'presentation',\n        'aria-hidden': true,\n      };\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n      // https://github.com/microsoft/fluentui/issues/10449\n      style={{ fontFamily, ...style }}\n    >\n      {children}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}