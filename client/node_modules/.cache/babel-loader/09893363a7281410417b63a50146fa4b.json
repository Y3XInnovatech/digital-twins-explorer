{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/**\n * Class representing a EventRoutes.\n */\nvar EventRoutes = /** @class */function () {\n  /**\n   * Initialize a new instance of the class EventRoutes class.\n   * @param client Reference to the service client\n   */\n  function EventRoutes(client) {\n    this.client = client;\n  }\n  /**\n   * Retrieves all event routes.\n   * Status codes:\n   * * 200 OK\n   * @param options The options parameters.\n   */\n  EventRoutes.prototype.list = function (options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      options: operationOptions\n    }, listOperationSpec);\n  };\n  /**\n   * Retrieves an event route.\n   * Status codes:\n   * * 200 OK\n   * * 404 Not Found\n   *   * EventRouteNotFound - The event route was not found.\n   * @param id The id for an event route. The id is unique within event routes and case sensitive.\n   * @param options The options parameters.\n   */\n  EventRoutes.prototype.getById = function (id, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      options: operationOptions\n    }, getByIdOperationSpec);\n  };\n  /**\n   * Adds or replaces an event route.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * EventRouteEndpointInvalid - The endpoint provided does not exist or is not active.\n   *   * EventRouteFilterInvalid - The event route filter is invalid.\n   *   * EventRouteIdInvalid - The event route id is invalid.\n   *   * LimitExceeded - The maximum number of event routes allowed has been reached.\n   * @param id The id for an event route. The id is unique within event routes and case sensitive.\n   * @param options The options parameters.\n   */\n  EventRoutes.prototype.add = function (id, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      options: operationOptions\n    }, addOperationSpec);\n  };\n  /**\n   * Deletes an event route.\n   * Status codes:\n   * * 204 No Content\n   * * 404 Not Found\n   *   * EventRouteNotFound - The event route was not found.\n   * @param id The id for an event route. The id is unique within event routes and case sensitive.\n   * @param options The options parameters.\n   */\n  EventRoutes.prototype.delete = function (id, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      id: id,\n      options: operationOptions\n    }, deleteOperationSpec);\n  };\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  EventRoutes.prototype.listNext = function (nextLink, options) {\n    var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});\n    return this.client.sendOperationRequest({\n      nextLink: nextLink,\n      options: operationOptions\n    }, listNextOperationSpec);\n  };\n  return EventRoutes;\n}();\nexport { EventRoutes };\n// Operation Specifications\nvar serializer = new coreHttp.Serializer(Mappers, /* isXml */false);\nvar listOperationSpec = {\n  path: \"/eventroutes\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventRouteCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate, Parameters.maxItemsPerPage],\n  serializer: serializer\n};\nvar getByIdOperationSpec = {\n  path: \"/eventroutes/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventRoute\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};\nvar addOperationSpec = {\n  path: \"/eventroutes/{id}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.eventRoute,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.contentType, Parameters.traceparent, Parameters.tracestate],\n  mediaType: \"json\",\n  serializer: serializer\n};\nvar deleteOperationSpec = {\n  path: \"/eventroutes/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer: serializer\n};\nvar listNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventRouteCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate, Parameters.maxItemsPerPage],\n  serializer: serializer\n};","map":{"version":3,"sources":["../../../../src/generated/operations/eventRoutes.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { AzureDigitalTwinsAPI } from \"../azureDigitalTwinsAPI\";\nimport {\n  EventRoutesListOptionalParams,\n  EventRoutesListResponse,\n  EventRoutesGetByIdOptionalParams,\n  EventRoutesGetByIdResponse,\n  EventRoutesAddOptionalParams,\n  EventRoutesDeleteOptionalParams,\n  EventRoutesListNextOptionalParams,\n  EventRoutesListNextResponse\n} from \"../models\";\n\n/**\n * Class representing a EventRoutes.\n */\nexport class EventRoutes {\n  private readonly client: AzureDigitalTwinsAPI;\n\n  /**\n   * Initialize a new instance of the class EventRoutes class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureDigitalTwinsAPI) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves all event routes.\n   * Status codes:\n   * * 200 OK\n   * @param options The options parameters.\n   */\n  list(\n    options?: EventRoutesListOptionalParams\n  ): Promise<EventRoutesListResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { options: operationOptions },\n      listOperationSpec\n    ) as Promise<EventRoutesListResponse>;\n  }\n\n  /**\n   * Retrieves an event route.\n   * Status codes:\n   * * 200 OK\n   * * 404 Not Found\n   *   * EventRouteNotFound - The event route was not found.\n   * @param id The id for an event route. The id is unique within event routes and case sensitive.\n   * @param options The options parameters.\n   */\n  getById(\n    id: string,\n    options?: EventRoutesGetByIdOptionalParams\n  ): Promise<EventRoutesGetByIdResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      getByIdOperationSpec\n    ) as Promise<EventRoutesGetByIdResponse>;\n  }\n\n  /**\n   * Adds or replaces an event route.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * EventRouteEndpointInvalid - The endpoint provided does not exist or is not active.\n   *   * EventRouteFilterInvalid - The event route filter is invalid.\n   *   * EventRouteIdInvalid - The event route id is invalid.\n   *   * LimitExceeded - The maximum number of event routes allowed has been reached.\n   * @param id The id for an event route. The id is unique within event routes and case sensitive.\n   * @param options The options parameters.\n   */\n  add(\n    id: string,\n    options?: EventRoutesAddOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      addOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Deletes an event route.\n   * Status codes:\n   * * 204 No Content\n   * * 404 Not Found\n   *   * EventRouteNotFound - The event route was not found.\n   * @param id The id for an event route. The id is unique within event routes and case sensitive.\n   * @param options The options parameters.\n   */\n  delete(\n    id: string,\n    options?: EventRoutesDeleteOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { id, options: operationOptions },\n      deleteOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  listNext(\n    nextLink: string,\n    options?: EventRoutesListNextOptionalParams\n  ): Promise<EventRoutesListNextResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { nextLink, options: operationOptions },\n      listNextOperationSpec\n    ) as Promise<EventRoutesListNextResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreHttp.OperationSpec = {\n  path: \"/eventroutes\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventRouteCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.maxItemsPerPage\n  ],\n  serializer\n};\nconst getByIdOperationSpec: coreHttp.OperationSpec = {\n  path: \"/eventroutes/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventRoute\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst addOperationSpec: coreHttp.OperationSpec = {\n  path: \"/eventroutes/{id}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.eventRoute,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.traceparent,\n    Parameters.tracestate\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/eventroutes/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.traceparent, Parameters.tracestate],\n  serializer\n};\nconst listNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventRouteCollection\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [\n    Parameters.traceparent,\n    Parameters.tracestate,\n    Parameters.maxItemsPerPage\n  ],\n  serializer\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}