{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OpenCensusSpanWrapper } from \"./openCensusSpanWrapper\";\n/**\n * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.\n */\nvar OpenCensusTracerWrapper = /** @class */function () {\n  /**\n   * Create a new wrapper around a given OpenCensus Tracer.\n   * @param tracer The OpenCensus Tracer to wrap.\n   */\n  function OpenCensusTracerWrapper(tracer) {\n    this._tracer = tracer;\n  }\n  /**\n   * The wrapped OpenCensus Tracer\n   */\n  OpenCensusTracerWrapper.prototype.getWrappedTracer = function () {\n    return this._tracer;\n  };\n  /**\n   * Starts a new Span.\n   * @param name The name of the span.\n   * @param options The SpanOptions used during Span creation.\n   */\n  OpenCensusTracerWrapper.prototype.startSpan = function (name, options) {\n    return new OpenCensusSpanWrapper(this, name, options);\n  };\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n  OpenCensusTracerWrapper.prototype.getCurrentSpan = function () {\n    return undefined;\n  };\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param _fn The function to be executed.\n   */\n  OpenCensusTracerWrapper.prototype.withSpan = function (_span, _fn) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n  OpenCensusTracerWrapper.prototype.bind = function (_target, _span) {\n    throw new Error(\"Method not implemented.\");\n  };\n  return OpenCensusTracerWrapper;\n}();\nexport { OpenCensusTracerWrapper };","map":{"version":3,"sources":["../../../../src/tracers/opencensus/openCensusTracerWrapper.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SAAS,qBAAqB,QAAQ,yBAAyB;AAG/D;;AAEG;AACH,IAAA,uBAAA,GAAA,aAAA,YAAA;EAUE;;;AAGG;EACH,SAAA,uBAAA,CAAmB,MAAwB,EAAA;IACzC,IAAI,CAAC,OAAO,GAAG,MAAM;EACvB;EAbA;;AAEG;EACI,uBAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,YAAA;IACE,OAAO,IAAI,CAAC,OAAO;EACrB,CAAC;EAUD;;;;AAIG;EACH,uBAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,IAAY,EAAE,OAAqB,EAAA;IAC3C,OAAO,IAAI,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC;EACvD,CAAC;EAED;;AAEG;EACH,uBAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACE,OAAO,SAAS;EAClB,CAAC;EAED;;;;AAIG;EACH,uBAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAoD,KAAW,EAAE,GAAM,EAAA;IACrE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC;EAC5C,CAAC;EAED;;;;AAIG;EACH,uBAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,UAAQ,OAAU,EAAE,KAAY,EAAA;IAC9B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC;EAC5C,CAAC;EACH,OAAA,uBAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Tracer, Span, SpanOptions } from \"@opentelemetry/api\";\nimport { OpenCensusSpanWrapper } from \"./openCensusSpanWrapper\";\nimport { TracerBase as OpenCensusTracer } from \"@opencensus/web-types\";\n\n/**\n * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.\n */\nexport class OpenCensusTracerWrapper implements Tracer {\n  private _tracer: OpenCensusTracer;\n\n  /**\n   * The wrapped OpenCensus Tracer\n   */\n  public getWrappedTracer(): OpenCensusTracer {\n    return this._tracer;\n  }\n\n  /**\n   * Create a new wrapper around a given OpenCensus Tracer.\n   * @param tracer The OpenCensus Tracer to wrap.\n   */\n  public constructor(tracer: OpenCensusTracer) {\n    this._tracer = tracer;\n  }\n\n  /**\n   * Starts a new Span.\n   * @param name The name of the span.\n   * @param options The SpanOptions used during Span creation.\n   */\n  startSpan(name: string, options?: SpanOptions): Span {\n    return new OpenCensusSpanWrapper(this, name, options);\n  }\n\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n  getCurrentSpan(): Span | undefined {\n    return undefined;\n  }\n\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param _fn The function to be executed.\n   */\n  withSpan<T extends (...args: unknown[]) => unknown>(_span: Span, _fn: T): ReturnType<T> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n  bind<T>(_target: T, _span?: Span): T {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}