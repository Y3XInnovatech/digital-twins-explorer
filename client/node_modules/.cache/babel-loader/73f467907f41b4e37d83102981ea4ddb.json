{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { mergeStyles } from '@uifabric/merge-styles';\nimport { getTheme } from '@uifabric/styling';\nimport { KeyCodes, css, elementContains, getDocument, getElementIndexPath, getFocusableByIndexPath, getId, getNativeProps, getNextElement, getParent, getPreviousElement, getRTL, htmlElementProperties, initializeComponentRef, isElementFocusSubZone, isElementFocusZone, isElementTabbable, raiseClick, shouldWrapFocus, warnDeprecations, portalContainsElement, getWindow, findScrollableParent, createMergedRef } from '@uifabric/utilities';\nimport { FocusZoneDirection, FocusZoneTabbableElements } from './FocusZone.types';\nvar IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nvar IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';\nvar FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nvar TABINDEX = 'tabindex';\nvar NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nvar NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nvar LARGE_DISTANCE_FROM_CENTER = 999999999;\nvar LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\nvar focusZoneStyles;\nvar focusZoneClass = 'ms-FocusZone';\n// Helper function that will return a class for when the root is focused\nfunction getRootClass() {\n  if (!focusZoneStyles) {\n    focusZoneStyles = mergeStyles({\n      selectors: {\n        ':focus': {\n          outline: 'none'\n        }\n      }\n    }, focusZoneClass);\n  }\n  return focusZoneStyles;\n}\nvar _allInstances = {};\nvar _outerZones = new Set();\nvar ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];\nvar ALLOW_VIRTUAL_ELEMENTS = false;\nvar FocusZone = /** @class */function (_super) {\n  __extends(FocusZone, _super);\n  function FocusZone(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._mergedRef = createMergedRef();\n    _this._onFocus = function (ev) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      }\n      var _a = _this.props,\n        onActiveElementChanged = _a.onActiveElementChanged,\n        // eslint-disable-next-line deprecation/deprecation\n        doNotAllowFocusEventToPropagate = _a.doNotAllowFocusEventToPropagate,\n        stopFocusPropagation = _a.stopFocusPropagation,\n        // eslint-disable-next-line deprecation/deprecation\n        onFocusNotification = _a.onFocusNotification,\n        onFocus = _a.onFocus,\n        shouldFocusInnerElementWhenReceivedFocus = _a.shouldFocusInnerElementWhenReceivedFocus,\n        defaultTabbableElement = _a.defaultTabbableElement;\n      var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);\n      var newActiveElement;\n      if (isImmediateDescendant) {\n        newActiveElement = ev.target;\n      } else {\n        var parentElement = ev.target;\n        while (parentElement && parentElement !== _this._root.current) {\n          if (isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {\n            newActiveElement = parentElement;\n            break;\n          }\n          parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n        }\n      }\n      // If an inner focusable element should be focused when FocusZone container receives focus\n      if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {\n        var maybeElementToFocus = defaultTabbableElement && typeof defaultTabbableElement === 'function' && defaultTabbableElement(_this._root.current);\n        // try to focus defaultTabbable element\n        if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n          newActiveElement = maybeElementToFocus;\n          maybeElementToFocus.focus();\n        } else {\n          // force focus on first focusable element\n          _this.focus(true);\n          if (_this._activeElement) {\n            // set to null as new active element was handled in method above\n            newActiveElement = null;\n          }\n        }\n      }\n      var initialElementFocused = !_this._activeElement;\n      // If the new active element is a child of this zone and received focus,\n      // update alignment an immediate descendant\n      if (newActiveElement && newActiveElement !== _this._activeElement) {\n        if (isImmediateDescendant || initialElementFocused) {\n          _this._setFocusAlignment(newActiveElement, true, true);\n        }\n        _this._activeElement = newActiveElement;\n        if (initialElementFocused) {\n          _this._updateTabIndexes();\n        }\n      }\n      if (onActiveElementChanged) {\n        onActiveElementChanged(_this._activeElement, ev);\n      }\n      if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {\n        ev.stopPropagation();\n      }\n      if (onFocus) {\n        onFocus(ev);\n      } else if (onFocusNotification) {\n        onFocusNotification();\n      }\n    };\n    _this._onBlur = function () {\n      _this._setParkedFocus(false);\n    };\n    _this._onMouseDown = function (ev) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      }\n      var disabled = _this.props.disabled;\n      if (disabled) {\n        return;\n      }\n      var target = ev.target;\n      var path = [];\n      while (target && target !== _this._root.current) {\n        path.push(target);\n        target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n      }\n      while (path.length) {\n        target = path.pop();\n        if (target && isElementTabbable(target)) {\n          _this._setActiveElement(target, true);\n        }\n        if (isElementFocusZone(target)) {\n          // Stop here since the focus zone will take care of its own children.\n          break;\n        }\n      }\n    };\n    /**\n     * Handle the keystrokes.\n     */\n    _this._onKeyDown = function (ev, theme) {\n      if (_this._portalContainsElement(ev.target)) {\n        // If the event target is inside a portal do not process the event.\n        return;\n      }\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n        direction = _a.direction,\n        disabled = _a.disabled,\n        isInnerZoneKeystroke = _a.isInnerZoneKeystroke,\n        pagingSupportDisabled = _a.pagingSupportDisabled,\n        shouldEnterInnerZone = _a.shouldEnterInnerZone;\n      if (disabled) {\n        return;\n      }\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n      }\n      // If the default has been prevented, do not process keyboard events.\n      if (ev.isDefaultPrevented()) {\n        return;\n      }\n      if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {\n        // If this element has focus, it is being controlled by a parent.\n        // Ignore the keystroke.\n        return;\n      }\n      if ((shouldEnterInnerZone && shouldEnterInnerZone(ev) || isInnerZoneKeystroke && isInnerZoneKeystroke(ev)) && _this._isImmediateDescendantOfZone(ev.target)) {\n        // Try to focus\n        var innerZone = _this._getFirstInnerZone();\n        if (innerZone) {\n          if (!innerZone.focus(true)) {\n            return;\n          }\n        } else if (isElementFocusSubZone(ev.target)) {\n          if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {\n            return;\n          }\n        } else {\n          return;\n        }\n      } else if (ev.altKey) {\n        return;\n      } else {\n        // eslint-disable-next-line @fluentui/deprecated-keyboard-event-props\n        switch (ev.which) {\n          case KeyCodes.space:\n            if (_this._tryInvokeClickForFocusable(ev.target)) {\n              break;\n            }\n            return;\n          case KeyCodes.left:\n            if (direction !== FocusZoneDirection.vertical) {\n              _this._preventDefaultWhenHandled(ev);\n              if (_this._moveFocusLeft(theme)) {\n                break;\n              }\n            }\n            return;\n          case KeyCodes.right:\n            if (direction !== FocusZoneDirection.vertical) {\n              _this._preventDefaultWhenHandled(ev);\n              if (_this._moveFocusRight(theme)) {\n                break;\n              }\n            }\n            return;\n          case KeyCodes.up:\n            if (direction !== FocusZoneDirection.horizontal) {\n              _this._preventDefaultWhenHandled(ev);\n              if (_this._moveFocusUp()) {\n                break;\n              }\n            }\n            return;\n          case KeyCodes.down:\n            if (direction !== FocusZoneDirection.horizontal) {\n              _this._preventDefaultWhenHandled(ev);\n              if (_this._moveFocusDown()) {\n                break;\n              }\n            }\n            return;\n          case KeyCodes.pageDown:\n            if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {\n              break;\n            }\n            return;\n          case KeyCodes.pageUp:\n            if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {\n              break;\n            }\n            return;\n          case KeyCodes.tab:\n            if (\n            // eslint-disable-next-line deprecation/deprecation\n            _this.props.allowTabKey || _this.props.handleTabKey === FocusZoneTabbableElements.all || _this.props.handleTabKey === FocusZoneTabbableElements.inputOnly && _this._isElementInput(ev.target)) {\n              var focusChanged = false;\n              _this._processingTabKey = true;\n              if (direction === FocusZoneDirection.vertical || !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {\n                focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();\n              } else {\n                var tabWithDirection = getRTL(theme) ? !ev.shiftKey : ev.shiftKey;\n                focusChanged = tabWithDirection ? _this._moveFocusLeft(theme) : _this._moveFocusRight(theme);\n              }\n              _this._processingTabKey = false;\n              if (focusChanged) {\n                break;\n              } else if (_this.props.shouldResetActiveElementWhenTabFromZone) {\n                _this._activeElement = null;\n              }\n            }\n            return;\n          case KeyCodes.home:\n            if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, false)) {\n              return false;\n            }\n            var firstChild = _this._root.current && _this._root.current.firstChild;\n            if (_this._root.current && firstChild && _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {\n              break;\n            }\n            return;\n          case KeyCodes.end:\n            if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, true)) {\n              return false;\n            }\n            var lastChild = _this._root.current && _this._root.current.lastChild;\n            if (_this._root.current && _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {\n              break;\n            }\n            return;\n          case KeyCodes.enter:\n            if (_this._tryInvokeClickForFocusable(ev.target)) {\n              break;\n            }\n            return;\n          default:\n            return;\n        }\n      }\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n    _this._getHorizontalDistanceFromCenter = function (isForward, activeRect, targetRect) {\n      // eslint-disable-next-line deprecation/deprecation\n      var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0;\n      // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectBottom = Math.floor(activeRect.bottom);\n      var targetRectBottom = Math.floor(targetRect.bottom);\n      var activeRectTop = Math.floor(activeRect.top);\n      var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n      var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n      if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          return 0;\n        }\n        return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n      }\n      if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n        return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n      return LARGE_DISTANCE_FROM_CENTER;\n    };\n    // Manage componentRef resolution.\n    initializeComponentRef(_this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('FocusZone', props, {\n        rootProps: undefined,\n        allowTabKey: 'handleTabKey',\n        elementType: 'as',\n        ariaDescribedBy: 'aria-describedby',\n        ariaLabelledBy: 'aria-labelledby'\n      });\n    }\n    _this._id = getId('FocusZone');\n    _this._focusAlignment = {\n      left: 0,\n      top: 0\n    };\n    _this._processingTabKey = false;\n    return _this;\n  }\n  /** Used for testing purposes only. */\n  FocusZone.getOuterZones = function () {\n    return _outerZones.size;\n  };\n  /**\n   * Handle global tab presses so that we can patch tabindexes on the fly.\n   * HEADS UP: This must not be an arrow function in order to be referentially equal among instances\n   * for ref counting to work correctly!\n   */\n  FocusZone._onKeyDownCapture = function (ev) {\n    // eslint-disable-next-line deprecation/deprecation, @fluentui/deprecated-keyboard-event-props\n    if (ev.which === KeyCodes.tab) {\n      _outerZones.forEach(function (zone) {\n        return zone._updateTabIndexes();\n      });\n    }\n  };\n  FocusZone.prototype.componentDidMount = function () {\n    var root = this._root.current;\n    _allInstances[this._id] = this;\n    if (root) {\n      this._windowElement = getWindow(root);\n      var parentElement = getParent(root, ALLOW_VIRTUAL_ELEMENTS);\n      while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {\n        if (isElementFocusZone(parentElement)) {\n          this._isInnerZone = true;\n          break;\n        }\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n      }\n      if (!this._isInnerZone) {\n        _outerZones.add(this);\n        if (this._windowElement && _outerZones.size === 1) {\n          this._windowElement.addEventListener('keydown', FocusZone._onKeyDownCapture, true);\n        }\n      }\n      this._root.current && this._root.current.addEventListener('blur', this._onBlur, true);\n      // Assign initial tab indexes so that we can set initial focus as appropriate.\n      this._updateTabIndexes();\n      if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n        this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement);\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (this.props.defaultActiveElement) {\n        // eslint-disable-next-line deprecation/deprecation\n        this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);\n      }\n      if (this.props.shouldFocusOnMount) {\n        this.focus();\n      }\n    }\n  };\n  FocusZone.prototype.componentDidUpdate = function () {\n    var root = this._root.current;\n    var doc = this._getDocument();\n    if (doc && this._lastIndexPath && (doc.activeElement === doc.body || doc.activeElement === null || !this.props.preventFocusRestoration && doc.activeElement === root)) {\n      // The element has been removed after the render, attempt to restore focus.\n      var elementToFocus = getFocusableByIndexPath(root, this._lastIndexPath);\n      if (elementToFocus) {\n        this._setActiveElement(elementToFocus, true);\n        elementToFocus.focus();\n        this._setParkedFocus(false);\n      } else {\n        // We had a focus path to restore, but now that path is unresolvable. Park focus\n        // on the container until we can try again.\n        this._setParkedFocus(true);\n      }\n    }\n  };\n  FocusZone.prototype.componentWillUnmount = function () {\n    delete _allInstances[this._id];\n    if (!this._isInnerZone) {\n      _outerZones.delete(this);\n      // If this is the last outer zone, remove the keydown listener.\n      if (this._windowElement && _outerZones.size === 0) {\n        this._windowElement.removeEventListener('keydown', FocusZone._onKeyDownCapture, true);\n      }\n    }\n    if (this._root.current) {\n      this._root.current.removeEventListener('blur', this._onBlur, true);\n    }\n    this._activeElement = null;\n    this._defaultFocusElement = null;\n  };\n  FocusZone.prototype.render = function () {\n    var _this = this;\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n      tag = _a.as,\n      elementType = _a.elementType,\n      rootProps = _a.rootProps,\n      ariaDescribedBy = _a.ariaDescribedBy,\n      ariaLabelledBy = _a.ariaLabelledBy,\n      className = _a.className;\n    var divProps = getNativeProps(this.props, htmlElementProperties);\n    var Tag = tag || elementType || 'div';\n    // Note, right before rendering/reconciling proceeds, we need to record if focus\n    // was in the zone before the update. This helper will track this and, if focus\n    // was actually in the zone, what the index path to the element is at this time.\n    // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n    // the case the element was removed.\n    this._evaluateFocusBeforeRender();\n    // Only support RTL defined in global theme, not contextual theme/RTL.\n    var theme = getTheme();\n    return React.createElement(Tag, __assign({\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": ariaDescribedBy\n    }, divProps, rootProps, {\n      // Once the getClassName correctly memoizes inputs this should\n      // be replaced so that className is passed to getRootClass and is included there so\n      // the class names will always be in the same order.\n      className: css(getRootClass(), className),\n      // eslint-disable-next-line deprecation/deprecation\n      ref: this._mergedRef(this.props.elementRef, this._root),\n      \"data-focuszone-id\": this._id,\n      // eslint-disable-next-line react/jsx-no-bind\n      onKeyDown: function (ev) {\n        return _this._onKeyDown(ev, theme);\n      },\n      onFocus: this._onFocus,\n      onMouseDownCapture: this._onMouseDown\n    }), this.props.children);\n  };\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  FocusZone.prototype.focus = function (forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n    if (this._root.current) {\n      if (!forceIntoFirstElement && this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && this._isInnerZone) {\n        var ownerZoneElement = this._getOwnerZone(this._root.current);\n        if (ownerZoneElement !== this._root.current) {\n          var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n          return !!ownerZone && ownerZone.focusElement(this._root.current);\n        }\n        return false;\n      } else if (!forceIntoFirstElement && this._activeElement && elementContains(this._root.current, this._activeElement) && isElementTabbable(this._activeElement)) {\n        this._activeElement.focus();\n        return true;\n      } else {\n        var firstChild = this._root.current.firstChild;\n        return this.focusElement(getNextElement(this._root.current, firstChild, true));\n      }\n    }\n    return false;\n  };\n  /**\n   * Sets focus to the last tabbable item in the zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  FocusZone.prototype.focusLast = function () {\n    if (this._root.current) {\n      var lastChild = this._root.current && this._root.current.lastChild;\n      return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));\n    }\n    return false;\n  };\n  /**\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\n   * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n   * location and then focus.)\n   * @param element - The child element within the zone to focus.\n   * @param forceAlignment - If true, focus alignment will be set according to the element provided.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  FocusZone.prototype.focusElement = function (element, forceAlignment) {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n      onBeforeFocus = _a.onBeforeFocus,\n      shouldReceiveFocus = _a.shouldReceiveFocus;\n    if (shouldReceiveFocus && !shouldReceiveFocus(element) || onBeforeFocus && !onBeforeFocus(element)) {\n      return false;\n    }\n    if (element) {\n      // when we set focus to a specific child, we should recalculate the alignment depending on its position.\n      this._setActiveElement(element, forceAlignment);\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,\n   * rather than a center based on the last horizontal motion.\n   * @param point - the new reference point.\n   */\n  FocusZone.prototype.setFocusAlignment = function (point) {\n    this._focusAlignment = point;\n  };\n  FocusZone.prototype._evaluateFocusBeforeRender = function () {\n    var root = this._root.current;\n    var doc = this._getDocument();\n    if (doc) {\n      var focusedElement = doc.activeElement;\n      // Only update the index path if we are not parked on the root.\n      if (focusedElement !== root) {\n        var shouldRestoreFocus = elementContains(root, focusedElement, false);\n        this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root, focusedElement) : undefined;\n      }\n    }\n  };\n  /**\n   * When focus is in the zone at render time but then all focusable elements are removed,\n   * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n   * focus to the closest path from previous. If the user tabs away from the parked container,\n   * we restore focusability to the pre-parked state.\n   */\n  FocusZone.prototype._setParkedFocus = function (isParked) {\n    var root = this._root.current;\n    if (root && this._isParked !== isParked) {\n      this._isParked = isParked;\n      if (isParked) {\n        if (!this.props.allowFocusRoot) {\n          this._parkedTabIndex = root.getAttribute('tabindex');\n          root.setAttribute('tabindex', '-1');\n        }\n        root.focus();\n      } else if (!this.props.allowFocusRoot) {\n        if (this._parkedTabIndex) {\n          root.setAttribute('tabindex', this._parkedTabIndex);\n          this._parkedTabIndex = undefined;\n        } else {\n          root.removeAttribute('tabindex');\n        }\n      }\n    }\n  };\n  FocusZone.prototype._setActiveElement = function (element, forceAlignment) {\n    var previousActiveElement = this._activeElement;\n    this._activeElement = element;\n    if (previousActiveElement) {\n      if (isElementFocusZone(previousActiveElement)) {\n        this._updateTabIndexes(previousActiveElement);\n      }\n      previousActiveElement.tabIndex = -1;\n    }\n    if (this._activeElement) {\n      if (!this._focusAlignment || forceAlignment) {\n        this._setFocusAlignment(element, true, true);\n      }\n      this._activeElement.tabIndex = 0;\n    }\n  };\n  FocusZone.prototype._preventDefaultWhenHandled = function (ev) {\n    this.props.preventDefaultWhenHandled && ev.preventDefault();\n  };\n  /**\n   * Walk up the dom try to find a focusable element.\n   */\n  FocusZone.prototype._tryInvokeClickForFocusable = function (target) {\n    if (target === this._root.current || !this.props.shouldRaiseClicks) {\n      return false;\n    }\n    do {\n      if (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {\n        return false;\n      }\n      if (this._isImmediateDescendantOfZone(target) && target.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' && target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true') {\n        raiseClick(target);\n        return true;\n      }\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);\n    } while (target !== this._root.current);\n    return false;\n  };\n  /**\n   * Traverse to find first child zone.\n   */\n  FocusZone.prototype._getFirstInnerZone = function (rootElement) {\n    rootElement = rootElement || this._activeElement || this._root.current;\n    if (!rootElement) {\n      return null;\n    }\n    if (isElementFocusZone(rootElement)) {\n      return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n    }\n    var child = rootElement.firstElementChild;\n    while (child) {\n      if (isElementFocusZone(child)) {\n        return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE)];\n      }\n      var match = this._getFirstInnerZone(child);\n      if (match) {\n        return match;\n      }\n      child = child.nextElementSibling;\n    }\n    return null;\n  };\n  FocusZone.prototype._moveFocus = function (isForward, getDistanceFromCenter, ev, useDefaultWrap) {\n    if (useDefaultWrap === void 0) {\n      useDefaultWrap = true;\n    }\n    var element = this._activeElement;\n    var candidateDistance = -1;\n    var candidateElement = undefined;\n    var changedFocus = false;\n    var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n    if (!element || !this._root.current) {\n      return false;\n    }\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element, isForward)) {\n        return false;\n      }\n    }\n    var activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n    do {\n      element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);\n      if (isBidirectional) {\n        if (element) {\n          var targetRect = element.getBoundingClientRect();\n          var elementDistance = getDistanceFromCenter(activeRect, targetRect);\n          if (elementDistance === -1 && candidateDistance === -1) {\n            candidateElement = element;\n            break;\n          }\n          if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n          if (candidateDistance >= 0 && elementDistance < 0) {\n            break;\n          }\n        }\n      } else {\n        candidateElement = element;\n        break;\n      }\n    } while (element);\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n      } else {\n        return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n      }\n    }\n    return changedFocus;\n  };\n  FocusZone.prototype._moveFocusDown = function () {\n    var _this = this;\n    var targetTop = -1;\n    // eslint-disable-next-line deprecation/deprecation\n    var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n    if (this._moveFocus(true, function (activeRect, targetRect) {\n      var distance = -1;\n      // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectBottom = Math.floor(activeRect.bottom);\n      if (targetRectTop < activeRectBottom) {\n        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n        }\n        return LARGE_DISTANCE_FROM_CENTER;\n      }\n      if (targetTop === -1 && targetRectTop >= activeRectBottom || targetRectTop === targetTop) {\n        targetTop = targetRectTop;\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          distance = 0;\n        } else {\n          distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n        }\n      }\n      return distance;\n    })) {\n      this._setFocusAlignment(this._activeElement, false, true);\n      return true;\n    }\n    return false;\n  };\n  FocusZone.prototype._moveFocusUp = function () {\n    var _this = this;\n    var targetTop = -1;\n    // eslint-disable-next-line deprecation/deprecation\n    var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n    if (this._moveFocus(false, function (activeRect, targetRect) {\n      var distance = -1;\n      // ClientRect values can be floats that differ by very small fractions of a decimal.\n      // If the difference between top and bottom are within a pixel then we should treat\n      // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n      // but without Math.Floor they will be handled incorrectly.\n      var targetRectBottom = Math.floor(targetRect.bottom);\n      var targetRectTop = Math.floor(targetRect.top);\n      var activeRectTop = Math.floor(activeRect.top);\n      if (targetRectBottom > activeRectTop) {\n        if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {\n          return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n        }\n        return LARGE_DISTANCE_FROM_CENTER;\n      }\n      if (targetTop === -1 && targetRectBottom <= activeRectTop || targetRectTop === targetTop) {\n        targetTop = targetRectTop;\n        if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n          distance = 0;\n        } else {\n          distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n        }\n      }\n      return distance;\n    })) {\n      this._setFocusAlignment(this._activeElement, false, true);\n      return true;\n    }\n    return false;\n  };\n  FocusZone.prototype._moveFocusLeft = function (theme) {\n    var _this = this;\n    var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n    if (this._moveFocus(getRTL(theme), function (activeRect, targetRect) {\n      var distance = -1;\n      var topBottomComparison;\n      if (getRTL(theme)) {\n        // When in RTL, this comparison should be the same as the one in _moveFocusRight for LTR.\n        // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n        // This is important, because we want to be comparing the top of the target rect\n        // with the bottom of the active rect.\n        topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n      } else {\n        topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n      }\n      if (topBottomComparison && targetRect.right <= activeRect.right && _this.props.direction !== FocusZoneDirection.vertical) {\n        distance = activeRect.right - targetRect.right;\n      } else if (!shouldWrap) {\n        distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n      return distance;\n    }, undefined /*ev*/, shouldWrap)) {\n      this._setFocusAlignment(this._activeElement, true, false);\n      return true;\n    }\n    return false;\n  };\n  FocusZone.prototype._moveFocusRight = function (theme) {\n    var _this = this;\n    var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);\n    if (this._moveFocus(!getRTL(theme), function (activeRect, targetRect) {\n      var distance = -1;\n      var topBottomComparison;\n      if (getRTL(theme)) {\n        // When in RTL, this comparison should be the same as the one in _moveFocusLeft for LTR.\n        // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n        // This is important, because we want to be comparing the bottom of the target rect\n        // with the top of the active rect.\n        topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n      } else {\n        topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n      }\n      if (topBottomComparison && targetRect.left >= activeRect.left && _this.props.direction !== FocusZoneDirection.vertical) {\n        distance = targetRect.left - activeRect.left;\n      } else if (!shouldWrap) {\n        distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n      }\n      return distance;\n    }, undefined /*ev*/, shouldWrap)) {\n      this._setFocusAlignment(this._activeElement, true, false);\n      return true;\n    }\n    return false;\n  };\n  FocusZone.prototype._moveFocusPaging = function (isForward, useDefaultWrap) {\n    if (useDefaultWrap === void 0) {\n      useDefaultWrap = true;\n    }\n    var element = this._activeElement;\n    if (!element || !this._root.current) {\n      return false;\n    }\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element, isForward)) {\n        return false;\n      }\n    }\n    var scrollableParent = findScrollableParent(element);\n    if (!scrollableParent) {\n      return false;\n    }\n    var candidateDistance = -1;\n    var candidateElement = undefined;\n    var targetTop = -1;\n    var targetBottom = -1;\n    var pagesize = scrollableParent.clientHeight;\n    var activeRect = element.getBoundingClientRect();\n    do {\n      element = isForward ? getNextElement(this._root.current, element) : getPreviousElement(this._root.current, element);\n      if (element) {\n        var targetRect = element.getBoundingClientRect();\n        var targetRectTop = Math.floor(targetRect.top);\n        var activeRectBottom = Math.floor(activeRect.bottom);\n        var targetRectBottom = Math.floor(targetRect.bottom);\n        var activeRectTop = Math.floor(activeRect.top);\n        var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);\n        var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n        var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n        if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n          break;\n        }\n        if (elementDistance > -1) {\n          // for paging down\n          if (isForward && targetRectTop > targetTop) {\n            targetTop = targetRectTop;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (!isForward && targetRectBottom < targetBottom) {\n            // for paging up\n            targetBottom = targetRectBottom;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n        }\n      }\n    } while (element);\n    var changedFocus = false;\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n      this._setFocusAlignment(candidateElement, false, true);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));\n      }\n      return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));\n    }\n    return changedFocus;\n  };\n  FocusZone.prototype._setFocusAlignment = function (element, isHorizontal, isVertical) {\n    if (this.props.direction === FocusZoneDirection.bidirectional && (!this._focusAlignment || isHorizontal || isVertical)) {\n      var rect = element.getBoundingClientRect();\n      var left = rect.left + rect.width / 2;\n      var top_1 = rect.top + rect.height / 2;\n      if (!this._focusAlignment) {\n        this._focusAlignment = {\n          left: left,\n          top: top_1\n        };\n      }\n      if (isHorizontal) {\n        this._focusAlignment.left = left;\n      }\n      if (isVertical) {\n        this._focusAlignment.top = top_1;\n      }\n    }\n  };\n  FocusZone.prototype._isImmediateDescendantOfZone = function (element) {\n    return this._getOwnerZone(element) === this._root.current;\n  };\n  FocusZone.prototype._getOwnerZone = function (element) {\n    var parentElement = getParent(element, ALLOW_VIRTUAL_ELEMENTS);\n    while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {\n      if (isElementFocusZone(parentElement)) {\n        return parentElement;\n      }\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n    return parentElement;\n  };\n  FocusZone.prototype._updateTabIndexes = function (element) {\n    if (!this._activeElement && this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'function') {\n      this._activeElement = this.props.defaultTabbableElement(this._root.current);\n    }\n    if (!element && this._root.current) {\n      this._defaultFocusElement = null;\n      element = this._root.current;\n      if (this._activeElement && !elementContains(element, this._activeElement)) {\n        this._activeElement = null;\n      }\n    }\n    // If active element changes state to disabled, set it to null.\n    // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n    if (this._activeElement && !isElementTabbable(this._activeElement)) {\n      this._activeElement = null;\n    }\n    var childNodes = element && element.children;\n    for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n      var child = childNodes[childIndex];\n      if (!isElementFocusZone(child)) {\n        // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n        if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n        if (isElementTabbable(child)) {\n          if (this.props.disabled) {\n            child.setAttribute(TABINDEX, '-1');\n          } else if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {\n            this._defaultFocusElement = child;\n            if (child.getAttribute(TABINDEX) !== '0') {\n              child.setAttribute(TABINDEX, '0');\n            }\n          } else if (child.getAttribute(TABINDEX) !== '-1') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n        } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n          // Disgusting IE hack. Sad face.\n          child.setAttribute('focusable', 'false');\n        }\n      } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n        if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {\n          this._defaultFocusElement = child;\n          if (child.getAttribute(TABINDEX) !== '0') {\n            child.setAttribute(TABINDEX, '0');\n          }\n        } else if (child.getAttribute(TABINDEX) !== '-1') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n      }\n      this._updateTabIndexes(child);\n    }\n  };\n  FocusZone.prototype._isContentEditableElement = function (element) {\n    return element && element.getAttribute('contenteditable') === 'true';\n  };\n  FocusZone.prototype._isElementInput = function (element) {\n    if (element && element.tagName && (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')) {\n      return true;\n    }\n    return false;\n  };\n  FocusZone.prototype._shouldInputLoseFocus = function (element, isForward) {\n    // If a tab was used, we want to focus on the next element.\n    if (!this._processingTabKey && element && element.type && ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1) {\n      var selectionStart = element.selectionStart;\n      var selectionEnd = element.selectionEnd;\n      var isRangeSelected = selectionStart !== selectionEnd;\n      var inputValue = element.value;\n      var isReadonly = element.readOnly;\n      // We shouldn't lose focus in the following cases:\n      // 1. There is range selected.\n      // 2. When selection start is larger than 0 and it is backward and not readOnly.\n      // 3. when selection start is not the end of length, it is forward and not readOnly.\n      // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit\n      // tab) and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is\n      // determined by calling the callback shouldInputLoseFocusOnArrowKey\n      if (isRangeSelected || selectionStart > 0 && !isForward && !isReadonly || selectionStart !== inputValue.length && isForward && !isReadonly || !!this.props.handleTabKey && !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element))) {\n        return false;\n      }\n    }\n    return true;\n  };\n  FocusZone.prototype._shouldWrapFocus = function (element, noWrapDataAttribute) {\n    return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;\n  };\n  /**\n   * Returns true if the element is a descendant of the FocusZone through a React portal.\n   */\n  FocusZone.prototype._portalContainsElement = function (element) {\n    return element && !!this._root.current && portalContainsElement(element, this._root.current);\n  };\n  FocusZone.prototype._getDocument = function () {\n    return getDocument(this._root.current);\n  };\n  FocusZone.defaultProps = {\n    isCircularNavigation: false,\n    direction: FocusZoneDirection.bidirectional,\n    shouldRaiseClicks: true\n  };\n  return FocusZone;\n}(React.Component);\nexport { FocusZone };","map":{"version":3,"sources":["components/FocusZone/FocusZone.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { mergeStyles } from '@uifabric/merge-styles';\nimport { getTheme, ITheme } from '@uifabric/styling';\nimport {\n  KeyCodes,\n  css,\n  elementContains,\n  getDocument,\n  getElementIndexPath,\n  getFocusableByIndexPath,\n  getId,\n  getNativeProps,\n  getNextElement,\n  getParent,\n  getPreviousElement,\n  getRTL,\n  htmlElementProperties,\n  initializeComponentRef,\n  isElementFocusSubZone,\n  isElementFocusZone,\n  isElementTabbable,\n  raiseClick,\n  shouldWrapFocus,\n  warnDeprecations,\n  portalContainsElement,\n  Point,\n  getWindow,\n  findScrollableParent,\n  createMergedRef,\n} from '@uifabric/utilities';\nimport { FocusZoneDirection, FocusZoneTabbableElements, IFocusZone, IFocusZoneProps } from './FocusZone.types';\n\nconst IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nconst IS_ENTER_DISABLED_ATTRIBUTE = 'data-disable-click-on-enter';\nconst FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nconst TABINDEX = 'tabindex';\nconst NO_VERTICAL_WRAP = 'data-no-vertical-wrap';\nconst NO_HORIZONTAL_WRAP = 'data-no-horizontal-wrap';\nconst LARGE_DISTANCE_FROM_CENTER = 999999999;\nconst LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;\n\nlet focusZoneStyles: string;\n\nconst focusZoneClass: string = 'ms-FocusZone';\n\n// Helper function that will return a class for when the root is focused\nfunction getRootClass(): string {\n  if (!focusZoneStyles) {\n    focusZoneStyles = mergeStyles(\n      {\n        selectors: {\n          ':focus': {\n            outline: 'none',\n          },\n        },\n      },\n      focusZoneClass,\n    );\n  }\n  return focusZoneStyles;\n}\n\nconst _allInstances: {\n  [key: string]: FocusZone;\n} = {};\nconst _outerZones: Set<FocusZone> = new Set();\n\nconst ALLOWED_INPUT_TYPES = ['text', 'number', 'password', 'email', 'tel', 'url', 'search'];\n\nconst ALLOW_VIRTUAL_ELEMENTS = false;\n\nexport class FocusZone extends React.Component<IFocusZoneProps> implements IFocusZone {\n  public static defaultProps: IFocusZoneProps = {\n    isCircularNavigation: false,\n    direction: FocusZoneDirection.bidirectional,\n    shouldRaiseClicks: true,\n  };\n\n  private _root: React.RefObject<HTMLElement> = React.createRef();\n  private _mergedRef = createMergedRef<HTMLElement>();\n\n  private _id: string;\n\n  /** The most recently focused child element. */\n  private _activeElement: HTMLElement | null;\n\n  /**\n   * The index path to the last focused child element.\n   */\n  private _lastIndexPath: number[] | undefined;\n\n  /**\n   * Flag to define when we've intentionally parked focus on the root element to temporarily\n   * hold focus until items appear within the zone.\n   */\n  private _isParked: boolean;\n\n  /** The child element with tabindex=0. */\n  private _defaultFocusElement: HTMLElement | null;\n  private _focusAlignment: Point;\n  private _isInnerZone: boolean;\n  private _parkedTabIndex: string | null | undefined;\n\n  /** Used to allow moving to next focusable element even when we're focusing on a input element when pressing tab */\n  private _processingTabKey: boolean;\n\n  private _windowElement: Window | undefined;\n\n  /** Used for testing purposes only. */\n  public static getOuterZones(): number {\n    return _outerZones.size;\n  }\n\n  /**\n   * Handle global tab presses so that we can patch tabindexes on the fly.\n   * HEADS UP: This must not be an arrow function in order to be referentially equal among instances\n   * for ref counting to work correctly!\n   */\n  private static _onKeyDownCapture(ev: KeyboardEvent): void {\n    // eslint-disable-next-line deprecation/deprecation, @fluentui/deprecated-keyboard-event-props\n    if (ev.which === KeyCodes.tab) {\n      _outerZones.forEach((zone: FocusZone) => zone._updateTabIndexes());\n    }\n  }\n\n  constructor(props: IFocusZoneProps) {\n    super(props);\n    // Manage componentRef resolution.\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('FocusZone', props, {\n        rootProps: undefined,\n        allowTabKey: 'handleTabKey',\n        elementType: 'as',\n        ariaDescribedBy: 'aria-describedby',\n        ariaLabelledBy: 'aria-labelledby',\n      });\n    }\n\n    this._id = getId('FocusZone');\n\n    this._focusAlignment = {\n      left: 0,\n      top: 0,\n    };\n\n    this._processingTabKey = false;\n  }\n\n  public componentDidMount(): void {\n    const { current: root } = this._root;\n\n    _allInstances[this._id] = this;\n\n    if (root) {\n      this._windowElement = getWindow(root);\n      let parentElement = getParent(root, ALLOW_VIRTUAL_ELEMENTS);\n\n      while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {\n        if (isElementFocusZone(parentElement)) {\n          this._isInnerZone = true;\n          break;\n        }\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n      }\n\n      if (!this._isInnerZone) {\n        _outerZones.add(this);\n\n        if (this._windowElement && _outerZones.size === 1) {\n          this._windowElement.addEventListener('keydown', FocusZone._onKeyDownCapture, true);\n        }\n      }\n\n      this._root.current && this._root.current.addEventListener('blur', this._onBlur, true);\n\n      // Assign initial tab indexes so that we can set initial focus as appropriate.\n      this._updateTabIndexes();\n\n      if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === 'string') {\n        this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement) as HTMLElement;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (this.props.defaultActiveElement) {\n        // eslint-disable-next-line deprecation/deprecation\n        this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement) as HTMLElement;\n      }\n\n      if (this.props.shouldFocusOnMount) {\n        this.focus();\n      }\n    }\n  }\n\n  public componentDidUpdate(): void {\n    const { current: root } = this._root;\n    const doc = this._getDocument();\n\n    if (\n      doc &&\n      this._lastIndexPath &&\n      (doc.activeElement === doc.body ||\n        doc.activeElement === null ||\n        (!this.props.preventFocusRestoration && doc.activeElement === root))\n    ) {\n      // The element has been removed after the render, attempt to restore focus.\n      const elementToFocus = getFocusableByIndexPath(root as HTMLElement, this._lastIndexPath);\n\n      if (elementToFocus) {\n        this._setActiveElement(elementToFocus, true);\n        elementToFocus.focus();\n        this._setParkedFocus(false);\n      } else {\n        // We had a focus path to restore, but now that path is unresolvable. Park focus\n        // on the container until we can try again.\n        this._setParkedFocus(true);\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    delete _allInstances[this._id];\n\n    if (!this._isInnerZone) {\n      _outerZones.delete(this);\n\n      // If this is the last outer zone, remove the keydown listener.\n      if (this._windowElement && _outerZones.size === 0) {\n        this._windowElement.removeEventListener('keydown', FocusZone._onKeyDownCapture, true);\n      }\n    }\n\n    if (this._root.current) {\n      this._root.current.removeEventListener('blur', this._onBlur, true);\n    }\n\n    this._activeElement = null;\n    this._defaultFocusElement = null;\n  }\n\n  public render(): React.ReactNode {\n    // eslint-disable-next-line deprecation/deprecation\n    const { as: tag, elementType, rootProps, ariaDescribedBy, ariaLabelledBy, className } = this.props;\n    const divProps = getNativeProps(this.props, htmlElementProperties);\n\n    const Tag = tag || elementType || 'div';\n\n    // Note, right before rendering/reconciling proceeds, we need to record if focus\n    // was in the zone before the update. This helper will track this and, if focus\n    // was actually in the zone, what the index path to the element is at this time.\n    // Then, later in componentDidUpdate, we can evaluate if we need to restore it in\n    // the case the element was removed.\n    this._evaluateFocusBeforeRender();\n\n    // Only support RTL defined in global theme, not contextual theme/RTL.\n    const theme: ITheme = getTheme();\n\n    return (\n      <Tag\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={ariaDescribedBy}\n        {...divProps}\n        {\n          // root props has been deprecated and should get removed.\n          // it needs to be marked as \"any\" since root props expects a div element, but really Tag can\n          // be any native element so typescript rightly flags this as a problem.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          ...(rootProps as any)\n        }\n        // Once the getClassName correctly memoizes inputs this should\n        // be replaced so that className is passed to getRootClass and is included there so\n        // the class names will always be in the same order.\n        className={css(getRootClass(), className)}\n        // eslint-disable-next-line deprecation/deprecation\n        ref={this._mergedRef(this.props.elementRef, this._root)}\n        data-focuszone-id={this._id}\n        // eslint-disable-next-line react/jsx-no-bind\n        onKeyDown={(ev: React.KeyboardEvent<HTMLElement>) => this._onKeyDown(ev, theme)}\n        onFocus={this._onFocus}\n        onMouseDownCapture={this._onMouseDown}\n      >\n        {this.props.children}\n      </Tag>\n    );\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the zone.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element, even\n   * if focus is already in the focus zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    if (this._root.current) {\n      if (\n        !forceIntoFirstElement &&\n        this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&\n        this._isInnerZone\n      ) {\n        const ownerZoneElement = this._getOwnerZone(this._root.current) as HTMLElement;\n\n        if (ownerZoneElement !== this._root.current) {\n          const ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n\n          return !!ownerZone && ownerZone.focusElement(this._root.current);\n        }\n\n        return false;\n      } else if (\n        !forceIntoFirstElement &&\n        this._activeElement &&\n        elementContains(this._root.current, this._activeElement) &&\n        isElementTabbable(this._activeElement)\n      ) {\n        this._activeElement.focus();\n        return true;\n      } else {\n        const firstChild = this._root.current.firstChild as HTMLElement;\n\n        return this.focusElement(getNextElement(this._root.current, firstChild, true) as HTMLElement);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sets focus to the last tabbable item in the zone.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focusLast(): boolean {\n    if (this._root.current) {\n      const lastChild = this._root.current && (this._root.current.lastChild as HTMLElement | null);\n\n      return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true) as HTMLElement);\n    }\n\n    return false;\n  }\n\n  /**\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\n   * shouldReceiveFocus to create delayed focus scenarios (like animate the scroll position to the correct\n   * location and then focus.)\n   * @param element - The child element within the zone to focus.\n   * @param forceAlignment - If true, focus alignment will be set according to the element provided.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focusElement(element: HTMLElement, forceAlignment?: boolean): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    const { onBeforeFocus, shouldReceiveFocus } = this.props;\n\n    if ((shouldReceiveFocus && !shouldReceiveFocus(element)) || (onBeforeFocus && !onBeforeFocus(element))) {\n      return false;\n    }\n\n    if (element) {\n      // when we set focus to a specific child, we should recalculate the alignment depending on its position.\n      this._setActiveElement(element, forceAlignment);\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Forces horizontal alignment in the context of vertical arrowing to use specific point as the reference,\n   * rather than a center based on the last horizontal motion.\n   * @param point - the new reference point.\n   */\n  public setFocusAlignment(point: Point): void {\n    this._focusAlignment = point;\n  }\n\n  private _evaluateFocusBeforeRender(): void {\n    const { current: root } = this._root;\n\n    const doc = this._getDocument();\n    if (doc) {\n      const focusedElement = doc.activeElement as HTMLElement;\n\n      // Only update the index path if we are not parked on the root.\n      if (focusedElement !== root) {\n        const shouldRestoreFocus = elementContains(root, focusedElement, false);\n        this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root as HTMLElement, focusedElement) : undefined;\n      }\n    }\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    if (this._portalContainsElement(ev.target as HTMLElement)) {\n      // If the event target is inside a portal do not process the event.\n      return;\n    }\n\n    const {\n      onActiveElementChanged,\n      // eslint-disable-next-line deprecation/deprecation\n      doNotAllowFocusEventToPropagate,\n      stopFocusPropagation,\n      // eslint-disable-next-line deprecation/deprecation\n      onFocusNotification,\n      onFocus,\n      shouldFocusInnerElementWhenReceivedFocus,\n      defaultTabbableElement,\n    } = this.props;\n    const isImmediateDescendant = this._isImmediateDescendantOfZone(ev.target as HTMLElement);\n    let newActiveElement: HTMLElement | null | undefined;\n\n    if (isImmediateDescendant) {\n      newActiveElement = ev.target as HTMLElement;\n    } else {\n      let parentElement = ev.target as HTMLElement;\n\n      while (parentElement && parentElement !== this._root.current) {\n        if (isElementTabbable(parentElement) && this._isImmediateDescendantOfZone(parentElement)) {\n          newActiveElement = parentElement;\n          break;\n        }\n        parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n      }\n    }\n\n    // If an inner focusable element should be focused when FocusZone container receives focus\n    if (shouldFocusInnerElementWhenReceivedFocus && ev.target === this._root.current) {\n      const maybeElementToFocus =\n        defaultTabbableElement &&\n        typeof defaultTabbableElement === 'function' &&\n        defaultTabbableElement(this._root.current);\n\n      // try to focus defaultTabbable element\n      if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {\n        newActiveElement = maybeElementToFocus;\n        maybeElementToFocus.focus();\n      } else {\n        // force focus on first focusable element\n        this.focus(true);\n        if (this._activeElement) {\n          // set to null as new active element was handled in method above\n          newActiveElement = null;\n        }\n      }\n    }\n\n    const initialElementFocused = !this._activeElement;\n\n    // If the new active element is a child of this zone and received focus,\n    // update alignment an immediate descendant\n    if (newActiveElement && newActiveElement !== this._activeElement) {\n      if (isImmediateDescendant || initialElementFocused) {\n        this._setFocusAlignment(newActiveElement, true, true);\n      }\n\n      this._activeElement = newActiveElement;\n\n      if (initialElementFocused) {\n        this._updateTabIndexes();\n      }\n    }\n\n    if (onActiveElementChanged) {\n      onActiveElementChanged(this._activeElement as HTMLElement, ev);\n    }\n\n    if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {\n      ev.stopPropagation();\n    }\n\n    if (onFocus) {\n      onFocus(ev);\n    } else if (onFocusNotification) {\n      onFocusNotification();\n    }\n  };\n\n  /**\n   * When focus is in the zone at render time but then all focusable elements are removed,\n   * we \"park\" focus temporarily on the root. Once we update with focusable children, we restore\n   * focus to the closest path from previous. If the user tabs away from the parked container,\n   * we restore focusability to the pre-parked state.\n   */\n  private _setParkedFocus(isParked: boolean): void {\n    const { current: root } = this._root;\n\n    if (root && this._isParked !== isParked) {\n      this._isParked = isParked;\n\n      if (isParked) {\n        if (!this.props.allowFocusRoot) {\n          this._parkedTabIndex = root.getAttribute('tabindex');\n          root.setAttribute('tabindex', '-1');\n        }\n        root.focus();\n      } else if (!this.props.allowFocusRoot) {\n        if (this._parkedTabIndex) {\n          root.setAttribute('tabindex', this._parkedTabIndex);\n          this._parkedTabIndex = undefined;\n        } else {\n          root.removeAttribute('tabindex');\n        }\n      }\n    }\n  }\n\n  private _onBlur = (): void => {\n    this._setParkedFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    if (this._portalContainsElement(ev.target as HTMLElement)) {\n      // If the event target is inside a portal do not process the event.\n      return;\n    }\n\n    const { disabled } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    let target = ev.target as HTMLElement;\n    const path = [];\n\n    while (target && target !== this._root.current) {\n      path.push(target);\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n    }\n\n    while (path.length) {\n      target = path.pop() as HTMLElement;\n\n      if (target && isElementTabbable(target)) {\n        this._setActiveElement(target, true);\n      }\n\n      if (isElementFocusZone(target)) {\n        // Stop here since the focus zone will take care of its own children.\n        break;\n      }\n    }\n  };\n\n  private _setActiveElement(element: HTMLElement, forceAlignment?: boolean): void {\n    const previousActiveElement = this._activeElement;\n\n    this._activeElement = element;\n\n    if (previousActiveElement) {\n      if (isElementFocusZone(previousActiveElement)) {\n        this._updateTabIndexes(previousActiveElement);\n      }\n\n      previousActiveElement.tabIndex = -1;\n    }\n\n    if (this._activeElement) {\n      if (!this._focusAlignment || forceAlignment) {\n        this._setFocusAlignment(element, true, true);\n      }\n\n      this._activeElement.tabIndex = 0;\n    }\n  }\n\n  private _preventDefaultWhenHandled(ev: React.KeyboardEvent<HTMLElement>): void {\n    this.props.preventDefaultWhenHandled && ev.preventDefault();\n  }\n\n  /**\n   * Handle the keystrokes.\n   */\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>, theme: ITheme): boolean | undefined => {\n    if (this._portalContainsElement(ev.target as HTMLElement)) {\n      // If the event target is inside a portal do not process the event.\n      return;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const { direction, disabled, isInnerZoneKeystroke, pagingSupportDisabled, shouldEnterInnerZone } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // If the default has been prevented, do not process keyboard events.\n    if (ev.isDefaultPrevented()) {\n      return;\n    }\n\n    if (this._getDocument().activeElement === this._root.current && this._isInnerZone) {\n      // If this element has focus, it is being controlled by a parent.\n      // Ignore the keystroke.\n      return;\n    }\n\n    if (\n      ((shouldEnterInnerZone && shouldEnterInnerZone(ev)) || (isInnerZoneKeystroke && isInnerZoneKeystroke(ev))) &&\n      this._isImmediateDescendantOfZone(ev.target as HTMLElement)\n    ) {\n      // Try to focus\n      const innerZone = this._getFirstInnerZone();\n\n      if (innerZone) {\n        if (!innerZone.focus(true)) {\n          return;\n        }\n      } else if (isElementFocusSubZone(ev.target as HTMLElement)) {\n        if (\n          !this.focusElement(\n            getNextElement(\n              ev.target as HTMLElement,\n              (ev.target as HTMLElement).firstChild as HTMLElement,\n              true,\n            ) as HTMLElement,\n          )\n        ) {\n          return;\n        }\n      } else {\n        return;\n      }\n    } else if (ev.altKey) {\n      return;\n    } else {\n      // eslint-disable-next-line @fluentui/deprecated-keyboard-event-props\n      switch (ev.which) {\n        case KeyCodes.space:\n          if (this._tryInvokeClickForFocusable(ev.target as HTMLElement)) {\n            break;\n          }\n          return;\n\n        case KeyCodes.left:\n          if (direction !== FocusZoneDirection.vertical) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusLeft(theme)) {\n              break;\n            }\n          }\n          return;\n\n        case KeyCodes.right:\n          if (direction !== FocusZoneDirection.vertical) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusRight(theme)) {\n              break;\n            }\n          }\n          return;\n\n        case KeyCodes.up:\n          if (direction !== FocusZoneDirection.horizontal) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusUp()) {\n              break;\n            }\n          }\n          return;\n\n        case KeyCodes.down:\n          if (direction !== FocusZoneDirection.horizontal) {\n            this._preventDefaultWhenHandled(ev);\n            if (this._moveFocusDown()) {\n              break;\n            }\n          }\n          return;\n        case KeyCodes.pageDown:\n          if (!pagingSupportDisabled && this._moveFocusPaging(true)) {\n            break;\n          }\n          return;\n        case KeyCodes.pageUp:\n          if (!pagingSupportDisabled && this._moveFocusPaging(false)) {\n            break;\n          }\n          return;\n\n        case KeyCodes.tab:\n          if (\n            // eslint-disable-next-line deprecation/deprecation\n            this.props.allowTabKey ||\n            this.props.handleTabKey === FocusZoneTabbableElements.all ||\n            (this.props.handleTabKey === FocusZoneTabbableElements.inputOnly &&\n              this._isElementInput(ev.target as HTMLElement))\n          ) {\n            let focusChanged = false;\n            this._processingTabKey = true;\n            if (\n              direction === FocusZoneDirection.vertical ||\n              !this._shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP)\n            ) {\n              focusChanged = ev.shiftKey ? this._moveFocusUp() : this._moveFocusDown();\n            } else {\n              const tabWithDirection = getRTL(theme) ? !ev.shiftKey : ev.shiftKey;\n              focusChanged = tabWithDirection ? this._moveFocusLeft(theme) : this._moveFocusRight(theme);\n            }\n            this._processingTabKey = false;\n            if (focusChanged) {\n              break;\n            } else if (this.props.shouldResetActiveElementWhenTabFromZone) {\n              this._activeElement = null;\n            }\n          }\n          return;\n\n        case KeyCodes.home:\n          if (\n            this._isContentEditableElement(ev.target as HTMLElement) ||\n            (this._isElementInput(ev.target as HTMLElement) &&\n              !this._shouldInputLoseFocus(ev.target as HTMLInputElement, false))\n          ) {\n            return false;\n          }\n          const firstChild = this._root.current && (this._root.current.firstChild as HTMLElement | null);\n          if (\n            this._root.current &&\n            firstChild &&\n            this.focusElement(getNextElement(this._root.current, firstChild, true) as HTMLElement)\n          ) {\n            break;\n          }\n          return;\n\n        case KeyCodes.end:\n          if (\n            this._isContentEditableElement(ev.target as HTMLElement) ||\n            (this._isElementInput(ev.target as HTMLElement) &&\n              !this._shouldInputLoseFocus(ev.target as HTMLInputElement, true))\n          ) {\n            return false;\n          }\n\n          const lastChild = this._root.current && (this._root.current.lastChild as HTMLElement | null);\n          if (\n            this._root.current &&\n            this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true) as HTMLElement)\n          ) {\n            break;\n          }\n          return;\n\n        case KeyCodes.enter:\n          if (this._tryInvokeClickForFocusable(ev.target as HTMLElement)) {\n            break;\n          }\n          return;\n\n        default:\n          return;\n      }\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  /**\n   * Walk up the dom try to find a focusable element.\n   */\n  private _tryInvokeClickForFocusable(target: HTMLElement): boolean {\n    if (target === this._root.current || !this.props.shouldRaiseClicks) {\n      return false;\n    }\n\n    do {\n      if (\n        target.tagName === 'BUTTON' ||\n        target.tagName === 'A' ||\n        target.tagName === 'INPUT' ||\n        target.tagName === 'TEXTAREA'\n      ) {\n        return false;\n      }\n\n      if (\n        this._isImmediateDescendantOfZone(target) &&\n        target.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true' &&\n        target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== 'true'\n      ) {\n        raiseClick(target);\n        return true;\n      }\n\n      target = getParent(target, ALLOW_VIRTUAL_ELEMENTS) as HTMLElement;\n    } while (target !== this._root.current);\n\n    return false;\n  }\n\n  /**\n   * Traverse to find first child zone.\n   */\n  private _getFirstInnerZone(rootElement?: HTMLElement | null): FocusZone | null {\n    rootElement = rootElement || this._activeElement || this._root.current;\n\n    if (!rootElement) {\n      return null;\n    }\n\n    if (isElementFocusZone(rootElement)) {\n      return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n    }\n\n    let child = rootElement.firstElementChild as HTMLElement | null;\n\n    while (child) {\n      if (isElementFocusZone(child)) {\n        return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE) as string];\n      }\n      const match = this._getFirstInnerZone(child);\n\n      if (match) {\n        return match;\n      }\n\n      child = child.nextElementSibling as HTMLElement | null;\n    }\n\n    return null;\n  }\n\n  private _moveFocus(\n    isForward: boolean,\n    getDistanceFromCenter: (activeRect: ClientRect, targetRect: ClientRect) => number,\n    ev?: Event,\n    useDefaultWrap: boolean = true,\n  ): boolean {\n    let element = this._activeElement;\n    let candidateDistance = -1;\n    let candidateElement: HTMLElement | undefined = undefined;\n    let changedFocus = false;\n    const isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;\n\n    if (!element || !this._root.current) {\n      return false;\n    }\n\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element as HTMLInputElement, isForward)) {\n        return false;\n      }\n    }\n\n    const activeRect = isBidirectional ? element.getBoundingClientRect() : null;\n\n    do {\n      element = (isForward\n        ? getNextElement(this._root.current, element)\n        : getPreviousElement(this._root.current, element)) as HTMLElement;\n\n      if (isBidirectional) {\n        if (element) {\n          const targetRect = element.getBoundingClientRect();\n          const elementDistance = getDistanceFromCenter(activeRect as ClientRect, targetRect);\n\n          if (elementDistance === -1 && candidateDistance === -1) {\n            candidateElement = element;\n            break;\n          }\n\n          if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n\n          if (candidateDistance >= 0 && elementDistance < 0) {\n            break;\n          }\n        }\n      } else {\n        candidateElement = element;\n        break;\n      }\n    } while (element);\n\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(\n          getNextElement(this._root.current, this._root.current.firstElementChild as HTMLElement, true) as HTMLElement,\n        );\n      } else {\n        return this.focusElement(\n          getPreviousElement(\n            this._root.current,\n            this._root.current.lastElementChild as HTMLElement,\n            true,\n            true,\n            true,\n          ) as HTMLElement,\n        );\n      }\n    }\n\n    return changedFocus;\n  }\n\n  private _moveFocusDown(): boolean {\n    let targetTop = -1;\n    // eslint-disable-next-line deprecation/deprecation\n    const leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (\n      this._moveFocus(true, (activeRect: ClientRect, targetRect: ClientRect) => {\n        let distance = -1;\n        // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectBottom = Math.floor(activeRect.bottom);\n\n        if (targetRectTop < activeRectBottom) {\n          if (!this._shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if ((targetTop === -1 && targetRectTop >= activeRectBottom) || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, false, true);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _moveFocusUp(): boolean {\n    let targetTop = -1;\n    // eslint-disable-next-line deprecation/deprecation\n    const leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n\n    if (\n      this._moveFocus(false, (activeRect: ClientRect, targetRect: ClientRect) => {\n        let distance = -1;\n        // ClientRect values can be floats that differ by very small fractions of a decimal.\n        // If the difference between top and bottom are within a pixel then we should treat\n        // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n        // but without Math.Floor they will be handled incorrectly.\n        const targetRectBottom = Math.floor(targetRect.bottom);\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectTop = Math.floor(activeRect.top);\n\n        if (targetRectBottom > activeRectTop) {\n          if (!this._shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n          return LARGE_DISTANCE_FROM_CENTER;\n        }\n\n        if ((targetTop === -1 && targetRectBottom <= activeRectTop) || targetRectTop === targetTop) {\n          targetTop = targetRectTop;\n          if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n            distance = 0;\n          } else {\n            distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n          }\n        }\n\n        return distance;\n      })\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, false, true);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _moveFocusLeft(theme: ITheme): boolean {\n    const shouldWrap = this._shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP);\n    if (\n      this._moveFocus(\n        getRTL(theme),\n        (activeRect: ClientRect, targetRect: ClientRect) => {\n          let distance = -1;\n          let topBottomComparison;\n\n          if (getRTL(theme)) {\n            // When in RTL, this comparison should be the same as the one in _moveFocusRight for LTR.\n            // Going left at a leftmost rectangle will go down a line instead of up a line like in LTR.\n            // This is important, because we want to be comparing the top of the target rect\n            // with the bottom of the active rect.\n            topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n          } else {\n            topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n          }\n\n          if (\n            topBottomComparison &&\n            targetRect.right <= activeRect.right &&\n            this.props.direction !== FocusZoneDirection.vertical\n          ) {\n            distance = activeRect.right - targetRect.right;\n          } else if (!shouldWrap) {\n            distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return distance;\n        },\n        undefined /*ev*/,\n        shouldWrap,\n      )\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, true, false);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _moveFocusRight(theme: ITheme): boolean {\n    const shouldWrap = this._shouldWrapFocus(this._activeElement as HTMLElement, NO_HORIZONTAL_WRAP);\n    if (\n      this._moveFocus(\n        !getRTL(theme),\n        (activeRect: ClientRect, targetRect: ClientRect) => {\n          let distance = -1;\n          let topBottomComparison;\n\n          if (getRTL(theme)) {\n            // When in RTL, this comparison should be the same as the one in _moveFocusLeft for LTR.\n            // Going right at a rightmost rectangle will go up a line instead of down a line like in LTR.\n            // This is important, because we want to be comparing the bottom of the target rect\n            // with the top of the active rect.\n            topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));\n          } else {\n            topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));\n          }\n\n          if (\n            topBottomComparison &&\n            targetRect.left >= activeRect.left &&\n            this.props.direction !== FocusZoneDirection.vertical\n          ) {\n            distance = targetRect.left - activeRect.left;\n          } else if (!shouldWrap) {\n            distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n          }\n\n          return distance;\n        },\n        undefined /*ev*/,\n        shouldWrap,\n      )\n    ) {\n      this._setFocusAlignment(this._activeElement as HTMLElement, true, false);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _getHorizontalDistanceFromCenter = (\n    isForward: boolean,\n    activeRect: ClientRect,\n    targetRect: ClientRect,\n  ): number => {\n    // eslint-disable-next-line deprecation/deprecation\n    const leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;\n    // ClientRect values can be floats that differ by very small fractions of a decimal.\n    // If the difference between top and bottom are within a pixel then we should treat\n    // them as equivalent by using Math.floor. For instance 5.2222 and 5.222221 should be equivalent,\n    // but without Math.Floor they will be handled incorrectly.\n    const targetRectTop = Math.floor(targetRect.top);\n    const activeRectBottom = Math.floor(activeRect.bottom);\n    const targetRectBottom = Math.floor(targetRect.bottom);\n    const activeRectTop = Math.floor(activeRect.top);\n    const isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;\n    const isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;\n\n    if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {\n      if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {\n        return 0;\n      }\n      return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);\n    }\n\n    if (!this._shouldWrapFocus(this._activeElement as HTMLElement, NO_VERTICAL_WRAP)) {\n      return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;\n    }\n    return LARGE_DISTANCE_FROM_CENTER;\n  };\n\n  private _moveFocusPaging(isForward: boolean, useDefaultWrap: boolean = true): boolean {\n    let element = this._activeElement;\n    if (!element || !this._root.current) {\n      return false;\n    }\n    if (this._isElementInput(element)) {\n      if (!this._shouldInputLoseFocus(element as HTMLInputElement, isForward)) {\n        return false;\n      }\n    }\n    const scrollableParent = findScrollableParent(element);\n    if (!scrollableParent) {\n      return false;\n    }\n    let candidateDistance = -1;\n    let candidateElement = undefined;\n    let targetTop = -1;\n    let targetBottom = -1;\n    const pagesize = (scrollableParent as HTMLElement).clientHeight;\n    const activeRect = element.getBoundingClientRect();\n    do {\n      element = isForward\n        ? getNextElement(this._root.current, element)\n        : getPreviousElement(this._root.current, element);\n      if (element) {\n        const targetRect = element.getBoundingClientRect();\n        const targetRectTop = Math.floor(targetRect.top);\n        const activeRectBottom = Math.floor(activeRect.bottom);\n        const targetRectBottom = Math.floor(targetRect.bottom);\n        const activeRectTop = Math.floor(activeRect.top);\n        const elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);\n        const isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;\n        const isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;\n\n        if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {\n          break;\n        }\n        if (elementDistance > -1) {\n          // for paging down\n          if (isForward && targetRectTop > targetTop) {\n            targetTop = targetRectTop;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (!isForward && targetRectBottom < targetBottom) {\n            // for paging up\n            targetBottom = targetRectBottom;\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {\n            candidateDistance = elementDistance;\n            candidateElement = element;\n          }\n        }\n      }\n    } while (element);\n\n    let changedFocus = false;\n    // Focus the closest candidate\n    if (candidateElement && candidateElement !== this._activeElement) {\n      changedFocus = true;\n      this.focusElement(candidateElement);\n      this._setFocusAlignment(candidateElement as HTMLElement, false, true);\n    } else if (this.props.isCircularNavigation && useDefaultWrap) {\n      if (isForward) {\n        return this.focusElement(\n          getNextElement(this._root.current, this._root.current.firstElementChild as HTMLElement, true) as HTMLElement,\n        );\n      }\n      return this.focusElement(\n        getPreviousElement(\n          this._root.current,\n          this._root.current.lastElementChild as HTMLElement,\n          true,\n          true,\n          true,\n        ) as HTMLElement,\n      );\n    }\n    return changedFocus;\n  }\n\n  private _setFocusAlignment(element: HTMLElement, isHorizontal?: boolean, isVertical?: boolean): void {\n    if (\n      this.props.direction === FocusZoneDirection.bidirectional &&\n      (!this._focusAlignment || isHorizontal || isVertical)\n    ) {\n      const rect = element.getBoundingClientRect();\n      const left = rect.left + rect.width / 2;\n      const top = rect.top + rect.height / 2;\n\n      if (!this._focusAlignment) {\n        this._focusAlignment = { left, top };\n      }\n\n      if (isHorizontal) {\n        this._focusAlignment.left = left;\n      }\n\n      if (isVertical) {\n        this._focusAlignment.top = top;\n      }\n    }\n  }\n\n  private _isImmediateDescendantOfZone(element?: HTMLElement): boolean {\n    return this._getOwnerZone(element) === this._root.current;\n  }\n\n  private _getOwnerZone(element?: HTMLElement): HTMLElement | null {\n    let parentElement = getParent(element as HTMLElement, ALLOW_VIRTUAL_ELEMENTS);\n\n    while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {\n      if (isElementFocusZone(parentElement)) {\n        return parentElement;\n      }\n\n      parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);\n    }\n\n    return parentElement;\n  }\n\n  private _updateTabIndexes(element?: HTMLElement): void {\n    if (\n      !this._activeElement &&\n      this.props.defaultTabbableElement &&\n      typeof this.props.defaultTabbableElement === 'function'\n    ) {\n      this._activeElement = this.props.defaultTabbableElement(this._root.current as HTMLElement);\n    }\n\n    if (!element && this._root.current) {\n      this._defaultFocusElement = null;\n      element = this._root.current;\n      if (this._activeElement && !elementContains(element, this._activeElement)) {\n        this._activeElement = null;\n      }\n    }\n\n    // If active element changes state to disabled, set it to null.\n    // Otherwise, we lose keyboard accessibility to other elements in focus zone.\n    if (this._activeElement && !isElementTabbable(this._activeElement)) {\n      this._activeElement = null;\n    }\n\n    const childNodes = element && element.children;\n\n    for (let childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {\n      const child = childNodes[childIndex] as HTMLElement;\n\n      if (!isElementFocusZone(child)) {\n        // If the item is explicitly set to not be focusable then TABINDEX needs to be set to -1.\n        if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'false') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n\n        if (isElementTabbable(child)) {\n          if (this.props.disabled) {\n            child.setAttribute(TABINDEX, '-1');\n          } else if (\n            !this._isInnerZone &&\n            ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)\n          ) {\n            this._defaultFocusElement = child;\n            if (child.getAttribute(TABINDEX) !== '0') {\n              child.setAttribute(TABINDEX, '0');\n            }\n          } else if (child.getAttribute(TABINDEX) !== '-1') {\n            child.setAttribute(TABINDEX, '-1');\n          }\n        } else if (child.tagName === 'svg' && child.getAttribute('focusable') !== 'false') {\n          // Disgusting IE hack. Sad face.\n          child.setAttribute('focusable', 'false');\n        }\n      } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE) === 'true') {\n        if (\n          !this._isInnerZone &&\n          ((!this._activeElement && !this._defaultFocusElement) || this._activeElement === child)\n        ) {\n          this._defaultFocusElement = child;\n          if (child.getAttribute(TABINDEX) !== '0') {\n            child.setAttribute(TABINDEX, '0');\n          }\n        } else if (child.getAttribute(TABINDEX) !== '-1') {\n          child.setAttribute(TABINDEX, '-1');\n        }\n      }\n\n      this._updateTabIndexes(child);\n    }\n  }\n\n  private _isContentEditableElement(element: HTMLElement): boolean {\n    return element && element.getAttribute('contenteditable') === 'true';\n  }\n\n  private _isElementInput(element: HTMLElement): boolean {\n    if (\n      element &&\n      element.tagName &&\n      (element.tagName.toLowerCase() === 'input' || element.tagName.toLowerCase() === 'textarea')\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private _shouldInputLoseFocus(element: HTMLInputElement, isForward?: boolean): boolean {\n    // If a tab was used, we want to focus on the next element.\n    if (\n      !this._processingTabKey &&\n      element &&\n      element.type &&\n      ALLOWED_INPUT_TYPES.indexOf(element.type.toLowerCase()) > -1\n    ) {\n      const selectionStart = element.selectionStart;\n      const selectionEnd = element.selectionEnd;\n      const isRangeSelected = selectionStart !== selectionEnd;\n      const inputValue = element.value;\n      const isReadonly = element.readOnly;\n\n      // We shouldn't lose focus in the following cases:\n      // 1. There is range selected.\n      // 2. When selection start is larger than 0 and it is backward and not readOnly.\n      // 3. when selection start is not the end of length, it is forward and not readOnly.\n      // 4. We press any of the arrow keys when our handleTabKey isn't none or undefined (only losing focus if we hit\n      // tab) and if shouldInputLoseFocusOnArrowKey is defined, if scenario prefers to not loose the focus which is\n      // determined by calling the callback shouldInputLoseFocusOnArrowKey\n      if (\n        isRangeSelected ||\n        (selectionStart! > 0 && !isForward && !isReadonly) ||\n        (selectionStart !== inputValue.length && isForward && !isReadonly) ||\n        (!!this.props.handleTabKey &&\n          !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element)))\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private _shouldWrapFocus(\n    element: HTMLElement,\n    noWrapDataAttribute: 'data-no-vertical-wrap' | 'data-no-horizontal-wrap',\n  ): boolean {\n    return this.props.checkForNoWrap ? shouldWrapFocus(element, noWrapDataAttribute) : true;\n  }\n\n  /**\n   * Returns true if the element is a descendant of the FocusZone through a React portal.\n   */\n  private _portalContainsElement(element: HTMLElement): boolean {\n    return element && !!this._root.current && portalContainsElement(element, this._root.current);\n  }\n\n  private _getDocument(): Document {\n    return getDocument(this._root.current)!;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}