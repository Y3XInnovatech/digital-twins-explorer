{"ast":null,"code":"var _layersByHostId = {};\nvar _defaultHostSelector;\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function registerLayer(hostId, callback) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n  _layersByHostId[hostId].push(callback);\n}\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function unregisterLayer(hostId, callback) {\n  if (_layersByHostId[hostId]) {\n    var idx = _layersByHostId[hostId].indexOf(callback);\n    if (idx >= 0) {\n      _layersByHostId[hostId].splice(idx, 1);\n      if (_layersByHostId[hostId].length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n}\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(function (callback) {\n      return callback();\n    });\n  }\n}\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsey value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector) {\n  _defaultHostSelector = selector;\n}\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget() {\n  return _defaultHostSelector;\n}","map":{"version":3,"sources":["components/Layer/Layer.notification.ts"],"names":[],"mappings":"AAAA,IAAM,eAAe,GAAyC,CAAA,CAAE;AAEhE,IAAI,oBAAwC;AAE5C;;;;AAIG;AACH,OAAM,SAAU,aAAa,CAAC,MAAc,EAAE,QAAoB,EAAA;EAChE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE;IAC5B,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE;EAC7B;EAED,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;AACxC;AAEA;;;;AAIG;AACH,OAAM,SAAU,eAAe,CAAC,MAAc,EAAE,QAAoB,EAAA;EAClE,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE;IAC3B,IAAM,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;IACrD,IAAI,GAAG,IAAI,CAAC,EAAE;MACZ,eAAe,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;MACtC,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QACxC,OAAO,eAAe,CAAC,MAAM,CAAC;MAC/B;IACF;EACF;AACH;AAEA;;;AAGG;AACH,OAAM,SAAU,iBAAiB,CAAC,EAAU,EAAA;EAC1C,IAAI,eAAe,CAAC,EAAE,CAAC,EAAE;IACvB,eAAe,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAA;MAAI,OAAA,QAAQ,CAAA,CAAE;IAAV,CAAU,CAAC;EACpD;AACH;AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,gBAAgB,CAAC,QAAiB,EAAA;EAChD,oBAAoB,GAAG,QAAQ;AACjC;AAEA;;AAEG;AACH,OAAM,SAAU,gBAAgB,CAAA,EAAA;EAC9B,OAAO,oBAAoB;AAC7B","sourcesContent":["const _layersByHostId: { [hostId: string]: (() => void)[] } = {};\n\nlet _defaultHostSelector: string | undefined;\n\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function registerLayer(hostId: string, callback: () => void) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n}\n\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function unregisterLayer(hostId: string, callback: () => void) {\n  if (_layersByHostId[hostId]) {\n    const idx = _layersByHostId[hostId].indexOf(callback);\n    if (idx >= 0) {\n      _layersByHostId[hostId].splice(idx, 1);\n      if (_layersByHostId[hostId].length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n}\n\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id: string) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(callback => callback());\n  }\n}\n\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsey value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector?: string) {\n  _defaultHostSelector = selector;\n}\n\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget(): string | undefined {\n  return _defaultHostSelector;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}