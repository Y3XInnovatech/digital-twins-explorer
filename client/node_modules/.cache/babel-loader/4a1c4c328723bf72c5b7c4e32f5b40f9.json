{"ast":null,"code":"/**\n * The helper functions here will make the target element as modal to screen readers, by placing aria-hidden on elements\n * that are siblings to the target element and the target element's ancestors (because aria-hidden gets inherited).\n * That way, all other elements on the page are hidden to the screen reader.\n */\nimport { getDocument } from './dom/getDocument';\n/**\n * Call this on a target element to make it modal to screen readers.\n * Returns a function that undoes the changes it made.\n */\nexport function modalize(target) {\n  var _a;\n  var affectedNodes = [];\n  var targetDocument = getDocument(target) || document;\n  // start at target, then recurse and do the same for parent, until we reach <body>\n  while (target !== targetDocument.body) {\n    // grab all siblings of current element\n    for (var _i = 0, _b = target.parentElement.children; _i < _b.length; _i++) {\n      var sibling = _b[_i];\n      // but ignore elements that are already aria-hidden\n      if (sibling !== target && ((_a = sibling.getAttribute('aria-hidden')) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'true') {\n        affectedNodes.push(sibling);\n      }\n    }\n    if (!target.parentElement) {\n      break;\n    }\n    target = target.parentElement;\n  }\n  // take all those elements and set aria-hidden=true on them\n  affectedNodes.forEach(function (node) {\n    node.setAttribute('aria-hidden', 'true');\n  });\n  return function () {\n    unmodalize(affectedNodes);\n    affectedNodes = []; // dispose\n  };\n}\n/**\n * Undoes the changes that modalize() did.\n */\nfunction unmodalize(affectedNodes) {\n  affectedNodes.forEach(function (node) {\n    // set instead of removing in case other components explicitly set aria-hidden and do ==\"true\" or ==\"false\"\n    node.setAttribute('aria-hidden', 'false');\n  });\n}","map":{"version":3,"sources":["modalize.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AAEH,SAAS,WAAW,QAAQ,mBAAmB;AAE/C;;;AAGG;AACH,OAAM,SAAU,QAAQ,CAAC,MAAmB,EAAA;;EAC1C,IAAI,aAAa,GAAkB,EAAE;EACrC,IAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,QAAQ;EAEtD;EACA,OAAO,MAAM,KAAK,cAAc,CAAC,IAAI,EAAE;IACrC;IACA,KAAsB,IAAA,EAAA,GAAA,CAAiE,EAAjE,EAAA,GAAC,MAAM,CAAC,aAAc,CAAC,QAA0C,EAAjE,EAAA,GAAA,EAAA,CAAA,MAAiE,EAAjE,EAAA,EAAiE,EAAE;MAApF,IAAM,OAAO,GAAA,EAAA,CAAA,EAAA,CAAA;MAChB;MACA,IAAI,OAAO,KAAK,MAAM,IAAI,CAAA,CAAA,EAAA,GAAA,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,CAAA,CAAA,MAAO,MAAM,EAAE;QACvF,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC;MAC5B;IACF;IAED,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;MACzB;IACD;IACD,MAAM,GAAG,MAAM,CAAC,aAAa;EAC9B;EAED;EACA,aAAa,CAAC,OAAO,CAAC,UAAA,IAAI,EAAA;IACxB,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;EAC1C,CAAC,CAAC;EAEF,OAAO,YAAA;IACL,UAAU,CAAC,aAAa,CAAC;IACzB,aAAa,GAAG,EAAE,CAAC,CAAC;EACtB,CAAC;AACH;AAEA;;AAEG;AACH,SAAS,UAAU,CAAC,aAA4B,EAAA;EAC9C,aAAa,CAAC,OAAO,CAAC,UAAA,IAAI,EAAA;IACxB;IACA,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,OAAO,CAAC;EAC3C,CAAC,CAAC;AACJ","sourcesContent":["/**\n * The helper functions here will make the target element as modal to screen readers, by placing aria-hidden on elements\n * that are siblings to the target element and the target element's ancestors (because aria-hidden gets inherited).\n * That way, all other elements on the page are hidden to the screen reader.\n */\n\nimport { getDocument } from './dom/getDocument';\n\n/**\n * Call this on a target element to make it modal to screen readers.\n * Returns a function that undoes the changes it made.\n */\nexport function modalize(target: HTMLElement): () => void {\n  let affectedNodes: HTMLElement[] = [];\n  const targetDocument = getDocument(target) || document;\n\n  // start at target, then recurse and do the same for parent, until we reach <body>\n  while (target !== targetDocument.body) {\n    // grab all siblings of current element\n    for (const sibling of (target.parentElement!.children as unknown) as Array<HTMLElement>) {\n      // but ignore elements that are already aria-hidden\n      if (sibling !== target && sibling.getAttribute('aria-hidden')?.toLowerCase() !== 'true') {\n        affectedNodes.push(sibling);\n      }\n    }\n\n    if (!target.parentElement) {\n      break;\n    }\n    target = target.parentElement;\n  }\n\n  // take all those elements and set aria-hidden=true on them\n  affectedNodes.forEach(node => {\n    node.setAttribute('aria-hidden', 'true');\n  });\n\n  return () => {\n    unmodalize(affectedNodes);\n    affectedNodes = []; // dispose\n  };\n}\n\n/**\n * Undoes the changes that modalize() did.\n */\nfunction unmodalize(affectedNodes: HTMLElement[]) {\n  affectedNodes.forEach(node => {\n    // set instead of removing in case other components explicitly set aria-hidden and do ==\"true\" or ==\"false\"\n    node.setAttribute('aria-hidden', 'false');\n  });\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}