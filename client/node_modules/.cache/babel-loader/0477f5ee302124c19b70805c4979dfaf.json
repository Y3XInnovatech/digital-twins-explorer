{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MetricsAPI = void 0;\nvar NoopMeterProvider_1 = require(\"../metrics/NoopMeterProvider\");\nvar global_utils_1 = require(\"./global-utils\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function MetricsAPI() {}\n  /** Get the singleton instance of the Metrics API */\n  MetricsAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current global meter. Returns the initialized global meter provider.\n   */\n  MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n    if (global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY]) {\n      // global meter provider has already been set\n      return this.getMeterProvider();\n    }\n    global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopMeterProvider_1.NOOP_METER_PROVIDER);\n    return provider;\n  };\n  /**\n   * Returns the global meter provider.\n   */\n  MetricsAPI.prototype.getMeterProvider = function () {\n    var _a, _b;\n    return (_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopMeterProvider_1.NOOP_METER_PROVIDER;\n  };\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  MetricsAPI.prototype.getMeter = function (name, version) {\n    return this.getMeterProvider().getMeter(name, version);\n  };\n  /** Remove the global meter provider */\n  MetricsAPI.prototype.disable = function () {\n    delete global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY];\n  };\n  return MetricsAPI;\n}();\nexports.MetricsAPI = MetricsAPI;","map":{"version":3,"sources":["../../../src/api/metrics.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;AAcG;;;;;AAIH,IAAA,mBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAOA;;AAEG;AACH,IAAA,UAAA,GAAA,aAAA,YAAA;EAGE;EACA,SAAA,UAAA,CAAA,EAAA,CAAuB;EAEvB;EACc,UAAA,CAAA,WAAW,GAAzB,YAAA;IACE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;MACnB,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,CAAA,CAAE;IAClC;IAED,OAAO,IAAI,CAAC,SAAS;EACvB,CAAC;EAED;;AAEG;EACI,UAAA,CAAA,SAAA,CAAA,sBAAsB,GAA7B,UAA8B,QAAuB,EAAA;IACnD,IAAI,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,sBAAsB,CAAC,EAAE;MACnC;MACA,OAAO,IAAI,CAAC,gBAAgB,CAAA,CAAE;IAC/B;IAED,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,sBAAsB,CAAC,GAAG,cAAA,CAAA,UAAU,CAC1C,cAAA,CAAA,mCAAmC,EACnC,QAAQ,EACR,mBAAA,CAAA,mBAAmB,CACpB;IAED,OAAO,QAAQ;EACjB,CAAC;EAED;;AAEG;EACI,UAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,YAAA;;IACE,OAAO,CAAA,EAAA,GAAA,CAAA,EAAA,GACL,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,sBAAsB,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAA/B,cAAA,CAAA,OAAO,EAA2B,cAAA,CAAA,mCAAmC,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GACrE,mBAAA,CAAA,mBAAmB;EAEvB,CAAC;EAED;;AAEG;EACI,UAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,UAAgB,IAAY,EAAE,OAAgB,EAAA;IAC5C,OAAO,IAAI,CAAC,gBAAgB,CAAA,CAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC;EACxD,CAAC;EAED;EACO,UAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IACE,OAAO,cAAA,CAAA,OAAO,CAAC,cAAA,CAAA,sBAAsB,CAAC;EACxC,CAAC;EACH,OAAA,UAAC;AAAD,CAAC,CAAA,CAAA;AAtDY,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetricsAPI = void 0;\nvar NoopMeterProvider_1 = require(\"../metrics/NoopMeterProvider\");\nvar global_utils_1 = require(\"./global-utils\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter. Returns the initialized global meter provider.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        if (global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY]) {\n            // global meter provider has already been set\n            return this.getMeterProvider();\n        }\n        global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopMeterProvider_1.NOOP_METER_PROVIDER);\n        return provider;\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        var _a, _b;\n        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopMeterProvider_1.NOOP_METER_PROVIDER);\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version) {\n        return this.getMeterProvider().getMeter(name, version);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        delete global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY];\n    };\n    return MetricsAPI;\n}());\nexports.MetricsAPI = MetricsAPI;\n//# sourceMappingURL=metrics.js.map"]},"metadata":{},"sourceType":"script"}