{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nvar getClassNames = classNamesFunction();\nvar GroupHeaderBase = /** @class */function (_super) {\n  __extends(GroupHeaderBase, _super);\n  function GroupHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._toggleCollapse = function () {\n      var _a = _this.props,\n        group = _a.group,\n        onToggleCollapse = _a.onToggleCollapse,\n        isGroupLoading = _a.isGroupLoading;\n      var isCollapsed = _this.state.isCollapsed;\n      var newCollapsed = !isCollapsed;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\n      _this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n    };\n    _this._onKeyUp = function (ev) {\n      var _a = _this.props,\n        group = _a.group,\n        onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;\n      if (onGroupHeaderKeyUp) {\n        onGroupHeaderKeyUp(ev, group);\n      }\n      if (!ev.defaultPrevented) {\n        var shouldOpen = _this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, _this.props.theme);\n        var shouldClose = !_this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, _this.props.theme);\n        if (shouldClose || shouldOpen) {\n          _this._toggleCollapse();\n          ev.stopPropagation();\n          ev.preventDefault();\n        }\n      }\n    };\n    _this._onToggleClick = function (ev) {\n      _this._toggleCollapse();\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n    _this._onToggleSelectGroupClick = function (ev) {\n      var _a = _this.props,\n        onToggleSelectGroup = _a.onToggleSelectGroup,\n        group = _a.group;\n      if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n    _this._onHeaderClick = function () {\n      var _a = _this.props,\n        group = _a.group,\n        onGroupHeaderClick = _a.onGroupHeaderClick,\n        onToggleSelectGroup = _a.onToggleSelectGroup;\n      if (onGroupHeaderClick) {\n        onGroupHeaderClick(group);\n      } else if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n    };\n    _this._onRenderTitle = function (props) {\n      var group = props.group,\n        ariaColSpan = props.ariaColSpan;\n      if (!group) {\n        return null;\n      }\n      return React.createElement(\"div\", {\n        className: _this._classNames.title,\n        id: _this._id,\n        role: \"gridcell\",\n        \"aria-colspan\": ariaColSpan\n      }, React.createElement(\"span\", null, group.name), React.createElement(\"span\", {\n        className: _this._classNames.headerCount\n      }, \"(\", group.count, group.hasMoreData && '+', \")\"));\n    };\n    _this._id = getId('GroupHeader');\n    _this.state = {\n      isCollapsed: _this.props.group && _this.props.group.isCollapsed,\n      isLoadingVisible: false\n    };\n    return _this;\n  }\n  GroupHeaderBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    if (nextProps.group) {\n      var newCollapsed = nextProps.group.isCollapsed;\n      var isGroupLoading = nextProps.isGroupLoading;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n      return __assign(__assign({}, previousState), {\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false\n      });\n    }\n    return previousState;\n  };\n  GroupHeaderBase.prototype.render = function () {\n    var _a = this.props,\n      group = _a.group,\n      _b = _a.groupLevel,\n      groupLevel = _b === void 0 ? 0 : _b,\n      viewport = _a.viewport,\n      selectionMode = _a.selectionMode,\n      loadingText = _a.loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      _c = _a.isSelected,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = _c === void 0 ? false : _c,\n      _d = _a.selected,\n      selected = _d === void 0 ? false : _d,\n      indentWidth = _a.indentWidth,\n      _e = _a.onRenderTitle,\n      onRenderTitle = _e === void 0 ? this._onRenderTitle : _e,\n      onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox,\n      _f = _a.isCollapsedGroupSelectVisible,\n      isCollapsedGroupSelectVisible = _f === void 0 ? true : _f,\n      expandButtonProps = _a.expandButtonProps,\n      expandButtonIcon = _a.expandButtonIcon,\n      selectAllButtonProps = _a.selectAllButtonProps,\n      theme = _a.theme,\n      styles = _a.styles,\n      className = _a.className,\n      compact = _a.compact,\n      ariaPosInSet = _a.ariaPosInSet,\n      ariaSetSize = _a.ariaSetSize,\n      useFastIcons = _a.useFastIcons;\n    var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n    var onRenderCheckbox = onRenderGroupHeaderCheckbox ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender) : defaultCheckboxRender;\n    var _g = this.state,\n      isCollapsed = _g.isCollapsed,\n      isLoadingVisible = _g.isLoadingVisible;\n    var canSelectGroup = selectionMode === SelectionMode.multiple;\n    var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    var currentlySelected = selected || isSelected;\n    var isRTL = getRTL(theme);\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      selected: currentlySelected,\n      isCollapsed: isCollapsed,\n      compact: compact\n    });\n    if (!group) {\n      return null;\n    }\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: viewport ? {\n        minWidth: viewport.width\n      } : {},\n      onClick: this._onHeaderClick,\n      role: \"row\",\n      \"aria-setsize\": ariaSetSize,\n      \"aria-posinset\": ariaPosInSet,\n      \"data-is-focusable\": true,\n      onKeyUp: this._onKeyUp,\n      \"aria-label\": group.ariaLabel,\n      \"aria-labelledby\": group.ariaLabel ? undefined : this._id,\n      \"aria-expanded\": !this.state.isCollapsed,\n      \"aria-selected\": canSelectGroup ? currentlySelected : undefined,\n      \"aria-level\": groupLevel + 1\n    }, React.createElement(\"div\", {\n      className: this._classNames.groupHeaderContainer,\n      role: \"presentation\"\n    }, isSelectionCheckVisible ? React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.check,\n      role: \"checkbox\",\n      \"aria-checked\": currentlySelected,\n      \"data-selection-toggle\": true,\n      onClick: this._onToggleSelectGroupClick\n    }, selectAllButtonProps), onRenderCheckbox({\n      checked: currentlySelected,\n      theme: theme\n    }, onRenderCheckbox))) : selectionMode !== SelectionMode.none && React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: 1\n    }), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: groupLevel\n    }), React.createElement(\"div\", {\n      className: this._classNames.dropIcon,\n      role: \"presentation\"\n    }, React.createElement(Icon, {\n      iconName: \"Tag\"\n    })), React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.expand,\n      onClick: this._onToggleClick,\n      \"aria-expanded\": !this.state.isCollapsed\n    }, expandButtonProps), React.createElement(Icon, {\n      className: this._classNames.expandIsCollapsed,\n      iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')\n    }))), onRenderTitle(this.props, this._onRenderTitle), isLoadingVisible && React.createElement(Spinner, {\n      label: loadingText\n    })));\n  };\n  GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(Check, {\n      checked: checkboxProps.checked\n    });\n  };\n  GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(FastCheck, {\n      theme: checkboxProps.theme,\n      checked: checkboxProps.checked\n    });\n  };\n  GroupHeaderBase.defaultProps = {\n    expandButtonProps: {\n      'aria-label': 'expand collapse group'\n    }\n  };\n  return GroupHeaderBase;\n}(React.Component);\nexport { GroupHeaderBase };\nvar FastCheck = React.memo(function (props) {\n  return React.createElement(Check, {\n    theme: props.theme,\n    checked: props.checked,\n    className: props.className,\n    useFastIcons: true\n  });\n});","map":{"version":3,"sources":["components/GroupedList/GroupHeader.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet, ITheme } from '../../Styling';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        role=\"row\"\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        // aria-rowindex is omitted because the default calculated index\n        // is better than an incorrect declared index\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                aria-checked={currentlySelected}\n                data-selection-toggle={true}\n                onClick={this._onToggleSelectGroupClick}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={indentWidth} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group!);\n    }\n\n    if (!ev.defaultPrevented) {\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group, ariaColSpan } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title} id={this._id} role=\"gridcell\" aria-colspan={ariaColSpan}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}