{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ExcelImportPlugin } from \"./plugins/ExcelImportPlugin\";\nimport { JsonImportPlugin } from \"./plugins/JsonImportPlugin\";\nimport { apiService } from \"./ApiService\";\nimport { ModelService } from \"./ModelService\";\nimport { print } from \"./LoggingService\";\nimport { BatchService } from \"./BatchService\";\nconst ImportPlugins = [ExcelImportPlugin, JsonImportPlugin];\nclass ImportService {\n  constructor() {\n    this.formatJsonNumberIntoString = data => {\n      for (const twin of data.digitalTwinsGraph.digitalTwins) {\n        if (typeof twin.$dtId === \"number\") {\n          twin.$dtId = twin.$dtId.toString();\n        }\n      }\n    };\n  }\n  async tryLoad(file) {\n    for (const P of ImportPlugins) {\n      const plugin = new P();\n      const result = plugin.tryLoad && (await plugin.tryLoad(file));\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  async save(data) {\n    this.formatJsonNumberIntoString(data);\n    let dataImported = false;\n    if (data.digitalTwinsModels && data.digitalTwinsModels.length > 0) {\n      await this.saveModels(data);\n      dataImported = true;\n    }\n    if (data.digitalTwinsGraph.digitalTwins && data.digitalTwinsGraph.digitalTwins.length > 0 || data.digitalTwinsGraph.relationships && data.digitalTwinsGraph.relationships.length > 0) {\n      await this.saveData(data);\n      dataImported = true;\n    }\n    return dataImported;\n  }\n  async saveModels(data) {\n    const modelService = new ModelService();\n    const currentModels = await apiService.queryModels();\n    const sortedModelsId = await modelService.getModelIdsForUpload(data.digitalTwinsModels);\n    let sortedModels = sortedModelsId.map(id => data.digitalTwinsModels.filter(model => model[\"@id\"] === id)[0]);\n    sortedModels = sortedModels.filter(model => !currentModels.some(item => item.id === model[\"@id\"]));\n    if (sortedModels.length > 0) {\n      const chunks = modelService.chunkModelsList(sortedModels, 50);\n      for (const chunk of chunks) {\n        await apiService.addModels(chunk);\n      }\n    }\n  }\n  async saveData(data) {\n    const results = {\n      twins: [],\n      relationships: []\n    };\n    await apiService.initialize();\n    const twinsBs = new BatchService({\n      items: data.digitalTwinsGraph.digitalTwins,\n      action: (item, resolve, reject) => {\n        print(`- Create twin ${item.$dtId}`);\n        apiService.addTwin(item.$dtId, item).then(resolve, e => {\n          print(`*** Error in creating twin: ${e}`, \"error\");\n          results.twins.push(item);\n          reject(e);\n        });\n      }\n    });\n    await twinsBs.run();\n    const groupedRels = data.digitalTwinsGraph.relationships.reduce((p, c) => {\n      (p[c.$relationshipName] = p[c.$relationshipName] || []).push(c);\n      return p;\n    }, {});\n    for (const rel of Object.keys(groupedRels)) {\n      const relBs = new BatchService({\n        items: groupedRels[rel],\n        action: (item, resolve, reject) => {\n          print(`- Create relationship ${item.$relationshipName} from ${item.$sourceId} to ${item.$targetId}`);\n          apiService.addRelationship(item.$sourceId, item.$targetId, item.$relationshipName, item.$relationshipId, item.$properties).then(resolve, e => {\n            print(`*** Error in creating relationship: ${e}`, \"error\");\n            results.relationships.push({\n              ...item,\n              $errorMessage: e.details.error.details ? e.details.error.details[0].message : e.details.error.message\n            });\n            reject(e);\n          });\n        }\n      });\n      await relBs.run();\n    }\n    if (results.twins.length > 0 || results.relationships.length > 0) {\n      const twins = results.twins.length > 0 ? `twins ${results.twins.map(x => x.$dtId).join(\", \")}` : \"\";\n      const joiner = results.twins.length > 0 && results.relationships.length > 0 ? \" and \" : \"\";\n      const rels = results.relationships.length > 0 ? `relationships ${results.relationships.map(x => `${x.$sourceId} ${x.$targetId} \\n${x.$errorMessage}`).join(\", \")}` : \"\";\n      const msg = `Failed to create ${twins}${joiner}${rels}`;\n      throw new Error(msg);\n    }\n  }\n}\nexport const importService = new ImportService();","map":{"version":3,"names":["ExcelImportPlugin","JsonImportPlugin","apiService","ModelService","print","BatchService","ImportPlugins","ImportService","constructor","formatJsonNumberIntoString","data","twin","digitalTwinsGraph","digitalTwins","$dtId","toString","tryLoad","file","P","plugin","result","save","dataImported","digitalTwinsModels","length","saveModels","relationships","saveData","modelService","currentModels","queryModels","sortedModelsId","getModelIdsForUpload","sortedModels","map","id","filter","model","some","item","chunks","chunkModelsList","chunk","addModels","results","twins","initialize","twinsBs","items","action","resolve","reject","addTwin","then","e","push","run","groupedRels","reduce","p","c","$relationshipName","rel","Object","keys","relBs","$sourceId","$targetId","addRelationship","$relationshipId","$properties","$errorMessage","details","error","message","x","join","joiner","rels","msg","Error","importService"],"sources":["/home/saharsh/digital-twins-explorer/client/src/services/ImportService.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ExcelImportPlugin } from \"./plugins/ExcelImportPlugin\";\nimport { JsonImportPlugin } from \"./plugins/JsonImportPlugin\";\nimport { apiService } from \"./ApiService\";\nimport { ModelService } from \"./ModelService\";\nimport { print } from \"./LoggingService\";\nimport { BatchService } from \"./BatchService\";\n\nconst ImportPlugins = [ ExcelImportPlugin, JsonImportPlugin ];\n\nclass ImportService {\n\n  async tryLoad(file) {\n    for (const P of ImportPlugins) {\n      const plugin = new P();\n      const result = plugin.tryLoad && await plugin.tryLoad(file);\n      if (result) {\n        return result;\n      }\n    }\n\n    return null;\n  }\n\n  formatJsonNumberIntoString = data => {\n    for (const twin of data.digitalTwinsGraph.digitalTwins) {\n      if (typeof twin.$dtId === \"number\") {\n        twin.$dtId = twin.$dtId.toString();\n      }\n    }\n  }\n\n  async save(data) {\n    this.formatJsonNumberIntoString(data);\n    let dataImported = false;\n    if (data.digitalTwinsModels && data.digitalTwinsModels.length > 0) {\n      await this.saveModels(data);\n      dataImported = true;\n    }\n    if ((data.digitalTwinsGraph.digitalTwins && data.digitalTwinsGraph.digitalTwins.length > 0)\n          || (data.digitalTwinsGraph.relationships && data.digitalTwinsGraph.relationships.length > 0)) {\n      await this.saveData(data);\n      dataImported = true;\n    }\n    return dataImported;\n  }\n\n  async saveModels(data) {\n    const modelService = new ModelService();\n    const currentModels = await apiService.queryModels();\n    const sortedModelsId = await modelService.getModelIdsForUpload(data.digitalTwinsModels);\n    let sortedModels = sortedModelsId.map(id => data.digitalTwinsModels.filter(model => model[\"@id\"] === id)[0]);\n    sortedModels = sortedModels.filter(model => !currentModels.some(item => item.id === model[\"@id\"]));\n    if (sortedModels.length > 0) {\n      const chunks = modelService.chunkModelsList(sortedModels, 50);\n      for (const chunk of chunks) {\n        await apiService.addModels(chunk);\n      }\n    }\n  }\n\n  async saveData(data) {\n    const results = { twins: [], relationships: [] };\n    await apiService.initialize();\n    const twinsBs = new BatchService({\n      items: data.digitalTwinsGraph.digitalTwins,\n      action: (item, resolve, reject) => {\n        print(`- Create twin ${item.$dtId}`);\n        apiService.addTwin(item.$dtId, item)\n          .then(resolve, e => {\n            print(`*** Error in creating twin: ${e}`, \"error\");\n            results.twins.push(item);\n            reject(e);\n          });\n      }\n    });\n    await twinsBs.run();\n\n    const groupedRels = data.digitalTwinsGraph.relationships.reduce((p, c) => {\n      (p[c.$relationshipName] = p[c.$relationshipName] || []).push(c);\n      return p;\n    }, {});\n    for (const rel of Object.keys(groupedRels)) {\n      const relBs = new BatchService({\n        items: groupedRels[rel],\n        action: (item, resolve, reject) => {\n          print(`- Create relationship ${item.$relationshipName} from ${item.$sourceId} to ${item.$targetId}`);\n          apiService.addRelationship(item.$sourceId, item.$targetId, item.$relationshipName, item.$relationshipId, item.$properties)\n            .then(resolve, e => {\n              print(`*** Error in creating relationship: ${e}`, \"error\");\n              results.relationships.push({ ...item, $errorMessage: e.details.error.details ? e.details.error.details[0].message : e.details.error.message });\n              reject(e);\n            });\n        }\n      });\n      await relBs.run();\n    }\n\n    if (results.twins.length > 0 || results.relationships.length > 0) {\n      const twins = results.twins.length > 0 ? `twins ${results.twins.map(x => x.$dtId).join(\", \")}` : \"\";\n      const joiner = results.twins.length > 0 && results.relationships.length > 0 ? \" and \" : \"\";\n      const rels = results.relationships.length > 0\n        ? `relationships ${results.relationships.map(x =>\n          `${x.$sourceId} ${x.$targetId} \\n${x.$errorMessage}`).join(\", \")}`\n        : \"\";\n      const msg = `Failed to create ${twins}${joiner}${rels}`;\n      throw new Error(msg);\n    }\n  }\n\n}\n\nexport const importService = new ImportService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}