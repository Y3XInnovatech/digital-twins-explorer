{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { warn, warnControlledUsage, warnConditionallyRequiredProps, warnDeprecations, warnMutuallyExclusive } from '@uifabric/utilities/lib/warn';\nimport { usePrevious } from './usePrevious';\nimport { useConst } from './useConst';\nvar warningId = 0;\n/**\n * Only in development mode, display console warnings when certain conditions are met.\n * Note that all warnings except `controlledUsage` will only be shown on first render\n * (new `controlledUsage` warnings may be shown later due to prop changes).\n */\nexport function useWarnings(options) {\n  if (process.env.NODE_ENV !== 'production') {\n    var name_1 = options.name,\n      props = options.props,\n      _a = options.other,\n      other = _a === void 0 ? [] : _a,\n      conditionallyRequired = options.conditionallyRequired,\n      deprecations = options.deprecations,\n      mutuallyExclusive = options.mutuallyExclusive,\n      controlledUsage = options.controlledUsage;\n    /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */\n    var hasWarnedRef = React.useRef(false);\n    var componentId = useConst(function () {\n      return \"useWarnings_\" + warningId++;\n    });\n    var oldProps = usePrevious(props);\n    /* eslint-enable react-hooks/rules-of-hooks */\n    // Warn synchronously (not in useEffect) on first render to make debugging easier.\n    if (!hasWarnedRef.current) {\n      hasWarnedRef.current = true;\n      for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {\n        var warning = other_1[_i];\n        warn(warning);\n      }\n      if (conditionallyRequired) {\n        for (var _b = 0, conditionallyRequired_1 = conditionallyRequired; _b < conditionallyRequired_1.length; _b++) {\n          var req = conditionallyRequired_1[_b];\n          warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);\n        }\n      }\n      deprecations && warnDeprecations(name_1, props, deprecations);\n      mutuallyExclusive && warnMutuallyExclusive(name_1, props, mutuallyExclusive);\n    }\n    // Controlled usage warnings may be displayed on either first or subsequent renders due to\n    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in\n    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been\n    // displayed for each component instance (so nothing will be displayed twice).\n    controlledUsage && warnControlledUsage(__assign(__assign({}, controlledUsage), {\n      componentId: componentId,\n      props: props,\n      componentName: name_1,\n      oldProps: oldProps\n    }));\n  }\n}","map":{"version":3,"sources":["useWarnings.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAGE,IAAI,EACJ,mBAAmB,EACnB,8BAA8B,EAC9B,gBAAgB,EAChB,qBAAqB,QAChB,8BAA8B;AACrC,SAAS,WAAW,QAAQ,eAAe;AAC3C,SAAS,QAAQ,QAAQ,YAAY;AAkDrC,IAAI,SAAS,GAAG,CAAC;AAEjB;;;;AAIG;AACH,OAAM,SAAU,WAAW,CAAI,OAA2B,EAAA;EACxD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IAEvC,IAAA,MAAA,GAAA,OAAA,CAAA,IAAI;MACJ,KAAA,GAAA,OAAA,CAAA,KAAK;MACL,EAAA,GAAA,OAAA,CAAA,KAAU;MAAV,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAU;MACV,qBAAA,GAAA,OAAA,CAAA,qBAAqB;MACrB,YAAA,GAAA,OAAA,CAAA,YAAY;MACZ,iBAAA,GAAA,OAAA,CAAA,iBAAiB;MACjB,eAAA,GAAA,OAAA,CAAA,eAAe;IAGjB;IACA,IAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;IACxC,IAAM,WAAW,GAAG,QAAQ,CAAC,YAAA;MAAM,OAAA,cAAA,GAAe,SAAS,EAAI;IAA5B,CAA4B,CAAC;IAChE,IAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC;IACnC;IAEA;IACA,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;MACzB,YAAY,CAAC,OAAO,GAAG,IAAI;MAE3B,KAAsB,IAAA,EAAA,GAAA,CAAK,EAAL,OAAA,GAAA,KAAK,EAAL,EAAA,GAAA,OAAA,CAAA,MAAK,EAAL,EAAA,EAAK,EAAE;QAAxB,IAAM,OAAO,GAAA,OAAA,CAAA,EAAA,CAAA;QAChB,IAAI,CAAC,OAAO,CAAC;MACd;MAED,IAAI,qBAAqB,EAAE;QACzB,KAAkB,IAAA,EAAA,GAAA,CAAqB,EAArB,uBAAA,GAAA,qBAAqB,EAArB,EAAA,GAAA,uBAAA,CAAA,MAAqB,EAArB,EAAA,EAAqB,EAAE;UAApC,IAAM,GAAG,GAAA,uBAAA,CAAA,EAAA,CAAA;UACZ,8BAA8B,CAAC,MAAI,EAAE,KAAK,EAAE,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC,mBAAmB,EAAE,GAAG,CAAC,SAAS,CAAC;QACvG;MACF;MAED,YAAY,IAAI,gBAAgB,CAAC,MAAI,EAAE,KAAK,EAAE,YAAY,CAAC;MAE3D,iBAAiB,IAAI,qBAAqB,CAAC,MAAI,EAAE,KAAK,EAAE,iBAAiB,CAAC;IAC3E;IAED;IACA;IACA;IACA;IACA,eAAe,IAAI,mBAAmB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAM,eAAe,CAAA,EAAA;MAAE,WAAW,EAAA,WAAA;MAAE,KAAK,EAAA,KAAA;MAAE,aAAa,EAAE,MAAI;MAAE,QAAQ,EAAA;IAAA,CAAA,CAAA,CAAG;EAClH;AACH","sourcesContent":["import * as React from 'react';\nimport {\n  ISettingsMap,\n  IWarnControlledUsageParams,\n  warn,\n  warnControlledUsage,\n  warnConditionallyRequiredProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n} from '@uifabric/utilities/lib/warn';\nimport { usePrevious } from './usePrevious';\nimport { useConst } from './useConst';\n\nexport interface IWarningOptions<P> {\n  /** Name of the component */\n  name: string;\n\n  /** Current component props */\n  props: P;\n\n  /** Generic messages */\n  other?: string[];\n\n  /** Warns when props are required if a condition is met */\n  conditionallyRequired?: {\n    /** Props required when the condition is met */\n    requiredProps: string[];\n    /** Name of the prop that the condition is based on */\n    conditionalPropName: string;\n    /** Whether the condition is met */\n    condition: boolean;\n  }[];\n\n  /**\n   * Warns when deprecated props are being used. Each key is a prop name and each value is\n   * either undefined or a replacement prop name.\n   */\n  deprecations?: ISettingsMap<P>;\n\n  /**\n   * Warns when two props which are mutually exclusive are both being used.\n   * The key is one prop name and the value is the other.\n   */\n  mutuallyExclusive?: ISettingsMap<P>;\n\n  /**\n   * Check for and warn on the following error conditions with a form component:\n   * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n   *    and the component is not read-only\n   * - Both the value and defaultValue props are provided\n   * - The component is attempting to switch between controlled and uncontrolled\n   *\n   * The messages mimic the warnings React gives for these error conditions on input elements.\n   * The warning will only be displayed once per component instance.\n   */\n  controlledUsage?: Pick<\n    IWarnControlledUsageParams<P>,\n    'valueProp' | 'defaultValueProp' | 'onChangeProp' | 'readOnlyProp'\n  >;\n}\n\nlet warningId = 0;\n\n/**\n * Only in development mode, display console warnings when certain conditions are met.\n * Note that all warnings except `controlledUsage` will only be shown on first render\n * (new `controlledUsage` warnings may be shown later due to prop changes).\n */\nexport function useWarnings<P>(options: IWarningOptions<P>) {\n  if (process.env.NODE_ENV !== 'production') {\n    const {\n      name,\n      props,\n      other = [],\n      conditionallyRequired,\n      deprecations,\n      mutuallyExclusive,\n      controlledUsage,\n    } = options;\n\n    /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */\n    const hasWarnedRef = React.useRef(false);\n    const componentId = useConst(() => `useWarnings_${warningId++}`);\n    const oldProps = usePrevious(props);\n    /* eslint-enable react-hooks/rules-of-hooks */\n\n    // Warn synchronously (not in useEffect) on first render to make debugging easier.\n    if (!hasWarnedRef.current) {\n      hasWarnedRef.current = true;\n\n      for (const warning of other) {\n        warn(warning);\n      }\n\n      if (conditionallyRequired) {\n        for (const req of conditionallyRequired) {\n          warnConditionallyRequiredProps(name, props, req.requiredProps, req.conditionalPropName, req.condition);\n        }\n      }\n\n      deprecations && warnDeprecations(name, props, deprecations);\n\n      mutuallyExclusive && warnMutuallyExclusive(name, props, mutuallyExclusive);\n    }\n\n    // Controlled usage warnings may be displayed on either first or subsequent renders due to\n    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in\n    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been\n    // displayed for each component instance (so nothing will be displayed twice).\n    controlledUsage && warnControlledUsage({ ...controlledUsage, componentId, props, componentName: name, oldProps });\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}