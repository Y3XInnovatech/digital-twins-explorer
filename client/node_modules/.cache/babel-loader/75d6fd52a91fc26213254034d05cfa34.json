{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { IconType } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\nvar getClassNames = classNamesFunction({\n  // Icon is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Icon.\n  // Therefore setting a larger cache size.\n  cacheSize: 100\n});\nvar IconBase = /** @class */function (_super) {\n  __extends(IconBase, _super);\n  function IconBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._onImageLoadingStateChange = function (state) {\n      if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {\n        _this.props.imageProps.onLoadingStateChange(state);\n      }\n      if (state === ImageLoadState.error) {\n        _this.setState({\n          imageLoadError: true\n        });\n      }\n    };\n    _this.state = {\n      imageLoadError: false\n    };\n    return _this;\n  }\n  IconBase.prototype.render = function () {\n    var _a = this.props,\n      children = _a.children,\n      className = _a.className,\n      styles = _a.styles,\n      iconName = _a.iconName,\n      imageErrorAs = _a.imageErrorAs,\n      theme = _a.theme;\n    var isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    var isImage =\n    // eslint-disable-next-line deprecation/deprecation\n    !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n    var iconContent = getIconContent(iconName) || {};\n    var iconClassName = iconContent.iconClassName,\n      iconContentChildren = iconContent.children;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      iconClassName: iconClassName,\n      isImage: isImage,\n      isPlaceholder: isPlaceholder\n    });\n    var RootType = isImage ? 'span' : 'i';\n    var nativeProps = getNativeProps(this.props, htmlElementProperties, ['aria-label']);\n    var imageLoadError = this.state.imageLoadError;\n    var imageProps = __assign(__assign({}, this.props.imageProps), {\n      onLoadingStateChange: this._onImageLoadingStateChange\n    });\n    var ImageType = imageLoadError && imageErrorAs || Image;\n    // eslint-disable-next-line deprecation/deprecation\n    var ariaLabel = this.props['aria-label'] || this.props.ariaLabel;\n    var containerProps = ariaLabel ? {\n      'aria-label': ariaLabel\n    } : {\n      'aria-hidden': this.props['aria-labelledby'] || imageProps['aria-labelledby'] ? false : true\n    };\n    return React.createElement(RootType, __assign({\n      \"data-icon-name\": iconName\n    }, containerProps, nativeProps, {\n      className: classNames.root\n    }), isImage ? React.createElement(ImageType, __assign({}, imageProps)) : children || iconContentChildren);\n  };\n  return IconBase;\n}(React.Component);\nexport { IconBase };","map":{"version":3,"sources":["components/Icon/Icon.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { IIconProps, IconType, IIconStyleProps, IIconStyles } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState, IImageProps } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\n\nexport interface IIconState {\n  imageLoadError: boolean;\n}\n\nconst getClassNames = classNamesFunction<IIconStyleProps, IIconStyles>({\n  // Icon is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Icon.\n  // Therefore setting a larger cache size.\n  cacheSize: 100,\n});\n\nexport class IconBase extends React.Component<IIconProps, IIconState> {\n  constructor(props: IIconProps) {\n    super(props);\n    this.state = {\n      imageLoadError: false,\n    };\n  }\n\n  public render() {\n    const { children, className, styles, iconName, imageErrorAs, theme } = this.props;\n    const isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    const isImage =\n      // eslint-disable-next-line deprecation/deprecation\n      !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n    const iconContent = getIconContent(iconName) || {};\n    const { iconClassName, children: iconContentChildren } = iconContent;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      iconClassName,\n      isImage,\n      isPlaceholder,\n    });\n\n    const RootType = isImage ? 'span' : 'i';\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'aria-label',\n    ]);\n    const { imageLoadError } = this.state;\n    const imageProps: IImageProps = {\n      ...this.props.imageProps,\n      onLoadingStateChange: this._onImageLoadingStateChange,\n    };\n    const ImageType = (imageLoadError && imageErrorAs) || Image;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const ariaLabel = this.props['aria-label'] || this.props.ariaLabel;\n    const containerProps = ariaLabel\n      ? {\n          'aria-label': ariaLabel,\n        }\n      : {\n          'aria-hidden': this.props['aria-labelledby'] || imageProps['aria-labelledby'] ? false : true,\n        };\n\n    return (\n      <RootType data-icon-name={iconName} {...containerProps} {...nativeProps} className={classNames.root}>\n        {isImage ? <ImageType {...imageProps} /> : children || iconContentChildren}\n      </RootType>\n    );\n  }\n\n  private _onImageLoadingStateChange = (state: ImageLoadState): void => {\n    if (this.props.imageProps && this.props.imageProps.onLoadingStateChange) {\n      this.props.imageProps.onLoadingStateChange(state);\n    }\n    if (state === ImageLoadState.error) {\n      this.setState({ imageLoadError: true });\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}