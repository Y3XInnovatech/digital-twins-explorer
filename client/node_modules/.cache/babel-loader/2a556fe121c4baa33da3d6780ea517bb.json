{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getId, classNamesFunction, mergeAriaAttributeValues, initializeComponentRef, warnMutuallyExclusive, FocusRects } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { KeytipData } from '../../KeytipData';\nvar getClassNames = classNamesFunction();\nvar CheckboxBase = /** @class */function (_super) {\n  __extends(CheckboxBase, _super);\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n  function CheckboxBase(props, context) {\n    var _this = _super.call(this, props, context) || this;\n    _this._checkBox = React.createRef();\n    _this._renderContent = function (checked, indeterminate, keytipAttributes) {\n      if (keytipAttributes === void 0) {\n        keytipAttributes = {};\n      }\n      var _a = _this.props,\n        disabled = _a.disabled,\n        inputProps = _a.inputProps,\n        name = _a.name,\n        ariaLabel = _a.ariaLabel,\n        ariaLabelledBy = _a.ariaLabelledBy,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        _b = _a.onRenderLabel,\n        onRenderLabel = _b === void 0 ? _this._onRenderLabel : _b,\n        checkmarkIconProps = _a.checkmarkIconProps,\n        ariaPositionInSet = _a.ariaPositionInSet,\n        ariaSetSize = _a.ariaSetSize,\n        title = _a.title,\n        label = _a.label;\n      return React.createElement(\"div\", {\n        className: _this._classNames.root,\n        title: title\n      }, React.createElement(FocusRects, null), React.createElement(\"input\", __assign({\n        type: \"checkbox\"\n      }, inputProps, {\n        \"data-ktp-execute-target\": keytipAttributes['data-ktp-execute-target'],\n        checked: checked,\n        disabled: disabled,\n        className: _this._classNames.input,\n        ref: _this._checkBox,\n        name: name,\n        id: _this._id,\n        title: title,\n        onChange: _this._onChange,\n        onFocus: _this._onFocus,\n        onBlur: _this._onBlur,\n        \"aria-disabled\": disabled,\n        \"aria-label\": ariaLabel || label,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-describedby\": mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby']),\n        \"aria-posinset\": ariaPositionInSet,\n        \"aria-setsize\": ariaSetSize,\n        \"aria-checked\": indeterminate ? 'mixed' : checked ? 'true' : 'false'\n      })), React.createElement(\"label\", {\n        className: _this._classNames.label,\n        htmlFor: _this._id\n      }, React.createElement(\"div\", {\n        className: _this._classNames.checkbox,\n        \"data-ktp-target\": keytipAttributes['data-ktp-target']\n      }, React.createElement(Icon, __assign({\n        iconName: \"CheckMark\"\n      }, checkmarkIconProps, {\n        className: _this._classNames.checkmark\n      }))), onRenderLabel(_this.props, _this._onRenderLabel)));\n    };\n    _this._onFocus = function (ev) {\n      var inputProps = _this.props.inputProps;\n      if (inputProps && inputProps.onFocus) {\n        inputProps.onFocus(ev);\n      }\n    };\n    _this._onBlur = function (ev) {\n      var inputProps = _this.props.inputProps;\n      if (inputProps && inputProps.onBlur) {\n        inputProps.onBlur(ev);\n      }\n    };\n    _this._onChange = function (ev) {\n      var onChange = _this.props.onChange;\n      var _a = _this.state,\n        isChecked = _a.isChecked,\n        isIndeterminate = _a.isIndeterminate;\n      if (!isIndeterminate) {\n        if (onChange) {\n          onChange(ev, !isChecked);\n        }\n        if (_this.props.checked === undefined) {\n          _this.setState({\n            isChecked: !isChecked\n          });\n        }\n      } else {\n        // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n        // controlled, lets the consumer know to change it by calling onChange). It doesn't\n        // change the checked state.\n        if (onChange) {\n          onChange(ev, isChecked);\n        }\n        if (_this.props.indeterminate === undefined) {\n          _this.setState({\n            isIndeterminate: false\n          });\n        }\n      }\n    };\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n        title = props.title;\n      return label ? React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: _this._classNames.text,\n        title: title\n      }, label) : null;\n    };\n    initializeComponentRef(_this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      });\n    }\n    _this._id = _this.props.id || getId('checkbox-');\n    _this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate)\n    };\n    return _this;\n  }\n  CheckboxBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var stateUpdate = {};\n    if (nextProps.indeterminate !== undefined) {\n      stateUpdate.isIndeterminate = !!nextProps.indeterminate;\n    }\n    if (nextProps.checked !== undefined) {\n      stateUpdate.isChecked = !!nextProps.checked;\n    }\n    return Object.keys(stateUpdate).length ? stateUpdate : null;\n  };\n  /**\n   * Render the Checkbox based on passed props\n   */\n  CheckboxBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      className = _a.className,\n      disabled = _a.disabled,\n      boxSide = _a.boxSide,\n      theme = _a.theme,\n      styles = _a.styles,\n      _b = _a.onRenderLabel,\n      onRenderLabel = _b === void 0 ? this._onRenderLabel : _b,\n      keytipProps = _a.keytipProps;\n    var _c = this.state,\n      isChecked = _c.isChecked,\n      isIndeterminate = _c.isIndeterminate;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel\n    });\n    if (keytipProps) {\n      return React.createElement(KeytipData, {\n        keytipProps: keytipProps,\n        disabled: disabled\n      }, function (keytipAttributes) {\n        return _this._renderContent(isChecked, isIndeterminate, keytipAttributes);\n      });\n    }\n    return this._renderContent(isChecked, isIndeterminate);\n  };\n  Object.defineProperty(CheckboxBase.prototype, \"indeterminate\", {\n    get: function () {\n      return !!this.state.isIndeterminate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CheckboxBase.prototype, \"checked\", {\n    get: function () {\n      return !!this.state.isChecked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  CheckboxBase.prototype.focus = function () {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  };\n  CheckboxBase.defaultProps = {\n    boxSide: 'start'\n  };\n  return CheckboxBase;\n}(React.Component);\nexport { CheckboxBase };","map":{"version":3,"sources":["components/Checkbox/Checkbox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getId,\n  classNamesFunction,\n  mergeAriaAttributeValues,\n  initializeComponentRef,\n  warnMutuallyExclusive,\n  FocusRects,\n} from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { ICheckbox, ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface ICheckboxState {\n  /** Is true when Uncontrolled control is checked. */\n  isChecked?: boolean;\n  isIndeterminate?: boolean;\n}\n\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\n\nexport class CheckboxBase extends React.Component<ICheckboxProps, ICheckboxState> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n    boxSide: 'start',\n  };\n\n  private _checkBox = React.createRef<HTMLInputElement>();\n  private _id: string;\n  private _classNames: { [key in keyof ICheckboxStyles]: string };\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<ICheckboxProps>,\n    prevState: Readonly<ICheckboxState>,\n  ): ICheckboxState | null {\n    const stateUpdate: Partial<ICheckboxState> = {};\n    if (nextProps.indeterminate !== undefined) {\n      stateUpdate.isIndeterminate = !!nextProps.indeterminate;\n    }\n    if (nextProps.checked !== undefined) {\n      stateUpdate.isChecked = !!nextProps.checked;\n    }\n    return Object.keys(stateUpdate).length ? stateUpdate : null;\n  }\n\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n  constructor(props: ICheckboxProps, context?: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate',\n      });\n    }\n\n    this._id = this.props.id || getId('checkbox-');\n    this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate),\n    };\n  }\n\n  /**\n   * Render the Checkbox based on passed props\n   */\n  public render(): JSX.Element {\n    const {\n      className,\n      disabled,\n      boxSide,\n      theme,\n      styles,\n      onRenderLabel = this._onRenderLabel,\n      keytipProps,\n    } = this.props;\n\n    const { isChecked, isIndeterminate } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel,\n    });\n\n    if (keytipProps) {\n      return (\n        <KeytipData keytipProps={keytipProps} disabled={disabled}>\n          {(keytipAttributes: any): JSX.Element => this._renderContent(isChecked, isIndeterminate, keytipAttributes)}\n        </KeytipData>\n      );\n    }\n\n    return this._renderContent(isChecked, isIndeterminate);\n  }\n\n  public get indeterminate(): boolean {\n    return !!this.state.isIndeterminate;\n  }\n\n  public get checked(): boolean {\n    return !!this.state.isChecked;\n  }\n\n  public focus(): void {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  }\n\n  private _renderContent = (\n    checked: boolean | undefined,\n    indeterminate: boolean | undefined,\n    keytipAttributes: any = {},\n  ): JSX.Element => {\n    const {\n      disabled,\n      inputProps,\n      name,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      onRenderLabel = this._onRenderLabel,\n      checkmarkIconProps,\n      ariaPositionInSet,\n      ariaSetSize,\n      title,\n      label,\n    } = this.props;\n\n    return (\n      <div className={this._classNames.root} title={title}>\n        <FocusRects />\n        <input\n          type=\"checkbox\"\n          {...inputProps}\n          data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\n          checked={checked}\n          disabled={disabled}\n          className={this._classNames.input}\n          ref={this._checkBox}\n          name={name}\n          id={this._id}\n          title={title}\n          onChange={this._onChange}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          aria-disabled={disabled}\n          aria-label={ariaLabel || label}\n          aria-labelledby={ariaLabelledBy}\n          aria-describedby={mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])}\n          aria-posinset={ariaPositionInSet}\n          aria-setsize={ariaSetSize}\n          aria-checked={indeterminate ? 'mixed' : checked ? 'true' : 'false'}\n        />\n        <label className={this._classNames.label} htmlFor={this._id}>\n          <div className={this._classNames.checkbox} data-ktp-target={keytipAttributes['data-ktp-target']}>\n            <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={this._classNames.checkmark} />\n          </div>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n        </label>\n      </div>\n    );\n  };\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onFocus) {\n      inputProps.onFocus(ev);\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onBlur) {\n      inputProps.onBlur(ev);\n    }\n  };\n\n  private _onChange = (ev: React.FormEvent<HTMLElement>): void => {\n    const { onChange } = this.props;\n    const { isChecked, isIndeterminate } = this.state;\n\n    if (!isIndeterminate) {\n      if (onChange) {\n        onChange(ev, !isChecked);\n      }\n      if (this.props.checked === undefined) {\n        this.setState({ isChecked: !isChecked });\n      }\n    } else {\n      // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n      // controlled, lets the consumer know to change it by calling onChange). It doesn't\n      // change the checked state.\n      if (onChange) {\n        onChange(ev, isChecked);\n      }\n      if (this.props.indeterminate === undefined) {\n        this.setState({ isIndeterminate: false });\n      }\n    }\n  };\n\n  private _onRenderLabel = (props: ICheckboxProps): JSX.Element | null => {\n    const { label, title } = props;\n\n    return label ? (\n      <span aria-hidden=\"true\" className={this._classNames.text} title={title}>\n        {label}\n      </span>\n    ) : null;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}