{"ast":null,"code":"var _jsxFileName = \"/home/saharsh/Music/digital-twins-explorer/client/src/components/GraphViewerComponent/GraphViewerCytoscapeComponent/GraphViewerCytoscapeComponent.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/* eslint-disable max-lines-per-function */\n\nimport React from \"react\";\nimport CytoscapeComponent from \"react-cytoscapejs\";\nimport _uniqueId from \"lodash/uniqueId\";\nimport { colors, graphStyles, dagreOptions, colaOptions, klayOptions, fcoseOptions, modelWithImageStyle, navigationOptions } from \"./config\";\nimport { getUniqueRelationshipId, addNavigator } from \"../../../utils/utilities\";\nimport { settingsService } from \"../../../services/SettingsService\";\nimport \"./GraphViewerCytoscapeComponent.scss\";\nimport \"cytoscape-context-menus/cytoscape-context-menus.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GraphViewerCytoscapeLayouts = {\n  \"Cola\": colaOptions,\n  \"Dagre\": dagreOptions,\n  \"fCoSE\": fcoseOptions,\n  \"Klay\": klayOptions\n};\nconst SPACE_KEY_CODE = 32;\nconst ENTER_KEY_CODE = 13;\nconst ESC_KEY_CODE = 27;\nconst TAB_KEY_CODE = 9;\nexport class GraphViewerCytoscapeComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.hideSelectedTwins = nodeId => {\n      const cy = this.graphControl;\n      if (this.selectedNodes.length > 0) {\n        this.selectedNodes.forEach(x => {\n          cy.$id(x.id).toggleClass(\"hide\", true);\n        });\n        cy.$(\":selected\").unselect();\n        this.clearSelection();\n      } else if (nodeId) {\n        cy.$id(nodeId).toggleClass(\"hide\", true);\n      }\n    };\n    this.onAddRelationship = ({\n      target: node\n    }) => {\n      if (node && node.id()) {\n        this.props.onCreateRelationship({\n          id: node.id(),\n          modelId: node.data().modelId\n        });\n      }\n    };\n    this.hideOtherTwins = nodeId => {\n      const cy = this.graphControl;\n      if (this.selectedNodes.length > 0) {\n        cy.nodes().forEach(currentNode => {\n          if (this.selectedNodes.filter(n => n.id === currentNode.id()).length === 0 && currentNode.id() !== nodeId) {\n            cy.$id(currentNode.id()).toggleClass(\"hide\", true);\n          }\n        });\n      } else if (nodeId) {\n        cy.nodes().forEach(currentNode => {\n          if (currentNode.id() !== nodeId) {\n            cy.$id(currentNode.id()).toggleClass(\"hide\", true);\n          }\n        });\n      }\n    };\n    this.hideNonChildren = node => {\n      const cy = this.graphControl;\n      let relatedNodesIds = [];\n      if (this.selectedNodes.length > 0) {\n        relatedNodesIds = this.getSelectedNodesChildrenIds([...this.selectedNodes, {\n          id: node.id(),\n          modelId: node.data().modelId\n        }]);\n      } else if (node && node.id()) {\n        relatedNodesIds = this.getSelectedNodesChildrenIds([{\n          id: node.id(),\n          modelId: node.data().modelId\n        }]);\n      }\n      cy.nodes().forEach(cyNode => {\n        if (relatedNodesIds.indexOf(cyNode.id()) === -1) {\n          cy.$id(cyNode.id()).toggleClass(\"hide\", true);\n        }\n      });\n    };\n    this.getSelectedNodesChildrenIds = nodes => {\n      const cy = this.graphControl;\n      const relatedNodesIds = [];\n      const searchForChildren = nodeIds => {\n        nodeIds.forEach(nodeId => {\n          const selectedNode = cy.nodes().filter(n => n.id() === nodeId);\n          const connectedEdges = selectedNode.connectedEdges();\n          const selectedNodeRelatedNodesIds = connectedEdges.filter(edge => selectedNode.id() === edge.data().source).map(edge => edge.data().target);\n          relatedNodesIds.push(selectedNode.id());\n          searchForChildren(selectedNodeRelatedNodesIds);\n        });\n      };\n      searchForChildren(nodes ? nodes.map(n => n.id) : this.selectedNodes.map(n => n.id));\n      return relatedNodesIds;\n    };\n    this.hideWithChildren = node => {\n      const cy = this.graphControl;\n      let relatedNodesIds = [];\n      if (this.selectedNodes.length > 0) {\n        this.clearSelection();\n        cy.$(\":selected\").unselect();\n        relatedNodesIds = this.getSelectedNodesChildrenIds([...this.selectedNodes, {\n          id: node.id(),\n          modelId: node.data().modelId\n        }]);\n      } else if (node && node.id()) {\n        relatedNodesIds = this.getSelectedNodesChildrenIds([{\n          id: node.id(),\n          modelId: node.data().modelId\n        }]);\n      }\n      cy.nodes().forEach(cyNode => {\n        if (relatedNodesIds.indexOf(cyNode.id()) !== -1) {\n          cyNode.toggleClass(\"hide\", true);\n        }\n      });\n      this.selectedNodes = [];\n    };\n    this.onHideRelationship = e => {\n      const target = e.target || e.cyTarget;\n      target.toggleClass(\"hide\", true);\n      this.props.onHideRelationship();\n    };\n    this.onHideRelationshipsOfType = e => {\n      const cy = this.graphControl;\n      const target = e.target || e.cyTarget;\n      const label = target.data(\"label\");\n      cy.elements(`edge[label=\"${label}\"]`).toggleClass(\"hide\", true);\n      this.props.onHideRelationship();\n    };\n    this.clearOverlay = () => {\n      this.clearSelection();\n      this.unselectSelectedNodes();\n    };\n    this.clearSelection = () => {\n      const cy = this.graphControl;\n      cy.nodes().forEach(cyNode => {\n        cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n        cy.$id(cyNode.id()).toggleClass(\"highlighted\", false);\n        cy.$id(cyNode.id()).toggleClass(\"selected\", false);\n      });\n      cy.edges().forEach(cyEdge => {\n        cy.$id(cyEdge.id()).toggleClass(\"opaque\", false);\n        cy.$id(cyEdge.id()).toggleClass(\"highlighted\", false);\n      });\n      this.selectedNodes = [];\n    };\n    this.unselectSelectedNodes = () => {\n      if (this.graphControl.$(\":selected\").length > 0) {\n        this.graphControl.$(\":selected\").unselect();\n        this.selectedNodes = [];\n      }\n    };\n    this.unselectSelectedNodes = () => {\n      if (this.graphControl.$(\":selected\").length > 0) {\n        this.graphControl.$(\":selected\").unselect();\n        this.selectedNodes = [];\n      }\n      this.selectedNodes = [];\n    };\n    this.showAllNodes = () => {\n      const cy = this.graphControl;\n      cy.nodes().forEach(cyNode => {\n        cy.$id(cyNode.id()).toggleClass(\"hide\", false);\n      });\n      cy.edges().forEach(cyEdge => {\n        cy.$id(cyEdge.id()).toggleClass(\"hide\", false);\n      });\n    };\n    this.showAllEdges = () => {\n      const cy = this.graphControl;\n      cy.edges().forEach(cyEdge => {\n        cy.$id(cyEdge.id()).toggleClass(\"hide\", false);\n      });\n    };\n    this.onNodeSelected = ({\n      target: node\n    }) => {\n      if (this.props.overlayResults && !this.isSelectingOnOverlay) {\n        this.isSelectingOnOverlay = true;\n      }\n      if (this.selectedOutsideComponent.length > 0) {\n        const selectedOutsideIds = this.selectedOutsideComponent.map(n => n.id);\n        this.selectedNodes = this.selectedNodes.filter(n => !selectedOutsideIds.includes(n.id));\n        this.clearHighlighting();\n      }\n      this.selectedNodes.push({\n        id: node.id(),\n        modelId: node.data().modelId\n      });\n      this.highlightRelatedNodes();\n      this.onNodeClicked();\n      this.contextMenuIsOpen = false;\n    };\n    this.onNodeUnselected = e => {\n      const removed = this.selectedNodes.findIndex(x => x.id === e.target.id());\n      if (removed >= 0) {\n        this.selectedNodes.splice(removed, 1);\n        this.highlightRelatedNodes();\n      }\n      if (this.selectedNodes.length === 0) {\n        this.clearSelection();\n      }\n    };\n    this.dimGraphElements = () => {\n      const cy = this.graphControl;\n      cy.edges().toggleClass(\"opaque\", true);\n      cy.edges().toggleClass(\"highlighted\", false);\n      cy.nodes().forEach(node => cy.$id(node.id()).toggleClass(\"opaque\", true));\n      cy.nodes().forEach(node => cy.$id(node.id()).toggleClass(\"highlight\", false));\n    };\n    this.selectNodes = (nodeIds, exterior = false) => {\n      this.dimGraphElements();\n      if (nodeIds && nodeIds.length > 0) {\n        const cy = this.graphControl;\n        this.selectedNodes = [];\n        if (exterior) {\n          this.selectedOutsideComponent = [];\n        }\n        nodeIds.forEach(id => {\n          const node = cy.elements(`node[id=\"${id}\"]`);\n          if (node) {\n            this.selectedNodes.push({\n              id: node.id(),\n              modelId: node.data().modelId\n            });\n            if (exterior) {\n              this.selectedOutsideComponent.push({\n                id: node.id(),\n                modelId: node.data().modelId\n              });\n            }\n            cy.$id(node.data().id).toggleClass(\"selected\", true);\n            cy.$id(node.data().id).toggleClass(\"opaque\", false);\n            node.connectedEdges().forEach(edge => {\n              const relatedNodeId = node.id() === edge.data().source ? edge.data().target : edge.data().source;\n              if (nodeIds.indexOf(relatedNodeId) !== -1) {\n                cy.$id(edge.data().id).toggleClass(\"highlighted\", true);\n                cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n              }\n            });\n          }\n        });\n      } else {\n        this.clearSelection();\n      }\n    };\n    this.selectEdges = rels => {\n      if (rels && rels.length > 0) {\n        const cy = this.graphControl;\n        rels.forEach(rel => {\n          cy.$id(getUniqueRelationshipId(rel)).toggleClass(\"highlighted\", true);\n          cy.$id(getUniqueRelationshipId(rel)).toggleClass(\"opaque\", false);\n        });\n      }\n    };\n    this.onEdgeSelected = e => {\n      const {\n        onEdgeClicked\n      } = this.props;\n      if (onEdgeClicked) {\n        const cy = this.graphControl;\n        const selectedEdges = cy.edges().filter(edge => edge.selected());\n        onEdgeClicked(e.target.data(), selectedEdges);\n      }\n      this.contextMenuIsOpen = false;\n    };\n    this.onNodeClicked = async () => {\n      const {\n        onNodeClicked\n      } = this.props;\n      if (onNodeClicked) {\n        await onNodeClicked({\n          selectedNode: this.selectedNodes.length > 0 ? this.selectedNodes[this.selectedNodes.length - 1] : null,\n          selectedNodes: this.selectedNodes.length > 0 ? this.selectedNodes : null\n        });\n      }\n    };\n    this.onNodeDoubleClicked = e => {\n      const {\n        onNodeDoubleClicked\n      } = this.props;\n      if (onNodeDoubleClicked) {\n        onNodeDoubleClicked({\n          id: e.target.id()\n        });\n      }\n    };\n    this.onNodeRightClick = ({\n      target: node\n    }) => {\n      this.setContextMenuState(node.id());\n    };\n    this.setContextMenuState = nodeId => {\n      this.setState({\n        hideContextMenu: false\n      }, () => {\n        this.contextMenuIsOpen = true;\n        this.onNodeUnhover();\n        if (nodeId) {\n          if (this.selectedNodes.length === 1 && this.selectedNodes[0].id !== nodeId) {\n            this.contextMenu.showMenuItem(\"add-relationship\");\n          } else if (this.selectedNodes.length === 2 && this.selectedNodes.filter(n => n.id === nodeId).length === 1) {\n            this.contextMenu.showMenuItem(\"add-relationship\");\n          } else {\n            this.contextMenu.hideMenuItem(\"add-relationship\");\n          }\n        }\n      });\n    };\n    this.focusContextMenu = () => {\n      const contextMenuEl = document.getElementsByClassName(\"custom-context-menu\")[0];\n      const availableMenuItems = Array.from(contextMenuEl.querySelectorAll(\".custom-menu-item\")).filter(item => !item.disabled && item.style.display !== \"none\");\n      const focusBackAndClearHandlers = () => {\n        this.props.onFocusBackToTwinViewer();\n        availableMenuItems.forEach(item => {\n          item.removeEventListener(\"keydown\", handler);\n        });\n        this.contextNode = null;\n        this.contextEdge = null;\n        this.contextMenu = this.graphControl.contextMenus({\n          menuItems: this.contextMenuItems,\n          menuItemClasses: [\"custom-menu-item\"],\n          contextMenuClasses: [\"custom-context-menu\"]\n        });\n      };\n      const handler = e => {\n        if (e.keyCode === SPACE_KEY_CODE) {\n          e.preventDefault();\n          focusBackAndClearHandlers();\n        } else if (e.keyCode === ENTER_KEY_CODE) {\n          e.preventDefault();\n          e.target.click();\n          focusBackAndClearHandlers();\n        }\n      };\n      if (availableMenuItems[0]) {\n        availableMenuItems[0].focus();\n        availableMenuItems.forEach(item => {\n          item.addEventListener(\"keydown\", handler);\n        });\n      }\n      availableMenuItems[availableMenuItems.length - 1].addEventListener(\"keydown\", e => {\n        e.preventDefault();\n        availableMenuItems[0].focus();\n      });\n    };\n    this.getContents = (properties, relationships) => {\n      let definedProperties = \"\";\n      let definedRelationships = \"\";\n      for (const [key] of Object.entries(properties)) {\n        definedProperties += `<li>${key}</li>`;\n      }\n      relationships.forEach(r => definedRelationships += `<li>${r.name}</li>`);\n      return {\n        definedRelationships,\n        definedProperties\n      };\n    };\n    this.getPopperContent = (label, modelId, modelDisplayName, modelDescription, properties, relationships) => {\n      const {\n        definedProperties,\n        definedRelationships\n      } = this.getContents(properties, relationships);\n      const div = document.createElement(\"div\");\n      div.setAttribute(\"id\", \"cy-popper\");\n      div.addEventListener(\"mouseenter\", () => {\n        this.canRenderPopper = true;\n      });\n      div.addEventListener(\"mouseleave\", () => {\n        this.canRenderPopper = false;\n        this.removePopper();\n      });\n      div.innerHTML = `\n      <div>\n        <h4>DTID:</h4>\n        <p>${label}</p>\n        ${modelDisplayName ? `<h4>MODEL DISPLAY NAME:</h4>\n          <p>${modelDisplayName}</p>` : \"\"}\n        <h4>MODEL ID:</h4>\n        <p>${modelId}</p>\n        ${modelDescription ? `<h4>DESCRIPTION:</h4>\n          <p class=\"description-container\">${modelDescription ? modelDescription : \"\"}</p>` : \"\"}\n      </div>\n      ${definedProperties ? `<div>\n          <h4>DEFINED PROPERTIES</h4>\n          <ul>${definedProperties}</ul>\n        </div>` : \"\"}\n      ${definedRelationships ? `<div>\n          <h4>DEFINED RELATIONSHIPS</h4>\n          <ul>${definedRelationships}</ul>\n        </div>` : \"\"}\n    `;\n      return div;\n    };\n    this.onNodeHover = ({\n      target: node\n    }) => {\n      this.removePopper();\n      const {\n        category,\n        label,\n        modelId,\n        properties: nodeProperties\n      } = node.data();\n      if (node !== this.graphControl && category === \"Twin\" && !this.isFetchingTwinData && !this.contextMenuIsOpen) {\n        this.canRenderPopper = true;\n        this.hoverTimeout = setTimeout(async () => {\n          this.isFetchingTwinData = true;\n          const twinData = await this.props.onNodeMouseEnter(modelId);\n          if (twinData) {\n            const {\n              displayName,\n              description,\n              properties,\n              relationships\n            } = twinData;\n            if (this.canRenderPopper) {\n              node.popper({\n                content: () => {\n                  const contentDiv = this.getPopperContent((nodeProperties === null || nodeProperties === void 0 ? void 0 : nodeProperties.$dtId) || label, modelId, displayName, description, properties, relationships);\n                  document.body.appendChild(contentDiv);\n                  return contentDiv;\n                },\n                popper: {}\n              });\n            }\n          }\n          this.isFetchingTwinData = false;\n        }, 1000);\n      }\n    };\n    this.onNodeUnhover = () => {\n      if (this.isFetchingTwinData) {\n        this.canRenderPopper = false;\n      }\n      if (this.hoverTimeout) {\n        clearTimeout(this.hoverTimeout);\n        this.hoverTimeout = null;\n      }\n      this.canRenderPopper = false;\n      this.unhoverTimeout = setTimeout(() => {\n        if (!this.canRenderPopper) {\n          this.removePopper();\n        }\n      }, 200);\n    };\n    this.removePopper = () => {\n      const activePopper = document.querySelector(\"#cy-popper\");\n      if (activePopper) {\n        activePopper.parentNode.removeChild(activePopper);\n      }\n    };\n    this.onControlRightClick = e => {\n      if (e.target === this.graphControl && this.props.onControlClicked) {\n        this.setState({\n          hideContextMenu: true\n        });\n      }\n    };\n    this.onControlClicked = e => {\n      if (e.target === this.graphControl && this.props.onControlClicked) {\n        this.props.onControlClicked(e);\n        const {\n          isHighlighting,\n          highlightFilteredNodes,\n          overlayResults,\n          overlayItems\n        } = this.props;\n        if (overlayResults) {\n          if (this.isSelectingOnOverlay) {\n            this.selectNodes(overlayItems.twins);\n            this.selectEdges(overlayItems.relationships);\n            this.isSelectingOnOverlay = false;\n          }\n        } else {\n          this.clearOverlay();\n          this.contextMenu.hideMenuItem(\"add-relationship\");\n          this.contextMenuIsOpen = false;\n        }\n        if (isHighlighting && highlightFilteredNodes) {\n          highlightFilteredNodes();\n        }\n      }\n    };\n    this.onControlDoubleClicked = e => {\n      if (e.target === this.graphControl && this.props.onControlClicked) {\n        const {\n          overlayResults\n        } = this.props;\n        if (overlayResults) {\n          this.clearOverlay();\n          this.props.disableOverlay();\n        }\n      }\n    };\n    this.filterNodes = nodes => {\n      const cy = this.graphControl;\n      cy.nodes().forEach(cyNode => {\n        cy.$id(cyNode.id()).toggleClass(\"hide\", !nodes.some(node => node.$dtId === cyNode.id()));\n      });\n    };\n    this.clearHighlighting = () => {\n      const cy = this.graphControl;\n      cy.edges().toggleClass(\"highlighted\", false);\n      cy.edges().toggleClass(\"opaque\", false);\n      cy.nodes().forEach(cyNode => {\n        cy.$id(cyNode.id()).toggleClass(\"highlighted\", false);\n        cy.$id(cyNode.id()).toggleClass(\"selected\", false);\n        cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n      });\n    };\n    this.emitNodeEvent = (nodeId, event) => {\n      this.graphControl.$id(nodeId).emit(event);\n    };\n    this.rightClickEdge = edgeId => {\n      this.graphControl.$id(edgeId).emit(\"cxttap\");\n      const {\n        x,\n        y\n      } = this.graphControl.$id(edgeId).renderedMidpoint();\n      this.displayContextMenu(\"edge\", x, y);\n    };\n    this.clickEdge = edgeId => {\n      const cy = this.graphControl;\n      cy.edges().toggleClass(\"highlighted\", false);\n      cy.edges().toggleClass(\"opaque\", true);\n      cy.$id(edgeId).toggleClass(\"highlighted\", true);\n      cy.$id(edgeId).toggleClass(\"opaque\", false);\n    };\n    this.rightClickNode = nodeId => {\n      const {\n        x,\n        y\n      } = this.graphControl.$id(nodeId).renderedPosition();\n      this.contextNode = nodeId;\n      this.displayContextMenu(\"node\", x, y, nodeId);\n    };\n    this.displayContextMenu = (type, x, y, nodeId) => {\n      this.contextMenuItems.forEach(item => {\n        const selectors = item.selector.split(\", \");\n        if (selectors.includes(type)) {\n          this.contextMenu.showMenuItem(item.id);\n        } else {\n          this.contextMenu.hideMenuItem(item.id);\n        }\n      });\n      const contextMenuEl = document.getElementsByClassName(\"cy-context-menus-cxt-menu\")[0];\n      const graphHeight = this.graphControl.height();\n      const graphWidth = this.graphControl.width();\n      const inset = {\n        top: \"auto\",\n        right: \"auto\",\n        bottom: \"auto\",\n        left: \"auto\"\n      };\n      const getPx = val => typeof val === \"string\" ? val : `${val}px`;\n      if (x > graphWidth / 2) {\n        inset.right = graphWidth - x + 10;\n      } else {\n        inset.left = x + 10;\n      }\n      if (y > graphHeight / 2) {\n        inset.bottom = graphHeight - y + 10;\n      } else {\n        inset.top = y + 10;\n      }\n      contextMenuEl.style.inset = `${getPx(inset.top)} ${getPx(inset.right)} ${getPx(inset.bottom)} ${getPx(inset.left)}`;\n      contextMenuEl.style.display = \"block\";\n      this.setContextMenuState(nodeId);\n    };\n    this.state = {\n      hideContextMenu: false,\n      initialX: 0,\n      initialY: 0\n    };\n    this.graphControl = null;\n    this.navControlId = _uniqueId(\"graph-viewer-nav\");\n    this.selectedNodes = [];\n    this.selectedOutsideComponent = [];\n    this.layout = \"Klay\";\n    this.isSelectingOnOverlay = false;\n    this.isFetchingTwinData = false;\n    this.canRenderPopper = false;\n    this.contextMenuIsOpen = false;\n    this.contextNode = null;\n    this.contextEdge = null;\n    this.contextMenuItems = [{\n      id: \"hide-edge\",\n      content: \"Hide relationship\",\n      selector: \"edge\",\n      onClickFunction: this.onHideRelationship,\n      hasTrailingDivider: true\n    }, {\n      id: \"hide-all-edges-of-type\",\n      content: \"Hide all relationships of type\",\n      selector: \"edge\",\n      onClickFunction: this.onHideRelationshipsOfType,\n      hasTrailingDivider: true\n    }, {\n      id: \"hide-selected\",\n      content: \"Hide selected\",\n      selector: \"node\",\n      onClickFunction: e => {\n        this.props.onHide();\n        if (e) {\n          const {\n            target: node\n          } = e;\n          this.hideSelectedTwins(node.id());\n        } else if (this.contextNode) {\n          this.hideSelectedTwins(this.contextNode);\n        }\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"hide-selected-with-children\",\n      content: \"Hide selected + children\",\n      selector: \"node\",\n      onClickFunction: e => {\n        this.props.onHideWithChildren();\n        if (e) {\n          const {\n            target: node\n          } = e;\n          this.hideWithChildren(node);\n        } else if (this.contextNode) {\n          const node = this.graphControl.$id(this.contextNode);\n          this.hideWithChildren(node);\n        }\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"hide-others\",\n      content: \"Hide all others\",\n      selector: \"node\",\n      onClickFunction: e => {\n        this.props.onHideOthers();\n        if (e) {\n          const {\n            target: node\n          } = e;\n          this.hideOtherTwins(node.id());\n        } else if (this.contextNode) {\n          this.hideOtherTwins(this.contextNode);\n        }\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"hide-non-children\",\n      content: \"Hide non-children\",\n      selector: \"node\",\n      onClickFunction: e => {\n        this.props.onHideNonChildren();\n        if (e) {\n          const {\n            target: node\n          } = e;\n          this.hideNonChildren(node);\n        } else if (this.contextNode) {\n          const node = this.graphControl.$id(this.contextNode);\n          this.hideNonChildren(node);\n        }\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"delete-edge\",\n      content: \"Delete relationship(s)\",\n      selector: \"edge\",\n      onClickFunction: e => {\n        if (e) {\n          const {\n            target: edge\n          } = e;\n          this.props.onConfirmRelationshipDelete(edge);\n        } else if (this.contextNode) {\n          const edge = this.graphControl.$id(this.contextEdge);\n          this.props.onConfirmRelationshipDelete(edge);\n        }\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"delete-twin\",\n      content: \"Delete twin(s)\",\n      selector: \"node\",\n      onClickFunction: e => {\n        if (e) {\n          const {\n            target: node\n          } = e;\n          this.props.onConfirmTwinDelete(node);\n        } else if (this.contextNode) {\n          const node = this.graphControl.$id(this.contextNode);\n          this.props.onConfirmTwinDelete(node);\n        }\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"get-relationship\",\n      content: \"Get relationships\",\n      selector: \"node\",\n      onClickFunction: e => {\n        if (e) {\n          const {\n            target: node\n          } = e;\n          this.props.onGetRelationships(node);\n        } else if (this.contextNode) {\n          const node = this.graphControl.$id(this.contextNode);\n          this.props.onGetRelationships(node);\n        }\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"add-relationship\",\n      content: \"Add relationships\",\n      selector: \"node\",\n      show: false,\n      onClickFunction: this.onAddRelationship,\n      hasTrailingDivider: true\n    }];\n  }\n  componentDidMount() {\n    if (!this.props.readOnly) {\n      const cy = this.graphControl;\n      this.contextMenu = cy.contextMenus({\n        menuItems: this.contextMenuItems,\n        menuItemClasses: [\"custom-menu-item\"],\n        contextMenuClasses: [\"custom-context-menu\"]\n      });\n    }\n    const handleKeyDown = e => {\n      if (e.keyCode === ESC_KEY_CODE) {\n        const contextMenu = document.getElementsByClassName(\"custom-context-menu\")[0];\n        if (contextMenu.style.display === \"block\") {\n          contextMenu.style.display = \"none\";\n        }\n      }\n      if (e.keyCode === TAB_KEY_CODE) {\n        const contextMenu = document.getElementsByClassName(\"custom-context-menu\")[0];\n        const menuItems = Array.from(contextMenu.children);\n        const activeMenuItems = menuItems.filter(item => item.style.display !== \"none\");\n        if (activeMenuItems && document.activeElement === activeMenuItems[activeMenuItems.length - 1]) {\n          activeMenuItems[0].focus();\n          e.preventDefault();\n        }\n      }\n    };\n    window.addEventListener(\"keydown\", e => {\n      handleKeyDown(e);\n    });\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.displayNameProperty !== this.props.displayNameProperty) {\n      if (this.graphControl) {\n        var _this$props$setIsDisp, _this$props;\n        let isDisplayNameAsteriskPresent = false;\n        this.graphControl.nodes().forEach(twin => {\n          var _twin$data$properties;\n          const label = (_twin$data$properties = twin.data().properties) === null || _twin$data$properties === void 0 ? void 0 : _twin$data$properties[this.props.displayNameProperty];\n          if (!label) {\n            isDisplayNameAsteriskPresent = true;\n          }\n          twin.data(\"label\", label !== null && label !== void 0 ? label : `*${twin.data().id}`);\n        });\n        (_this$props$setIsDisp = (_this$props = this.props).setIsDisplayNameAsteriskPresent) === null || _this$props$setIsDisp === void 0 ? void 0 : _this$props$setIsDisp.call(_this$props, isDisplayNameAsteriskPresent);\n      }\n    }\n  }\n  getLabel(twin) {\n    var _twin$this$props$disp;\n    return (_twin$this$props$disp = twin[this.props.displayNameProperty]) !== null && _twin$this$props$disp !== void 0 ? _twin$this$props$disp : `*${twin.$dtId}`;\n  }\n  addTwins(twins) {\n    var _this$props$setIsDisp2, _this$props2;\n    let isDisplayNameAsteriskPresent = false;\n    const {\n      initialX,\n      initialY\n    } = this.state;\n    this.setState({\n      initialX: initialX + 50\n    });\n    const mapped = twins.filter(twin => this.graphControl.$id(twin.$dtId).length === 0).map(twin => {\n      const label = this.getLabel(twin);\n      if (!label) {\n        isDisplayNameAsteriskPresent = true;\n      }\n      return {\n        data: {\n          id: twin.$dtId,\n          label: this.getLabel(twin),\n          properties: twin,\n          modelId: twin.$metadata.$model,\n          category: \"Twin\"\n        },\n        position: {\n          x: initialX,\n          y: initialY\n        }\n      };\n    });\n    (_this$props$setIsDisp2 = (_this$props2 = this.props).setIsDisplayNameAsteriskPresent) === null || _this$props$setIsDisp2 === void 0 ? void 0 : _this$props$setIsDisp2.call(_this$props2, isDisplayNameAsteriskPresent);\n    this.graphControl.add(mapped);\n  }\n  removeTwins(twins) {\n    if (twins) {\n      twins.forEach(x => {\n        const i = this.selectedNodes.findIndex(y => y.id === x);\n        if (i >= 0) {\n          this.selectedNodes.splice(i, 1);\n        }\n        this.graphControl.$id(x).remove();\n      });\n    }\n  }\n  clearTwins() {\n    this.selectedNodes = [];\n    this.graphControl.elements().remove();\n  }\n  getTwins() {\n    return this.graphControl.nodes().map(x => x.id());\n  }\n  addRelationships(relationships) {\n    const mapped = relationships.map(x => ({\n      data: {\n        source: x.$sourceId,\n        target: x.$targetId,\n        label: x.$relationshipName,\n        id: getUniqueRelationshipId(x),\n        relationshipId: x.$relationshipId\n      }\n    })).filter(x => this.graphControl.$id(x.id).length === 0);\n    const checked = [];\n    for (const rel of mapped) {\n      const src = rel.data.source;\n      const tar = rel.data.target;\n      const el = this.graphControl.nodes(`[id=\"${src}\"]`);\n      const elt = this.graphControl.nodes(`[id=\"${tar}\"]`);\n      if (!el.empty() && !elt.empty()) {\n        checked.push(rel);\n      }\n    }\n    this.graphControl.add(checked);\n    this.updateNodeColors();\n  }\n  getRelationships() {\n    return this.graphControl.edges().map(x => x.id());\n  }\n  removeRelationships(relationships) {\n    relationships.forEach(x => {\n      this.graphControl.$id(x).remove();\n    });\n  }\n  getColor(i) {\n    const im = i % colors.length;\n    return colors[colors.length - 1 - im];\n  }\n  getBackgroundImage(modelId) {\n    return settingsService.getModelImage(modelId);\n  }\n  updateNodeColors() {\n    const cy = this.graphControl;\n    const modelColors = settingsService.getModelColors();\n    cy.batch(() => {\n      const types = {};\n      const mtypes = {};\n      const rtypes = {};\n      const el = cy.nodes(\"*\");\n      const rels = cy.edges(\"*\");\n      // Color by type attribute\n      for (let i = 0; i < el.length; i++) {\n        types[el[i].data(\"type\")] = `#${this.getColor(i)}`;\n      }\n      for (const t of Object.keys(types)) {\n        cy.elements(`node[type=\"${t}\"]`).style(\"background-color\", types[t]);\n      }\n\n      // Color by model type\n      for (let i = 0; i < el.length; i++) {\n        const modelId = el[i].data(\"modelId\");\n        mtypes[modelId] = {\n          backgroundColor: modelColors[modelId],\n          backgroundImage: this.getBackgroundImage(modelId)\n        };\n      }\n      for (const t of Object.keys(mtypes)) {\n        const {\n          backgroundColor,\n          backgroundImage\n        } = mtypes[t];\n        if (backgroundImage) {\n          cy.elements(`node[modelId=\"${t}\"]`).style({\n            \"background-color\": backgroundColor,\n            \"background-image\": `url(${backgroundImage})`,\n            ...modelWithImageStyle\n          });\n        } else {\n          cy.elements(`node[modelId=\"${t}\"]`).style({\n            \"background-color\": backgroundColor,\n            ...modelWithImageStyle\n          });\n        }\n      }\n      // Color relationships by label\n      for (let i = 0; i < rels.length; i++) {\n        if (!rtypes[rels[i].data(\"label\")]) {\n          rtypes[rels[i].data(\"label\")] = `#${this.getColor(i)}`;\n        }\n      }\n      for (const r of Object.keys(rtypes)) {\n        cy.elements(`edge[label=\"${r}\"]`).style(\"line-color\", rtypes[r]);\n      }\n    });\n  }\n  doLayout() {\n    this.updateNodeColors();\n    const cy = this.graphControl;\n    return new Promise(resolve => {\n      const layout = cy.layout(GraphViewerCytoscapeLayouts[this.layout]);\n      layout.on(\"layoutstop\", () => resolve());\n      layout.run();\n    });\n  }\n  setLayout(layout) {\n    this.layout = layout;\n  }\n  setNewNodesInitialPositions() {\n    const cy = this.graphControl;\n    let firstSingleNode = true;\n    let initialX = 0;\n    let initialY = 0;\n    let leftMostX = 0;\n    let topMostY = 0;\n    cy.nodes().forEach(node => {\n      if (node.degree() === 0) {\n        if (firstSingleNode) {\n          initialX = node.position().x;\n          initialY = node.position().y;\n          firstSingleNode = false;\n        }\n        if (initialX < node.position().x) {\n          initialX = node.position().x;\n          initialY = node.position().y;\n        }\n      } else {\n        leftMostX = leftMostX > node.position().x ? node.position().x : leftMostX;\n        topMostY = topMostY > node.position().y ? node.position().y : topMostY;\n      }\n    });\n    if (firstSingleNode) {\n      this.setState({\n        initialX: leftMostX - 50,\n        initialY: topMostY - 50\n      });\n    } else {\n      this.setState({\n        initialX: initialX + 50,\n        initialY\n      });\n    }\n  }\n  updateModelIcon(modelId) {\n    const cy = this.graphControl;\n    const backgroundImage = this.getBackgroundImage(modelId);\n    if (backgroundImage) {\n      cy.elements(`node[modelId=\"${modelId}\"]`).style({\n        \"background-image\": `url(${backgroundImage})`,\n        ...modelWithImageStyle\n      });\n    } else {\n      cy.elements(`node[modelId=\"${modelId}\"]`).style({\n        ...modelWithImageStyle\n      });\n    }\n  }\n  highlightRelatedNodes() {\n    const {\n      overlayItems,\n      overlayResults\n    } = this.props;\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    if (this.selectedNodes && this.selectedNodes.length > 0) {\n      cy.edges().toggleClass(\"opaque\", true);\n      let relatedNodesIds = [];\n      this.selectedNodes.forEach(selectedNodeItem => {\n        const selectedNode = cy.nodes().filter(n => n.id() === selectedNodeItem.id);\n        const connectedEdges = selectedNode.connectedEdges();\n        if (!overlayResults || overlayItems.twins && !overlayItems.twins.some(t => t === selectedNodeItem.id)) {\n          connectedEdges.forEach(edge => {\n            cy.$id(edge.data().id).toggleClass(\"highlighted\", true);\n            cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n          });\n          const selectedNodeRelatedNodesIds = connectedEdges.map(edge => selectedNode.id() === edge.data().source ? edge.data().target : edge.data().source);\n          relatedNodesIds = relatedNodesIds.concat(selectedNodeRelatedNodesIds);\n        } else {\n          connectedEdges.forEach(edge => {\n            if (overlayItems.twins && overlayItems.twins.some(t => t === edge.data().target)) {\n              cy.$id(edge.data().id).toggleClass(\"highlighted\", true);\n              cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n            }\n          });\n        }\n        relatedNodesIds.push(selectedNode.id());\n      });\n      cy.nodes().forEach(cyNode => {\n        if (relatedNodesIds.indexOf(cyNode.id()) === -1) {\n          cy.$id(cyNode.id()).toggleClass(\"opaque\", true);\n        } else {\n          cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n        }\n      });\n    } else {\n      cy.nodes().forEach(cyNode => {\n        cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n      });\n      cy.edges().toggleClass(\"opaque\", false);\n    }\n  }\n  zoomToFit(avoidUpperLayer) {\n    this.graphControl.fit();\n    if (avoidUpperLayer) {\n      const fitZoom = this.graphControl.zoom();\n      this.graphControl.zoom(fitZoom * 0.85);\n      this.graphControl.pan({\n        x: this.graphControl.pan().x + fitZoom * 50,\n        y: this.graphControl.pan().y + fitZoom * 50\n      });\n    }\n  }\n  center() {\n    this.graphControl.center();\n  }\n  zoomIn() {\n    let zoomLevel = this.graphControl.zoom();\n    zoomLevel += 0.15;\n    this.graphControl.zoom(zoomLevel);\n  }\n  zoomOut() {\n    let zoomLevel = this.graphControl.zoom();\n    if (zoomLevel > 0.3) {\n      zoomLevel -= 0.15;\n      this.graphControl.zoom(zoomLevel);\n    }\n  }\n  highlightNodes(nodeIds, highlightEdges) {\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    cy.edges().toggleClass(\"opaque\", true);\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"opaque\", true);\n    });\n    nodeIds.forEach(id => {\n      const selectedNode = cy.nodes().filter(n => n.id() === id);\n      cy.$id(selectedNode.id()).toggleClass(\"opaque\", false);\n      const connectedEdges = selectedNode.connectedEdges();\n      connectedEdges.forEach(edge => {\n        const relatedNodeId = id === edge.data().source ? edge.data().target : edge.data().source;\n        if (nodeIds.indexOf(relatedNodeId) !== -1) {\n          cy.$id(edge.data().id).toggleClass(\"highlighted\", highlightEdges);\n          cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n        }\n      });\n    });\n  }\n  render() {\n    const {\n      hideContextMenu\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cytoscape-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(CytoscapeComponent, {\n        elements: [],\n        className: `graph-control ${hideContextMenu ? \"hide-context\" : \"\"}`,\n        stylesheet: graphStyles,\n        maxZoom: 2,\n        cy: cy => {\n          if (this.graphControl !== cy) {\n            this.graphControl = cy;\n            addNavigator(this.graphControl, navigationOptions, `#${this.navControlId}`);\n            if (this.props.readOnly) {\n              return;\n            }\n            this.graphControl.dblclick();\n            this.graphControl.on(\"mouseover\", this.onNodeHover);\n            this.graphControl.on(\"select\", \"node\", this.onNodeSelected);\n            this.graphControl.on(\"unselect\", \"node\", this.onNodeUnselected);\n            this.graphControl.on(\"select\", \"edge\", this.onEdgeSelected);\n            this.graphControl.on(\"click\", this.onControlClicked);\n            this.graphControl.on(\"dblclick\", this.onControlDoubleClicked);\n            this.graphControl.on(\"dblclick\", \"node\", this.onNodeDoubleClicked);\n            this.graphControl.on(\"cxttap\", \"node\", this.onNodeRightClick);\n            this.graphControl.on(\"cxttap\", this.onControlRightClick);\n            this.graphControl.on(\"mouseout\", this.onNodeUnhover);\n            this.graphControl.on(\"mousedown\", this.onNodeUnhover);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigator-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: this.navControlId,\n          className: \"graph-navigator\",\n          role: \"presentation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1073,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","CytoscapeComponent","_uniqueId","colors","graphStyles","dagreOptions","colaOptions","klayOptions","fcoseOptions","modelWithImageStyle","navigationOptions","getUniqueRelationshipId","addNavigator","settingsService","jsxDEV","_jsxDEV","GraphViewerCytoscapeLayouts","SPACE_KEY_CODE","ENTER_KEY_CODE","ESC_KEY_CODE","TAB_KEY_CODE","GraphViewerCytoscapeComponent","Component","constructor","props","hideSelectedTwins","nodeId","cy","graphControl","selectedNodes","length","forEach","x","$id","id","toggleClass","$","unselect","clearSelection","onAddRelationship","target","node","onCreateRelationship","modelId","data","hideOtherTwins","nodes","currentNode","filter","n","hideNonChildren","relatedNodesIds","getSelectedNodesChildrenIds","cyNode","indexOf","searchForChildren","nodeIds","selectedNode","connectedEdges","selectedNodeRelatedNodesIds","edge","source","map","push","hideWithChildren","onHideRelationship","e","cyTarget","onHideRelationshipsOfType","label","elements","clearOverlay","unselectSelectedNodes","edges","cyEdge","showAllNodes","showAllEdges","onNodeSelected","overlayResults","isSelectingOnOverlay","selectedOutsideComponent","selectedOutsideIds","includes","clearHighlighting","highlightRelatedNodes","onNodeClicked","contextMenuIsOpen","onNodeUnselected","removed","findIndex","splice","dimGraphElements","selectNodes","exterior","relatedNodeId","selectEdges","rels","rel","onEdgeSelected","onEdgeClicked","selectedEdges","selected","onNodeDoubleClicked","onNodeRightClick","setContextMenuState","setState","hideContextMenu","onNodeUnhover","contextMenu","showMenuItem","hideMenuItem","focusContextMenu","contextMenuEl","document","getElementsByClassName","availableMenuItems","Array","from","querySelectorAll","item","disabled","style","display","focusBackAndClearHandlers","onFocusBackToTwinViewer","removeEventListener","handler","contextNode","contextEdge","contextMenus","menuItems","contextMenuItems","menuItemClasses","contextMenuClasses","keyCode","preventDefault","click","focus","addEventListener","getContents","properties","relationships","definedProperties","definedRelationships","key","Object","entries","r","name","getPopperContent","modelDisplayName","modelDescription","div","createElement","setAttribute","canRenderPopper","removePopper","innerHTML","onNodeHover","category","nodeProperties","isFetchingTwinData","hoverTimeout","setTimeout","twinData","onNodeMouseEnter","displayName","description","popper","content","contentDiv","$dtId","body","appendChild","clearTimeout","unhoverTimeout","activePopper","querySelector","parentNode","removeChild","onControlRightClick","onControlClicked","isHighlighting","highlightFilteredNodes","overlayItems","twins","onControlDoubleClicked","disableOverlay","filterNodes","some","emitNodeEvent","event","emit","rightClickEdge","edgeId","y","renderedMidpoint","displayContextMenu","clickEdge","rightClickNode","renderedPosition","type","selectors","selector","split","graphHeight","height","graphWidth","width","inset","top","right","bottom","left","getPx","val","state","initialX","initialY","navControlId","layout","onClickFunction","hasTrailingDivider","onHide","onHideWithChildren","onHideOthers","onHideNonChildren","onConfirmRelationshipDelete","onConfirmTwinDelete","onGetRelationships","show","componentDidMount","readOnly","handleKeyDown","children","activeMenuItems","activeElement","window","componentDidUpdate","prevProps","displayNameProperty","_this$props$setIsDisp","_this$props","isDisplayNameAsteriskPresent","twin","_twin$data$properties","setIsDisplayNameAsteriskPresent","call","getLabel","_twin$this$props$disp","addTwins","_this$props$setIsDisp2","_this$props2","mapped","$metadata","$model","position","add","removeTwins","i","remove","clearTwins","getTwins","addRelationships","$sourceId","$targetId","$relationshipName","relationshipId","$relationshipId","checked","src","tar","el","elt","empty","updateNodeColors","getRelationships","removeRelationships","getColor","im","getBackgroundImage","getModelImage","modelColors","getModelColors","batch","types","mtypes","rtypes","t","keys","backgroundColor","backgroundImage","doLayout","Promise","resolve","on","run","setLayout","setNewNodesInitialPositions","firstSingleNode","leftMostX","topMostY","degree","updateModelIcon","selectedNodeItem","concat","zoomToFit","avoidUpperLayer","fit","fitZoom","zoom","pan","center","zoomIn","zoomLevel","zoomOut","highlightNodes","highlightEdges","render","className","stylesheet","maxZoom","dblclick","fileName","_jsxFileName","lineNumber","columnNumber","role"],"sources":["/home/saharsh/Music/digital-twins-explorer/client/src/components/GraphViewerComponent/GraphViewerCytoscapeComponent/GraphViewerCytoscapeComponent.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/* eslint-disable max-lines-per-function */\n\nimport React from \"react\";\nimport CytoscapeComponent from \"react-cytoscapejs\";\nimport _uniqueId from \"lodash/uniqueId\";\n\nimport { colors, graphStyles, dagreOptions, colaOptions, klayOptions, fcoseOptions, modelWithImageStyle, navigationOptions } from \"./config\";\nimport { getUniqueRelationshipId, addNavigator } from \"../../../utils/utilities\";\nimport { settingsService } from \"../../../services/SettingsService\";\n\nimport \"./GraphViewerCytoscapeComponent.scss\";\nimport \"cytoscape-context-menus/cytoscape-context-menus.css\";\n\nexport const GraphViewerCytoscapeLayouts = {\n  \"Cola\": colaOptions,\n  \"Dagre\": dagreOptions,\n  \"fCoSE\": fcoseOptions,\n  \"Klay\": klayOptions\n};\nconst SPACE_KEY_CODE = 32;\nconst ENTER_KEY_CODE = 13;\nconst ESC_KEY_CODE = 27;\nconst TAB_KEY_CODE = 9;\n\nexport class GraphViewerCytoscapeComponent extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hideContextMenu: false,\n      initialX: 0,\n      initialY: 0\n    };\n    this.graphControl = null;\n    this.navControlId = _uniqueId(\"graph-viewer-nav\");\n    this.selectedNodes = [];\n    this.selectedOutsideComponent = [];\n    this.layout = \"Klay\";\n    this.isSelectingOnOverlay = false;\n    this.isFetchingTwinData = false;\n    this.canRenderPopper = false;\n    this.contextMenuIsOpen = false;\n    this.contextNode = null;\n    this.contextEdge = null;\n    this.contextMenuItems = [\n      {\n        id: \"hide-edge\",\n        content: \"Hide relationship\",\n        selector: \"edge\",\n        onClickFunction: this.onHideRelationship,\n        hasTrailingDivider: true\n      },\n      {\n        id: \"hide-all-edges-of-type\",\n        content: \"Hide all relationships of type\",\n        selector: \"edge\",\n        onClickFunction: this.onHideRelationshipsOfType,\n        hasTrailingDivider: true\n      },\n      {\n        id: \"hide-selected\",\n        content: \"Hide selected\",\n        selector: \"node\",\n        onClickFunction: e => {\n          this.props.onHide();\n          if (e) {\n            const { target: node } = e;\n            this.hideSelectedTwins(node.id());\n          } else if (this.contextNode) {\n            this.hideSelectedTwins(this.contextNode);\n          }\n        },\n        hasTrailingDivider: true\n      },\n      {\n        id: \"hide-selected-with-children\",\n        content: \"Hide selected + children\",\n        selector: \"node\",\n        onClickFunction: e => {\n          this.props.onHideWithChildren();\n          if (e) {\n            const { target: node } = e;\n            this.hideWithChildren(node);\n          } else if (this.contextNode) {\n            const node = this.graphControl.$id(this.contextNode);\n            this.hideWithChildren(node);\n          }\n        },\n        hasTrailingDivider: true\n      },\n      {\n        id: \"hide-others\",\n        content: \"Hide all others\",\n        selector: \"node\",\n        onClickFunction: e => {\n          this.props.onHideOthers();\n          if (e) {\n            const { target: node } = e;\n            this.hideOtherTwins(node.id());\n          } else if (this.contextNode) {\n            this.hideOtherTwins(this.contextNode);\n          }\n        },\n        hasTrailingDivider: true\n      },\n      {\n        id: \"hide-non-children\",\n        content: \"Hide non-children\",\n        selector: \"node\",\n        onClickFunction: e => {\n          this.props.onHideNonChildren();\n          if (e) {\n            const { target: node } = e;\n            this.hideNonChildren(node);\n          } else if (this.contextNode) {\n            const node = this.graphControl.$id(this.contextNode);\n            this.hideNonChildren(node);\n          }\n        },\n        hasTrailingDivider: true\n      },\n      {\n        id: \"delete-edge\",\n        content: \"Delete relationship(s)\",\n        selector: \"edge\",\n        onClickFunction: e => {\n          if (e) {\n            const { target: edge } = e;\n            this.props.onConfirmRelationshipDelete(edge);\n          } else if (this.contextNode) {\n            const edge = this.graphControl.$id(this.contextEdge);\n            this.props.onConfirmRelationshipDelete(edge);\n          }\n        },\n        hasTrailingDivider: true\n      },\n      {\n        id: \"delete-twin\",\n        content: \"Delete twin(s)\",\n        selector: \"node\",\n        onClickFunction: e => {\n          if (e) {\n            const { target: node } = e;\n            this.props.onConfirmTwinDelete(node);\n          } else if (this.contextNode) {\n            const node = this.graphControl.$id(this.contextNode);\n            this.props.onConfirmTwinDelete(node);\n          }\n        },\n        hasTrailingDivider: true\n      },\n      {\n        id: \"get-relationship\",\n        content: \"Get relationships\",\n        selector: \"node\",\n        onClickFunction: e => {\n          if (e) {\n            const { target: node } = e;\n            this.props.onGetRelationships(node);\n          } else if (this.contextNode) {\n            const node = this.graphControl.$id(this.contextNode);\n            this.props.onGetRelationships(node);\n          }\n        },\n        hasTrailingDivider: true\n      },\n      {\n        id: \"add-relationship\",\n        content: \"Add relationships\",\n        selector: \"node\",\n        show: false,\n        onClickFunction: this.onAddRelationship,\n        hasTrailingDivider: true\n      }\n    ];\n  }\n\n  componentDidMount() {\n    if (!this.props.readOnly) {\n      const cy = this.graphControl;\n      this.contextMenu = cy.contextMenus({\n        menuItems: this.contextMenuItems,\n        menuItemClasses: [ \"custom-menu-item\" ],\n        contextMenuClasses: [ \"custom-context-menu\" ]\n      });\n    }\n\n    const handleKeyDown = e => {\n      if (e.keyCode === ESC_KEY_CODE) {\n        const contextMenu = document.getElementsByClassName(\"custom-context-menu\")[0];\n        if (contextMenu.style.display === \"block\") {\n          contextMenu.style.display = \"none\";\n        }\n      }\n\n      if (e.keyCode === TAB_KEY_CODE) {\n        const contextMenu = document.getElementsByClassName(\"custom-context-menu\")[0];\n\n        const menuItems = Array.from(contextMenu.children);\n        const activeMenuItems = menuItems.filter(item => item.style.display !== \"none\");\n\n        if (activeMenuItems && document.activeElement === activeMenuItems[activeMenuItems.length - 1]) {\n          activeMenuItems[0].focus();\n          e.preventDefault();\n        }\n      }\n    };\n    window.addEventListener(\"keydown\", e => {\n      handleKeyDown(e);\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.displayNameProperty !== this.props.displayNameProperty) {\n      if (this.graphControl) {\n        let isDisplayNameAsteriskPresent = false;\n        this.graphControl.nodes().forEach(twin => {\n          const label = twin.data().properties?.[this.props.displayNameProperty];\n          if (!label) {\n            isDisplayNameAsteriskPresent = true;\n          }\n          twin.data(\"label\", label ?? `*${twin.data().id}`);\n        });\n        this.props.setIsDisplayNameAsteriskPresent?.(isDisplayNameAsteriskPresent);\n      }\n    }\n  }\n\n  getLabel(twin) {\n    return twin[this.props.displayNameProperty] ?? `*${twin.$dtId}`;\n  }\n\n  addTwins(twins) {\n    let isDisplayNameAsteriskPresent = false;\n    const { initialX, initialY } = this.state;\n    this.setState({ initialX: initialX + 50 });\n    const mapped = twins\n      .filter(twin => this.graphControl.$id(twin.$dtId).length === 0)\n      .map(twin => {\n        const label = this.getLabel(twin);\n        if (!label) {\n          isDisplayNameAsteriskPresent = true;\n        }\n        return ({\n          data: {\n            id: twin.$dtId,\n            label: this.getLabel(twin),\n            properties: twin,\n            modelId: twin.$metadata.$model,\n            category: \"Twin\"\n          },\n          position: {\n            x: initialX,\n            y: initialY\n          }\n        });\n      });\n\n    this.props.setIsDisplayNameAsteriskPresent?.(isDisplayNameAsteriskPresent);\n    this.graphControl.add(mapped);\n  }\n\n  removeTwins(twins) {\n    if (twins) {\n      twins.forEach(x => {\n        const i = this.selectedNodes.findIndex(y => y.id === x);\n        if (i >= 0) {\n          this.selectedNodes.splice(i, 1);\n        }\n\n        this.graphControl.$id(x).remove();\n      });\n    }\n  }\n\n  hideSelectedTwins = nodeId => {\n    const cy = this.graphControl;\n    if (this.selectedNodes.length > 0) {\n      this.selectedNodes.forEach(x => {\n        cy.$id(x.id).toggleClass(\"hide\", true);\n      });\n      cy.$(\":selected\").unselect();\n      this.clearSelection();\n    } else if (nodeId) {\n      cy.$id(nodeId).toggleClass(\"hide\", true);\n    }\n  }\n\n  onAddRelationship = ({ target: node }) => {\n    if (node && node.id()) {\n      this.props.onCreateRelationship({ id: node.id(), modelId: node.data().modelId });\n    }\n  }\n\n  hideOtherTwins = nodeId => {\n    const cy = this.graphControl;\n    if (this.selectedNodes.length > 0) {\n      cy.nodes().forEach(currentNode => {\n        if (this.selectedNodes.filter(n => n.id === currentNode.id()).length === 0 && currentNode.id() !== nodeId) {\n          cy.$id(currentNode.id()).toggleClass(\"hide\", true);\n        }\n      });\n    } else if (nodeId) {\n      cy.nodes().forEach(currentNode => {\n        if (currentNode.id() !== nodeId) {\n          cy.$id(currentNode.id()).toggleClass(\"hide\", true);\n        }\n      });\n    }\n  }\n\n  hideNonChildren = node => {\n    const cy = this.graphControl;\n    let relatedNodesIds = [];\n    if (this.selectedNodes.length > 0) {\n      relatedNodesIds = this.getSelectedNodesChildrenIds([ ...this.selectedNodes, { id: node.id(), modelId: node.data().modelId } ]);\n    } else if (node && node.id()) {\n      relatedNodesIds = this.getSelectedNodesChildrenIds([ { id: node.id(), modelId: node.data().modelId } ]);\n    }\n    cy.nodes().forEach(cyNode => {\n      if (relatedNodesIds.indexOf(cyNode.id()) === -1) {\n        cy.$id(cyNode.id()).toggleClass(\"hide\", true);\n      }\n    });\n  }\n\n  getSelectedNodesChildrenIds = nodes => {\n    const cy = this.graphControl;\n    const relatedNodesIds = [];\n    const searchForChildren = nodeIds => {\n      nodeIds.forEach(nodeId => {\n        const selectedNode = cy.nodes().filter(n => n.id() === nodeId);\n        const connectedEdges = selectedNode.connectedEdges();\n        const selectedNodeRelatedNodesIds\n          = connectedEdges.filter(edge => selectedNode.id() === edge.data().source).map(edge => edge.data().target);\n        relatedNodesIds.push(selectedNode.id());\n        searchForChildren(selectedNodeRelatedNodesIds);\n      });\n    };\n    searchForChildren(nodes ? nodes.map(n => n.id) : this.selectedNodes.map(n => n.id));\n    return relatedNodesIds;\n  }\n\n  hideWithChildren = node => {\n    const cy = this.graphControl;\n    let relatedNodesIds = [];\n    if (this.selectedNodes.length > 0) {\n      this.clearSelection();\n      cy.$(\":selected\").unselect();\n      relatedNodesIds = this.getSelectedNodesChildrenIds([ ...this.selectedNodes, { id: node.id(), modelId: node.data().modelId } ]);\n    } else if (node && node.id()) {\n      relatedNodesIds = this.getSelectedNodesChildrenIds([ { id: node.id(), modelId: node.data().modelId } ]);\n    }\n    cy.nodes().forEach(cyNode => {\n      if (relatedNodesIds.indexOf(cyNode.id()) !== -1) {\n        cyNode.toggleClass(\"hide\", true);\n      }\n    });\n    this.selectedNodes = [];\n  }\n\n  clearTwins() {\n    this.selectedNodes = [];\n    this.graphControl.elements().remove();\n  }\n\n  getTwins() {\n    return this.graphControl.nodes().map(x => x.id());\n  }\n\n  addRelationships(relationships) {\n    const mapped = relationships\n      .map(x => ({\n        data: {\n          source: x.$sourceId,\n          target: x.$targetId,\n          label: x.$relationshipName,\n          id: getUniqueRelationshipId(x),\n          relationshipId: x.$relationshipId\n        }\n      }))\n      .filter(x => this.graphControl.$id(x.id).length === 0);\n\n    const checked = [];\n    for (const rel of mapped) {\n      const src = rel.data.source;\n      const tar = rel.data.target;\n      const el = this.graphControl.nodes(`[id=\"${src}\"]`);\n      const elt = this.graphControl.nodes(`[id=\"${tar}\"]`);\n      if (!el.empty() && !elt.empty()) {\n        checked.push(rel);\n      }\n    }\n    this.graphControl.add(checked);\n    this.updateNodeColors();\n  }\n\n  getRelationships() {\n    return this.graphControl.edges().map(x => x.id());\n  }\n\n  removeRelationships(relationships) {\n    relationships.forEach(x => {\n      this.graphControl.$id(x).remove();\n    });\n  }\n\n  onHideRelationship = e => {\n    const target = e.target || e.cyTarget;\n    target.toggleClass(\"hide\", true);\n    this.props.onHideRelationship();\n  }\n\n  onHideRelationshipsOfType = e => {\n    const cy = this.graphControl;\n    const target = e.target || e.cyTarget;\n    const label = target.data(\"label\");\n    cy.elements(`edge[label=\"${label}\"]`).toggleClass(\"hide\", true);\n    this.props.onHideRelationship();\n  }\n\n  getColor(i) {\n    const im = i % colors.length;\n    return (colors[(colors.length - 1) - im]);\n  }\n\n  getBackgroundImage(modelId) {\n    return settingsService.getModelImage(modelId);\n  }\n\n  clearOverlay = () => {\n    this.clearSelection();\n    this.unselectSelectedNodes();\n  }\n\n  clearSelection = () => {\n    const cy = this.graphControl;\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n      cy.$id(cyNode.id()).toggleClass(\"highlighted\", false);\n      cy.$id(cyNode.id()).toggleClass(\"selected\", false);\n    });\n    cy.edges().forEach(cyEdge => {\n      cy.$id(cyEdge.id()).toggleClass(\"opaque\", false);\n      cy.$id(cyEdge.id()).toggleClass(\"highlighted\", false);\n    });\n    this.selectedNodes = [];\n  }\n\n  unselectSelectedNodes = () => {\n    if (this.graphControl.$(\":selected\").length > 0) {\n      this.graphControl.$(\":selected\").unselect();\n      this.selectedNodes = [];\n    }\n  }\n\n  unselectSelectedNodes = () => {\n    if (this.graphControl.$(\":selected\").length > 0) {\n      this.graphControl.$(\":selected\").unselect();\n      this.selectedNodes = [];\n    }\n    this.selectedNodes = [];\n  }\n\n  showAllNodes = () => {\n    const cy = this.graphControl;\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"hide\", false);\n    });\n    cy.edges().forEach(cyEdge => {\n      cy.$id(cyEdge.id()).toggleClass(\"hide\", false);\n    });\n  }\n\n  showAllEdges = () => {\n    const cy = this.graphControl;\n    cy.edges().forEach(cyEdge => {\n      cy.$id(cyEdge.id()).toggleClass(\"hide\", false);\n    });\n  }\n\n  updateNodeColors() {\n    const cy = this.graphControl;\n    const modelColors = settingsService.getModelColors();\n    cy.batch(() => {\n      const types = {};\n      const mtypes = {};\n      const rtypes = {};\n      const el = cy.nodes(\"*\");\n      const rels = cy.edges(\"*\");\n      // Color by type attribute\n      for (let i = 0; i < el.length; i++) {\n        types[el[i].data(\"type\")] = `#${this.getColor(i)}`;\n      }\n      for (const t of Object.keys(types)) {\n        cy.elements(`node[type=\"${t}\"]`).style(\"background-color\", types[t]);\n      }\n\n      // Color by model type\n      for (let i = 0; i < el.length; i++) {\n        const modelId = el[i].data(\"modelId\");\n        mtypes[modelId] = {\n          backgroundColor: modelColors[modelId],\n          backgroundImage: this.getBackgroundImage(modelId)\n        };\n      }\n      for (const t of Object.keys(mtypes)) {\n        const { backgroundColor, backgroundImage } = mtypes[t];\n        if (backgroundImage) {\n          cy.elements(`node[modelId=\"${t}\"]`).style({\n            \"background-color\": backgroundColor,\n            \"background-image\": `url(${backgroundImage})`,\n            ...modelWithImageStyle\n          });\n        } else {\n          cy.elements(`node[modelId=\"${t}\"]`).style({\n            \"background-color\": backgroundColor,\n            ...modelWithImageStyle\n          });\n        }\n      }\n      // Color relationships by label\n      for (let i = 0; i < rels.length; i++) {\n        if (!rtypes[rels[i].data(\"label\")]) {\n          rtypes[rels[i].data(\"label\")] = `#${this.getColor(i)}`;\n        }\n      }\n      for (const r of Object.keys(rtypes)) {\n        cy.elements(`edge[label=\"${r}\"]`).style(\"line-color\", rtypes[r]);\n      }\n    });\n  }\n\n  doLayout() {\n    this.updateNodeColors();\n    const cy = this.graphControl;\n    return new Promise(resolve => {\n      const layout = cy.layout(GraphViewerCytoscapeLayouts[this.layout]);\n      layout.on(\"layoutstop\", () => resolve());\n      layout.run();\n    });\n  }\n\n  setLayout(layout) {\n    this.layout = layout;\n  }\n\n  setNewNodesInitialPositions() {\n    const cy = this.graphControl;\n    let firstSingleNode = true;\n    let initialX = 0;\n    let initialY = 0;\n    let leftMostX = 0;\n    let topMostY = 0;\n    cy.nodes().forEach(node => {\n      if (node.degree() === 0) {\n        if (firstSingleNode) {\n          initialX = node.position().x;\n          initialY = node.position().y;\n          firstSingleNode = false;\n        }\n        if (initialX < node.position().x) {\n          initialX = node.position().x;\n          initialY = node.position().y;\n        }\n      } else {\n        leftMostX = leftMostX > node.position().x ? node.position().x : leftMostX;\n        topMostY = topMostY > node.position().y ? node.position().y : topMostY;\n      }\n    });\n    if (firstSingleNode) {\n      this.setState({ initialX: leftMostX - 50, initialY: topMostY - 50 });\n    } else {\n      this.setState({ initialX: initialX + 50, initialY });\n    }\n  }\n\n  updateModelIcon(modelId) {\n    const cy = this.graphControl;\n    const backgroundImage = this.getBackgroundImage(modelId);\n    if (backgroundImage) {\n      cy.elements(`node[modelId=\"${modelId}\"]`).style({\n        \"background-image\": `url(${backgroundImage})`,\n        ...modelWithImageStyle\n      });\n    } else {\n      cy.elements(`node[modelId=\"${modelId}\"]`).style({\n        ...modelWithImageStyle\n      });\n    }\n  }\n\n  onNodeSelected = ({ target: node }) => {\n    if (this.props.overlayResults && !this.isSelectingOnOverlay) {\n      this.isSelectingOnOverlay = true;\n    }\n    if (this.selectedOutsideComponent.length > 0) {\n      const selectedOutsideIds = this.selectedOutsideComponent.map(n => n.id);\n      this.selectedNodes = this.selectedNodes.filter(n => !selectedOutsideIds.includes(n.id));\n      this.clearHighlighting();\n    }\n    this.selectedNodes.push({ id: node.id(), modelId: node.data().modelId });\n    this.highlightRelatedNodes();\n    this.onNodeClicked();\n    this.contextMenuIsOpen = false;\n  }\n\n  onNodeUnselected = e => {\n    const removed = this.selectedNodes.findIndex(x => x.id === e.target.id());\n    if (removed >= 0) {\n      this.selectedNodes.splice(removed, 1);\n      this.highlightRelatedNodes();\n    }\n    if (this.selectedNodes.length === 0) {\n      this.clearSelection();\n    }\n  }\n\n  dimGraphElements = () => {\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"opaque\", true);\n    cy.edges().toggleClass(\"highlighted\", false);\n    cy.nodes().forEach(node => cy.$id(node.id()).toggleClass(\"opaque\", true));\n    cy.nodes().forEach(node => cy.$id(node.id()).toggleClass(\"highlight\", false));\n  }\n\n  selectNodes = (nodeIds, exterior = false) => {\n    this.dimGraphElements();\n    if (nodeIds && nodeIds.length > 0) {\n      const cy = this.graphControl;\n      this.selectedNodes = [];\n      if (exterior) {\n        this.selectedOutsideComponent = [];\n      }\n      nodeIds.forEach(id => {\n        const node = cy.elements(`node[id=\"${id}\"]`);\n        if (node) {\n          this.selectedNodes.push({ id: node.id(), modelId: node.data().modelId });\n          if (exterior) {\n            this.selectedOutsideComponent.push({ id: node.id(), modelId: node.data().modelId });\n          }\n          cy.$id(node.data().id).toggleClass(\"selected\", true);\n          cy.$id(node.data().id).toggleClass(\"opaque\", false);\n          node.connectedEdges().forEach(edge => {\n            const relatedNodeId = node.id() === edge.data().source ? edge.data().target : edge.data().source;\n            if (nodeIds.indexOf(relatedNodeId) !== -1) {\n              cy.$id(edge.data().id).toggleClass(\"highlighted\", true);\n              cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n            }\n          });\n        }\n      });\n    } else {\n      this.clearSelection();\n    }\n  }\n\n  selectEdges = rels => {\n    if (rels && rels.length > 0) {\n      const cy = this.graphControl;\n      rels.forEach(rel => {\n        cy.$id(getUniqueRelationshipId(rel)).toggleClass(\"highlighted\", true);\n        cy.$id(getUniqueRelationshipId(rel)).toggleClass(\"opaque\", false);\n      });\n    }\n  }\n\n  onEdgeSelected = e => {\n    const { onEdgeClicked } = this.props;\n    if (onEdgeClicked) {\n      const cy = this.graphControl;\n      const selectedEdges = cy.edges().filter(edge => edge.selected());\n      onEdgeClicked(e.target.data(), selectedEdges);\n    }\n    this.contextMenuIsOpen = false;\n  }\n\n  onNodeClicked = async () => {\n    const { onNodeClicked } = this.props;\n    if (onNodeClicked) {\n      await onNodeClicked({\n        selectedNode: this.selectedNodes.length > 0 ? this.selectedNodes[this.selectedNodes.length - 1] : null,\n        selectedNodes: this.selectedNodes.length > 0 ? this.selectedNodes : null\n      });\n    }\n  }\n\n  onNodeDoubleClicked = e => {\n    const { onNodeDoubleClicked } = this.props;\n    if (onNodeDoubleClicked) {\n      onNodeDoubleClicked({ id: e.target.id() });\n    }\n  }\n\n  onNodeRightClick = ({ target: node }) => {\n    this.setContextMenuState(node.id());\n  }\n\n  setContextMenuState = nodeId => {\n    this.setState({ hideContextMenu: false }, () => {\n      this.contextMenuIsOpen = true;\n      this.onNodeUnhover();\n      if (nodeId) {\n        if (this.selectedNodes.length === 1 && this.selectedNodes[0].id !== nodeId) {\n          this.contextMenu.showMenuItem(\"add-relationship\");\n        } else if (this.selectedNodes.length === 2 && this.selectedNodes.filter(n => n.id === nodeId).length === 1) {\n          this.contextMenu.showMenuItem(\"add-relationship\");\n        } else {\n          this.contextMenu.hideMenuItem(\"add-relationship\");\n        }\n      }\n    });\n  }\n\n  focusContextMenu = () => {\n    const contextMenuEl = document.getElementsByClassName(\"custom-context-menu\")[0];\n    const availableMenuItems = Array.from(contextMenuEl.querySelectorAll(\".custom-menu-item\")).filter(item => !item.disabled && item.style.display !== \"none\");\n    const focusBackAndClearHandlers = () => {\n      this.props.onFocusBackToTwinViewer();\n      availableMenuItems.forEach(item => {\n        item.removeEventListener(\"keydown\", handler);\n      });\n      this.contextNode = null;\n      this.contextEdge = null;\n      this.contextMenu = this.graphControl.contextMenus({\n        menuItems: this.contextMenuItems,\n        menuItemClasses: [ \"custom-menu-item\" ],\n        contextMenuClasses: [ \"custom-context-menu\" ]\n      });\n    };\n    const handler = e => {\n      if (e.keyCode === SPACE_KEY_CODE) {\n        e.preventDefault();\n        focusBackAndClearHandlers();\n      } else if (e.keyCode === ENTER_KEY_CODE) {\n        e.preventDefault();\n        e.target.click();\n        focusBackAndClearHandlers();\n      }\n    };\n    if (availableMenuItems[0]) {\n      availableMenuItems[0].focus();\n      availableMenuItems.forEach(item => {\n        item.addEventListener(\"keydown\", handler);\n      });\n    }\n    availableMenuItems[availableMenuItems.length - 1].addEventListener(\"keydown\", e => {\n      e.preventDefault();\n      availableMenuItems[0].focus();\n    });\n  }\n\n  getContents = (properties, relationships) => {\n    let definedProperties = \"\";\n    let definedRelationships = \"\";\n    for (const [ key ] of Object.entries(properties)) {\n      definedProperties += `<li>${key}</li>`;\n    }\n    relationships.forEach(r => definedRelationships += `<li>${r.name}</li>`);\n    return { definedRelationships, definedProperties };\n  }\n\n  getPopperContent = (label, modelId, modelDisplayName, modelDescription, properties, relationships) => {\n    const { definedProperties, definedRelationships } = this.getContents(properties, relationships);\n    const div = document.createElement(\"div\");\n    div.setAttribute(\"id\", \"cy-popper\");\n    div.addEventListener(\"mouseenter\", () => {\n      this.canRenderPopper = true;\n    });\n    div.addEventListener(\"mouseleave\", () => {\n      this.canRenderPopper = false;\n      this.removePopper();\n    });\n    div.innerHTML = `\n      <div>\n        <h4>DTID:</h4>\n        <p>${label}</p>\n        ${\n          modelDisplayName\n            ? `<h4>MODEL DISPLAY NAME:</h4>\n          <p>${modelDisplayName}</p>`\n            : \"\"\n        }\n        <h4>MODEL ID:</h4>\n        <p>${modelId}</p>\n        ${\n          modelDescription\n            ? `<h4>DESCRIPTION:</h4>\n          <p class=\"description-container\">${modelDescription ? modelDescription : \"\"}</p>`\n            : \"\"\n        }\n      </div>\n      ${\n        definedProperties\n          ? `<div>\n          <h4>DEFINED PROPERTIES</h4>\n          <ul>${definedProperties}</ul>\n        </div>`\n          : \"\"\n      }\n      ${\n        definedRelationships\n          ? `<div>\n          <h4>DEFINED RELATIONSHIPS</h4>\n          <ul>${definedRelationships}</ul>\n        </div>`\n          : \"\"\n      }\n    `;\n    return div;\n  };\n\n  onNodeHover = ({ target: node }) => {\n    this.removePopper();\n    const { category, label, modelId, properties: nodeProperties } = node.data();\n    if (node !== this.graphControl && category === \"Twin\" && !this.isFetchingTwinData && !this.contextMenuIsOpen) {\n      this.canRenderPopper = true;\n      this.hoverTimeout = setTimeout(async () => {\n        this.isFetchingTwinData = true;\n        const twinData = await this.props.onNodeMouseEnter(modelId);\n        if (twinData) {\n          const { displayName, description, properties, relationships } = twinData;\n          if (this.canRenderPopper) {\n            node.popper({\n              content: () => {\n                const contentDiv = this.getPopperContent(nodeProperties?.$dtId || label, modelId, displayName, description, properties, relationships);\n                document.body.appendChild(contentDiv);\n                return contentDiv;\n              },\n              popper: {}\n            });\n          }\n        }\n        this.isFetchingTwinData = false;\n      }, 1000);\n    }\n  }\n\n  onNodeUnhover = () => {\n    if (this.isFetchingTwinData) {\n      this.canRenderPopper = false;\n    }\n    if (this.hoverTimeout) {\n      clearTimeout(this.hoverTimeout);\n      this.hoverTimeout = null;\n    }\n    this.canRenderPopper = false;\n    this.unhoverTimeout = setTimeout(() => {\n      if (!this.canRenderPopper) {\n        this.removePopper();\n      }\n    }, 200);\n  }\n\n  removePopper = () => {\n    const activePopper = document.querySelector(\"#cy-popper\");\n    if (activePopper) {\n      activePopper.parentNode.removeChild(activePopper);\n    }\n  }\n\n  onControlRightClick = e => {\n    if (e.target === this.graphControl && this.props.onControlClicked) {\n      this.setState({ hideContextMenu: true });\n    }\n  }\n\n  onControlClicked = e => {\n    if (e.target === this.graphControl && this.props.onControlClicked) {\n      this.props.onControlClicked(e);\n      const { isHighlighting, highlightFilteredNodes, overlayResults, overlayItems } = this.props;\n      if (overlayResults) {\n        if (this.isSelectingOnOverlay) {\n          this.selectNodes(overlayItems.twins);\n          this.selectEdges(overlayItems.relationships);\n          this.isSelectingOnOverlay = false;\n        }\n      } else {\n        this.clearOverlay();\n        this.contextMenu.hideMenuItem(\"add-relationship\");\n        this.contextMenuIsOpen = false;\n      }\n      if (isHighlighting && highlightFilteredNodes) {\n        highlightFilteredNodes();\n      }\n    }\n  }\n\n  onControlDoubleClicked = e => {\n    if (e.target === this.graphControl && this.props.onControlClicked) {\n      const { overlayResults } = this.props;\n      if (overlayResults) {\n        this.clearOverlay();\n        this.props.disableOverlay();\n      }\n    }\n  }\n\n  highlightRelatedNodes() {\n    const { overlayItems, overlayResults } = this.props;\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    if (this.selectedNodes && this.selectedNodes.length > 0) {\n      cy.edges().toggleClass(\"opaque\", true);\n      let relatedNodesIds = [];\n      this.selectedNodes.forEach(selectedNodeItem => {\n        const selectedNode = cy.nodes().filter(n => n.id() === selectedNodeItem.id);\n        const connectedEdges = selectedNode.connectedEdges();\n        if (!overlayResults || (overlayItems.twins && !overlayItems.twins.some(t => t === selectedNodeItem.id))) {\n          connectedEdges.forEach(edge => {\n            cy.$id(edge.data().id).toggleClass(\"highlighted\", true);\n            cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n          });\n          const selectedNodeRelatedNodesIds = connectedEdges.map(edge =>\n            selectedNode.id() === edge.data().source ? edge.data().target : edge.data().source);\n          relatedNodesIds = relatedNodesIds.concat(selectedNodeRelatedNodesIds);\n        } else {\n          connectedEdges.forEach(edge => {\n            if (overlayItems.twins && overlayItems.twins.some(t => t === edge.data().target)) {\n              cy.$id(edge.data().id).toggleClass(\"highlighted\", true);\n              cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n            }\n          });\n        }\n        relatedNodesIds.push(selectedNode.id());\n      });\n      cy.nodes().forEach(cyNode => {\n        if (relatedNodesIds.indexOf(cyNode.id()) === -1) {\n          cy.$id(cyNode.id()).toggleClass(\"opaque\", true);\n        } else {\n          cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n        }\n      });\n    } else {\n      cy.nodes().forEach(cyNode => {\n        cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n      });\n      cy.edges().toggleClass(\"opaque\", false);\n    }\n  }\n\n  zoomToFit(avoidUpperLayer) {\n    this.graphControl.fit();\n    if (avoidUpperLayer) {\n      const fitZoom = this.graphControl.zoom();\n      this.graphControl.zoom(fitZoom * 0.85);\n      this.graphControl.pan({ x: this.graphControl.pan().x + (fitZoom * 50), y: this.graphControl.pan().y + (fitZoom * 50) });\n    }\n  }\n\n  center() {\n    this.graphControl.center();\n  }\n\n  zoomIn() {\n    let zoomLevel = this.graphControl.zoom();\n    zoomLevel += 0.15;\n    this.graphControl.zoom(zoomLevel);\n  }\n\n  zoomOut() {\n    let zoomLevel = this.graphControl.zoom();\n    if (zoomLevel > 0.3) {\n      zoomLevel -= 0.15;\n      this.graphControl.zoom(zoomLevel);\n    }\n  }\n\n  highlightNodes(nodeIds, highlightEdges) {\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    cy.edges().toggleClass(\"opaque\", true);\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"opaque\", true);\n    });\n    nodeIds.forEach(id => {\n      const selectedNode = cy.nodes().filter(n => n.id() === id);\n      cy.$id(selectedNode.id()).toggleClass(\"opaque\", false);\n      const connectedEdges = selectedNode.connectedEdges();\n      connectedEdges.forEach(edge => {\n        const relatedNodeId = id === edge.data().source ? edge.data().target : edge.data().source;\n        if (nodeIds.indexOf(relatedNodeId) !== -1) {\n          cy.$id(edge.data().id).toggleClass(\"highlighted\", highlightEdges);\n          cy.$id(edge.data().id).toggleClass(\"opaque\", false);\n        }\n      });\n    });\n  }\n\n  filterNodes = nodes => {\n    const cy = this.graphControl;\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"hide\", !nodes.some(node => node.$dtId === cyNode.id()));\n    });\n  }\n\n  clearHighlighting = () => {\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    cy.edges().toggleClass(\"opaque\", false);\n    cy.nodes().forEach(cyNode => {\n      cy.$id(cyNode.id()).toggleClass(\"highlighted\", false);\n      cy.$id(cyNode.id()).toggleClass(\"selected\", false);\n      cy.$id(cyNode.id()).toggleClass(\"opaque\", false);\n    });\n  }\n\n  emitNodeEvent = (nodeId, event) => {\n    this.graphControl.$id(nodeId).emit(event);\n  }\n\n  rightClickEdge = edgeId => {\n    this.graphControl.$id(edgeId).emit(\"cxttap\");\n    const { x, y } = this.graphControl.$id(edgeId).renderedMidpoint();\n    this.displayContextMenu(\"edge\", x, y);\n  }\n\n  clickEdge = edgeId => {\n    const cy = this.graphControl;\n    cy.edges().toggleClass(\"highlighted\", false);\n    cy.edges().toggleClass(\"opaque\", true);\n    cy.$id(edgeId).toggleClass(\"highlighted\", true);\n    cy.$id(edgeId).toggleClass(\"opaque\", false);\n  }\n\n  rightClickNode = nodeId => {\n    const { x, y } = this.graphControl.$id(nodeId).renderedPosition();\n    this.contextNode = nodeId;\n    this.displayContextMenu(\"node\", x, y, nodeId);\n  }\n\n  displayContextMenu = (type, x, y, nodeId) => {\n    this.contextMenuItems.forEach(item => {\n      const selectors = item.selector.split(\", \");\n      if (selectors.includes(type)) {\n        this.contextMenu.showMenuItem(item.id);\n      } else {\n        this.contextMenu.hideMenuItem(item.id);\n      }\n    });\n    const contextMenuEl = document.getElementsByClassName(\"cy-context-menus-cxt-menu\")[0];\n    const graphHeight = this.graphControl.height();\n    const graphWidth = this.graphControl.width();\n    const inset = {\n      top: \"auto\",\n      right: \"auto\",\n      bottom: \"auto\",\n      left: \"auto\"\n    };\n    const getPx = val => typeof val === \"string\" ? val : `${val}px`;\n    if (x > (graphWidth / 2)) {\n      inset.right = (graphWidth - x) + 10;\n    } else {\n      inset.left = x + 10;\n    }\n    if (y > (graphHeight / 2)) {\n      inset.bottom = (graphHeight - y) + 10;\n    } else {\n      inset.top = y + 10;\n    }\n\n    contextMenuEl.style.inset = `${getPx(inset.top)} ${getPx(inset.right)} ${getPx(inset.bottom)} ${getPx(inset.left)}`;\n    contextMenuEl.style.display = \"block\";\n    this.setContextMenuState(nodeId);\n  }\n\n  render() {\n    const { hideContextMenu } = this.state;\n    return (\n      <div className=\"cytoscape-wrap\">\n        <CytoscapeComponent elements={[]}\n          className={`graph-control ${hideContextMenu ? \"hide-context\" : \"\"}`}\n          stylesheet={graphStyles}\n          maxZoom={2}\n          cy={cy => {\n            if (this.graphControl !== cy) {\n              this.graphControl = cy;\n              addNavigator(this.graphControl, navigationOptions, `#${this.navControlId}`);\n              if (this.props.readOnly) {\n                return;\n              }\n\n              this.graphControl.dblclick();\n              this.graphControl.on(\"mouseover\", this.onNodeHover);\n              this.graphControl.on(\"select\", \"node\", this.onNodeSelected);\n              this.graphControl.on(\"unselect\", \"node\", this.onNodeUnselected);\n              this.graphControl.on(\"select\", \"edge\", this.onEdgeSelected);\n              this.graphControl.on(\"click\", this.onControlClicked);\n              this.graphControl.on(\"dblclick\", this.onControlDoubleClicked);\n              this.graphControl.on(\"dblclick\", \"node\", this.onNodeDoubleClicked);\n              this.graphControl.on(\"cxttap\", \"node\", this.onNodeRightClick);\n              this.graphControl.on(\"cxttap\", this.onControlRightClick);\n              this.graphControl.on(\"mouseout\", this.onNodeUnhover);\n              this.graphControl.on(\"mousedown\", this.onNodeUnhover);\n            }\n          }} />\n        <div className=\"navigator-container\">\n          <div id={this.navControlId} className=\"graph-navigator\" role=\"presentation\" />\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}