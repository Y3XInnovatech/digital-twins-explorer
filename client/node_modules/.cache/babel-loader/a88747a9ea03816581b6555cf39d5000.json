{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, warnDeprecations, getId, KeyCodes, classNamesFunction, getNativeProps, inputProperties } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'SearchBox';\nvar SearchBoxBase = /** @class */function (_super) {\n  __extends(SearchBoxBase, _super);\n  function SearchBoxBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._rootElement = React.createRef();\n    _this._inputElement = React.createRef();\n    _this._onClickFocus = function () {\n      var inputElement = _this._inputElement.current;\n      if (inputElement) {\n        _this.focus();\n        inputElement.selectionStart = inputElement.selectionEnd = 0;\n      }\n    };\n    _this._onFocusCapture = function (ev) {\n      _this.setState({\n        hasFocus: true\n      });\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n    };\n    _this._onClearClick = function (ev) {\n      var clearButtonProps = _this.props.clearButtonProps;\n      if (clearButtonProps && clearButtonProps.onClick) {\n        clearButtonProps.onClick(ev);\n      }\n      if (!ev.defaultPrevented) {\n        _this._onClear(ev);\n      }\n    };\n    _this._onKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.escape:\n          _this.props.onEscape && _this.props.onEscape(ev);\n          // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key\n          // to propagate from the empty search box to a parent element such as a dialog, etc.\n          if (_this.state.value && !ev.defaultPrevented) {\n            _this._onClear(ev);\n          }\n          break;\n        case KeyCodes.enter:\n          if (_this.props.onSearch) {\n            _this.props.onSearch(_this.state.value);\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n          break;\n        default:\n          _this.props.onKeyDown && _this.props.onKeyDown(ev);\n          if (ev.defaultPrevented) {\n            ev.stopPropagation();\n          }\n          break;\n      }\n    };\n    _this._onBlur = function (ev) {\n      _this.setState({\n        hasFocus: false\n      });\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n    };\n    _this._onInputChange = function (ev) {\n      var value = ev.target.value;\n      if (value === _this._latestValue) {\n        return;\n      }\n      _this._latestValue = value;\n      _this.setState({\n        value: value\n      });\n      _this._callOnChange(ev, value);\n    };\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      labelText: 'placeholder',\n      defaultValue: 'value'\n    });\n    _this._latestValue = props.value || '';\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this.state = {\n      value: _this._latestValue,\n      hasFocus: false\n    };\n    return _this;\n  }\n  SearchBoxBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.value !== undefined) {\n      this._latestValue = newProps.value;\n      // If the user passes in null, substitute an empty string\n      // (passing null is not allowed per typings, but users might do it anyway)\n      this.setState({\n        value: newProps.value || ''\n      });\n    }\n  };\n  SearchBoxBase.prototype.render = function () {\n    var _a = this.props,\n      ariaLabel = _a.ariaLabel,\n      placeholder = _a.placeholder,\n      className = _a.className,\n      disabled = _a.disabled,\n      underlined = _a.underlined,\n      styles = _a.styles,\n      // eslint-disable-next-line deprecation/deprecation\n      labelText = _a.labelText,\n      theme = _a.theme,\n      clearButtonProps = _a.clearButtonProps,\n      disableAnimation = _a.disableAnimation,\n      iconProps = _a.iconProps,\n      role = _a.role,\n      _b = _a.id,\n      id = _b === void 0 ? this._fallbackId : _b;\n    var _c = this.state,\n      value = _c.value,\n      hasFocus = _c.hasFocus;\n    var placeholderValue = placeholder !== undefined ? placeholder : labelText;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      underlined: underlined,\n      hasFocus: hasFocus,\n      disabled: disabled,\n      hasInput: value.length > 0,\n      disableAnimation: disableAnimation\n    });\n    var nativeProps = getNativeProps(this.props, inputProperties, ['className', 'placeholder', 'onFocus', 'onBlur', 'value', 'role']);\n    return React.createElement(\"div\", {\n      role: role,\n      ref: this._rootElement,\n      className: classNames.root,\n      onFocusCapture: this._onFocusCapture\n    }, React.createElement(\"div\", {\n      className: classNames.iconContainer,\n      onClick: this._onClickFocus,\n      \"aria-hidden\": true\n    }, React.createElement(Icon, __assign({\n      iconName: \"Search\"\n    }, iconProps, {\n      className: classNames.icon\n    }))), React.createElement(\"input\", __assign({}, nativeProps, {\n      id: id,\n      className: classNames.field,\n      placeholder: placeholderValue,\n      onChange: this._onInputChange,\n      onInput: this._onInputChange,\n      onBlur: this._onBlur,\n      onKeyDown: this._onKeyDown,\n      value: value,\n      disabled: disabled,\n      role: \"searchbox\",\n      \"aria-label\": ariaLabel,\n      ref: this._inputElement\n    })), value.length > 0 && React.createElement(\"div\", {\n      className: classNames.clearButton\n    }, React.createElement(IconButton, __assign({\n      onBlur: this._onBlur,\n      styles: {\n        root: {\n          height: 'auto'\n        },\n        icon: {\n          fontSize: '12px'\n        }\n      },\n      iconProps: {\n        iconName: 'Clear'\n      }\n    }, clearButtonProps, {\n      onClick: this._onClearClick\n    }))));\n  };\n  /**\n   * Sets focus to the search box input field\n   */\n  SearchBoxBase.prototype.focus = function () {\n    if (this._inputElement.current) {\n      this._inputElement.current.focus();\n    }\n  };\n  /**\n   * Returns whether or not the SearchBox has focus\n   */\n  SearchBoxBase.prototype.hasFocus = function () {\n    return !!this.state.hasFocus;\n  };\n  SearchBoxBase.prototype._onClear = function (ev) {\n    this.props.onClear && this.props.onClear(ev);\n    if (!ev.defaultPrevented) {\n      this._latestValue = '';\n      this.setState({\n        value: ''\n      });\n      this._callOnChange(undefined, '');\n      ev.stopPropagation();\n      ev.preventDefault();\n      this.focus();\n    }\n  };\n  SearchBoxBase.prototype._callOnChange = function (ev, newValue) {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n      onChange = _a.onChange,\n      onChanged = _a.onChanged;\n    // Call @deprecated method.\n    if (onChanged) {\n      onChanged(newValue);\n    }\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n  };\n  SearchBoxBase.defaultProps = {\n    disableAnimation: false,\n    clearButtonProps: {\n      ariaLabel: 'Clear text'\n    }\n  };\n  return SearchBoxBase;\n}(React.Component);\nexport { SearchBoxBase };","map":{"version":3,"sources":["components/SearchBox/SearchBox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ISearchBoxProps, ISearchBoxStyleProps, ISearchBoxStyles } from './SearchBox.types';\nimport {\n  initializeComponentRef,\n  warnDeprecations,\n  getId,\n  KeyCodes,\n  classNamesFunction,\n  getNativeProps,\n  inputProperties,\n} from '../../Utilities';\n\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\n\nconst getClassNames = classNamesFunction<ISearchBoxStyleProps, ISearchBoxStyles>();\nconst COMPONENT_NAME = 'SearchBox';\n\nexport interface ISearchBoxState {\n  value?: string;\n  hasFocus?: boolean;\n}\n\nexport class SearchBoxBase extends React.Component<ISearchBoxProps, ISearchBoxState> {\n  public static defaultProps: Pick<ISearchBoxProps, 'disableAnimation' | 'clearButtonProps'> = {\n    disableAnimation: false,\n    clearButtonProps: { ariaLabel: 'Clear text' },\n  };\n\n  private _rootElement = React.createRef<HTMLDivElement>();\n  private _inputElement = React.createRef<HTMLInputElement>();\n  private _latestValue: string;\n  private _fallbackId: string;\n\n  public constructor(props: ISearchBoxProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      labelText: 'placeholder',\n      defaultValue: 'value',\n    });\n\n    this._latestValue = props.value || '';\n    this._fallbackId = getId(COMPONENT_NAME);\n\n    this.state = {\n      value: this._latestValue,\n      hasFocus: false,\n    };\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: ISearchBoxProps): void {\n    if (newProps.value !== undefined) {\n      this._latestValue = newProps.value;\n      // If the user passes in null, substitute an empty string\n      // (passing null is not allowed per typings, but users might do it anyway)\n      this.setState({\n        value: newProps.value || '',\n      });\n    }\n  }\n\n  public render() {\n    const {\n      ariaLabel,\n      placeholder,\n      className,\n      disabled,\n      underlined,\n      styles,\n      // eslint-disable-next-line deprecation/deprecation\n      labelText,\n      theme,\n      clearButtonProps,\n      disableAnimation,\n      iconProps,\n      role,\n      id = this._fallbackId,\n    } = this.props;\n    const { value, hasFocus } = this.state;\n    const placeholderValue = placeholder !== undefined ? placeholder : labelText;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      underlined,\n      hasFocus,\n      disabled,\n      hasInput: value!.length > 0,\n      disableAnimation,\n    });\n\n    const nativeProps = getNativeProps<React.InputHTMLAttributes<HTMLInputElement>>(this.props, inputProperties, [\n      'className',\n      'placeholder',\n      'onFocus',\n      'onBlur',\n      'value',\n      'role',\n    ]);\n\n    return (\n      <div role={role} ref={this._rootElement} className={classNames.root} onFocusCapture={this._onFocusCapture}>\n        <div className={classNames.iconContainer} onClick={this._onClickFocus} aria-hidden={true}>\n          <Icon iconName=\"Search\" {...iconProps} className={classNames.icon} />\n        </div>\n        <input\n          {...nativeProps}\n          id={id}\n          className={classNames.field}\n          placeholder={placeholderValue}\n          onChange={this._onInputChange}\n          onInput={this._onInputChange}\n          onBlur={this._onBlur}\n          onKeyDown={this._onKeyDown}\n          value={value}\n          disabled={disabled}\n          role=\"searchbox\"\n          aria-label={ariaLabel}\n          ref={this._inputElement}\n        />\n        {value!.length > 0 && (\n          <div className={classNames.clearButton}>\n            <IconButton\n              onBlur={this._onBlur}\n              styles={{ root: { height: 'auto' }, icon: { fontSize: '12px' } }}\n              iconProps={{ iconName: 'Clear' }}\n              {...clearButtonProps}\n              onClick={this._onClearClick}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus to the search box input field\n   */\n  public focus() {\n    if (this._inputElement.current) {\n      this._inputElement.current.focus();\n    }\n  }\n\n  /**\n   * Returns whether or not the SearchBox has focus\n   */\n  public hasFocus(): boolean {\n    return !!this.state.hasFocus;\n  }\n\n  private _onClear(ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement> | React.KeyboardEvent<HTMLElement>) {\n    this.props.onClear && this.props.onClear(ev);\n    if (!ev.defaultPrevented) {\n      this._latestValue = '';\n      this.setState({\n        value: '',\n      });\n      this._callOnChange(undefined, '');\n      ev.stopPropagation();\n      ev.preventDefault();\n\n      this.focus();\n    }\n  }\n\n  private _onClickFocus = () => {\n    const inputElement = this._inputElement.current;\n    if (inputElement) {\n      this.focus();\n      inputElement.selectionStart = inputElement.selectionEnd = 0;\n    }\n  };\n\n  private _onFocusCapture = (ev: React.FocusEvent<HTMLElement>) => {\n    this.setState({\n      hasFocus: true,\n    });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  private _onClearClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { clearButtonProps } = this.props;\n\n    if (clearButtonProps && clearButtonProps.onClick) {\n      clearButtonProps.onClick(ev);\n    }\n\n    if (!ev.defaultPrevented) {\n      this._onClear(ev);\n    }\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    switch (ev.which) {\n      case KeyCodes.escape:\n        this.props.onEscape && this.props.onEscape(ev);\n        // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key\n        // to propagate from the empty search box to a parent element such as a dialog, etc.\n        if (this.state.value && !ev.defaultPrevented) {\n          this._onClear(ev);\n        }\n        break;\n\n      case KeyCodes.enter:\n        if (this.props.onSearch) {\n          this.props.onSearch(this.state.value);\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n        break;\n\n      default:\n        this.props.onKeyDown && this.props.onKeyDown(ev);\n        if (ev.defaultPrevented) {\n          ev.stopPropagation();\n        }\n        break;\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement>): void => {\n    this.setState({\n      hasFocus: false,\n    });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n  };\n\n  private _onInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    const value = ev.target.value;\n\n    if (value === this._latestValue) {\n      return;\n    }\n    this._latestValue = value;\n\n    this.setState({ value });\n    this._callOnChange(ev, value);\n  };\n\n  private _callOnChange(ev?: React.ChangeEvent<HTMLInputElement>, newValue?: string): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { onChange, onChanged } = this.props;\n\n    // Call @deprecated method.\n    if (onChanged) {\n      onChanged(newValue);\n    }\n\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}