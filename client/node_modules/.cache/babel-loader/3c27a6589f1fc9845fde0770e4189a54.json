{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter, __extends, __generator } from \"tslib\";\n// BaseRequestPolicy has a protected constructor.\n/* eslint-disable @typescript-eslint/no-useless-constructor */\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function ndJsonPolicy() {\n  return {\n    create: function (nextPolicy, options) {\n      return new NdJsonPolicy(nextPolicy, options);\n    }\n  };\n}\n/**\n * NdJsonPolicy that formats a JSON array as newline-delimited JSON\n */\nvar NdJsonPolicy = /** @class */function (_super) {\n  __extends(NdJsonPolicy, _super);\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   */\n  function NdJsonPolicy(nextPolicy, options) {\n    return _super.call(this, nextPolicy, options) || this;\n  }\n  /**\n   * Sends a request.\n   */\n  NdJsonPolicy.prototype.sendRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var body;\n      return __generator(this, function (_a) {\n        // There currently isn't a good way to bypass the serializer\n        if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n          body = JSON.parse(request.body);\n          if (Array.isArray(body)) {\n            request.body = body.map(function (item) {\n              return JSON.stringify(item) + \"\\n\";\n            }).join(\"\");\n          }\n        }\n        return [2 /*return*/, this._nextPolicy.sendRequest(request)];\n      });\n    });\n  };\n  return NdJsonPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"sources":["../../../src/policies/ndJsonPolicy.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA;AACA;AAEA,SACE,iBAAiB,QAIZ,iBAAiB;AAIxB,OAAM,SAAU,YAAY,CAAA,EAAA;EAC1B,OAAO;IACL,MAAM,EAAE,SAAA,CAAC,UAAyB,EAAE,OAA6B,EAAA;MAC/D,OAAO,IAAI,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC;IAC9C;GACD;AACH;AAEA;;AAEG;AACH,IAAA,YAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA2B,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;EACzB;;AAEG;EACH,SAAA,YAAA,CAAY,UAAyB,EAAE,OAA6B,EAAA;WAClE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAU,EAAE,OAAO,CAAC,IAAA,IAAA;EAC5B;EAEA;;AAEG;EACU,YAAA,CAAA,SAAA,CAAA,WAAW,GAAxB,UAAyB,OAAwB,EAAA;;;;QAC/C;QACA,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;UAC9D,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;UACrC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAC,IAAI,EAAA;cAAK,OAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI;YAA3B,CAA2B,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;UACxE;QACF;QACD,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;;;GAC7C;EACH,OAAA,YAAC;AAAD,CAAC,CArB0B,iBAAiB,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// BaseRequestPolicy has a protected constructor.\n/* eslint-disable @typescript-eslint/no-useless-constructor */\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RequestPolicyFactory\n} from \"./requestPolicy\";\nimport { WebResourceLike } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\n\nexport function ndJsonPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new NdJsonPolicy(nextPolicy, options);\n    }\n  };\n}\n\n/**\n * NdJsonPolicy that formats a JSON array as newline-delimited JSON\n */\nclass NdJsonPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends a request.\n   */\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    // There currently isn't a good way to bypass the serializer\n    if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n      const body = JSON.parse(request.body);\n      if (Array.isArray(body)) {\n        request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n      }\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}