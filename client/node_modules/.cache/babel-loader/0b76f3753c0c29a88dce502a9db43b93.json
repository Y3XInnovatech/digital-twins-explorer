{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nvar getColorPickerGridCellButtonClassNames = memoizeFunction(function (theme, className, variantClassName, iconClassName, menuIconClassName, disabled, checked, expanded, isSplit) {\n  var styles = getActionButtonStyles(theme);\n  return mergeStyleSets({\n    root: ['ms-Button', styles.root, variantClassName, className, checked && ['is-checked', styles.rootChecked], disabled && ['is-disabled', styles.rootDisabled], !disabled && !checked && {\n      selectors: {\n        ':hover': styles.rootHovered,\n        ':focus': styles.rootFocused,\n        ':active': styles.rootPressed\n      }\n    }, disabled && checked && [styles.rootCheckedDisabled], !disabled && checked && {\n      selectors: {\n        ':hover': styles.rootCheckedHovered,\n        ':active': styles.rootCheckedPressed\n      }\n    }],\n    flexContainer: ['ms-Button-flexContainer', styles.flexContainer]\n  });\n});\nvar getClassNames = classNamesFunction();\nvar ColorCell = /** @class */function (_super) {\n  __extends(ColorCell, _super);\n  function ColorCell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return ColorCell;\n}(ButtonGridCell);\nvar ColorPickerGridCellBase = /** @class */function (_super) {\n  __extends(ColorPickerGridCellBase, _super);\n  function ColorPickerGridCellBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Render the core of a color cell\n     * @returns - Element representing the core of the item\n     */\n    _this._onRenderColorOption = function (colorOption) {\n      // Build an SVG for the cell with the given shape and color properties\n      return React.createElement(\"svg\", {\n        className: _this._classNames.svg,\n        viewBox: \"0 0 20 20\",\n        fill: getColorFromString(colorOption.color).str\n      }, _this.props.circle ? React.createElement(\"circle\", {\n        cx: \"50%\",\n        cy: \"50%\",\n        r: \"50%\"\n      }) : React.createElement(\"rect\", {\n        width: \"100%\",\n        height: \"100%\"\n      }));\n    };\n    return _this;\n  }\n  ColorPickerGridCellBase.prototype.render = function () {\n    var _a = this.props,\n      item = _a.item,\n      // eslint-disable-next-line deprecation/deprecation\n      _b = _a.idPrefix,\n      // eslint-disable-next-line deprecation/deprecation\n      idPrefix = _b === void 0 ? this.props.id : _b,\n      selected = _a.selected,\n      disabled = _a.disabled,\n      styles = _a.styles,\n      theme = _a.theme,\n      circle = _a.circle,\n      color = _a.color,\n      onClick = _a.onClick,\n      onHover = _a.onHover,\n      onFocus = _a.onFocus,\n      onMouseEnter = _a.onMouseEnter,\n      onMouseMove = _a.onMouseMove,\n      onMouseLeave = _a.onMouseLeave,\n      onWheel = _a.onWheel,\n      onKeyDown = _a.onKeyDown,\n      height = _a.height,\n      width = _a.width,\n      borderWidth = _a.borderWidth;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      disabled: disabled,\n      selected: selected,\n      circle: circle,\n      isWhite: this._isWhiteCell(color),\n      height: height,\n      width: width,\n      borderWidth: borderWidth\n    });\n    return React.createElement(ColorCell, {\n      item: item,\n      id: idPrefix + \"-\" + item.id + \"-\" + item.index,\n      key: item.id,\n      disabled: disabled,\n      role: 'gridcell',\n      onRenderItem: this._onRenderColorOption,\n      selected: selected,\n      onClick: onClick,\n      onHover: onHover,\n      onFocus: onFocus,\n      label: item.label,\n      className: this._classNames.colorCell,\n      getClassNames: getColorPickerGridCellButtonClassNames,\n      index: item.index,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onWheel: onWheel,\n      onKeyDown: onKeyDown\n    });\n  };\n  /**\n   * Validate if the cell's color is white or not to apply whiteCell style\n   * @param inputColor - The color of the current cell\n   * @returns - Whether the cell's color is white or not.\n   */\n  ColorPickerGridCellBase.prototype._isWhiteCell = function (inputColor) {\n    var color = getColorFromString(inputColor);\n    return color.hex === 'ffffff';\n  };\n  ColorPickerGridCellBase.defaultProps = {\n    circle: true,\n    disabled: false,\n    selected: false\n  };\n  return ColorPickerGridCellBase;\n}(React.PureComponent);\nexport { ColorPickerGridCellBase };","map":{"version":3,"sources":["components/SwatchColorPicker/ColorPickerGridCell.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAiB,cAAc,QAAQ,eAAe;AACtD,SAAS,kBAAkB,EAAE,eAAe,QAAQ,iBAAiB;AACrE,SAAS,kBAAkB,QAAQ,0CAA0C;AAC7E,SAAS,cAAc,QAAQ,2CAA2C;AAE1E,SAAS,SAAS,IAAI,qBAAqB,QAAQ,4CAA4C;AAS/F,IAAM,sCAAsC,GAAG,eAAe,CAC5D,UACE,KAAa,EACb,SAAiB,EACjB,gBAAwB,EACxB,aAAiC,EACjC,iBAAqC,EACrC,QAAiB,EACjB,OAAgB,EAChB,QAAiB,EACjB,OAA4B,EAAA;EAE5B,IAAM,MAAM,GAAG,qBAAqB,CAAC,KAAK,CAAC;EAC3C,OAAO,cAAc,CAAC;IACpB,IAAI,EAAE,CACJ,WAAW,EACX,MAAM,CAAC,IAAI,EACX,gBAAgB,EAChB,SAAS,EACT,OAAO,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,WAAW,CAAC,EAC7C,QAAQ,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,YAAY,CAAC,EAChD,CAAC,QAAQ,IACP,CAAC,OAAO,IAAI;MACV,SAAS,EAAE;QACT,QAAQ,EAAE,MAAM,CAAC,WAAW;QAC5B,QAAQ,EAAE,MAAM,CAAC,WAAW;QAC5B,SAAS,EAAE,MAAM,CAAC;MACnB;KACF,EACH,QAAQ,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,EACnD,CAAC,QAAQ,IACP,OAAO,IAAI;MACT,SAAS,EAAE;QACT,QAAQ,EAAE,MAAM,CAAC,kBAAkB;QACnC,SAAS,EAAE,MAAM,CAAC;MACnB;KACF,CACJ;IACD,aAAa,EAAE,CAAC,yBAAyB,EAAE,MAAM,CAAC,aAAa;GAChE,CAAC;AACJ,CAAC,CACF;AAED,IAAM,aAAa,GAAG,kBAAkB,CAAA,CAA8D;AAEtG,IAAA,SAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAwB,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;EAAxB,SAAA,SAAA,CAAA,EAAA;;EAAgG;EAAA,OAAA,SAAC;AAAD,CAAC,CAAzE,cAAc,CAAA;AAEtC,IAAA,uBAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA6C,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA;EAA7C,SAAA,uBAAA,CAAA,EAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IAqEE;;;AAGG;IACK,KAAA,CAAA,oBAAoB,GAAG,UAAC,WAA4B,EAAA;MAC1D;MACA,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QACE,SAAS,EAAE,KAAI,CAAC,WAAW,CAAC,GAAG;QAC/B,OAAO,EAAC,WAAW;QACnB,IAAI,EAAE,kBAAkB,CAAC,WAAW,CAAC,KAAe,CAAE,CAAC;MAAG,CAAA,EAEzD,KAAI,CAAC,KAAK,CAAC,MAAM,GAAG,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;QAAQ,EAAE,EAAC,KAAK;QAAC,EAAE,EAAC,KAAK;QAAC,CAAC,EAAC;MAAK,CAAA,CAAG,GAAG,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;QAAM,KAAK,EAAC,MAAM;QAAC,MAAM,EAAC;MAAM,CAAA,CAAG,CAC3F;IAEV,CAAC;;EAWH;EAtFS,uBAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACQ,IAAA,EAAA,GAAA,IAAA,CAAA,KAqBQ;MApBZ,IAAA,GAAA,EAAA,CAAA,IAAI;MACJ;MACA,EAAA,GAAA,EAAA,CAAA,QAAwB;MADxB;MACA,QAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,EAAA,GAAA,EAAwB;MACxB,QAAA,GAAA,EAAA,CAAA,QAAQ;MACR,QAAA,GAAA,EAAA,CAAA,QAAQ;MACR,MAAA,GAAA,EAAA,CAAA,MAAM;MACN,KAAA,GAAA,EAAA,CAAA,KAAK;MACL,MAAA,GAAA,EAAA,CAAA,MAAM;MACN,KAAA,GAAA,EAAA,CAAA,KAAK;MACL,OAAA,GAAA,EAAA,CAAA,OAAO;MACP,OAAA,GAAA,EAAA,CAAA,OAAO;MACP,OAAA,GAAA,EAAA,CAAA,OAAO;MACP,YAAA,GAAA,EAAA,CAAA,YAAY;MACZ,WAAA,GAAA,EAAA,CAAA,WAAW;MACX,YAAA,GAAA,EAAA,CAAA,YAAY;MACZ,OAAA,GAAA,EAAA,CAAA,OAAO;MACP,SAAA,GAAA,EAAA,CAAA,SAAS;MACT,MAAA,GAAA,EAAA,CAAA,MAAM;MACN,KAAA,GAAA,EAAA,CAAA,KAAK;MACL,WAAA,GAAA,EAAA,CAAA,WACY;IAEd,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAO,EAAE;MACxC,KAAK,EAAE,KAAM;MACb,QAAQ,EAAA,QAAA;MACR,QAAQ,EAAA,QAAA;MACR,MAAM,EAAA,MAAA;MACN,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;MACjC,MAAM,EAAA,MAAA;MACN,KAAK,EAAA,KAAA;MACL,WAAW,EAAA;KACZ,CAAC;IAEF,OACE,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;MACR,IAAI,EAAE,IAAI;MACV,EAAE,EAAK,QAAQ,GAAA,GAAA,GAAI,IAAI,CAAC,EAAE,GAAA,GAAA,GAAI,IAAI,CAAC,KAAO;MAC1C,GAAG,EAAE,IAAI,CAAC,EAAE;MACZ,QAAQ,EAAE,QAAQ;MAClB,IAAI,EAAE,UAAU;MAChB,YAAY,EAAE,IAAI,CAAC,oBAAoB;MACvC,QAAQ,EAAE,QAAQ;MAClB,OAAO,EAAE,OAAO;MAChB,OAAO,EAAE,OAAO;MAChB,OAAO,EAAE,OAAO;MAChB,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS;MACrC,aAAa,EAAE,sCAAsC;MACrD,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,YAAY,EAAE,YAAY;MAC1B,WAAW,EAAE,WAAW;MACxB,YAAY,EAAE,YAAY;MAC1B,OAAO,EAAE,OAAO;MAChB,SAAS,EAAE;IAAS,CAAA,CACpB;EAEN,CAAC;EAmBD;;;;AAIG;EACK,uBAAA,CAAA,SAAA,CAAA,YAAY,GAApB,UAAqB,UAA8B,EAAA;IACjD,IAAM,KAAK,GAAG,kBAAkB,CAAC,UAAW,CAAC;IAC7C,OAAO,KAAM,CAAC,GAAG,KAAK,QAAQ;EAChC,CAAC;EA7Fa,uBAAA,CAAA,YAAY,GAAuC;IAC/D,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE;GACX;EA0FH,OAAA,uBAAC;CAAA,CA/F4C,KAAK,CAAC,aAAa,CAAA;SAAnD,uBAAuB","sourcesContent":["import * as React from 'react';\nimport { ITheme, mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { IButtonGridCellProps } from '../../utilities/ButtonGrid/ButtonGridCell.types';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nimport { IButtonClassNames } from '../Button/BaseButton.classNames';\nimport {\n  IColorCellProps,\n  IColorPickerGridCellProps,\n  IColorPickerGridCellStyleProps,\n  IColorPickerGridCellStyles,\n} from './ColorPickerGridCell.types';\n\nconst getColorPickerGridCellButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined,\n  ): IButtonClassNames => {\n    const styles = getActionButtonStyles(theme);\n    return mergeStyleSets({\n      root: [\n        'ms-Button',\n        styles.root,\n        variantClassName,\n        className,\n        checked && ['is-checked', styles.rootChecked],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed,\n            },\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed,\n            },\n          },\n      ],\n      flexContainer: ['ms-Button-flexContainer', styles.flexContainer],\n    });\n  },\n);\n\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\n\nclass ColorCell extends ButtonGridCell<IColorCellProps, IButtonGridCellProps<IColorCellProps>> {}\n\nexport class ColorPickerGridCellBase extends React.PureComponent<IColorPickerGridCellProps, {}> {\n  public static defaultProps: Partial<IColorPickerGridCellProps> = {\n    circle: true,\n    disabled: false,\n    selected: false,\n  };\n\n  private _classNames: { [key in keyof IColorPickerGridCellStyles]: string };\n\n  public render(): JSX.Element {\n    const {\n      item,\n      // eslint-disable-next-line deprecation/deprecation\n      idPrefix = this.props.id,\n      selected,\n      disabled,\n      styles,\n      theme,\n      circle,\n      color,\n      onClick,\n      onHover,\n      onFocus,\n      onMouseEnter,\n      onMouseMove,\n      onMouseLeave,\n      onWheel,\n      onKeyDown,\n      height,\n      width,\n      borderWidth,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      disabled,\n      selected,\n      circle,\n      isWhite: this._isWhiteCell(color),\n      height,\n      width,\n      borderWidth,\n    });\n\n    return (\n      <ColorCell\n        item={item}\n        id={`${idPrefix}-${item.id}-${item.index}`}\n        key={item.id}\n        disabled={disabled}\n        role={'gridcell'}\n        onRenderItem={this._onRenderColorOption}\n        selected={selected}\n        onClick={onClick}\n        onHover={onHover}\n        onFocus={onFocus}\n        label={item.label}\n        className={this._classNames.colorCell}\n        getClassNames={getColorPickerGridCellButtonClassNames}\n        index={item.index}\n        onMouseEnter={onMouseEnter}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n        onWheel={onWheel}\n        onKeyDown={onKeyDown}\n      />\n    );\n  }\n\n  /**\n   * Render the core of a color cell\n   * @returns - Element representing the core of the item\n   */\n  private _onRenderColorOption = (colorOption: IColorCellProps): JSX.Element => {\n    // Build an SVG for the cell with the given shape and color properties\n    return (\n      <svg\n        className={this._classNames.svg}\n        viewBox=\"0 0 20 20\"\n        fill={getColorFromString(colorOption.color as string)!.str}\n      >\n        {this.props.circle ? <circle cx=\"50%\" cy=\"50%\" r=\"50%\" /> : <rect width=\"100%\" height=\"100%\" />}\n      </svg>\n    );\n  };\n\n  /**\n   * Validate if the cell's color is white or not to apply whiteCell style\n   * @param inputColor - The color of the current cell\n   * @returns - Whether the cell's color is white or not.\n   */\n  private _isWhiteCell(inputColor: string | undefined): boolean {\n    const color = getColorFromString(inputColor!);\n    return color!.hex === 'ffffff';\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}